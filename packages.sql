--
-- PKG_CLM_CAL  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_clm_cal IS
    /******************************************************************************
       NAME:       pkg_clm_cal
       PURPOSE:    Hold all procedures, functions etc need to Calculate Claimable Value
    
       REVISIONS:
       Ver         Date           Created By                      Description
       ---------  ----------    -----------------------        ------------------------------------
       1.0        19-08-2009     Syed Md. Musha                    1. Calculate claim amount
    
       Change History :
        Date      Changed By                            Description
       ------    ------------                          -----------------------------
    
    
    ******************************************************************************/
    TYPE rec_clm_amt IS RECORD(
         pgid            ins_p_proposal.pgid%TYPE
        ,policy_no       ins_p_proposal.policy_no%TYPE
        ,sl_no           clm_payable_calc_detl.sl_no%TYPE
        ,product_cd      clm_payable_calc_detl.product_cd%TYPE
        ,clm_cause_cd    clm_payable_calc_detl.clm_cause_cd%TYPE
        ,clm_detl_cd     clm_payable_calc_detl.clm_detl_cd%TYPE
        ,ben_party_cd    clm_payable_calc_detl.ben_party_cd%TYPE
        ,product_nm      ins_product.product_nm%TYPE
        ,clm_cause_nm    clm_claim_cause.clm_cause_nm%TYPE
        ,clm_detl_nm     clm_claim_cause_detl.clm_detl_nm%TYPE
        ,party_nm        clm_party.party_nm%TYPE
        ,policy_clm_amt  clm_payable_calc_detl.policy_clm_amt%TYPE
        ,suppprd_clm_amt clm_payable_calc_detl.suppprd_clm_amt%TYPE
        ,suppben_clm_amt clm_payable_calc_detl.suppben_clm_amt%TYPE);

    TYPE type_tab_supp IS TABLE OF rec_clm_amt INDEX BY BINARY_INTEGER;

    TYPE ref_clm_amt IS REF CURSOR RETURN rec_clm_amt;

    TYPE rec_clm_det IS RECORD(
         pgid            ins_p_proposal.pgid%TYPE
        ,policy_no       ins_p_proposal.policy_no%TYPE
        ,product_cd      clm_payable_calc_detl.product_cd%TYPE
        ,sl_no           clm_payable_calc_detl.sl_no%TYPE
        ,clm_cause_cd    clm_payable_calc_detl.clm_cause_cd%TYPE
        ,clm_detl_cd     clm_payable_calc_detl.clm_detl_cd%TYPE
        ,ben_party_cd    clm_payable_calc_detl.ben_party_cd%TYPE
        ,supp_product_cd clm_payable_calc_detl.supp_product_cd%TYPE
        ,supp_ben_cd     clm_payable_calc_detl.supp_ben_cd%TYPE
        ,product_nm      ins_product.product_nm%TYPE
        ,clm_cause_nm    clm_claim_cause.clm_cause_nm%TYPE
        ,clm_detl_nm     clm_claim_cause_detl.clm_detl_nm%TYPE
        ,party_nm        clm_party.party_nm%TYPE
        ,policy_clm_amt  clm_payable_calc_detl.policy_clm_amt%TYPE
        ,suppprd_clm_amt clm_payable_calc_detl.suppprd_clm_amt%TYPE
        ,suppben_clm_amt clm_payable_calc_detl.suppben_clm_amt%TYPE
        ,pay_type_cd     clm_payable_calc_detl.pay_type_cd%TYPE
        ,pay_mode_cd     clm_payable_calc_detl.pay_mode_cd%TYPE
        ,payment_dt      clm_payable_calc_detl.payment_dt%TYPE);

    TYPE type_tab_clmdet IS TABLE OF rec_clm_det INDEX BY BINARY_INTEGER;

    v_clm_det type_tab_clmdet;

    /*---This procedure generate policy list with applicable benefit need to be calculated---*/
    PROCEDURE pro_clm_policy_list(p_policy_no IN ins_p_proposal.policy_no%TYPE
                                 ,
                                  -- Contain Policy No
                                  p_product_cd IN ins_product.product_cd%TYPE
                                 ,
                                  -- Contain Product Code
                                  p_office_cd IN hrm_office.office_cd%TYPE
                                 ,
                                  -- Contain Office Code
                                  p_descendant_flag IN VARCHAR2
                                 ,
                                  -- IF Y Then consider descend office
                                  p_cause_cd IN clm_product_claim_detl.clm_cause_cd%TYPE
                                 ,
                                  -- Contain claim cause e.g. maturity, death
                                  p_payment_type IN clm_product_claim_detl.payment_type%TYPE
                                 ,
                                  -- Contain payment type e.g. single,stage,pension
                                  p_start_dt IN DATE
                                 ,
                                  -- Contain Start Date Of The User Given Date Range
                                  p_end_dt IN DATE
                                 ,
                                  -- Contain End Date Of The User Given Date Range
                                  p_user IN VARCHAR2
                                 , --Contain input user
                                  --p_ref_clm_amt         IN OUT        pkg_clm_cal.ref_clm_amt,                                -- Contain all calculate policy with amount
                                  p_process_cnt OUT NUMBER
                                 , -- Return no of record processed
                                  p_error       OUT VARCHAR2 -- Return Error Message If Raise
                                  );

    /*--- This procedure calculate claimable amount for product of a policy ---*/
    PROCEDURE pro_clm_cal(p_policy_no IN ins_p_proposal.policy_no%TYPE
                         ,
                          -- contain policy no
                          p_noof_payment_yr IN clm_product_claim_detl.payment_year%TYPE DEFAULT 0
                         ,
                          -- Contain no of payment year (in case of stage maturity)
                          p_product_cd IN clm_product_claim_detl.product_cd%TYPE
                         ,
                          -- contain product code
                          p_sl_no IN clm_product_claim_detl.sl_no%TYPE
                         ,
                          -- contain serial no
                          p_clm_cause_cd IN clm_product_claim_detl.clm_cause_cd%TYPE
                         ,
                          -- contain claim cause code
                          p_clm_detl_cd IN clm_product_claim_detl.clm_detl_cd%TYPE
                         ,
                          -- contain claim cause detail code
                          p_ben_party_cd IN clm_product_claim_detl.ben_party_cd%TYPE
                         ,
                          -- contain benefited party code
                          p_commutation_per IN clm_product_claim_detl.commutation_per%TYPE DEFAULT 0
                         ,
                          -- Contain comutation percentage (in case of pension policy)
                          p_start_dt  IN DATE
                         ,p_end_dt    IN DATE
                         ,p_clm_value OUT NUMBER
                         , -- will contain claimable amount
                          p_error     OUT VARCHAR2 -- return error message if raise
                          );

    /*--- This procedure calculate claimable amount for supplimentary product of a policy ---*/
    PROCEDURE pro_supp_prod_clm_cal(p_policy_no IN ins_p_proposal.policy_no%TYPE
                                   ,
                                    -- contain policy no
                                    --p_clm_cause_cd        IN               clm_supp_prod_claim_detl.clm_cause_cd%TYPE,         -- contain claim cause code
                                    --p_clm_detl_cd         IN               clm_supp_prod_claim_detl.clm_detl_cd%TYPE,          -- contain claim cause detail code
                                    --p_ben_party_cd        IN               clm_supp_prod_claim_detl.ben_party_code%TYPE,       -- contain benefited party code
                                    --p_noof_payment_yr     IN               clm_supp_prod_claim_detl.payment_year%TYPE,         -- Contain no of payment year (in case of stage benefit)
                                    p_start_dt IN DATE
                                   ,p_end_dt   IN DATE
                                   ,
                                    --p_suppprd_clm_value   OUT              NUMBER,                                               -- will contain claimable amount for supplimentary product
                                    p_error OUT VARCHAR2 -- return error message if raise
                                    );

    /*--- This procedure calculate claimable amount for supplimentary benefit of a policy ---*/
    PROCEDURE pro_supp_ben_clm_cal(p_policy_no IN ins_p_proposal.policy_no%TYPE
                                  ,
                                   -- contain policy no
                                   --p_clm_cause_cd        IN               clm_supp_ben_claim_detl.clm_cause_cd%TYPE,          -- contain claim cause code
                                   --p_clm_detl_cd         IN               clm_supp_ben_claim_detl.clm_detl_cd%TYPE,           -- contain claim cause detail code
                                   --p_ben_party_cd        IN               clm_supp_ben_claim_detl.ben_party_code%TYPE,        -- contain benefited party code
                                   --p_noof_payment_yr     IN               clm_supp_ben_claim_detl.payment_year%TYPE,            -- Contain no of payment year (in case of stage benefit)
                                   p_office_cd IN hrm_office.office_cd%TYPE
                                  ,
                                   -- Contain Office Code
                                   p_descendant_flag IN VARCHAR2
                                  ,
                                   -- IF Y Then consider descend office
                                   p_start_dt IN DATE
                                  ,
                                   -- Contain start date of user geven date range
                                   p_end_dt IN DATE
                                  ,
                                   -- Contain end date of user geven date range
                                   --p_suppben_clm_value   OUT              NUMBER,                                               -- will contain claimable amount for supplimentary product
                                   p_user        IN VARCHAR2
                                  , --Contain input user
                                   p_process_cnt OUT NUMBER
                                  , -- Return no of record processed
                                   p_error       OUT VARCHAR2 -- return error message if raise
                                   );

    /*This procedure calculate paidup pension*/
    PROCEDURE pro_paidup_pension
    (
        p_pgid       IN ins_p_proposal.pgid%TYPE
       , --Contain pgid
        p_product_cd IN ins_product.product_cd%TYPE
       ,
        --Contain product code
        p_office_cd IN hrm_office.office_cd%TYPE
       ,
        --Contain office code
        p_descendant_flag IN VARCHAR2
       ,
        --Contain flag for descendant offfice
        p_start_dt    IN DATE
       , --Start date of the date range
        p_end_dt      IN DATE
       , --End date of the date range
        p_user        IN VARCHAR2
       , --Contain input user
        p_process_cnt OUT NUMBER
       , --Return no of record processed
        p_error       OUT VARCHAR2 --Return error message
    );

    /*This procedure calculate paid up value for all product exception pension product*/
    PROCEDURE pro_paidup_value
    (
        p_pgid       IN ins_p_proposal.pgid%TYPE
       , --Contain pgid
        p_product_cd IN ins_product.product_cd%TYPE
       ,
        --Contain product code
        p_office_cd IN hrm_office.office_cd%TYPE
       ,
        --Contain office code
        p_descendant_flag IN VARCHAR2
       ,
        --Contain flag for descendant offfice
        p_start_dt    IN DATE
       , --Start date of the date range
        p_end_dt      IN DATE
       , --End date of the date range
        p_user        IN VARCHAR2
       , --Contain input user
        p_process_cnt OUT NUMBER
       , --Return no of record processed
        p_error       OUT VARCHAR2 --Return error message
    );

    /*This procedure calculate ANF premium and late fee for that loan*/
    PROCEDURE pro_anf_premium
    (
        p_pgid        IN ins_p_proposal.pgid%TYPE
       ,p_calc_date   IN DATE
       ,p_payable_no  IN clm_claim_payable_gen.payable_no%TYPE
       ,p_ded_amt     IN NUMBER
       , --Contain deductable amount
        p_user        IN VARCHAR2
       ,p_premium_amt OUT NUMBER
       ,p_late_fee    OUT NUMBER
    );

    /*Get policy bonus information*/
    PROCEDURE pro_policy_bonus
    (
        p_pgid       IN ins_p_proposal.pgid%TYPE
       ,p_payable_no IN clm_claim_payable_gen.payable_no%TYPE
       ,p_payable_dt IN DATE
       ,p_user       IN VARCHAR2
       ,p_bonus_amt  OUT NUMBER
    );

    /*Get policy loan information*/
    PROCEDURE pro_policy_loan
    (
        p_pgid         IN ins_p_proposal.pgid%TYPE
       ,p_payable_no   IN clm_claim_payable_gen.payable_no%TYPE
       ,p_payable_dt   IN DATE
       ,p_ded_amt      IN NUMBER
       , --Contain deductable amount
        p_user         IN VARCHAR2
       ,p_loan_amt     OUT NUMBER
       ,p_interest_amt OUT NUMBER
    );

    FUNCTION fun_adv_clm_stat(p_pgid ins_p_proposal.pgid%TYPE) RETURN VARCHAR2;
    
    /*
      Add by Musha on 15.07.2018
      Generate extra bonus if total claim including regular bonus 
      is less than total paid premium  
    */
    PROCEDURE pro_extra_bonus_calc (
        p_pgid              IN ins_p_proposal.pgid%TYPE
       ,p_payable_no        IN clm_claim_payable_gen.payable_no%TYPE
       ,p_payable_dt        IN DATE
       ,p_cur_pay_amt       IN NUMBER
       ,p_prem_type         IN NUMBER   -- 1 for Life Premium, 2 for Installment Premium       
       ,p_user              IN VARCHAR2
       ,p_extra_bonus_amt   OUT NUMBER
       ,p_error             OUT VARCHAR2 --Return error message
       );
END pkg_clm_cal;
/


--
-- PKG_COLL_CFO_REPORT  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_coll_cfo_report
IS
   TYPE tp_coll_rec
   IS
      RECORD (
         --receive_id         NUMBER,
         -- pgid               VARCHAR2 (20),
         Proposal_no        VARCHAR2 (17),
         policy_no          VARCHAR2 (16),
         fpr_date           DATE,
         active_office_cd   VARCHAR2 (10),
         OFF_NM             VARCHAR2 (150),
         emp_id             VARCHAR2 (10),
         emp_file_no        VARCHAR2 (10),
         emp_nm_eng         VARCHAR2 (100),
         --cashier_gid        NUMBER,
         installment_no     NUMBER,
         receive_dt         DATE,
         receipt_no         VARCHAR2 (25),
         amount_type        VARCHAR2 (10),
         RECEIVE_MODE       VARCHAR2 (15),
         first_prem         NUMBER,
         deffered           NUMBER,
         second_yr          NUMBER,
         renewal            NUMBER,
         due_date           DATE,
         bank_name          VARCHAR2 (100),
         account_no         VARCHAR2 (70),
         trans_dt           DATE
      );

   TYPE tp_coll_tab IS TABLE OF tp_coll_rec;

   FUNCTION fun_collection_info (                 --p_date_fr            DATE,
                                                  --p_date_to            DATE,
   p_descendant_flag     VARCHAR2,
   p_emp_gid              VARCHAR2,
   p_office_cd           VARCHAR2)
      RETURN tp_coll_tab
      PIPELINED;
END;
/


--
-- PKG_COMMISSION_REPORT  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_commission_report
IS
   /******************************************************************************
      NAME:       pkg_commission_report
      PURPOSE:    commission report

      REVISIONS:
      Ver         Date           Created By                   Description
      ---------  ------------    -----------------------      ------------------------------------
      1.0        03-APR-2014     Md. Zahid Hasan              1. Employee Source Tax Statement
      1.0        02-APR-2014     Md. Zahid Hasan              2. Employee Commission Bill Summary
      1.0        02-APR-2014     Md. Zahid Hasan              3. Office Wise Employee Commission Bill Info
      1.0        10-APR-2014     Md. Zahid Hasan              4. Branch Wise Agent Commission Bill Info
      1.0        10-APR-2014     Md. Zahid Hasan              5. Mobile Banking Wise Agent Commission Bill Info
      1.0        10-APR-2014     Md. Zahid Hasan              6. Cash Amount Wise Agent Commission Bill Info
      1.0        20-APR-2014     Md. Zahid Hasan              7. First Premium FA Commission BIl Info
      1.0        20-APR-2014     Md. Zahid Hasan              8. Employee Commission Bill Info

      Change History :
      Ver        Date            Changed By                   Description
      ---------  ------          ------------                 -------------------------------------
      1.1        03-APR-2014     Md. Zahid Hasan              1. Employee Source Tax Statement
      1.1        03-APR-2014     Md. Zahid Hasan              2. Employee Commission Bill Info
      1.1        03-APR-2014     Md. Zahid Hasan              3. Office Wise Employee Commission Bill Info

      1.2        04-APR-2014     Md. Zahid Hasan              1. Employee Source Tax Statement
      1.2        04-APR-2014     Md. Zahid Hasan              2. Employee Commission Bill Info
      1.2        04-APR-2014     Md. Zahid Hasan              3. Office Wise Employee Commission Bill Info

      1.3        05-APR-2014     Md. Zahid Hasan              1. Employee Source Tax Statement
      1.3        05-APR-2014     Md. Zahid Hasan              2. Employee Commission Bill Info
      1.3        05-APR-2014     Md. Zahid Hasan              3. Office Wise Employee Commission Bill Info

      1.3        17-APR-2014     Md. Zahid Hasan              1. Employee Source Tax Statement: added parameter and column ins_tp_cd
      1.4        17-APR-2014     Md. Zahid Hasan              2. Employee Commission Bill Info: added parameter and column ins_tp_cd
      1.2        17-APR-2014     Md. Zahid Hasan              4. Branch Wise Agent Commission Bill Info: added parameter and column ins_tp_cd
      1.2        17-APR-2014     Md. Zahid Hasan              5. Mobile Banking Wise Agent Commission Bill Info: added parameter and column ins_tp_cd
      1.2        17-APR-2014     Md. Zahid Hasan              6. Cash Amount Wise Agent Commission Bill Info: added parameter and column ins_tp_cd
      1.2        23-FEB-2015     Md. Zahid Hasan              8. Added two parameter p_bill_no_frm and p_bill_no_to
   ******************************************************************************/

   /*******************************
   1. Employee Source Tax Statement
      Prepared by : Md. Zahid Hasan
      Date: 03-APR-2014
   ********************************/
   TYPE com_emp_source_tax_row
   IS
      RECORD (
         agent_nm           hrm_employee.emp_nm_eng%TYPE,
         emp_id             hrm_employee.emp_id%TYPE,
         idra_cd            VARCHAR2 (30),
         desig_nm           hrm_emp_type.emp_type_nm%TYPE,
         desig_cd           hrm_emp_type.emp_type_cd%TYPE,
         office_cd          hrm_office.office_cd%TYPE,
         office_add1        hrm_office.office_add1%TYPE,
         office_name        hrm_office.office_nm%TYPE,
         service_off        hrm_office.office_nm%TYPE,
         ins_tp_cd          ins_insurance_type.ins_tp_cd%TYPE,
         bill_no            VARCHAR2 (30),
         comm_amt           NUMBER (12, 2),
         initial_comm_amt   NUMBER (12, 2),
         initial_com_return NUMBER (12,2),
         tax_amt            NUMBER (12, 2),
         comm_after_tax     NUMBER (12, 2),
         bill_date          DATE,
         remarks            VARCHAR2 (100),
         premium_amt        NUMBER (12, 2),
         employee_nm        VARCHAR2 (100),
         office             VARCHAR2 (100),
         com_aftr_word      VARCHAR2 (200),
         s_tax_word         VARCHAR2 (200),
         aftr_tax_word      VARCHAR2 (200),
         prem_amt_word      VARCHAR2 (200)
      );

   TYPE com_emp_source_tax_tab IS TABLE OF com_emp_source_tax_row;

   FUNCTION fun_com_emp_source_tax (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_type_cd      IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: Employee Type
      p_emp_id           IN hrm_employee.emp_id%TYPE,
      -- Parameter: Employee Id
      p_bill_no_fm       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter: Bil No TFrom
      p_bill_no_to       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter: Bill No To
      p_bill_date_fm     IN DATE,
      -- Parameter: Bill Date From
      p_bill_date_to     IN DATE,
      -- Parameter: Bill Date To
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Parameter:Office Code
      p_descendant_off   IN VARCHAR2
   -- IF 1 Then consider descend office
   )
      RETURN com_emp_source_tax_tab
      PIPELINED;

   --Created by: Syed Md. Musha
   --Date: 26-05-2014
   TYPE com_fa_com_bill_info_row
   IS
      RECORD (
         agent_nm                 hrm_employee.emp_nm_eng%TYPE,
         emp_id                   hrm_employee.emp_id%TYPE,
         idra_cd            VARCHAR2 (30),
         office_cd                hrm_office.office_cd%TYPE,
         office_name              hrm_office.office_nm%TYPE,
         service_off              hrm_office.office_nm%TYPE,
         emp_type_nm              hrm_emp_type.emp_type_nm%TYPE,
         emp_type_cd              hrm_emp_type.emp_type_cd%TYPE,
         ins_tp_cd                ins_insurance_type.ins_tp_cd%TYPE,
         frist_yr_prem_basic      NUMBER (12, 2),
         frist_yr_prem_suppl      NUMBER (12, 2),
         second_yr_prem_basic     NUMBER (12, 2),
         second_yr_prem_suppl     NUMBER (12, 2),
         third_yr_prem_basic      NUMBER (12, 2),
         third_yr_prem_suppl      NUMBER (12, 2),
         frist_yr_comm_basic      NUMBER (12, 2),
         frist_yr_comm_suppl      NUMBER (12, 2),
         second_yr_comm_basic     NUMBER (12, 2),
         second_yr_comm_suppl     NUMBER (12, 2),
         third_yr_comm_basic      NUMBER (12, 2),
         third_yr_comm_suppl      NUMBER (12, 2),
         tot_prem_basic           NUMBER (12, 2),
         tot_prem_suppl           NUMBER (12, 2),
         tot_prem                 NUMBER (12, 2),
         tot_comm_basic           NUMBER (12, 2),
         tot_comm_suppl           NUMBER (12, 2),
         tot_comm                 NUMBER (12, 2),
         tot_tax_ded_amt_basic    NUMBER (12, 2),
         tot_tax_ded_amt_suppl    NUMBER (12, 2),
         tot_tax_ded_amt          NUMBER (12, 2),
         tot_net_bill_amt_basic   NUMBER (12, 2),
         tot_net_bill_amt_suppl   NUMBER (12, 2),
         tot_net_bill_amt         NUMBER (12, 2),
         remarks                  VARCHAR2 (100),
         tot_prem_word            VARCHAR2 (200),
         tot_comm_word            VARCHAR2 (200)
      );

   TYPE com_fa_com_bill_info_tab IS TABLE OF com_fa_com_bill_info_row;

   FUNCTION fun_com_fa_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_type_cd      IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: Employee Type
      p_bill_no_fm       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter: Bil No TFrom
      p_bill_no_to       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter: Bill No To
      p_bill_date_fm     IN DATE,
      -- Parameter: Bill Date From
      p_bill_date_to     IN DATE,
      -- Parameter: Bill Date To
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2
   -- IF Y Then consider descend office
   )
      RETURN com_fa_com_bill_info_tab
      PIPELINED;

   /*******************************
   2. Employee Commission Bill Info
      Prepared by : Md. Zahid Hasan
      Date: 02-APR-2014
   ********************************/
   TYPE com_emp_com_bill_info_row
   IS
      RECORD (
         agent_nm           hrm_employee.emp_nm_eng%TYPE,
         emp_id             hrm_employee.emp_id%TYPE,
         idra_cd            VARCHAR2 (30),
         office_cd          hrm_office.office_cd%TYPE,
         office_name        hrm_office.office_nm%TYPE,
         service_off        hrm_office.office_nm%TYPE,
         emp_type_nm        hrm_emp_type.emp_type_nm%TYPE,
         emp_type_cd        hrm_emp_type.emp_type_cd%TYPE,
         ins_tp_cd          ins_insurance_type.ins_tp_cd%TYPE,
         frist_yr_prem      NUMBER (12, 2),
         second_yr_prem     NUMBER (12, 2),
         third_yr_prem      NUMBER (12, 2),
         frist_yr_comm      NUMBER (12, 2),
         second_yr_comm     NUMBER (12, 2),
         third_yr_comm      NUMBER (12, 2),
         tot_prem           NUMBER (12, 2),
         tot_comm           NUMBER (12, 2),
         initial_comm_amt   NUMBER (12, 2),
         initial_com_return NUMBER (12, 2),
         tot_tax_ded_amt    NUMBER (12, 2),
         tot_net_bill_amt   NUMBER (12, 2),
         remarks            VARCHAR2 (100),
         tot_prem_word      VARCHAR2 (200),
         tot_comm_word      VARCHAR2 (200)
      );

   TYPE com_emp_com_bill_info_tab IS TABLE OF com_emp_com_bill_info_row;

   FUNCTION fun_com_emp_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_type_cd      IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: Employee Type
      p_bill_no_fm       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter: Bil No TFrom
      p_bill_no_to       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter: Bill No To
      p_bill_date_fm     IN DATE,
      -- Parameter: Bill Date From
      p_bill_date_to     IN DATE,
      -- Parameter: Bill Date To
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2,
      -- IF Y Then consider descend office
      p_agent_id         IN VARCHAR2,
      -----parameter agent id
      p_emp_gid          IN VARCHAR2
   -----parameter employee id
   )
      RETURN com_emp_com_bill_info_tab
      PIPELINED;

   /*******************************
   3. Office Wise Employee Commission Bill Info
      Prepared by : Md. Zahid Hasan
      Date: 02-APR-2014
   ********************************/
   TYPE com_off_com_bill_info_row
   IS
      RECORD (
         office_cd        hrm_office.office_cd%TYPE,
         office_name      hrm_office.office_nm%TYPE,
         service_off      hrm_office.office_nm%TYPE,
         service_off_cd   hrm_office.office_cd%TYPE,
         ins_tp_cd        ins_insurance_type.ins_tp_cd%TYPE,
         frist_yr_prem    NUMBER (12, 2),
         second_yr_prem   NUMBER (12, 2),
         third_yr_prem    NUMBER (12, 2),
         frist_yr_comm    NUMBER (12, 2),
         second_yr_comm   NUMBER (12, 2),
         third_yr_comm    NUMBER (12, 2),
         tot_prem         NUMBER (12, 2),
         tot_comm         NUMBER (12, 2),
         initial_comm_amt   NUMBER (12, 2),
         initial_com_return NUMBER (12, 2),
         tot_prem_word    VARCHAR2 (200),
         tot_comm_word    VARCHAR2 (200),
         remarks          VARCHAR2 (100)
      );

   TYPE com_off_com_bill_info_tab IS TABLE OF com_off_com_bill_info_row;

   FUNCTION fun_com_off_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_type_cd      IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: Employee Type
      p_bill_date_fm     IN DATE,
      -- Parameter: Bill Date From
      p_bill_date_to     IN DATE,
      -- Parameter: Bill Date To
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2
   -- IF Y Then consider descend office
   )
      RETURN com_off_com_bill_info_tab
      PIPELINED;

   /*******************************
   4. Branch Wise Agent Commission Bill Info
      Prepared by : Md. Zahid Hasan
      Date: 10-APR-2014
   ********************************/
   TYPE com_branch_com_bill_info_row
   IS
      RECORD (
         agent_id       hrm_agent.agent_id%TYPE,
         idra_cd            VARCHAR2 (30),
         agent_nm       hrm_agent.agent_nm_eng%TYPE,
         license_no     hrm_agent.license_no%TYPE,
         agent_acc_no   hrm_agent.account_no%TYPE,
         ins_tp_cd      ins_insurance_type.ins_tp_cd%TYPE,
         cheque_no      VARCHAR2 (30),
         net_bill_amt   NUMBER (12, 2),
         remarks        VARCHAR2 (100)
      );

   TYPE com_branch_com_bill_info_tab IS TABLE OF com_branch_com_bill_info_row;

   FUNCTION fun_com_branch_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_br_cd            IN acc_branch.br_cd%TYPE,
      -- Parameter: Branch Code
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2
   -- IF Y Then consider descend office
   )
      RETURN com_branch_com_bill_info_tab
      PIPELINED;

   /*******************************
   5. Mobile Banking Wise Agent Commission Bill Info
      Prepared by: Md. Zahid Hasan
      Date: 10-APR-2014
   ********************************/
   TYPE com_mobile_com_bill_info_row
   IS
      RECORD (
         agent_id       hrm_agent.agent_id%TYPE,
         idra_cd            VARCHAR2 (30),
         agent_nm       hrm_agent.agent_nm_eng%TYPE,
         license_no     hrm_agent.license_no%TYPE,
         agent_acc_no   hrm_agent.account_no%TYPE,
         ins_tp_cd      ins_insurance_type.ins_tp_cd%TYPE,
         cheque_no      VARCHAR2 (30),
         net_bill_amt   NUMBER (12, 2),
         remarks        VARCHAR2 (100)
      );

   TYPE com_mobile_com_bill_info_tab IS TABLE OF com_mobile_com_bill_info_row;

   FUNCTION fun_com_mobile_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_account_no       IN hrm_agent.account_no%TYPE,
      -- Parameter: Mobile Banking Account No
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2
   -- IF Y Then consider descend office
   )
      RETURN com_mobile_com_bill_info_tab
      PIPELINED;

   /*******************************
   6. Cash Amount Wise Agent Commission Bill Info
      Prepared by: Md. Zahid Hasan
      Date: 10-APR-2014
   ********************************/
   TYPE com_cash_com_bill_info_row
   IS
      RECORD (
         agent_id       hrm_agent.agent_id%TYPE,
         idra_cd            VARCHAR2 (30),
         agent_nm       hrm_agent.agent_nm_eng%TYPE,
         license_no     hrm_agent.license_no%TYPE,
         --agent_acc_no   hrm_agent.account_no%TYPE,
         ins_tp_cd      ins_insurance_type.ins_tp_cd%TYPE,
         cheque_no      VARCHAR2 (30),
         net_bill_amt   NUMBER (12, 2),
         remarks        VARCHAR2 (100)
      );

   TYPE com_cash_com_bill_info_tab IS TABLE OF com_cash_com_bill_info_row;

   FUNCTION fun_com_cash_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_bill_date_fm     IN DATE,
      p_bill_date_to     IN DATE,
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2
   -- IF Y Then consider descend office
   )
      RETURN com_cash_com_bill_info_tab
      PIPELINED;

   /*******************************
   7. First Premium FA Commission BIl Info
      Prepared by: Md. Zahid Hasan
      Date: 20-APR-2014
   ********************************/
   TYPE com_fpfa_com_bill_info_row
   IS
      RECORD (
         agent_id                hrm_agent.agent_id%TYPE,
         idra_cd            VARCHAR2 (30),
         salut                   hrm_salutation.salutation_nm%TYPE,
         agent_nm                hrm_agent.agent_nm_eng%TYPE,
         office_cd               hrm_office.office_cd%TYPE,
         office_nm               hrm_office.office_nm%TYPE,
         bill_no                 VARCHAR2 (30),
         bill_date               DATE,
         agent_acc_no            hrm_agent.account_no%TYPE,
         bank_cd                 acc_bank.bank_cd%TYPE,
         bank_nm                 acc_bank.bank_nm%TYPE,
         br_cd                   acc_branch.br_cd%TYPE,
         br_nm                   acc_branch.br_nm%TYPE,
         ins_tp_nm               ins_insurance_type.ins_tp_nm%TYPE,
         join_dt                 DATE,
         bill_srl                VARCHAR (50),
         license_no              hrm_agent.license_no%TYPE,
         license_valid_from_dt   hrm_agent.license_valid_from_dt%TYPE,
         license_valid_to_dt     hrm_agent.license_valid_to_dt%TYPE,
         org_setup               VARCHAR2 (200),
         pay_mod                 ins_pay_mode.pay_mode_sh_nm%TYPE,
         table_term              VARCHAR (10),
         comm_date               DATE,
         sum_assured             NUMBER (15, 2),
         installment_premium     NUMBER (15, 2),
         policy_no               ins_p_proposal.policy_no%TYPE,
         comm_bon_year           NUMBER (1),
         first_yr_com            NUMBER (12, 2),
         tot_tax                 NUMBER (15, 2),
         net_amount              NUMBER (12, 2),
         pay_rate                NUMBER (12, 2),
         prem_due_dt             DATE,
         activity_nm             hrm_activity_stat.activity_nm%TYPE
      );

   TYPE com_fpfa_com_bill_info_tab IS TABLE OF com_fpfa_com_bill_info_row;

   FUNCTION fun_com_fpfa_com_bill_info (
      p_ins_tp_cd   IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_agent_id    IN hrm_agent.agent_id%TYPE,
      -- Parameter: Agent Id
      p_pgid        IN ins_p_proposal.pgid%TYPE,
      -- Parameter: pgid
      p_date_from   IN DATE,
      -- Parameter Bill date from
      p_date_to     IN DATE,
      -- Parameter Bill date to
      p_bill_from   IN com_agent_com_bill_dtl.net_bill_amt%TYPE,
      -- Parameter: Net bill amount from
      p_bill_to     IN com_agent_com_bill_dtl.net_bill_amt%TYPE,
      -- Parameter: Net bill amount to
      p_office_cd   IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_check       IN VARCHAR2
   -- IF 1 Then consider descend office
   )
      RETURN com_fpfa_com_bill_info_tab
      PIPELINED;

   /*******************************
   8. Employee Commission Bill Info
      Prepared by: Md. Zahid Hasan
      Date: 20-APR-2014
   ********************************/
   TYPE com_employee_com_bill_info_row
   IS
      RECORD (
         bill_no             VARCHAR2 (30),
         bill_date           DATE,
         emp_id              hrm_employee.emp_id%TYPE,
         emp_gid             hrm_employee.emp_gid%TYPE,
         agent_id            hrm_agent.agent_id%TYPE,
         agent_nm            hrm_agent.agent_nm_eng%TYPE,
         fa_bill_no          VARCHAR2 (30),
         policy_no           ins_p_proposal.policy_no%TYPE,
         pgid                ins_p_proposal.pgid%TYPE,
         emp_nm_eng          hrm_employee.emp_nm_eng%TYPE,
         desig_cd            hrm_desig.desig_cd%TYPE,
         desig_nm            hrm_desig.desig_nm%TYPE,
         emp_type_cd         hrm_emp_type.emp_type_cd%TYPE,
         emp_type_nm         hrm_emp_type.emp_type_nm%TYPE,
         office_cd           hrm_office.office_cd%TYPE,
         office_nm           hrm_office.office_nm%TYPE,
         gross_payable_amt   NUMBER (12, 2),
         tax_ded_amt         NUMBER (12, 2),
         bill_amount         NUMBER (12, 2),
         ins_tp_cd           ins_insurance_type.ins_tp_cd%TYPE,
         disburse_status     CHAR (1),
         net_bill_amt        NUMBER (12, 2),
         comm_ded_amt        NUMBER (12, 2),
         net_payable_amt     NUMBER (12, 2)
      );

   TYPE com_employee_com_bill_info_tab
   IS
      TABLE OF com_employee_com_bill_info_row;

   FUNCTION fun_com_employee_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_gid          IN hrm_employee.emp_gid%TYPE,
      -- Parameter: Agent Id
      p_emp_type         IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: pgid
      p_pgid             IN ins_p_summery.pgid%TYPE,
      p_bill_no_frm      IN com_emp_com_bill_mst.bill_no%TYPE,
      -- Parameter Bill no from
      p_bill_no_to       IN com_emp_com_bill_mst.bill_no%TYPE,
      -- Parameter Bill no to
      p_date_from        IN DATE,
      -- Parameter Bill date from
      p_date_to          IN DATE,
      -- Parameter Bill date to
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2,
      -- IF Y Then consider descend office
      p_user_type        IN VARCHAR2
   ----IF 1 THEN HEAD OFFICE USER
   )
      RETURN com_employee_com_bill_info_tab
      PIPELINED;

   /*******************************
      8. Employee Commission Bill Info UM  BM BC DC and Above
         Prepared by: Md. Sayadur Rahaman
         Date: 29/07/2018
      ********************************/
   TYPE com_emp_com_bill_plicl_row
   IS
      RECORD (
         bill_no             VARCHAR2 (30),
         bill_date           DATE,
         emp_id              hrm_employee.emp_id%TYPE,
         emp_gid             hrm_employee.emp_gid%TYPE,
         policy_no           ins_p_proposal.policy_no%TYPE,
         premium_amt         NUMBER (10, 2),
         prem_due_dt         DATE,
         pgid                ins_p_proposal.pgid%TYPE,
         emp_nm_eng          hrm_employee.emp_nm_eng%TYPE,
         desig_cd            hrm_desig.desig_cd%TYPE,
         desig_nm            hrm_desig.desig_nm%TYPE,
         emp_type_cd         hrm_emp_type.emp_type_cd%TYPE,
         emp_type_nm         hrm_emp_type.emp_type_nm%TYPE,
         office_cd           hrm_office.office_cd%TYPE,
         office_nm           hrm_office.office_nm%TYPE,
         gross_payable_amt   NUMBER (12, 2),
         tax_ded_amt         NUMBER (12, 2),
         bill_amount         NUMBER (12, 2),
         ins_tp_cd           ins_insurance_type.ins_tp_cd%TYPE,
         disburse_status     CHAR (1)
      );

   TYPE com_emp_com_bill_plicl_tab IS TABLE OF com_emp_com_bill_plicl_row;

   FUNCTION fun_com_emp_com_bill_plicl (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_gid          IN hrm_employee.emp_gid%TYPE,
      -- Parameter: Agent Id
      p_emp_type         IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: pgid
      p_pgid             IN ins_p_summery.pgid%TYPE,
      p_bill_no_frm      IN com_emp_com_bill_mst.bill_no%TYPE,
      -- Parameter Bill no from
      p_bill_no_to       IN com_emp_com_bill_mst.bill_no%TYPE,
      -- Parameter Bill no to
      p_date_from        IN DATE,
      -- Parameter Bill date from
      p_date_to          IN DATE,
      -- Parameter Bill date to
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2,
      -- IF Y Then consider descend office
      p_user_type        IN VARCHAR2,
      ----IF 1 THEN HEAD OFFICE USER
      p_emp_type_cd_gr   IN VARCHAR2,
      ----p_emp_type_cd_gr here '1' means UM and BM and '2' Means Above BM
      p_earning_cd       IN VARCHAR2
   -- for p_emp_type_cd_gr='2' can input the p_earning_cd
   )
      RETURN com_emp_com_bill_plicl_tab
      PIPELINED;

   TYPE com_off_source_tax_row
   IS
      RECORD (
         agent_nm           hrm_employee.emp_nm_eng%TYPE,
         emp_id             hrm_employee.emp_id%TYPE,
         idra_cd            VARCHAR2 (30),
         desig_nm           hrm_emp_type.emp_type_nm%TYPE,
         desig_cd           hrm_emp_type.emp_type_cd%TYPE,
         office_cd          hrm_office.office_cd%TYPE,
         office_add1        hrm_office.office_add1%TYPE,
         office_name        hrm_office.office_nm%TYPE,
         service_off        hrm_office.office_nm%TYPE,
         ins_tp_cd          ins_insurance_type.ins_tp_cd%TYPE,
         comm_amt           NUMBER (12, 2),
         initial_comm_amt   NUMBER (12, 2),
         initial_com_return NUMBER (12,2),
         tax_amt            NUMBER (12, 2),
         comm_after_tax     NUMBER (12, 2),
         premium_amt        NUMBER (12, 2),
         employee_nm        VARCHAR2 (100),
         office             VARCHAR2 (100),
         com_aftr_word      VARCHAR2 (200),
         s_tax_word         VARCHAR2 (200),
         aftr_tax_word      VARCHAR2 (200),
         prem_amt_word      VARCHAR2 (200)
      );

   TYPE com_off_source_tax_tab IS TABLE OF com_off_source_tax_row;

   FUNCTION fun_com_off_source_tax (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_type_cd      IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: Employee Type
      p_emp_id           IN hrm_employee.emp_id%TYPE,
      -- Parameter: Employee Id
      p_bill_date_fm     IN DATE,
      -- Parameter: Bill Date From
      p_bill_date_to     IN DATE,
      -- Parameter: Bill Date To
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Parameter:Office Code
      p_descendant_off   IN VARCHAR2
   -- IF 1 Then consider descend office
   )
      RETURN com_off_source_tax_tab
      PIPELINED;
END;
/


--
-- PKG_DASHBOARD  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_dashboard
IS
 
 PROCEDURE pro_coll_deposit_dashboard (p_trans_date DATE, p_user VARCHAR2);

   TYPE tp_coll_tar_row IS RECORD (
      sl_no                   NUMBER (5),
      office_cd               hrm_office.office_cd%TYPE,
      office_nm               hrm_office.office_nm%TYPE,
      incharge_name           hrm_employee.emp_nm_eng%TYPE,
      f_coll_amount           NUMBER (12),
      d_coll_amount           NUMBER (12),
      first_year_prem         NUMBER (12),
      first_year_target       NUMBER (12),
      first_year_ach_ratio    NUMBER (10),
      first_year_ach_amount   NUMBER (12),
      s_coll_amount           NUMBER (12),
      r_coll_amount           NUMBER (12),
      renewal_prem            NUMBER (12),
      renewal_target          NUMBER (12),
      renwal_ach_ratio        NUMBER (10),
      renewal_ach_amount      NUMBER (12),
      total_target            NUMBER (12),
      total_premium           NUMBER (12),
      total_ach_ratio         NUMBER (10),
      total_ach_amount        NUMBER (12)
   );

   TYPE tp_coll_tar_tab IS TABLE OF tp_coll_tar_row;

   FUNCTION fun_coll_tar_dashboard (
      p_office_type        CHAR,
      --1'=Collection Office,'2'=Servicing Office (Mandatory)
      p_servicing_off_cd   VARCHAR2,                                --Optional
      p_office_cd          VARCHAR2,                                --Optional
      p_date_from          DATE,                                   --Mandatory
      p_date_to            DATE                                    --Mandatory
   )
      RETURN tp_coll_tar_tab PIPELINED;

  
END;
/


--
-- PKG_EMP_ADV_REGISTER  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_emp_adv_register
IS
   /*******************************
   Debit Voucher
   Prepared by : Md. Sayadur Rahaman
   Date: 01-Jun-2017

   ********************************/
   TYPE acc_emp_adv_row IS RECORD (
      emp_name            hrm_employee.emp_nm_eng%TYPE,
      desig_cd            hrm_employee.desig_cd%TYPE,
      desig_nm            hrm_desig.desig_nm%TYPE,
      emp_id              hrm_employee.emp_id%TYPE,
      office_name         hrm_office.office_nm%TYPE,
      approved_date       DATE,
      opening_bal         NUMBER (10, 2),
      adv_payment         NUMBER (10, 2),
      total_adv_payment   NUMBER (10, 2),
      rec_jv              NUMBER (10, 2),
      rec_mr              NUMBER (10, 2),
      rec_total           NUMBER (10, 2),
      cur_bal             NUMBER (10, 2),
      glac_sl_no          acc_gl_coa.glac_sl_no%TYPE
   );

   TYPE acc_emp_adv_tab IS TABLE OF acc_emp_adv_row;

   FUNCTION rep_employee_wise (
      p_office_cd        IN   VARCHAR2,
      p_descendant_off   IN   CHAR,
      p_glac_sl_no       IN   VARCHAR2,
      p_date_from        IN   DATE,
      p_date_to          IN   DATE,
      p_party_type       IN   CHAR,         --here 01 for Employee 02=Supplier
      p_emp_gid               NUMBER,
      p_supp_id               NUMBER
   )
      RETURN acc_emp_adv_tab PIPELINED;

   
   TYPE acc_emp_indv_row IS RECORD (
      emp_name            hrm_employee.emp_nm_eng%TYPE,
      desig_cd            hrm_employee.desig_cd%TYPE,
      desig_nm            hrm_desig.desig_nm%TYPE,
      emp_id              hrm_employee.emp_id%TYPE,
      office_name         hrm_office.office_nm%TYPE,
      approved_date       varchar2(20),
      approved_month       date,
      opening_bal         NUMBER (10, 2),
      adv_payment         NUMBER (10, 2),
      total_adv_payment   NUMBER (10, 2),
      rec_jv              NUMBER (10, 2),
      rec_mr              NUMBER (10, 2),
      rec_total           NUMBER (10, 2),
      cur_bal             NUMBER (10, 2),
      glac_sl_no          acc_gl_coa.glac_sl_no%TYPE
   );
   
    TYPE acc_emp_indv_tab IS TABLE OF acc_emp_indv_row;
   FUNCTION rep_indiv_employee_wise (
      p_office_cd        IN   VARCHAR2,
      p_descendant_off   IN   CHAR,
      p_glac_sl_no       IN   VARCHAR2,
      p_date_from        IN   DATE,
      p_date_to          IN   DATE,
      p_party_type       IN   CHAR,         --here 01 for Employee 02=Supplier
      p_emp_gid               NUMBER,
      p_supp_id               NUMBER
   )
      RETURN acc_emp_indv_tab PIPELINED;

   FUNCTION rep_adv_head_wise (
      p_office_cd        IN   VARCHAR2,
      p_descendant_off   IN   CHAR,
      p_glac_sl_no       IN   VARCHAR2,
      p_date_from        IN   DATE,
      p_date_to          IN   DATE,
      p_party_type       IN   CHAR,         --here 01 for Employee 02=Supplier
      p_emp_gid               NUMBER,
      p_supp_id               NUMBER
   )
      RETURN acc_emp_adv_tab PIPELINED;
END;
/


--
-- PKG_GL_ACCOUNT_REPORT  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_gl_account_report
IS
   /*******************************
   Subsidiary register
   Prepared by : Md. Sayadur Rahaman
   Date: 23-Nov-2016

   ********************************/
   TYPE acc_sub_ledger_row IS RECORD (
      vouch_dt      acc_gl_trans_mst.vouch_dt%TYPE,
      vouch_no      acc_gl_trans_mst.cost_center_vr_no%TYPE,
      glac_sl_no    acc_gl_coa.glac_sl_no%TYPE,
      glac_no       acc_gl_coa.glac_no%TYPE,
      glac_nm       acc_gl_coa.glac_nm%TYPE,
      credit_amt    acc_gl_trans_dtl.trans_amt%TYPE,
      chq_no        acc_gl_trans_dtl.chq_no%TYPE,
      chq_dt        acc_gl_trans_dtl.chq_dt%TYPE,
      debit_amt     acc_gl_trans_dtl.trans_amt%TYPE,
      balance_amt   acc_gl_trans_dtl.trans_amt%TYPE,
      narration     acc_gl_trans_mst.narration%TYPE,
      vouch_cd      acc_gl_trans_mst.vouch_cd%TYPE
   );

   TYPE acc_sub_ledger_tab IS TABLE OF acc_sub_ledger_row;

   FUNCTION rep_acc_sub_ledger (
      p_cost_center    IN   VARCHAR2,
      p_cost_check     IN   CHAR,
      p_glac_no        IN   VARCHAR2,
      pdate_from       IN   DATE,
      pdate_to         IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER
   )
      RETURN acc_sub_ledger_tab PIPELINED;

/*******************************
   Subsidiary Summery
   Prepared by : Md. Sayadur Rahaman
   Date: 11-Dec-2016

********************************/
   TYPE acc_sub_sum_row IS RECORD (
      cost_center      acc_gl_trans_mst.cost_center%TYPE,
      glac_sl_no       acc_gl_coa.glac_sl_no%TYPE,
      glac_no          acc_gl_coa.glac_no%TYPE,
      glac_nm          acc_gl_coa.glac_nm%TYPE,
      opening_amt      acc_gl_trans_dtl.trans_amt%TYPE,
      period_bal_amt   acc_gl_trans_dtl.trans_amt%TYPE,
      balance_amt      acc_gl_trans_dtl.trans_amt%TYPE
   );

   TYPE acc_sub_sum_tab IS TABLE OF acc_sub_sum_row;

   FUNCTION rep_acc_sub_sum (
      p_cost_center    IN   VARCHAR2,
      p_cost_check     IN   CHAR,
      p_glac_no        IN   VARCHAR2,
      pdate_from       IN   DATE,
      pdate_to         IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER
   )
      RETURN acc_sub_sum_tab PIPELINED;

   /*******************************
   Accounts Ledger
   Prepared by : Md. Sayadur Rahaman
   Date: 18-September-2012

   Modified by: Md Zahid Hasan
   Date: 10-November-2014
   Modified Area: added parmeter p_ins_tp_cd
   ********************************/
   TYPE acc_ledger_row IS RECORD (
      vouch_dt      acc_gl_trans_mst.vouch_dt%TYPE,
      vouch_no      acc_gl_trans_mst.cost_center_vr_no%TYPE,
      glac_sl_no    acc_gl_coa.glac_sl_no%TYPE,
      glac_no       acc_gl_coa.glac_no%TYPE,
      glac_nm       acc_gl_coa.glac_nm%TYPE,
      credit_amt    acc_gl_trans_dtl.trans_amt%TYPE,
      chq_no        acc_gl_trans_dtl.chq_no%TYPE,
      chq_dt        acc_gl_trans_dtl.chq_dt%TYPE,
      debit_amt     acc_gl_trans_dtl.trans_amt%TYPE,
      balance_amt   acc_gl_trans_dtl.trans_amt%TYPE,
      narration     acc_gl_trans_mst.narration%TYPE,
      vouch_cd      acc_gl_trans_mst.vouch_cd%TYPE,
      cost_center   acc_gl_trans_mst.cost_center%TYPE
   );

   TYPE acc_ledger_tab IS TABLE OF acc_ledger_row;

   FUNCTION rep_acc_ledger (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_glac_no        IN   VARCHAR2,
      pdate_from       IN   DATE,
      pdate_to         IN   DATE,
      p_business_tp    IN   VARCHAR2,
      p_vr_tp          IN   VARCHAR2,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_vouch_no       IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2
   )
      RETURN acc_ledger_tab PIPELINED;

   /*******************************
   Trial Balance
   Prepared by : Md. Sayadur Rahaman
   Date: 18-September-2012

   Modified by: Md Zahid Hasan
   Date: 10-November-2014
   Modified Area: added parmeter p_ins_tp_cd
   ********************************/
   TYPE acc_trial_row IS RECORD (
      cntrl_glac_sl_no   acc_gl_coa.cntrl_glac_sl_no%TYPE,
      glac_sl_no         acc_gl_coa.glac_sl_no%TYPE,
      glac_no            acc_gl_coa.glac_no%TYPE,
      glac_nm            acc_gl_coa.glac_nm%TYPE,
      credit_amt         acc_gl_trans_dtl.trans_amt%TYPE,
      debit_amt          acc_gl_trans_dtl.trans_amt%TYPE                  --,
   --ope_amt          acc_gl_trans_dtl.trans_amt%TYPE
   );

   TYPE acc_trial_tab IS TABLE OF acc_trial_row;

   FUNCTION rep_acc_trial_bal (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2,
      p_opening_st     IN   CHAR
   --Here 1=with opening balance,'2'=Without Opening Balance,'3'=Only Opening
   )
      RETURN acc_trial_tab PIPELINED;

   FUNCTION rep_acc_per_trial_bal (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2,
      p_opening_st     IN   CHAR
   --Here 1=with opening balance,'2'=Without Opening Balance,'3'=Only Opening
   )
      RETURN acc_trial_tab PIPELINED;

/***********************************
************************************/
   TYPE acc_trial_detl_row IS RECORD (
      cost_center        hrm_office.office_cd%TYPE,
      cntrl_glac_sl_no   acc_gl_coa.cntrl_glac_sl_no%TYPE,
      glac_sl_no         acc_gl_coa.glac_sl_no%TYPE,
      glac_no            acc_gl_coa.glac_no%TYPE,
      glac_nm            acc_gl_coa.glac_nm%TYPE,
      credit_amt         acc_gl_trans_dtl.trans_amt%TYPE,
      debit_amt          acc_gl_trans_dtl.trans_amt%TYPE
   );

   TYPE acc_trial_detl_tab IS TABLE OF acc_trial_detl_row;

   FUNCTION rep_acc_trial_bal_detl (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_glac_sl_no     IN   acc_gl_coa.glac_sl_no%TYPE,
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2
   )
      RETURN acc_trial_detl_tab PIPELINED;

   /*******************************
   Income  Statement
   Prepared by : Md. Sayadur Rahaman
   Date: 18-September-2012

   Modified by: Md Zahid Hasan
   Date: 10-November-2014
   Modified Area: added parmeter p_ins_tp_cd
   ********************************/
   TYPE acc_inex_row IS RECORD (
      glac_type    acc_gl_coa.account_type%TYPE,
      glac_sl_no   acc_gl_coa.glac_sl_no%TYPE,
      glac_nm      acc_gl_coa.glac_nm%TYPE,
      credit_amt   acc_gl_trans_dtl.trans_amt%TYPE,
      debit_amt    acc_gl_trans_dtl.trans_amt%TYPE
   );

   TYPE acc_inex_tab IS TABLE OF acc_inex_row;

   FUNCTION rep_acc_income_expense (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2
   )
      RETURN acc_inex_tab PIPELINED;

   /*******************************
   Balance Sheet
   Prepared by : Md. Sayadur Rahaman
   Date: 22-September-2012
   ********************************/
   TYPE acc_bal_row IS RECORD (
      glac_type          acc_gl_coa.account_type%TYPE,
      glac_sl_no         acc_gl_coa.glac_sl_no%TYPE,
      glac_nm            acc_gl_coa.glac_nm%TYPE,
      cntrl_glac_sl_no   acc_gl_coa.cntrl_glac_sl_no%TYPE,
      current_bal        acc_gl_trans_dtl.trans_amt%TYPE,
      total_bal          acc_gl_trans_dtl.trans_amt%TYPE
   );

   TYPE acc_bal_tab IS TABLE OF acc_bal_row;

   FUNCTION rep_acc_balance_sheet (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_fiscal_yr      IN   VARCHAR2,
      p_check          IN   VARCHAR2
   )
      RETURN acc_bal_tab PIPELINED;

      /*******************************
   Subsidiary Register
   Prepared by : Md. Sayadur Rahaman
   Date: 20-Oct-2019

   ********************************/
   TYPE acc_sub_register_row IS RECORD (
      vouch_no            acc_gl_trans_mst.vouch_no%TYPE,
      cost_center_vr_no   acc_gl_trans_mst.cost_center_vr_no%TYPE,
      glac_nm             acc_gl_coa.glac_nm%TYPE,
      emp_or_party_nm     VARCHAR2 (200),
      chq_no              acc_gl_trans_dtl.chq_no%TYPE,
      chq_dt              acc_gl_trans_dtl.chq_dt%TYPE,
      office_nm           VARCHAR2 (100),
      trans_amount        NUMBER (10, 2),
      ded_amt             acc_gl_trans_dtl.trans_amt%TYPE,
      emp_gid             hrm_employee.emp_gid%TYPE,
      dev_emp_gid         hrm_employee.emp_gid%TYPE,
      agent_id            hrm_agent.agent_id%TYPE,
      supplier_id         acc_coll_media_supplier.supplier_id%TYPE,
      rent_office_cd      hrm_office.office_cd%TYPE,
      pgid                ins_p_proposal.pgid%TYPE
   );

   TYPE acc_sub_regsiter_tab IS TABLE OF acc_sub_register_row;

   FUNCTION rep_acc_sub_register (
      p_cost_center   IN   VARCHAR2,
      p_cost_check    IN   CHAR,
      p_glac_sl_no    IN   VARCHAR2,
      pdate_from      IN   DATE,
      pdate_to        IN   DATE                                         /*,
                                            p_emp_gid          IN   NUMBER,
                                            p_dev_emp_gid      IN   NUMBER,
                                            p_agent_id         IN   VARCHAR2,
                                            p_supplier_id      IN   NUMBER,
                                            p_rent_office_cd   IN   VARCHAR2,
                                            p_pgid             IN   VARCHAR2*/
   )
      RETURN acc_sub_regsiter_tab PIPELINED;

   ----Cost center wise trial balance checking
   TYPE acc_trial_row_test IS RECORD (
      cost_center        VARCHAR2 (10),
      cntrl_glac_sl_no   acc_gl_coa.cntrl_glac_sl_no%TYPE,
      glac_sl_no         acc_gl_coa.glac_sl_no%TYPE,
      glac_no            acc_gl_coa.glac_no%TYPE,
      glac_nm            acc_gl_coa.glac_nm%TYPE,
      credit_amt         acc_gl_trans_dtl.trans_amt%TYPE,
      debit_amt          acc_gl_trans_dtl.trans_amt%TYPE
   );

   TYPE acc_trial_tab_test IS TABLE OF acc_trial_row_test;

   FUNCTION rep_acc_trial_bal_test (
      p_office_cd      IN   hrm_office.office_cd%TYPE,     
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2,
      p_opening_st     IN   CHAR
   --Here 1=with opening balance,'2'=Without Opening Balance,'3'=Only Opening
   )
      RETURN acc_trial_tab_test PIPELINED;
END;
/


--
-- PKG_GL_DR_CR_VOUCHER  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_gl_dr_cr_voucher
IS
   TYPE ACC_DEBIT_ROW
   IS
      RECORD (
         VOUCH_DT      ACC_GL_TRANS_MST.VOUCH_DT%TYPE,
         VOUCH_NO      ACC_GL_TRANS_MST.COST_CENTER_VR_NO%TYPE,
         COST_CENTER   ACC_GL_TRANS_MST.COST_CENTER%TYPE,
         INS_TP_CD     CHAR (1),
         GLAC_SL_NO    ACC_GL_COA.GLAC_SL_NO%TYPE,
         GLAC_NM       ACC_GL_COA.GLAC_NM%TYPE,
         PAID_TO       VARCHAR2 (100),
         NARRATION     VARCHAR2 (200),
         TRANS_AMT     ACC_GL_TRANS_DTL.TRANS_AMT%TYPE,
         CHQ_NO        ACC_GL_TRANS_DTL.CHQ_NO%TYPE,
         CHQ_DT        DATE,
         ACC_INFO      VARCHAR2 (100),
         GLAC_NO       ACC_GL_COA.GLAC_NO%TYPE,
         VOUCH_NM      VARCHAR2 (100),
         DEBIT_AMT     NUMBER (15, 2),
         CREDIT_AMT    NUMBER (15, 2)
      );

   TYPE ACC_DEBIT_TAB IS TABLE OF ACC_DEBIT_ROW;

   FUNCTION REP_DEBIT_VOUCHER (P_VOUCH_NO         IN VARCHAR2,
                               P_OBJECT_CD        IN VARCHAR2,
                               P_COST_CENTER      IN VARCHAR2,
                               P_DATE_FR          IN DATE,
                               P_DATE_TO          IN DATE,
                               P_CONFIG_ACT_FOR   IN CHAR)
      RETURN ACC_DEBIT_TAB
      PIPELINED;
END;
/


--
-- PKG_GL_GRA  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_gl_gra
AS
   /******************************************************************************
      NAME:       PKG_GL_GRA
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        6/5/2016             1. PARAMA BISWAS
   ******************************************************************************/
   TYPE gra_trial_row IS RECORD (
      cntrl_glac_sl_no   gra_gl_coa.cntrl_glac_sl_no%TYPE,
      glac_sl_no         gra_gl_coa.glac_sl_no%TYPE,
      glac_no            gra_gl_coa.glac_no%TYPE,
      glac_nm            gra_gl_coa.glac_nm%TYPE,
      credit_amt         gra_gl_trans_dtl.trans_amt%TYPE,
      debit_amt          gra_gl_trans_dtl.trans_amt%TYPE
   );

   TYPE gra_trial_tab IS TABLE OF gra_trial_row;

   FUNCTION rep_gra_trial_balance (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_check          IN   VARCHAR2
   )
      RETURN gra_trial_tab PIPELINED;

/***********************************
************************************/
   TYPE gra_ledger_row IS RECORD (
      vouch_dt      gra_gl_trans_mst.vouch_dt%TYPE,
      vouch_no      gra_gl_trans_mst.vouch_no%TYPE,
      glac_sl_no    gra_gl_coa.glac_sl_no%TYPE,
      glac_no       gra_gl_coa.glac_no%TYPE,
      glac_nm       gra_gl_coa.glac_nm%TYPE,
      credit_amt    gra_gl_trans_dtl.trans_amt%TYPE,
      chq_no        gra_gl_trans_dtl.chq_no%TYPE,
      chq_dt        gra_gl_trans_dtl.chq_dt%TYPE,
      debit_amt     gra_gl_trans_dtl.trans_amt%TYPE,
      balance_amt   gra_gl_trans_dtl.trans_amt%TYPE,
      narration     gra_gl_trans_mst.narration%TYPE,
      vouch_cd      gra_gl_trans_mst.vouch_cd%TYPE
   );

   TYPE gra_ledger_tab IS TABLE OF gra_ledger_row;

   FUNCTION rep_gra_ledger (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_glac_no        IN   VARCHAR2,
      pdate_from       IN   DATE,
      pdate_to         IN   DATE,
      p_business_tp    IN   VARCHAR2,
      p_vr_tp          IN   VARCHAR2,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_vouch_no       IN   VARCHAR2,
      p_check          IN   VARCHAR2
   )
      RETURN gra_ledger_tab PIPELINED;

   TYPE gra_debit_row IS RECORD (
      vouch_dt      gra_gl_trans_mst.vouch_dt%TYPE,
      vouch_no      gra_gl_trans_mst.cost_center_vr_no%TYPE,
      cost_center   gra_gl_trans_mst.cost_center%TYPE,
      ins_tp_cd     CHAR (1),
      glac_sl_no    gra_gl_coa.glac_sl_no%TYPE,
      glac_nm       gra_gl_coa.glac_nm%TYPE,
      paid_to       VARCHAR2 (100),
      narration     VARCHAR2 (200),
      trans_amt     gra_gl_trans_dtl.trans_amt%TYPE,
      chq_no        gra_gl_trans_dtl.chq_no%TYPE,
      chq_dt        DATE,
      acc_info      VARCHAR2 (100),
      glac_no       gra_gl_coa.glac_no%TYPE,
      vouch_nm      VARCHAR2 (100),
      debit_amt     NUMBER (10, 2),
      credit_amt    NUMBER (10, 2)
   );

   TYPE gra_debit_tab IS TABLE OF gra_debit_row;

   FUNCTION rep_gra_dr_cr_voucher (
      p_vouch_no         IN   VARCHAR2,
      p_object_cd        IN   VARCHAR2,
      p_cost_center      IN   VARCHAR2,
      p_date_fr          IN   DATE,
      p_date_to          IN   DATE,
      p_config_act_for   IN   CHAR
   )
      RETURN gra_debit_tab PIPELINED;
END pkg_gl_gra;
/


--
-- PKG_GL_PF  (Package) 
--
CREATE OR REPLACE PACKAGE INS.PKG_GL_PF wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
deb 3a0
ye4WTkolbVK/nBNywJjI3z/LJ/swgzucr/GMyi9n/m5kj8Jct+UmwxuxragOOIzdYRRexwa1
teA4Z0R34yaB8fMw5/X+68x1aLhqyEUq6N7w5ShTJMpGy4YBINLE4Oe24CG4aKvID+KNtXSg
H3xmN1HEuPaWZiGgnyJZWZqrqEy35VUd49uwNP7EE7UQUbbRWVez/XE2Yrj2af6O/MDjpoxx
/WgpdiWp6SBNSK75ltoUBz4KZZ+Zy4oIxz6rq+rfjoX5oHT6e/C3SfyYyuwMOO9jfuOEvwK6
0uhf2Pbcdah3JEaZ9QLRoEHU/8+2bZzCFzz2hHVQdBWRKHRdGO7C1wnYWCY1n4bmcQyosMZL
H8cqu/QAQCB8o81M1b5lwBOrZjMEVHCSy2bwXn0JcS2nmWAQ9SUOYV/fdJ4niqi7XSe3lZqt
9UcO4rGwa9oobiAs5ZFEBeX6qc0+xnYx5dsxzvBmWZ+boPmFgSCR9IjBmJwO7tjqykXMKUPV
oI30AmLarqfH4R2PT+YPX8207W621vsrwGZXymktbdjM5jzRvhHyfQGIOvm13lGcKhpZM54+
OYK/lKFaAQbF1lkyuzvakhm69sYZHDX1Ev4z5RbNtraxiqZtgewah30Y0vz9JU+oARBSuYF+
Hc6Ucv9LFoRMcG9GtxqlgiJJvri+f4n32irSM1JxMkJ1RdtDpPKfTtvXnsd7YzMvephKTjpT
xdjetGyk354gP6faWSSG8llPlBq2qx8NaLTq5fcxUvqNkSnf6C6aSQYZXNxuLMG/9a3ivATr
ODjD6CAkUki7U1rPYkO56HDnzmX+nnLFP7Hqja527wokX30IYqWXjlj5D1hm56SV/T462F8I
Ws3aUmbp1/3Wza1303q5KyTEmgS+ULaqumU1sLUeIqpzHVd6ORE=
/


--
-- PKG_GL_VOUCHER  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_gl_voucher wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
d38 2bd
YgyIIFnZYQcBwZbAbP1gGALQjWQwg82nr0rrfC9Arf4+zzWX8tWgjmKcAK3/FCohYYjaARLs
HeZtNtPnvUFPV9y2SczsnzELwN5xqpAI5E4Sw2qVgIem+IFz9EE/UJpPqrzP+JIS781Af4tK
OXXvB3GT5nNYodkvRtRfbD+a79dB9WnxhfwN5ZeOyGz+eMRizIq+yphJY2qS3cyKV0iTm7wL
X2FKMCbVQ+yBPpcF+LphzRYt+KL/S7kIOFSbSmOAWx19iSd1SBJ4bIKxt4i/j8RIHN+3BqSu
EAiBxhx1/wvMgxEJAaVUSXAmw3bQFI3W4XzbZU1EkZSsqozW4tvLyM89CZSQp0Dm5Ln35RD0
SrOhYHtzphVEMQvOw1Ku373apXYprvAaTm7YbaHQ6VhOcZ51yRk4MbntKcixh8b5sDsP0Vfy
yhBeQBq16LBGv0qmqooCMDLqyNomPeCLl0BwnIVc/ttZAuf5pCoOb2Eq6OJocaJnd8ybvYiI
9RHFOJs9VAothxlURJs9VAothxlUzBiR4swDMl0lnrxbewZCSJEa2Y5xIYvCxS4mPDleIiAY
ZEXSRW6XsW7F62hLHmOItfOQhhUqi2P92/0PyHShyv0kx7KIgYYkRj/oqecHgl7PIXVkWMAD
x9H/tFo/OhqYyTximMJP4LFHLUJSNQEoZPn7fl49mA==
/


--
-- PKG_GL_YEAR_CLOSING  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_gl_year_closing
IS
      /***************************************
   Process Name: Year End Account Closing
   Developed By    : Md. Sayadur Rahaman
                    Senior Software Engineer
                    Leads Corporation Ltd
   Creation Date   : 04-Sep-11
   ****************************************/

   /* Process Name: pro_leadger_checking
   This process is used to checking the "Debit" and "Credit" Balance of accounts office.
   If Both balance is equal then continue the newt process"*/
   PROCEDURE pro_leadger_checking (
      p_st_date            DATE,
      p_end_date           DATE,
      p_office_cd          hrm_office.office_cd%TYPE,
      p_leadger_tp         CHAR,
      p_output       OUT   VARCHAR2
   );

/*
Process Name: pro_leadger_transfer_to_coa
This process is used to update the all level of "chart of account" by using Posted account of "leadger".
Condition: Output of "pro_leadger_checking" process should be null otherwise it will not execute
*/
   PROCEDURE pro_coa_transfer_to_hist (
      p_fiscal_yr         VARCHAR2,
      p_quarter           NUMBER,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   );

/*
Process Name: pro_delete_yearend_voucher
This process is used to delete all voucher of year end
Condition: Output of "pro_leadger_transfer_to_coa" process should be null otherwise it will not execute
*/
   PROCEDURE pro_gl_leadger_close (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   );

/*
Process Name: pro_fiscle_year_close
This process is used to closing the old fiscle fiscle year
Condition: Output of "pro_delete_yearend_voucher" process should be null otherwise it will not execute
*/
   PROCEDURE pro_fiscle_year_close (
      p_st_date          DATE,
      p_end_date         DATE,
      p_user             VARCHAR2,
      p_output     OUT   VARCHAR2
   );

/*
Process Name: pro_open_new_fiscle_year
This process is used to open the new fiscle year
Condition: Output of "pro_open_new_fiscle_year" process should be null otherwise it will not execute
*/
   PROCEDURE pro_open_new_fiscle_year (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   );

   PROCEDURE pro_accounts_bal_sheet (
      p_st_date           DATE,
      p_end_date          DATE,
      p_quarter           NUMBER,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_fiscal_yr         VARCHAR2,
      p_output      OUT   VARCHAR2
   );

   PROCEDURE pro_accounts_bal_sheet_hist (
      p_st_date              DATE,
      p_end_date             DATE,
      p_quarter              NUMBER,
      p_office_cd            hrm_office.office_cd%TYPE,
      p_user                 VARCHAR2,
      p_fiscal_yr            VARCHAR2,
      p_process_type         CHAR,
--'1'=Refessh the historical balance Sheet,'2'=Re-Create the historical balance Sheet
      p_output         OUT   VARCHAR2
   );

   PROCEDURE pro_cost_center_bal_sheet (
      p_st_date           DATE,
      p_end_date          DATE,
      p_quarter           NUMBER,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_fiscal_yr         VARCHAR2,
      p_output      OUT   VARCHAR2
   );

   FUNCTION fun_opening_bal (
      p_bal_year     VARCHAR2,
      p_quarter      CHAR,
      p_office_cd    VARCHAR2,
      p_glac_sl_no   VARCHAR2
   )
      RETURN NUMBER;

   FUNCTION fun_opening_bal_con (
      p_bal_year     VARCHAR2,
      p_quarter      CHAR,
      p_office_cd    VARCHAR2,
      p_glac_sl_no   VARCHAR2
   )
      RETURN NUMBER;

   FUNCTION fun_opening_bal_tak (
      p_bal_year     VARCHAR2,
      p_quarter      CHAR,
      p_office_cd    VARCHAR2,
      p_glac_sl_no   VARCHAR2
   )
      RETURN NUMBER;
END;
/


--
-- PKG_GRA_YEAR_CLOSING  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_gra_year_closing
IS
      /***************************************
   Process Name: Year End Account Closing
   Developed By    : Md. Sayadur Rahaman
                    Senior Software Engineer
                    Leads Corporation Ltd
   Creation Date   : 04-Sep-11
   ****************************************/

   /* Process Name: pro_leadger_checking
   This process is used to checking the "Debit" and "Credit" Balance of graounts office.
   If Both balance is equal then continue the newt process"*/
   PROCEDURE pro_leadger_checking (
      p_st_date            DATE,
      p_end_date           DATE,
      p_office_cd          hrm_office.office_cd%TYPE,
      p_leadger_tp         CHAR,
      p_output       OUT   VARCHAR2
   );

/*
Process Name: pro_leadger_transfer_to_coa
This process is used to update the all level of "chart of graount" by using Posted graount of "leadger".
Condition: Output of "pro_leadger_checking" process should be null otherwise it will not execute
*/
   PROCEDURE pro_coa_transfer_to_hist (
      p_fiscal_yr         VARCHAR2,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   );

/*
Process Name: pro_delete_yearend_voucher
This process is used to delete all voucher of year end
Condition: Output of "pro_leadger_transfer_to_coa" process should be null otherwise it will not execute
*/
   PROCEDURE pro_gl_leadger_close (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   );

/*
Process Name: pro_fiscle_year_close
This process is used to closing the old fiscle fiscle year
Condition: Output of "pro_delete_yearend_voucher" process should be null otherwise it will not execute
*/
   PROCEDURE pro_fiscle_year_close (
      p_st_date          DATE,
      p_end_date         DATE,
      p_user             VARCHAR2,
      p_output     OUT   VARCHAR2
   );

/*
Process Name: pro_open_new_fiscle_year
This process is used to open the new fiscle year
Condition: Output of "pro_open_new_fiscle_year" process should be null otherwise it will not execute
*/
   PROCEDURE pro_open_new_fiscle_year (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   );

   PROCEDURE pro_gra_bal_sheet (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_fiscal_yr         VARCHAR2,
      p_output      OUT   VARCHAR2
   );

   PROCEDURE pro_cost_center_bal_sheet (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_fiscal_yr         VARCHAR2,
      p_output      OUT   VARCHAR2
   );
END;
/


--
-- PKG_INVESTMENT_CALCULATION  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_investment_calculation wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
123 10f
SnJc5GJ9llmIDlXCi0QjBII1i4MwgxBKLsusfC8CTP6OA0bb/UvlzQ7wV3ny1VI9L+Z087Oi
0uQJf1KM/8k/m9cScrgtQ/ZGHikERe6zGdTH2l9rJviLGbELv4h1xYimU9Y1aaAoaNqkVtOS
cDJE5TZt5rq9odvoZajgg5jep2g4erCI+O/Tdg/payaU53u1rEe1vknuiehXoh9Wv1q51ivI
R7nmrLS4mG4VXSU5JWQqEEmgfTRjDzVfZVQW5lh/FFhiQRSiaVw=
/


--
-- PKG_LEAVE_CALCULATION  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_leave_calculation
IS
   PROCEDURE pro_leave_opening (
      p_employment_tp_cd   IN       VARCHAR2,
      p_lve_year           IN       VARCHAR2,
      p_emp_gid            IN       VARCHAR2,
      p_usr                IN       VARCHAR2,
      p_error              OUT      VARCHAR2
   );

   PROCEDURE pro_leave_closing (
      p_employment_tp_cd   IN       VARCHAR2,
      p_lve_year           IN       VARCHAR2,
      p_emp_gid            IN       VARCHAR2,
      p_usr                IN       VARCHAR2,
      p_error              OUT      VARCHAR2
   );

   PROCEDURE pro_insert_leave (
      p_emp_gid            IN   NUMBER,
      p_employment_tp_cd   IN   VARCHAR2,
      p_lve_year           IN   NUMBER,
      p_levtp_cd           IN   VARCHAR2,
      p_no_of_leave        IN   NUMBER,
      p_prev_leave         IN   NUMBER,
      p_leave_avil         IN   NUMBER,
      p_leave_balance      IN   NUMBER,
      p_i_usr              IN   VARCHAR2
   );

   FUNCTION fun_prev_leave (
      p_emp_gid            IN   NUMBER,
      p_employment_tp_cd   IN   VARCHAR2,
      p_lve_year           IN   NUMBER,
      p_levtp_cd           IN   VARCHAR2
   )
      RETURN NUMBER;
END;
/


--
-- PKG_LIVE_DATA_MGR  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_live_data_mgr
IS
   PROCEDURE pro_proposal_info;
   PROCEDURE pro_collection_info;
   procedure pro_coll_update;
   procedure pro_pending_coll_info;
END pkg_live_data_mgr;
/


--
-- PKG_MIS_REPORT  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_mis_report
IS
   /*******************************
   product wise commission summery
   Prepared by : Md. Sayadur Rahaman
   Date: 01-april-2012
   ********************************/
   TYPE product_wise_commision_row IS RECORD (
      regional_off     ins_p_summery.regional_off%TYPE,
      product_cd       ins_p_summery.regional_off%TYPE,
      com_paid_amt     NUMBER (10, 2),
      bonus_paid_amt   NUMBER (10, 2),
      pbc_paid_amt     NUMBER (10, 2),
      tot_tax          NUMBER (10, 2)
   );

   TYPE product_wise_commision_tab IS TABLE OF product_wise_commision_row;

   FUNCTION fun_product_wise_commision (
      p_office_cd    IN   hrm_office.office_cd%TYPE,
      p_product_cd   IN   VARCHAR2,
      p_date_from    IN   DATE,
      p_date_to      IN   DATE
   )
      RETURN product_wise_commision_tab PIPELINED;

   /*******************************
   premium type wise collection information
   Prepared by : Md. Sayadur Rahaman
   Date: 01-may-2012
   ********************************/
   TYPE prem_type_wise_coll_row IS RECORD (
      collection_no      VARCHAR2 (20),
      receive_date       DATE,
      collection_type    acc_receivables.collection_type%TYPE,
      active_office_cd   hrm_office.office_cd%TYPE,
      receive_mode       VARCHAR2 (15),
      office_code        hrm_office.office_cd%TYPE,
      policy_no          VARCHAR2 (15),
      due_dt_from        DATE,
      tot_premium_amt    NUMBER (10, 2),
      late_fee           NUMBER (10, 2),
      coll_amount        NUMBER (10, 2),
      received_by        VARCHAR2 (50),
      adv_due            NUMBER (10, 2),
      mode_tp            VARCHAR2 (10),
      due_dt_to          DATE,
      rec_status         CHAR (1),
      coll_sl_no         NUMBER (10),
      first_premium      NUMBER (10),
      deffered_premium   NUMBER (10),
      second_premium     NUMBER (10),
      renewal_premium    NUMBER (10),
      media_no           VARCHAR2 (30),
      media_dt           DATE
   );

   TYPE prem_type_wise_coll_tab IS TABLE OF prem_type_wise_coll_row;

   FUNCTION fun_prem_type_wise_coll (
      p_office_cd   IN   hrm_office.office_cd%TYPE,
      p_check       IN   CHAR,
      p_date_from   IN   DATE,
      p_date_to     IN   DATE,
      p_catg_tp     IN   CHAR,
      p_rec_stat         CHAR,
      p_coll_type        CHAR,
      p_usr              VARCHAR2
   )
      RETURN prem_type_wise_coll_tab PIPELINED;

   /*******************************
   gender wise newbusiness statement
   Prepared by : Md. Sayadur Rahaman
   Date: 10-may-2012
   ********************************/
   TYPE gender_wise_newbusiness_row IS RECORD (
      sex_cd        CHAR (1),
      business_yr   VARCHAR2 (4),
      no_of_pol     NUMBER (10),
      sum_assured   NUMBER (15, 2)
   );

   TYPE gender_wise_newbusiness_tab IS TABLE OF gender_wise_newbusiness_row;

   FUNCTION fun_gender_wise_newbusiness (
      p_servicing_off   IN   hrm_office.office_cd%TYPE,
      p_business_yr     IN   CHAR,
      p_sex_cd          IN   CHAR
   )
      RETURN gender_wise_newbusiness_tab PIPELINED;

   /*******************************
   medical or non medical wise newbusiness statement
   Prepared by : Md. Sayadur Rahaman
   Date: 10-Jun-2012
   ********************************/
   TYPE medical_wise_newbusiness_row IS RECORD (
      pol_catg_cd   CHAR (2),
      business_yr   VARCHAR2 (4),
      no_of_pol     NUMBER (10),
      sum_assured   NUMBER (15, 2)
   );

   TYPE medical_wise_newbusiness_tab IS TABLE OF medical_wise_newbusiness_row;

   FUNCTION fun_medical_wise_newbusiness (
      p_servicing_off    IN   hrm_office.office_cd%TYPE,
      p_business_yr      IN   CHAR,
      p_policy_catg_cd   IN   CHAR
   )
      RETURN medical_wise_newbusiness_tab PIPELINED;

   /*******************************
   summ assured wise clasofication
   Prepared by : Md. Sayadur Rahaman
   Date: 20-Jun-2012
   Modifed by : Md. sayadur Rahaman
   Purpose: Office and employee wise business perfomance report preparation
   Dta: 05-Mar-2013
   ********************************/
   TYPE summ_assured_class_row IS RECORD (
      class_no      NUMBER (10),
      lower_value   NUMBER (10),
      upper_value   NUMBER (10)
   );

   TYPE summ_assured_class_tab IS TABLE OF summ_assured_class_row;

   FUNCTION fun_summ_assured_class (p_class_no NUMBER)
      RETURN summ_assured_class_tab PIPELINED;

   /*******************************
   Year Wise Business Comparison
   Prepared by : Md. Sayadur Rahaman
   Date: 01-Aug-2012
   ********************************/
   TYPE year_wise_biz_comp_row IS RECORD (
      office_cat   VARCHAR2 (2),
      prem_type    VARCHAR2 (2),
      office_cd    hrm_office.office_cd%TYPE,
      biz_year     VARCHAR2 (4),
      biz_amount   NUMBER (15, 2)
   );

   TYPE year_wise_biz_comp_tab IS TABLE OF year_wise_biz_comp_row;

   TYPE year_wise_biz_zero_row IS RECORD (
      office_cat   VARCHAR2 (2),
      prem_type    VARCHAR2 (2),
      office_cd    hrm_office.office_cd%TYPE,
      biz_year     NUMBER (4),
      biz_amount   NUMBER (15, 2)
   );

   TYPE year_wise_biz_zero_tab IS TABLE OF year_wise_biz_zero_row;

   FUNCTION fun_year_wise_biz_comp (
      p_office_cat   VARCHAR2,
      p_prem_type    VARCHAR2,
      p_year_from    NUMBER,
      p_year_to      NUMBER
   )
      RETURN year_wise_biz_comp_tab PIPELINED;

   FUNCTION fun_year_wise_biz_zero (
      p_office_cat   VARCHAR2,
      p_prem_type    VARCHAR2,
      p_year_from    NUMBER,
      p_year_to      NUMBER
   )
      RETURN year_wise_biz_zero_tab PIPELINED;

   /*******************************
   Office and employee wise business perfomance report
   Prepared by : Md. Sayadur Rahaman
   Date: 19-Mar-2013
   ********************************/
   TYPE business_performance_row IS RECORD (
      rep_month                     VARCHAR2 (20),
      rep_year                      VARCHAR2 (4),
      emp_id                        hrm_employee.emp_id%TYPE,
      office_cd                     hrm_office.office_cd%TYPE,
      pre_month_of_year_amt         NUMBER (15, 2),
      --Amount of previous year's rep_month only
      cur_month_of_year_amt         NUMBER (15, 2),
      --Amount of current year's rep_month only
      ratio_of_two_month            NUMBER (15, 2),
      --Ratio of Amount of previous year's rep_month and Amount of current year's rep_month
      pre_year_jan_to_rep_mon_amt   NUMBER (15, 2),
      --Amount of previous year's januray to rep_month
      cur_year_jan_to_rep_mon_amt   NUMBER (15, 2),
      --Amount of current year's januray to rep_month
      ratio_of_two_year             NUMBER (15, 2),
      --Ratio of Amount of previous year's januray to rep_month and Amount of current year's januray to rep_month
      rep_year_target_amt           NUMBER (15, 2),
      ratio_of_achievement          NUMBER (15, 2)
   
   --ratio_of_achievement means Current year achievement ration
   );

   TYPE business_performance_tab IS TABLE OF business_performance_row;

   --This function used to prepare the general policy's business performance report
   FUNCTION fun_gen_business_performance (
      p_report_type         VARCHAR2,
      --<<Mandatory for all report>> here  p_report_type :1=Employee wise busienss performance report,2=office wise busienss performance report
      p_off_category        VARCHAR2,
      --<<Mandatory for only office wise report>>Here p_category should be office category or employee category
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      --<<Mandatory for all report>>
      p_emp_category        VARCHAR2,
      --<<Mandatory for only employee wise report>>
      p_emp_gid        IN   NUMBER,
      p_prem_type      IN   VARCHAR2,
      --<<Mandatory for all report>> 'F' for First Year Premium,'R' for Renewal Premium
      p_business_yr    IN   NUMBER,
      --<<Mandatory for all report>> example of p_business_yr=2004 and so on..
      p_business_mon   IN   VARCHAR2
   --<<Mandatory for all report>>example of p_business_mon=01,02 and so on..
   )
      RETURN business_performance_tab PIPELINED;

   --This function used to calculate the office and employee wise achieved business amount
   FUNCTION fun_gen_business_amount (
      p_off_category        VARCHAR2,
      --Here p_category should be office category or employee category
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_emp_category        VARCHAR2,
      p_emp_gid        IN   NUMBER,
      p_prem_type      IN   VARCHAR2,
      p_business_yr    IN   NUMBER,
      --example of p_business_yr=2004 and so on..
      p_date_from      IN   DATE,
      p_date_to        IN   DATE
   )
      RETURN NUMBER;

   --This function used to find out the employee wise target amount
   FUNCTION fun_emp_target_amount (
      p_emp_gid          VARCHAR2,
      p_desig_cd    IN   VARCHAR2,
      p_prem_type   IN   VARCHAR2,
      p_date_from   IN   DATE,
      p_date_to     IN   DATE
   )
      RETURN NUMBER;

   --This function used to find out the office wise target amount
   FUNCTION fun_office_target_amount (
      p_office_cd          VARCHAR2,
      p_off_sub_cd    IN   VARCHAR2,
      p_off_catg_cd   IN   VARCHAR2,
      p_prem_type     IN   VARCHAR2,
      p_date_from     IN   DATE,
      p_date_to       IN   DATE
   )
      RETURN NUMBER;

   /*End of Employee and office wise business performance report*/

   /*******************************
   Policy Status wise no of policy
   Prepared by : Md. Sayadur Rahaman
   Date: 19-Mar-2013
   ********************************/
   TYPE policy_status_wise_policy_row IS RECORD (
      policy_status   VARCHAR2 (2),
      no_of_policy    NUMBER (10)
   );

   TYPE policy_status_wise_policy_tab IS TABLE OF policy_status_wise_policy_row;

   FUNCTION fun_policy_status_wise_policy (
      p_policy_status   VARCHAR2,
      p_date_to         DATE
   )
      RETURN policy_status_wise_policy_tab PIPELINED;

   /*******************************
   Year Wise Project Business Comparison
   Prepared by : Syed Md. Musha
   Date: 04-Apr-2013
   ********************************/
   TYPE yr_wise_prj_biz_comp_row IS RECORD (
      project_cd   VARCHAR2 (2),
      prem_type    VARCHAR2 (2),
      biz_year     VARCHAR2 (4),
      biz_amount   NUMBER (15, 2)
   );

   TYPE yr_wise_prj_biz_comp_tab IS TABLE OF yr_wise_prj_biz_comp_row;

   FUNCTION fun_yr_wise_prj_biz_comp (
      p_project_cd   VARCHAR2,
      p_prem_type    VARCHAR2,
      p_year_from    NUMBER,
      p_year_to      NUMBER
   )
      RETURN yr_wise_prj_biz_comp_tab PIPELINED;

   /**************************************
   Project Wise Business Information
   Prepared by : Syed Md. Musha
   Date: 04-Apr-2013
   ***************************************/
   TYPE prem_tp_wise_prj_biz_row IS RECORD (
      project_cd   VARCHAR2 (2),
      first_prem   NUMBER (15, 2),
      deffered     NUMBER (15, 2),
      second_yr    NUMBER (15, 2),
      renewal      NUMBER (15, 2)
   );

   TYPE prem_tp_wise_prj_biz_tab IS TABLE OF prem_tp_wise_prj_biz_row;

   FUNCTION fun_prem_tp_wise_prj_biz (
      p_project_cd    VARCHAR2,
      p_business_yr   VARCHAR2,
      p_coll_dt_fr    DATE,
      p_coll_dt_to    DATE,
      p_status        VARCHAR2
   )
      RETURN prem_tp_wise_prj_biz_tab PIPELINED;

   /**************************************
    Month Wise Project Business Information
    Prepared by : Syed Md. Musha
    Date: 07-Apr-2013
   ***************************************/
   TYPE premtp_month_wise_prj_biz_row IS RECORD (
      project_cd    VARCHAR2 (2),
      business_yr   VARCHAR2 (4),
      coll_month    VARCHAR2 (20),
      first_prem    NUMBER (15, 2),
      deffered      NUMBER (15, 2),
      second_yr     NUMBER (15, 2),
      renewal       NUMBER (15, 2)
   );

   TYPE premtp_month_wise_prj_biz_tab IS TABLE OF premtp_month_wise_prj_biz_row;

   FUNCTION fun_premtp_month_wise_prj_biz (
      p_project_cd    VARCHAR2,
      p_business_yr   VARCHAR2,
      p_coll_dt_fr    DATE,
      p_coll_dt_to    DATE,
      p_status        VARCHAR2
   )
      RETURN premtp_month_wise_prj_biz_tab PIPELINED;

   /**************************************
    Year Wise Project Business Information
    Prepared by : Syed Md. Musha
    Date: 07-Apr-2013
   ***************************************/
   TYPE premtp_yr_wise_prj_biz_row IS RECORD (
      project_cd    VARCHAR2 (2),
      business_yr   VARCHAR2 (4),
      first_prem    NUMBER (15, 2),
      deffered      NUMBER (15, 2),
      second_yr     NUMBER (15, 2),
      renewal       NUMBER (15, 2)
   );

   TYPE premtp_yr_wise_prj_biz_tab IS TABLE OF premtp_yr_wise_prj_biz_row;

   FUNCTION fun_premtp_yr_wise_prj_biz (
      p_project_cd        VARCHAR2,
      p_business_yr_frm   VARCHAR2,
      p_business_yr_to    VARCHAR2,
      p_coll_dt_fr        DATE,
      p_coll_dt_to        DATE,
      p_status            VARCHAR2
   )
      RETURN premtp_yr_wise_prj_biz_tab PIPELINED;

   --Organization wise policy list
   TYPE ser_sp_office_pol_row IS RECORD (
      servicing_off       VARCHAR2 (10),
      sales_off           VARCHAR2 (10),
      branch_off          VARCHAR2 (10),
      tot_no_policy       NUMBER,
      first_yr_premium    NUMBER,
      tot_2nd_yr_policy   NUMBER,
      second_yr_premium   NUMBER,
      policy_ration       NUMBER (10, 2),
      premium_ration      NUMBER (10, 2)
   );

   TYPE ser_sp_office_pol_row_tab IS TABLE OF ser_sp_office_pol_row;

   FUNCTION fun_ser_sp_office_pol (
      p_office_tp          CHAR,
      p_servicing_off_cd   VARCHAR2,
      p_sales_off_cd       VARCHAR2,
      p_branch_off_cd      VARCHAR2,
      p_ins_tp_cd          NUMBER,
      p_com_date_from      DATE,
      p_com_date_to        DATE
   )
      RETURN ser_sp_office_pol_row_tab PIPELINED;

   TYPE mis_emp_bus_row IS RECORD (
      servicing_off   VARCHAR2 (10),
      sales_off       VARCHAR2 (10),
      branch_off      VARCHAR2 (10),
      emp_gid         NUMBER (10),
      first_prem      NUMBER (15, 2),
      deffered        NUMBER (15, 2),
      second_yr       NUMBER (15, 2),
      renewal         NUMBER (15, 2),
      one_stop_amt    NUMBER (15, 2),
      fdr_amt         NUMBER (15, 2)
   );

   TYPE mis_emp_bus_row_tab IS TABLE OF mis_emp_bus_row;

  

-----=========================
   FUNCTION fun_mis_emp_wise_bus (
      p_office_tp          CHAR,
      p_servicing_off_cd   VARCHAR2,
      p_sales_off_cd       VARCHAR2,
      p_branch_off_cd      VARCHAR2,
      p_coll_dt_fr         DATE,
      p_coll_dt_to         DATE,
      p_bus_cal_tp         CHAR,
      p_receive_mode       CHAR
-- '1' for Receive Date  Wise-- '2' fro Adjustment Date Wise-- '3' from Commission Date Wise
   )
      RETURN mis_emp_bus_row_tab PIPELINED;

-----=========================

   ---------------
   TYPE mis_year_row IS RECORD (
      p_year   VARCHAR2 (4)
   );

   TYPE mis_year_row_tab IS TABLE OF mis_year_row;

   FUNCTION fun_year_bus (p_year_from CHAR, p_year_to CHAR)
      RETURN mis_year_row_tab PIPELINED;
END;
/


--
-- PKG_NEWBUSINESS  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_newbusiness
IS
   PROCEDURE pro_prem_cal (
      p_pgid               IN       ins_p_proposal.pgid%TYPE,
      p_product_cd         IN       ins_product.product_cd%TYPE,
      p_term               IN       ins_p_summery.term%TYPE,
      p_sumassured         IN       ins_p_summery.term%TYPE,
      p_pay_mode           IN       ins_p_summery.pay_mode_cd%TYPE,
      p_option             IN       ins_p_summery.option_cd%TYPE,
      p_staf_flag          IN       VARCHAR2,
      p_age_at_entry       IN       ins_p_summery.age%TYPE,
      p_min_age            IN       ins_p_summery.age%TYPE,
      p_max_age            IN       ins_p_summery.age%TYPE,
      p_life_prem          OUT      ins_p_summery.life_premium%TYPE,
      p_yearly_life_prem   OUT      ins_p_summery.life_premium%TYPE,
--p_accidental_prem OUT ins_p_summery.life_premium%TYPE,

      --p_extra_prem OUT ins_p_summery.life_premium%TYPE,

      --p_instl_prem OUT ins_p_summery.life_premium%TYPE,
      p_error              OUT      VARCHAR2
   );

/*This part is modified by Md. Sayadur Rhaman.

Due to finding the both age it is needed to convert into prcedure to function*/
   PROCEDURE pro_client_age (
      p_pgid         IN       ins_p_proposal.pgid%TYPE,
      p_product_cd   IN       ins_product.product_cd%TYPE,
      p_age          OUT      NUMBER,
      p_min_age      OUT      NUMBER,
      p_max_age      OUT      NUMBER
   );

   TYPE tp_term_wise_prem_rec IS RECORD (
      inst_no_from   NUMBER (3),
      inst_no_to     NUMBER (3),
      inst_premium   NUMBER (10, 2)
   );

   TYPE tp_term_wise_prem_tab IS TABLE OF tp_term_wise_prem_rec
      INDEX BY BINARY_INTEGER;

   PROCEDURE pro_term_wise_premium (
      p_pgid       IN       ins_p_summery.pgid%TYPE,
      p_prem_tab   OUT      tp_term_wise_prem_tab,
      p_error      OUT      VARCHAR2
   );

   PROCEDURE pro_supp_ben_prem (
      p_pgid          IN       ins_p_proposal.pgid%TYPE,
      p_supp_ben_cd   IN       ins_p_supp_benefit.supp_ben_cd%TYPE,
      p_product_cd    IN       ins_product.product_cd%TYPE,
      p_sumassured    IN       ins_p_summery.term%TYPE,
      p_pay_mode      IN       ins_p_summery.pay_mode_cd%TYPE,
      p_extra_prem    OUT      ins_p_summery.life_premium%TYPE,
      p_error         OUT      VARCHAR2
   );

   PROCEDURE pro_life_std_class (
      p_pgid                IN       ins_p_proposal.pgid%TYPE,
      p_life_std_class_cd   OUT      ins_life_std_class.life_class_cd%TYPE,
      p_life_class_extra    OUT      ins_uw_accpt_gen.life_class_extra%TYPE,
      p_error               OUT      VARCHAR2
   );

   PROCEDURE pro_dev_emp_info (
      p_pgid       IN       ins_p_proposal.pgid%TYPE,
      p_agent_id   IN       hrm_agent.agent_id%TYPE,
      p_user       IN       VARCHAR2,
      p_error      OUT      VARCHAR2
   );

   TYPE tp_extra_prem_rec IS RECORD (
      rebate_extra_cd         ins_rebate_extra.rebate_extra_cd%TYPE,
      rebate_extra_nm         ins_rebate_extra.rebate_extra_desc%TYPE,
      rebate_extra_amt        NUMBER (10, 2),
      rebate_extra_inst_amt   NUMBER (10, 2)
   );

   TYPE tp_extra_prem_tab IS TABLE OF tp_extra_prem_rec
      INDEX BY BINARY_INTEGER;

   PROCEDURE pro_extra_prem (
      p_pgid               IN       ins_p_proposal.pgid%TYPE,
      p_product_cd         IN       ins_p_basic.product_cd%TYPE,
      p_pay_mode_cd        IN       ins_p_basic.pay_mode_cd%TYPE,
      p_yearly_life_prem   IN       ins_p_summery.life_premium%TYPE,
      p_sum_assured        IN       ins_p_basic.sum_assured%TYPE,
      p_term               IN       ins_p_basic.term%TYPE,
      p_staff_rebate       IN       ins_p_basic.staff_rebate%TYPE,
      p_extra_tab          OUT      tp_extra_prem_tab,
      p_error              OUT      VARCHAR2
   );

   PROCEDURE pro_single_extra_prem (
      p_pgid                    IN       ins_p_proposal.pgid%TYPE,
      p_product_cd              IN       ins_p_basic.product_cd%TYPE,
      p_pay_mode_cd             IN       ins_p_basic.pay_mode_cd%TYPE,
      p_product_rate            IN       ins_product_defn.rate%TYPE,
      p_sum_assured             IN       ins_p_basic.sum_assured%TYPE,
--p_term IN ins_p_basic.term%TYPE,
      p_gender_cd               IN       VARCHAR2,
      p_edu_qual_cd             IN       VARCHAR2,
      p_occu_class_cd           IN       VARCHAR2,
      p_staff_rebate            IN       ins_p_basic.staff_rebate%TYPE,
      p_rebate_extra_cd         IN       ins_rebate_extra.rebate_extra_cd%TYPE,
      p_rebate_extra_amt        OUT      NUMBER,
      p_rebate_extra_inst_amt   OUT      NUMBER,
      p_error                   OUT      VARCHAR2
   );

   PROCEDURE pro_fp_late_fee (
      p_pgid       IN       ins_p_proposal.pgid%TYPE,
      p_late_fee   OUT      NUMBER
   );

   PROCEDURE pro_uw_data_prep (
      p_pgid    IN       ins_p_proposal.pgid%TYPE,
      p_user    IN       VARCHAR2,
      p_error   OUT      VARCHAR2
   );

   TYPE pre_client_info_row IS RECORD (
      pre_party_cd      VARCHAR2 (2),
      pre_policy_no     VARCHAR2 (10),
      pre_proposal_no   VARCHAR2 (20),
      client_nm         VARCHAR2 (100),
      dob               DATE,
      father_nm         VARCHAR2 (100),
      mother_nm         VARCHAR2 (100),
      address           VARCHAR2 (200),
      mobile_no         VARCHAR2 (15),
      nid_no            VARCHAR2 (20),
      tin_no            VARCHAR2 (12)
   );

   TYPE pre_client_info_tab IS TABLE OF pre_client_info_row;

   FUNCTION fun_pre_client_info (
      p_name        VARCHAR2,
      p_dob         DATE,
      p_father_nm   VARCHAR2,
      p_mother_nm   VARCHAR2,
      p_mobile_no   VARCHAR2,
      p_nid_no      VARCHAR2,
      p_tin_no      VARCHAR2
   )
      RETURN pre_client_info_tab PIPELINED;

   PROCEDURE pro_proposal_data_load (
      p_pgid          ins_p_proposal.pgid%TYPE,
      p_error   OUT   VARCHAR2
   );

   PROCEDURE pro_double_age_prem_rate_prem (
      p_product_cd     IN       ins_product.product_cd%TYPE,
      p_term           IN       ins_p_summery.term%TYPE,
      p_min_age        IN       ins_p_summery.age%TYPE,
      p_max_age        IN       ins_p_summery.age%TYPE,
      p_premium_rate   OUT      ins_product_defn.rate%TYPE,
      p_error          OUT      VARCHAR2
   );

   PROCEDURE pro_premium_rate (
      p_pgid        IN       ins_p_proposal.pgid%TYPE,
      p_prem_rate   OUT      NUMBER,
      p_error       OUT      VARCHAR2
   );

   PROCEDURE pro_prep_client_info (
      p_pgid       IN       ins_p_personal.pgid%TYPE,
      p_party_cd   IN       ins_p_personal.party_cd%TYPE,
      p_party_id   IN       ins_p_personal.party_id%TYPE,
      p_user       IN       VARCHAR2,
      p_error      OUT      VARCHAR2
   );

   PROCEDURE pro_upd_client_info (
      p_pgid       IN       ins_p_personal.pgid%TYPE,
      p_party_cd   IN       ins_p_personal.party_cd%TYPE,
      p_party_id   IN       ins_p_personal.party_id%TYPE,
      p_user       IN       VARCHAR2,
      p_error      OUT      VARCHAR2
   );

   PROCEDURE pro_prep_client_add (
      p_pgid       IN       ins_p_personal.pgid%TYPE,
      p_party_cd   IN       ins_p_personal.party_cd%TYPE,
      p_party_id   IN       ins_p_personal.party_id%TYPE,
      p_user       IN       VARCHAR2,
      p_error      OUT      VARCHAR2
   );

   PROCEDURE pro_upd_client_add (
      p_pgid       IN       ins_p_personal.pgid%TYPE,
      p_party_cd   IN       ins_p_personal.party_cd%TYPE,
      p_party_id   IN       ins_p_personal.party_id%TYPE,
      p_user       IN       VARCHAR2,
      p_error      OUT      VARCHAR2
   );
   
    /*Find rebate or extra amount which will be add with premium and should not show in any report*/
    PROCEDURE pro_rebate_extra_calc (
      p_product_cd         IN       ins_p_basic.product_cd%TYPE,
      p_pay_mode_cd        IN       ins_p_basic.pay_mode_cd%TYPE,
      p_sum_assured        IN       ins_p_basic.sum_assured%TYPE,
      p_premium_rate       IN       ins_product_defn.rate%TYPE,    
      p_staff_rebate       IN       ins_p_basic.staff_rebate%TYPE,
      p_add_ded_with       IN       ins_rebate_setup_dtl.add_ded_with%TYPE,
      p_gross_life_premium IN       NUMBER,
      p_rebate_extra_amt   OUT      NUMBER,
      p_error              OUT      VARCHAR2
    );
END pkg_newbusiness;
/


--
-- PKG_NEWBUSINESS_NEW  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_newbusiness_new wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
1c86 621
0cIWPVgzxx2vBo0HFGphzO7d1Sswg81U2RhoV46QMhAC3zdIERj1KAP8jX5M6m208WCn682N
yi8VfC857KidLDpi+vFi6hwTGt/fY8fQ4rm6b1eqB5ap+fj+t/nkCNkHtQ+1OuQIgQ0SJLOS
Ri/T8cFnq71VE2/TxZCG01X19lXCbx/yyPiMfj8mDTVa0TDw2cdbEIyj+79toF0a+o3/oaIj
VCSWV9BnN9hhxGQT5eExQdoaSX6nuEwTavfVRkRIMpW9irt6qLGDx2sWFz6DKIUqhDu4a23T
D+F0uy1HT0vPVFDUsavVsln6nxIk1tKf5RYeXbb1soUGnAoBDKNnLDBtViDDWp9gJdS/K5lU
pztqjdzAq96LwdueCcApOZpHe4idHZoiQdwdbRPcQqHw1SPZotP8g8N7p6JK9ou2S+iXZ2Dh
ykrCTM1rG7p1gLCmCYT5/BejKN+x08Ci9pEccfExFosv8oLimfoKWHRV5EISwfuOxJ+6+2Bk
o6n4xL997p8PYgID3GJOFvsIZtjONJQ3H4kNFox02Ste6I/hm3+PqpyMXmIEOS3C0xg3zJPZ
0q/raALgV6uY1ZUeYOeQ+/3APjx0yza7WQTjGULznuX/b8ADnHbZpsS2cQU2y7GqMMzTcpXN
MJPHmWlFtSOXo/NeN0ctxJg683hFNNZJbl6+qe4Rtt/bKtiByaOTTUI8V3ICJR9wFyzt3k2M
i2alh4RsWcUfej7pxH6RGIwmOnf0Tkm3T3O1wd49ticnyPkrHjNBddle97pRlgm/bJFUr+PH
YKCjBfYXKH0Wu9gtxfdGZ5DG3rhjG6vEiVuzEAgsop+ZnQG3Z7O/Yp/sy/FxpTvPtd62oP+4
Lk4wKQPl6981oBhEQApabGgWATlR7Th6TUAC2s+UBATmH/uC6R8LIUhISO6sY8997YXZr1xx
eW/oHXl1wgy9+syBpOYe+NuxKjXfCNmV6fvs86IOcBe+nwnKhUqig0cLGCH7vmVHyXkb8PmY
rwF3dPbzQcHwVaG2ouE3NFLdMCHG1Z2Vt2jheiIKI4Bk8y3hHJTnMjAXB1V+xUdHs82Tps/H
t0/0YblnuTPJbqhUgUJW4fgstM+rb9MbAlV/rxGCTF6YKYAM+XYEjnuJ3QkNx9hZz33J3pcA
GJwhINdM14RVnTI4hgg5Dulh3WA72PQVybq4RheHWgSCcjzFSyNlWDTZCQghdhuirIgmzKb+
j6UBd4m5s8scmg+CX8zgC+BhaYsnHNZVZMF2mib5Gra4kspMIVa7nVRYH81r2HUBU+GO8AAF
qGHVRmGQLacDTC+jTHRFhw3NU4cN18EUFePIDqv6rMm2w2ehiMhp8nLMaEmf+n8xU9W7AQ0T
wvi/bxkEIDMP5EBCDQpa+V+P384gkpvsPxczIhSH+PN/k0hueLD6r+0Bu3R0h+qhIBv/6Diw
LOzbcDu1K1t6Gk3jGghgHh2Tx2+zMikdzCbz04ka+PEkMyOKDQE1PxNJYs9Zu/h5QRHS5Js8
f78bFBlMIdbB2H/q6oIbMrvQqs9EX4jQKQ==
/


--
-- PKG_OFFICE_CASH_BAL  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_office_cash_bal
IS
   /**************************************
     Cost center wise cash balance
     Prepared by : Md. Sayadur Rahanan
     Date: 14/11/2017
    ***************************************/
   TYPE office_bal_dtl_row IS RECORD (
      cost_center   VARCHAR2 (10 BYTE),
      ins_tp_cd     NUMBER (1),
      glac_sl_no    VARCHAR2 (6 BYTE),
      trans_type    CHAR (1 BYTE),
      trans_amt     NUMBER (15, 2),
      br_cd         VARCHAR2 (6 BYTE),
      acc_tp        VARCHAR2 (3 BYTE),
      acc_no        VARCHAR2 (30 BYTE)
   );

   TYPE office_bal_dtl_row_tab IS TABLE OF office_bal_dtl_row;

   FUNCTION fun_off_cash_bal (p_trans_date DATE, p_cost_center VARCHAR2)
      RETURN office_bal_dtl_row_tab PIPELINED;

   PROCEDURE pro_cash_bal_insert (
      p_trans_date         DATE,
      p_office_cd          VARCHAR2,
      p_user               VARCHAR2,
      p_output       OUT   VARCHAR2
   );

   /***********This part is added on 03/05/2020*************/
   TYPE office_bal_row IS RECORD (
      cost_center   VARCHAR2 (10 BYTE),
      ins_tp_cd     NUMBER (1),
      glac_sl_no    VARCHAR2 (6 BYTE),
      balance_amt   NUMBER (15, 2)
   );

   TYPE office_bal_tab IS TABLE OF office_bal_row;

   FUNCTION fun_off_cash_bal_rep (
      p_trans_date    DATE,
      p_cost_center   VARCHAR2,
      p_glac_sl_no    VARCHAR2
   )
      RETURN office_bal_tab PIPELINED;
END;
/


--
-- PKG_OFFICE_CASH_BAL_RANGE  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_office_cash_bal_range
IS
   /**************************************
     Cost center wise cash balance
     Prepared by : Md. Sayadur Rahanan
     Date: 14/11/2017
    ***************************************/
   TYPE office_bal_dtl_row IS RECORD (
      cost_center   VARCHAR2 (10 BYTE),
      ins_tp_cd     NUMBER (1),
      glac_sl_no    VARCHAR2 (6 BYTE),
      trans_type    CHAR (1 BYTE),
      trans_amt     NUMBER (15, 2),
      br_cd         VARCHAR2 (6 BYTE),
      acc_tp        VARCHAR2 (3 BYTE),
      acc_no        VARCHAR2 (30 BYTE)
   );

   TYPE office_bal_dtl_row_tab IS TABLE OF office_bal_dtl_row;

   FUNCTION fun_off_cash_bal (p_trans_date DATE, p_cost_center VARCHAR2)
      RETURN office_bal_dtl_row_tab PIPELINED;

   PROCEDURE pro_cash_bal_insert (
      p_trans_date         DATE,
      p_office_cd          VARCHAR2,
      p_user               VARCHAR2,
      p_output       OUT   VARCHAR2
   );
END;
/


--
-- PKG_PF_YEAR_CLOSING  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_pf_year_closing wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
6b2 1ad
ItSGfsYcWgVcBr0/v0Aig/HNbXowg0O3Lq5qfHRArf7q0qw20wbdMkmGRSyjoVHbRIGRqDa2
4a82SfkA131FiS55xJnhz01ukg2GSaeyj3ZlGJyumZMihcZzzRNoAJ28JLxWURXpCJdRPLxo
i/bYYPLFDBm2t/KhyJGRRMcVQmvCzhouKgZU03AYHU7BA9xnxTrifZn17G9arPpgyAUKM/5C
HwCLgzaTHqe09ZN11rKXK37FSIQjQ0zWgeyZZK2QeU3EMMzWS0RDCarWpzS4dnywAoQWY2FV
PR6XhMO2DsWA37kxShX7sUFUVQQMzRG4QAvvdhOPcgOSiI0UKq82GfNoPzAKCK+8/n66/QlR
fRuKtSBZJx9iyvzyLbfZyZBx3NudNzIlkizSHE39ERSV1/H5nUneRU+kEOEHzjIr
/


--
-- PKG_PMIS_REPORT  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_pmis_report
IS
   TYPE EMP_AS_PER_DESIG_ROW
   IS
      RECORD (
         EMP_NM_ENG      HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DESIG_NM        HRM_DESIG.DESIG_NM%TYPE,
         EMP_ID          HRM_EMPLOYEE.EMP_ID%TYPE,
         NID             HRM_EMPLOYEE_DETL.NATIONAL_ID_NO%TYPE,
         EMP_FILE_NO     HRM_EMPLOYEE.EMP_FILE_NO%TYPE,
         BIRTH_DT    HRM_EMPLOYEE.BIRTH_DT%TYPE,
         DIVITION_NM     HRM_DIVDEPT.DIVDEPT_NM%TYPE,
         DEGREE_NM       HRM_DEGREE.DEGREE_NM%TYPE,
         JOIN_P_OFFICE   DATE,
         OFFICE_NM       HRM_OFFICE.OFFICE_NM%TYPE,
         JOIN_DT         HRM_EMPLOYEE.JOIN_DT%TYPE,
         PRESENT_SAL     HRM_EMPLOYEE.CURR_BASIC%TYPE,
         ACTIVITY_CD     HRM_EMPLOYEE.ACTIVITY_CD%TYPE,
         ACTVITY_NM      HRM_ACTIVITY_STAT.ACTIVITY_NM%TYPE,
         EMP_PHOTO       HRM_EMPLOYEE_PHOTO.EMP_PHOTO%TYPE
      );

   TYPE EMP_AS_PER_DESIG_TAB IS TABLE OF EMP_AS_PER_DESIG_ROW;

   FUNCTION FUN_EMP_AS_PER_DESIG (
      P_DESIG_CD           IN VARCHAR2,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_ACTIVITY_CD        IN HRM_EMPLOYEE.ACTIVITY_CD%TYPE
   )
      RETURN EMP_AS_PER_DESIG_TAB
      PIPELINED;



   TYPE EMP_AS_PER_PERMANENT_DT_ROW
   IS
      RECORD (
         EMP_NM_ENG         HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DESIG_NM           HRM_DESIG.DESIG_NM%TYPE,
         EMPLOYMENT_TP_NM   HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_NM%TYPE,
         EMP_ID             HRM_EMPLOYEE.EMP_ID%TYPE,
         OFFICE_NM          HRM_OFFICE.OFFICE_NM%TYPE,
         DIVDEPT_NM         HRM_DIVDEPT.DIVDEPT_NM%TYPE,
         CONFIRM_DT         HRM_EMPLOYEE.CONFIRM_DT%TYPE,
         DESIG_NM_AFP       HRM_DESIG.DESIG_NM%TYPE,
         PRESENT_SAL        HRM_EMPLOYEE.CURR_BASIC%TYPE,
         JOIN_DT            HRM_EMPLOYEE.JOIN_DT%TYPE
      );

   TYPE EMP_AS_PER_PERMANENT_DT_TAB IS TABLE OF EMP_AS_PER_PERMANENT_DT_ROW;

   FUNCTION FUN_EMP_AS_PER_PERMANENT_DT (
      P_START_DT           IN DATE,
      P_END_DT             IN DATE,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2
   )
      RETURN EMP_AS_PER_PERMANENT_DT_TAB
      PIPELINED;



   TYPE EMP_AS_PER_DEPT_SEC_ROW
   IS
      RECORD (
         EMP_NM_ENG         HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DESIG_NM           HRM_DESIG.DESIG_NM%TYPE,
         EMPLOYMENT_TP_NM   HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_NM%TYPE,
         EMP_ID             HRM_EMPLOYEE.EMP_ID%TYPE,
         OFFICE_NM          HRM_OFFICE.OFFICE_NM%TYPE,
         DIVDEPT_NM         HRM_DIVDEPT.DIVDEPT_NM%TYPE,
         SECTION_NM         HRM_SECTION.SECTION_NM%TYPE,
         DIV_INCHARGE_NM    HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         JOIN_DT            HRM_EMPLOYEE.JOIN_DT%TYPE,
         EMP_FILE_NO        HRM_EMPLOYEE.EMP_FILE_NO%TYPE,
         CURR_BASIC         HRM_EMPLOYEE.CURR_BASIC%TYPE,
         JOIN_P_OFFICE      DATE,
         DEGREE_NM          HRM_DEGREE.DEGREE_NM%TYPE
      );

   TYPE EMP_AS_PER_DEPT_SEC_TAB IS TABLE OF EMP_AS_PER_DEPT_SEC_ROW;

   FUNCTION FUN_EMP_AS_PER_DEPT_SEC (
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_DIVDEPT_CD         IN VARCHAR2,
      P_SECTION_CD         IN VARCHAR2,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2
   )
      RETURN EMP_AS_PER_DEPT_SEC_TAB
      PIPELINED;



   TYPE EMP_AS_PER_DIV_DIST_ROW
   IS
      RECORD (
         EMP_NM_ENG         HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DESIG_NM           HRM_DESIG.DESIG_NM%TYPE,
         EMPLOYMENT_TP_NM   HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_NM%TYPE,
         EMP_ID             HRM_EMPLOYEE.EMP_ID%TYPE,
         OFFICE_NM          HRM_OFFICE.OFFICE_NM%TYPE,
         DIVISION_CD        HRM_DIVISION.DIVISION_CD%TYPE,
         DIVISION_NM        HRM_DIVISION.DIVISION_NM%TYPE,
         DISTRICT_CD        HRM_DISTRICT.DISTRICT_CD%TYPE,
         DISTRICT_NM        HRM_DISTRICT.DISTRICT_NM%TYPE,
         THANA_CD           HRM_THANA.THANA_CD%TYPE,
         THANA_NM           HRM_THANA.THANA_NM%TYPE,
         EMP_FILE_NO        HRM_EMPLOYEE.EMP_FILE_NO%TYPE,
         DIVITION_NM        HRM_DIVDEPT.DIVDEPT_NM%TYPE,
         JOIN_DT            DATE,
         CURR_BASIC         HRM_EMPLOYEE.CURR_BASIC%TYPE,
         JOIN_P_OFFICE      DATE,
         DEGREE_NM          HRM_DEGREE.DEGREE_NM%TYPE,
         ACTIVITY_CD        HRM_EMPLOYEE.ACTIVITY_CD%TYPE,
         ACTVITY_NM         HRM_ACTIVITY_STAT.ACTIVITY_NM%TYPE
      );

   TYPE EMP_AS_PER_DIV_DIST_TAB IS TABLE OF EMP_AS_PER_DIV_DIST_ROW;

   FUNCTION FUN_EMP_AS_PER_DIV_DIST (
      P_DIVISION_CD        IN VARCHAR2,
      P_DISTRICT_CD        IN VARCHAR2,
      P_THANA_CD           IN VARCHAR2,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_ACTIVITY_CD        IN HRM_EMPLOYEE.ACTIVITY_CD%TYPE
   )
      RETURN EMP_AS_PER_DIV_DIST_TAB
      PIPELINED;



   TYPE EMP_AS_PER_SERVICE_SEN_ROW
   IS
      RECORD (
         EMP_NM_ENG         HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DESIG_NM           HRM_DESIG.DESIG_NM%TYPE,
         EMPLOYMENT_TP_NM   HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_NM%TYPE,
         EMP_ID             HRM_EMPLOYEE.EMP_ID%TYPE,
         OFFICE_NM          HRM_OFFICE.OFFICE_NM%TYPE,
         CONFIRM_DT         HRM_EMPLOYEE.CONFIRM_DT%TYPE,
         PRESENT_SAL        HRM_EMPLOYEE.CURR_BASIC%TYPE
      );

   TYPE EMP_AS_PER_SERVICE_SEN_TAB IS TABLE OF EMP_AS_PER_SERVICE_SEN_ROW;

   FUNCTION FUN_EMP_AS_PER_SERVICE_SEN (
      P_START_DT           IN DATE,
      P_END_DT             IN DATE,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2
   )
      RETURN EMP_AS_PER_SERVICE_SEN_TAB
      PIPELINED;



   TYPE EMP_AS_PER_GENDER_ROW
   IS
      RECORD (
         EMP_NM_ENG         HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DESIG_NM           HRM_DESIG.DESIG_NM%TYPE,
         DIVITION_NM        VARCHAR (200),
         JOIN_DT            DATE,
         CURR_BASIC         HRM_EMPLOYEE.CURR_BASIC%TYPE,
         DEGREE_NM          HRM_DEGREE.DEGREE_NM%TYPE,
         LAST_PROM_DT       DATE,
         EMP_FILE_NO        HRM_EMPLOYEE.EMP_FILE_NO%TYPE,
         EMPLOYMENT_TP_NM   HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_NM%TYPE,
         EMP_ID             HRM_EMPLOYEE.EMP_ID%TYPE,
         OFFICE_NM          HRM_OFFICE.OFFICE_NM%TYPE,
         GENDER_NM          INS_GENDER.GENDER_NM%TYPE,
         ACTIVITY_CD        HRM_EMPLOYEE.ACTIVITY_CD%TYPE,
         ACTVITY_NM         HRM_ACTIVITY_STAT.ACTIVITY_NM%TYPE
      );

   TYPE EMP_AS_PER_GENDER_TAB IS TABLE OF EMP_AS_PER_GENDER_ROW;

   FUNCTION FUN_EMP_AS_PER_GENDER (
      P_SEX_CD             IN VARCHAR2,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_ACTIVITY_CD        IN HRM_EMPLOYEE.ACTIVITY_CD%TYPE
   )
      RETURN EMP_AS_PER_GENDER_TAB
      PIPELINED;



   TYPE EMP_AS_PER_JOINING_DT_ROW
   IS
      RECORD (
         EMP_NM_ENG         HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DESIG_NM           HRM_DESIG.DESIG_NM%TYPE,
         EMPLOYMENT_TP_CD   HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
         EMP_ID             HRM_EMPLOYEE.EMP_ID%TYPE,
         EMP_FILE_NO        HRM_EMPLOYEE.EMP_FILE_NO%TYPE,
         OFFICE_NM          HRM_OFFICE.OFFICE_NM%TYPE,
         JOIN_DT            HRM_EMPLOYEE.JOIN_DT%TYPE,
         DIVITION_NM        VARCHAR (200),
         GROSS_SL           HRM_EMPLOYEE.CURR_BASIC%TYPE,
         DEGREE_NM          HRM_DEGREE.DEGREE_NM%TYPE,
         LAST_PROM_DT       DATE,
         EMPLOYMENT_TP_NM   HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_NM%TYPE
      );

   TYPE EMP_AS_PER_JOINING_DT_TAB IS TABLE OF EMP_AS_PER_JOINING_DT_ROW;

   FUNCTION FUN_EMP_AS_PER_JOINING_DT (
      P_START_DT           IN DATE,
      P_END_DT             IN DATE,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2
   )
      RETURN EMP_AS_PER_JOINING_DT_TAB
      PIPELINED;



   TYPE EMP_AS_PER_SALARY_ROW
   IS
      RECORD (
         EMP_NM_ENG         HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DESIG_NM           HRM_DESIG.DESIG_NM%TYPE,
         EMPLOYMENT_TP_NM   HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_NM%TYPE,
         EMP_ID             HRM_EMPLOYEE.EMP_ID%TYPE,
         OFFICE_NM          HRM_OFFICE.OFFICE_NM%TYPE,
         CURR_BASIC         HRM_EMPLOYEE.CURR_BASIC%TYPE
      );

   TYPE EMP_AS_PER_SALARY_TAB IS TABLE OF EMP_AS_PER_SALARY_ROW;

   FUNCTION FUN_EMP_AS_PER_SALARY (
      P_FROM_SAL           IN NUMBER,
      P_TO_SAL             IN NUMBER,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_ACTIVITY_CD        IN HRM_ACTIVITY_STAT.ACTIVITY_CD%TYPE
   )
      RETURN EMP_AS_PER_SALARY_TAB
      PIPELINED;



   TYPE EMP_AS_PER_EDU_QUALI_ROW
   IS
      RECORD (
         EMP_NM_ENG         HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DESIG_NM           HRM_DESIG.DESIG_NM%TYPE,
         EMPLOYMENT_TP_NM   HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_NM%TYPE,
         EMP_ID             HRM_EMPLOYEE.EMP_ID%TYPE,
         OFFICE_NM          HRM_OFFICE.OFFICE_NM%TYPE,
         DEGREE_NM          HRM_DEGREE.DEGREE_NM%TYPE,
         EMP_FILE_NO        HRM_EMPLOYEE.EMP_FILE_NO%TYPE,
         DIVITION_NM        HRM_DIVDEPT.DIVDEPT_NM%TYPE,
         JOIN_DT            HRM_EMPLOYEE.JOIN_DT%TYPE,
         CURR_BASIC         HRM_EMPLOYEE.CURR_BASIC%TYPE,
         LAST_PROM_DT       DATE
      );

   TYPE EMP_AS_PER_EDU_QUALI_TAB IS TABLE OF EMP_AS_PER_EDU_QUALI_ROW;

   FUNCTION FUN_EMP_AS_PER_EDU_QUALI (
      P_DEGREE_CD          IN VARCHAR2,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_OFF_STATUS         IN HRM_OFFICE.OFFICE_STATUS%TYPE
   )
      RETURN EMP_AS_PER_EDU_QUALI_TAB
      PIPELINED;



   TYPE EMP_AS_PER_AGE_SERVICE_ROW
   IS
      RECORD (
         EMP_NM_ENG         HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DESIG_NM           HRM_DESIG.DESIG_NM%TYPE,
         EMPLOYMENT_TP_NM   HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_NM%TYPE,
         EMP_ID             HRM_EMPLOYEE.EMP_ID%TYPE,
         OFFICE_NM          HRM_OFFICE.OFFICE_NM%TYPE,
         CONFIRM_DT         HRM_EMPLOYEE.CONFIRM_DT%TYPE,
         JOIN_DT            HRM_EMPLOYEE.JOIN_DT%TYPE,
         CURR_BASIC         HRM_EMPLOYEE.CURR_BASIC%TYPE,
         YY                 NUMBER,
         MM                 NUMBER,
         DD                 NUMBER,
         EMP_FILE_NO        HRM_EMPLOYEE.EMP_FILE_NO%TYPE,
         DIVITION_NM        HRM_DIVDEPT.DIVDEPT_NM%TYPE,
         JOIN_P_OFFICE      DATE,
         DEGREE_NM          HRM_DEGREE.DEGREE_NM%TYPE
      );

   TYPE EMP_AS_PER_AGE_SERVICE_TAB IS TABLE OF EMP_AS_PER_AGE_SERVICE_ROW;

   FUNCTION FUN_EMP_AS_PER_AGE_SERVICE (
      P_SERVICE_FROM       IN NUMBER,
      P_SERVICE_TO         IN NUMBER,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2
   )
      RETURN EMP_AS_PER_AGE_SERVICE_TAB
      PIPELINED;



   TYPE EMP_WELFARE_LOAN_SUMMERY_RAW
   IS
      RECORD (
         EMP_GID            HRM_EMPLOYEE.EMP_GID%TYPE,
         EMP_NM_ENG         HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DESIG_CD           HRM_DESIG.DESIG_CD%TYPE,
         DESIG_NM           HRM_DESIG.DESIG_NM%TYPE,
         OFFICE_CD          HRM_OFFICE.OFFICE_CD%TYPE,
         OFFICE_NM          HRM_OFFICE.OFFICE_NM%TYPE,
         PRIN_INSTALLMENT   NUMBER,
         INSTL_AMOUNT       NUMBER,
         SERVICE_CHARGE     NUMBER,
         BALANCE            NUMBER
      );

   TYPE EMP_WELFARE_LOAN_SUMMERY_TAB IS TABLE OF EMP_WELFARE_LOAN_SUMMERY_RAW;

   FUNCTION FUN_LOAN_RECOVER_SUMMERY (
      P_EMP_GID           IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD         IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG   IN VARCHAR2
   )
      RETURN EMP_WELFARE_LOAN_SUMMERY_TAB
      PIPELINED;



   TYPE EMP_ORGANOGRAM_ROW
   IS
      RECORD (
         OFFICE_CD    HRM_OFFICE.OFFICE_CD%TYPE,
         FA_ID        VARCHAR2 (50),
         FA_EMP_NM    HRM_AGENT.AGENT_NM_BNG%TYPE,
         UM_ID        VARCHAR2 (50),
         UM_EMP_NM    HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         BM_ID        VARCHAR2 (50),
         BM_EMP_NM    HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         AGM_ID       VARCHAR2 (50),
         AGM_EMP_NM   HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         DGM_ID       VARCHAR2 (50),
         DGM_EMP_NM   HRM_EMPLOYEE.EMP_NM_ENG%TYPE,
         GM_ID        VARCHAR2 (50),
         GM_EMP_NM    HRM_EMPLOYEE.EMP_NM_ENG%TYPE
      );

   TYPE EMP_ORGANOGRAM_TAB IS TABLE OF EMP_ORGANOGRAM_ROW;

   FUNCTION FUN_EMP_ORGANOGRAM (
      P_EMP_TYPE_CD_FROM   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_TYPE_CD_TO     IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_ACTIVITY_CD        IN HRM_ACTIVITY_STAT.ACTIVITY_CD%TYPE
   )
      RETURN EMP_ORGANOGRAM_TAB
      PIPELINED;



   TYPE LICENSE_CERTIFICATE_ROW
   IS
      RECORD (
         SEND_TO_IDRA_DT   DATE,
         L_APPL_CNT        NUMBER,
         C_APPL_CNT        NUMBER,
         APPRV_DT          DATE,
         L_APPRV_CNT       NUMBER,
         C_APPRV_CNT       NUMBER
      );

   TYPE LICENSE_CERTIFICATE_TAB IS TABLE OF LICENSE_CERTIFICATE_ROW;

   FUNCTION FUN_LICENSE_CERTIFICATE (P_REPORT_DATE IN DATE)
      RETURN LICENSE_CERTIFICATE_TAB
      PIPELINED;



   TYPE LICNS_CRTFCT_REQST_ROW
   IS
      RECORD (
         MIN_APPL_DT   DATE,
         MAX_APPL_DT   DATE,
         L_APPL_CNT    NUMBER,
         C_APPL_CNT    NUMBER,
         SEND_DT       DATE,
         L_SEND_CNT    NUMBER,
         C_SEND_CNT    NUMBER
      );

   TYPE LICNS_CRTFCT_REQST_TAB IS TABLE OF LICNS_CRTFCT_REQST_ROW;


   FUNCTION FUN_LICNS_CRTFCT_REQST (P_REPORT_DATE IN DATE)
      RETURN LICNS_CRTFCT_REQST_TAB
      PIPELINED;
END;
/


--
-- PKG_PMIS_REPORT_OLD  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_pmis_report_OLD wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
3e2e 8be
AArvLrgGf1sXeC6kG646aA7HFhQwg82jDNAa3y//Qj8CltXXWsz2DQncx8DWE1LhQCpQmBCb
PqPpzImzG7UPLa85BYnwE97XR8XKzTNnAORNZCKcsrL/P2pENXKqP7ZyqnMI0M75+E6amrXt
jM2k5n25g9m0hZq5JS+i5WCPKyFGbW6goC80+VFGjBJCUvE9eoD+kiuHl0ZcrEvgNKoGm+gn
l5LmhThvP2n5qkHXYP7YZf6XfjCffNOa5jpROvWYfuOLyPr0p6JLq9+zFenBfVifoMnoqoTB
fa1JLr9QnWdbxwm45ot/8IQJcsu3hcQ6DehZIVEikBFgiShoMQYIvh7Az591og7ZNNbBoZkQ
E0C3p0vcoFNxg5EAwQbjuuw6yVced1lMoqeW11aocHhaR1OJVRoZn1MT8IHOoM1qCzYKpCLy
DmY6XtOtx8p1gPhecmWUD4EHpT0buHiDVgNnBxaEF0cDSUckWPsu/IZQ1Sr3TILsoYFCCWD0
ivivsfUbhTPByhn+W4Y/ZbHnLZhk10znAuycjHLn2S2KXSbbAiQjuj1b4VBeLMuXMzXajxoe
rR3vJ+wOsj4+7zoLiaBdnZ6CKjtCxDeYUMmS5vR0yekQfIdbxnvzURTR0iY2Yy36Wb+5Z+ox
fAox9MXXy7lDVijXO92wG0JIEDmE+hSLTmwYaehhnlDI1rzn/ToW8LfxO3lStxqhGb5zpz4X
ZCy35VngIKk4PbW2AlXePXyyOvMqSuu0EYVfp5Hatu0+tvrntJVuf3fQKAMEEcxp6A4Jdbkb
OUOr3PR3ChbtkZA6skhSArXY045i5WmdS+n3gyu6RJkqkPOzo3n/7A3AeXegVAiQCJz7Y+lw
LeElZ3/Mczsxs0roUp58C6l2AcBDoFXZoLr373lMfRHAdhwsVkJQdwVflllrKwVK69i6oHsi
IlSbDiaa5SBFfg0SFXSYmGUBe3oiBKh+oGeseTYHuO8s+IDnFjIN4afL0EqamT2Ay+FQMwOm
9daGpoRiLVzUUU+NXGD2g8Hh2X5tCCHIG38yppr4JoQR0sQkQkvdC6Oh1f66FXInkcAsRZYn
xFR3YSyocUKrDrId9eDGKhUWh86GGuA+uxKSsTuj7biHnIYCfpP5NJjSOZeyAO99+evG0Chk
w3B+VizyVjph7g2N/Iech2n0c+NHsDjJE8w8J9KkGyn40Wr1eO+JrRdebmKAABMW+urEZ4MM
GhOcWvwPdenBj+yfJefDLSgBlSilP8l1Owp/rGFllZkESO/6fnoacUwnVqX6Co8yBRhhdA2b
3236i5Q1Er1pQQK5582+rS+wvJO/ZLYPxNz1C95o5sETpi9d1B1O2byyNPrfpUXAIUFre3wt
EGiORY1iaA4XAUOhUkoNhnb7xpL8Ws6byLAzwwuXEnPhsZY3/CEpbhc55hQN+6b3NB9PEnEl
AL4gmwbgBWa13NyLXvxjzZgpZ2yMlOE2eIaCFVLL44YheCZ7mpWyOAjncJo/Ahkly+R3xAiL
YJA2i8Bmfuyh75ZxyCnk9rBkeABRPzLfvnHIqr5DQDTlJ0xJcrEyGaxBa52HTgVv2sRmdx5j
cG7PYgHB0vYh6kSwucdTn25FIengliFexKmHWvCalOJz5pe2i6KJKslRzQoYTc023DgFFZDY
laKUpb6zDFojCKQCLiXdv/26daTjhicvs8ncSFNZI5ddI6Onng7nyhZs0UTi/D/I71rGoj/k
pi88rZdMNoJ34PizxSLqqbSptGY2ZqmWOZQCsAODPF/luUlSHOKHp6yWR2fK+x2hBOwKZ6tm
fVfoi0TJMq9SjWm7Vwsu+329uorJYAK5qlIZxKFjf1vw6vrFWbkrPbXFgtDZR4oKNp0QQzou
WjoLGIaGb8aTGIaKI8ZCGIbPtwt7Esva6APBosZ6Y8Z6DcaD28HzmbEvElNLKHcEA/HGb+WU
9J9eD34mpnGARTO0cthhQZO+7t87ovzICUoCDcBXRr/Dy1lv7b02tOXERExiSfeGUiAGXNnA
+n7sCZHrUb5x8wMylCbdcv8ZWydg5ZHula2ZTaY64dcCTyE3OqwrBWMbRSBdkgV3/JBfRT2W
VNgQhT2cBzfdLyWp3aP3CLmJMsK3T7ciU+KR+yqi8xVnAp1AAtFnK937w3EzBeUCHjV2n+2O
anClwR3d4XwB0L/Kb3rXBYQ49DYOtQzKhb4w5CkkJWEX3Q==
/


--
-- PKG_PROVIDENT_FUND  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_provident_fund wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
bff 384
rT42FuEz2+YAYaaThZAQHfh0dpIwgz0rDNDrfC+LaA/umQnqozsO03EzXXu3PMi0OIqJ197R
meeoYtU25D+KepCL8FOPDCWS2Xq8OsmKX23+5DaKOgUfI/kIc/6xxq6uJClOZLDGkCGYLZUE
2WmZ48A2tWCTWSYr3z5aU1uTXZfbqX67axwuHJRSmdhMCT2W+bsFHFAFe5b7MnYM+xRRqKVf
3u0QsVGHg2aZvErd52nz/rNFsm9WUou0ppYUPngESL9I0XYAMy+s79nUr+qvLJo3S4yvD7oy
j2jJQnLiSD/fcNDtvpbVggmkdy2gRtHh03rzQhU7d8VN/8jZ8H7yCyamSvYRlxYC9d0jmSgp
lkPK3XUcZLZuo3mhxWvrf/cmegDhM6+lyDdlS8uKFninClrl63pUNzuID/PUaUwD20SNdic4
Vicm0XDkaioPf1scJ4qWXItjqZt1tXieBcNkZV97XkGDATFxH3DTeiuDXDghD+TV8Hlc5qHH
AE69gYAbsoQvq4xh5D1BoOIWY6bl5zH5uOtTAGxxyKFaKbwsYaoF4GV5eil76t+Ft80Pnb4B
kGxS+WffHub+yW5Jn1ZW0mfwCryYagqoZW4AP11ZbCA6s0m7HL18pAcaiquD7zC4y7TMxUoC
twICto/DDEz10f+pXYL+x7D2sJfGS241FrcH11nNDAdMt//KEF19E6dfAbftMj2Buqu8PEcY
acWREr51V6RG6tDam0y0mTNxAUt7ypx6wehl1DzzHucK6Xh9sMu943t8RXk5W0iLgLvl09sl
Ux7hafMbvtjsMvVi5bhY5YtIacW4/cwul+xeQY0lWEP2RJOxtn5g5devzOKvEYDTU9uRXFiH
OCuzx5XwmKaanc4dPpb36Q==
/


--
-- PKG_PROVIDENT_FUND_OLD  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_provident_fund_old
IS
   PROCEDURE PRO_PF_MONTLY_CONT_TRANSFER (
      P_PRO_DATE          IN     DATE,
      P_PRO_MONTH         IN     DATE,
      P_OFFICE_CD         IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_TYPE          CHAR,
      V_I_USR             IN     VARCHAR2,
      V_I_DT              IN     DATE,
      P_OBJECT_CD         IN     VARCHAR2,
      P_OUTPUT               OUT VARCHAR2
   );


   PROCEDURE PRO_PROFIT_RATE_CALCULATION (
      P_OFFICE_CD           IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DIST_YEAR           IN     VARCHAR2,
      P_MEM_TYPE            IN     CHAR,
      P_PROCESS_DT          IN     DATE,
      P_TOT_INCOME          IN     NUMBER,
      P_TOT_EXPENSE         IN     NUMBER,
      P_TOT_OUTSTANDING     IN     NUMBER,
      P_NET_PROFIT          IN     NUMBER,
      P_I_USR               IN     VARCHAR2,
      P_PROFIT_RATE            OUT NUMBER,
      P_TOT_INVEST_IN_DAY      OUT NUMBER,
      P_OUTPUT                 OUT VARCHAR2
   );


   PROCEDURE PRO_PROFIT_DISTRIBUTION (
      P_OFFICE_CD           IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DIST_YEAR           IN     VARCHAR2,
      P_MEM_TYPE            IN     CHAR,
      P_NET_PROFIT          IN     NUMBER,
      P_DIST_PROFIT_AMT     IN     NUMBER,
      P_TOT_INVEST_IN_DAY   IN     NUMBER,
      P_PROFIT_RATE         IN     NUMBER,
      P_DIST_PROFIT_RATE    IN     NUMBER,
      P_I_USR               IN     VARCHAR2,
      P_OUTPUT                 OUT VARCHAR2
   );

   TYPE T_TRANS_ROW
   IS
      RECORD (
         TRANS_ITEM_CD   NUMBER (2),
         GLAC_SL_NO      VARCHAR2 (6),
         POST_AMOUNT     NUMBER (15, 2),
         CHQ_TP          CHAR (2 BYTE),
         CHQ_NO          VARCHAR2 (20 BYTE),
         CHQ_DT          DATE
      );

   TYPE T_TRANS_TAB
   IS
      TABLE OF T_TRANS_ROW
         INDEX BY BINARY_INTEGER;


   PROCEDURE PRO_VOUCHER_POSTING (
      P_TABLE          IN     T_TRANS_TAB,
      P_OBJECT_CD      IN     VARCHAR2,
      P_VOUCH_CD       IN     VARCHAR2,
      P_INTER_OFF_ST   IN     CHAR,
      P_OFFICE_CD      IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_TRANS_ID       IN     VARCHAR2,
      P_TRANS_DATE     IN     DATE,
      P_COST_CENTER    IN     VARCHAR2,
      P_NARRATION      IN     VARCHAR2,
      P_USER           IN     VARCHAR2,
      P_VOUCHER_NO        OUT VARCHAR2,
      P_ERROR             OUT VARCHAR2
   );


   PROCEDURE PRO_VOUCHER_NO (P_OFFICE_CD           HRM_OFFICE.OFFICE_CD%TYPE,
                             P_FISCALE_YR          VARCHAR2,
                             P_VOUCH_CD            VARCHAR2,
                             P_USER         IN     VARCHAR2,
                             P_VOUCH_NO        OUT VARCHAR2,
                             P_PROCESS_ST      OUT VARCHAR2);


   PROCEDURE PRO_OFFICE_COA_UPDATE (
      P_OFFICE_CD        HRM_OFFICE.OFFICE_CD%TYPE,
      P_GLAC_SL_NO       VARCHAR2,
      P_TRANS_AMT        NUMBER,
      P_DR_CR            VARCHAR2,
      P_FISCAL_YR        VARCHAR2,
      P_PROCESS_ST   OUT VARCHAR2
   );
END;
/


--
-- PKG_SALARY_PROCESS  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_salary_process
IS
   PROCEDURE PRO_SALARY_CALCULATION (
      P_OFFICE_CD      IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT     IN     VARCHAR2,
      P_EMP_GID        IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_EMP_TYPE       IN     HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE DEFAULT '01'
                                                                          ,
      P_PAYMENT_TYPE   IN     VARCHAR2 DEFAULT 'S' ,
      P_DIVDEPT_CD     IN     HRM_EMPLOYEE.DIVDEPT_CD%TYPE,
      P_HEAD_CD        IN     SAL_HEAD_SETUP.HEAD_CD%TYPE,
      P_SAL_DT_FROM    IN     DATE,
      P_SAL_DT_TO      IN     DATE,
      P_SALARY_DT      IN     DATE,
      P_OBJECT_CD      IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR           IN     VARCHAR2,
      P_PROCESS_CNT       OUT NUMBER,
      P_ERROR             OUT VARCHAR2
   );


   PROCEDURE PRO_EARNING_DEDUCTION (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_PAYSC_ID         IN     HRM_EMPLOYEE.PAYSC_ID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


 PROCEDURE PRO_ARREAR (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );



   PROCEDURE PRO_MISC_EAR_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_OFFICE_CD        IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT       IN     VARCHAR2,
      P_EMP_TYPE         IN     HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE DEFAULT '01'
                                                                            ,
      P_PAY_DT_FROM      IN     DATE,
      P_PAY_DT_TO        IN     DATE,
      P_PAYABLE_DT       IN     DATE,
      P_SALARY_PROCESS   IN     SAL_SPEC_EAR_DED_MST.SALARY_PROCESS%TYPE,
      P_OBJECT_CD        IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRO_PFL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRO_HBL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRO_EMP_EAR_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRC_VOUCHER (
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_VOUCHER_SOURCE   IN     VARCHAR2,
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_PAYMENT_TYPE     IN     SAL_SALARY_MST.PAYMENT_TYPE%TYPE,
      P_OFFICE_CD        IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_OFF   IN     VARCHAR2,
      P_DIVDEPT_CD       IN     SAL_SALARY_MST.DIVDEPT_CD%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_APPRV_DATE       IN     DATE,
      P_OBJECT_CD        IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRO_ADV_SAL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRO_INTEREST_AMOUNT (
      P_LOAN_TYPE      IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID        IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_INTEREST_AMT      OUT NUMBER,
      P_ERROR             OUT VARCHAR2
   );
  PROCEDURE PRO_ARREAR_PF (P_EMP_GID       IN     HRM_EMPLOYEE.EMP_GID%TYPE,
                           P_OFFICE_CD     IN     HRM_OFFICE.OFFICE_CD%TYPE,
                            P_DESCENDANT    IN     VARCHAR2,
                            P_SAL_DT_FROM   IN     DATE,
                            P_SAL_DT_TO     IN     DATE,
                            P_SALARY_DT     IN     DATE,
                            P_IUSR          IN     VARCHAR2,
                            P_ERROR            OUT VARCHAR2);  
END PKG_SALARY_PROCESS;
/


--
-- PKG_SALARY_PROCESS_OLD  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_salary_process_old
IS
   PROCEDURE PRO_SALARY_CALCULATION (
      P_OFFICE_CD      IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT     IN     VARCHAR2,
      P_EMP_GID        IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_EMP_TYPE       IN     HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE DEFAULT '01'
                                                                          ,
      P_PAYMENT_TYPE   IN     VARCHAR2 DEFAULT 'S' ,
      P_DIVDEPT_CD     IN     HRM_EMPLOYEE.DIVDEPT_CD%TYPE,
      P_HEAD_CD        IN     SAL_HEAD_SETUP.HEAD_CD%TYPE,
      P_SAL_DT_FROM    IN     DATE,
      P_SAL_DT_TO      IN     DATE,
      P_SALARY_DT      IN     DATE,
      P_OBJECT_CD      IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR           IN     VARCHAR2,
      P_PROCESS_CNT       OUT NUMBER,
      P_ERROR             OUT VARCHAR2
   );


   PROCEDURE PRO_EARNING_DEDUCTION (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_PAYSC_ID         IN     HRM_EMPLOYEE.PAYSC_ID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRO_ARREAR (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );



   PROCEDURE PRO_MISC_EAR_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_OFFICE_CD        IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT       IN     VARCHAR2,
      P_EMP_TYPE         IN     HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE DEFAULT '01'
                                                                            ,
      P_PAY_DT_FROM      IN     DATE,
      P_PAY_DT_TO        IN     DATE,
      P_PAYABLE_DT       IN     DATE,
      P_SALARY_PROCESS   IN     SAL_SPEC_EAR_DED_MST.SALARY_PROCESS%TYPE,
      P_OBJECT_CD        IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRO_PFL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRO_HBL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRO_EMP_EAR_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRC_VOUCHER (
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_VOUCHER_SOURCE   IN     VARCHAR2,
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_PAYMENT_TYPE     IN     SAL_SALARY_MST.PAYMENT_TYPE%TYPE,
      P_OFFICE_CD        IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_OFF   IN     VARCHAR2,
      P_DIVDEPT_CD       IN     SAL_SALARY_MST.DIVDEPT_CD%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_APPRV_DATE       IN     DATE,
      P_OBJECT_CD        IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRO_ADV_SAL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   );


   PROCEDURE PRO_INTEREST_AMOUNT (
      P_LOAN_TYPE      IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID        IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_INTEREST_AMT      OUT NUMBER,
      P_ERROR             OUT VARCHAR2
   );

   PROCEDURE PRO_ARREAR_PF (P_EMP_GID       IN     HRM_EMPLOYEE.EMP_GID%TYPE,
                            P_OFFICE_CD     IN     HRM_OFFICE.OFFICE_CD%TYPE,
                            P_DESCENDANT    IN     VARCHAR2,
                            P_SAL_DT_FROM   IN     DATE,
                            P_SAL_DT_TO     IN     DATE,
                            P_SALARY_DT     IN     DATE,
                            P_IUSR          IN     VARCHAR2,
                            P_ERROR            OUT VARCHAR2);
END PKG_SALARY_PROCESS_old;
/


--
-- PKG_TRANS_REPORT  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_trans_report
IS
   /******************************************************************************
         NAME:       pkg_trans_report
         PURPOSE:    commission, cheque print, payment receipt transaction report

         REVISIONS:
         Ver         Date           Created By                   Description
         ---------  ------------    -----------------------      ------------------------------------
                                                                 p_trns_tp = 01 For claim;
                                                                             02 For pension commutation claim
                                                                             03 For Fund requisition;
                                                                             04 For Miscellaneous payment
                                                                             050 For Suspense Return for Policy No
                                                                             051 For Suspense Return for Proposal No
                                                                             06 For Policy Loan
                                                                             07 For Surrender
                                                                             08 For FA Commission
         1.0        13-APR-2014     Md.Zahid Hasan                           09 Employeer of FA Commission
         1.0        01-FEB-2015     Md.Zahid Hasan                           10 Employeer of FA Release/Bonus
         1.0        23-JUL-2014     Md.Zahid Hasan                           16 Claim Ex Gratia Cheque
         1.0        08-OCT-2015     Md.Zahid Hasan                           11 Claim Tax Summery

         1.1        28-MAY-2015     Md. Zahid Hasan             p_report_tp = 01 Claim Payment Receipt;
                                                                              02 Policy Loan Payment Receipt
                                                                              03 Surrender Payment Receipt

         Change History :
         Ver         Date           Changed By                   Description
         ---------  ------------    ----------------            -------------------------------------
         1.1        13-APR-2014     Md.Zahid Hasan               p_trns_tp = 08 For FA Commission

      *******************************************************************************/
   TYPE tp_cheque_info_rec IS RECORD (
      policy_no       VARCHAR2 (20),
      cheque_dt1      DATE,
      cheque_dt2      VARCHAR2 (50),
      client_nm       VARCHAR2 (200),
      cheque_pay_to   VARCHAR2 (500),
      payable_amt1    NUMBER (12, 2),
      payable_amt2    NUMBER (12, 2),
      payment_desc    VARCHAR2 (200),
      amt_inwords     VARCHAR2 (200)
   );

   TYPE tp_cheque_info_tab IS TABLE OF tp_cheque_info_rec;

   FUNCTION fun_cheque_print (
      p_office_cd       hrm_office.office_cd%TYPE,
      p_descendant      VARCHAR2,
      p_cheque_dt_frm   DATE,
      p_cheque_dt_to    DATE
                            --,p_pgid                              ins_p_summery.pgid%TYPE
   ,
      p_trns_tp         VARCHAR2,
      p_whrcls          VARCHAR2 DEFAULT '1=1',
      p_report_option   VARCHAR2 DEFAULT '0'
   )
      RETURN tp_cheque_info_tab PIPELINED;

   TYPE tp_payroll_cheque_rec IS RECORD (
      emp_id          hrm_employee.emp_id%TYPE,
      cheque_dt1      DATE,
      cheque_dt2      VARCHAR2 (50),
      emp_nm          VARCHAR (200),
      cheque_pay_to   VARCHAR2 (500),
      payable_amt1    NUMBER (12, 2),
      payable_amt2    NUMBER (12, 2),
      payment_desc    VARCHAR2 (100),
      amt_inwords     VARCHAR2 (200)
   );

   TYPE tp_payroll_cheque_tab IS TABLE OF tp_payroll_cheque_rec;

   FUNCTION fun_payroll_cheque_print (
      p_office_cd       hrm_office.office_cd%TYPE,
      p_descendant      VARCHAR2,
      p_cheque_dt_frm   DATE,
      p_cheque_dt_to    DATE
                            --,p_pgid                              ins_p_summery.pgid%TYPE
   ,
      p_trns_tp         VARCHAR2,
      p_whrcls          VARCHAR2 DEFAULT '1=1',
      p_report_option   VARCHAR2 DEFAULT '0'
   )
      RETURN tp_payroll_cheque_tab PIPELINED;

   /*TYPE tp_policy_ledger_rec IS RECORD(
       policy_no           ins_p_proposal.policy_no%TYPE
      ,payor_nm            VARCHAR2(100)
      ,assured_nm          VARCHAR2(100)
      ,address             VARCHAR2(200)
      ,comm_date           DATE
      ,risk_date           DATE
      ,product_cd          VARCHAR2(5)
      ,term                VARCHAR2(2)
      ,sum_assured         ins_p_summery.sum_assured%TYPE
      ,pay_mode            VARCHAR2(50)
      ,option_nm           VARCHAR2(1)
      ,installment_premium ins_p_summery.installment_premium%TYPE
      ,maturity_date       DATE
      ,last_paid_date      DATE
      ,policy_status       ins_p_summery.policy_status%TYPE
      ,inst_no             ins_prem_acc_receivable.installment_no%TYPE
      ,due_date            DATE
      ,adjustment_date     DATE
      ,adjusted_by         VARCHAR2(50)
      ,adjusted_method     VARCHAR2(50)
      ,coll_amount         VARCHAR2(500)
      ,adj_slip_no         VARCHAR2(500)
      ,receipt_no          VARCHAR2(500));*/
   --Musha on 28-02-2015
   TYPE tp_policy_ledger_rec IS RECORD (
      policy_no             ins_p_proposal.policy_no%TYPE,
      payor_nm              VARCHAR2 (100),
      assured_nm            VARCHAR2 (100),
      address               VARCHAR2 (300),
      comm_date             DATE,
      risk_date             DATE,
      product_cd            VARCHAR2 (5),
      term                  VARCHAR2 (2),
      sum_assured           ins_p_summery.sum_assured%TYPE,
      pay_mode              VARCHAR2 (50),
      option_nm             VARCHAR2 (1),
      installment_premium   ins_p_summery.installment_premium%TYPE,
      maturity_date         DATE,
      last_paid_date        DATE,
      policy_status         ins_p_summery.policy_status%TYPE,
      inst_no               ins_prem_acc_receivable.installment_no%TYPE,
      due_date              DATE,
      coll_pay_mode         VARCHAR2 (50),
      adjustment_date       DATE,
      adjusted_by           VARCHAR2 (50),
      adjusted_method       VARCHAR2 (50),
      coll_amount           VARCHAR2 (500),
      inst_coll_amount      NUMBER,
      adj_slip_no           VARCHAR2 (100),
      receipt_no            VARCHAR2 (500),
      receipt_dt            VARCHAR2 (500),
      coll_tot_prem_amt     acc_receivables.tot_premium_amt%TYPE,
      suspense_amt          ins_p_summery.suspense_amt%TYPE,
      unadj_prem_amt        acc_receivables.coll_amount%TYPE,
      return_prem_amt       acc_receivables.coll_amount%TYPE,
      adjusted_amt          acc_receivables.coll_amount%TYPE,
      entry_age             NUMBER
   );

   TYPE tp_policy_ledger_tab IS TABLE OF tp_policy_ledger_rec;

   FUNCTION fun_policy_ledger_info (
      p_pgid        ins_p_proposal.pgid%TYPE,
      p_office_cd   hrm_office.office_cd%TYPE,
      p_check       VARCHAR2
   )
      RETURN tp_policy_ledger_tab PIPELINED;

/*********************************************/
   TYPE tp_policy_prem_coll_rec IS RECORD (
      policy_no             VARCHAR2 (20),
      payor_nm              VARCHAR2 (160),
      assured_nm            VARCHAR2 (160),
      address               VARCHAR2 (400),
      comm_date             DATE,
      risk_date             DATE,
      product_cd            VARCHAR2 (5),
      term                  VARCHAR2 (3),
      sum_assured           ins_p_summery.sum_assured%TYPE,
      pay_mode              VARCHAR2 (50),
      option_nm             VARCHAR2 (15),
      installment_premium   ins_p_summery.installment_premium%TYPE,
      maturity_date         DATE,
      last_paid_date        DATE,
      policy_status         ins_p_summery.policy_status%TYPE,
---------------
      due_cat               VARCHAR2 (50),
      receive_date          DATE,
      received_by           VARCHAR2 (120),
      collection_type       VARCHAR2 (50),
      mode_tp               VARCHAR2 (50),
      receive_mode          VARCHAR2 (50),
      coll_slip_no          acc_receivables.coll_slip_no%TYPE,
      coll_amount           acc_receivables.coll_amount%TYPE,
      coll_slip_rec_dt      DATE,
      status                VARCHAR2 (50),
      due_dt_from           DATE,
      due_dt_to             DATE,
      tot_premium_amt       acc_receivables.tot_premium_amt%TYPE,
      late_fee              acc_receivables.late_fee%TYPE,
      tot_required_amt      acc_receivables.tot_premium_amt%TYPE,
      i_usr                 acc_receivables.i_usr%TYPE,
      receipt_no            VARCHAR2 (50)
   );

   TYPE tp_policy_prem_coll_tab IS TABLE OF tp_policy_prem_coll_rec;

   FUNCTION fun_policy_prem_coll_info (
      p_pgid              ins_p_proposal.pgid%TYPE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_descendant_flag   VARCHAR2
   )
      RETURN tp_policy_prem_coll_tab PIPELINED;

/*********************************************/
   TYPE tp_unadj_policy_rec IS RECORD (
      receipt_no         VARCHAR2 (50),
      receive_date       DATE,
      policy_no          VARCHAR2 (10),
      collection_type    VARCHAR2 (50),
      coll_slip_no       acc_receivables.coll_slip_no%TYPE,
      coll_slip_rec_dt   DATE,
      receive_mode       VARCHAR2 (50),
      due_dt_from        DATE,
      due_dt_to          DATE,
      tot_premium_amt    acc_receivables.tot_premium_amt%TYPE,
      late_fee           acc_receivables.late_fee%TYPE,
      tot_required_amt   acc_receivables.tot_premium_amt%TYPE,
      coll_amount        acc_receivables.coll_amount%TYPE,
      adv_due_amount     acc_receivables.coll_amount%TYPE
   );

   TYPE tp_unadj_policy_tab IS TABLE OF tp_unadj_policy_rec;

   FUNCTION fun_unadj_policy_info (
      p_office_cd         hrm_office.office_cd%TYPE,
      p_descendant_flag   VARCHAR2,
      p_mode_tp           acc_receivables.mode_tp%TYPE,
      p_unadj_cause       VARCHAR2,
      p_start_dt          DATE,
      p_end_dt            DATE
   )
      RETURN tp_unadj_policy_tab PIPELINED;

   -- Payment Receipt
   TYPE payment_receipt_rec IS RECORD (
      party_name                  ins_p_personal.party_name%TYPE,
      pgid                        ins_p_proposal.pgid%TYPE,
      policy_no                   ins_p_proposal.policy_no%TYPE,
      risk_date                   ins_p_summery.risk_date%TYPE,
      product_term                VARCHAR2 (10),
      last_paid_date              DATE,
      next_due_date               DATE,
      sum_assured                 ins_p_summery.sum_assured%TYPE,
      total_yearly_premium        ins_p_summery.total_yearly_premium%TYPE,
      total_deposit_prem          NUMBER (10, 2),
      product_nm                  ins_product.product_nm%TYPE,
      net_payable_amt             NUMBER (10, 2),
      suspense_amt                NUMBER (10, 2),
      anf_premium_amt             NUMBER (10, 2),
      prem_due_late_fee           NUMBER (10, 2),
      anf_late_fee                NUMBER (10, 2),
      issue_dt                    DATE,
      office_code                 hrm_office.office_cd%TYPE,
      prepared_by                 VARCHAR2 (20),
      other_ded_amt               NUMBER (10, 2),
      source_tax                  NUMBER (10, 2),
      gross_payable_amt           NUMBER (10, 2),
      bonus_payable               NUMBER (10, 2),
      payment_dt                  DATE,
      installment_premium         ins_p_summery.installment_premium%TYPE,
      address                     VARCHAR2 (300),
      clm_cause_cd                clm_claim_cause.clm_cause_cd%TYPE,
      clm_detl_cd                 clm_claim_cause_detl.clm_detl_cd%TYPE,
      bank_nm                     acc_bank.bank_nm%TYPE,
      branch_nm                   acc_branch.br_nm%TYPE,
      bank_acc_no                 VARCHAR2 (50),
      bank_address                VARCHAR2 (100),
      gross_without_anf           NUMBER (10, 2),
      tot_payable                 NUMBER (10, 2),
      loan_ded_amt                NUMBER (10, 2),
      loan_interest               NUMBER (10, 2),
      tot_anf_loan                NUMBER (10, 2),
      total_due                   NUMBER (10, 2),
      in_word_total_due           VARCHAR2 (200),
      total_payable_amt           NUMBER (10, 2),
      in_word_total_payable_amt   VARCHAR2 (200),
      sb_instlno                  VARCHAR2 (3),
      maturity_date               DATE,
      cheque_print_st             VARCHAR2 (50)
   );

   TYPE payment_receipt_tab IS TABLE OF payment_receipt_rec;

   FUNCTION fun_payment_receipt (
      p_pgid            ins_p_proposal.pgid%TYPE,
      p_clm_cause_cd    clm_claim_cause.clm_cause_cd%TYPE,
      p_start_dt        DATE,
      p_end_dt          DATE,
      p_descendant      VARCHAR2,
      p_office_cd       hrm_office.office_cd%TYPE,
      p_payment_type    clm_payment_type.pay_type_cd%TYPE,
      p_policy_tp_cd    ins_policy_type.policy_tp_cd%TYPE,
      p_report_tp       VARCHAR2
                                /* p_report_tp = 01 Claim Payment Receipt;
                                                 02 Policy Loan Payment Receipt
                                                 03 Surrender Payment Receipt */
   ,
      p_appl_sl_no      VARCHAR2,                       --this for policy loan
      p_whrcls          VARCHAR2 DEFAULT '1=1',
      p_report_option   VARCHAR2 DEFAULT 0
   )
      RETURN payment_receipt_tab PIPELINED;

--Project wise collection report
   TYPE tp_proj_wise_coll IS RECORD (
      office_cd        VARCHAR2 (10),
      project_cd       VARCHAR (2),
      first_prem_amt   NUMBER (12, 2),
      deffered_amt     NUMBER (12, 2),
      second_yr_amt    NUMBER (12, 2),
      renewal_amt      NUMBER (12, 2)
   );

   TYPE tp_proj_wise_coll_tab IS TABLE OF tp_proj_wise_coll;

   FUNCTION fun_proj_wise_coll (
      p_office_cat     VARCHAR2,
      p_office_cd      VARCHAR2,
      p_check          CHAR,
      p_ins_tp_cd      NUMBER,
      p_project_cd     NUMBER,
      p_coll_dt_fr     DATE,
      p_coll_dt_to     DATE,
      p_pr_date_from   DATE,
      p_pr_date_to     DATE
   )
      RETURN tp_proj_wise_coll_tab PIPELINED;

--Service Point wise collection report
   TYPE tp_service_wise_coll IS RECORD (
      office_cd        VARCHAR2 (10),
      first_prem_amt   NUMBER (12, 2),
      deffered_amt     NUMBER (12, 2),
      second_yr_amt    NUMBER (12, 2),
      renewal_amt      NUMBER (12, 2)
   );

   TYPE tp_service_wise_coll_tab IS TABLE OF tp_service_wise_coll;

   FUNCTION fun_service_wise_coll (
      p_office_cat     VARCHAR2,
      p_office_cd      VARCHAR2,
      p_check          CHAR,
      p_ins_tp_cd      NUMBER,
      p_coll_dt_fr     DATE,
      p_coll_dt_to     DATE,
      p_pr_date_from   DATE,
      p_pr_date_to     DATE
   )
      RETURN tp_service_wise_coll_tab PIPELINED;

--Month wise collection report
   TYPE tp_month_wise_coll IS RECORD (
      office_cd        VARCHAR2 (10),
      coll_date        DATE,
      first_prem_amt   NUMBER (12, 2),
      deffered_amt     NUMBER (12, 2),
      second_yr_amt    NUMBER (12, 2),
      renewal_amt      NUMBER (12, 2)
   );

   TYPE tp_month_wise_coll_tab IS TABLE OF tp_month_wise_coll;

   FUNCTION fun_month_wise_coll (
      p_office_cat     VARCHAR2,
      p_office_cd      VARCHAR2,
      p_check          CHAR,
      p_ins_tp_cd      NUMBER,
      p_coll_dt_fr     DATE,
      p_coll_dt_to     DATE,
      p_pr_date_from   DATE,
      p_pr_date_to     DATE
   )
      RETURN tp_month_wise_coll_tab PIPELINED;

   TYPE tp_return_premium IS RECORD (
      return_amount         NUMBER (15, 2),
      installment_no_from   NUMBER (3),
      installment_no_to     NUMBER (3),
      due_dt_from           DATE,
      due_dt_to             DATE
   );

   TYPE tp_return_premium_tab IS TABLE OF tp_return_premium;

   FUNCTION fun_return_premium (p_pgid VARCHAR2)
      RETURN tp_return_premium_tab PIPELINED;

   -- 11. Claim tax summery
   TYPE tp_claim_tax_sum_rec IS RECORD (
      pgid                ins_p_proposal.pgid%TYPE,
      policy_no           ins_p_proposal.policy_no%TYPE,
      payment_dt          DATE,
      payable_amt         NUMBER (15, 2),
      bonus               NUMBER (15, 2),
      total_payable_amt   NUMBER (15, 2),
      deposited_premium   NUMBER (15, 2),
      tax_amount          NUMBER (15, 2),
      cal_tax             NUMBER (15, 2),
      vouch_no            VARCHAR2 (15),
      control_office_cd   hrm_office.office_cd%TYPE
   );

   TYPE tp_claim_tax_sum_tab IS TABLE OF tp_claim_tax_sum_rec;

   FUNCTION fun_claim_tax_sum (
      p_office_cd   hrm_office.office_cd%TYPE,
      p_date_fr     DATE,
      p_date_to     DATE
   )
      RETURN tp_claim_tax_sum_tab PIPELINED;

   -- 12. Premium Collection slip for both advance, renewal and partial
   TYPE tp_coll_rec IS RECORD (
      policy_no             VARCHAR2 (30),
      receive_date          DATE,
      i_usr                 VARCHAR2 (31),
      i_dt                  DATE,
      active_office_cd      hrm_office.office_cd%TYPE,
      receive_id            acc_receivables.receive_id%TYPE,
      received_by           acc_receivables.received_by%TYPE,
      mode_tp               acc_receivables.mode_tp%TYPE,
      collection_type       acc_receivables.collection_type%TYPE,
      office_code           hrm_office.office_cd%TYPE,
      receipt_status        acc_receivables.receipt_status%TYPE,
      agent_id              hrm_agent.agent_id%TYPE,
      agent_nm              hrm_agent.agent_nm_eng%TYPE,
      office_nm             VARCHAR2 (200),
      policy_status         VARCHAR2 (50),
      receive_mode          VARCHAR2 (20),
      coll_amount           acc_receivables.coll_amount%TYPE,
      in_word               VARCHAR2 (200),
      avl_sus_amt           NUMBER (10),
      collection_no         VARCHAR2 (100),
      vouch_ref             VARCHAR2 (20),
      coll_slip_no          acc_receivables.coll_slip_no%TYPE,
      coll_slip_rec_dt      DATE,
      collecter             VARCHAR2 (100),
      installment_no_from   NUMBER (3),
      installment_no_to     NUMBER (3),
      adv_due               NUMBER (10),
      late_fee              NUMBER (10),
      due_dt_from           DATE,
      due_dt_to             DATE,
      party_nm              VARCHAR2 (150),
      comm_date             DATE,
      pgid                  ins_p_proposal.pgid%TYPE,
      latefee_waiver        NUMBER (10),
      adv_status            CHAR (1),
      tot_premium_amt       NUMBER (10),
      tot_due_amt           NUMBER (10),
      other_amt             NUMBER (10),
      pay_mode_nm           VARCHAR2 (20),
      tab_term              VARCHAR2 (10),
      installment_premium   NUMBER (10),
      policy_group          VARCHAR2 (100)
   );

   TYPE tp_coll_rec_tab IS TABLE OF tp_coll_rec;

   FUNCTION fun_premium_receipt (
      p_coll_type   CHAR,
      --Here '1'=Advance Collection,'2'=Renewal Collection,'3'Partial Collection
      p_pgid        VARCHAR2,
      p_rec_id      NUMBER,
      p_slno        NUMBER
   )
      RETURN tp_coll_rec_tab PIPELINED;
END;
/


--
-- PKG_TRANS_REPORT_NEW  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_trans_report_new
IS
   /******************************************************************************
         NAME:       pkg_trans_report
         PURPOSE:    commission, cheque print, payment receipt transaction report

         REVISIONS:
         Ver         Date           Created By                   Description
         ---------  ------------    -----------------------      ------------------------------------
                                                                 p_trns_tp = 01 For claim;
                                                                             02 For pension commutation claim
                                                                             03 For Fund requisition;
                                                                             04 For Miscellaneous payment
                                                                             050 For Suspense Return for Policy No
                                                                             051 For Suspense Return for Proposal No
                                                                             06 For Policy Loan
                                                                             07 For Surrender
                                                                             08 For FA Commission
         1.0        13-APR-2014     Md.Zahid Hasan                           09 Employeer of FA Commission
         1.0        01-FEB-2015     Md.Zahid Hasan                           10 Employeer of FA Release/Bonus
         1.0        23-JUL-2014     Md.Zahid Hasan                           16 Claim Ex Gratia Cheque
         1.0        08-OCT-2015     Md.Zahid Hasan                           11 Claim Tax Summery

         1.1        28-MAY-2015     Md. Zahid Hasan             p_report_tp = 01 Claim Payment Receipt;
                                                                              02 Policy Loan Payment Receipt
                                                                              03 Surrender Payment Receipt

         Change History :
         Ver         Date           Changed By                   Description
         ---------  ------------    ----------------            -------------------------------------
         1.1        13-APR-2014     Md.Zahid Hasan               p_trns_tp = 08 For FA Commission

      *******************************************************************************/
   TYPE tp_cheque_info_rec
   IS
      RECORD (
         policy_no       VARCHAR2 (20),
         cheque_dt1      DATE,
         cheque_dt2      VARCHAR2 (50),
         client_nm       VARCHAR2 (200),
         cheque_pay_to   VARCHAR2 (500),
         payable_amt1    NUMBER (12, 2),
         payable_amt2    NUMBER (12, 2),
         payment_desc    VARCHAR2 (200),
         amt_inwords     VARCHAR2 (200)
      );

   TYPE tp_cheque_info_tab IS TABLE OF tp_cheque_info_rec;

   FUNCTION fun_cheque_print (p_office_cd        hrm_office.office_cd%TYPE,
                              p_descendant       VARCHAR2,
                              p_cheque_dt_frm    DATE,
                              p_cheque_dt_to     DATE--,p_pgid                              ins_p_summery.pgid%TYPE
                              ,
                              p_trns_tp          VARCHAR2,
                              p_whrcls           VARCHAR2 DEFAULT '1=1' ,
                              p_report_option    VARCHAR2 DEFAULT '0' )
      RETURN tp_cheque_info_tab
      PIPELINED;

   TYPE tp_payroll_cheque_rec
   IS
      RECORD (
         emp_id          hrm_employee.emp_id%TYPE,
         cheque_dt1      DATE,
         cheque_dt2      VARCHAR2 (50),
         emp_nm          VARCHAR (200),
         cheque_pay_to   VARCHAR2 (500),
         payable_amt1    NUMBER (12, 2),
         payable_amt2    NUMBER (12, 2),
         payment_desc    VARCHAR2 (100),
         amt_inwords     VARCHAR2 (200)
      );

   TYPE tp_payroll_cheque_tab IS TABLE OF tp_payroll_cheque_rec;

   FUNCTION fun_payroll_cheque_print (
      p_office_cd        hrm_office.office_cd%TYPE,
      p_descendant       VARCHAR2,
      p_cheque_dt_frm    DATE,
      p_cheque_dt_to     DATE--,p_pgid                              ins_p_summery.pgid%TYPE
      ,
      p_trns_tp          VARCHAR2,
      p_whrcls           VARCHAR2 DEFAULT '1=1' ,
      p_report_option    VARCHAR2 DEFAULT '0'
   )
      RETURN tp_payroll_cheque_tab
      PIPELINED;

   /*TYPE tp_policy_ledger_rec IS RECORD(
       policy_no           ins_p_proposal.policy_no%TYPE
      ,payor_nm            VARCHAR2(100)
      ,assured_nm          VARCHAR2(100)
      ,address             VARCHAR2(200)
      ,comm_date           DATE
      ,risk_date           DATE
      ,product_cd          VARCHAR2(5)
      ,term                VARCHAR2(2)
      ,sum_assured         ins_p_summery.sum_assured%TYPE
      ,pay_mode            VARCHAR2(50)
      ,option_nm           VARCHAR2(1)
      ,installment_premium ins_p_summery.installment_premium%TYPE
      ,maturity_date       DATE
      ,last_paid_date      DATE
      ,policy_status       ins_p_summery.policy_status%TYPE
      ,inst_no             ins_prem_acc_receivable.installment_no%TYPE
      ,due_date            DATE
      ,adjustment_date     DATE
      ,adjusted_by         VARCHAR2(50)
      ,adjusted_method     VARCHAR2(50)
      ,coll_amount         VARCHAR2(500)
      ,adj_slip_no         VARCHAR2(500)
      ,receipt_no          VARCHAR2(500));*/
   --Musha on 28-02-2015
   TYPE tp_policy_ledger_rec
   IS
      RECORD (
         policy_no             ins_p_proposal.policy_no%TYPE,
         payor_nm              VARCHAR2 (100),
         assured_nm            VARCHAR2 (100),
         address               VARCHAR2 (300),
         comm_date             DATE,
         risk_date             DATE,
         product_cd            VARCHAR2 (5),
         term                  VARCHAR2 (2),
         sum_assured           ins_p_summery.sum_assured%TYPE,
         pay_mode              VARCHAR2 (50),
         option_nm             VARCHAR2 (1),
         installment_premium   ins_p_summery.installment_premium%TYPE,
         maturity_date         DATE,
         last_paid_date        DATE,
         policy_status         ins_p_summery.policy_status%TYPE,
         inst_no               ins_prem_acc_receivable.installment_no%TYPE,
         due_date              DATE,
         coll_pay_mode         VARCHAR2 (50),
         adjustment_date       DATE,
         adjusted_by           VARCHAR2 (50),
         adjusted_method       VARCHAR2 (50),
         coll_amount           VARCHAR2 (500),
         inst_coll_amount      NUMBER,
         adj_slip_no           VARCHAR2 (100),
         receipt_no            VARCHAR2 (500),
         receipt_dt            VARCHAR2 (500),
         coll_tot_prem_amt     acc_receivables.tot_premium_amt%TYPE,
         suspense_amt          ins_p_summery.suspense_amt%TYPE,
         unadj_prem_amt        acc_receivables.coll_amount%TYPE,
         return_prem_amt       acc_receivables.coll_amount%TYPE,
         adjusted_amt          acc_receivables.coll_amount%TYPE,
         entry_age             NUMBER
      );

   TYPE tp_policy_ledger_tab IS TABLE OF tp_policy_ledger_rec;

   FUNCTION fun_policy_ledger_info (p_pgid         ins_p_proposal.pgid%TYPE,
                                    p_office_cd    hrm_office.office_cd%TYPE,
                                    p_check        VARCHAR2)
      RETURN tp_policy_ledger_tab
      PIPELINED;

   /*********************************************/
   TYPE tp_policy_prem_coll_rec
   IS
      RECORD (
         policy_no             VARCHAR2 (20),
         payor_nm              VARCHAR2 (160),
         assured_nm            VARCHAR2 (160),
         address               VARCHAR2 (400),
         comm_date             DATE,
         risk_date             DATE,
         product_cd            VARCHAR2 (5),
         term                  VARCHAR2 (3),
         sum_assured           ins_p_summery.sum_assured%TYPE,
         pay_mode              VARCHAR2 (50),
         option_nm             VARCHAR2 (15),
         installment_premium   ins_p_summery.installment_premium%TYPE,
         maturity_date         DATE,
         last_paid_date        DATE,
         policy_status         ins_p_summery.policy_status%TYPE,
         ---------------
         due_cat               VARCHAR2 (50),
         receive_date          DATE,
         received_by           VARCHAR2 (120),
         collection_type       VARCHAR2 (50),
         mode_tp               VARCHAR2 (50),
         receive_mode          VARCHAR2 (50),
         coll_slip_no          acc_receivables.coll_slip_no%TYPE,
         coll_amount           acc_receivables.coll_amount%TYPE,
         coll_slip_rec_dt      DATE,
         status                VARCHAR2 (50),
         due_dt_from           DATE,
         due_dt_to             DATE,
         tot_premium_amt       acc_receivables.tot_premium_amt%TYPE,
         late_fee              acc_receivables.late_fee%TYPE,
         tot_required_amt      acc_receivables.tot_premium_amt%TYPE,
         i_usr                 acc_receivables.i_usr%TYPE,
         receipt_no            VARCHAR2 (50)
      );

   TYPE tp_policy_prem_coll_tab IS TABLE OF tp_policy_prem_coll_rec;

   FUNCTION fun_policy_prem_coll_info (
      p_pgid               ins_p_proposal.pgid%TYPE,
      p_office_cd          hrm_office.office_cd%TYPE,
      p_descendant_flag    VARCHAR2
   )
      RETURN tp_policy_prem_coll_tab
      PIPELINED;

   /*********************************************/
   TYPE tp_unadj_policy_rec
   IS
      RECORD (
         receipt_no         VARCHAR2 (50),
         receive_date       DATE,
         policy_no          VARCHAR2 (10),
         collection_type    VARCHAR2 (50),
         coll_slip_no       acc_receivables.coll_slip_no%TYPE,
         coll_slip_rec_dt   DATE,
         receive_mode       VARCHAR2 (50),
         due_dt_from        DATE,
         due_dt_to          DATE,
         tot_premium_amt    acc_receivables.tot_premium_amt%TYPE,
         late_fee           acc_receivables.late_fee%TYPE,
         tot_required_amt   acc_receivables.tot_premium_amt%TYPE,
         coll_amount        acc_receivables.coll_amount%TYPE,
         adv_due_amount     acc_receivables.coll_amount%TYPE
      );

   TYPE tp_unadj_policy_tab IS TABLE OF tp_unadj_policy_rec;

   FUNCTION fun_unadj_policy_info (
      p_office_cd          hrm_office.office_cd%TYPE,
      p_descendant_flag    VARCHAR2,
      p_mode_tp            acc_receivables.mode_tp%TYPE,
      p_unadj_cause        VARCHAR2,
      p_start_dt           DATE,
      p_end_dt             DATE
   )
      RETURN tp_unadj_policy_tab
      PIPELINED;

   -- Payment Receipt
   TYPE payment_receipt_rec
   IS
      RECORD (
         party_name                  ins_p_personal.party_name%TYPE,
         pgid                        ins_p_proposal.pgid%TYPE,
         policy_no                   ins_p_proposal.policy_no%TYPE,
         risk_date                   ins_p_summery.risk_date%TYPE,
         product_term                VARCHAR2 (10),
         last_paid_date              DATE,
         next_due_date               DATE,
         sum_assured                 ins_p_summery.sum_assured%TYPE,
         total_yearly_premium        ins_p_summery.total_yearly_premium%TYPE,
         total_deposit_prem          NUMBER (10, 2),
         product_nm                  ins_product.product_nm%TYPE,
         net_payable_amt             NUMBER (10, 2),
         suspense_amt                NUMBER (10, 2),
         anf_premium_amt             NUMBER (10, 2),
         prem_due_late_fee           NUMBER (10, 2),
         anf_late_fee                NUMBER (10, 2),
         issue_dt                    DATE,
         office_code                 hrm_office.office_cd%TYPE,
         prepared_by                 VARCHAR2 (20),
         other_ded_amt               NUMBER (10, 2),
         source_tax                  NUMBER (10, 2),
         gross_payable_amt           NUMBER (10, 2),
         bonus_payable               NUMBER (10, 2),
         payment_dt                  DATE,
         installment_premium         ins_p_summery.installment_premium%TYPE,
         address                     VARCHAR2 (300),
         clm_cause_cd                clm_claim_cause.clm_cause_cd%TYPE,
         clm_detl_cd                 clm_claim_cause_detl.clm_detl_cd%TYPE,
         bank_nm                     acc_bank.bank_nm%TYPE,
         branch_nm                   acc_branch.br_nm%TYPE,
         bank_acc_no                 VARCHAR2 (50),
         bank_address                VARCHAR2 (100),
         gross_without_anf           NUMBER (10, 2),
         tot_payable                 NUMBER (10, 2),
         loan_ded_amt                NUMBER (10, 2),
         loan_interest               NUMBER (10, 2),
         tot_anf_loan                NUMBER (10, 2),
         total_due                   NUMBER (10, 2),
         in_word_total_due           VARCHAR2 (200),
         total_payable_amt           NUMBER (10, 2),
         in_word_total_payable_amt   VARCHAR2 (200),
         sb_instlno                  VARCHAR2 (3),
         maturity_date               DATE,
         cheque_print_st             VARCHAR2 (50)
      );

   TYPE payment_receipt_tab IS TABLE OF payment_receipt_rec;

   FUNCTION fun_payment_receipt (
      p_pgid             ins_p_proposal.pgid%TYPE,
      p_clm_cause_cd     clm_claim_cause.clm_cause_cd%TYPE,
      p_start_dt         DATE,
      p_end_dt           DATE,
      p_descendant       VARCHAR2,
      p_office_cd        hrm_office.office_cd%TYPE,
      p_payment_type     clm_payment_type.pay_type_cd%TYPE,
      p_policy_tp_cd     ins_policy_type.policy_tp_cd%TYPE,
      p_report_tp        VARCHAR2/* p_report_tp = 01 Claim Payment Receipt;
                                                  02 Policy Loan Payment Receipt
                                                  03 Surrender Payment Receipt */
      ,
      p_appl_sl_no       VARCHAR2,                      --this for policy loan
      p_whrcls           VARCHAR2 DEFAULT '1=1' ,
      p_report_option    VARCHAR2 DEFAULT 0
   )
      RETURN payment_receipt_tab
      PIPELINED;

   --Project wise collection report
   TYPE tp_proj_wise_coll
   IS
      RECORD (
         office_cd        VARCHAR2 (10),
         project_cd       VARCHAR (2),
         first_prem_amt   NUMBER (12, 2),
         deffered_amt     NUMBER (12, 2),
         second_yr_amt    NUMBER (12, 2),
         renewal_amt      NUMBER (12, 2)
      );

   TYPE tp_proj_wise_coll_tab IS TABLE OF tp_proj_wise_coll;

   FUNCTION fun_proj_wise_coll (p_office_cat      VARCHAR2,
                                p_office_cd       VARCHAR2,
                                p_check           CHAR,
                                p_ins_tp_cd       NUMBER,
                                p_project_cd      NUMBER,
                                p_coll_dt_fr      DATE,
                                p_coll_dt_to      DATE,
                                p_pr_date_from    DATE,
                                p_pr_date_to      DATE)
      RETURN tp_proj_wise_coll_tab
      PIPELINED;

   --Service Point wise collection report
   TYPE tp_service_wise_coll
   IS
      RECORD (
         office_cd        VARCHAR2 (10),
         first_prem_amt   NUMBER (12, 2),
         deffered_amt     NUMBER (12, 2),
         second_yr_amt    NUMBER (12, 2),
         renewal_amt      NUMBER (12, 2)
      );

   TYPE tp_service_wise_coll_tab IS TABLE OF tp_service_wise_coll;

   FUNCTION fun_service_wise_coll (p_office_cat      VARCHAR2,
                                   p_office_cd       VARCHAR2,
                                   p_check           CHAR,
                                   p_ins_tp_cd       NUMBER,
                                   p_coll_dt_fr      DATE,
                                   p_coll_dt_to      DATE,
                                   p_pr_date_from    DATE,
                                   p_pr_date_to      DATE)
      RETURN tp_service_wise_coll_tab
      PIPELINED;

   --Month wise collection report
   TYPE tp_month_wise_coll
   IS
      RECORD (
         office_cd        VARCHAR2 (10),
         coll_date        DATE,
         first_prem_amt   NUMBER (12, 2),
         deffered_amt     NUMBER (12, 2),
         second_yr_amt    NUMBER (12, 2),
         renewal_amt      NUMBER (12, 2)
      );

   TYPE tp_month_wise_coll_tab IS TABLE OF tp_month_wise_coll;

   FUNCTION fun_month_wise_coll (p_office_cat      VARCHAR2,
                                 p_office_cd       VARCHAR2,
                                 p_check           CHAR,
                                 p_ins_tp_cd       NUMBER,
                                 p_coll_dt_fr      DATE,
                                 p_coll_dt_to      DATE,
                                 p_pr_date_from    DATE,
                                 p_pr_date_to      DATE)
      RETURN tp_month_wise_coll_tab
      PIPELINED;

   TYPE tp_return_premium
   IS
      RECORD (
         return_amount         NUMBER (15, 2),
         installment_no_from   NUMBER (3),
         installment_no_to     NUMBER (3),
         due_dt_from           DATE,
         due_dt_to             DATE
      );

   TYPE tp_return_premium_tab IS TABLE OF tp_return_premium;

   FUNCTION fun_return_premium (p_pgid VARCHAR2)
      RETURN tp_return_premium_tab
      PIPELINED;

   -- 11. Claim tax summery
   TYPE tp_claim_tax_sum_rec
   IS
      RECORD (
         pgid                ins_p_proposal.pgid%TYPE,
         policy_no           ins_p_proposal.policy_no%TYPE,
         payment_dt          DATE,
         payable_amt         NUMBER (15, 2),
         bonus               NUMBER (15, 2),
         total_payable_amt   NUMBER (15, 2),
         deposited_premium   NUMBER (15, 2),
         tax_amount          NUMBER (15, 2),
         cal_tax             NUMBER (15, 2),
         vouch_no            VARCHAR2 (15),
         control_office_cd   hrm_office.office_cd%TYPE
      );

   TYPE tp_claim_tax_sum_tab IS TABLE OF tp_claim_tax_sum_rec;

   FUNCTION fun_claim_tax_sum (p_office_cd    hrm_office.office_cd%TYPE,
                               p_date_fr      DATE,
                               p_date_to      DATE)
      RETURN tp_claim_tax_sum_tab
      PIPELINED;

   -- 12. Premium Collection slip for both advance, renewal and partial
   TYPE tp_coll_rec
   IS
      RECORD (
         policy_no             VARCHAR2 (30),
         receive_date          DATE,
         i_usr                 VARCHAR2 (31),
         i_dt                  DATE,
         active_office_cd      hrm_office.office_cd%TYPE,
         receive_id            acc_receivables.receive_id%TYPE,
         received_by           acc_receivables.received_by%TYPE,
         mode_tp               acc_receivables.mode_tp%TYPE,
         collection_type       acc_receivables.collection_type%TYPE,
         office_code           hrm_office.office_cd%TYPE,
         receipt_status        acc_receivables.receipt_status%TYPE,
         agent_id              hrm_agent.agent_id%TYPE,
         agent_nm              hrm_agent.agent_nm_eng%TYPE,
         office_nm             VARCHAR2 (200),
         policy_status         VARCHAR2 (50),
         receive_mode          VARCHAR2 (20),
         coll_amount           acc_receivables.coll_amount%TYPE,
         in_word               VARCHAR2 (200),
         avl_sus_amt           NUMBER (10),
         collection_no         VARCHAR2 (100),
         vouch_ref             VARCHAR2 (20),
         coll_slip_no          acc_receivables.coll_slip_no%TYPE,
         coll_slip_rec_dt      DATE,
         collecter             VARCHAR2 (100),
         installment_no_from   NUMBER (3),
         installment_no_to     NUMBER (3),
         adv_due               NUMBER (10),
         late_fee              NUMBER (10),
         due_dt_from           DATE,
         due_dt_to             DATE,
         party_nm              VARCHAR2 (150),
         comm_date             DATE,
         pgid                  ins_p_proposal.pgid%TYPE,
         latefee_waiver        NUMBER (10),
         adv_status            CHAR (1),
         tot_premium_amt       NUMBER (10),
         tot_due_amt           NUMBER (10),
         other_amt             NUMBER (10),
         pay_mode_nm           VARCHAR2 (20),
         tab_term              VARCHAR2 (10),
         installment_premium   NUMBER (10),
         policy_group          VARCHAR2 (100)
      );

   TYPE tp_coll_rec_tab IS TABLE OF tp_coll_rec;

   FUNCTION fun_premium_receipt (p_coll_type    CHAR,
                                 --Here '1'=Advance Collection,'2'=Renewal Collection,'3'Partial Collection
                                 p_pgid         VARCHAR2,
                                 p_rec_id       NUMBER,
                                 p_slno         NUMBER)
      RETURN tp_coll_rec_tab
      PIPELINED;
END;
/


--
-- PKG_UTL_REPORT  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_utl_report
IS
   TYPE utl_sp_office_coll_row IS RECORD (
      servicing_off   VARCHAR2 (10),
      sales_off       VARCHAR2 (10),
      branch_off      VARCHAR2 (10),
      first_prem      NUMBER (15, 2),
      deffered        NUMBER (15, 2),
      second_yr       NUMBER (15, 2),
      renewal         NUMBER (15, 2),
      one_stop_amt    NUMBER (15, 2),
      fdr_amt         NUMBER (15, 2)
   );

   TYPE utl_sp_office_coll_row_tab IS TABLE OF utl_sp_office_coll_row;

   FUNCTION fun_utl_sp_office_coll (
      p_office_tp          CHAR,
      p_servicing_off_cd   VARCHAR2,
      p_sales_off_cd       VARCHAR2,
      p_branch_off_cd      VARCHAR2,
      p_coll_dt_fr         DATE,
      p_coll_dt_to         DATE,
      p_bus_cal_tp         CHAR,
      p_with_control_off   CHAR,
      p_receive_mode       VARCHAR2
   )
      RETURN utl_sp_office_coll_row_tab PIPELINED;

   TYPE utl_sp_emp_coll_row IS RECORD (
      servicing_off   VARCHAR2 (10),
      sales_off       VARCHAR2 (10),
      branch_off      VARCHAR2 (10),
      emp_gid         NUMBER (10),
      first_prem      NUMBER (15, 2),
      deffered        NUMBER (15, 2),
      second_yr       NUMBER (15, 2),
      renewal         NUMBER (15, 2),
      one_stop_amt    NUMBER (15, 2),
      fdr_amt         NUMBER (15, 2)
   );

   TYPE utl_sp_emp_coll_row_tab IS TABLE OF utl_sp_emp_coll_row;

   FUNCTION fun_utl_sp_emp_coll (
      p_office_tp          CHAR,
      p_servicing_off_cd   VARCHAR2,
      p_sales_off_cd       VARCHAR2,
      p_branch_off_cd      VARCHAR2,
      p_coll_dt_fr         DATE,
      p_coll_dt_to         DATE,
      p_bus_cal_tp         CHAR,
      p_receive_mode       VARCHAR2
   )
      RETURN utl_sp_emp_coll_row_tab PIPELINED;

   TYPE uts_off_ded_row IS RECORD (
      office_cd       VARCHAR2 (10),
      head_off        VARCHAR2 (10),
      servicing_off   VARCHAR2 (10),
      sales_off       VARCHAR2 (10),
      branch_off      VARCHAR2 (10)
   );

   TYPE uts_off_ded_row_tab IS TABLE OF uts_off_ded_row;

   FUNCTION fun_uts_ded_wise_bus (p_office_tp CHAR)
      RETURN uts_off_ded_row_tab PIPELINED;
END;
/


--
-- PKG_VALUATION_REPORT  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_valuation_report
IS
   TYPE tp_lapse_ratio_rec IS RECORD (
      report_parameter     VARCHAR2 (200),
      commencement_date    VARCHAR2 (100),
      sl_no                NUMBER,
      description          VARCHAR2 (200),
      inforce_policy       NUMBER,
      due_pol_or_prem      NUMBER,
      total_collection     NUMBER,
      lapse_policy         NUMBER,
      lapse_ratio          NUMBER (10, 2),
      full_collection      NUMBER,
      partial_collection   NUMBER
   );

   TYPE tp_lapse_ratio_tab IS TABLE OF tp_lapse_ratio_rec;

   FUNCTION fun_lapse_ratio (
      p_date_fr        DATE,
      p_date_to        DATE,
      p_coll_date_fr   DATE,
      p_coll_date_to   DATE,
      p_grace_period   NUMBER,
      p_previous_yr    VARCHAR2
   )
      RETURN tp_lapse_ratio_tab PIPELINED;
END;
/


--
-- PKG_VAL_IDRA_LAPSE_REPORT  (Package) 
--
CREATE OR REPLACE PACKAGE INS.pkg_val_idra_lapse_report
IS

    /******************************************************************************
      NAME:      pkg_val_idra_lapse_report
      PURPOSE: This package has created for IDRA AUDIT  LAPSE  POLICYU RATIO FOR ANY YEAR
      

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        24/11/2022             1. Alamgir Hossain
   ******************************************************************************/
  

   TYPE tp_lapse_ratio_rec
   IS
      RECORD (
       
         ser_off                       VARCHAR2 (200),
         org_off                       VARCHAR2 (200),
         def_due_policy                NUMBER,
         def_due_premium               NUMBER,
         def_tot_coll_policy           NUMBER,
         def_full_coll_policy          NUMBER,
         def_partial_coll_policy       NUMBER,
         def_full_coll_prem            NUMBER,
         def_partial_coll_prem         NUMBER,
         no_2nd_due_policy             NUMBER,
         no_2nd_due_premium            NUMBER,
         no_2nd_tot_coll_policy        NUMBER,
         no_2nd_full_coll_policy       NUMBER,
         no_2nd_partial_coll_policy    NUMBER,
         no_2nd_full_coll_prem         NUMBER,
         no_2nd_partial_coll_prem      NUMBER,
         renewal_due_policy            NUMBER,
         renewal_due_premium           NUMBER,
         renewal_tot_coll_policy       NUMBER,
         renewal_full_coll_policy      NUMBER,
         renewal_partial_coll_policy   NUMBER,
         renewal_full_coll_prem        NUMBER,
         renewal_partial_coll_prem     NUMBER
      );

   TYPE tp_lapse_ratio_tab IS TABLE OF tp_lapse_ratio_rec;

   FUNCTION fun_idra_lapse_ratio (p_date_fr         DATE,
                                  p_date_to         DATE,
                                  p_coll_date_fr    DATE,
                                  p_coll_date_to    DATE,
                                  p_grace_period    NUMBER,
                                  p_previous_yr     VARCHAR2)
      RETURN tp_lapse_ratio_tab
      PIPELINED;
END;
/


--
-- WEBUTIL_DB  (Package) 
--
CREATE OR REPLACE PACKAGE INS.WEBUTIL_DB AUTHID CURRENT_USER AS

/*********************************************************************************\
 * WebUtil_DB - Database functions used by the WebUtil_File_Transfer
 * Package.  These functions allow reading and writing direct
 * to the specified BLOB in the database.
 *  The functions should not be called externally from WebUtil
 *********************************************************************************
 * Version 1.0.0
 *********************************************************************************
 * Change History
 *   DRMILLS 11/JAN/2003 - Creation
 *
\*********************************************************************************/

  FUNCTION  OpenBlob(blobTable  in VARCHAR2,
                     blobColumn in VARCHAR2,
                     blobWhere  in VARCHAR2,
                     openMode   in VARCHAR2,
                     chunkSize  in PLS_INTEGER default null) return BOOLEAN;

  FUNCTION  CloseBlob(checksum in PLS_INTEGER) return BOOLEAN;

  PROCEDURE WriteData(data in VARCHAR2);

  FUNCTION ReadData return VARCHAR;

  FUNCTION GetLastError return PLS_INTEGER;

  FUNCTION GetSourceLength  return PLS_INTEGER;

  FUNCTION GetSourceChunks  return PLS_INTEGER;

END WEBUTIL_DB;
/


--
-- PKG_COMMISSION_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_COMMISSION_REPORT FOR INS.PKG_COMMISSION_REPORT;


--
-- PKG_CLM_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_CLM_CAL FOR INS.PKG_CLM_CAL;


--
-- PKG_UTL_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_UTL_REPORT FOR INS.PKG_UTL_REPORT;


--
-- PKG_SALARY_PROCESS  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_SALARY_PROCESS FOR INS.PKG_SALARY_PROCESS;


--
-- PKG_PROVIDENT_FUND  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_PROVIDENT_FUND FOR INS.PKG_PROVIDENT_FUND;


--
-- PKG_LIVE_DATA_MGR  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_LIVE_DATA_MGR FOR INS.PKG_LIVE_DATA_MGR;


--
-- PKG_PMIS_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_PMIS_REPORT FOR INS.PKG_PMIS_REPORT;


--
-- PKG_NEWBUSINESS_NEW  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_NEWBUSINESS_NEW FOR INS.PKG_NEWBUSINESS_NEW;


--
-- PKG_NEWBUSINESS  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_NEWBUSINESS FOR INS.PKG_NEWBUSINESS;


--
-- PKG_MIS_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_MIS_REPORT FOR INS.PKG_MIS_REPORT;


--
-- PKG_GL_ACCOUNT_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_ACCOUNT_REPORT FOR INS.PKG_GL_ACCOUNT_REPORT;


--
-- WEBUTIL_DB  (Synonym) 
--
CREATE PUBLIC SYNONYM WEBUTIL_DB FOR INS.WEBUTIL_DB;


--
-- PKG_GL_YEAR_CLOSING  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_YEAR_CLOSING FOR INS.PKG_GL_YEAR_CLOSING;


--
-- PKG_GL_PF  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_PF FOR INS.PKG_GL_PF;


--
-- PKG_GL_DR_CR_VOUCHER  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_DR_CR_VOUCHER FOR INS.PKG_GL_DR_CR_VOUCHER;


--
-- PKG_GL_VOUCHER  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_VOUCHER FOR INS.PKG_GL_VOUCHER;


--
-- PKG_GL_GRA  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_GRA FOR INS.PKG_GL_GRA;


--
-- PKG_EMP_ADV_REGISTER  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_EMP_ADV_REGISTER FOR INS.PKG_EMP_ADV_REGISTER;


--
-- PKG_TRANS_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_TRANS_REPORT FOR INS.PKG_TRANS_REPORT;


--
-- PKG_OFFICE_CASH_BAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_OFFICE_CASH_BAL FOR INS.PKG_OFFICE_CASH_BAL;


--
-- PKG_PF_YEAR_CLOSING  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_PF_YEAR_CLOSING FOR INS.PKG_PF_YEAR_CLOSING;


--
-- PKG_INVESTMENT_CALCULATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_INVESTMENT_CALCULATION FOR INS.PKG_INVESTMENT_CALCULATION;


--
-- PKG_GRA_YEAR_CLOSING  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GRA_YEAR_CLOSING FOR INS.PKG_GRA_YEAR_CLOSING;


--
-- PKG_VALUATION_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_VALUATION_REPORT FOR INS.PKG_VALUATION_REPORT;


GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO INS_WEB;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO NEPAL;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACCTUAL_BANK_DEPOSIT;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_AUDITOR;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_BANK;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_BANK;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_BANK;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_BANK_REC;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_CASH_HEAD_TRF;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_CASH_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_CASH_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_CASH_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_CEN_HEADOFF;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_CHEQ_ISSU;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_CHEQ_ISSU;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_CHEQ_ISSU;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_CH_HEAD;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_CH_HEAD;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_INCHARGE_SER;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_INCHARGE_SER;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_INCHARGE_SER;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_ACC_ORG_TRF_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_OROCESS_ORG;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_POLICY_LOAN;

GRANT EXECUTE ON INS.PKG_GL_YEAR_CLOSING TO RL_ACC_PRF;

GRANT EXECUTE ON INS.PKG_GL_YEAR_CLOSING TO RL_ACC_PROCESS;

GRANT EXECUTE ON INS.PKG_EMP_ADV_REGISTER TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PKG_OFFICE_CASH_BAL TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PKG_OFFICE_CASH_BAL TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_SALARY_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_TAX_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_TRF_IT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PKG_OFFICE_CASH_BAL TO RL_ACC_TRIAL_BLANCE;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ADMIN_LOAN;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ADMIN_LOAN;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_ADMIN_RPT_IT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_ALTERATION_APPLICATION_TRF;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_AUDIT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_AUDIT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_AUDIT;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_AUDIT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_AUDIT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_BANK_INTEREST_TAX_SCHEDULE;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CASHIER_02;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_CASH_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CASH_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CHEQUE_TRF_HEAD;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CLAIM_ACC_HEAD;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CLAIM_APPROVAL;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CLAIM_AUDIT_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CLAIM_ONESTOP;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_CLAIM_PROSS;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CLAIM_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CLAIM_RPT_TRF;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CLAIM_TRF_ORG;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_CMC_INCHARGE;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CMC_INCHARGE;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CMS_BILL_DISBUSEMENT;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_ORGOFF_TRR;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_TRR;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_CMS_TRR;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_TRR_ALL;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_COLLECTION_RPT;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_DALIL_TRF;

GRANT EXECUTE ON INS.PKG_DASHBOARD TO RL_DASHBOARD_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_DEATH_CLAIIM_RFT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_DEATH_CLAIM_INCHARGE;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_DEATH_CLAIM_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_DEATH_CLAIM_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_DEATH_CLAIM_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_DEPUTY_DEAH_CLAIM;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_DES_TRF;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_DEV_ADMIN_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_DEV_HEAD_ACC;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_DEV_INCHARGE;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_DEV_SALARY_PROCESS;

GRANT EXECUTE ON INS.PKG_SALARY_PROCESS TO RL_DEV_SALARY_PROCESS;

GRANT EXECUTE ON INS.PKG_GL_GRA TO RL_GRATU_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_GRATU_TRF;

GRANT EXECUTE ON INS.PKG_GRA_YEAR_CLOSING TO RL_GRATU_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_GROUP_TRF;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_HR_DEPUTY_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_HR_DEPUTY_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ICD_ACC_FUND_OTHERS;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ICD_GEN_ACC_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ICD_GEN_ACC_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_INCHARGE_CASH;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_INCHARGE_CHEQUE_ACC;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_INCHARGE_GROUP;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_INCHARGE_LICENSE;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_INCHARGE_LICENSE;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_INCHARGE_LICENSE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_INCHARGE_PR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_INCHARGE_UNDER_DEPUTY;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_LICENSE_TRF_CODE;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_LICENSE_TRF_CODE;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_LICENSE_TRF_CODE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_LOAN_APP_APPR_DISBUS_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_MB_AGENT_COLLECTION_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_MB_AGENT_NEW_BUSINESS_RPT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_MB_AGENT_NEW_BUSINESS_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_MODHUMOTI_AGENT_BANKING_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_MODHUMOTI_BANK_ACC_RPT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_MODHUMOTI_BANK_NEW_BUSINESS;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_MODHUMOTI_BANK_NEW_BUSI_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_MODHUMOTI_BANK_PREM_COLLECT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_ASSING_DEV_TRF;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_NB_ORG;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_ORG;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_NB_ORG;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_ORGOFF_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_ORGOFF_TRR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_TRR;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_OPERATOR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_OPERATOR;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_OPERATOR;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_OTHER_COLLECTION_APR_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PAYROLL_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PF_GF_APPROVAL;

GRANT EXECUTE ON INS.PKG_GL_PF TO RL_PF_TR;

GRANT EXECUTE ON INS.PKG_PROVIDENT_FUND TO RL_PF_TR;

GRANT EXECUTE ON INS.PKG_GL_PF TO RL_PF_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PF_TRF;

GRANT EXECUTE ON INS.PKG_PF_YEAR_CLOSING TO RL_PF_TRF;

GRANT EXECUTE ON INS.PKG_PROVIDENT_FUND TO RL_PF_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PF_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_PIR_TRF;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_PMIS_ADM_DEPUTY;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PMIS_ADM_DEPUTY;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PMIS_ADM_TRF;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PMIS_ADM_TRR;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PMIS_ADM_TRR;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PMIS_ADM_TRR;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PMIS_DEV_ADMIN_DEPUTY;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_PMIS_DEV_ADMIN_DEPUTY;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PMIS_DEV_COST_RPT;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_PMIS_DEV_COST_RPT;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PMIS_DEV_RPT_MONITOR;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_PMIS_DEV_RPT_MONITOR;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PMIS_DEV_TRPT;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PMIS_DEV_TRR;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PMIS_DEV_TRR;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_PMIS_DEV_TRR;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PMIS_OFFICE_CTRL_PRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_POLICY_DALIL_INCHARGE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_POLICY_INF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_POLICY_LOAN_RPT;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_POLICY_REGISTER_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PREMIUIM_COLLECTION_REPORT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PREMIUM_COLL_SUMMARY_RPT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_PROPOSAL_INFORMATION_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PR_CLAIM;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PR_DEP_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PR_TRF_OFFICE;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PS_DMD_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PS_DMD_RPT;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_PS_DMD_RPT;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PS_MD;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PS_MD;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_REINSURANCE_RPT;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_RLCMS_TRP;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_RPT_AUDIT;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_RPT_AUDIT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_RPT_AUDIT;

GRANT EXECUTE ON INS.PKG_SALARY_PROCESS TO RL_SALARY_APPROVAL;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_SALARY_DEV_INCHARGE;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_SALARY_DEV_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_SALARY_DEV_RPT;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_SALARY_DEV_RPT;

GRANT EXECUTE ON INS.PKG_SALARY_PROCESS TO RL_SALARY_PROCESS;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SAL_ADMIN_ACC;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SAL_DISBURSE_PROCESS;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_SAL_HR_PROSS;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_SER_DEPUTY_INCHARGE;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_SER_DEPUTY_INCHARGE;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_SER_PRF;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_SER_REP;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_SER_REPORT;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_SER_RPT_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SER_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_SER_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SER_TRF_IT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SER_TRF_ORG;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_SUMMARY_BANK_RECONCILE_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_TEST123;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_TEST_321;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_TOP_20_MONITOR;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_TOP_20_MONITOR;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_TOP_20_MONITOR;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_TOP_20_MONITOR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UNDER_DEPUTY_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UNDER_RPT_INCHARGE;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UNDER_RPT_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_UPDATE_LEGER_TRF;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_UTILITY_TRF_RPT;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_UTILITY_TRF_RPT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UW;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UW_ORG;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UW_TR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UW_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_UW_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_VALUATION_RPT_TR;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_VALUATION_RPT_TR;


--
-- PKG_CLM_CAL  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_clm_cal
AS
   PROCEDURE pro_clm_policy_list (
      p_policy_no         IN       ins_p_proposal.policy_no%TYPE,
      -- Contain Policy No
      p_product_cd        IN       ins_product.product_cd%TYPE,
      -- Contain Product Code
      p_office_cd         IN       hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_flag   IN       VARCHAR2,
      -- IF Y Then consider descend office
      p_cause_cd          IN       clm_product_claim_detl.clm_cause_cd%TYPE,
      --Contain claim cause e.g. maturity, death
      p_payment_type      IN       clm_product_claim_detl.payment_type%TYPE,
      --Contain payment type e.g. single,stage,pension
      p_start_dt          IN       DATE,
      -- Contain Start Date Of The User Given Date Range
      p_end_dt            IN       DATE,
      p_user              IN       VARCHAR2,             --Contain input user
      -- Contain End Date Of The User Given Date Range
      --p_ref_clm_amt       IN OUT   pkg_clm_cal.ref_clm_amt,
      -- Contain all calculate policy with amount
      p_process_cnt       OUT      NUMBER,   -- Return no of record processed
      p_error             OUT      VARCHAR2  -- Return Error Message If Raise
   )
   IS
      /******************************************************************************
        Created By  : Syed Md. Musha
        PURPOSE     : Generate The List Of Policy Wise Benefit For Which Claim
                      Payable Will Be Calculated. Using This List Call Another
                      Procedure To Calculate The Payable Amount

        REVISIONS:
        Ver        Date         Author             Description
        ---------  ----------  ---------------    ------------------------------------
        1.0                     Syed Md. Musha     Created this procedure
        1.1                     Md Zahid Hasan     Modified this procedure

        Change History :
        Date          Changed By               Description
       ------         ------------            -----------------------------
       17/06/2014     Md Zahid Hasan          Erase LPAD from Policy No
       25/06/2014     Md Zahid Hasan          Modified condition [AND NVL(m.approve_flag, 'N') = 'Y'] to [AND NVL(m.approve_flag, '0') = '1']

      ******************************************************************************/
      v_clm_value           NUMBER (15, 2);
      v_error               VARCHAR2 (2000);
      v_policy_no           ins_p_proposal.policy_no%TYPE;
      v_pgid                ins_p_summery.pgid%TYPE;
      v_payable_dt          DATE;
      v_payable_no          clm_claim_payable_gen.payable_no%TYPE;
      v_bonus_amt           clm_claim_payable_gen.bonus_payable%TYPE;
      v_loan_amt            clm_claim_payable_gen.loan_ded_amt%TYPE;
      v_interest_amt        clm_claim_payable_gen.loan_interest%TYPE;
      v_suspense_amt        ins_p_summery.suspense_amt%TYPE;
      v_premium_amt         clm_claim_payable_gen.anf_premium_amt%TYPE;
      v_late_fee            clm_claim_payable_gen.anf_late_fee%TYPE;
      v_net_payable_amt     NUMBER (15, 2);
      v_bank_cd             clm_client_account.bank_cd%TYPE;
      v_br_cd               clm_client_account.br_cd%TYPE;
      v_account_no          clm_client_account.account_no%TYPE;
      v_br_address          clm_client_account.address%TYPE;
      v_cnt                 NUMBER (3)                                   := 0;
      v_commut_pct          clm_commutation_info.commutation_pct%TYPE;
      v_ded_amt             NUMBER (15, 2);
      v_claim_type          VARCHAR2 (1);
      v_anf_error           VARCHAR2 (2000);
      v_lien_payable_pct    NUMBER (5, 2)                                := 0;
------------------
      v_loan_sl_no          VARCHAR2 (10);
      v_loan_reco_locking   NUMBER (1);
      v_loan_rec_loc_err    VARCHAR2 (100);
      v_intim_pol_st        VARCHAR2 (2);
      v_paid_sb_amt         NUMBER (12, 2)                               := 0;
      v_source_tax          NUMBER (12, 2)                               := 0;
      v_source_tax_err      VARCHAR2 (200);
      v_sb_setup_cnt        NUMBER (2)                                   := 0;
      v_pending_clm_value   NUMBER (15, 2);
      v_prem_due_late_fee   NUMBER (15, 2)                               := 0;
      v_paid_prem_late_fee  NUMBER (15, 2)                               := 0;
      v_unadj_coll_amt      NUMBER (15, 2)                               := 0;
      v_occurance_dt        DATE;
      v_dod                 DATE;
      v_other_ded_amt       clm_claim_mst.other_ded_amt%TYPE;
      v_alt_due_amount      clm_claim_appl.alt_due_amount%TYPE;
      ---Add by Musha on 15.07.2018
      v_extra_bonus_amt     NUMBER (15, 2)                               := 0;
      v_extra_bonus_error   VARCHAR2 (200);
      --Contain payable percentage if lien applicable
      -----------------------
      v_no_of_anf_loan      NUMBER (5)      := 0;
        v_no_of_anf_loan_yr   NUMBER (2)      := 0;
        v_anf_loan_amount     NUMBER (12, 2)  := 0;
        v_anf_int_amount      NUMBER (12, 2)  := 0;
        v_anf_pay_error       VARCHAR2 (1000);
        v_option_cd           varchar2(2); 
        v_maturity_date       date;
        v_death_claim_pol_st  VARCHAR2 (2);

      /**********************************************************************************
        ---This cursor cotain benefit list for the policy that need claim calculation---
      ***********************************************************************************/
      CURSOR cur_clm_policy_ben
      IS
         SELECT s.pgid, s.last_paid_date, s.comm_date, s.last_paid_inst_no,
                s.term, s.policy_installment, s.policy_status,
                s.policy_status_dt, s.product_cd, p.pay_depends_on,
                p.payment_year, p.installment_type, p.policy_term_fr,
                p.policy_term_to,
                  (s.last_paid_inst_no)
                / (s.policy_installment / s.term) policy_age,
                p.commutation_per, p.sl_no, p.clm_cause_cd, p.clm_detl_cd,
                p.ben_party_cd, p.payment_type, s.maturity_date,
                NULL intimation_no, NULL claim_dt, s.option_cd
           FROM ins_p_summery s,
                clm_product_claim_detl p,
                clm_product_claim_mst l
          WHERE s.product_cd = p.product_cd
            --AND p.installment_type IS NOT NULL
            AND NVL (s.active_status, '1') = '1'
            AND s.pgid = NVL (v_pgid, s.pgid)
            AND p.clm_cause_cd = '02'
            AND p.clm_cause_cd = NVL (p_cause_cd, p.clm_cause_cd)
            AND p.payment_type = NVL (p_payment_type, p.payment_type)
            --AND s.policy_status  = '11'
            AND s.term >= p.policy_term_fr
            AND s.term <= p.policy_term_to
            AND s.product_cd = NVL (p_product_cd, s.product_cd)
            AND fun_policy_surrendered (s.pgid) = '0'
            AND p.product_cd = l.product_cd
            AND p.clm_cause_cd = l.clm_cause_cd
            AND p.clm_detl_cd = l.clm_detl_cd
            AND p.ben_party_cd = l.ben_party_cd
            AND l.setup_id = p.setup_id
            AND s.policy_status = NVL (l.policy_status, s.policy_status)
            AND (   (    NVL (p_descendant_flag, 'N') = 'N'
                     AND s.office_cd = NVL (p_office_cd, s.office_cd)  --Modify By Musha on 09.07.2019 s.servicing_off to s.office_cd
                    )
                 OR (    NVL (p_descendant_flag, 'N') = 'Y'
                     AND s.office_cd IN (
                              SELECT     o.office_cd
                                    FROM hrm_office_setup o
                              START WITH o.office_cd = p_office_cd
                              CONNECT BY PRIOR o.office_cd =
                                                           o.control_office_cd)
                    )
                )
            AND (   (    s.maturity_date >= p_start_dt
                     AND s.maturity_date <= p_end_dt
                     AND (   s.policy_status = '08'
                          OR (    s.policy_status = '09'
                              AND s.maturity_date <= TRUNC (SYSDATE)
                              AND s.option_cd IN ('1', '2')
                             )
                          OR (    s.policy_status = '07'
                              AND s.maturity_date <=
                                               TRUNC (ADD_MONTHS (SYSDATE, 1))
                              AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) = '0'
                             )
                          OR (    s.policy_status = '07'
                              AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) = '2'
                             )
                          OR (    s.policy_status = '02'
                              AND s.maturity_date <=
                                               TRUNC (ADD_MONTHS (SYSDATE, 1))
                              AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) = '0'
                             ) --Musha on 22.11.2016
                         )
                     AND p.pay_depends_on = '07'
                    )
                 OR                                           --stage maturity
                    (    p.payment_year IS NOT NULL
                     AND s.policy_status IN ('01', '03', '07', '08', '09')
                     AND p.payment_year <=
                              s.last_paid_inst_no
                            / (s.policy_installment / s.term)
                     AND --ADD_MONTHS (s.comm_date, (12 * p.payment_year)) ---musha on 22.06.2016
                         (LEAST (ADD_MONTHS (s.comm_date, (12 * p.payment_year)),
                                      ADD_MONTHS (TRUNC (s.comm_date, 'MONTH'),
                                                  (12 * p.payment_year
                                                  )
                                                 )
                                    + (s.comm_date - TRUNC (s.comm_date, 'MONTH'))
                                   )
                            )
                            BETWEEN p_start_dt
                                AND p_end_dt
                    )
                 OR                                  --Pension Aginst Maturity
                    (    p.payment_type = '01'                       --pension
                     AND NVL (p.tot_ben_yr, 999) >=
                            (MONTHS_BETWEEN (p_start_dt, s.maturity_date) / 12
                            )
                     AND (   s.policy_status = '08'
                          OR (    s.policy_status = '07'
                              AND s.maturity_date <=
                                               TRUNC (ADD_MONTHS (SYSDATE, 1))
                              AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) = '0'
                             )
                          OR (    s.policy_status = '07'
                              AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) = '2'
                             )
                         )
                     AND p.installment_type = '04'                   --monthly
                     AND (   (    TO_CHAR (p_start_dt, 'RRRRMM') >=
                                           TO_CHAR (s.maturity_date, 'RRRRMM')
                              AND TO_DATE
                                     (   TO_CHAR (p_start_dt, 'RRRRMM')
                                      || (CASE
                                             WHEN TO_CHAR
                                                        (LAST_DAY (p_start_dt),
                                                         'DD'
                                                        ) >=
                                                    TO_CHAR (s.maturity_date,
                                                             'DD'
                                                            )
                                                THEN TO_CHAR (s.maturity_date,
                                                              'DD'
                                                             )
                                             ELSE TO_CHAR
                                                        (LAST_DAY (p_start_dt),
                                                         'DD'
                                                        )
                                          END
                                         ),
                                      'RRRRMMDD'
                                     ) BETWEEN p_start_dt AND p_end_dt
                             )
                          OR (    TO_CHAR (ADD_MONTHS (p_start_dt, 1),
                                           'RRRRMM'
                                          ) >=
                                           TO_CHAR (s.maturity_date, 'RRRRMM')
                              AND TO_DATE
                                     (   TO_CHAR (ADD_MONTHS (p_start_dt, 1),
                                                  'RRRRMM'
                                                 )
                                      || (CASE
                                             WHEN TO_CHAR
                                                    (LAST_DAY
                                                        (ADD_MONTHS
                                                                  (p_start_dt,
                                                                   1
                                                                  )
                                                        ),
                                                     'DD'
                                                    ) >=
                                                    TO_CHAR (s.maturity_date,
                                                             'DD'
                                                            )
                                                THEN TO_CHAR (s.maturity_date,
                                                              'DD'
                                                             )
                                             ELSE TO_CHAR
                                                    (LAST_DAY
                                                        (ADD_MONTHS
                                                                  (p_start_dt,
                                                                   1
                                                                  )
                                                        ),
                                                     'DD'
                                                    )
                                          END
                                         ),
                                      'RRRRMMDD'
                                     ) BETWEEN p_start_dt AND p_end_dt
                             )
                         )
                    )
                )
            AND NOT EXISTS (
                   SELECT 1
                     FROM clm_payable_calc_detl c
                    WHERE c.product_cd = p.product_cd
                      AND c.clm_cause_cd = p.clm_cause_cd
                      AND c.clm_detl_cd = p.clm_detl_cd
                      AND (   c.sl_no = p.sl_no
                           OR (    p.clm_cause_cd = '02'
                               AND p.clm_detl_cd = '02'
                               AND c.payment_dt = (LEAST (ADD_MONTHS (s.comm_date,
                                                                         (12 * p.payment_year
                                                                         )
                                                                        ),
                                                               ADD_MONTHS (TRUNC (s.comm_date,
                                                                                  'MONTH'),
                                                                           (12 * p.payment_year
                                                                           )
                                                                          )
                                                             + (  s.comm_date
                                                                - TRUNC (s.comm_date, 'MONTH')
                                                               )
                                                            )
                                                     )
                                      /*ADD_MONTHS (s.comm_date,
                                                  p.payment_year * 12
                                                 )*/  ---Musha on 22.06.2016
                              )
                          )
                      AND c.pgid = s.pgid
                      AND (   p.payment_type <> '01'
                           OR (    p.payment_type = '01'
                               AND TRUNC (c.payment_dt) BETWEEN p_start_dt
                                                            AND p_end_dt
                              )
                          )
                      AND c.supp_product_cd IS NULL
                      AND c.supp_ben_cd IS NULL)
            AND (NVL(l.app_req, '0') = '0' OR
                 (l.app_req = '1'
                  AND EXISTS (
                       SELECT 1
                         FROM clm_claim_appl a
                        WHERE a.pgid = s.pgid
                          AND a.clm_cause_cd = p.clm_cause_cd
                          AND a.clm_detl_cd = p.clm_detl_cd
                          AND a.party_cd = p.ben_party_cd
                          /*AND ((fun_ins_policy_type_cd (s.product_cd) <> '02' AND a.payable_dt BETWEEN p_start_dt AND p_end_dt)
                              OR
                              (fun_ins_policy_type_cd (s.product_cd) = '02' AND a.payable_dt = p_start_dt AND a.payable_dt_to = p_end_dt)
                              )*/  --Musha on 09-11-2015
                          AND (   (    fun_ins_policy_type_cd (s.product_cd) <> '02'
                                      AND a.payable_dt BETWEEN p_start_dt AND p_end_dt
                                     )
                                  OR (    fun_ins_policy_type_cd (s.product_cd) = '02'
                                      AND (   a.payable_dt >= p_start_dt
                                           OR p_start_dt BETWEEN a.payable_dt AND a.payable_dt_to
                                          )
                                      AND (   a.payable_dt_to <= p_end_dt
                                           OR p_end_dt BETWEEN a.payable_dt AND a.payable_dt_to
                                          )
                                     )
                                 )
                          AND a.apprv_status = '1')
                  )
                 )
         UNION ALL
         SELECT s.pgid, s.last_paid_date, s.comm_date, s.last_paid_inst_no,
                s.term, s.policy_installment, s.policy_status,
                s.policy_status_dt, s.product_cd, p.pay_depends_on,
                p.payment_year, p.installment_type, p.policy_term_fr,
                p.policy_term_to,
                  (s.last_paid_inst_no)
                / (s.policy_installment / s.term) policy_age,
                p.commutation_per, p.sl_no, p.clm_cause_cd, p.clm_detl_cd,
                p.ben_party_cd, p.payment_type, s.maturity_date,
                m.intimation_no, m.claim_dt, s.option_cd
           FROM ins_p_summery s,
                clm_product_claim_detl p,
                clm_claim_mst m,
                clm_product_claim_mst l
          WHERE s.product_cd = p.product_cd
            --AND p.installment_type IS NOT NULL
            AND NVL (s.active_status, '1') = '1'
            AND s.pgid = NVL (v_pgid, s.pgid)
            AND s.pgid = m.pgid
            AND NVL (m.approve_flag, '0') = '1'
            AND p.clm_cause_cd = m.clm_cause_cd
            AND p.clm_detl_cd = m.clm_detl_cd
            AND p.ben_party_cd = m.ben_party_cd
            AND p.clm_cause_cd = '01'
            AND p.clm_cause_cd = NVL (p_cause_cd, p.clm_cause_cd)
            AND p.payment_type = NVL (p_payment_type, p.payment_type)
            --AND s.policy_status IN ('07', '09', '11')
            AND s.product_cd = NVL (p_product_cd, s.product_cd)
            AND fun_policy_surrendered (s.pgid) = '0'
            AND p.product_cd = l.product_cd
            AND p.clm_cause_cd = l.clm_cause_cd
            AND p.clm_detl_cd = l.clm_detl_cd
            AND p.ben_party_cd = l.ben_party_cd
            AND l.setup_id = p.setup_id
            AND NVL (m.policy_status, '00') =
                            NVL (l.policy_status, NVL (m.policy_status, '00'))
            /*AND (   l.policy_status IS NULL
             OR (    l.policy_status =
                        (fun_find_policy_status (s.pgid,
                                                 s.last_paid_date,
                                                 m.claim_dt
                                                )
                        )
                )
            )*/
            AND (   (    NVL (p_descendant_flag, 'N') = 'N'
                     AND s.office_cd = NVL (p_office_cd, s.office_cd)
                    )
                 OR (    NVL (p_descendant_flag, 'N') = 'Y'
                     AND s.office_cd IN (
                              SELECT     o.office_cd
                                    FROM hrm_office_setup o
                              START WITH o.office_cd = p_office_cd
                              CONNECT BY PRIOR o.office_cd =
                                                           o.control_office_cd)
                    )
                )
            AND (                                             --approved claim
                    (s.policy_status = '02'
                                           --AND s.policy_status_dt >= p_start_dt
                                           --AND s.policy_status_dt <= p_end_dt
                                           --AND. m.claim_dt BETWEEN p_start_dt AND p_end_dt
                     AND p.pay_depends_on = '07'
                    )
                 OR (    s.policy_status = '02'
                     AND s.maturity_date >= p_start_dt
                     AND s.maturity_date <= p_end_dt
                     AND p.pay_depends_on = '02'
                    )
                 OR                                           --stage maturity
                    (    s.policy_status = '02'
                     AND p.payment_year IS NOT NULL
                     AND p.payment_year <=
                              (s.last_paid_inst_no - 1)
                            / (s.policy_installment / s.term)
                     AND ADD_MONTHS (s.comm_date, (12 * p.payment_year))
                            BETWEEN p_start_dt
                                AND p_end_dt
                    )
                 OR                             --monthly pension aginst claim
                    (    s.policy_status = '02'
                     AND p.payment_type = '01'
                     AND p.installment_type = '04'                   --monthly
                     AND NVL (p.granted_yr, 999) >=
                            (MONTHS_BETWEEN (p_start_dt, s.maturity_date) / 12
                            )
                     AND (   (TO_DATE (   TO_CHAR (p_start_dt, 'RRRRMM')
                                       || TO_CHAR (s.policy_status_dt, 'DD'),
                                       'RRRRMMDD'
                                      ) BETWEEN p_start_dt AND p_end_dt
                             )
                          OR (TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 1),
                                                   'RRRRMM'
                                                  )
                                       || TO_CHAR (s.policy_status_dt, 'DD'),
                                       'RRRRMMDD'
                                      ) BETWEEN p_start_dt AND p_end_dt
                             )
                         )
                    )
                 OR                              --yearly pension aginst claim
                    (    s.policy_status = '02'
                     AND p.payment_type = '01'
                     AND p.installment_type = '01'
                     --yearly
                     AND (   (    TO_NUMBER (   TO_CHAR (p_start_dt, 'RRRR')
                                             || TO_CHAR (s.policy_status_dt,
                                                         'MMDD'
                                                        )
                                            ) >=
                                     TO_NUMBER (TO_CHAR (p_start_dt,
                                                         'RRRRMMDD'
                                                        )
                                               )
                              AND TO_NUMBER (   TO_CHAR (p_end_dt, 'RRRR')
                                             || TO_CHAR (s.policy_status_dt,
                                                         'MMDD'
                                                        )
                                            ) <=
                                     TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                             )
                          OR (TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 12),
                                                   'RRRRMM'
                                                  )
                                       || TO_CHAR (s.policy_status_dt, 'DD'),
                                       'RRRRMMDD'
                                      ) BETWEEN p_start_dt AND p_end_dt
                             )
                         )
                    )
                 ---Add this by musha on 03-09-2014; Because after payor death assured get some benefit and policy still running (Child Protectin)
                 OR             --monthly pension aginst claim Child Protectin
                    (    s.policy_status = '02'     --Musha on 20.03.2016 Change '09' to '02'
                     AND p.payment_type = '01'
                     AND p.installment_type = '04'                   --monthly
                     AND NVL (p.granted_yr, 999) >=
                            (MONTHS_BETWEEN (p_start_dt, s.maturity_date) / 12
                            )
                     AND p.pay_depends_on = '02'
                     AND s.maturity_date > p_end_dt
                     AND (   (TO_DATE (   TO_CHAR (p_start_dt, 'RRRRMM')
                                       || TO_CHAR (m.claim_dt, 'DD'),
                                       'RRRRMMDD'
                                      ) BETWEEN p_start_dt AND p_end_dt
                             )
                          OR (TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 1),
                                                   'RRRRMM'
                                                  )
                                       || TO_CHAR (m.claim_dt, 'DD'),
                                       'RRRRMMDD'
                                      ) BETWEEN p_start_dt AND p_end_dt
                             )
                         )
                    )
                 OR              --yearly pension aginst claim Child Protectin
                    (    s.policy_status = '02'     --Musha on 20.03.2016 Change '09' to '02'
                     AND p.payment_type = '01'
                     AND p.installment_type = '01'
                     --yearly
                     AND (   (    TO_NUMBER (   TO_CHAR (p_start_dt, 'RRRR')
                                             || TO_CHAR (m.claim_dt, 'MMDD')
                                            ) >=
                                     TO_NUMBER (TO_CHAR (p_start_dt,
                                                         'RRRRMMDD'
                                                        )
                                               )
                              AND TO_NUMBER (   TO_CHAR (p_end_dt, 'RRRR')
                                             || TO_CHAR (m.claim_dt, 'MMDD')
                                            ) <=
                                     TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                             )
                          OR (TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 12),
                                                   'RRRRMM'
                                                  )
                                       || TO_CHAR (m.claim_dt, 'DD'),
                                       'RRRRMMDD'
                                      ) BETWEEN p_start_dt AND p_end_dt
                             )
                         )
                    )
                 OR (    s.policy_status = '08'
                     AND s.maturity_date BETWEEN p_start_dt AND p_end_dt
                     AND p.pay_depends_on = '07'
                    )
                )
            AND NOT EXISTS (
                   SELECT 1
                     FROM clm_payable_calc_detl c
                    WHERE c.product_cd = p.product_cd
                      AND c.sl_no = p.sl_no
                      AND c.clm_cause_cd = p.clm_cause_cd
                      AND c.clm_detl_cd = p.clm_detl_cd
                      AND c.pgid = s.pgid
                      AND (   p.payment_type <> '01'
                           OR (    p.payment_type = '01'
                               AND TRUNC (c.payment_dt) BETWEEN p_start_dt
                                                            AND p_end_dt
                              )
                          )
                      AND c.supp_product_cd IS NULL
                      AND c.supp_ben_cd IS NULL);

/**********************************************************************************
                         ---End of cur_clm_policy_ben---
***********************************************************************************/

      /**********************************************************************************
       ---This cursor use to contain calculated claim data from details calculate table---
      ***********************************************************************************/
      CURSOR cur_clm_det
      IS
         SELECT   t.pgid, t.product_cd, MIN(t.clm_cause_cd) clm_cause_cd,
                  MIN (t.clm_detl_cd) clm_detl_cd, t.ben_party_cd,
                  t.intimation_no,
                  SUM (  NVL (t.policy_clm_amt, 0)
                       + NVL (t.suppprd_clm_amt, 0)
                       + NVL (t.suppben_clm_amt, 0)
                      ) gross_payable_amt
             FROM clm_payable_calc_detl t
            WHERE t.session_id = USERENV ('SESSIONID')
              AND NOT EXISTS (SELECT 1
                                FROM clm_claim_payable_gen g
                               WHERE g.payable_no = t.payable_no)
         GROUP BY t.pgid,
                  t.product_cd,
                  --t.clm_cause_cd, --Musha on 11.11.2015
                  --t.clm_detl_cd,
                  t.ben_party_cd,
                  t.intimation_no;
   BEGIN
      IF p_policy_no IS NOT NULL
      THEN
         SELECT pgid
           INTO v_pgid
           FROM ins_p_proposal
          WHERE policy_no = p_policy_no;
      END IF;

      FOR i IN cur_clm_policy_ben
      LOOP
         --Loop 01
         BEGIN
            SELECT s.sl_no
              INTO v_loan_sl_no
              FROM pol_loan_summary s
             WHERE s.pgid = i.pgid AND s.loan_status = '1';

            IF fun_loan_reco_locking (i.pgid, v_loan_sl_no,
                                      v_loan_rec_loc_err)
            THEN
               v_loan_reco_locking := 1;
            ELSE
               v_loan_reco_locking := 0;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               v_loan_reco_locking := 0;
            WHEN OTHERS
            THEN
               v_loan_reco_locking := 1;
         END;

         IF v_loan_reco_locking = 0
         THEN
            SELECT policy_no
              INTO v_policy_no
              FROM ins_p_proposal
             WHERE pgid = i.pgid;

            --------Find commutation pct for pension policy----------
            BEGIN
               SELECT MAX (c.commutation_pct)
                 INTO v_commut_pct
                 FROM clm_commutation_info c
                WHERE c.pgid = i.pgid AND NVL (c.approve_flag, 'N') = 'Y';
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            ---Get Payable Date---
            BEGIN
               IF     i.clm_cause_cd = '02'
                  AND (                                --Maturity Claim Single
                          i.policy_status = '08'
                       OR (    i.policy_status = '09'
                           AND i.maturity_date <= TRUNC (SYSDATE)
                          )
                       OR (    i.policy_status = '07'
                           AND i.maturity_date <=
                                               TRUNC (ADD_MONTHS (SYSDATE, 1))
                           AND pkg_clm_cal.fun_adv_clm_stat (i.pgid) = '0'
                          )
                       OR (    i.policy_status = '07'
                           AND pkg_clm_cal.fun_adv_clm_stat (i.pgid) = '2'
                          )
                       OR (    i.policy_status = '02'
                           AND i.maturity_date <=
                                           TRUNC (ADD_MONTHS (SYSDATE, 1))
                           AND pkg_clm_cal.fun_adv_clm_stat (i.pgid) = '0'
                          ) --Musha on 22.11.2016
                      )
                  AND i.payment_type = '03'
               THEN
                  v_payable_dt := i.maturity_date;
               ELSIF     i.policy_status IN ('01', '03', '07', '08', '09')
                     --= '09'              --Stage Payment
                     AND i.payment_year IS NOT NULL
               THEN
                  v_payable_dt :=
                              ADD_MONTHS (i.comm_date,
                                          (12 * i.payment_year));
               ELSIF     (   i.policy_status = '08'
                          OR (    i.policy_status = '07'
                              AND i.maturity_date <=
                                               TRUNC (ADD_MONTHS (SYSDATE, 1))
                              AND pkg_clm_cal.fun_adv_clm_stat (i.pgid) = '0'
                             )
                          OR (    i.policy_status = '07'
                              AND pkg_clm_cal.fun_adv_clm_stat (i.pgid) = '2'
                             )
                         )
                     AND                                            --Maturity
                         i.payment_type = '01'
                     AND                                             --pension
                         i.installment_type = '04'           --Monthly Pension
               THEN
                  IF TO_DATE
                        (   TO_CHAR (p_start_dt, 'RRRRMM')
                         || (CASE
                                WHEN TO_CHAR (LAST_DAY (p_start_dt), 'DD') >=
                                               TO_CHAR (i.maturity_date, 'DD')
                                   THEN TO_CHAR (i.maturity_date, 'DD')
                                ELSE TO_CHAR (LAST_DAY (p_start_dt), 'DD')
                             END
                            ),
                         'RRRRMMDD'
                        ) BETWEEN p_start_dt AND p_end_dt
                  THEN
                     v_payable_dt :=
                        TO_DATE
                           (   TO_CHAR (p_start_dt, 'RRRRMM')
                            || (CASE
                                   WHEN TO_CHAR (LAST_DAY (p_start_dt), 'DD') >=
                                               TO_CHAR (i.maturity_date, 'DD')
                                      THEN TO_CHAR (i.maturity_date, 'DD')
                                   ELSE TO_CHAR (LAST_DAY (p_start_dt), 'DD')
                                END
                               ),
                            'RRRRMMDD'
                           );
                  ELSIF TO_DATE
                          (   TO_CHAR (ADD_MONTHS (p_start_dt, 1), 'RRRRMM')
                           || (CASE
                                  WHEN TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           ) >=
                                               TO_CHAR (i.maturity_date, 'DD')
                                     THEN TO_CHAR (i.maturity_date, 'DD')
                                  ELSE TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           )
                               END
                              ),
                           'RRRRMMDD'
                          ) BETWEEN p_start_dt AND p_end_dt
                  THEN
                     v_payable_dt :=
                        TO_DATE
                           (   TO_CHAR (ADD_MONTHS (p_start_dt, 1), 'RRRRMM')
                            || (CASE
                                   WHEN TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           ) >=
                                               TO_CHAR (i.maturity_date, 'DD')
                                      THEN TO_CHAR (i.maturity_date, 'DD')
                                   ELSE TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           )
                                END
                               ),
                            'RRRRMMDD'
                           );
                  END IF;
               ELSIF     i.clm_cause_cd = '01'
                     AND                                  --Death Claim Single
                         i.policy_status = '02'
                     AND i.payment_type = '03'
               THEN
                  v_payable_dt := i.policy_status_dt;
               ELSIF     i.policy_status = '02'
                     AND                                               --death
                         i.payment_type = '01'
                     AND                                             --pension
                         i.installment_type = '04'           --Monthly Pension
               THEN
                  IF TO_DATE
                        (   TO_CHAR (p_start_dt, 'RRRRMM')
                         || (CASE
                                WHEN TO_CHAR (LAST_DAY (p_start_dt), 'DD') >=
                                            TO_CHAR (i.policy_status_dt, 'DD')
                                   THEN TO_CHAR (i.policy_status_dt, 'DD')
                                ELSE TO_CHAR (LAST_DAY (p_start_dt), 'DD')
                             END
                            ),
                         'RRRRMMDD'
                        ) BETWEEN p_start_dt AND p_end_dt
                  THEN
                     v_payable_dt :=
                        TO_DATE
                           (   TO_CHAR (p_start_dt, 'RRRRMM')
                            || (CASE
                                   WHEN TO_CHAR (LAST_DAY (p_start_dt), 'DD') >=
                                            TO_CHAR (i.policy_status_dt, 'DD')
                                      THEN TO_CHAR (i.policy_status_dt, 'DD')
                                   ELSE TO_CHAR (LAST_DAY (p_start_dt), 'DD')
                                END
                               ),
                            'RRRRMMDD'
                           );
                  ELSIF TO_DATE
                          (   TO_CHAR (ADD_MONTHS (p_start_dt, 1), 'RRRRMM')
                           || (CASE
                                  WHEN TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           ) >=
                                            TO_CHAR (i.policy_status_dt, 'DD')
                                     THEN TO_CHAR (i.policy_status_dt, 'DD')
                                  ELSE TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           )
                               END
                              ),
                           'RRRRMMDD'
                          ) BETWEEN p_start_dt AND p_end_dt
                  THEN
                     v_payable_dt :=
                        TO_DATE
                           (   TO_CHAR (ADD_MONTHS (p_start_dt, 1), 'RRRRMM')
                            || (CASE
                                   WHEN TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           ) >=
                                            TO_CHAR (i.policy_status_dt, 'DD')
                                      THEN TO_CHAR (i.policy_status_dt, 'DD')
                                   ELSE TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           )
                                END
                               ),
                            'RRRRMMDD'
                           );
                  END IF;
               ELSIF     i.policy_status = '02'
                     AND                                               --death
                         i.payment_type = '01'
                     AND                                             --pension
                         i.installment_type = '01'            --Yearly Pension
               THEN
                  IF TO_DATE (   TO_CHAR (p_start_dt, 'RRRR')
                              || TO_CHAR (i.policy_status_dt, 'MMDD'),
                              'RRRRMMDD'
                             ) BETWEEN p_start_dt AND p_end_dt
                  THEN
                     v_payable_dt :=
                        TO_DATE (   TO_CHAR (p_start_dt, 'RRRR')
                                 || TO_CHAR (i.policy_status_dt, 'MMDD'),
                                 'RRRRMMDD'
                                );
                  ELSIF TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 12),
                                             'RRRR'
                                            )
                                 || TO_CHAR (i.policy_status_dt, 'MMDD'),
                                 'RRRRMMDD'
                                ) BETWEEN p_start_dt AND p_end_dt
                  THEN
                     v_payable_dt :=
                        TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 12),
                                             'RRRR'
                                            )
                                 || TO_CHAR (i.policy_status_dt, 'MMDD'),
                                 'RRRRMMDD'
                                );
                  END IF;
               ----Add this by Musha on 03-09-2014 -----------------
               ELSIF     i.clm_cause_cd = '01'
                     AND i.policy_status = '09'
                     --death of payor policy running
                     AND i.payment_type = '01'
                     AND                                             --pension
                         i.installment_type = '04'           --Monthly Pension
               THEN
                  IF TO_DATE
                        (   TO_CHAR (p_start_dt, 'RRRRMM')
                         || (CASE
                                WHEN TO_CHAR (LAST_DAY (p_start_dt), 'DD') >=
                                                    TO_CHAR (i.claim_dt, 'DD')
                                   THEN TO_CHAR (i.claim_dt, 'DD')
                                ELSE TO_CHAR (LAST_DAY (p_start_dt), 'DD')
                             END
                            ),
                         'RRRRMMDD'
                        ) BETWEEN p_start_dt AND p_end_dt
                  THEN
                     v_payable_dt :=
                        TO_DATE
                           (   TO_CHAR (p_start_dt, 'RRRRMM')
                            || (CASE
                                   WHEN TO_CHAR (LAST_DAY (p_start_dt), 'DD') >=
                                                    TO_CHAR (i.claim_dt, 'DD')
                                      THEN TO_CHAR (i.claim_dt, 'DD')
                                   ELSE TO_CHAR (LAST_DAY (p_start_dt), 'DD')
                                END
                               ),
                            'RRRRMMDD'
                           );
                  ELSIF TO_DATE
                          (   TO_CHAR (ADD_MONTHS (p_start_dt, 1), 'RRRRMM')
                           || (CASE
                                  WHEN TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           ) >= TO_CHAR (i.claim_dt, 'DD')
                                     THEN TO_CHAR (i.claim_dt, 'DD')
                                  ELSE TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           )
                               END
                              ),
                           'RRRRMMDD'
                          ) BETWEEN p_start_dt AND p_end_dt
                  THEN
                     v_payable_dt :=
                        TO_DATE
                           (   TO_CHAR (ADD_MONTHS (p_start_dt, 1), 'RRRRMM')
                            || (CASE
                                   WHEN TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           ) >= TO_CHAR (i.claim_dt, 'DD')
                                      THEN TO_CHAR (i.claim_dt, 'DD')
                                   ELSE TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           )
                                END
                               ),
                            'RRRRMMDD'
                           );
                  END IF;
               ELSIF     i.policy_status = '02'
                     AND                                               --death
                         i.payment_type = '01'
                     AND                                             --pension
                         i.installment_type = '01'            --Yearly Pension
               THEN
                  IF TO_DATE (   TO_CHAR (p_start_dt, 'RRRR')
                              || TO_CHAR (i.claim_dt, 'MMDD'),
                              'RRRRMMDD'
                             ) BETWEEN p_start_dt AND p_end_dt
                  THEN
                     v_payable_dt :=
                        TO_DATE (   TO_CHAR (p_start_dt, 'RRRR')
                                 || TO_CHAR (i.claim_dt, 'MMDD'),
                                 'RRRRMMDD'
                                );
                  ELSIF TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 12),
                                             'RRRR'
                                            )
                                 || TO_CHAR (i.claim_dt, 'MMDD'),
                                 'RRRRMMDD'
                                ) BETWEEN p_start_dt AND p_end_dt
                  THEN
                     v_payable_dt :=
                        TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 12),
                                             'RRRR'
                                            )
                                 || TO_CHAR (i.claim_dt, 'MMDD'),
                                 'RRRRMMDD'
                                );
                  END IF;
               ELSIF     i.clm_cause_cd = '01'
                     AND                                  --Death Claim Single
                         i.policy_status = '08'
                     AND i.payment_type = '03'
               THEN
                  v_payable_dt := i.maturity_date;
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
            
            -----------Musha on 22.06.2016-----------
            IF TO_NUMBER(TO_CHAR(v_payable_dt, 'DD')) > TO_NUMBER(TO_CHAR(i.comm_date, 'DD')) THEN
                v_payable_dt := TO_DATE(TO_CHAR(v_payable_dt, 'RRRRMM')||TO_CHAR(i.comm_date, 'DD'), 'RRRRMMDD');
            END IF;
            ------------------------------------------

            ---End Of Get Payable Date---
            IF (   (p_cause_cd = '01' AND p_payment_type = '03')
                OR (p_cause_cd = '02' AND p_payment_type IN ('01', '03'))
               )
            THEN
               --Call procedure to generate ANF loan information--
               IF p_cause_cd = '01' AND p_payment_type = '03'
               THEN
                  --Death Claim and Single Payment
                  v_claim_type := 'D';
               END IF;

               pro_anf_loan_issue (p_pgid            => i.pgid,
                                   p_cal_dt          => v_payable_dt,
                                   p_claim_type      => v_claim_type,
                                   --D for Death Claim
                                   p_iuser           => p_user,
                                   p_error           => v_anf_error
                                  );
            --End of generate ANF loan information--
            END IF;

            --Call procedure to calculate claim amount--
            pkg_clm_cal.pro_clm_cal (p_policy_no            => v_policy_no,
                                     p_noof_payment_yr      => i.payment_year,
                                     p_product_cd           => i.product_cd,
                                     p_sl_no                => i.sl_no,
                                     p_clm_cause_cd         => i.clm_cause_cd,
                                     p_clm_detl_cd          => i.clm_detl_cd,
                                     p_ben_party_cd         => i.ben_party_cd,
                                     p_commutation_per      => v_commut_pct,
                                     --i.commutation_per,
                                     p_start_dt             => p_start_dt,
                                     p_end_dt               => p_end_dt,
                                     p_clm_value            => v_clm_value,
                                     p_error                => v_error
                                    );

            ---------------------------------------------------
            /*Add by Musha on 25-01-2015
              Purpose: Calculate all pending SB incase of
              maturity or death cliam process and also delete
              all un paid SB but processed
            */
            IF i.clm_cause_cd = '01' THEN
                SELECT   policy_status
                  INTO   v_death_claim_pol_st
                  FROM   clm_claim_mst
                 WHERE   pgid = i.pgid;
            END IF;
            
            IF    (i.clm_cause_cd = '02' AND i.clm_detl_cd = '01')
               OR (i.clm_cause_cd = '01' AND v_death_claim_pol_st = '09')
            THEN
               SELECT COUNT (*)
                 INTO v_sb_setup_cnt
                 FROM clm_product_claim_detl d
                WHERE d.product_cd = i.product_cd
                  AND i.term BETWEEN d.policy_term_fr AND d.policy_term_to
                  AND d.clm_cause_cd = '02'
                  AND d.clm_detl_cd = '02'
                  AND d.ben_party_cd = i.ben_party_cd   --'03'
                  ;

               IF v_sb_setup_cnt > 0
               THEN
                  /*DELETE FROM clm_payable_calc_detl
                  WHERE  pgid = i.pgid
                  AND    clm_cause_cd = '02'
                  AND    clm_detl_cd = '02'
                  AND    ben_party_cd = '03'
                  AND    payable_no IN (SELECT payable_no
                                        FROM   clm_claim_payable_gen
                                        WHERE  pgid = i.pgid
                                        AND    clm_cause_cd = '02'
                                        AND    clm_detl_cd = '02'
                                        AND    ben_party_cd = '03'
                                        AND    NVL(approved_flag, 'N') = 'N');

                  DELETE FROM clm_claim_payable_gen
                  WHERE  pgid = i.pgid
                  AND    clm_cause_cd = '02'
                  AND    clm_detl_cd = '02'
                  AND    ben_party_cd = '03'
                  AND    NVL(approved_flag, 'N') = 'N';*/--Musha on 14-05-2015
                  
                  IF i.clm_cause_cd = '01' THEN
                    SELECT c.occurance_dt
                      INTO v_occurance_dt
                      FROM clm_clm_intimation c
                     WHERE c.pgid = i.pgid 
                       AND c.intimation_no = i.intimation_no;
                  ELSE
                    v_occurance_dt := NULL;
                  END IF;
                  
                  FOR z IN
                     (SELECT d.sl_no, d.payment_year, m.clm_cause_cd,
                             m.clm_detl_cd, m.ben_party_cd,
                             ADD_MONTHS (s.comm_date, d.payment_year*12) sb_dt ---Musha on 07.12.2015
                        FROM clm_product_claim_detl d,
                             clm_product_claim_mst m,
                             ins_p_summery s
                       WHERE d.product_cd = i.product_cd
                         AND d.clm_cause_cd = '02'
                         AND d.clm_detl_cd = '02'
                         AND d.ben_party_cd = i.ben_party_cd    --'03'
                         AND d.setup_id = m.setup_id
                         AND s.pgid = i.pgid
                         AND s.policy_status =
                                        NVL (m.policy_status, s.policy_status)
                         AND i.term BETWEEN d.policy_term_fr AND d.policy_term_to
                         AND d.payment_year <= i.policy_age
                         AND ADD_MONTHS (s.comm_date, d.payment_year*12) <= NVL(v_occurance_dt, v_payable_dt) ---Musha on 07.12.2015
                         AND NOT EXISTS (
                                SELECT 1
                                  FROM clm_payable_calc_detl c
                                 WHERE c.product_cd = d.product_cd
                                   AND c.clm_cause_cd = d.clm_cause_cd
                                   AND c.clm_detl_cd = d.clm_detl_cd
                                   AND (   c.sl_no = d.sl_no
                                        OR (    d.clm_cause_cd = '02'
                                            AND d.clm_detl_cd = '02'
                                            AND c.payment_dt =
                                                   ADD_MONTHS
                                                             (s.comm_date,
                                                                d.payment_year
                                                              * 12
                                                             )
                                           )
                                       )
                                   AND c.pgid = i.pgid
                                   AND c.supp_product_cd IS NULL
                                   AND c.supp_ben_cd IS NULL))
                  LOOP
                     pkg_clm_cal.pro_clm_cal
                                        (p_policy_no            => v_policy_no,
                                         p_noof_payment_yr      => z.payment_year,
                                         p_product_cd           => i.product_cd,
                                         p_sl_no                => z.sl_no,
                                         p_clm_cause_cd         => '02',
                                         p_clm_detl_cd          => '02',
                                         p_ben_party_cd         => '03',
                                         p_commutation_per      => v_commut_pct,
                                         --i.commutation_per,
                                         p_start_dt             => p_start_dt,
                                         p_end_dt               => p_end_dt,
                                         p_clm_value            => v_pending_clm_value
                                                                                      ---v_clm_value
                     ,
                                         p_error                => v_error
                                        );

                    ---------------------------------------------------------
                    --Musha on 16-05-2015--
                    ---Store data in details table---
                     INSERT INTO clm_payable_calc_detl
                                 (pgid, product_cd, sl_no,
                                  clm_cause_cd, clm_detl_cd,
                                  ben_party_cd,
                                  policy_clm_amt,
                                  payment_dt, pay_type_cd,
                                  pay_mode_cd, intimation_no,
                                  session_id
                                 )
                          VALUES (i.pgid, i.product_cd, z.sl_no,
                                  z.clm_cause_cd, z.clm_detl_cd,
                                  z.ben_party_cd,
                                  v_pending_clm_value            --v_clm_value
                                                     ,
                                  z.sb_dt, i.payment_type,   ---Change v_payable_dt to z.sb_dt--Musha on 07.12.2015
                                  i.installment_type, i.intimation_no,
                                  USERENV ('SESSIONID')
                                 );
---------------------------------------------------------
--v_clm_value := v_clm_value + NVL (v_pending_clm_value, 0);
                  END LOOP;
               END IF;
            END IF;

---------------------------------------------------

            ---Store data in the table---
            IF p_error IS NULL
            THEN
               IF NVL (v_clm_value, 0) > 0
               THEN
                  ---Get Payable Date---

                  ---End Of Get Payable Date---

                  /*******Lien Consideration For Death Claim*******/
                  IF i.clm_cause_cd = '01'
                  THEN
                     BEGIN
                        SELECT (100 - l.lien_percentage) lien_payable_pct
                          INTO v_lien_payable_pct
                          FROM ins_uw_lien l, clm_application p
                         WHERE l.pgid = p.pgid
                           AND l.party_cd = p.death_part_cd
                           AND l.party_id = p.death_party_id
                           AND l.pgid = i.pgid
                           AND l.lien_tp_cd <> '03'
                           AND i.policy_age BETWEEN l.lien_year_fr
                                                AND l.lien_year_to;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           v_lien_payable_pct := 0;
                           NULL;
                     END;

                     IF NVL (v_lien_payable_pct, 0) > 0
                     THEN
                        v_clm_value :=
                                     v_clm_value
                                     * (v_lien_payable_pct / 100);
                     END IF;
                  END IF;

                  /****End of Lien Consideration For Death Claim****/

                  ---Store data in details table---
                  INSERT INTO clm_payable_calc_detl
                              (pgid, product_cd, sl_no, clm_cause_cd,
                               clm_detl_cd, ben_party_cd, policy_clm_amt,
                               payment_dt, pay_type_cd,
                               pay_mode_cd, intimation_no,
                               session_id
                              )
                       VALUES (i.pgid, i.product_cd, i.sl_no, i.clm_cause_cd,
                               i.clm_detl_cd, i.ben_party_cd, v_clm_value,
                               v_payable_dt, i.payment_type,
                               i.installment_type, i.intimation_no,
                               USERENV ('SESSIONID')
                              );
               --COMMIT;
               END IF;
            END IF;
         ---END IF of store data in the table---
         END IF;                          --End of loan recovery locking check
      END LOOP;                                                      --Loop 01

--###############################################################--
      FOR i IN cur_clm_det
      LOOP
         v_payable_no := fun_build_pk ('P', 'SEQ_CLM_PAYABLE_VR', 15, 'Y');

         ---Generate pk

         --Update details table to insert payable_no
         UPDATE clm_payable_calc_detl
            SET payable_no = v_payable_no
          WHERE pgid = i.pgid
            AND session_id = USERENV ('SESSIONID')
            AND payable_no IS NULL;

         --commit;

         /*Get suspense amount*/
         IF NVL (p_cause_cd, '00') IN ('01', '02', '06')
         THEN
            IF NVL (p_payment_type, '02') <> '02'
            THEN
               v_suspense_amt := 0;

               BEGIN
                  SELECT s.suspense_amt
                    INTO v_suspense_amt
                    FROM ins_p_summery s
                   WHERE s.pgid = i.pgid
                     AND NOT EXISTS (
                            SELECT 1
                              FROM clm_claim_payable_gen g
                             WHERE NVL (g.suspense_amt, 0) > 0
                               AND g.pgid = s.pgid);
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            END IF;
         END IF;
         
         /*This procedure calculate ANF premium and late fee for that loan*/
         IF p_cause_cd = '02' AND i.clm_detl_cd = '02'
         THEN                                                        ---SB
            NULL;
         ELSE
            IF p_cause_cd = '01' THEN
                BEGIN
                SELECT MAX(occurance_dt)
                  INTO v_dod
                  FROM clm_clm_intimation
                 WHERE pgid = i.pgid;
                EXCEPTION
                    WHEN OTHERS THEN
                        NULL;
                END;
                
                pro_anf_premium (p_pgid             => i.pgid,
                                 p_calc_date        => NVL(v_dod, v_payable_dt),
                                 p_payable_no       => v_payable_no,
                                 p_ded_amt          => NVL (i.gross_payable_amt, 0),    --v_ded_amt,  --Musha on 26.08.2015
                                 p_user             => p_user,
                                 p_premium_amt      => v_premium_amt,
                                 p_late_fee         => v_late_fee
                                );
            ELSE
                pro_anf_premium (p_pgid             => i.pgid,
                                 p_calc_date        => v_payable_dt,
                                 p_payable_no       => v_payable_no,
                                 p_ded_amt          => NVL (i.gross_payable_amt, 0),    --v_ded_amt,  --Musha on 26.08.2015
                                 p_user             => p_user,
                                 p_premium_amt      => v_premium_amt,
                                 p_late_fee         => v_late_fee
                                );
            END IF;
         END IF;

         --Get deductable amount--
         v_ded_amt :=
              (  NVL (i.gross_payable_amt, 0)
               + NVL (v_suspense_amt, 0)
               + NVL (v_bonus_amt, 0)
              )
            - (NVL (v_premium_amt, 0) + NVL (v_late_fee, 0));

         /*Get policy bonus information*/
         IF p_cause_cd = '01'
         THEN
            SELECT MAX (occurance_dt)
              INTO v_occurance_dt
              FROM clm_clm_intimation
             WHERE pgid = i.pgid;

            pro_policy_bonus (p_pgid            => i.pgid,
                              p_payable_no      => v_payable_no,
                              p_payable_dt      => v_occurance_dt,
                              p_user            => p_user,
                              p_bonus_amt       => v_bonus_amt
                             );
         ELSE
            pro_policy_bonus (p_pgid            => i.pgid,
                              p_payable_no      => v_payable_no,
                              p_payable_dt      => v_payable_dt,
                              p_user            => p_user,
                              p_bonus_amt       => v_bonus_amt
                             );
         END IF;
         
         ---------------------------------------------------------
         -------Add by Musha on 15.07.2018------
         ---Find extra bonus if applicable---
         pro_extra_bonus_calc (
                p_pgid              => i.pgid
               ,p_payable_no        => v_payable_no
               ,p_payable_dt        => v_payable_dt
               ,p_cur_pay_amt       => i.gross_payable_amt + NVL (v_bonus_amt, 0)
               ,p_prem_type         => 2   -- 1 for Life Premium, 2 for Installment Premium       
               ,p_user              => p_user
               ,p_extra_bonus_amt   => v_extra_bonus_amt
               ,p_error             => v_extra_bonus_error --Return error message
               );
               
          v_bonus_amt := NVL (v_bonus_amt, 0) + NVL (v_extra_bonus_amt, 0);
         ---------------------------------------------------------

         --Get deductable amount--
         v_ded_amt :=
            (  NVL (i.gross_payable_amt, 0)
             + NVL (v_suspense_amt, 0)
             + NVL (v_bonus_amt, 0)
            );

         
         /*Get policy loan information*/
         pro_policy_loan (p_pgid              => i.pgid,
                          p_payable_no        => v_payable_no,
                          p_payable_dt        => v_payable_dt,
                          p_ded_amt           => v_ded_amt,
                          p_user              => p_user,
                          p_loan_amt          => v_loan_amt,
                          p_interest_amt      => v_interest_amt
                         );

         --Get SB deduction only for paidup death claim as others deduction amount--
         --Add by Musha on 08-01-2014
         IF i.clm_cause_cd = '01'
         THEN
            BEGIN
               --Death claim
               SELECT m.policy_status
                 INTO v_intim_pol_st
                 FROM clm_claim_mst m
                WHERE m.pgid = i.pgid
                  AND m.clm_cause_cd = '01'
                  AND m.clm_cause_cd = i.clm_cause_cd
                  AND m.clm_detl_cd = i.clm_detl_cd
                  AND m.ben_party_cd = i.ben_party_cd
                  AND m.product_cd = i.product_cd;

               IF v_intim_pol_st = '01'
               THEN
                  SELECT NVL (SUM (c.gross_payable_amt), 0)
                    INTO v_paid_sb_amt
                    FROM clm_claim_payable_gen c
                   WHERE c.pgid = i.pgid
                     AND c.clm_cause_cd = '02'
                     AND c.clm_detl_cd = '02';
               ELSE
                  v_paid_sb_amt := 0;
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END IF;

----------------------------------------

         --Source Tax Deduction--
         IF I.product_cd = '07' THEN
             v_source_tax := 0;
         ELSE
             pro_calc_claim_source_tax (p_pgid              => i.pgid,
                                        p_cur_pay_amt       =>   i.gross_payable_amt
                                                               + NVL (v_bonus_amt,
                                                                      0
                                                                     ),
                                        p_prem_type         => 2
                                                                -- 1 for Life Premium, 2 for Installment Premium
             ,
                                        p_tax_calc_for      => i.clm_cause_cd,
                                        p_source_tax        => v_source_tax,
                                        p_error             => v_source_tax_err
                                       );
         END IF;
--====================================--
--Find premium due late fee
         BEGIN
            IF i.clm_cause_cd = '01'
            THEN
                ---Find other deduction amount for death claim
                SELECT MAX(m.other_ded_amt),
                       NVL (MAX (m.due_prem_amt), 0) + NVL (MAX (m.due_prem_late_fee), 0)  --Musha on 02.06.2016
                  INTO v_other_ded_amt,
                       v_prem_due_late_fee
                  FROM clm_claim_mst m
                 WHERE m.pgid = i.pgid; --Musha on 11.04.2016 
            ELSE                
                SELECT NVL (p.tot_req_amt, 0) - NVL (p.paid_prem_late_fee_after_disc, 0),
                       NVL (p.paid_prem_late_fee_after_disc, 0), NVL (p.unadj_coll_amt, 0), 
                       NVL (p.alt_due_amount, 0)
                  INTO v_prem_due_late_fee,
                       v_paid_prem_late_fee, v_unadj_coll_amt,
                       v_alt_due_amount
                  FROM clm_claim_appl p
                 WHERE p.pgid = i.pgid
                   AND p.clm_cause_cd = i.clm_cause_cd
                   AND p.clm_detl_cd = i.clm_detl_cd
                   AND p.appl_no =
                          (SELECT MAX (l.appl_no)
                             FROM clm_claim_appl l
                            WHERE l.pgid = p.pgid
                              AND l.clm_cause_cd = p.clm_cause_cd
                              AND l.clm_detl_cd = p.clm_detl_cd);
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_prem_due_late_fee := 0;
               v_unadj_coll_amt := 0;
               v_paid_prem_late_fee := 0;
               v_alt_due_amount := 0;
         END;

         /*Get payable date*/
         BEGIN
              SELECT MAX (d.payment_dt)
                INTO v_payable_dt
                FROM clm_payable_calc_detl d
               WHERE d.payable_no = v_payable_no
            GROUP BY d.payable_no;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;
         
         ---Add by musha on 22.01.2020 
         SELECT s.option_cd, s.maturity_date
                    INTO v_option_cd, v_maturity_date
                    FROM ins_p_summery s
                   WHERE s.pgid = i.pgid;
         
         IF v_option_cd = '2' THEN
             IF p_cause_cd = '02' AND i.clm_detl_cd = '02'
             THEN                                                        ---SB
                v_premium_amt := 0;
                v_late_fee    := 0;
             ELSE   
                pro_anf_loan_payable_info
                                         (p_pgid                   =>i.pgid,
                                          p_appl_date              => NVL(v_dod, v_payable_dt), --v_payable_dt, --v_maturity_date,
                                          p_no_of_anf_loan         => v_no_of_anf_loan,
                                          p_no_of_anf_loan_yr      => v_no_of_anf_loan_yr,
                                          p_anf_loan_amount        => v_anf_loan_amount,
                                          p_interest_amount        => v_anf_int_amount,
                                          p_error                  => v_anf_pay_error
                                         );
                                         
                v_premium_amt := v_anf_loan_amount;
                v_late_fee    := v_anf_int_amount;
             END IF;
         END IF;
         --========================--

         BEGIN
            v_net_payable_amt :=
                 (  NVL (i.gross_payable_amt, 0)
                  + NVL (v_suspense_amt, 0)
                  + NVL (v_bonus_amt, 0)
                  + NVL (v_unadj_coll_amt, 0)
                 )
               - (  NVL (v_loan_amt, 0)
                  + NVL (v_interest_amt, 0)
                  + NVL (v_premium_amt, 0)
                  + NVL (v_late_fee, 0)
                  + NVL (v_paid_sb_amt, 0)
                  + NVL (v_source_tax, 0)
                --  + NVL (v_prem_due_late_fee, 0)
                  + NVL (v_paid_prem_late_fee, 0)
                  + NVL (v_other_ded_amt, 0)
                  + NVL(v_alt_due_amount, 0) ---Musha on 21.06.2016
                 );
            
            ---Get client account information---
            v_account_no := NULL;
            v_bank_cd := NULL;
            v_br_cd := NULL;
            v_br_address := NULL;

            BEGIN
               SELECT c.account_no, c.bank_cd, c.br_cd, c.address
                 INTO v_account_no, v_bank_cd, v_br_cd, v_br_address
                 FROM clm_client_account c
                WHERE c.pgid = i.pgid AND c.party_cd = i.ben_party_cd;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            INSERT INTO clm_claim_payable_gen
                        (payable_no, pgid, product_cd, clm_cause_cd,
                         clm_detl_cd, ben_party_cd, gen_date,
                         gross_payable_amt, bonus_payable, loan_ded_amt,
                         loan_interest, suspense_amt, anf_premium_amt,
                         anf_late_fee, other_ded_amt,
                         source_tax, net_payable_amt,
                         payment_dt, intimation_no, bank_acc_no,
                         bank_cd, branch_cd, bank_address,
                         prem_due_late_fee, paid_prem_late_fee,
                         unadj_coll_amt, alt_due_amount, i_usr, i_dt
                        )
                 VALUES (v_payable_no, i.pgid, i.product_cd, i.clm_cause_cd,
                         i.clm_detl_cd, i.ben_party_cd, TRUNC (SYSDATE),
                         i.gross_payable_amt, v_bonus_amt, v_loan_amt,
                         v_interest_amt, v_suspense_amt, v_premium_amt,
                         v_late_fee, NVL (v_paid_sb_amt, 0) + NVL (v_other_ded_amt, 0),
                         NVL (v_source_tax, 0), v_net_payable_amt,
                         v_payable_dt, i.intimation_no, v_account_no,
                         v_bank_cd, v_br_cd, v_br_address,
                         NVL (v_prem_due_late_fee, 0), NVL (v_paid_prem_late_fee, 0),
                         NVL (v_unadj_coll_amt, 0), NVL(v_alt_due_amount, 0), p_user, SYSDATE
                        );

            --Update details table to insert payable_no
            /*UPDATE clm_payable_calc_detl
              SET payable_no     = v_payable_no
            WHERE pgid             = i.pgid
              AND session_id     = USERENV ('SESSIONID')
              AND payable_no IS NULL;*/
            v_cnt := v_cnt + 1;
         EXCEPTION
            WHEN OTHERS
            THEN
               p_error := 'Insert payable generation error - ' || SQLERRM;
         END;
      END LOOP;

      COMMIT;
      p_process_cnt := v_cnt;
   EXCEPTION
      WHEN OTHERS
      THEN
         --null;
         p_error :=
                  'Error at policy no. ' || v_policy_no || ' for ' || SQLERRM;
   END pro_clm_policy_list;

/*============================================================================================================*/
/*============================================================================================================*/
--End of pro_clm_policy_list--
/*============================================================================================================*/
/*============================================================================================================*/
   PROCEDURE pro_clm_cal (
      p_policy_no         IN       ins_p_proposal.policy_no%TYPE,
      -- contain policy no
      p_noof_payment_yr   IN       clm_product_claim_detl.payment_year%TYPE,
      -- Contain no of payment year (in case of stage maturity)
      p_product_cd        IN       clm_product_claim_detl.product_cd%TYPE,
      -- contain product code
      p_sl_no             IN       clm_product_claim_detl.sl_no%TYPE,
      -- contain serial no
      p_clm_cause_cd      IN       clm_product_claim_detl.clm_cause_cd%TYPE,
      -- contain claim cause code
      p_clm_detl_cd       IN       clm_product_claim_detl.clm_detl_cd%TYPE,
      -- contain claim cause detail code
      p_ben_party_cd      IN       clm_product_claim_detl.ben_party_cd%TYPE,
      -- contain benefited party code
      p_commutation_per   IN       clm_product_claim_detl.commutation_per%TYPE
            DEFAULT 0,
      -- Contain comutation percentage (in case of pension policy)
      p_start_dt          IN       DATE,
      p_end_dt            IN       DATE,
      p_clm_value         OUT      NUMBER,    -- will contain claimable amount
      p_error             OUT      VARCHAR2   -- return error message if raise
   )
   IS
      /******************************************************************************
        Created By  : Syed Md. Musha
        PURPOSE     : Calculate Claim Payable Amount For The Policy

        REVISIONS:
        Ver        Date        Author           Description
        ---------  ----------  ---------------  ------------------------------------
        1.0                     Syed Md. Musha   Created this procedure

      ******************************************************************************/
      v_clm_value            NUMBER (15, 2);
      v_clm_gen_value        NUMBER (20, 5);
      v_clm_add_value        NUMBER (20, 5);
      v_clm_alt_value        NUMBER (20, 5);
      v_policy_age           NUMBER (15, 2);
      v_party_age            NUMBER (15, 2);
      v_renewal_amt          NUMBER (15, 2);
      v_tot_paid_amt         NUMBER (15, 2);
      --v_suppprd_clm_value  NUMBER(15, 2);
      --v_suppben_clm_value  NUMBER(15, 2);
      v_trn_dt               DATE;
      v_start_dt             DATE;
      v_sum_assured          ins_p_summery.sum_assured%TYPE;
      v_term                 ins_p_summery.term%TYPE;
      v_tot_yearly_premium   ins_p_summery.total_yearly_premium%TYPE;
      v_pgid                 ins_p_proposal.pgid%TYPE;
      v_maturity_date        ins_p_summery.maturity_date%TYPE;
      v_policy_status_date   ins_p_summery.policy_status_dt%TYPE;
      v_policy_status        ins_p_summery.policy_status%TYPE;
      --v_bonus_amt          ins_policy_bonus.bonus_amt%TYPE;
      --v_error              VARCHAR2(2000);
      --k                      NUMBER                                    := 0;
      v_policy_tp_cd         ins_policy_type.policy_tp_cd%TYPE;

      --This cursor contains details information from product wise claim setup--
      CURSOR cur_prd_ben_info (p_policy_term ins_p_summery.term%TYPE)
      IS
         SELECT d.sl_no, d.product_cd, d.clm_cause_cd, d.clm_detl_cd,
                d.ben_party_cd, d.policy_term_fr, d.policy_term_to,
                d.payment_type, d.installment_type, d.pay_depends_on,
                d.payment_year, d.pay_type, d.percentage, d.pay_basis_cd,
                d.commutation_value, d.commutation_per, d.granted_yr_req,
                d.granted_yr, d.additional_ben, d.int_percentage,
                d.addi_ben_cal_on, d.other_claim, d.alternative_applied
           FROM clm_product_claim_detl d
          WHERE d.product_cd = p_product_cd
            AND d.clm_cause_cd = p_clm_cause_cd
            AND d.clm_detl_cd = p_clm_detl_cd
            AND d.ben_party_cd = p_ben_party_cd
            AND d.sl_no = p_sl_no
            AND NVL (d.policy_term_fr, 0) <=
                                NVL (p_policy_term, NVL (d.policy_term_fr, 0))
            AND NVL (d.policy_term_to, 0) >=
                                NVL (p_policy_term, NVL (d.policy_term_to, 0))
            AND NVL (d.payment_year, 0) =
                              NVL (p_noof_payment_yr, NVL (d.payment_year, 0))
                                                                              /*AND NVL (d.commutation_per, 0) =
                                                                              NVL (p_commutation_per, NVL (d.commutation_per, 0))*/
      ;                           ---Comments this line by msuha on 31-08-2014

      --AND d.payment_type                        IN ('03','02');

      /*********************************************************************************/
---This cursor contains alternative benefit information
      CURSOR cur_alt_ben_info (
         p_child_age    NUMBER,
         p_policy_age   NUMBER,
         p_sl_no        clm_product_claim_detl.sl_no%TYPE
      )
      IS
         SELECT t.age_of, t.party_cd, t.pay_basis_cd, t.percentage,
                t.pay_percentage, t.additional_ben, t.add_ben_percentage,
                t.ben_cal_on
           FROM clm_product_claim_detl_alt t
          WHERE t.product_cd = p_product_cd
            AND t.clm_cause_cd = p_clm_cause_cd
            AND t.clm_detl_cd = p_clm_detl_cd
            AND t.ben_party_cd = p_ben_party_cd
            AND t.sl_no = p_sl_no
            AND (   (    t.age_of = 1
                     AND (    t.age_from <= NVL (p_child_age, t.age_from)
                          AND t.age_to >= NVL (p_child_age, t.age_to)
                         )
                    )
                 OR (    t.age_of = 2
                     AND (    t.age_from <= NVL (p_policy_age, t.age_from)
                          AND t.age_to >= NVL (p_policy_age, t.age_to)
                         )
                    )
                );
   BEGIN
      ----Get policy information----
      BEGIN
         SELECT s.pgid,
                ((s.last_paid_inst_no) / (s.policy_installment / s.term)
                ) policy_age,
                s.sum_assured, s.term, s.total_yearly_premium,
                s.maturity_date, s.policy_status_dt, s.policy_status,
                p.policy_tp_cd
           INTO v_pgid,
                v_policy_age,
                v_sum_assured, v_term, v_tot_yearly_premium,
                v_maturity_date, v_policy_status_date, v_policy_status,
                v_policy_tp_cd
           FROM ins_p_summery s, ins_product p
          WHERE s.pgid = fun_ins_policy_no_to_pgid (p_policy_no)
            AND s.product_cd = p.product_cd;
      EXCEPTION
         WHEN OTHERS
         THEN
            p_error := SQLERRM;
            NULL;
      END;

      ----End of Get policy information----

      /*********************************************************************************/
---Get total renewal amount
      BEGIN
         SELECT ROUND ((  last_paid_inst_no * installment_premium
                        - installment_premium * (policy_installment / term)
                       ),
                       2
                      ) tot_renewal_amt,
                ROUND ((last_paid_inst_no * installment_premium), 2)
                                                                 tot_paid_amt
           INTO v_renewal_amt,
                v_tot_paid_amt
           FROM ins_p_summery
          WHERE pgid = v_pgid;
      EXCEPTION
         WHEN OTHERS
         THEN
            p_error := SQLERRM;
            NULL;
      END;

      ---End of get total renewal amount

      /*********************************************************************************/
---Get party age---
      BEGIN
         SELECT ROUND ((SYSDATE - p.dob) / 365)
           INTO v_party_age
           FROM ins_p_personal p
          WHERE p.pgid = v_pgid AND p.party_cd = '03';
      EXCEPTION
         WHEN OTHERS
         THEN
            p_error := SQLERRM;
            NULL;
      END;

      ---End of get assured (child) age---

      /*######################################################################################################*/
---Get product wise benefite and calculate claimable amount for the policy
      FOR i IN cur_prd_ben_info (v_term)
      LOOP
         ---For loop 01
         ---Single or stage or pension payment check---
         IF NVL (i.payment_type, '00') IN ('02', '03')
         THEN
            ---Single/Stage payment
            IF NVL (i.pay_type, 0) = 1
            THEN
               ---Pay type = percentage
               --Check for basis of payment--
               IF i.pay_basis_cd = '01'
               THEN
                  ---Assured amount
                  IF v_policy_tp_cd = '02'
                  THEN
                     --Add this condition by Musha on 28-08-2014 becuase of defference of sum assured of pension policy
                     v_clm_gen_value :=
                          NVL (v_clm_gen_value, 0)
                        +   (  NVL (v_sum_assured, 0)   ---NVL (v_sum_assured * 12 * 10, 0)
                             * NVL (i.percentage, 0)
                            )
                          / 100;
                  ELSE
                     v_clm_gen_value :=
                          NVL (v_clm_gen_value, 0)
                        +   (NVL (v_sum_assured, 0) * NVL (i.percentage, 0))
                          / 100;
                  END IF;
               ELSIF i.pay_basis_cd = '03'  ---Add this by Musha on 28-08-2014
               THEN
                  ---Paidup amount
                  v_clm_gen_value :=
                       NVL (v_clm_gen_value, 0)
                     +   (  NVL (fun_paidup_value (v_pgid), 0)
                          * NVL (i.percentage, 0)
                         )
                       / 100;
               ELSIF i.pay_basis_cd = '04'
               THEN
                  ---Total renewal amount
                  v_clm_gen_value :=
                       NVL (v_clm_gen_value, 0)
                     + (NVL (v_renewal_amt, 0) * NVL (i.percentage, 0)) / 100;
               ELSIF i.pay_basis_cd = '12'
               THEN
                  ---Total paid amount
                  v_clm_gen_value :=
                       NVL (v_clm_gen_value, 0)
                     + (NVL (v_tot_paid_amt, 0) * NVL (i.percentage, 0)) / 100;
               END IF;
            --End of check for basis of payment
            END IF;                         ---End if of pay type = percentage

/*********************************************************************************/
---Additional benefit calculation---
            IF NVL (i.additional_ben, '03') <> '03'
            THEN
               ---Additional benefit applicable
               ---Check for bonus or interest---
               IF NVL (i.additional_ben, '03') = '01'
               THEN
                  ---Bonus
                  NULL;
               ---Calculate Bonus---
               /*BEGIN
                  SELECT SUM (b.bonus_amt)
                    INTO v_bonus_amt
                    FROM ins_policy_bonus b
                   WHERE b.pgid = v_pgid AND b.product_cd = p_product_cd;

                  v_clm_add_value :=
                             NVL (v_clm_add_value, 0)
                             + NVL (v_bonus_amt, 0);
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     NULL;
                  WHEN OTHERS
                  THEN
                     p_error := SQLERRM;
               END;*/
               ---End of calculate Bonus---
               ELSIF NVL (i.additional_ben, '03') = '02'
               THEN
                  ---Interest
                  IF i.addi_ben_cal_on = '01'
                  THEN
                     --Assured Amount
                     v_clm_add_value :=
                          NVL (v_clm_add_value, 0)
                        +   (NVL (v_sum_assured, 0)
                             * NVL (i.int_percentage, 0)
                            )
                          / 100;
                  ELSIF i.addi_ben_cal_on = '04'
                  THEN
                     --Total renewal Amount
                     v_clm_add_value :=
                          NVL (v_clm_add_value, 0)
                        +   (NVL (v_renewal_amt, 0)
                             * NVL (i.int_percentage, 0)
                            )
                          / 100;
                  END IF;
               END IF;
            END IF;
         ---End of additional benefit calculation---
         ELSE
            ---Pension payment
            --Check for pension against maturity or claim
            IF NVL (v_policy_status, '00') = '08'
            THEN
               --Maturity pension
               v_trn_dt := v_maturity_date;
            ELSIF NVL (v_policy_status, '00') = '02'
            THEN
               --Claim pension
               v_trn_dt := v_policy_status_date;
            ELSIF NVL (v_policy_status, '00') = '09'
            --Add this clause by Musha on 06-09-2014
            THEN
               --Claim pension for child protection
               BEGIN
                  ---Find death cliam date
                  SELECT claim_dt
                    INTO v_trn_dt
                    FROM clm_claim_mst
                   WHERE pgid = v_pgid AND ben_party_cd = p_ben_party_cd;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            END IF;

            v_start_dt := p_start_dt;

            LOOP
               ---Loop to calculate all pension in the date range
               ---Check for pension type monthly or yearly---
               IF NVL (i.installment_type, '00') = '04'
               THEN
                  --Monthly pension
                  ---Check monthly pension applicable for the date range---
                  IF    (    TO_NUMBER
                                (   TO_CHAR (v_start_dt, 'RRRRMM')
                                 || (CASE
                                        WHEN TO_CHAR (LAST_DAY (v_start_dt),
                                                      'DD'
                                                     ) >=
                                                      TO_CHAR (v_trn_dt, 'DD')
                                           THEN TO_CHAR (v_trn_dt, 'DD')
                                        ELSE TO_CHAR (LAST_DAY (v_start_dt),
                                                      'DD'
                                                     )
                                     END
                                    )
                                ) >=
                                  TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                         AND TO_NUMBER
                                (   TO_CHAR (v_start_dt, 'RRRRMM')
                                 || (CASE
                                        WHEN TO_CHAR (LAST_DAY (v_start_dt),
                                                      'DD'
                                                     ) >=
                                                      TO_CHAR (v_trn_dt, 'DD')
                                           THEN TO_CHAR (v_trn_dt, 'DD')
                                        ELSE TO_CHAR (LAST_DAY (v_start_dt),
                                                      'DD'
                                                     )
                                     END
                                    )
                                ) <=
                                    TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                        )
                     OR (TO_DATE
                            (   TO_CHAR (ADD_MONTHS (v_start_dt, 1), 'RRRRMM')
                             || (CASE
                                    WHEN TO_CHAR (LAST_DAY (v_start_dt), 'DD') >=
                                                      TO_CHAR (v_trn_dt, 'DD')
                                       THEN TO_CHAR (v_trn_dt, 'DD')
                                    ELSE TO_CHAR (LAST_DAY (v_start_dt), 'DD')
                                 END
                                ),
                             'RRRRMMDD'
                            ) BETWEEN p_start_dt AND p_end_dt
                        )
                  THEN
                     ---Check for commutation value---
                     IF NVL (p_commutation_per, 0) = 0
                     THEN
                        ---No commutation percentage means based on sumassured value
                        IF NVL (i.pay_type, 0) = 1
                        THEN
                           ---Pay type = percentage
                           --Check for basis of payment
                           IF i.pay_basis_cd = '01'
                           THEN
                              ---Assured amount
                              IF v_policy_tp_cd = '02'
                              THEN
                                 v_clm_gen_value :=
                                      NVL (v_clm_gen_value, 0)
                                    +   (  NVL (v_sum_assured, 0)   ---NVL (v_sum_assured * 12 * 10, 0)
                                         ---Modify this by adding *12*10   By Musha on 30-08-2014
                                         * NVL (i.percentage, 0)
                                        )
                                      / 100;
                              ELSE
                                 v_clm_gen_value :=
                                      NVL (v_clm_gen_value, 0)
                                    +   (  NVL (v_sum_assured, 0)
                                         * NVL (i.percentage, 0)
                                        )
                                      / 100;
                              END IF;
                           ELSIF i.pay_basis_cd = '04'
                           THEN
                              ---Total renewal amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (v_renewal_amt, 0)
                                      * NVL (i.percentage, 0)
                                     )
                                   / 100;
                           ELSIF i.pay_basis_cd = '20'
                           --Add this By Musha on 30-08-2014
                           THEN
                              ---Pension amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (v_sum_assured/12, 0)   ---NVL (v_sum_assured, 0)
                                      * NVL (i.percentage, 0)
                                     )
                                   / 100;
                           END IF;
                        --End of check for basis of payment
                        END IF;
                     ---End if of pay type = percentage
                     ELSIF NVL (p_commutation_per, 0) = 50
                     THEN
                        ---Commutation percentage = 50
                        v_clm_gen_value :=
                             NVL (v_clm_gen_value, 0)
                           + ROUND (  (  (  NVL (v_sum_assured/12, 0)   ---NVL (v_sum_assured, 0)
                                          * NVL (i.percentage, 0)
                                         )
                                       / 100
                                      )
                                    / 2
                                   );
                     ELSIF NVL (p_commutation_per, 0) = 100
                     THEN
                        ---Commutation percentage = 100
                        NULL;
                     END IF;

                     ---End of check for commutation value---

                     /*********************************************************************************/
---Additional benefit calculation---
                     IF NVL (i.additional_ben, '03') <> '03'
                     THEN
                        ---Additional benefit applicable
                        IF i.addi_ben_cal_on = '01'
                        THEN
                           --Assured Amount
                           v_clm_add_value :=
                                NVL (v_clm_add_value, 0)
                              +   (  NVL (v_sum_assured, 0)
                                   * NVL (i.int_percentage, 0)
                                  )
                                / 100;
                        ELSIF i.addi_ben_cal_on = '04'
                        THEN
                           --Total renewal Amount
                           v_clm_add_value :=
                                NVL (v_clm_add_value, 0)
                              +   (  NVL (v_renewal_amt, 0)
                                   * NVL (i.int_percentage, 0)
                                  )
                                / 100;
                        END IF;
                     END IF;
                  ---End of additional benefit calculation---
                  END IF;

                  ---End if of check monthly pension applicable for the date range---
                  v_start_dt := ADD_MONTHS (v_start_dt, 1);
               ELSIF NVL (i.installment_type, '00') = '01'
               THEN
                  --Yearly pension
                  ---Check yearly pension applicable for the date range---
                  IF     TO_NUMBER (   TO_CHAR (v_start_dt, 'RRRR')
                                    || TO_CHAR (v_trn_dt, 'MMDD')
                                   ) >=
                                  TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                     AND TO_NUMBER (   TO_CHAR (v_start_dt, 'RRRR')
                                    || TO_CHAR (v_trn_dt, 'MMDD')
                                   ) <=
                                    TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                  THEN
                     ---Check for commutation value---
                     IF NVL (p_commutation_per, 0) = 0
                     THEN
                        ---No commutation percentage means based on sumassured value
                        IF NVL (i.pay_type, 0) = 1
                        THEN
                           ---Pay type = percentage
                           --Check for basis of payment
                           IF i.pay_basis_cd = '01'
                           THEN
                              ---Assured amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (v_sum_assured, 0)
                                      * NVL (i.percentage, 0)
                                     )
                                   / 100;
                           ELSIF i.pay_basis_cd = '04'
                           THEN
                              ---Total renewal amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (v_renewal_amt, 0)
                                      * NVL (i.percentage, 0)
                                     )
                                   / 100;
                           END IF;
                        --End of check for basis of payment
                        END IF;
                     ---End if of pay type = percentage
                     ELSIF NVL (p_commutation_per, 0) = 50
                     THEN
                        ---Commutation percentage = 50
                        NULL;
                     ELSIF NVL (p_commutation_per, 0) = 100
                     THEN
                        ---Commutation percentage = 100
                        NULL;
                     END IF;

                     ---End of check for commutation value---

                     /*********************************************************************************/
---Additional benefit calculation---
                     IF NVL (i.additional_ben, '03') <> '03'
                     THEN
                        ---Additional benefit applicable
                        IF i.addi_ben_cal_on = '01'
                        THEN
                           --Assured Amount
                           v_clm_add_value :=
                                NVL (v_clm_add_value, 0)
                              +   (  NVL (v_sum_assured, 0)
                                   * NVL (i.int_percentage, 0)
                                  )
                                / 100;
                        ELSIF i.addi_ben_cal_on = '04'
                        THEN
                           --Total renewal Amount
                           v_clm_add_value :=
                                NVL (v_clm_add_value, 0)
                              +   (  NVL (v_renewal_amt, 0)
                                   * NVL (i.int_percentage, 0)
                                  )
                                / 100;
                        END IF;
                     END IF;
                  ---End of additional benefit calculation---
                  END IF;

                  ---END IF of check yearly pension applicable for the date range---
                  v_start_dt := ADD_MONTHS (v_start_dt, 12);
               END IF;

               EXIT WHEN v_start_dt > p_end_dt;
            END LOOP;   ---END LOOP to calculate all pension in the date range
         END IF;

         ---End of single or stage or pension payment check---

         /*********************************************************************************/
---Check for other claim applicable
         IF i.other_claim = 1
         THEN
            ---Alternative claim applicable
            FOR j IN cur_alt_ben_info (v_party_age, v_policy_age, i.sl_no)
            LOOP
               ---For loop 02
               IF NVL (j.pay_basis_cd, '00') = '01'
               THEN
                  ---Assured amount
                  v_clm_alt_value :=
                       NVL (v_clm_alt_value, 0)
                     +   (NVL (v_sum_assured, 0) * NVL (j.pay_percentage, 0))
                       / 100;
               ELSIF NVL (j.pay_basis_cd, '00') = '11'
               THEN
                  ---Premium / Yr
                  v_clm_alt_value :=
                       NVL (v_clm_alt_value, 0)
                     +   (  NVL (v_tot_yearly_premium, 0)
                          * NVL (j.pay_percentage, 0)
                         )
                       / 100;
               END IF;

               ---Check for additional benefit for alternative claim
               IF j.additional_ben <> '03' AND j.ben_cal_on = '01'
               THEN
                  ---Assured amount
                  v_clm_alt_value :=
                       NVL (v_clm_alt_value, 0)
                     +   (  NVL (v_sum_assured, 0)
                          * NVL (j.add_ben_percentage, 0)
                         )
                       / 100;
               END IF;
            ---End of check for additional benefit for alternative claim
            END LOOP;                                           ---End loop 02
         ELSE
            ---Additional claim applicable
            NULL;
         END IF;

         ---End if of check for other claim applicable

         /*********************************************************************************/
         v_clm_value :=
                 ROUND (NVL (v_clm_gen_value, 0) + NVL (v_clm_add_value, 0),
                        2);     ---Sum of general claim and additional benefit

         IF NVL (i.other_claim, 0) IN ('1', '2')
         THEN
            ---Other claim exist
            ---Check for alternative benefit applied type
            IF NVL (i.alternative_applied, '00') = '1'
            THEN
               ----Maximum benefit
               IF NVL (v_clm_value, 0) >= NVL (v_clm_alt_value, 0)
               THEN
                  p_clm_value :=
                        ROUND (NVL (p_clm_value, 0) + NVL (v_clm_value, 0),
                               2);
               ELSE
                  p_clm_value :=
                     ROUND (NVL (p_clm_value, 0) + NVL (v_clm_alt_value, 0),
                            2);
               END IF;
            ELSIF NVL (i.alternative_applied, '00') = '2'
            THEN
               ----Minimum benefit
               IF NVL (v_clm_value, 0) <= NVL (v_clm_alt_value, 0)
               THEN
                  p_clm_value :=
                        ROUND (NVL (p_clm_value, 0) + NVL (v_clm_value, 0),
                               2);
               ELSE
                  p_clm_value :=
                     ROUND (NVL (p_clm_value, 0) + NVL (v_clm_alt_value, 0),
                            2);
               END IF;
            ELSIF NVL (i.alternative_applied, '00') = '3'
            THEN
               ----Average benefit
               p_clm_value :=
                  ROUND ((NVL (v_clm_value, 0) + NVL (v_clm_alt_value, 0)) / 2,
                         2
                        );
            ELSE
               p_clm_value :=
                    ROUND (NVL (v_clm_value, 0) + NVL (v_clm_alt_value, 0),
                           2);
            END IF;
         ---End of check for alternative benefit applied type
         ELSE
            ---Other claim not exist
            p_clm_value := v_clm_value;
         END IF;                                --End if of other claim exists
      /*
                                                                                                                                                                                                                                                                                                                                  IF NVL(p_clm_cause_cd,'00') = '01' THEN   --Death Claim
                                                                                                                                                                                                                                                                                                                                      ---Supplimentary Product's benefit calculation---

                                                                                                                                                                                                                                                                                                                                      pkg_clm_cal.pro_supp_prod_clm_cal (
                                                                                                                                                                                                                                                                                                                                                                         p_policy_no             => p_policy_no,
                                                                                                                                                                                                                                                                                                                                                                         p_clm_cause_cd          => p_clm_cause_cd,
                                                                                                                                                                                                                                                                                                                                                                         p_clm_detl_cd           => p_clm_detl_cd,
                                                                                                                                                                                                                                                                                                                                                                         p_ben_party_cd          => p_ben_party_cd,
                                                                                                                                                                                                                                                                                                                                                                         p_noof_payment_yr       => p_noof_payment_yr,
                                                                                                                                                                                                                                                                                                                                                                         p_start_dt              => p_start_dt,
                                                                                                                                                                                                                                                                                                                                                                         p_end_dt                => p_end_dt,
                                                                                                                                                                                                                                                                                                                                                                         p_suppprd_clm_value     => v_suppprd_clm_value,
                                                                                                                                                                                                                                                                                                                                                                         p_error                 => v_error
                                                                                                                                                                                                                                                                                                                                                                        );

                                                                                                                                                                                                                                                                                                                                      p_clm_value := NVL(p_clm_value,0) + NVL(v_suppprd_clm_value,0);

                                                                                                                                                                                                                                                                                                                                      ---End of supplimentary Product's benefit calculation---


                                                                                                                                                                                                                                                                                                                                      ---Supplimentary benefit calculation---
                                                                                                                                                                                                                                                                                                                                      pkg_clm_cal.pro_supp_ben_clm_cal (
                                                                                                                                                                                                                                                                                                                                                                        p_policy_no          => p_policy_no,
                                                                                                                                                                                                                                                                                                                                                                        p_clm_cause_cd       => p_clm_cause_cd,
                                                                                                                                                                                                                                                                                                                                                                        p_clm_detl_cd        => p_clm_detl_cd,
                                                                                                                                                                                                                                                                                                                                                                        p_ben_party_cd       => p_ben_party_cd,
                                                                                                                                                                                                                                                                                                                                                                        p_noof_payment_yr    => p_noof_payment_yr,
                                                                                                                                                                                                                                                                                                                                                                        p_start_dt           => p_start_dt,
                                                                                                                                                                                                                                                                                                                                                                        p_end_dt             => p_end_dt,
                                                                                                                                                                                                                                                                                                                                                                        p_suppben_clm_value  => v_suppben_clm_value,
                                                                                                                                                                                                                                                                                                                                                                        p_error              => v_error
                                                                                                                                                                                                                                                                                                                                                                       );

                                                                                                                                                                                                                                                                                                                                      p_clm_value := NVL(p_clm_value,0) + NVL(v_suppben_clm_value,0);

                                                                                                                                                                                                                                                                                                                                      ---End of supplimentary benefit calculation---

                                                                                                                                                                                                                                                                                                                                  END IF;*/
      END LOOP;                                                 ---End loop 01
---End of get product wise benefite and calculate claimable amount for the policy
/*######################################################################################################*/
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END pro_clm_cal;

/*============================================================================================================*/
/*============================================================================================================*/
--End of pro_clm_cal--
/*============================================================================================================*/
/*============================================================================================================*/
   PROCEDURE pro_supp_prod_clm_cal (
      p_policy_no   IN       ins_p_proposal.policy_no%TYPE,
      -- contain policy no
      --p_clm_cause_cd        IN               clm_supp_prod_claim_detl.clm_cause_cd%TYPE,         -- contain claim cause code
      --p_clm_detl_cd         IN               clm_supp_prod_claim_detl.clm_detl_cd%TYPE,          -- contain claim cause detail code
      --p_ben_party_cd        IN               clm_supp_prod_claim_detl.ben_party_code%TYPE,       -- contain benefited party code
      --p_noof_payment_yr     IN               clm_supp_prod_claim_detl.payment_year%TYPE,         -- Contain no of payment year (in case of stage benefit)
      p_start_dt    IN       DATE,
      p_end_dt      IN       DATE,
      --p_suppprd_clm_value   OUT              NUMBER,                                               -- will contain claimable amount for supplimentary product
      p_error       OUT      VARCHAR2         -- return error message if raise
   )
   IS
      /******************************************************************************
        Created By  : Syed Md. Musha
        PURPOSE     : Calculate Claim Payable Amount For Supplimentary Product

        REVISIONS:
        Ver        Date        Author           Description
        ---------  ----------  ---------------  ------------------------------------
        1.0                     Syed Md. Musha   Created this procedure

      ******************************************************************************/
      --v_policy_status    ins_p_summery.policy_status%TYPE;
      v_payment_status     NUMBER (1)                        := 0;
      v_clm_value          NUMBER (15, 2);
      v_clm_gen_value      NUMBER (20, 5);
      v_clm_add_value      NUMBER (20, 5);
      v_start_dt           DATE;
      v_payable_dt         DATE;
      v_bonus_amt          ins_policy_bonus.bonus_amt%TYPE;
      v_pgid               clm_claim_mst.pgid%TYPE;
      v_product_cd         clm_claim_mst.product_cd%TYPE;
      v_clm_cause_cd       clm_claim_mst.clm_cause_cd%TYPE;
      v_clm_detl_cd        clm_claim_mst.clm_detl_cd%TYPE;
      v_ben_party_cd       clm_claim_mst.ben_party_cd%TYPE;
      v_lien_payable_pct   NUMBER (5, 2)                     := 0;

      --Contain payable percentage if lien applicable

      ---This cursor contain supplimentary product list for the policy---
      CURSOR cur_policy_supp_prod (p_pgid ins_p_proposal.pgid%TYPE)
      IS
         SELECT s.pgid, s.supp_product_cd, s.supp_product_term,
                s.supp_amount, m.intimation_no
           FROM ins_p_supp_product s, clm_claim_mst m
          WHERE s.pgid = NVL (p_pgid, s.pgid)
            AND s.pgid = m.pgid
            AND m.clm_cause_cd = '01'
            AND NVL (m.approve_flag, '0') = '1';

      --WHERE s.pgid = fun_ins_policy_no_to_pgid (LPAD (p_policy_no, 10, 0));

      ---This Cursor Contain Benefit Information For Supplimentary Product---
      CURSOR cur_suppprd_ben_info (
         p_pgid           ins_p_proposal.pgid%TYPE,
         p_supp_prd_cd    clm_supp_prod_claim_detl.supp_product_cd%TYPE,
         --Contain supplimentary product code
         p_clm_cause_cd   clm_supp_prod_claim_detl.clm_cause_cd%TYPE,
         -- contain claim cause code
         p_clm_detl_cd    clm_supp_prod_claim_detl.clm_detl_cd%TYPE,
         -- contain claim cause detail code
         p_ben_party_cd   clm_supp_prod_claim_detl.ben_party_code%TYPE
      -- contain benefited party code
      )
      IS
         SELECT d.sl_no, d.supp_product_cd, d.clm_cause_cd, d.clm_detl_cd,
                d.ben_party_code, d.pay_basis_cd, d.pay_type, d.percentage,
                d.payment_type, d.installment_type, d.pay_depends_on,
                d.payment_year, d.additional_ben, d.int_percentage,
                d.addi_ben_cal_on, s.policy_status_dt, s.maturity_date,
                s.sum_assured, s.policy_status, s.comm_date,
                p.supp_product_term,
                ADD_MONTHS (s.comm_date,
                            (p.supp_product_term * 12)
                           ) supp_prd_maturity_dt,
                (s.last_paid_inst_no / (s.policy_installment / s.term)
                ) policy_age
           FROM clm_supp_prod_claim_detl d,
                ins_p_supp_product p,
                ins_p_summery s
          WHERE d.supp_product_cd = p.supp_product_cd
            AND p.pgid = s.pgid
            AND s.pgid = p_pgid
            --fun_ins_policy_no_to_pgid (LPAD (p_policy_no, 10, 0))
            AND d.supp_product_cd = p_supp_prd_cd
            AND d.clm_cause_cd = p_clm_cause_cd
            AND d.clm_detl_cd = p_clm_detl_cd
            AND d.ben_party_code = p_ben_party_cd
            AND s.policy_status = '02'
            --AND NVL (d.payment_year, 0)  =
            --                          NVL (p_noof_payment_yr, NVL (d.payment_year, 0))
            AND (   (                              ----Single payment at claim
                         d.payment_type = '03'
                     AND d.pay_depends_on = '01'
                     AND (    TO_NUMBER (TO_CHAR (s.policy_status_dt,
                                                  'RRRRMMDD'
                                                 )
                                        ) >=
                                  TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                          AND TO_NUMBER (TO_CHAR (s.policy_status_dt,
                                                  'RRRRMMDD'
                                                 )
                                        ) <=
                                    TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                         )
                    )
                 OR                                ----Single maturity payment
                    (    d.payment_type = '03'
                     AND d.pay_depends_on = '05'
                     AND (    TO_NUMBER
                                 (TO_CHAR
                                     (ADD_MONTHS
                                          (ADD_MONTHS (s.comm_date,
                                                       (  p.supp_product_term
                                                        * 12
                                                       )
                                                      ),
                                           12
                                          ),
                                      'RRRRMMDD'
                                     )
                                 ) >=
                                  TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                          AND TO_NUMBER
                                 (TO_CHAR
                                     (ADD_MONTHS
                                          (ADD_MONTHS (s.comm_date,
                                                       (  p.supp_product_term
                                                        * 12
                                                       )
                                                      ),
                                           12
                                          ),
                                      'RRRRMMDD'
                                     )
                                 ) <=
                                    TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                         )
                    )
                 OR                                         ---Pension payment
                    (    d.payment_type = '01'
                     AND d.pay_depends_on = '05'
                     AND d.installment_type = '04'                  ---monthly
                     /*AND TO_NUMBER (TO_CHAR (ADD_MONTHS (s.policy_status_dt, 12),
                     'RRRRMMDD'
                     )
                     ) >=
                     TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))*/
                     AND (   (    p_start_dt >= s.policy_status_dt
                              AND TO_DATE
                                     (   TO_CHAR (p_start_dt, 'RRRRMM')
                                      || (CASE
                                             WHEN TO_CHAR
                                                        (LAST_DAY (p_start_dt),
                                                         'DD'
                                                        ) >=
                                                    TO_CHAR
                                                          (s.policy_status_dt,
                                                           'DD'
                                                          )
                                                THEN TO_CHAR
                                                          (s.policy_status_dt,
                                                           'DD'
                                                          )
                                             ELSE TO_CHAR
                                                        (LAST_DAY (p_start_dt),
                                                         'DD'
                                                        )
                                          END
                                         ),
                                      'RRRRMMDD'
                                     ) BETWEEN p_start_dt AND p_end_dt
                             )
                          OR (    ADD_MONTHS (p_start_dt, 1) >=
                                                            s.policy_status_dt
                              AND TO_DATE
                                     (   TO_CHAR (ADD_MONTHS (p_start_dt, 1),
                                                  'RRRRMM'
                                                 )
                                      || (CASE
                                             WHEN TO_CHAR
                                                        (LAST_DAY (p_start_dt),
                                                         'DD'
                                                        ) >=
                                                    TO_CHAR
                                                          (s.policy_status_dt,
                                                           'DD'
                                                          )
                                                THEN TO_CHAR
                                                          (s.policy_status_dt,
                                                           'DD'
                                                          )
                                             ELSE TO_CHAR
                                                        (LAST_DAY (p_start_dt),
                                                         'DD'
                                                        )
                                          END
                                         ),
                                      'RRRRMMDD'
                                     ) BETWEEN p_start_dt AND p_end_dt
                             )
                         )
                    /*AND (
                    (TO_NUMBER (   TO_CHAR (p_start_dt, 'RRRRMM')
                               || TO_CHAR (s.policy_status_dt, 'DD')
                              ) >= TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                    AND TO_NUMBER (   TO_CHAR (p_end_dt, 'RRRRMM')
                                   || TO_CHAR (s.policy_status_dt, 'DD')
                                  ) <= TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                    )
                    OR
                    (TO_NUMBER (   TO_CHAR (ADD_MONTHS(p_start_dt,TRUNC(((p_end_dt - p_start_dt) + 1)/30)), 'RRRRMM')
                               || TO_CHAR (s.policy_status_dt, 'DD')
                              ) >= TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                    AND TO_NUMBER (   TO_CHAR (p_end_dt, 'RRRRMM')
                                   || TO_CHAR (s.policy_status_dt, 'DD')
                                  ) <= TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                    )
                    )*/
                    )
                )
            AND NOT EXISTS (
                   SELECT 1
                     FROM clm_payable_calc_detl c
                    WHERE c.supp_product_cd = d.supp_product_cd
                      AND c.sl_no = d.sl_no
                      AND c.clm_cause_cd = d.clm_cause_cd
                      AND c.clm_detl_cd = d.clm_detl_cd
                      AND c.pgid = s.pgid
                      AND (   d.payment_type <> '01'
                           OR (    d.payment_type = '01'
                               AND TRUNC (c.payment_dt) BETWEEN p_start_dt
                                                            AND p_end_dt
                              )
                          )
                      AND c.supp_product_cd IS NOT NULL
                      AND c.supp_ben_cd IS NULL);
   BEGIN
      IF p_policy_no IS NOT NULL
      THEN
         v_pgid := fun_ins_policy_no_to_pgid (p_policy_no);
      END IF;

      FOR i IN cur_policy_supp_prod (v_pgid)
      LOOP
         ---Get claim cause information---
         BEGIN
            SELECT m.pgid, m.product_cd, m.clm_cause_cd, m.clm_detl_cd,
                   m.ben_party_cd
              INTO v_pgid, v_product_cd, v_clm_cause_cd, v_clm_detl_cd,
                   v_ben_party_cd
              FROM clm_claim_mst m
             WHERE m.pgid = i.pgid;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
            WHEN OTHERS
            THEN
               p_error := SQLERRM;
         END;

         ---END of get claim cause information---
         FOR j IN cur_suppprd_ben_info (i.pgid,
                                        i.supp_product_cd,
                                        v_clm_cause_cd,
                                        v_clm_detl_cd,
                                        v_ben_party_cd
                                       )
         LOOP
            ---Check For Payment Type---
            IF NVL (j.payment_type, '00') = '03'
            THEN
               --Single Payment
               ---Check For Payment Status (Benefit Wise)---

               ---Check For Payment Status (Benefit Wise)---
               IF NVL (v_payment_status, 0) = 0
               THEN
                  --Not yet paid this benefit
                  IF NVL (j.pay_type, 0) = 1
                  THEN
                     ---Pay type = percentage
                     --Check for basis of payment--
                     IF j.pay_basis_cd = '01'
                     THEN
                        ---Assured amount
                        v_clm_gen_value :=
                             NVL (v_clm_gen_value, 0)
                           +   (NVL (j.sum_assured, 0) * NVL (j.percentage, 0)
                               )
                             / 100;
                     --ELSIF i.pay_basis_cd = '04' THEN       ---Total renewal amount

                     --v_clm_gen_value := NVL(v_clm_gen_value,0) + (NVL(v_renewal_amt,0)*NVL(j.percentage,0))/100;
                     END IF;
                  --End of check for basis of payment
                  END IF;                   ---End if of pay type = percentage
               END IF;
            ELSIF NVL (j.payment_type, '00') = '02'
            THEN
               --Stage Payment
               NULL;
            ELSIF NVL (j.payment_type, '00') = '01'
            THEN
               --Pension Payment
               v_start_dt := p_start_dt;

               LOOP
                  ---LOOP to calculate all pension in the date range
                  ---Check for pension type monthly or yearly---
                  IF NVL (j.installment_type, '00') = '04'
                  THEN
                     --Monthly pension
                     ---Check monthly pension applicable for the date range---
                     IF    (    TO_NUMBER
                                   (   TO_CHAR (v_start_dt, 'RRRRMM')
                                    || (CASE
                                           WHEN TO_CHAR (LAST_DAY (v_start_dt),
                                                         'DD'
                                                        ) >=
                                                  TO_CHAR (j.policy_status_dt,
                                                           'DD'
                                                          )
                                              THEN TO_CHAR
                                                          (j.policy_status_dt,
                                                           'DD'
                                                          )
                                           ELSE TO_CHAR (LAST_DAY (v_start_dt),
                                                         'DD'
                                                        )
                                        END
                                       )
                                   ) >=
                                   TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                            AND TO_NUMBER
                                   (   TO_CHAR (v_start_dt, 'RRRRMM')
                                    || (CASE
                                           WHEN TO_CHAR (LAST_DAY (v_start_dt),
                                                         'DD'
                                                        ) >=
                                                  TO_CHAR (j.policy_status_dt,
                                                           'DD'
                                                          )
                                              THEN TO_CHAR
                                                          (j.policy_status_dt,
                                                           'DD'
                                                          )
                                           ELSE TO_CHAR (LAST_DAY (v_start_dt),
                                                         'DD'
                                                        )
                                        END
                                       )
                                   ) <=
                                    TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                           )
                        OR (TO_DATE
                               (   TO_CHAR (ADD_MONTHS (v_start_dt, 1),
                                            'RRRRMM'
                                           )
                                || (CASE
                                       WHEN TO_CHAR (LAST_DAY (v_start_dt),
                                                     'DD'
                                                    ) >=
                                              TO_CHAR (j.policy_status_dt,
                                                       'DD'
                                                      )
                                          THEN TO_CHAR (j.policy_status_dt,
                                                        'DD'
                                                       )
                                       ELSE TO_CHAR (LAST_DAY (v_start_dt),
                                                     'DD'
                                                    )
                                    END
                                   ),
                                'RRRRMMDD'
                               ) BETWEEN p_start_dt AND p_end_dt
                           )
                     THEN
                        IF NVL (j.pay_type, 0) = 1
                        THEN
                           ---Pay type = percentage
                           --Check for basis of payment--
                           IF j.pay_basis_cd = '01'
                           THEN
                              ---Assured amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (j.sum_assured, 0)
                                      * NVL (j.percentage, 0)
                                     )
                                   / 100;
                           --ELSIF i.pay_basis_cd = '04' THEN       ---Total renewal amount

                           --v_clm_gen_value := NVL(v_clm_gen_value,0) + (NVL(v_renewal_amt,0)*NVL(j.percentage,0))/100;
                           END IF;
                        --End of check for basis of payment
                        END IF;             ---End if of pay type = percentage
                     END IF;

                     v_start_dt := ADD_MONTHS (v_start_dt, 1);
                  ELSIF NVL (j.installment_type, '00') = '01'
                  THEN
                     --Yearly pension
                     ---Check yearly pension applicable for the date range---
                     IF     TO_NUMBER (   TO_CHAR (v_start_dt, 'RRRR')
                                       || TO_CHAR (j.policy_status_dt, 'MMDD')
                                      ) >=
                                  TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                        AND TO_NUMBER (   TO_CHAR (v_start_dt, 'RRRR')
                                       || TO_CHAR (j.policy_status_dt, 'MMDD')
                                      ) <=
                                    TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                     THEN
                        IF NVL (j.pay_type, 0) = 1
                        THEN
                           ---Pay type = percentage
                           --Check for basis of payment--
                           IF j.pay_basis_cd = '01'
                           THEN
                              ---Assured amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (j.sum_assured, 0)
                                      * NVL (j.percentage, 0)
                                     )
                                   / 100;
                           --ELSIF i.pay_basis_cd = '04' THEN       ---Total renewal amount

                           --v_clm_gen_value := NVL(v_clm_gen_value,0) + (NVL(v_renewal_amt,0)*NVL(j.percentage,0))/100;
                           END IF;
                        --End of check for basis of payment
                        END IF;             ---End if of pay type = percentage
                     END IF;

                     v_start_dt := ADD_MONTHS (v_start_dt, 12);
                  END IF;

                  EXIT WHEN v_start_dt > p_end_dt;
               END LOOP;
            ---END LOOP to calculate all pension in the date range
            END IF;

            ---End of check For Payment Type---

            ---------------------------------------------------------
---------------------------------------------------------
---Check for bonus or interest---
            IF NVL (j.additional_ben, '03') = '01'
            THEN
               ---Bonus
               ---Calculate Bonus---
               BEGIN
                  SELECT SUM (b.bonus_amt)
                    INTO v_bonus_amt
                    FROM ins_policy_bonus b
                   WHERE b.pgid = fun_ins_policy_no_to_pgid (p_policy_no);

                  --AND b.product_cd     = p_product_cd;
                  v_clm_add_value :=
                                NVL (v_clm_add_value, 0)
                                + NVL (v_bonus_amt, 0);
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     NULL;
                  WHEN OTHERS
                  THEN
                     p_error := SQLERRM;
               END;
            END IF;

---End of calculate Bonus---
---------------------------------------------------------
---------------------------------------------------------
            v_clm_value := NVL (v_clm_gen_value, 0) + NVL (v_clm_add_value, 0);

            ---Store data in a temporary table---
            IF p_error IS NULL
            THEN
               IF NVL (v_clm_value, 0) > 0
               THEN
                  ---Get Payable Date---
                  BEGIN
                     IF     j.clm_cause_cd = '01'
                        AND                               --Death Claim Single
                            j.policy_status = '02'
                        AND j.payment_type = '03'
                     THEN
                        v_payable_dt := j.policy_status_dt;
                     ELSIF     j.policy_status = '02'
                           AND                                         --death
                               j.payment_type = '01'
                           AND                                       --pension
                               j.installment_type = '04'     --Monthly Pension
                     THEN
                        IF TO_DATE
                              (   TO_CHAR (p_start_dt, 'RRRRMM')
                               || (CASE
                                      WHEN TO_CHAR (LAST_DAY (p_start_dt),
                                                    'DD'
                                                   ) >=
                                             TO_CHAR (j.policy_status_dt,
                                                      'DD')
                                         THEN TO_CHAR (j.policy_status_dt,
                                                       'DD'
                                                      )
                                      ELSE TO_CHAR (LAST_DAY (p_start_dt),
                                                    'DD'
                                                   )
                                   END
                                  ),
                               'RRRRMMDD'
                              ) BETWEEN p_start_dt AND p_end_dt
                        THEN
                           v_payable_dt :=
                              TO_DATE
                                 (   TO_CHAR (p_start_dt, 'RRRRMM')
                                  || (CASE
                                         WHEN TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      ) >=
                                                TO_CHAR (j.policy_status_dt,
                                                         'DD'
                                                        )
                                            THEN TO_CHAR (j.policy_status_dt,
                                                          'DD'
                                                         )
                                         ELSE TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      )
                                      END
                                     ),
                                  'RRRRMMDD'
                                 );
                        ELSIF TO_DATE
                                (   TO_CHAR (ADD_MONTHS (p_start_dt, 1),
                                             'RRRRMM'
                                            )
                                 || (CASE
                                        WHEN TO_CHAR (LAST_DAY (p_start_dt),
                                                      'DD'
                                                     ) >=
                                               TO_CHAR (j.policy_status_dt,
                                                        'DD'
                                                       )
                                           THEN TO_CHAR (j.policy_status_dt,
                                                         'DD'
                                                        )
                                        ELSE TO_CHAR (LAST_DAY (p_start_dt),
                                                      'DD'
                                                     )
                                     END
                                    ),
                                 'RRRRMMDD'
                                ) BETWEEN p_start_dt AND p_end_dt
                        THEN
                           v_payable_dt :=
                              TO_DATE
                                 (   TO_CHAR (ADD_MONTHS (p_start_dt, 1),
                                              'RRRRMM'
                                             )
                                  || (CASE
                                         WHEN TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      ) >=
                                                TO_CHAR (j.policy_status_dt,
                                                         'DD'
                                                        )
                                            THEN TO_CHAR (j.policy_status_dt,
                                                          'DD'
                                                         )
                                         ELSE TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      )
                                      END
                                     ),
                                  'RRRRMMDD'
                                 );
                        END IF;
                     ELSIF     j.policy_status = '02'
                           AND                                         --death
                               j.payment_type = '01'
                           AND                                       --pension
                               j.installment_type = '01'      --Yearly Pension
                     THEN
                        IF TO_DATE (   TO_CHAR (p_start_dt, 'RRRR')
                                    || TO_CHAR (j.policy_status_dt, 'MMDD'),
                                    'RRRRMMDD'
                                   ) BETWEEN p_start_dt AND p_end_dt
                        THEN
                           v_payable_dt :=
                              TO_DATE (   TO_CHAR (p_start_dt, 'RRRR')
                                       || TO_CHAR (j.policy_status_dt, 'MMDD'),
                                       'RRRRMMDD'
                                      );
                        ELSIF TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 12),
                                                   'RRRR'
                                                  )
                                       || TO_CHAR (j.policy_status_dt, 'MMDD'),
                                       'RRRRMMDD'
                                      ) BETWEEN p_start_dt AND p_end_dt
                        THEN
                           v_payable_dt :=
                              TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 12),
                                                   'RRRR'
                                                  )
                                       || TO_CHAR (j.policy_status_dt, 'MMDD'),
                                       'RRRRMMDD'
                                      );
                        END IF;
                     END IF;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        NULL;
                  END;

                  /*******Lien Consideration For Death Claim*******/
                  IF j.clm_cause_cd = '01'
                  THEN
                     BEGIN
                        SELECT (100 - l.lien_percentage) lien_payable_pct
                          INTO v_lien_payable_pct
                          FROM ins_uw_lien l, clm_application p
                         WHERE l.pgid = p.pgid
                           AND l.party_cd = p.death_part_cd
                           AND l.party_id = p.death_party_id
                           AND l.pgid = i.pgid
                           AND l.lien_tp_cd <> '03'
                           AND j.policy_age BETWEEN l.lien_year_fr
                                                AND l.lien_year_to;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           v_lien_payable_pct := 0;
                           NULL;
                     END;

                     IF NVL (v_lien_payable_pct, 0) > 0
                     THEN
                        v_clm_value :=
                                     v_clm_value
                                     * (v_lien_payable_pct / 100);
                     END IF;
                  END IF;

                  /****End of Lien Consideration For Death Claim****/

                  ---Store data in details table---
                  INSERT INTO clm_payable_calc_detl
                              (pgid, product_cd, sl_no, clm_cause_cd,
                               clm_detl_cd, ben_party_cd,
                               supp_product_cd, suppprd_clm_amt, payment_dt,
                               pay_type_cd, pay_mode_cd,
                               intimation_no, session_id
                              )
                       VALUES (v_pgid, v_product_cd, j.sl_no, j.clm_cause_cd,
                               j.clm_detl_cd, j.ben_party_code,
                               i.supp_product_cd, v_clm_value, v_payable_dt,
                               j.payment_type, j.installment_type,
                               i.intimation_no, USERENV ('SESSIONID')
                              );

                  COMMIT;
               END IF;
            END IF;

            ---END IF OF store data in a temporary table---
            v_clm_gen_value := 0;
            v_clm_add_value := 0;
         END LOOP;
      END LOOP;
   --p_suppprd_clm_value := NVL(v_clm_gen_value,0) + NVL(v_clm_add_value,0);
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END pro_supp_prod_clm_cal;

/*============================================================================================================*/
/*============================================================================================================*/
--End of pro_supp_prod_clm_cal--
/*============================================================================================================*/
/*============================================================================================================*/
   PROCEDURE pro_supp_ben_clm_cal (
      p_policy_no         IN       ins_p_proposal.policy_no%TYPE,
      -- contain policy no
      p_office_cd         IN       hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_flag   IN       VARCHAR2,
      -- IF Y Then consider descend office
      p_start_dt          IN       DATE,
      -- Contain start date of user geven date range
      p_end_dt            IN       DATE,
      -- Contain end date of user geven date range
      p_user              IN       VARCHAR2,              --Contain input user
      p_process_cnt       OUT      NUMBER,    -- Return no of record processed
      p_error             OUT      VARCHAR2   -- return error message if raise
   )
   IS
      /******************************************************************************
        Created By  : Syed Md. Musha
        PURPOSE     : Calculate Claim Payable Amount For Supplimentary Benefit

        REVISIONS:
        Ver        Date        Author           Description
        ---------  ----------  ---------------  ------------------------------------
        1.0                     Syed Md. Musha   Created this procedure
        1.1        13-07-2014   Syed Md. Musha   Update to incorporate new claim application
      ******************************************************************************/
      --v_policy_status    ins_p_summery.policy_status%TYPE;
      v_clm_gen_value      NUMBER (20, 5);
      v_tot_clm_value      NUMBER (20, 5);
      v_start_dt           DATE;
      v_payable_dt         DATE;
      v_pgid               clm_claim_mst.pgid%TYPE;
      v_lien_payable_pct   NUMBER (5, 2)                           := 0;
------------------------
      v_payable_no         clm_claim_payable_gen.payable_no%TYPE;
      v_bank_cd            clm_client_account.bank_cd%TYPE;
      v_br_cd              clm_client_account.br_cd%TYPE;
      v_account_no         clm_client_account.account_no%TYPE;
      v_br_address         clm_client_account.address%TYPE;

      --Contain payable percentage if lien applicable

      ---This cursor contain supplimentary benefit list for the policy---
      CURSOR cur_policy_supp_ben (p_pgid ins_p_proposal.pgid%TYPE)
      IS
         SELECT s.pgid, s.supp_ben_cd, s.supp_ben_term,
                TO_CHAR (m.appl_no) appl_no, NULL intimation_no,
                m.clm_cause_cd, m.clm_detl_cd, m.party_cd, m.apprv_dt
           FROM ins_p_supp_benefit s, clm_claim_appl m, ins_p_summery p
          WHERE s.pgid = NVL (p_pgid, s.pgid)
            AND s.pgid = m.pgid
            AND s.pgid = p.pgid
            AND NVL (m.apprv_status, '0') = '1'
            AND m.apprv_dt BETWEEN NVL (p_start_dt, m.apprv_dt)
                               AND NVL (p_end_dt, m.apprv_dt)
            AND (   (    NVL (p_descendant_flag, 'N') = 'N'
                     AND p.servicing_off = NVL (p_office_cd, p.servicing_off)
                    )
                 OR (    NVL (p_descendant_flag, 'N') = 'Y'
                     AND p.servicing_off IN (
                              SELECT     o.office_cd
                                    FROM hrm_office_setup o
                              START WITH o.office_cd = p_office_cd
                              CONNECT BY PRIOR o.office_cd =
                                                           o.control_office_cd)
                    )
                )
            AND NOT EXISTS (SELECT 1
                              FROM clm_payable_calc_detl c
                             WHERE c.appl_no = m.appl_no AND c.pgid = m.pgid)
         UNION ALL
         SELECT s.pgid, s.supp_ben_cd, s.supp_ben_term, NULL, m.intimation_no,
                m.clm_cause_cd, m.clm_detl_cd, m.ben_party_cd, m.claim_dt
           FROM ins_p_supp_benefit s, clm_claim_mst m, ins_p_summery p
          WHERE s.pgid = NVL (p_pgid, s.pgid)
            AND s.pgid = m.pgid
            AND s.pgid = p.pgid
            AND NVL (m.approve_flag, '0') = '1'
            AND m.apprv_rjct_dt BETWEEN NVL (p_start_dt, m.apprv_rjct_dt)
                                    AND NVL (p_end_dt, m.apprv_rjct_dt)
            AND (   (    NVL (p_descendant_flag, 'N') = 'N'
                     AND p.servicing_off = NVL (p_office_cd, p.servicing_off)
                    )
                 OR (    NVL (p_descendant_flag, 'N') = 'Y'
                     AND p.servicing_off IN (
                              SELECT     o.office_cd
                                    FROM hrm_office_setup o
                              START WITH o.office_cd = p_office_cd
                              CONNECT BY PRIOR o.office_cd =
                                                           o.control_office_cd)
                    )
                )
            AND NOT EXISTS (
                   SELECT 1
                     FROM clm_payable_calc_detl c
                    WHERE c.intimation_no = m.intimation_no
                          AND c.pgid = m.pgid);

      --s.pgid = fun_ins_policy_no_to_pgid (LPAD (p_policy_no, 10, 0));

      ---This Cursor Contain Benefit Information For Supplimentary Benefit---
      CURSOR cur_supp_ben_info (
         p_pgid            ins_p_proposal.pgid%TYPE,
         p_appl_no         clm_claim_appl.appl_no%TYPE,
         p_intimation_no   clm_claim_mst.intimation_no%TYPE,
         p_pay_calc_dt     DATE,
         p_supp_ben_cd     clm_supp_ben_claim_detl.supp_ben_cd%TYPE,
         --Contain supplimentary product code
         p_clm_cause_cd    clm_supp_ben_claim_detl.clm_cause_cd%TYPE,
         -- contain claim cause code
         p_clm_detl_cd     clm_supp_ben_claim_detl.clm_detl_cd%TYPE,
         -- contain claim cause detail code
         p_ben_party_cd    clm_supp_ben_claim_detl.ben_party_code%TYPE
      -- contain benefited party code
      )
      IS
         SELECT d.sl_no, d.supp_ben_cd, d.clm_cause_cd, d.clm_detl_cd,
                d.ben_party_code, d.pay_basis_cd, d.pay_type, d.percentage,
                d.payment_type, d.installment_type, d.pay_depends_on,
                d.payment_year, d.additional_ben, d.int_percentage,
                d.addi_ben_cal_on, s.sum_assured,        --s.policy_status_dt,
                                                 s.policy_status,
                  s.last_paid_inst_no
                / (s.policy_installment / s.term) policy_age,
                s.product_cd, p_pay_calc_dt
           FROM clm_supp_ben_claim_detl d,
                ins_p_supp_benefit p,
                ins_p_summery s
          WHERE d.supp_ben_cd = p.supp_ben_cd
            AND p.pgid = s.pgid
            AND s.pgid = p_pgid
            --fun_ins_policy_no_to_pgid (LPAD (p_policy_no, 10, 0))
            AND d.supp_ben_cd = p_supp_ben_cd
            AND d.clm_cause_cd = p_clm_cause_cd
            AND d.clm_detl_cd = p_clm_detl_cd
            AND d.ben_party_code = p_ben_party_cd
            --AND s.policy_status = '02'
            --AND NVL (d.payment_year, 0) =
            --                          NVL (p_noof_payment_yr, NVL (d.payment_year, 0))
            AND (   (                              ----Single payment at claim
                         d.payment_type = '03'
                     AND d.pay_depends_on = '07'
                     AND (    TO_NUMBER (TO_CHAR (p_pay_calc_dt, 'RRRRMMDD')) >=
                                  TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                          AND TO_NUMBER (TO_CHAR (p_pay_calc_dt, 'RRRRMMDD')) <=
                                    TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                         )
                    )
                 OR                                ----Single maturity payment
                    (    d.payment_type = '03'
                     AND d.pay_depends_on = '05'
                     AND (    TO_NUMBER (TO_CHAR (s.maturity_date, 'RRRRMMDD')) >=
                                  TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                          AND TO_NUMBER (TO_CHAR (s.maturity_date, 'RRRRMMDD')) <=
                                    TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                         )
                    )
                 OR                                 ----Pension payment weekly
                    (    d.payment_type = '01'
                     AND d.pay_depends_on = '04'
                     AND d.installment_type = '05'
                     --AND (p_start_dt - s.policy_status_dt)   <= NVL (d.total_day, 0)
                     AND   p_pay_calc_dt
                         + NVL (CEIL ((p_start_dt - p_pay_calc_dt) / 7) * 7,
                                0) BETWEEN p_start_dt AND p_end_dt
                    )
                 OR                                 ----Pension payment yearly
                    (    d.payment_type = '01'                     ----Pension
                     AND d.pay_depends_on = '04'
                     AND d.installment_type = '01'                  ----Yearly
                     AND (   (TO_DATE (   TO_CHAR (p_start_dt, 'RRRR')
                                       || TO_CHAR (p_pay_calc_dt, 'MMDD'),
                                       'RRRRMMDD'
                                      ) BETWEEN p_start_dt AND p_end_dt
                             )
                          OR (TO_DATE (   TO_CHAR (p_start_dt, 'RRRR')
                                       +  1
                                       || TO_CHAR (p_pay_calc_dt, 'MMDD'),
                                       'RRRRMMDD'
                                      ) BETWEEN p_start_dt AND p_end_dt
                             )
                         )
                    )
                 OR                                ----Pension payment Monthly
                    (    d.payment_type = '01'                     ----Pension
                     AND d.pay_depends_on = '04'
                     AND d.installment_type = '04'                 ----Monthly
                     AND (   (TO_DATE
                                 (   TO_CHAR (p_start_dt, 'RRRRMM')
                                  || (CASE
                                         WHEN TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      ) >=
                                                 TO_CHAR (p_pay_calc_dt, 'DD')
                                            THEN TO_CHAR (p_pay_calc_dt, 'DD')
                                         ELSE TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      )
                                      END
                                     ),
                                  'RRRRMMDD'
                                 ) BETWEEN p_start_dt AND p_end_dt
                             )
                          OR (TO_DATE
                                 (   TO_CHAR (ADD_MONTHS (p_start_dt, 12),
                                              'RRRRMM'
                                             )
                                  || (CASE
                                         WHEN TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      ) >=
                                                 TO_CHAR (p_pay_calc_dt, 'DD')
                                            THEN TO_CHAR (p_pay_calc_dt, 'DD')
                                         ELSE TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      )
                                      END
                                     ),
                                  'RRRRMMDD'
                                 ) BETWEEN p_start_dt AND p_end_dt
                             )
                         )
                    )
                )
            AND NOT EXISTS (
                   SELECT 1
                     FROM clm_payable_calc_detl c
                    WHERE c.supp_ben_cd = d.supp_ben_cd
                      AND c.sl_no = d.sl_no
                      AND c.clm_cause_cd = d.clm_cause_cd
                      AND c.clm_detl_cd = d.clm_detl_cd
                      AND (   c.appl_no = p_appl_no
                           OR c.intimation_no = p_intimation_no
                          )
                      AND c.pgid = s.pgid
                      AND (   d.payment_type <> '01'
                           OR (    d.payment_type = '01'
                               AND TRUNC (c.payment_dt) BETWEEN p_start_dt
                                                            AND p_end_dt
                              )
                          )
                      AND c.supp_product_cd IS NULL
                      AND c.supp_ben_cd IS NOT NULL);
   BEGIN
      IF p_policy_no IS NOT NULL
      THEN
         v_pgid := fun_ins_policy_no_to_pgid (p_policy_no);
      END IF;

      FOR i IN cur_policy_supp_ben (v_pgid)
      LOOP
         --LOOP 01
         ---Get claim cause information---
         /*BEGIN
            SELECT m.pgid, m.product_cd, m.clm_cause_cd, m.clm_detl_cd,
                   m.ben_party_cd
              INTO v_pgid, v_product_cd, v_clm_cause_cd, v_clm_detl_cd,
                   v_ben_party_cd
              FROM clm_claim_mst m
             WHERE m.pgid = i.pgid;
         --fun_ins_policy_no_to_pgid (LPAD (p_policy_no, 10, 0)) ;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
            WHEN OTHERS
            THEN
               p_error := SQLERRM;
         END;*/
         v_clm_gen_value := 0;
         v_tot_clm_value := 0;

         ------Insert master table---
         IF i.clm_cause_cd IN ('04', '05')
         THEN
            v_payable_no := fun_build_pk ('P', 'SEQ_CLM_PAYABLE_VR', 15, 'Y');

            BEGIN
               SELECT c.account_no, c.bank_cd, c.br_cd, c.address
                 INTO v_account_no, v_bank_cd, v_br_cd, v_br_address
                 FROM clm_client_account c
                WHERE c.pgid = i.pgid AND c.party_cd = i.party_cd;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            INSERT INTO clm_claim_payable_gen
                        (payable_no, pgid, supp_ben_cd, clm_cause_cd,
                         clm_detl_cd, ben_party_cd, gen_date,
                         --payment_dt,
                         bank_acc_no, bank_cd, branch_cd, bank_address,
                         i_usr, i_dt
                        )
                 VALUES (v_payable_no, i.pgid, i.supp_ben_cd, i.clm_cause_cd,
                         i.clm_detl_cd, i.party_cd, TRUNC (SYSDATE),
                         --v_payable_dt,
                         v_account_no, v_bank_cd, v_br_cd, v_br_address,
                         p_user, SYSDATE
                        );
         END IF;

-----------------------------
-----------------------------

         ---END of get claim cause information---
         FOR j IN cur_supp_ben_info (i.pgid,
                                     i.appl_no,
                                     i.intimation_no,
                                     i.apprv_dt,
                                     i.supp_ben_cd,
                                     i.clm_cause_cd,
                                     i.clm_detl_cd,
                                     i.party_cd
                                    )
         LOOP
            --LOOP 02
            ---Check For Payment Type---
            IF NVL (j.payment_type, '00') = '03'
            THEN
               --Single Payment
               ---Check For Payment Status (Benefit Wise)---

               ---Check For Payment Status (Benefit Wise)---
               --IF NVL (v_payment_status, 0) = 0 THEN
               --Not yet paid this benefit
               IF NVL (j.pay_type, 0) = 1
               THEN
                  ---Pay type = percentage
                  --Check for basis of payment--
                  IF j.pay_basis_cd = '01'
                  THEN
                     ---Assured amount
                     v_clm_gen_value :=
                        (NVL (j.sum_assured, 0) * NVL (j.percentage, 0)
                        ) / 100;
                  ELSIF j.pay_basis_cd = '04'
                  THEN
                     ---Total renewal amount
                     v_clm_gen_value :=
                        (NVL (j.sum_assured, 0) * NVL (j.percentage, 0)
                        ) / 100;
                  END IF;
               --End of check for basis of payment
               END IF;                      ---End if of pay type = percentage
            --END IF;
            ELSIF NVL (j.payment_type, '00') = '02'
            THEN
               --Stage Payment
               NULL;
            ELSIF NVL (j.payment_type, '00') = '01'
            THEN
               --Pension Payment
               v_start_dt := p_start_dt;

               LOOP
                  ---LOOP to calculate all pension in the date range
                  ---Check for pension type weekly, monthly or yearly---
                  IF NVL (j.installment_type, '00') = '05'
                  THEN
                     --Weekly pension
                     ---Check weekly pension applicable for the date range---
                     IF   j.p_pay_calc_dt
                        + NVL (CEIL ((v_start_dt - j.p_pay_calc_dt) / 7) * 7,
                               0) BETWEEN p_start_dt AND p_end_dt
                     THEN
                        ---Check For Payment Status (Benefit Wise)---

                        ---Check For Payment Status (Benefit Wise)---
                        --IF NVL (v_payment_status, 0) = 0 THEN
                        --Not yet paid this benefit
                        IF NVL (j.pay_type, 0) = 1
                        THEN
                           ---Pay type = percentage
                           --Check for basis of payment--
                           IF j.pay_basis_cd = '01'
                           THEN
                              ---Assured amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (j.sum_assured, 0)
                                      * NVL (j.percentage, 0)
                                     )
                                   / 100;
                           ELSIF j.pay_basis_cd = '04'
                           THEN
                              ---Total renewal amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (j.sum_assured, 0)
                                      * NVL (j.percentage, 0)
                                     )
                                   / 100;
                           END IF;
                        --End of check for basis of payment
                        END IF;             ---End if of pay type = percentage
                     --END IF;
                     END IF;

                     v_start_dt := v_start_dt + 7;
                  ELSIF NVL (j.installment_type, '00') = '04'
                  THEN
                     --Monthly pension
                     ---Check monthly pension applicable for the date range---
                     IF     TO_NUMBER
                               (   TO_CHAR (v_start_dt, 'RRRRMM')
                                || (CASE
                                       WHEN TO_CHAR (LAST_DAY (v_start_dt),
                                                     'DD'
                                                    ) >=
                                               TO_CHAR (j.p_pay_calc_dt, 'DD')
                                          THEN TO_CHAR (j.p_pay_calc_dt, 'DD')
                                       ELSE TO_CHAR (LAST_DAY (v_start_dt),
                                                     'DD'
                                                    )
                                    END
                                   )
                               ) >=
                                  TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                        AND TO_NUMBER
                               (   TO_CHAR (v_start_dt, 'RRRRMM')
                                || (CASE
                                       WHEN TO_CHAR (LAST_DAY (v_start_dt),
                                                     'DD'
                                                    ) >=
                                               TO_CHAR (j.p_pay_calc_dt, 'DD')
                                          THEN TO_CHAR (j.p_pay_calc_dt, 'DD')
                                       ELSE TO_CHAR (LAST_DAY (v_start_dt),
                                                     'DD'
                                                    )
                                    END
                                   )
                               ) <= TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                     THEN
                        ---Check For Payment Status (Benefit Wise)---

                        ---Check For Payment Status (Benefit Wise)---
                        --IF NVL (v_payment_status, 0) = 0 THEN
                        --Not yet paid this benefit
                        IF NVL (j.pay_type, 0) = 1
                        THEN
                           ---Pay type = percentage
                           --Check for basis of payment--
                           IF j.pay_basis_cd = '01'
                           THEN
                              ---Assured amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (j.sum_assured, 0)
                                      * NVL (j.percentage, 0)
                                     )
                                   / 100;
                           ELSIF j.pay_basis_cd = '04'
                           THEN
                              ---Total renewal amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (j.sum_assured, 0)
                                      * NVL (j.percentage, 0)
                                     )
                                   / 100;
                           END IF;
                        --End of check for basis of payment
                        END IF;             ---End if of pay type = percentage
                     --END IF;
                     END IF;

                     v_start_dt := ADD_MONTHS (v_start_dt, 1);
                  ELSIF NVL (j.installment_type, '00') = '01'
                  THEN
                     --Yearly pension
                     ---Check yearly pension applicable for the date range---
                     IF     TO_NUMBER (   TO_CHAR (v_start_dt, 'RRRR')
                                       || TO_CHAR (j.p_pay_calc_dt, 'MMDD')
                                      ) >=
                                  TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                        AND TO_NUMBER (   TO_CHAR (v_start_dt, 'RRRR')
                                       || TO_CHAR (j.p_pay_calc_dt, 'MMDD')
                                      ) <=
                                    TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                     THEN
                        ---Check For Payment Status (Benefit Wise)---

                        ---Check For Payment Status (Benefit Wise)---
                        --IF NVL (v_payment_status, 0) = 0 THEN
                        --Not yet paid this benefit
                        IF NVL (j.pay_type, 0) = 1
                        THEN
                           ---Pay type = percentage
                           --Check for basis of payment--
                           IF j.pay_basis_cd = '01'
                           THEN
                              ---Assured amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (j.sum_assured, 0)
                                      * NVL (j.percentage, 0)
                                     )
                                   / 100;
                           ELSIF j.pay_basis_cd = '04'
                           THEN
                              ---Total renewal amount
                              v_clm_gen_value :=
                                   NVL (v_clm_gen_value, 0)
                                 +   (  NVL (j.sum_assured, 0)
                                      * NVL (j.percentage, 0)
                                     )
                                   / 100;
                           END IF;
                        --End of check for basis of payment
                        END IF;             ---END IF of pay type = percentage
                     --END IF;
                     END IF;

                     v_start_dt := ADD_MONTHS (v_start_dt, 12);
                  END IF;

                  ---END IF of check for pension type monthly or yearly---
                  EXIT WHEN v_start_dt > p_end_dt;
               END LOOP;
            ---END LOOP to calculate all pension in the date range
            END IF;

---End of check For Payment Type---
----------------------------------------------------------------------
----------------------------------------------------------------------

            ---Store data in a temporary table---
            IF p_error IS NULL
            THEN
               IF NVL (v_clm_gen_value, 0) > 0
               THEN
                  ---Get Payable Date---
                  BEGIN
                     IF
/*j.clm_cause_cd = '01'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 AND                                  --Death Claim Single
j.policy_status = '02'

                        j.payment_type = '03'
                     THEN
                        v_payable_dt := j.p_pay_calc_dt;
                     ELSIF
                               /*j.policy_status = '02'
death
                               j.payment_type = '01'
                           AND                                       --pension
                               j.installment_type = '04'     --Monthly Pension
                     THEN
                        IF TO_DATE
                              (   TO_CHAR (p_start_dt, 'RRRRMM')
                               || (CASE
                                      WHEN TO_CHAR (LAST_DAY (p_start_dt),
                                                    'DD'
                                                   ) >=
                                               TO_CHAR (j.p_pay_calc_dt, 'DD')
                                         THEN TO_CHAR (j.p_pay_calc_dt, 'DD')
                                      ELSE TO_CHAR (LAST_DAY (p_start_dt),
                                                    'DD'
                                                   )
                                   END
                                  ),
                               'RRRRMMDD'
                              ) BETWEEN p_start_dt AND p_end_dt
                        THEN
                           v_payable_dt :=
                              TO_DATE
                                 (   TO_CHAR (p_start_dt, 'RRRRMM')
                                  || (CASE
                                         WHEN TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      ) >=
                                                TO_CHAR (j.p_pay_calc_dt,
                                                         'DD')
                                            THEN TO_CHAR (j.p_pay_calc_dt,
                                                          'DD'
                                                         )
                                         ELSE TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      )
                                      END
                                     ),
                                  'RRRRMMDD'
                                 );
                        ELSIF TO_DATE
                                (   TO_CHAR (ADD_MONTHS (p_start_dt, 1),
                                             'RRRRMM'
                                            )
                                 || (CASE
                                        WHEN TO_CHAR (LAST_DAY (p_start_dt),
                                                      'DD'
                                                     ) >=
                                               TO_CHAR (j.p_pay_calc_dt, 'DD')
                                           THEN TO_CHAR (j.p_pay_calc_dt,
                                                         'DD')
                                        ELSE TO_CHAR (LAST_DAY (p_start_dt),
                                                      'DD'
                                                     )
                                     END
                                    ),
                                 'RRRRMMDD'
                                ) BETWEEN p_start_dt AND p_end_dt
                        THEN
                           v_payable_dt :=
                              TO_DATE
                                 (   TO_CHAR (ADD_MONTHS (p_start_dt, 1),
                                              'RRRRMM'
                                             )
                                  || (CASE
                                         WHEN TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      ) >=
                                                TO_CHAR (j.p_pay_calc_dt,
                                                         'DD')
                                            THEN TO_CHAR (j.p_pay_calc_dt,
                                                          'DD'
                                                         )
                                         ELSE TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      )
                                      END
                                     ),
                                  'RRRRMMDD'
                                 );
                        END IF;
                     ELSIF
                               /*j.policy_status = '02'
death
                               j.payment_type = '01'
                           AND                                       --pension
                               j.installment_type = '01'      --Yearly Pension
                     THEN
                        IF TO_DATE (   TO_CHAR (p_start_dt, 'RRRR')
                                    || TO_CHAR (j.p_pay_calc_dt, 'MMDD'),
                                    'RRRRMMDD'
                                   ) BETWEEN p_start_dt AND p_end_dt
                        THEN
                           v_payable_dt :=
                              TO_DATE (   TO_CHAR (p_start_dt, 'RRRR')
                                       || TO_CHAR (j.p_pay_calc_dt, 'MMDD'),
                                       'RRRRMMDD'
                                      );
                        ELSIF TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 12),
                                                   'RRRR'
                                                  )
                                       || TO_CHAR (j.p_pay_calc_dt, 'MMDD'),
                                       'RRRRMMDD'
                                      ) BETWEEN p_start_dt AND p_end_dt
                        THEN
                           v_payable_dt :=
                              TO_DATE (   TO_CHAR (ADD_MONTHS (p_start_dt, 12),
                                                   'RRRR'
                                                  )
                                       || TO_CHAR (j.p_pay_calc_dt, 'MMDD'),
                                       'RRRRMMDD'
                                      );
                        END IF;
                     END IF;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        NULL;
                  END;

                  /*******Lien Consideration For Death Claim*******/
                  IF j.clm_cause_cd = '01'
                  THEN
                     BEGIN
                        SELECT (100 - l.lien_percentage) lien_payable_pct
                          INTO v_lien_payable_pct
                          FROM ins_uw_lien l, clm_application p
                         WHERE l.pgid = p.pgid
                           AND l.party_cd = p.death_part_cd
                           AND l.party_id = p.death_party_id
                           AND l.pgid = i.pgid
                           AND l.lien_tp_cd <> '03'
                           AND j.policy_age BETWEEN l.lien_year_fr
                                                AND l.lien_year_to;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           v_lien_payable_pct := 0;
                           NULL;
                     END;

                     IF NVL (v_lien_payable_pct, 0) > 0
                     THEN
                        v_clm_gen_value :=
                                 v_clm_gen_value
                                 * (v_lien_payable_pct / 100);
                     END IF;
                  END IF;

                  /****End of Lien Consideration For Death Claim****/

                  ---Store data in details table---
                  INSERT INTO clm_payable_calc_detl
                              (pgid, product_cd, sl_no, clm_cause_cd,
                               clm_detl_cd, ben_party_cd,
                               supp_ben_cd, suppben_clm_amt, payment_dt,
                               pay_type_cd, pay_mode_cd, appl_no,
                               session_id, payable_no
                              )
                       VALUES (v_pgid, j.product_cd, j.sl_no, j.clm_cause_cd,
                               j.clm_detl_cd, j.ben_party_code,
                               i.supp_ben_cd, v_clm_gen_value, v_payable_dt,
                               j.payment_type, j.installment_type, i.appl_no,
                               USERENV ('SESSIONID'), v_payable_no
                              );

                  v_tot_clm_value :=
                            NVL (v_tot_clm_value, 0)
                            + NVL (v_clm_gen_value, 0);
               END IF;
            END IF;
         ---END IF OF store data in a temporary table---
         END LOOP;                                               --END LOOP 02

         IF i.clm_cause_cd IN ('04', '05')
         THEN
            UPDATE clm_claim_payable_gen
               SET gross_payable_amt = v_tot_clm_value,
                   net_payable_amt = v_tot_clm_value,
                   payment_dt = v_payable_dt
             WHERE payable_no = v_payable_no;

            COMMIT;
            p_process_cnt := NVL (p_process_cnt, 0) + 1;
         END IF;
      END LOOP;                                                  --END LOOP 01
   --p_suppben_clm_value := v_clm_gen_value;     ---Return calculated value
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END pro_supp_ben_clm_cal;

/*============================================================================================================*/
/*============================================================================================================*/
--End of pro_supp_ben_clm_cal--
/*============================================================================================================*/
/*============================================================================================================*/
   PROCEDURE pro_paidup_pension (
      p_pgid              IN       ins_p_proposal.pgid%TYPE,    --Contain pgid
      p_product_cd        IN       ins_product.product_cd%TYPE,
      --Contain product code
      p_office_cd         IN       hrm_office.office_cd%TYPE,
      --Contain office code
      p_descendant_flag   IN       VARCHAR2,
      --Contain flag for descendant offfice
      p_start_dt          IN       DATE,        --Start date of the date range
      p_end_dt            IN       DATE,          --End date of the date range
      p_user              IN       VARCHAR2,              --Contain input user
      p_process_cnt       OUT      NUMBER,     --Return no of record processed
      p_error             OUT      VARCHAR2             --Return error message
   )
   IS
      v_paidup_factor       NUMBER (15, 5)                          := 0;
      v_paidup_pension      NUMBER (15, 2)                          := 0;
      v_payable_amt         NUMBER (15, 2)                          := 0;
      v_start_dt            DATE;
      v_commutation_pct     NUMBER (3)                              := 0;
      v_payable_dt          DATE;
      v_suspense_amt        NUMBER (15, 2)                          := 0;
      v_bonus_amt           NUMBER (15, 2)                          := 0;
      v_loan_amt            NUMBER (15, 2)                          := 0;
      v_interest_amt        NUMBER (15, 2)                          := 0;
      v_premium_amt         NUMBER (15, 2)                          := 0;
      v_late_fee            NUMBER (15, 2)                          := 0;
      v_cnt                 NUMBER (10)                             := 0;
      v_payable_no          clm_claim_payable_gen.payable_no%TYPE;
      v_account_no          clm_client_account.account_no%TYPE;
      v_bank_cd             clm_client_account.bank_cd%TYPE;
      v_br_cd               clm_client_account.br_cd%TYPE;
      v_br_address          clm_client_account.address%TYPE;
      v_policy_age          NUMBER (5, 2)                           := 0;
      v_weighted_age        NUMBER (5, 2)                           := 0;
      v_ded_amt             NUMBER (15, 2)                          := 0;
      v_paidup_factor_l     NUMBER (15, 5)                          := 0;
      v_paidup_factor_u     NUMBER (15, 5)                          := 0;
      v_month_diff          NUMBER (5)                              := 0;
      v_no_of_anf_instl     NUMBER (5)                              := 0;
      v_anf_error           VARCHAR2 (1000);
      v_running_age_month   NUMBER (5)                              := 0;

      ---This cursor contains policy list that will get paidup pension---
      CURSOR cur_paidup_policy
      IS
         SELECT s.pgid, s.maturity_date, s.sum_assured/12 sum_assured, s.product_cd, s.term,
                s.comm_date, s.age age_entry, d.pay_depends_on,
                d.installment_type, s.age + s.term age_maturity,
                
                /*+ ROUND ((s.maturity_date - s.comm_date) / 365) age_maturity,*/
                d.policy_term_fr, d.policy_term_to, s.last_paid_inst_no,
                  s.last_paid_inst_no
                / (s.policy_installment / s.term) policy_age,
                  s.age
                + (s.last_paid_inst_no / (s.policy_installment / s.term))
                                                                weighted_age,
                d.commutation_per, d.sl_no, d.clm_cause_cd, d.clm_detl_cd,
                d.ben_party_cd, d.payment_type, d.pay_basis_cd,
                s.pay_mode_cd
           FROM ins_p_summery s,
                ins_product p,
                clm_product_claim_detl d,
                clm_product_claim_mst l
          WHERE s.product_cd = p.product_cd
            AND NVL (s.active_status, '1') = '1'
            AND p.policy_tp_cd = '02'
            AND s.product_cd = d.product_cd
            AND s.paid_up_status = 1
            AND s.pgid = NVL (p_pgid, s.pgid)
            AND d.clm_cause_cd = '06'
            AND d.clm_detl_cd = '01'
            AND NVL (d.tot_ben_yr, 999) >=
                           (MONTHS_BETWEEN (p_start_dt, s.maturity_date) / 12
                           )
            AND (   s.policy_status = '03'
                 OR (    s.policy_status = '01'
                     AND s.maturity_date <= TRUNC (ADD_MONTHS (SYSDATE, 1))
                     AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) = '0'
                    )
                 OR (s.policy_status = '01' AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) =
                                                                           '2'
                    )
                 OR (    s.policy_status = '02'
                     AND s.maturity_date <= TRUNC (ADD_MONTHS (SYSDATE, 1))
                     AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) = '0'
                     AND NVL (d.granted_yr, 999) >=
                            (MONTHS_BETWEEN (p_start_dt, s.maturity_date) / 12
                            )
                    )
                )
            AND s.term >= d.policy_term_fr
            AND s.term <= d.policy_term_to
            AND s.product_cd = NVL (p_product_cd, s.product_cd)
            AND fun_policy_surrendered (s.pgid) = '0'
            AND d.product_cd = l.product_cd
            AND d.clm_cause_cd = l.clm_cause_cd
            AND d.clm_detl_cd = l.clm_detl_cd
            AND d.ben_party_cd = l.ben_party_cd
            AND l.setup_id = d.setup_id
            AND s.policy_status = NVL (l.policy_status, s.policy_status)
            AND (   (    NVL (p_descendant_flag, 'N') = 'N'
                     AND s.servicing_off = NVL (p_office_cd, s.servicing_off)
                    )
                 OR (    NVL (p_descendant_flag, 'N') = 'Y'
                     AND s.servicing_off IN (
                              SELECT     o.office_cd
                                    FROM hrm_office_setup o
                              START WITH o.office_cd = p_office_cd
                              CONNECT BY PRIOR o.office_cd =
                                                           o.control_office_cd)
                    )
                )
            AND (    d.payment_type = '01'                           --pension
                 AND d.installment_type = '04'                       --monthly
                 AND (   (    TO_CHAR (p_start_dt, 'RRRRMM') >=
                                           TO_CHAR (s.maturity_date, 'RRRRMM')
                          AND TO_DATE
                                 (   TO_CHAR (p_start_dt, 'RRRRMM')
                                  || (CASE
                                         WHEN TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      ) >=
                                                TO_CHAR (s.maturity_date,
                                                         'DD')
                                            THEN TO_CHAR (s.maturity_date,
                                                          'DD'
                                                         )
                                         ELSE TO_CHAR (LAST_DAY (p_start_dt),
                                                       'DD'
                                                      )
                                      END
                                     ),
                                  'RRRRMMDD'
                                 ) BETWEEN p_start_dt AND p_end_dt
                         )
                      OR (    TO_CHAR (ADD_MONTHS (p_start_dt, 1), 'RRRRMM') >=
                                           TO_CHAR (s.maturity_date, 'RRRRMM')
                          AND TO_DATE
                                 (   TO_CHAR (ADD_MONTHS (p_start_dt, 1),
                                              'RRRRMM'
                                             )
                                  || (CASE
                                         WHEN TO_CHAR
                                                (LAST_DAY
                                                      (ADD_MONTHS (p_start_dt,
                                                                   1
                                                                  )
                                                      ),
                                                 'DD'
                                                ) >=
                                                TO_CHAR (s.maturity_date,
                                                         'DD')
                                            THEN TO_CHAR (s.maturity_date,
                                                          'DD'
                                                         )
                                         ELSE TO_CHAR
                                                (LAST_DAY
                                                      (ADD_MONTHS (p_start_dt,
                                                                   1
                                                                  )
                                                      ),
                                                 'DD'
                                                )
                                      END
                                     ),
                                  'RRRRMMDD'
                                 ) BETWEEN p_start_dt AND p_end_dt
                         )
                     )
                )
            AND NOT EXISTS (
                   SELECT 1
                     FROM clm_payable_calc_detl c
                    WHERE c.product_cd = d.product_cd
                      AND c.sl_no = d.sl_no
                      AND c.clm_cause_cd = d.clm_cause_cd
                      AND c.clm_detl_cd = d.clm_detl_cd
                      AND c.pgid = s.pgid
                      AND (   d.payment_type <> '01'
                           OR (    d.payment_type = '01'
                               AND TRUNC (c.payment_dt) BETWEEN p_start_dt
                                                            AND p_end_dt
                              )
                          )
                      AND c.supp_product_cd IS NULL
                      AND c.supp_ben_cd IS NULL);
   BEGIN
      --v_paidup_factor := .4828;
      FOR i IN cur_paidup_policy
      LOOP
         ---Loop policy list
         v_start_dt := p_start_dt;

         ---Get Payable Date---
         IF i.installment_type = '04'                       --Monthly Pension
         THEN
            IF TO_DATE
                  (   TO_CHAR (p_start_dt, 'RRRRMM')
                   || (CASE
                          WHEN TO_CHAR (LAST_DAY (p_start_dt), 'DD') >=
                                               TO_CHAR (i.maturity_date, 'DD')
                             THEN TO_CHAR (i.maturity_date, 'DD')
                          ELSE TO_CHAR (LAST_DAY (p_start_dt), 'DD')
                       END
                      ),
                   'RRRRMMDD'
                  ) BETWEEN p_start_dt AND p_end_dt
            THEN
               v_payable_dt :=
                  TO_DATE
                     (   TO_CHAR (p_start_dt, 'RRRRMM')
                      || (CASE
                             WHEN TO_CHAR (LAST_DAY (p_start_dt), 'DD') >=
                                               TO_CHAR (i.maturity_date, 'DD')
                                THEN TO_CHAR (i.maturity_date, 'DD')
                             ELSE TO_CHAR (LAST_DAY (p_start_dt), 'DD')
                          END
                         ),
                      'RRRRMMDD'
                     );
            ELSIF TO_DATE
                    (   TO_CHAR (ADD_MONTHS (p_start_dt, 1), 'RRRRMM')
                     || (CASE
                            WHEN TO_CHAR (LAST_DAY (ADD_MONTHS (p_start_dt, 1)),
                                          'DD'
                                         ) >= TO_CHAR (i.maturity_date, 'DD')
                               THEN TO_CHAR (i.maturity_date, 'DD')
                            ELSE TO_CHAR (LAST_DAY (ADD_MONTHS (p_start_dt, 1)),
                                          'DD'
                                         )
                         END
                        ),
                     'RRRRMMDD'
                    ) BETWEEN p_start_dt AND p_end_dt
            THEN
               v_payable_dt :=
                  TO_DATE
                     (   TO_CHAR (ADD_MONTHS (p_start_dt, 1), 'RRRRMM')
                      || (CASE
                             WHEN TO_CHAR (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                 1)
                                                    ),
                                           'DD'
                                          ) >= TO_CHAR (i.maturity_date, 'DD')
                                THEN TO_CHAR (i.maturity_date, 'DD')
                             ELSE TO_CHAR (LAST_DAY (ADD_MONTHS (p_start_dt,
                                                                 1)
                                                    ),
                                           'DD'
                                          )
                          END
                         ),
                      'RRRRMMDD'
                     );
            END IF;
         END IF;

         ---End of get Payable Date---

         --Call procedure to generate ANF loan information--
         pro_anf_loan_issue (p_pgid            => i.pgid,
                             p_cal_dt          => v_payable_dt,
                             p_claim_type      => NULL,
                             p_iuser           => p_user,
                             p_error           => v_anf_error
                            );

         --End of generate ANF loan information--

         ---Find no of installment adjusted by ANF loan---
         BEGIN
            SELECT COUNT (l.pgid) no_of_anf_instl
              INTO v_no_of_anf_instl
              FROM ins_anf_loan_dtl l
             WHERE l.pgid = p_pgid AND NVL (l.adjust_flag, '0') = 0;

            IF i.pay_mode_cd = '01'
            THEN
               v_policy_age := i.policy_age + NVL (v_no_of_anf_instl, 0) / 1;
               v_weighted_age :=
                               i.weighted_age + NVL (v_no_of_anf_instl, 0)
                                                / 1;
            ELSIF i.pay_mode_cd = '02'
            THEN
               v_policy_age := i.policy_age + NVL (v_no_of_anf_instl, 0) / 2;
               v_weighted_age :=
                               i.weighted_age + NVL (v_no_of_anf_instl, 0)
                                                / 2;
            ELSIF i.pay_mode_cd = '03'
            THEN
               v_policy_age := i.policy_age + NVL (v_no_of_anf_instl, 0) / 4;
               v_weighted_age :=
                               i.weighted_age + NVL (v_no_of_anf_instl, 0)
                                                / 4;
            ELSIF i.pay_mode_cd = '04'
            THEN
               v_policy_age := i.policy_age + NVL (v_no_of_anf_instl, 0) / 12;
               v_weighted_age :=
                              i.weighted_age + NVL (v_no_of_anf_instl, 0)
                                               / 12;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;

         ---End of finding no of installment adjusted by ANF loan---

         --Get paidup factor--
         BEGIN
            SELECT DECODE (i.pay_mode_cd,
                           '01', (  i.last_paid_inst_no
                                  + NVL (v_no_of_anf_instl, 0)
                               )
                            * 12,
                           '02', (  i.last_paid_inst_no
                                  + NVL (v_no_of_anf_instl, 0)
                               )
                            * 6,
                           '03', (  i.last_paid_inst_no
                                  + NVL (v_no_of_anf_instl, 0)
                               )
                            * 4,
                           (i.last_paid_inst_no + NVL (v_no_of_anf_instl, 0)
                           )
                          )
              INTO v_running_age_month
              FROM DUAL;

            SELECT f.paidup_factor / f.cal_para paidup_factor
              INTO v_paidup_factor
              FROM sur_paidup_factor f
             WHERE f.product_cd = i.product_cd
               AND f.policy_term = i.term
               AND f.running_age =
                      DECODE (f.running_age_type,
                              '1', ROUND (v_running_age_month / 12),
                              '2', v_running_age_month,
                              '3', v_running_age_month * 30,
                              0
                             );
         /*---Musha on 09-08-2014
         IF INSTR(v_policy_age, '.') = 0 THEN
           SELECT f.paidup_factor / f.cal_para paidup_factor
             INTO v_paidup_factor
             FROM sur_paidup_factor f
            WHERE f.age_entry = i.age_entry
              AND f.age_maturity = i.age_maturity
              AND f.age_weighted = v_weighted_age;
         ELSIF INSTR(i.policy_age, '.') > 0 THEN
           --Find factor for lower weighted age--
           SELECT f.paidup_factor / f.cal_para paidup_factor
             INTO v_paidup_factor_l
             FROM sur_paidup_factor f
            WHERE f.age_entry = i.age_entry
              AND f.age_maturity = i.age_maturity
              AND f.age_weighted = FLOOR(v_weighted_age);

           --Find factor for upper weighted age--
           SELECT f.paidup_factor / f.cal_para paidup_factor
             INTO v_paidup_factor_u
             FROM sur_paidup_factor f
            WHERE f.age_entry = i.age_entry
              AND f.age_maturity = i.age_maturity
              AND f.age_weighted = CEIL(v_weighted_age);

           IF i.pay_mode_cd = '02' THEN
             v_month_diff := (i.last_paid_inst_no +
                             NVL(v_no_of_anf_instl, 0)) * 6 -
                             FLOOR(v_policy_age) * 12;
           ELSIF i.pay_mode_cd = '03' THEN
             v_month_diff := (i.last_paid_inst_no +
                             NVL(v_no_of_anf_instl, 0)) * 3 -
                             FLOOR(v_policy_age) * 12;
           ELSIF i.pay_mode_cd = '04' THEN
             v_month_diff := (i.last_paid_inst_no +
                             NVL(v_no_of_anf_instl, 0)) -
                             FLOOR(v_policy_age) * 12;
           END IF;

           v_paidup_factor := NVL(v_paidup_factor_l, 0) +
                              ((NVL(v_paidup_factor_u, 0) -
                               NVL(v_paidup_factor_l, 0)) / 12) *
                              v_month_diff;
         ELSE
           v_paidup_factor := 0;
         END IF;*/
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               v_paidup_factor := 0;
            WHEN OTHERS
            THEN
               NULL;
         END;

         LOOP
            ---Loop to calculate all pension in the date range
            ---Check for pension type monthly or yearly---
            IF NVL (i.installment_type, '00') = '04'
            THEN
               --Monthly pension
               ---Check monthly pension applicable for the date range---
               IF    (    TO_NUMBER
                             (   TO_CHAR (v_start_dt, 'RRRRMM')
                              || (CASE
                                     WHEN TO_CHAR (LAST_DAY (v_start_dt),
                                                   'DD') >=
                                               TO_CHAR (i.maturity_date, 'DD')
                                        THEN TO_CHAR (i.maturity_date, 'DD')
                                     ELSE TO_CHAR (LAST_DAY (v_start_dt),
                                                   'DD')
                                  END
                                 )
                             ) >= TO_NUMBER (TO_CHAR (p_start_dt, 'RRRRMMDD'))
                      AND TO_NUMBER
                             (   TO_CHAR (v_start_dt, 'RRRRMM')
                              || (CASE
                                     WHEN TO_CHAR (LAST_DAY (v_start_dt),
                                                   'DD') >=
                                               TO_CHAR (i.maturity_date, 'DD')
                                        THEN TO_CHAR (i.maturity_date, 'DD')
                                     ELSE TO_CHAR (LAST_DAY (v_start_dt),
                                                   'DD')
                                  END
                                 )
                             ) <= TO_NUMBER (TO_CHAR (p_end_dt, 'RRRRMMDD'))
                     )
                  OR (TO_DATE
                         (   TO_CHAR (ADD_MONTHS (v_start_dt, 1), 'RRRRMM')
                          || (CASE
                                 WHEN TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (v_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           ) >=
                                               TO_CHAR (i.maturity_date, 'DD')
                                    THEN TO_CHAR (i.maturity_date, 'DD')
                                 ELSE TO_CHAR
                                           (LAST_DAY (ADD_MONTHS (v_start_dt,
                                                                  1
                                                                 )
                                                     ),
                                            'DD'
                                           )
                              END
                             ),
                          'RRRRMMDD'
                         ) BETWEEN p_start_dt AND p_end_dt
                     )
               THEN
                  ---Get commutation information--
                  BEGIN
                     SELECT MAX (c.commutation_pct)
                       INTO v_commutation_pct
                       FROM clm_commutation_info c
                      WHERE c.pgid = i.pgid;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        NULL;
                  END;

                  ---Check for commutation value---
                  IF NVL (v_commutation_pct, 0) = 0                      --AND
                  --NVL (v_commutation_pct, 0) = NVL(i.commutation_per,0)
                  THEN
                     ---No commutation percentage means based on sumassured value
                     IF NVL (i.payment_type, 0) = '01'
                     THEN
                        ---Pay type = percentage
                        --Check for basis of payment
                        IF i.pay_basis_cd = '03'
                        THEN
                           ---Paid Up Value
                           v_paidup_pension :=
                                   ROUND (i.sum_assured * v_paidup_factor, 2);
                        /*ELSIF i.pay_basis_cd = '04'
                        THEN                              ---Total renewal amount
                        */
                        END IF;
                     --End of check for basis of payment
                     END IF;
                  ---End if of pay type = percentage
                  ELSIF NVL (v_commutation_pct, 0) = 50                  --AND
                  --NVL (v_commutation_pct, 0) = NVL(i.commutation_per,0)
                  THEN
                     ---Commutation percentage = 50
                     v_paidup_pension :=
                             ROUND ((i.sum_assured * v_paidup_factor) / 2, 2);
                  ELSIF NVL (v_commutation_pct, 0) = 100                 --AND
                  --NVL (v_commutation_pct, 0) = NVL(i.commutation_per,0)
                  THEN
                     ---Commutation percentage = 100
                     v_paidup_pension := 0;
                  END IF;

                  ---End of check for commutation value---

                  /*******************************Insert data in the table*******************************/
                  IF v_paidup_pension > 0        --IF for check pension amount
                  THEN
                     ---Get Payable Date---
                     v_payable_no :=
                            fun_build_pk ('P', 'SEQ_CLM_PAYABLE_VR', 15, 'Y');
                     ---Generate pk
                     /*Get policy bonus information*/
                     pro_policy_bonus (p_pgid            => i.pgid,
                                       p_payable_no      => v_payable_no,
                                       p_payable_dt      => v_payable_dt,
                                       p_user            => p_user,
                                       p_bonus_amt       => v_bonus_amt
                                      );
                     /*Get suspense amount*/
                     v_suspense_amt := 0;

                     BEGIN
                        SELECT s.suspense_amt
                          INTO v_suspense_amt
                          FROM ins_p_summery s
                         WHERE s.pgid = i.pgid
                           AND NOT EXISTS (
                                  SELECT 1
                                    FROM clm_claim_payable_gen g
                                   WHERE NVL (g.suspense_amt, 0) > 0
                                     AND g.pgid = s.pgid);
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           NULL;
                     END;

                     --Get deductable amount--
                     v_ded_amt :=
                        (  NVL (v_paidup_pension, 0)
                         + NVL (v_bonus_amt, 0)
                         + NVL (v_suspense_amt, 0)
                        );
                     /*This procedure calculate ANF premium and late fee for that loan*/
                     pro_anf_premium (p_pgid             => i.pgid,
                                      p_calc_date        => v_payable_dt,
                                      p_payable_no       => v_payable_no,
                                      p_ded_amt          => NVL (v_paidup_pension, 0),  --v_ded_amt, --Musha on  26.08.2015
                                      p_user             => p_user,
                                      p_premium_amt      => v_premium_amt,
                                      p_late_fee         => v_late_fee
                                     );
                     --Get deductable amount--
                     v_ded_amt :=
                          (  NVL (v_paidup_pension, 0)
                           + NVL (v_bonus_amt, 0)
                           + NVL (v_suspense_amt, 0)
                          )
                        - (NVL (v_premium_amt, 0) + NVL (v_late_fee, 0));
                     /*Get policy loan information*/
                     pro_policy_loan (p_pgid              => i.pgid,
                                      p_payable_no        => v_payable_no,
                                      p_payable_dt        => v_payable_dt,
                                      p_ded_amt           => v_ded_amt,
                                      p_user              => p_user,
                                      p_loan_amt          => v_loan_amt,
                                      p_interest_amt      => v_interest_amt
                                     );
                     v_payable_amt :=
                          (  NVL (v_paidup_pension, 0)
                           + NVL (v_bonus_amt, 0)
                           + NVL (v_suspense_amt, 0)
                          )
                        - (  NVL (v_loan_amt, 0)
                           + NVL (v_interest_amt, 0)
                           + NVL (v_premium_amt, 0)
                           + NVL (v_late_fee, 0)
                          );

                     IF v_paidup_pension > 0
                     THEN
                        ---Get client account information---
                        v_account_no := NULL;
                        v_bank_cd := NULL;
                        v_br_cd := NULL;
                        v_br_address := NULL;

                        BEGIN
                           SELECT c.account_no, c.bank_cd, c.br_cd,
                                  c.address
                             INTO v_account_no, v_bank_cd, v_br_cd,
                                  v_br_address
                             FROM clm_client_account c
                            WHERE c.pgid = i.pgid
                              AND c.party_cd = i.ben_party_cd;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              NULL;
                        END;

                        ---Insert into master table---
                        INSERT INTO clm_claim_payable_gen
                                    (payable_no, pgid, product_cd,
                                     clm_cause_cd, clm_detl_cd, ben_party_cd,
                                     gen_date, gross_payable_amt,
                                     bonus_payable, loan_ded_amt,
                                     loan_interest, suspense_amt,
                                     anf_premium_amt, anf_late_fee,
                                     net_payable_amt, payment_dt,
                                     payment_for, bank_acc_no, bank_cd,
                                     branch_cd, bank_address, i_usr, i_dt
                                    )
                             VALUES (v_payable_no, i.pgid, i.product_cd,
                                     '06', '01', i.ben_party_cd,
                                     TRUNC (SYSDATE), v_paidup_pension,
                                     v_bonus_amt, v_loan_amt,
                                     v_interest_amt, v_suspense_amt,
                                     v_premium_amt, v_late_fee,
                                     v_payable_amt, v_payable_dt,
                                     'PP', v_account_no, v_bank_cd,
                                     v_br_cd, v_br_address, p_user, SYSDATE
                                    );

                        ---Store data in details table---
                        INSERT INTO clm_payable_calc_detl
                                    (pgid, payable_no, product_cd,
                                     sl_no, clm_cause_cd, clm_detl_cd,
                                     ben_party_cd, policy_clm_amt,
                                     payment_dt, pay_type_cd,
                                     pay_mode_cd, session_id
                                    )
                             VALUES (i.pgid, v_payable_no, i.product_cd,
                                     i.sl_no, '06', '01',
                                     i.ben_party_cd, v_paidup_pension,
                                     v_payable_dt, i.payment_type,
                                     i.installment_type, USERENV ('SESSIONID')
                                    );

                        COMMIT;
                        v_cnt := NVL (v_cnt, 0) + 1;
                        v_payable_amt := 0;
                        v_paidup_pension := 0;
                     END IF;
                  END IF;
               /*******************************Insert data in the table*******************************/
               END IF;

               ---End if of check monthly pension applicable for the date range---
               v_start_dt := ADD_MONTHS (v_start_dt, 1);
               EXIT WHEN v_start_dt > p_end_dt;
            END IF;
         END LOOP;      ---End Loop to calculate all pension in the date range
      END LOOP;                                            ---Loop policy list

      p_process_cnt := v_cnt;                 ---Return no of record processed
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := 'pro_paidup_pension : ' || SQLERRM;
   END pro_paidup_pension;

/*============================================================================================================*/
/*============================================================================================================*/
--End of pro_paidup_pension--
/*============================================================================================================*/
/*============================================================================================================*/
   PROCEDURE pro_paidup_value (
      p_pgid              IN       ins_p_proposal.pgid%TYPE,    --Contain pgid
      p_product_cd        IN       ins_product.product_cd%TYPE,
      --Contain product code
      p_office_cd         IN       hrm_office.office_cd%TYPE,
      --Contain office code
      p_descendant_flag   IN       VARCHAR2,
      --Contain flag for descendant offfice
      p_start_dt          IN       DATE,        --Start date of the date range
      p_end_dt            IN       DATE,          --End date of the date range
      p_user              IN       VARCHAR2,              --Contain input user
      p_process_cnt       OUT      NUMBER,     --Return no of record processed
      p_error             OUT      VARCHAR2             --Return error message
   )
   IS
      v_paidup_value        NUMBER (15, 2);
      v_payable_amt         NUMBER (15, 2);
      v_suspense_amt        NUMBER (15, 2);
      v_bonus_amt           NUMBER (15, 2);
      v_loan_amt            NUMBER (15, 2);
      v_interest_amt        NUMBER (15, 2);
      v_premium_amt         NUMBER (15, 2);
      v_late_fee            NUMBER (15, 2);
      v_cnt                 NUMBER (10)                                  := 0;
      v_no_of_anf_instl     NUMBER (5)                                   := 0;
      v_payable_no          clm_claim_payable_gen.payable_no%TYPE;
      v_account_no          clm_client_account.account_no%TYPE;
      v_bank_cd             clm_client_account.bank_cd%TYPE;
      v_br_cd               clm_client_account.br_cd%TYPE;
      v_br_address          clm_client_account.address%TYPE;
      v_paid_amt            clm_claim_payable_gen.net_payable_amt%TYPE;
      v_ded_amt             NUMBER (15, 2)                               := 0;
      v_anf_error           VARCHAR2 (1000);
---------------------
      v_loan_sl_no          VARCHAR2 (10);
      v_loan_reco_locking   NUMBER (1);
      v_loan_rec_loc_err    VARCHAR2 (100);
      v_source_tax          NUMBER (12, 2)                               := 0;
      v_source_tax_err      VARCHAR2 (200);
      v_prem_due_late_fee   NUMBER (12, 2)                               := 0;
      v_paid_prem_late_fee  NUMBER (12, 2)                               := 0;
      v_unadj_coll_amt      NUMBER (12, 2)                               := 0;
      v_tot_paid_amt        NUMBER (12, 2)                               := 0;
      
      v_no_of_anf_loan      NUMBER (5)      := 0;
      v_no_of_anf_loan_yr   NUMBER (2)      := 0;
      v_anf_loan_amount     NUMBER (12, 2)  := 0;
      v_interest_amount     NUMBER (12, 2)  := 0;
      v_alt_due_amount      clm_claim_appl.alt_due_amount%TYPE;
      ---Add by Musha on 15.07.2018
      v_extra_bonus_amt     NUMBER (15, 2)                               := 0;
      v_extra_bonus_error   VARCHAR2 (200);
      v_bonus_amt_temp      NUMBER (15, 2);

      CURSOR cur_paidup_policy
      IS
         SELECT s.pgid, s.maturity_date, s.sum_assured, s.product_cd,
                s.comm_date, s.age age_entry,
                  s.age
                + ROUND ((s.maturity_date - s.comm_date) / 365) age_maturity,
                s.last_paid_inst_no, s.policy_installment, s.term, d.sl_no,
                d.ben_party_cd, d.payment_type, d.installment_type,
                  s.last_paid_inst_no
                / (s.policy_installment / s.term) no_of_paid_year, s.option_cd,
                s.pay_mode_cd, l.clm_cause_cd, l.clm_detl_cd, d.pay_basis_cd,
                d.percentage
           FROM ins_p_summery s,
                ins_product p,
                clm_product_claim_detl d,
                clm_product_claim_mst l
          WHERE s.product_cd = p.product_cd
            AND s.product_cd = d.product_cd
            AND NVL (s.active_status, '1') = '1'
            AND p.policy_tp_cd <> '02'
            AND (   s.policy_status = '03'
                 OR (    s.policy_status = '01'
                     AND s.maturity_date <= TRUNC (ADD_MONTHS (SYSDATE, 1))
                     AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) = '0'
                    )
                 OR (s.policy_status = '01' AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) =
                                                                           '2'
                    )
                )
            --AND s.paid_up_status       = 1
            AND NVL (p.paidup_age, 0) <=
                                  ((s.last_paid_date - s.comm_date) / 365
                                  ) + 1
            AND d.clm_cause_cd = '06'
            AND s.pgid = NVL (p_pgid, s.pgid)
            AND TO_NUMBER (s.term) <> 0
            AND s.product_cd = NVL (p_product_cd, s.product_cd)
            AND fun_policy_surrendered (s.pgid) = '0'
            AND d.product_cd = l.product_cd
            AND d.clm_cause_cd = l.clm_cause_cd
            AND d.clm_detl_cd = l.clm_detl_cd
            AND d.ben_party_cd = l.ben_party_cd
            AND l.setup_id = d.setup_id
            AND s.policy_status = NVL (l.policy_status, s.policy_status)
            AND s.maturity_date BETWEEN p_start_dt AND p_end_dt
            AND (   (    NVL (p_descendant_flag, 'N') = 'N'
                     AND s.office_cd = NVL (p_office_cd, s.office_cd)    --Modify By Musha on 09.07.2019 s.servicing_off to s.office_cd
                    )
                 OR (    NVL (p_descendant_flag, 'N') = 'Y'
                     AND s.office_cd IN (
                              SELECT     o.office_cd
                                    FROM hrm_office_setup o
                              START WITH o.office_cd = p_office_cd
                              CONNECT BY PRIOR o.office_cd =
                                                           o.control_office_cd)
                    )
                )
            AND NOT EXISTS (
                   SELECT 1
                     FROM clm_payable_calc_detl c
                    WHERE c.pgid = s.pgid
                      AND c.product_cd = d.product_cd
                      AND c.sl_no = d.sl_no
                      AND c.clm_cause_cd = d.clm_cause_cd
                      AND c.clm_detl_cd = d.clm_detl_cd
                      AND c.supp_product_cd IS NULL
                      AND c.supp_ben_cd IS NULL)
            AND (NVL(l.app_req, '0') = '0' OR
                 (l.app_req = '1'
                  AND EXISTS (
                       SELECT 1
                         FROM clm_claim_appl a
                        WHERE a.pgid = s.pgid
                          AND a.clm_cause_cd = d.clm_cause_cd
                          AND a.clm_detl_cd = d.clm_detl_cd
                          AND a.party_cd = d.ben_party_cd
                          AND a.payable_dt BETWEEN p_start_dt AND p_end_dt
                          AND a.apprv_status = '1')
                 ));
   BEGIN
      FOR i IN cur_paidup_policy
      LOOP
         BEGIN
            SELECT s.sl_no
              INTO v_loan_sl_no
              FROM pol_loan_summary s
             WHERE s.pgid = i.pgid AND s.loan_status = '1';

            IF fun_loan_reco_locking (i.pgid, v_loan_sl_no,
                                      v_loan_rec_loc_err)
            THEN
               v_loan_reco_locking := 1;
            ELSE
               v_loan_reco_locking := 0;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               v_loan_reco_locking := 0;
            WHEN OTHERS
            THEN
               v_loan_reco_locking := 1;
         END;

         IF v_loan_reco_locking = 0
         THEN
            -----------Calculate previously paid amount-----------
            BEGIN
               SELECT NVL (SUM (  NVL (p.actual_payable_amt,
                                       p.gross_payable_amt
                                      )
                                + NVL (actual_bonus_amt,
                                       NVL (p.bonus_payable, 0)
                                      )
                               ),
                           0
                          )
                 INTO v_paid_amt
                 FROM clm_claim_payable_gen p
                WHERE p.pgid = i.pgid
                  AND p.clm_cause_cd NOT IN ('04', '05')
                ;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_paid_amt := 0;
                  NULL;
            END;

---------------------------------------
--Call procedure to generate ANF loan information--
            /*pro_anf_loan_issue (p_pgid            => i.pgid,
                                p_cal_dt          => i.maturity_date,
                                p_claim_type      => NULL,
                                p_iuser           => p_user,
                                p_error           => v_anf_error
                               );*/---Musha on 08.10.2015

            --End of generate ANF loan information--

            ---Find no of installment adjusted by ANF loan---
            BEGIN
               /*SELECT COUNT (l.pgid) no_of_anf_instl
                 INTO v_no_of_anf_instl
                 FROM ins_anf_loan_dtl l
                WHERE l.pgid = p_pgid AND NVL (l.adjust_flag, '0') = 0;*/ ---Musha on 08.10.2015
               
               ---Chekc deductable amount
                 pro_anf_loan_payable_info
                                         (p_pgid                   => p_pgid,
                                          p_appl_date              => i.maturity_date,
                                          p_no_of_anf_loan         => v_no_of_anf_loan,
                                          p_no_of_anf_loan_yr      => v_no_of_anf_loan_yr,
                                          p_anf_loan_amount        => v_anf_loan_amount,
                                          p_interest_amount        => v_interest_amount,
                                          p_error                  => v_anf_error
                                         );
               
               v_no_of_anf_instl := NVL(v_no_of_anf_loan,0);
               
               IF i.pay_mode_cd = '01'
               THEN
                  v_no_of_anf_instl := v_no_of_anf_instl / 1;
               ELSIF i.pay_mode_cd = '02'
               THEN
                  v_no_of_anf_instl := v_no_of_anf_instl / 2;
               ELSIF i.pay_mode_cd = '03'
               THEN
                  v_no_of_anf_instl := v_no_of_anf_instl / 4;
               ELSIF i.pay_mode_cd = '04'
               THEN
                  v_no_of_anf_instl := v_no_of_anf_instl / 12;
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
            ---End of finding no of installment adjusted by ANF loan---
            
            IF i.pay_basis_cd = '12'
            THEN
               BEGIN
                  SELECT ROUND ((last_paid_inst_no * installment_premium), 2)
                                                                 tot_paid_amt
                    INTO v_tot_paid_amt
                    FROM ins_p_summery
                   WHERE pgid = i.pgid;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     p_error := SQLERRM;
                     NULL;
               END;

               v_paidup_value :=
                        (NVL (v_tot_paid_amt, 0) * NVL (i.percentage, 0)
                        ) / 100;
            ELSE
               v_paidup_value :=
                  ROUND (  (  (  i.sum_assured
                               * i.no_of_paid_year
                              )
                            / i.term
                           )
                         - NVL (v_paid_amt, 0)
                        ); ----Musha on 30.11.2015
               IF v_paidup_value >= v_anf_loan_amount + v_interest_amount THEN               
                   v_paidup_value :=
                      ROUND (  (  (  i.sum_assured
                                   * (i.no_of_paid_year + v_no_of_anf_instl)
                                  )
                                / i.term
                               )
                             - NVL (v_paid_amt, 0)
                            );
               ELSE
                    v_no_of_anf_loan        := 0;
                    v_no_of_anf_loan_yr     := 0;
                    v_anf_loan_amount       := 0;
                    v_interest_amount       := 0;
               END IF;
            END IF;

            --v_payable_no := fun_build_pk ('P', 'SEQ_CLM_PAYABLE_VR', 15, 'Y'); ---Musha on 20.12.2015 move to under if condition

            ---Generate pk
            ----------------------------------- 
            ---Musha on 20.12.2015--
            IF ((i.option_cd IN ('1', '2') AND NVL(v_no_of_anf_loan,0) = 0) OR
               (     i.option_cd = '2' AND NVL(v_no_of_anf_loan,0) > 0 
                AND (i.last_paid_inst_no + NVL(v_no_of_anf_loan,0)) < i.policy_installment))
            THEN
                v_paidup_value := 0;
                p_error := 'Due to surrender value not sufficient for ANF loan';
            END IF;
            ------------------------------------
            
            ---Store data in details table--- 
            
            BEGIN  --Add by Musha on 08.06.2020
               SELECT   NVL (SUM (BONUS_AMT), 0)
                 INTO   v_bonus_amt_temp
                 FROM   ins_policy_bonus
                WHERE   pgid = p_pgid;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_bonus_amt_temp := 0;
            END;
                                 
            IF NVL (v_paidup_value, 0) + NVL(v_bonus_amt_temp, 0) > 0
            THEN
               v_payable_no := fun_build_pk ('P', 'SEQ_CLM_PAYABLE_VR', 15, 'Y');---Musha on 20.12.2015
               
               INSERT INTO clm_payable_calc_detl
                           (pgid, payable_no, product_cd, sl_no,
                            clm_cause_cd, clm_detl_cd, ben_party_cd,
                            policy_clm_amt, payment_dt, pay_type_cd,
                            pay_mode_cd, session_id
                           )
                    VALUES (i.pgid, v_payable_no, i.product_cd, i.sl_no,
                            '06', '01', i.ben_party_cd,
                            v_paidup_value, i.maturity_date, i.payment_type,
                            i.installment_type, USERENV ('SESSIONID')
                           );
            --END IF;

            /*This procedure calculate ANF premium and late fee for that loan*/
                IF v_paidup_value >= v_anf_loan_amount + v_interest_amount THEN  ---Musha on 30.11.2015
                    pro_anf_premium (p_pgid             => i.pgid,
                                     p_calc_date        => i.maturity_date,
                                     p_payable_no       => v_payable_no,
                                     p_ded_amt          => NVL (v_paidup_value, 0),     --v_ded_amt,  --Musha on 26.08.2015
                                     p_user             => p_user,
                                     p_premium_amt      => v_premium_amt,
                                     p_late_fee         => v_late_fee
                                    );
                END IF;                
                /*Get policy bonus information*/
                pro_policy_bonus (p_pgid            => i.pgid,
                                  p_payable_no      => v_payable_no,
                                  p_payable_dt      => i.maturity_date,
                                  p_user            => p_user,
                                  p_bonus_amt       => v_bonus_amt
                                 );
                                 
                ---------------------------------------------------------
                 -------Add by Musha on 15.07.2018------
                 ---Find extra bonus if applicable---
                 pro_extra_bonus_calc (
                        p_pgid              => i.pgid
                       ,p_payable_no        => v_payable_no
                       ,p_payable_dt        => i.maturity_date
                       ,p_cur_pay_amt       => (v_paidup_value + NVL (v_bonus_amt, 0))
                       ,p_prem_type         => 2   -- 1 for Life Premium, 2 for Installment Premium       
                       ,p_user              => p_user
                       ,p_extra_bonus_amt   => v_extra_bonus_amt
                       ,p_error             => v_extra_bonus_error --Return error message
                       );
                       
                  v_bonus_amt := NVL (v_bonus_amt, 0) + NVL (v_extra_bonus_amt, 0);
                 ---------------------------------------------------------                 
                
                /*Get suspense amount*/
                v_suspense_amt := 0;

                BEGIN
                   SELECT s.suspense_amt
                     INTO v_suspense_amt
                     FROM ins_p_summery s
                    WHERE s.pgid = i.pgid
                      AND NOT EXISTS (
                              SELECT 1
                                FROM clm_claim_payable_gen g
                               WHERE NVL (g.suspense_amt, 0) > 0
                                     AND g.pgid = s.pgid);
                EXCEPTION
                   WHEN OTHERS
                   THEN
                      NULL;
                END;

                --Get deductable amount--
                v_ded_amt :=
                   (  NVL (v_paidup_value, 0)
                    + NVL (v_bonus_amt, 0)
                    + NVL (v_suspense_amt, 0)
                   );
                /*This procedure calculate ANF premium and late fee for that loan*/
                /*pro_anf_premium (p_pgid             => i.pgid,
                                 p_calc_date        => i.maturity_date,
                                 p_payable_no       => v_payable_no,
                                 p_ded_amt          => NVL (v_paidup_value, 0),     --v_ded_amt,  --Musha on 26.08.2015
                                 p_user             => p_user,
                                 p_premium_amt      => v_premium_amt,
                                 p_late_fee         => v_late_fee
                                );*/
                --Get deductable amount--
                v_ded_amt :=
                     (  NVL (v_paidup_value, 0)
                      + NVL (v_bonus_amt, 0)
                      + NVL (v_suspense_amt, 0)
                     )
                   - (NVL (v_premium_amt, 0) + NVL (v_late_fee, 0));
                /*Get policy loan information*/
                pro_policy_loan (p_pgid              => i.pgid,
                                 p_payable_no        => v_payable_no,
                                 p_payable_dt        => i.maturity_date,
                                 p_ded_amt           => v_ded_amt,
                                 p_user              => p_user,
                                 p_loan_amt          => v_loan_amt,
                                 p_interest_amt      => v_interest_amt
                                );
                --Source Tax Deduction--
                IF I.product_cd = '07' THEN
                    v_source_tax  := 0;                
                ELSE
                    pro_calc_claim_source_tax (p_pgid              => i.pgid,
                                               p_cur_pay_amt       =>   (  v_paidup_value
                                                                         + NVL
                                                                              (v_bonus_amt,
                                                                               0
                                                                              )
                                                                        ),
                                                                      /*- (  NVL
                                                                              (v_premium_amt,
                                                                               0
                                                                              )
                                                                         + NVL
                                                                              (v_late_fee,
                                                                               0
                                                                              )
                                                                        ),*/----Musha on 15.10.2015
                                               p_prem_type         => 2
                                                                       -- 1 for Life Premium, 2 for Installment Premium
                    ,
                                               p_tax_calc_for      => i.clm_cause_cd,
                                               p_source_tax        => v_source_tax,
                                               p_error             => v_source_tax_err
                                              );
                END IF;
    --====================================--

                --Find premium due late fee
                BEGIN
                   SELECT NVL (p.tot_req_amt, 0) - NVL (p.paid_prem_late_fee_after_disc, 0),
                          NVL (p.paid_prem_late_fee_after_disc, 0), NVL (p.unadj_coll_amt, 0),
                          NVL(alt_due_amount, 0)
                     INTO v_prem_due_late_fee, 
                          v_paid_prem_late_fee, v_unadj_coll_amt,
                          v_alt_due_amount
                     FROM clm_claim_appl p
                    WHERE p.pgid = i.pgid
                      AND p.clm_cause_cd = i.clm_cause_cd
                      AND p.clm_detl_cd = i.clm_detl_cd
                      AND p.appl_no = 
                             (SELECT MAX (l.appl_no)
                                FROM clm_claim_appl l
                               WHERE l.pgid = p.pgid
                                 AND l.clm_cause_cd = p.clm_cause_cd
                                 AND l.clm_detl_cd = p.clm_detl_cd);
                EXCEPTION
                   WHEN OTHERS
                   THEN
                      v_prem_due_late_fee := 0;
                      v_unadj_coll_amt := 0;
                      v_paid_prem_late_fee := 0;
                      v_alt_due_amount   := 0;
                END;

                v_payable_amt :=
                     (  NVL (v_paidup_value, 0)
                      + NVL (v_bonus_amt, 0)
                      + NVL (v_suspense_amt, 0)
                      + NVL (v_unadj_coll_amt, 0)
                     )
                   - (  NVL (v_loan_amt, 0)
                      + NVL (v_interest_amt, 0)
                      + NVL (v_premium_amt, 0)
                      + NVL (v_late_fee, 0)
                      + NVL (v_source_tax, 0)
                    --  + NVL (v_prem_due_late_fee, 0)
                      + NVL (v_paid_prem_late_fee, 0)
                      + NVL(v_alt_due_amount, 0)
                     );

            --IF NVL (v_paidup_value, 0) > 0                 --v_payable_amt > 0
            --THEN  ---Musha on 20.12.2015
               ---Get client account information---
               v_account_no := NULL;
               v_bank_cd := NULL;
               v_br_cd := NULL;
               v_br_address := NULL;

               BEGIN
                  SELECT c.account_no, c.bank_cd, c.br_cd, c.address
                    INTO v_account_no, v_bank_cd, v_br_cd, v_br_address
                    FROM clm_client_account c
                   WHERE c.pgid = i.pgid AND c.party_cd = i.ben_party_cd;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;

               ---Insert into master table---
               INSERT INTO clm_claim_payable_gen
                           (payable_no, pgid, product_cd, clm_cause_cd,
                            clm_detl_cd, ben_party_cd, gen_date,
                            gross_payable_amt, bonus_payable, loan_ded_amt,
                            loan_interest, suspense_amt, anf_premium_amt,
                            anf_late_fee, net_payable_amt, payment_dt,
                            payment_for, bank_acc_no, bank_cd, branch_cd,
                            bank_address, source_tax,
                            prem_due_late_fee, paid_prem_late_fee,
                            unadj_coll_amt, alt_due_amount, i_usr, i_dt
                           )
                    VALUES (v_payable_no, i.pgid, i.product_cd, '06',
                            '01', i.ben_party_cd, TRUNC (SYSDATE),
                            v_paidup_value, v_bonus_amt, v_loan_amt,
                            v_interest_amt, v_suspense_amt, v_premium_amt,
                            v_late_fee, v_payable_amt, i.maturity_date,
                            'PV', v_account_no, v_bank_cd, v_br_cd,
                            v_br_address, NVL (v_source_tax, 0),
                            NVL (v_prem_due_late_fee, 0), NVL (v_paid_prem_late_fee, 0),
                            NVL (v_unadj_coll_amt, 0), NVL(v_alt_due_amount, 0), p_user, SYSDATE
                           );

               COMMIT;
               v_cnt := v_cnt + 1;
               v_payable_amt := 0;
               v_paidup_value := 0;
            END IF;
         END IF;                          --End of loan recovery locking check
      END LOOP;

      p_process_cnt := v_cnt;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := 'pro_paidup_value: ' || SQLERRM;
   END pro_paidup_value;

/*============================================================================================================*/
/*============================================================================================================*/
--End of pro_paidup_value--
/*============================================================================================================*/
/*============================================================================================================*/
   PROCEDURE pro_anf_premium (
      p_pgid          IN       ins_p_proposal.pgid%TYPE,
      p_calc_date     IN       DATE,
      p_payable_no    IN       clm_claim_payable_gen.payable_no%TYPE,
      p_ded_amt       IN       NUMBER,             --Contain deductable amount
      p_user          IN       VARCHAR2,
      p_premium_amt   OUT      NUMBER,
      p_late_fee      OUT      NUMBER
   )
   IS
      /*Calculate total ANF premium and late fee*/
      v_premium_amt         NUMBER (15, 2)  := 0;
      v_date_from           DATE;
      v_date_to             DATE;
      v_late_fee            NUMBER (15, 2)  := 0;
      v_ded_late_fee        NUMBER (15, 2)  := 0;
      v_tot_late_fee        NUMBER (15, 2)  := 0;
      v_sl_no               NUMBER (5)      := 0;
      v_ded_amt             NUMBER (15, 2)  := 0;
      v_instl_amt           NUMBER (15, 2)  := 0;
      v_no_of_anf_loan      NUMBER (5)      := 0;
      v_no_of_anf_loan_yr   NUMBER (2)      := 0;
      v_anf_loan_amount     NUMBER (12, 2)  := 0;
      v_interest_amount     NUMBER (12, 2)  := 0;
      v_error               VARCHAR2 (2000);
      v_anf_error           VARCHAR2 (2000);

      CURSOR anf_premium
      IS
         SELECT d.loan_no, d.pgid,
                  d.installment_premium
                - NVL (b.tot_ded_anf_loan, 0) anf_premium,
                d.interest_amount - NVL (b.tot_ded_late_fee, 0) anf_interest,
                d.sl_no
           FROM ins_anf_loan_dtl d,
                (SELECT   x.demand_note_sl, SUM (x.ded_amt) tot_ded_amt,
                          SUM (x.tot_ded_late_fee) tot_ded_late_fee,
                          SUM (x.tot_ded_anf_loan) tot_ded_anf_loan
                     FROM (SELECT j.demand_note_sl, j.ded_amt,
                                  (CASE
                                      WHEN j.ded_nm = 'Late Fee'
                                         THEN j.ded_amt
                                      ELSE 0
                                   END
                                  ) tot_ded_late_fee,
                                  (CASE
                                      WHEN j.ded_nm = 'A.N.F Loan'
                                         THEN j.ded_amt
                                      ELSE 0
                                   END
                                  ) tot_ded_anf_loan
                             FROM clm_adjust_other_ded j) x
                 GROUP BY x.demand_note_sl) b
          WHERE d.pgid = p_pgid
            AND NVL (d.adjust_flag, '0') = '0'
            AND d.sl_no = b.demand_note_sl(+)
            AND (   (d.installment_premium + d.interest_amount) >
                                                                 b.tot_ded_amt
                 OR b.tot_ded_amt IS NULL
                );
   /*SELECT r.pgid, r.installment_premium, r.next_due_dt, r.installment_no
    FROM ins_prem_acc_receivable r
   WHERE r.pgid = p_pgid
     AND NOT EXISTS (SELECT 1
                       FROM clm_adjust_other_ded d
                      WHERE d.pgid = r.pgid)
     AND EXISTS (SELECT 1
                   FROM ins_proposal_auto_loan_dtl d
                  WHERE d.demand_note_sl = r.sl_no
                    AND d.payment_date IS NULL);*/
   BEGIN
      v_ded_amt := NVL (p_ded_amt, 0);

      IF NVL (v_ded_amt, 0) > 0
      THEN
         ---Chekc deductable amount
         pro_anf_loan_payable_info
                                 (p_pgid                   => p_pgid,
                                  p_appl_date              => p_calc_date,
                                  p_no_of_anf_loan         => v_no_of_anf_loan,
                                  p_no_of_anf_loan_yr      => v_no_of_anf_loan_yr,
                                  p_anf_loan_amount        => v_anf_loan_amount,
                                  p_interest_amount        => v_interest_amount,
                                  p_error                  => v_anf_error
                                 );

         IF v_anf_error IS NULL
         THEN
            IF NVL (v_anf_loan_amount, 0) > 0
               OR NVL (v_interest_amount, 0) > 0
            THEN
               SELECT NVL (MAX (sl_no), 0) + 1
                 INTO v_sl_no
                 FROM clm_adjust_other_ded
                WHERE pgid = p_pgid;

               IF v_ded_amt >= v_interest_amount
               THEN
                  v_ded_late_fee := v_interest_amount;
               ELSE
                  v_ded_late_fee := v_ded_amt;
               END IF;

               v_ded_amt := NVL (v_ded_amt, 0) - NVL (v_ded_late_fee, 0);

               INSERT INTO clm_adjust_other_ded
                           (pgid, sl_no, payable_no, ded_nm,
                            ded_amt, i_usr, i_dt
                           )
                    VALUES (p_pgid, v_sl_no + 1, p_payable_no, 'Late Fee',
                            v_ded_late_fee, p_user, SYSDATE
                           );

               IF v_ded_amt >= v_anf_loan_amount
               THEN
                  v_instl_amt := v_anf_loan_amount;
               ELSE
                  v_instl_amt := v_ded_amt;
               END IF;

               v_ded_amt := NVL (v_ded_amt, 0) - NVL (v_instl_amt, 0);

               INSERT INTO clm_adjust_other_ded
                           (pgid, sl_no, payable_no, ded_nm,
                            ded_amt, i_usr, i_dt
                           )
                    VALUES (p_pgid, v_sl_no, p_payable_no, 'A.N.F Loan',
                            ROUND (v_instl_amt, 2), p_user, SYSDATE
                           );

               p_premium_amt := v_instl_amt;
               p_late_fee := v_ded_late_fee;
            END IF;
         ELSE
            v_error := v_anf_error;
         END IF;
      ELSE
         p_premium_amt := 0;
         p_late_fee := 0;
      END IF;                                ---End if Chekc deductable amount
   EXCEPTION
      WHEN OTHERS
      THEN
         v_error := SQLERRM;
         NULL;
   END pro_anf_premium;

/*============================================================================================================*/
/*============================================================================================================*/
--End of pro_anf_premium--
/*============================================================================================================*/
/*============================================================================================================*/
   PROCEDURE pro_policy_bonus (
      p_pgid         IN       ins_p_proposal.pgid%TYPE,
      p_payable_no   IN       clm_claim_payable_gen.payable_no%TYPE,
      p_payable_dt   IN       DATE,
      p_user         IN       VARCHAR2,
      p_bonus_amt    OUT      NUMBER
   )
   IS
      /*Calculate policy bonus for the pgid*/
      v_bonus_exist         NUMBER                                       := 0;
      v_error               VARCHAR2 (4000);
      v_add_benefit         clm_product_claim_detl.additional_ben%TYPE;
      v_policy_age          NUMBER (5, 2)                                := 0;
      v_bonus_amt           NUMBER (12, 2)                               := 0;
      v_clm_cause_cd        clm_claim_cause.clm_cause_cd%TYPE;
      v_lien_payable_pct    NUMBER (5, 2)                                := 0;
      --Contain payable percentage if lien applicable
      -----
      v_applicable_on       CHAR (1);
      v_bonus_error         VARCHAR2 (200);
      v_bonus_yr            NUMBER (4);
-------------------------------
      v_anfl_cnt            NUMBER (4)                                   := 0;
      v_remaning_instl      NUMBER (4)                                   := 0;
      v_pay_mode_cd         ins_p_summery.pay_mode_cd%TYPE;
      v_option_cd           ins_p_summery.option_cd%TYPE;
      v_anf_bonus_amt       NUMBER (10)                                  := 0;
      v_last_paid_inst_no   ins_p_summery.last_paid_inst_no%TYPE;
      v_full_paid_yr        NUMBER (2)                                   := 0;
      v_tot_payable_yr      NUMBER (2)                                   := 0;
---------------------
      v_bon_calc_mess       VARCHAR2 (200);
      v_bon_calc_st         CHAR (1);
      v_bon_max_yr          NUMBER (4);
      ---------------------------
      v_no_of_anf_loan      NUMBER (5)      := 0;
      v_no_of_anf_loan_yr   NUMBER (2)      := 0;
      v_anf_loan_amount     NUMBER (12, 2)  := 0;
      v_interest_amount     NUMBER (12, 2)  := 0;
      v_anf_error           VARCHAR2 (2000);

      CURSOR cur_bonus
      IS
         SELECT b.bonus_receiving_yr, b.pgid, b.bonus_perc, b.bonus_amt, b.bonus_cd
           FROM ins_policy_bonus b
          WHERE pgid = p_pgid
            AND b.bonus_cd IN ('01', '02')
            AND NOT EXISTS (
                   SELECT 1
                     FROM clm_adjust_bonus p
                    WHERE p.pgid = b.pgid
                          AND p.bonus_yr = b.bonus_receiving_yr)
         UNION
         SELECT   MAX (b.bonus_receiving_yr), b.pgid, MAX (b.bonus_perc),
                  MAX (b.bonus_amt), '03' bonus_cd
             FROM ins_policy_bonus b
            WHERE pgid = p_pgid
              AND b.bonus_cd IN ('03')
              AND NOT EXISTS (
                     SELECT 1
                       FROM clm_adjust_bonus p
                      WHERE p.pgid = b.pgid
                        AND p.bonus_yr = b.bonus_receiving_yr)
         GROUP BY b.pgid;
   /*SELECT b.bonus_receiving_yr
         ,b.pgid
         ,b.bonus_perc
         ,b.bonus_amt
   FROM   ins_policy_bonus b
   WHERE  pgid = p_pgid
   AND    NOT EXISTS (SELECT 1
           FROM   clm_adjust_bonus p
           WHERE  p.pgid = b.pgid
           AND    p.bonus_yr = b.bonus_receiving_yr)
   UNION
   SELECT b.bonus_receiving_yr
         ,b.pgid
         ,b.bonus_perc
         ,b.bonus_amt
   FROM   ins_anf_policy_bonus b
   WHERE  pgid = p_pgid
   AND    NOT EXISTS (SELECT 1
           FROM   clm_adjust_bonus p
           WHERE  p.pgid = b.pgid
           AND    p.bonus_yr = b.bonus_receiving_yr)*/
   BEGIN
      /* -------Chekc For Bonus Applicable Or Not------- */
      BEGIN
         SELECT NVL (d.additional_ben, '03'), d.clm_cause_cd
           INTO v_add_benefit, v_clm_cause_cd
           FROM clm_product_claim_detl d
          WHERE (d.sl_no,
                 d.product_cd,
                 d.clm_cause_cd,
                 d.clm_detl_cd,
                 d.ben_party_cd
                ) IN (
                   SELECT c.sl_no, c.product_cd, c.clm_cause_cd,
                          c.clm_detl_cd, c.ben_party_cd
                     FROM clm_payable_calc_detl c
                    WHERE c.payable_no = p_payable_no)
            AND d.additional_ben = '01';
      EXCEPTION
         WHEN OTHERS
         THEN
            --raise_application_error (-20018,'Bonus Applicable '||p_payable_no||'='||sqlerrm);
            v_add_benefit := '03';
            NULL;
      END;

/***************************************************/
--v_add_benefit    := '01';
      IF NVL (LPAD (v_add_benefit, 2, 0), '03') = '01'
      THEN
         --Bonus Applicable
         ---Call procedure to calculated uncalculated bonus---
         /*pro_pending_policy_bonus(p_pgid,
          'System',
          v_error
         );*/

         ---------------------------------------
         SELECT s.option_cd, s.pay_mode_cd, s.last_paid_inst_no,
                TO_CHAR (s.last_paid_date, 'rrrr')
           INTO v_option_cd, v_pay_mode_cd, v_last_paid_inst_no,
                v_bonus_yr
           FROM ins_p_summery s
          WHERE s.pgid = p_pgid;

---------------------------------------
/*SELECT TO_CHAR (s.last_paid_date, 'rrrr')
 INTO v_bonus_yr
 FROM ins_p_summery s
WHERE s.pgid = p_pgid;*/
         IF v_clm_cause_cd = '01'
         THEN
            v_applicable_on := '1';
         ELSIF v_clm_cause_cd = '02'
         THEN
            v_applicable_on := '2';
         ELSIF v_clm_cause_cd = '06'
         THEN
            v_applicable_on := '3';
         END IF;

         /*pro_cal_policy_bonus(p_pgid          => p_pgid,
         p_bonus_yr      => v_bonus_yr,
         p_usr           => p_user,
         p_applicable_on => v_applicable_on,
         --(1=Death Claim,2=Matured Calim,3=Surrender,4=Policy Loan) Interime+Reversionary Bonus,5=Only Reversionary
         p_output => v_bonus_error);*/
         FOR i IN (SELECT bonus_cd
                     FROM ins_bonus_type)
         LOOP
            SELECT MAX (a.bonus_yr)
              INTO v_bon_max_yr
              FROM ins_pol_bonus_circular c, ins_pol_bonus_applicable a
             WHERE a.circular_id = c.circular_id
               AND c.cal_status = '0'
               AND a.status = '1'
               AND a.bonus_cd = i.bonus_cd;

/*pro_policy_bonus_cal(p_pgid              => p_pgid
                    ,p_bonus_yr          => v_bon_max_yr
                    ,p_bonus_cd          => i.bonus_cd
                    ,p_applicable_on     => NULL
                    ,p_no_of_anf_loan_yr => 0
                    ,p_usr               => p_user
                    ,p_output            => v_bon_calc_mess
                    ,p_process_st        => v_bon_calc_st);*/
--==========================================--
            IF v_option_cd IN ('1', '2')                   --ANF Application--
            THEN
               v_anfl_cnt := 0;
               v_full_paid_yr := 0;
               v_tot_payable_yr := 0;

               /*SELECT FLOOR (  COUNT (a.pgid)
                             / DECODE (v_pay_mode_cd,
                                       '01', 1,
                                       '02', 2,
                                       '03', 4,
                                       '04', 12,
                                       1
                                      )
                            )
                 INTO v_anfl_cnt
                 FROM ins_anf_loan_dtl a
                WHERE a.pgid = p_pgid
                  AND NVL (a.adjust_flag, '0') = 0
                  AND NOT EXISTS (
                          SELECT 1
                            FROM clm_adjust_other_ded d
                           WHERE d.demand_note_sl = a.sl_no
                                 AND d.pgid = a.pgid);

               IF v_anfl_cnt = 0 THEN
                  SELECT COUNT(d.payable_no)/2
                    INTO v_anfl_cnt
                    FROM clm_adjust_other_ded d
                   WHERE d.pgid = p_pgid
                     AND d.payable_no = p_payable_no;
               END IF;*/ --Musha on 09.01.2017 and add the below part
               
               pro_anf_loan_payable_info
                                 (p_pgid                   => p_pgid,
                                  p_appl_date              => p_payable_dt,
                                  p_no_of_anf_loan         => v_no_of_anf_loan,
                                  p_no_of_anf_loan_yr      => v_no_of_anf_loan_yr,
                                  p_anf_loan_amount        => v_anf_loan_amount,
                                  p_interest_amount        => v_interest_amount,
                                  p_error                  => v_anf_error
                                 );
               
               v_anfl_cnt := NVL(v_no_of_anf_loan_yr, 0);
               
               --v_anfl_cnt := 1;
               /*
               IF v_option_cd = '2'
               THEN
                  IF v_pay_mode_cd = '01'
                  THEN                     
                     v_remaning_instl := 0;
                  ELSIF v_pay_mode_cd = '02'
                  THEN                    
                     v_remaning_instl := MOD (v_last_paid_inst_no, 2);
                  ELSIF v_pay_mode_cd = '03'
                  THEN                     
                     v_remaning_instl := MOD (v_last_paid_inst_no, 4);
                  ELSIF v_pay_mode_cd = '04'
                  THEN                     
                     v_remaning_instl := MOD (v_last_paid_inst_no, 12);
                  END IF;

                  v_anfl_cnt := v_anfl_cnt + v_remaning_instl;
               END IF;*/ --Musha no 05.04.2016
            --p_applicable_on:1=Death Claim,2=Matured Calim
            --pro_anf_loan_policy_bonus(p_pgid           => p_pgid,
            --p_no_of_anf_loan => v_anfl_cnt,
            --p_applicable_on  => v_applicable_on,
            --p_user           => p_user,
            --p_anf_bonus_amt  => v_anf_bonus_amt);--Musha on 13-07-2014
            END IF;

---=======================================================--
            pro_policy_bonus_cal_setl (p_pgid                    => p_pgid,
                                       p_bonus_yr                => NULL
                                                                        --,p_bonus_cd          => i.bonus_cd
            ,
                                       p_applicable_on           => v_applicable_on,
                                       p_no_of_anf_loan_yr       => v_anfl_cnt,
                                       p_usr                     => p_user,
                                       p_irg_bonus_bar_date      => p_payable_dt,
                                       p_output                  => v_bon_calc_mess,
                                       p_process_st              => v_bon_calc_st
                                      );
         END LOOP;

-----------------------------------------------------

         ---CUT ANF LOAN INSTLNO--

         --==========================================--
         FOR i IN cur_bonus
         LOOP
            v_bonus_amt := 0;

            IF NVL (i.bonus_amt, 0) > 0
            THEN
               v_bonus_amt := ROUND (i.bonus_amt, 2);

               /*******Lien Consideration For Death Claim*******/
               /*IF v_clm_cause_cd = '01'
               THEN
                  BEGIN
                     SELECT   s.last_paid_inst_no
                            / (s.policy_installment / s.term)
                       INTO v_policy_age
                       FROM ins_p_summery s
                      WHERE s.pgid = i.pgid;

------------------------------------------------
                     SELECT (100 - l.lien_percentage) lien_payable_pct
                       INTO v_lien_payable_pct
                       FROM ins_uw_lien l, clm_application p
                      WHERE l.pgid = p.pgid
                        AND l.party_cd = p.death_part_cd
                        AND l.party_id = p.death_party_id
                        AND l.pgid = i.pgid
                        AND l.lien_tp_cd <> '03'
                        AND v_policy_age BETWEEN l.lien_year_fr AND l.lien_year_to;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_lien_payable_pct := 0;
                        NULL;
                  END;

                  IF NVL (v_lien_payable_pct, 0) > 0
                  THEN
                     v_bonus_amt := v_bonus_amt * (v_lien_payable_pct / 100);
                  END IF;
               END IF;*/----Musha on 12.11.2015 because of lien not consider for bonus

               /****End of Lien Consideration For Death Claim****/
               INSERT INTO clm_adjust_bonus
                           (pgid, bonus_yr, payable_no,
                            bonus_amt, bonus_rate, bonus_cd, 
                            i_usr, i_dt
                           )
                    VALUES (i.pgid, i.bonus_receiving_yr, p_payable_no,
                            v_bonus_amt, ROUND (i.bonus_perc, 2), i.bonus_cd,
                            p_user, SYSDATE
                           );
            END IF;
         END LOOP;

         SELECT ROUND (SUM (bonus_amt), 2)
           INTO p_bonus_amt
           FROM clm_adjust_bonus
          WHERE payable_no = p_payable_no;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         --raise_application_error (-20017,'Bonus Calculation'||sqlerrm);
         NULL;
   END pro_policy_bonus;

/*============================================================================================================*/
/*============================================================================================================*/
--End of pro_policy_bonus--
/*============================================================================================================*/
/*============================================================================================================*/
   PROCEDURE pro_policy_loan (
      p_pgid           IN       ins_p_proposal.pgid%TYPE,
      p_payable_no     IN       clm_claim_payable_gen.payable_no%TYPE,
      p_payable_dt     IN       DATE,
      p_ded_amt        IN       NUMBER,            --Contain deductable amount
      p_user           IN       VARCHAR2,
      p_loan_amt       OUT      NUMBER,
      p_interest_amt   OUT      NUMBER
   )
   IS
      /*Calculate loan amount for the pgid*/
      v_node_value             VARCHAR2 (30);
      v_pgid                   ins_p_proposal.pgid%TYPE;
      v_loan_no                pol_loan_summary.loan_no%TYPE;
      v_office_cd              hrm_office.office_cd%TYPE;
      v_sl_no                  clm_adjust_loan.sl_no%TYPE;
      v_loan_amt               NUMBER (12, 2);
      v_interest_amt           NUMBER (12, 2);
      v_error                  VARCHAR2 (2000);
----------------------------
      v_loan_sl_no             NUMBER;
      v_due_interest_amt       NUMBER;
      v_due_principle_amt      NUMBER;
      v_sett_interest_amt      NUMBER (10, 2);
      v_installment_no         NUMBER (3);
      v_schedule_type          CHAR (1);
      v_output                 VARCHAR2 (200);
      v_ded_amt                NUMBER (10, 2);
      v_loan_count             NUMBER (3);
-----------
      v_loan_reco_locking      NUMBER (1);
      v_loan_rec_loc_err       VARCHAR2 (100);
-----------
      v_max_instl_date         DATE;
      v_next_schedule_dt       DATE;
      v_pay_mode_cd            ins_p_summery.pay_mode_cd%TYPE;
      v_schd_output            VARCHAR2 (200);
-----------
      err_due_loan_not_found   EXCEPTION;
   BEGIN
      p_loan_amt := 0;
      p_interest_amt := 0;
      v_loan_count := 0;

      IF NVL (p_ded_amt, 0) > 0
      THEN
         --Find user office code--
         BEGIN
            SELECT e.office_cd
              INTO v_office_cd
              FROM security.sec_user_info e
             WHERE UPPER (e.user_nm) = UPPER (p_user);
         EXCEPTION
            WHEN OTHERS
            THEN
               v_office_cd := '07001';
         END;

         --End of finding user office code--

         --Calculate the Due interest amount and Due Principle amount
         BEGIN
            SELECT s.sl_no, s.loan_no, a.pay_mode_cd
              INTO v_loan_sl_no, v_loan_no, v_pay_mode_cd
              FROM pol_loan_summary s, pol_loan_application a
             WHERE s.pgid = p_pgid
               AND s.loan_status = '1'
               AND s.pgid = a.pgid
               AND s.sl_no = a.sl_no
               AND s.cheque_date <= p_payable_dt;

            --Call function for loan recovery locking--
            IF fun_loan_reco_locking (p_pgid, v_loan_sl_no,
                                      v_loan_rec_loc_err)
            THEN
               v_loan_reco_locking := 1;                        --Lock exists
            ELSE
               v_loan_reco_locking := 0;                            --No lock
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               RAISE err_due_loan_not_found;
         END;

         IF v_loan_reco_locking = 0
         THEN
            --No lock in loan recovery
            IF v_loan_sl_no IS NOT NULL
            THEN
               --loan schedule exist
               pro_loan_int_amount
                                  (p_pgid                  => p_pgid,
                                   p_sl_no                 => v_loan_sl_no,
                                   p_int_cal_date          => p_payable_dt,
                                   p_call_from             => '3',
                                   p_principle_amount      => v_due_principle_amt,
                                   p_cur_int_amount        => v_due_interest_amt,
                                   p_sett_int_amount       => v_sett_interest_amt,
                                   p_installment_no        => v_installment_no,
                                   p_process_st            => v_output
                                  );

               IF v_output = 'success'
               THEN
                  v_ded_amt := p_ded_amt;

                  IF v_ded_amt >= NVL (v_sett_interest_amt, 0)
                  THEN
                     v_interest_amt := NVL (v_sett_interest_amt, 0);
                     v_ded_amt := v_ded_amt - NVL (v_sett_interest_amt, 0);
                  ELSE
                     v_interest_amt := v_ded_amt;
                     v_ded_amt := 0;
                  END IF;

                  IF     NVL (v_ded_amt, 0) > 0
                     AND v_ded_amt >= NVL (v_due_principle_amt, 0)
                  THEN
                     v_loan_amt := v_due_principle_amt;
                     v_ded_amt := v_ded_amt - NVL (v_due_principle_amt, 0);
                  ELSE
                     v_loan_amt := v_ded_amt;
                     v_ded_amt := 0;
                  END IF;
               ELSE
                  v_loan_amt := 0;
                  v_interest_amt := 0;
               END IF;
            END IF;                                        --End of loan exist

--=============--
            IF NVL (v_loan_amt, 0) > 0 OR NVL (v_interest_amt, 0) > 0
            THEN
               SELECT NVL (MAX (d.sl_no), 0) + 1
                 INTO v_sl_no
                 FROM clm_adjust_loan d
                WHERE d.pgid = p_pgid;

               --Insert data into table--
               INSERT INTO clm_adjust_loan
                           (pgid, sl_no, payable_no, loan_tp_cd, loan_amt,
                            interest_amt, loan_no, i_usr, i_dt
                           )
                    VALUES (p_pgid, v_sl_no, p_payable_no, '01', v_loan_amt,
                            v_interest_amt, v_loan_no, p_user, SYSDATE
                           );

               p_loan_amt := v_loan_amt;
               p_interest_amt := v_interest_amt;
            END IF;
         ELSE
            p_loan_amt := 0;
            p_interest_amt := 0;
         END IF;
      ELSE
         p_loan_amt := 0;
         p_interest_amt := 0;
      END IF;
   EXCEPTION
      WHEN err_due_loan_not_found
      THEN
         NULL;
      WHEN OTHERS
      THEN
         NULL;
   END pro_policy_loan;

/*============================================================================================================*/
/*============================================================================================================*/
--End of pro_policy_loan--
/*============================================================================================================*/
/*============================================================================================================*/
   FUNCTION fun_adv_clm_stat (p_pgid ins_p_proposal.pgid%TYPE)
      RETURN VARCHAR2
   IS
      /******************************************************
        Find application for advance payment exists or not
        if exists and approved then claim will calculate
        durint approval otherwise claim will calculate
        from the general process
      ******************************************************/
      v_appl_cnt      NUMBER (2)   := 0;
      v_appl_status   VARCHAR2 (1) := '0';
   BEGIN
      --Application exis but not approved--
      SELECT COUNT (c.pgid)
        INTO v_appl_cnt
        FROM clm_adv_payment_appl c
       WHERE c.approve_by IS NULL AND c.pgid = p_pgid;

      IF v_appl_cnt = 0
      THEN
         v_appl_status := '0';                               --No Application
      ELSIF v_appl_cnt >= 1
      THEN
         v_appl_status := '1';                                      --Applied
      END IF;

      --Application exis and approved--
      SELECT COUNT (c.pgid)
        INTO v_appl_cnt
        FROM clm_adv_payment_appl c
       WHERE c.approve_by IS NOT NULL
         AND c.pgid = p_pgid
         AND NOT EXISTS (SELECT 1
                           FROM clm_claim_payable_gen g
                          WHERE g.appl_no = c.appl_no);

      IF v_appl_cnt >= 1
      THEN
         v_appl_status := '2';                         --Approced Application
      END IF;

      RETURN v_appl_status;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_appl_status := 0;
         RETURN v_appl_status;
   END fun_adv_clm_stat;
   /*============================================================================================================*/
   /*============================================================================================================*/
     --End of fun_adv_clm_stat--
   /*============================================================================================================*/
   /*============================================================================================================*/

   /*============================================================================================================*
      Add by Musha on 15.07.2018
      Generate extra bonus if total claim including regular bonus 
      is less than total paid premium  
    ============================================================================================================*/
    PROCEDURE pro_extra_bonus_calc (
       p_pgid              IN       ins_p_proposal.pgid%TYPE,
       p_payable_no        IN       clm_claim_payable_gen.payable_no%TYPE,
       p_payable_dt        IN       DATE,
       p_cur_pay_amt       IN       NUMBER,
       p_prem_type         IN       NUMBER
                                  -- 1 for Life Premium, 2 for Installment Premium
                                          ,
       p_user              IN       VARCHAR2,
       p_extra_bonus_amt   OUT      NUMBER,
       p_error             OUT      VARCHAR2                --Return error message
    )
    IS
       v_tot_deposit_amt   NUMBER (12, 2)                      := 0;
       v_tot_paid_amt      NUMBER (12, 2)                      := 0;
       v_anf_loan_amt      clm_adjust_other_ded.ded_amt%TYPE;
       v_sum_assured       ins_p_summery.sum_assured%TYPE;
       v_product_cd        ins_product.product_cd%TYPE;
       v_policy_age        NUMBER (12, 2)                      := 0;
       v_policy_status     ins_p_summery.policy_status%TYPE;
       v_sys_config_st     NUMBER (1);
       v_config_message    VARCHAR2(2000);
       v_add_benefit         clm_product_claim_detl.additional_ben%TYPE;
    BEGIN
      /* -------Chekc For Bonus Applicable Or Not------- */
      BEGIN
         SELECT NVL (d.additional_ben, '03')
           INTO v_add_benefit
           FROM clm_product_claim_detl d
          WHERE (d.sl_no,
                 d.product_cd,
                 d.clm_cause_cd,
                 d.clm_detl_cd,
                 d.ben_party_cd
                ) IN (
                   SELECT c.sl_no, c.product_cd, c.clm_cause_cd,
                          c.clm_detl_cd, c.ben_party_cd
                     FROM clm_payable_calc_detl c
                    WHERE c.payable_no = p_payable_no)
            AND d.additional_ben = '01';
      EXCEPTION
         WHEN OTHERS
         THEN
            v_add_benefit := '03';
            NULL;
      END;

      IF NVL (LPAD (v_add_benefit, 2, 0), '03') = '01'
      THEN
           ---Find configuration status---
           pro_get_sys_config_st (
                   p_pgid            => NULL,
                   p_config_id       => 37,
                   p_sys_config_st   => v_sys_config_st,
                   p_upd_message     => v_config_message
                );
           
           IF v_sys_config_st = 0 THEN
               SELECT DECODE (p_prem_type,
                              1, s.life_premium * last_paid_inst_no,
                              s.installment_premium * last_paid_inst_no
                             ),
                      s.sum_assured, s.product_cd,
                      FLOOR (MONTHS_BETWEEN (s.last_paid_date, s.comm_date) / 12)
                                                                               policy_age,
                      s.policy_status
                 INTO v_tot_deposit_amt,
                      v_sum_assured, v_product_cd,
                      v_policy_age,
                      v_policy_status
                 FROM ins_p_summery s
                WHERE s.pgid = p_pgid;

               --ANF Loan add with total deposit amount---
               BEGIN
                  SELECT NVL (SUM (d.ded_amt), 0)
                    INTO v_anf_loan_amt
                    FROM clm_adjust_other_ded d
                   WHERE d.pgid = p_pgid;

                  v_tot_deposit_amt := NVL (v_tot_deposit_amt, 0)
                                       + NVL (v_anf_loan_amt, 0);
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_anf_loan_amt := 0;
               END;

               SELECT NVL (SUM (paid_amt), 0)
                 INTO v_tot_paid_amt
                 FROM (SELECT   NVL (c.gross_payable_amt, 0)
                              + NVL (bonus_payable, 0) paid_amt
                         FROM clm_claim_payable_gen c
                        WHERE c.pgid = p_pgid
                       UNION ALL
                       SELECT NVL (commutation_amt, 0)
                         FROM clm_commutation_info c
                        WHERE c.pgid = p_pgid);

               v_tot_paid_amt := v_tot_paid_amt + p_cur_pay_amt;

               IF v_tot_paid_amt < v_tot_deposit_amt
               THEN
                  p_extra_bonus_amt := v_tot_deposit_amt - v_tot_paid_amt;

                  ---Insert policy bonus table
                  INSERT INTO ins_policy_bonus
                              (bonus_receiving_yr, bonus_allocation_dt,
                               pgid, product_cd, sum_assured, policy_age, bonus_perc,
                               bonus_amt,
                               applicable_on, bonus_cd, i_usr,
                               i_dt
                              )
                       VALUES (TO_NUMBER (TO_CHAR (p_payable_dt, 'RRRR')), p_payable_dt,
                               p_pgid, v_product_cd, v_sum_assured, v_policy_age, 0,
                               p_extra_bonus_amt,
                               DECODE (v_policy_status, '03', '3', '2'), '04', p_user,
                               SYSDATE
                              );

                  ---Insert claim bonus table
                  INSERT INTO clm_adjust_bonus
                              (pgid, bonus_yr,
                               payable_no, bonus_amt, bonus_rate, bonus_cd, i_usr, i_dt
                              )
                       VALUES (p_pgid, TO_NUMBER (TO_CHAR (p_payable_dt, 'RRRR')),
                               p_payable_no, p_extra_bonus_amt, 0, '04', p_user, SYSDATE
                              );
               ELSE
                  p_extra_bonus_amt := 0;
               END IF;
           ELSE
               p_extra_bonus_amt := 0;
           END IF;
      ELSE
           p_extra_bonus_amt := 0;
      END IF;
    EXCEPTION
       WHEN OTHERS
       THEN
          p_extra_bonus_amt := 0;
          p_error := SQLERRM;
    END pro_extra_bonus_calc;
END pkg_clm_cal;
/


--
-- PKG_COLL_CFO_REPORT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_coll_cfo_report
IS
   FUNCTION fun_collection_info (                 --p_date_fr            DATE,
                                                  --p_date_to            DATE,
   p_descendant_flag     VARCHAR2,
   p_emp_gid              VARCHAR2 ,
   p_office_cd           VARCHAR2)
      RETURN tp_coll_tab
      PIPELINED
   IS
      v_coll_rec   tp_coll_rec;
   BEGIN
      FOR i
      IN (SELECT   c.receive_id,
                   c.pgid,
                   FUN_INS_PGID_TO_PROPOSAL_NO (c.pgid) Proposal_no,
                   FUN_INS_PGID_TO_POLICY_NO(c.pgid) policy_no,
                   c.fpr_date,
                   c.active_office_cd,
                   F_OFFICE (c.active_office_cd) OFF_NM,
                   e.emp_id,
                   e.emp_file_no,
                   e.emp_nm_eng,
                   -- c.coll_from,
                   c.installment_no,
                   c.receive_dt,
                   c.receipt_no,
                   c.amount_type,
                   --c.collection_type,
                   DECODE (c.receive_mode,
                           '1', 'Cash',
                           '2', 'Cheque',
                           '3', 'DD',
                           '4', 'Others',
                           '5', 'I-life',
                           'BM')
                      receive_mode,
                   c.first_prem,
                   c.deffered,
                   c.second_yr,
                   c.renewal,
                   c.due_date,
                   f_bank (c.to_bank_cd) bank_name,
                   c.to_acc_no account_no,
                   c.trans_dt
            FROM   ACC_COLL_SUMMERY_CFO C, HRM_EMPLOYEE E
           WHERE   C.CASHIER_GID = E.EMP_GID
                   AND C.CASHIER_GID = NVL (p_emp_gid, C.CASHIER_GID)
                   /* AND C.receive_dt BETWEEN NVL (p_date_fr, C.receive_dt)
                                         AND  NVL (p_date_to, receive_dt)  */
                   AND ( (NVL (p_descendant_flag, '0') = '0'
                          AND C.active_office_cd =
                                NVL (p_office_cd, C.active_office_cd))
                        OR (NVL (p_descendant_flag, '0') = '1'
                            AND C.active_office_cd IN
                                     (    SELECT   office_cd
                                            FROM   hrm_office_setup
                                      START WITH   office_cd = p_office_cd
                                      CONNECT BY   PRIOR office_cd =
                                                      control_office_cd))))
      LOOP
         -- v_coll_rec.receive_id := i.receive_id;
         -- v_coll_rec.pgid := i.pgid;
         v_coll_rec.Proposal_no := i.Proposal_no;
         v_coll_rec.policy_no := i.policy_no;
         v_coll_rec.fpr_date := i.fpr_date;
         v_coll_rec.active_office_cd := i.active_office_cd;
         v_coll_rec.OFF_NM := i.OFF_NM;
         v_coll_rec.emp_id := i.emp_id;
         v_coll_rec.emp_file_no := i.emp_file_no;
         v_coll_rec.emp_nm_eng := i.emp_nm_eng;
         v_coll_rec.installment_no := i.installment_no;
         v_coll_rec.receive_dt := i.receive_dt;
         v_coll_rec.receipt_no := i.receipt_no;
         v_coll_rec.amount_type := i.amount_type;
         v_coll_rec.receive_mode := i.receive_mode;
         v_coll_rec.first_prem := i.first_prem;
         v_coll_rec.deffered := i.deffered;
         v_coll_rec.second_yr := i.second_yr;
         v_coll_rec.renewal := i.renewal;
         v_coll_rec.due_date := i.due_date;
         v_coll_rec.bank_name := i.bank_name;
         v_coll_rec.account_no := i.account_no;
         v_coll_rec.trans_dt := i.trans_dt;

         PIPE ROW (v_coll_rec);
      END LOOP;
   END;
END pkg_coll_cfo_report;
/


--
-- PKG_COMMISSION_REPORT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_commission_report
IS
   --- 1. Employee Source Tax Statement ---
   FUNCTION fun_com_emp_source_tax (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_type_cd      IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: Employee Type
      p_emp_id           IN hrm_employee.emp_id%TYPE,
      -- Parameter:Office Code
      p_bill_no_fm       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter:Office Code
      p_bill_no_to       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter:Office Code
      p_bill_date_fm     IN DATE,
      -- Parameter:Office Code
      p_bill_date_to     IN DATE,
      -- Parameter:Office Code
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Parameter:Office Code
      p_descendant_off   IN VARCHAR2
   -- IF 1 Then consider descend office
   )
      RETURN com_emp_source_tax_tab
      PIPELINED
   AS
      l_com_bill   com_emp_source_tax_row;
   BEGIN
      FOR i
      IN (  SELECT   emp_id,
                     idra_cd,
                     agent_nm,
                     desig_nm,
                     desig_cd,
                     office_cd,
                     f_office (fun_find_service_off (office_cd)) service_off,
                     office_add1,
                     office_nm,
                     bill_no,
                     comm_amt,
                     initial_comm_amt,
                     initial_com_return,
                     tax_amt,
                     comm_after_tax,
                     bill_date,
                     remarks,
                     ins_tp_cd,
                     premium_amt,
                     agent_nm || ' [ ' || emp_id || ' ] ' employee_nm,
                     office_cd || ' , ' || office_nm office,
                     f_in_word (comm_amt) com_aftr_word,
                     f_in_word (tax_amt) s_tax_word,
                     f_in_word (comm_after_tax) aftr_tax_word,
                     f_in_word (premium_amt) prem_amt_word
              FROM   (  SELECT   a.agent_id emp_id,
                                 f_agent_idra_cd (a.agent_id) idra_cd,
                                 f_agent_nm (a.agent_id) agent_nm,
                                 'FA' desig_nm,
                                 '05' desig_cd,
                                 a.office_cd,
                                 o.office_add1,
                                 o.office_nm,
                                 a.bill_no,
                                 SUM (b.gross_bill_amt) comm_amt,
                                 SUM (b.comm_ded_amt) initial_comm_amt,
                                 SUM(  NVL (b.paid_interest_amt, 0)
                                     + NVL (b.paid_ded_amount, 0)
                                     + NVL (b.um_paid_interest_amt, 0)
                                     + NVL (b.um_paid_ded_amount, 0)
                                     + NVL (b.bm_paid_interest_amt, 0)
                                     + NVL (b.bm_paid_ded_amount, 0))
                                    initial_com_return,
                                 ROUND ( (SUM (b.gross_bill_amt) * 5) / 100, 2)
                                    tax_amt,
                                 SUM (b.net_bill_amt) comm_after_tax,
                                 a.bill_date,
                                 a.remarks,
                                 a.ins_tp_cd,
                                 SUM(DECODE (
                                        t.cal_based_on,
                                        '6',
                                        s.life_premium,
                                        '7',
                                        (  NVL (s.life_premium, 0)
                                         + NVL (s.suppl_ben_premium, 0)
                                         + NVL (s.suppl_product_premium, 0)),
                                        '8',
                                        (NVL (s.suppl_ben_premium, 0)
                                         + NVL (s.suppl_product_premium, 0)),
                                        s.installment_premium
                                     ))
                                    premium_amt
                          FROM   com_agent_com_bill_mst a,
                                 com_agent_com_bill_dtl b,
                                 --ins_prem_acc_receivable c,
                                 ins_p_summery s,
                                 com_earn_tp t,
                                 hrm_office o
                         WHERE       a.bill_no = b.bill_no
                                 --AND b.pgid = c.pgid
                                 --AND b.prem_due_dt = c.next_due_dt
                                 AND a.office_cd = o.office_cd
                                 AND b.pgid = s.pgid
                                 AND b.earning_cd = t.earning_cd
                                 AND a.agent_id = NVL (p_emp_id, a.agent_id)
                                 AND a.bill_no BETWEEN NVL (p_bill_no_fm,
                                                            a.bill_no)
                                                   AND  NVL (p_bill_no_to,
                                                             a.bill_no)
                                 AND a.bill_date BETWEEN NVL (p_bill_date_fm,
                                                              a.bill_date)
                                                     AND  NVL (p_bill_date_to,
                                                               a.bill_date)
                                 AND ( (NVL (p_descendant_off, '0') = '0'
                                        AND a.office_cd =
                                              NVL (p_office_cd, a.office_cd))
                                      OR (NVL (p_descendant_off, '0') = '1'
                                          AND a.office_cd IN
                                                   (    SELECT   office_cd
                                                          FROM   hrm_office_setup
                                                    START WITH   office_cd =
                                                                    p_office_cd
                                                    CONNECT BY   PRIOR office_cd =
                                                                    control_office_cd)))
                      GROUP BY   a.agent_id,
                                 a.office_cd,
                                 a.bill_no,
                                 a.bill_date,
                                 a.remarks,
                                 a.ins_tp_cd,
                                 o.office_cd,
                                 o.office_add1,
                                 o.office_nm
                      UNION
                        SELECT   f_emp_id (a.emp_gid) emp_id,
                                 NULL idra_cd,
                                 f_emp_nm (a.emp_gid) agent_nm,
                                 f_emp_type_nm (a.emp_gid) desig_nm,
                                 f_emp_type_cd (a.emp_gid) desig_cd,
                                 a.office_cd,
                                 o.office_add1,
                                 o.office_nm,
                                 a.bill_no,
                                 SUM (b.gross_bill_amt) comm_amt,
                                 SUM (b.comm_ded_amt) initial_comm_amt,
                                 SUM (0) initial_com_return,
                                 ROUND ( (SUM (b.gross_bill_amt) * 5) / 100, 2)
                                    tax_amt,
                                 SUM (b.net_bill_amt) comm_after_tax,
                                 a.bill_date,
                                 a.remarks,
                                 a.ins_tp_cd,
                                 SUM (c.installment_premium) premium_amt
                          FROM   com_emp_com_bill_mst a,
                                 com_emp_com_bill_dtl b,
                                 ins_prem_acc_receivable c,
                                 hrm_office o
                         WHERE       a.bill_no = b.bill_no
                                 AND b.pgid = c.pgid
                                 AND b.prem_due_dt = c.next_due_dt
                                 AND a.office_cd = o.office_cd
                                 AND a.emp_gid = NVL (p_emp_id, a.emp_gid)
                                 AND a.bill_no BETWEEN NVL (p_bill_no_fm,
                                                            a.bill_no)
                                                   AND  NVL (p_bill_no_to,
                                                             a.bill_no)
                                 AND a.bill_date BETWEEN NVL (p_bill_date_fm,
                                                              a.bill_date)
                                                     AND  NVL (p_bill_date_to,
                                                               a.bill_date)
                                 AND ( (NVL (p_descendant_off, '0') = '0'
                                        AND a.office_cd =
                                              NVL (p_office_cd, a.office_cd))
                                      OR (NVL (p_descendant_off, '0') = '1'
                                          AND a.office_cd IN
                                                   (    SELECT   office_cd
                                                          FROM   hrm_office_setup
                                                    START WITH   office_cd =
                                                                    p_office_cd
                                                    CONNECT BY   PRIOR office_cd =
                                                                    control_office_cd)))
                      GROUP BY   a.emp_gid,
                                 a.office_cd,
                                 a.bill_no,
                                 a.bill_date,
                                 a.remarks,
                                 a.ins_tp_cd,
                                 o.office_add1,
                                 o.office_nm)
             WHERE   ins_tp_cd = NVL (p_ins_tp_cd, ins_tp_cd)
                     AND (p_emp_type_cd IS NULL
                          OR (p_emp_type_cd IS NOT NULL
                              AND desig_cd = p_emp_type_cd))
          ORDER BY   office_cd, desig_cd)
      LOOP
         l_com_bill.agent_nm := i.agent_nm;
         l_com_bill.emp_id := i.emp_id;
         l_com_bill.idra_cd := i.idra_cd;
         l_com_bill.office_cd := i.office_cd;
         l_com_bill.office_add1 := i.office_add1;
         l_com_bill.office_name := i.office_nm;
         l_com_bill.service_off := i.service_off;
         l_com_bill.desig_nm := i.desig_nm;
         l_com_bill.desig_cd := i.desig_cd;
         l_com_bill.bill_no := i.bill_no;
         l_com_bill.comm_amt := i.comm_amt;
         l_com_bill.initial_comm_amt := i.initial_comm_amt;
         l_com_bill.initial_com_return := i.initial_com_return;
         l_com_bill.tax_amt := i.tax_amt;
         l_com_bill.comm_after_tax := i.comm_after_tax;
         l_com_bill.bill_date := i.bill_date;
         l_com_bill.remarks := i.remarks;
         l_com_bill.ins_tp_cd := i.ins_tp_cd;
         l_com_bill.premium_amt := i.premium_amt;
         l_com_bill.employee_nm := i.employee_nm;
         l_com_bill.office := i.office;
         l_com_bill.com_aftr_word := i.com_aftr_word;
         l_com_bill.s_tax_word := i.s_tax_word;
         l_com_bill.aftr_tax_word := i.aftr_tax_word;
         l_com_bill.prem_amt_word := i.prem_amt_word;
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_com_emp_source_tax;

   --- 2. Employee Commission Bill Summary ---
   FUNCTION fun_com_fa_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_type_cd      IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: Employee Type
      p_bill_no_fm       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter: Bil No TFrom
      p_bill_no_to       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter: Bill No To
      p_bill_date_fm     IN DATE,
      -- Parameter: Bill Date From
      p_bill_date_to     IN DATE,
      -- Parameter: Bill Date To
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Parameter:Office Code
      p_descendant_off   IN VARCHAR2
   -- IF 1 Then consider descend office
   )
      RETURN com_fa_com_bill_info_tab
      PIPELINED
   AS
      l_com_bill   com_fa_com_bill_info_row;
   BEGIN
      FOR i
      IN (  SELECT   agent_nm,
                     idra_cd,
                     emp_id,
                     office_cd,
                     f_office (office_cd) office_name,
                     f_office (fun_find_service_off (office_cd)) service_off,
                     emp_type_nm,
                     emp_type_cd,
                     frist_yr_prem,
                     second_yr_prem,
                     third_yr_prem,
                     frist_yr_comm,
                     second_yr_comm,
                     third_yr_comm,
                     tot_prem,
                     tot_comm,
                     f_in_word (tot_prem) tot_prem_word,
                     f_in_word (tot_comm) tot_comm_word,
                     tot_tax_ded_amt,
                     tot_net_bill_amt,
                     remarks,
                     ins_tp_cd
              FROM   (  SELECT   agent_nm,
                                 idra_cd,
                                 emp_id,
                                 office_cd,
                                 emp_type_nm,
                                 emp_type_cd,
                                 SUM (frist_yr_prem) frist_yr_prem,
                                 SUM (second_yr_prem) second_yr_prem,
                                 SUM (third_yr_prem) third_yr_prem,
                                 SUM (frist_yr_comm) frist_yr_comm,
                                 SUM (second_yr_comm) second_yr_comm,
                                 SUM (third_yr_comm) third_yr_comm,
                                 SUM (installment_premium) tot_prem,
                                 SUM (gross_payable_amt) tot_comm,
                                 SUM (tax_ded_amt) tot_tax_ded_amt,
                                 SUM (net_bill_amt) tot_net_bill_amt,
                                 remarks,
                                 ins_tp_cd
                          FROM   (SELECT   f_agent_nm (m.agent_id) agent_nm,
                                           f_agent_idra_cd (m.agent_id) idra_cd,
                                           m.agent_id emp_id,
                                           m.office_cd,
                                           'FA' emp_type_nm,
                                           '05' emp_type_cd,
                                           d.gross_bill_amt gross_payable_amt,
                                           (DECODE (
                                               t.cal_based_on,
                                               '6',
                                               s.life_premium,
                                               '7',
                                               (NVL (s.life_premium, 0)
                                                + NVL (s.suppl_ben_premium, 0)
                                                + NVL (s.suppl_product_premium,
                                                       0)),
                                               '8',
                                               (NVL (s.suppl_ben_premium, 0)
                                                + NVL (s.suppl_product_premium,
                                                       0)),
                                               s.installment_premium
                                            ))
                                              installment_premium,
                                           DECODE (
                                              c.comm_bon_year,
                                              1,
                                              (DECODE (
                                                  t.cal_based_on,
                                                  '6',
                                                  s.life_premium,
                                                  '7',
                                                  (NVL (s.life_premium, 0)
                                                   + NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  '8',
                                                  (NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  s.installment_premium
                                               )),
                                              0
                                           )
                                              frist_yr_prem,
                                           DECODE (
                                              c.comm_bon_year,
                                              2,
                                              (DECODE (
                                                  t.cal_based_on,
                                                  '6',
                                                  s.life_premium,
                                                  '7',
                                                  (NVL (s.life_premium, 0)
                                                   + NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  '8',
                                                  (NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  s.installment_premium
                                               )),
                                              0
                                           )
                                              second_yr_prem,
                                           (CASE
                                               WHEN c.comm_bon_year > 2
                                               THEN
                                                  (DECODE (
                                                      t.cal_based_on,
                                                      '6',
                                                      s.life_premium,
                                                      '7',
                                                      (NVL (s.life_premium, 0)
                                                       + NVL (
                                                            s.suppl_ben_premium,
                                                            0
                                                         )
                                                       + NVL (
                                                            s.suppl_product_premium,
                                                            0
                                                         )),
                                                      '8',
                                                      (NVL (s.suppl_ben_premium,
                                                            0)
                                                       + NVL (
                                                            s.suppl_product_premium,
                                                            0
                                                         )),
                                                      s.installment_premium
                                                   ))
                                               ELSE
                                                  0
                                            END)
                                              third_yr_prem,
                                           DECODE (c.comm_bon_year,
                                                   1, d.gross_bill_amt,
                                                   0)
                                              frist_yr_comm,
                                           DECODE (c.comm_bon_year,
                                                   2, d.gross_bill_amt,
                                                   0)
                                              second_yr_comm,
                                           (CASE
                                               WHEN c.comm_bon_year > 2
                                               THEN
                                                  d.gross_bill_amt
                                               ELSE
                                                  0
                                            END)
                                              third_yr_comm,
                                           d.tax_ded_amt,
                                           d.net_bill_amt,
                                           m.remarks,
                                           m.ins_tp_cd
                                    FROM   com_agent_com_bill_mst m,
                                           com_agent_com_bill_dtl d,
                                           com_agent_com_detail c,
                                           com_earn_tp t,
                                           ins_p_summery s
                                   WHERE       m.bill_no = d.bill_no
                                           AND d.fa_comm_no = c.fa_comm_no
                                           AND d.pgid = s.pgid
                                           AND d.earning_cd = t.earning_cd
                                           AND m.ins_tp_cd =
                                                 NVL (p_ins_tp_cd, m.ins_tp_cd)
                                           AND m.bill_date BETWEEN p_bill_date_fm
                                                               AND  p_bill_date_to
                                           AND ( (NVL (p_descendant_off, '0') =
                                                     '0'
                                                  AND m.office_cd =
                                                        NVL (p_office_cd,
                                                             m.office_cd))
                                                OR (NVL (p_descendant_off, '0') =
                                                       '1'
                                                    AND m.office_cd IN
                                                             (    SELECT   office_cd
                                                                    FROM   hrm_office_setup
                                                              START WITH   office_cd =
                                                                              p_office_cd
                                                              CONNECT BY   PRIOR office_cd =
                                                                              control_office_cd))))
                      GROUP BY   office_cd,
                                 agent_nm,
                                 emp_type_nm,
                                 emp_type_cd,
                                 remarks,
                                 ins_tp_cd,
                                 emp_id
                      UNION ALL
                        SELECT   agent_nm,
                                 idra_cd,
                                 emp_id,
                                 office_cd,
                                 emp_type_nm,
                                 emp_type_cd,
                                 SUM (frist_yr_prem) frist_yr_prem,
                                 SUM (second_yr_prem) second_yr_prem,
                                 SUM (third_yr_prem) third_yr_prem,
                                 SUM (frist_yr_comm) frist_yr_comm,
                                 SUM (second_yr_comm) second_yr_comm,
                                 SUM (third_yr_comm) third_yr_comm,
                                 SUM (installment_premium) tot_prem,
                                 SUM (gross_payable_amt) tot_comm,
                                 SUM (tax_ded_amt) tot_tax_ded_amt,
                                 SUM (net_bill_amt) tot_net_bill_amt,
                                 remarks,
                                 ins_tp_cd
                          FROM   (SELECT   f_emp_nm (m.emp_gid) agent_nm,
                                           NULL idra_cd,
                                           f_emp_id (m.emp_gid) emp_id,
                                           m.office_cd,
                                           f_emp_type_nm (m.emp_gid) emp_type_nm,
                                           f_emp_type_cd (m.emp_gid) emp_type_cd,
                                           m.gross_payable_amt,
                                           r.installment_premium,
                                           DECODE (r.prem_year_status,
                                                   'F', r.installment_premium,
                                                   0)
                                              frist_yr_prem,
                                           DECODE (r.prem_year_status,
                                                   'S', r.installment_premium,
                                                   0)
                                              second_yr_prem,
                                           DECODE (r.prem_year_status,
                                                   'R', r.installment_premium,
                                                   0)
                                              third_yr_prem,
                                           DECODE (c.prem_year,
                                                   1, m.gross_payable_amt,
                                                   0)
                                              frist_yr_comm,
                                           DECODE (c.prem_year,
                                                   2, m.gross_payable_amt,
                                                   0)
                                              second_yr_comm,
                                           (CASE
                                               WHEN c.prem_year > 2
                                               THEN
                                                  m.gross_payable_amt
                                               ELSE
                                                  0
                                            END)
                                              third_yr_comm,
                                           d.tax_ded_amt,
                                           d.net_bill_amt,
                                           m.remarks,
                                           m.ins_tp_cd
                                    FROM   com_emp_com_bill_mst m,
                                           com_emp_com_bill_dtl d,
                                           com_dev_emp_comm c,
                                           ins_prem_acc_receivable r
                                   WHERE       m.bill_no = d.bill_no
                                           AND d.comm_no = c.comm_no
                                           AND d.pgid = r.pgid
                                           AND d.prem_due_dt = r.next_due_dt
                                           AND m.ins_tp_cd =
                                                 NVL (p_ins_tp_cd, m.ins_tp_cd)
                                           AND m.bill_date BETWEEN p_bill_date_fm
                                                               AND  p_bill_date_to
                                           AND ( (NVL (p_descendant_off, '0') =
                                                     '0'
                                                  AND m.office_cd =
                                                        NVL (p_office_cd,
                                                             m.office_cd))
                                                OR (NVL (p_descendant_off, '0') =
                                                       '1'
                                                    AND m.office_cd IN
                                                             (    SELECT   office_cd
                                                                    FROM   hrm_office_setup
                                                              START WITH   office_cd =
                                                                              p_office_cd
                                                              CONNECT BY   PRIOR office_cd =
                                                                              control_office_cd))))
                      GROUP BY   office_cd,
                                 agent_nm,
                                 emp_type_nm,
                                 emp_type_cd,
                                 remarks,
                                 ins_tp_cd,
                                 emp_id)
             WHERE   ins_tp_cd = p_ins_tp_cd
                     AND (p_emp_type_cd IS NULL
                          OR (p_emp_type_cd IS NOT NULL
                              AND emp_type_cd = p_emp_type_cd))
          ORDER BY   office_cd,
                     emp_type_cd,
                     emp_id,
                     agent_nm)
      LOOP
         NULL;
         /*l_com_bill.agent_nm := i.agent_nm;
         l_com_bill.idra_cd := i.idra_cd;
         l_com_bill.emp_id := i.emp_id;
         l_com_bill.office_cd := i.office_cd;
         l_com_bill.office_name := i.office_name;
         l_com_bill.service_off := i.service_off;
         l_com_bill.emp_type_nm := i.emp_type_nm;
         l_com_bill.emp_type_cd := i.emp_type_cd;
         l_com_bill.frist_yr_prem := i.frist_yr_prem;
         l_com_bill.second_yr_prem := i.second_yr_prem;
         l_com_bill.third_yr_prem := i.third_yr_prem;
         l_com_bill.frist_yr_comm := i.frist_yr_comm;
         l_com_bill.second_yr_comm := i.second_yr_comm;
         l_com_bill.third_yr_comm := i.third_yr_comm;
         l_com_bill.tot_prem := i.tot_prem;
         l_com_bill.tot_comm := i.tot_comm;
         l_com_bill.tot_prem_word := i.tot_prem_word;
         l_com_bill.tot_comm_word := i.tot_comm_word;
         l_com_bill.tot_tax_ded_amt := i.tot_tax_ded_amt;
         l_com_bill.tot_net_bill_amt := i.tot_net_bill_amt;
         l_com_bill.remarks := i.remarks;
         l_com_bill.ins_tp_cd := i.ins_tp_cd;*/
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_com_fa_com_bill_info;

   --- 2. Employee Commission Bill Summary ---
   FUNCTION fun_com_emp_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_type_cd      IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: Employee Type
      p_bill_no_fm       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter: Bil No TFrom
      p_bill_no_to       IN com_agent_com_bill_mst.bill_no%TYPE,
      -- Parameter: Bill No To
      p_bill_date_fm     IN DATE,
      -- Parameter: Bill Date From
      p_bill_date_to     IN DATE,
      -- Parameter: Bill Date To
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Parameter:Office Code
      p_descendant_off   IN VARCHAR2,
      -- IF 1 Then consider descend office
      p_agent_id         IN VARCHAR2,
      -----parameter agent id
      p_emp_gid          IN VARCHAR2
   -----parameter employee id
   )
      RETURN com_emp_com_bill_info_tab
      PIPELINED
   AS
      l_com_bill   com_emp_com_bill_info_row;
   BEGIN
      FOR i
      IN (  SELECT   agent_nm,
                     idra_cd,
                     emp_id,
                     office_cd,
                     f_office (office_cd) office_name,
                     f_office (fun_find_service_off (office_cd)) service_off,
                     emp_type_nm,
                     emp_type_cd,
                     frist_yr_prem,
                     second_yr_prem,
                     third_yr_prem,
                     frist_yr_comm,
                     second_yr_comm,
                     third_yr_comm,
                     tot_prem,
                     tot_comm,
                     initial_comm_amt,
                     initial_com_return,
                     f_in_word (tot_prem) tot_prem_word,
                     f_in_word (tot_comm) tot_comm_word,
                     tot_tax_ded_amt,
                     tot_net_bill_amt,
                     remarks,
                     ins_tp_cd
              FROM   (  SELECT   agent_nm,
                                 idra_cd,
                                 emp_id,
                                 office_cd,
                                 emp_type_nm,
                                 emp_type_cd,
                                 SUM (frist_yr_prem) frist_yr_prem,
                                 SUM (second_yr_prem) second_yr_prem,
                                 SUM (third_yr_prem) third_yr_prem,
                                 SUM (frist_yr_comm) frist_yr_comm,
                                 SUM (second_yr_comm) second_yr_comm,
                                 SUM (third_yr_comm) third_yr_comm,
                                 SUM (installment_premium) tot_prem,
                                 SUM (gross_payable_amt) tot_comm,
                                 SUM (comm_ded_amt) initial_comm_amt,
                                 SUM (initial_com_return) initial_com_return,
                                 SUM (tax_ded_amt) tot_tax_ded_amt,
                                 SUM (net_bill_amt) tot_net_bill_amt,
                                 remarks,
                                 ins_tp_cd
                          FROM   (SELECT   f_agent_nm (m.agent_id) agent_nm,
                                           f_agent_idra_cd (m.agent_id) idra_cd,
                                           m.agent_id emp_id,
                                           m.office_cd,
                                           'FA' emp_type_nm,
                                           '05' emp_type_cd,
                                           d.gross_bill_amt gross_payable_amt,
                                           (DECODE (
                                               t.cal_based_on,
                                               '6',
                                               s.life_premium,
                                               '7',
                                               (NVL (s.life_premium, 0)
                                                + NVL (s.suppl_ben_premium, 0)
                                                + NVL (s.suppl_product_premium,
                                                       0)),
                                               '8',
                                               (NVL (s.suppl_ben_premium, 0)
                                                + NVL (s.suppl_product_premium,
                                                       0)),
                                               s.installment_premium
                                            ))
                                              installment_premium,
                                           DECODE (
                                              c.comm_bon_year,
                                              1,
                                              (DECODE (
                                                  t.cal_based_on,
                                                  '6',
                                                  s.life_premium,
                                                  '7',
                                                  (NVL (s.life_premium, 0)
                                                   + NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  '8',
                                                  (NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  s.installment_premium
                                               )),
                                              0
                                           )
                                              frist_yr_prem,
                                           DECODE (
                                              c.comm_bon_year,
                                              2,
                                              (DECODE (
                                                  t.cal_based_on,
                                                  '6',
                                                  s.life_premium,
                                                  '7',
                                                  (NVL (s.life_premium, 0)
                                                   + NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  '8',
                                                  (NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  s.installment_premium
                                               )),
                                              0
                                           )
                                              second_yr_prem,
                                           (CASE
                                               WHEN c.comm_bon_year > 2
                                               THEN
                                                  (DECODE (
                                                      t.cal_based_on,
                                                      '6',
                                                      s.life_premium,
                                                      '7',
                                                      (NVL (s.life_premium, 0)
                                                       + NVL (
                                                            s.suppl_ben_premium,
                                                            0
                                                         )
                                                       + NVL (
                                                            s.suppl_product_premium,
                                                            0
                                                         )),
                                                      '8',
                                                      (NVL (s.suppl_ben_premium,
                                                            0)
                                                       + NVL (
                                                            s.suppl_product_premium,
                                                            0
                                                         )),
                                                      s.installment_premium
                                                   ))
                                               ELSE
                                                  0
                                            END)
                                              third_yr_prem,
                                           DECODE (c.comm_bon_year,
                                                   1, d.gross_bill_amt,
                                                   0)
                                              frist_yr_comm,
                                           DECODE (c.comm_bon_year,
                                                   2, d.gross_bill_amt,
                                                   0)
                                              second_yr_comm,
                                           (CASE
                                               WHEN c.comm_bon_year > 2
                                               THEN
                                                  d.gross_bill_amt
                                               ELSE
                                                  0
                                            END)
                                              third_yr_comm,
                                           d.comm_ded_amt,
                                           (  NVL (d.paid_interest_amt, 0)
                                            + NVL (d.paid_ded_amount, 0)
                                            + NVL (d.um_paid_interest_amt, 0)
                                            + NVL (d.um_paid_ded_amount, 0)
                                            + NVL (d.bm_paid_interest_amt, 0)
                                            + NVL (d.bm_paid_ded_amount, 0))
                                              initial_com_return,
                                           d.tax_ded_amt,
                                           d.net_bill_amt,
                                           m.remarks,
                                           m.ins_tp_cd
                                    FROM   com_agent_com_bill_mst m,
                                           com_agent_com_bill_dtl d,
                                           com_agent_com_detail c,
                                           com_earn_tp t,
                                           ins_p_summery s
                                   WHERE       m.bill_no = d.bill_no
                                           AND d.fa_comm_no = c.fa_comm_no
                                           AND d.pgid = s.pgid
                                           AND d.earning_cd = t.earning_cd
                                           AND NVL (m.service_charge_st, '0') =
                                                 '0'
                                           AND m.ins_tp_cd =
                                                 NVL (p_ins_tp_cd, m.ins_tp_cd)
                                           AND m.agent_id =
                                                 NVL (p_agent_id, m.agent_id)
                                           AND m.bill_date BETWEEN p_bill_date_fm
                                                               AND  p_bill_date_to
                                           AND ( (NVL (p_descendant_off, '0') =
                                                     '0'
                                                  AND m.office_cd =
                                                        NVL (p_office_cd,
                                                             m.office_cd))
                                                OR (NVL (p_descendant_off, '0') =
                                                       '1'
                                                    AND m.office_cd IN
                                                             (    SELECT   office_cd
                                                                    FROM   hrm_office_setup
                                                              START WITH   office_cd =
                                                                              p_office_cd
                                                              CONNECT BY   PRIOR office_cd =
                                                                              control_office_cd))))
                      GROUP BY   office_cd,
                                 agent_nm,
                                 idra_cd,
                                 emp_type_nm,
                                 emp_type_cd,
                                 remarks,
                                 ins_tp_cd,
                                 emp_id
                      UNION ALL
                        SELECT   agent_nm,
                                 idra_cd,
                                 emp_id,
                                 office_cd,
                                 emp_type_nm,
                                 emp_type_cd,
                                 SUM (frist_yr_prem) frist_yr_prem,
                                 SUM (second_yr_prem) second_yr_prem,
                                 SUM (third_yr_prem) third_yr_prem,
                                 SUM (frist_yr_comm) frist_yr_comm,
                                 SUM (second_yr_comm) second_yr_comm,
                                 SUM (third_yr_comm) third_yr_comm,
                                 SUM (installment_premium) tot_prem,
                                 SUM (gross_payable_amt) tot_comm,
                                 SUM (comm_ded_amt) initial_comm_amt,
                                 SUM (initial_com_return) initial_com_return,
                                 SUM (tax_ded_amt) tot_tax_ded_amt,
                                 SUM (net_bill_amt) tot_net_bill_amt,
                                 remarks,
                                 ins_tp_cd
                          FROM   (SELECT   f_emp_nm (m.emp_gid) agent_nm,
                                           NULL idra_cd,
                                           f_emp_id (m.emp_gid) emp_id,
                                           m.office_cd,
                                           f_emp_type_nm (m.emp_gid) emp_type_nm,
                                           f_emp_type_cd (m.emp_gid) emp_type_cd,
                                           m.gross_payable_amt,
                                           r.installment_premium,
                                           DECODE (r.prem_year_status,
                                                   'F', r.installment_premium,
                                                   0)
                                              frist_yr_prem,
                                           DECODE (r.prem_year_status,
                                                   'S', r.installment_premium,
                                                   0)
                                              second_yr_prem,
                                           DECODE (r.prem_year_status,
                                                   'R', r.installment_premium,
                                                   0)
                                              third_yr_prem,
                                           DECODE (c.prem_year,
                                                   1, m.gross_payable_amt,
                                                   0)
                                              frist_yr_comm,
                                           DECODE (c.prem_year,
                                                   2, m.gross_payable_amt,
                                                   0)
                                              second_yr_comm,
                                           (CASE
                                               WHEN c.prem_year > 2
                                               THEN
                                                  m.gross_payable_amt
                                               ELSE
                                                  0
                                            END)
                                              third_yr_comm,
                                           d.comm_ded_amt,
                                           0 initial_com_return,
                                           d.tax_ded_amt,
                                           d.net_bill_amt,
                                           m.remarks,
                                           m.ins_tp_cd
                                    FROM   com_emp_com_bill_mst m,
                                           com_emp_com_bill_dtl d,
                                           com_dev_emp_comm c,
                                           ins_prem_acc_receivable r
                                   WHERE       m.bill_no = d.bill_no
                                           AND d.comm_no = c.comm_no
                                           AND d.pgid = r.pgid
                                           AND d.prem_due_dt = r.next_due_dt
                                           AND m.ins_tp_cd =
                                                 NVL (p_ins_tp_cd, m.ins_tp_cd)
                                           AND m.emp_gid =
                                                 NVL (p_emp_gid, m.emp_gid)
                                           AND m.bill_date BETWEEN p_bill_date_fm
                                                               AND  p_bill_date_to
                                           AND ( (NVL (p_descendant_off, '0') =
                                                     '0'
                                                  AND m.office_cd =
                                                        NVL (p_office_cd,
                                                             m.office_cd))
                                                OR (NVL (p_descendant_off, '0') =
                                                       '1'
                                                    AND m.office_cd IN
                                                             (    SELECT   office_cd
                                                                    FROM   hrm_office_setup
                                                              START WITH   office_cd =
                                                                              p_office_cd
                                                              CONNECT BY   PRIOR office_cd =
                                                                              control_office_cd))))
                      GROUP BY   office_cd,
                                 idra_cd,
                                 agent_nm,
                                 emp_type_nm,
                                 emp_type_cd,
                                 remarks,
                                 ins_tp_cd,
                                 emp_id)
             WHERE   ins_tp_cd = NVL (p_ins_tp_cd, ins_tp_cd)
                     AND (p_emp_type_cd IS NULL
                          OR (p_emp_type_cd IS NOT NULL
                              AND emp_type_cd = p_emp_type_cd))
          ORDER BY   office_cd,
                     emp_type_cd,
                     emp_id,
                     agent_nm)
      LOOP
         l_com_bill.agent_nm := i.agent_nm;
         l_com_bill.idra_cd := i.idra_cd;
         l_com_bill.emp_id := i.emp_id;
         l_com_bill.office_cd := i.office_cd;
         l_com_bill.office_name := i.office_name;
         l_com_bill.service_off := i.service_off;
         l_com_bill.emp_type_nm := i.emp_type_nm;
         l_com_bill.emp_type_cd := i.emp_type_cd;
         l_com_bill.frist_yr_prem := i.frist_yr_prem;
         l_com_bill.second_yr_prem := i.second_yr_prem;
         l_com_bill.third_yr_prem := i.third_yr_prem;
         l_com_bill.frist_yr_comm := i.frist_yr_comm;
         l_com_bill.second_yr_comm := i.second_yr_comm;
         l_com_bill.third_yr_comm := i.third_yr_comm;
         l_com_bill.tot_prem := i.tot_prem;
         l_com_bill.tot_comm := i.tot_comm;
         l_com_bill.initial_comm_amt := i.initial_comm_amt;
         l_com_bill.initial_com_return := i.initial_com_return;
         l_com_bill.tot_prem_word := i.tot_prem_word;
         l_com_bill.tot_comm_word := i.tot_comm_word;
         l_com_bill.tot_tax_ded_amt := i.tot_tax_ded_amt;
         l_com_bill.tot_net_bill_amt := i.tot_net_bill_amt;
         l_com_bill.remarks := i.remarks;
         l_com_bill.ins_tp_cd := i.ins_tp_cd;
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_com_emp_com_bill_info;

   --- 3. Office Wise Employee Commission Bill Info ---
   FUNCTION fun_com_off_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_type_cd      IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: Employee Type
      p_bill_date_fm     IN DATE,
      -- Parameter: Bill Date From
      p_bill_date_to     IN DATE,
      -- Parameter: Bill Date To
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Parameter:Office Code
      p_descendant_off   IN VARCHAR2
   -- IF 1 Then consider descend office
   )
      RETURN com_off_com_bill_info_tab
      PIPELINED
   AS
      l_com_bill   com_off_com_bill_info_row;
   BEGIN
      FOR i
      IN (  SELECT   office_cd,
                     desig_cd,
                     f_office (office_cd) office_name,
                     f_office (fun_find_service_off (office_cd)) service_off,
                     fun_find_service_off (office_cd) service_off_cd,
                     SUM (frist_yr_prem) frist_yr_prem,
                     SUM (second_yr_prem) second_yr_prem,
                     SUM (third_yr_prem) third_yr_prem,
                     SUM (frist_yr_comm) frist_yr_comm,
                     SUM (second_yr_comm) second_yr_comm,
                     SUM (third_yr_comm) third_yr_comm,
                     SUM (tot_prem) tot_prem,
                     SUM (tot_comm) tot_comm,
                     f_in_word (SUM (tot_prem)) tot_prem_word,
                     f_in_word (SUM (tot_comm)) tot_comm_word,
                     NULL remarks,
                     ins_tp_cd
              FROM   (  SELECT   office_cd,
                                 desig_cd,
                                 SUM (frist_yr_prem) frist_yr_prem,
                                 SUM (second_yr_prem) second_yr_prem,
                                 SUM (third_yr_prem) third_yr_prem,
                                 SUM (frist_yr_comm) frist_yr_comm,
                                 SUM (second_yr_comm) second_yr_comm,
                                 SUM (third_yr_comm) third_yr_comm,
                                 SUM (installment_premium) tot_prem,
                                 SUM (gross_payable_amt) tot_comm,
                                 ins_tp_cd
                          FROM   (SELECT   m.office_cd,
                                           '05' desig_cd,
                                           d.gross_bill_amt gross_payable_amt,
                                           (DECODE (
                                               t.cal_based_on,
                                               '6',
                                               s.life_premium,
                                               '7',
                                               (NVL (s.life_premium, 0)
                                                + NVL (s.suppl_ben_premium, 0)
                                                + NVL (s.suppl_product_premium,
                                                       0)),
                                               '8',
                                               (NVL (s.suppl_ben_premium, 0)
                                                + NVL (s.suppl_product_premium,
                                                       0)),
                                               s.installment_premium
                                            ))
                                              installment_premium,
                                           DECODE (
                                              c.comm_bon_year,
                                              1,
                                              (DECODE (
                                                  t.cal_based_on,
                                                  '6',
                                                  s.life_premium,
                                                  '7',
                                                  (NVL (s.life_premium, 0)
                                                   + NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  '8',
                                                  (NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  s.installment_premium
                                               )),
                                              0
                                           )
                                              frist_yr_prem,
                                           DECODE (
                                              c.comm_bon_year,
                                              2,
                                              (DECODE (
                                                  t.cal_based_on,
                                                  '6',
                                                  s.life_premium,
                                                  '7',
                                                  (NVL (s.life_premium, 0)
                                                   + NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  '8',
                                                  (NVL (s.suppl_ben_premium, 0)
                                                   + NVL (
                                                        s.suppl_product_premium,
                                                        0
                                                     )),
                                                  s.installment_premium
                                               )),
                                              0
                                           )
                                              second_yr_prem,
                                           (CASE
                                               WHEN c.comm_bon_year > 2
                                               THEN
                                                  (DECODE (
                                                      t.cal_based_on,
                                                      '6',
                                                      s.life_premium,
                                                      '7',
                                                      (NVL (s.life_premium, 0)
                                                       + NVL (
                                                            s.suppl_ben_premium,
                                                            0
                                                         )
                                                       + NVL (
                                                            s.suppl_product_premium,
                                                            0
                                                         )),
                                                      '8',
                                                      (NVL (s.suppl_ben_premium,
                                                            0)
                                                       + NVL (
                                                            s.suppl_product_premium,
                                                            0
                                                         )),
                                                      s.installment_premium
                                                   ))
                                               ELSE
                                                  0
                                            END)
                                              third_yr_prem,
                                           DECODE (c.comm_bon_year,
                                                   1, d.gross_bill_amt,
                                                   0)
                                              frist_yr_comm,
                                           DECODE (c.comm_bon_year,
                                                   2, d.gross_bill_amt,
                                                   0)
                                              second_yr_comm,
                                           (CASE
                                               WHEN c.comm_bon_year > 2
                                               THEN
                                                  d.gross_bill_amt
                                               ELSE
                                                  0
                                            END)
                                              third_yr_comm,
                                           m.ins_tp_cd
                                    FROM   com_agent_com_bill_mst m,
                                           com_agent_com_bill_dtl d,
                                           com_agent_com_detail c,
                                           com_earn_tp t,
                                           ins_p_summery s
                                   WHERE       m.bill_no = d.bill_no
                                           AND d.fa_comm_no = c.fa_comm_no
                                           AND d.pgid = s.pgid
                                           AND d.earning_cd = t.earning_cd
                                           AND d.earning_cd = c.earning_cd
                                           AND NVL (m.service_charge_st, '0') =
                                                 '0'
                                           AND m.bill_date BETWEEN NVL (
                                                                      p_bill_date_fm,
                                                                      m.bill_date
                                                                   )
                                                               AND  NVL (
                                                                       p_bill_date_to,
                                                                       m.bill_date
                                                                    )
                                           AND ( (NVL (p_descendant_off, '0') =
                                                     '0'
                                                  AND m.office_cd =
                                                        NVL (p_office_cd,
                                                             m.office_cd))
                                                OR (NVL (p_descendant_off, '0') =
                                                       '1'
                                                    AND m.office_cd IN
                                                             (    SELECT   office_cd
                                                                    FROM   hrm_office_setup
                                                              START WITH   office_cd =
                                                                              p_office_cd
                                                              CONNECT BY   PRIOR office_cd =
                                                                              control_office_cd))))
                      GROUP BY   office_cd, desig_cd, ins_tp_cd
                      UNION ALL
                        SELECT   office_cd,
                                 desig_cd,
                                 SUM (frist_yr_prem) frist_yr_prem,
                                 SUM (second_yr_prem) second_yr_prem,
                                 SUM (third_yr_prem) third_yr_prem,
                                 SUM (frist_yr_comm) frist_yr_comm,
                                 SUM (second_yr_comm) second_yr_comm,
                                 SUM (third_yr_comm) third_yr_comm,
                                 SUM (installment_premium) tot_prem,
                                 SUM (gross_payable_amt) tot_comm,
                                 ins_tp_cd
                          FROM   (SELECT   m.office_cd,
                                           f_emp_type_cd (m.emp_gid) desig_cd,
                                           d.gross_bill_amt gross_payable_amt,
                                           DECODE (
                                              d.earning_cd,
                                              '08',
                                              0,
                                              r.installment_premium
                                              - NVL (s.extra_premium, 0)
                                           )
                                              installment_premium,
                                           DECODE (
                                              r.prem_year_status,
                                              'F',
                                              DECODE (
                                                 d.earning_cd,
                                                 '08',
                                                 0,
                                                 r.installment_premium
                                                 - NVL (s.extra_premium, 0)
                                              ),
                                              0
                                           )
                                              frist_yr_prem,
                                           DECODE (
                                              r.prem_year_status,
                                              'S',
                                              DECODE (
                                                 d.earning_cd,
                                                 '08',
                                                 0,
                                                 r.installment_premium
                                                 - NVL (s.extra_premium, 0)
                                              ),
                                              0
                                           )
                                              second_yr_prem,
                                           DECODE (
                                              r.prem_year_status,
                                              'R',
                                              DECODE (
                                                 d.earning_cd,
                                                 '08',
                                                 0,
                                                 r.installment_premium
                                                 - NVL (s.extra_premium, 0)
                                              ),
                                              0
                                           )
                                              third_yr_prem,
                                           DECODE (c.prem_year,
                                                   1, d.gross_bill_amt,
                                                   0)
                                              frist_yr_comm,
                                           DECODE (c.prem_year,
                                                   2, d.gross_bill_amt,
                                                   0)
                                              second_yr_comm,
                                           (CASE
                                               WHEN c.prem_year > 2
                                               THEN
                                                  d.gross_bill_amt
                                               ELSE
                                                  0
                                            END)
                                              third_yr_comm,
                                           m.ins_tp_cd
                                    FROM   com_emp_com_bill_mst m,
                                           com_emp_com_bill_dtl d,
                                           com_dev_emp_comm c,
                                           ins_prem_acc_receivable r,
                                           ins_p_summery s
                                   WHERE       m.bill_no = d.bill_no
                                           AND d.comm_no = c.comm_no
                                           AND d.pgid = r.pgid
                                           AND r.pgid = s.pgid
                                           AND d.pgid = s.pgid
                                           AND d.prem_due_dt = r.next_due_dt
                                           AND m.bill_date BETWEEN NVL (
                                                                      p_bill_date_fm,
                                                                      m.bill_date
                                                                   )
                                                               AND  NVL (
                                                                       p_bill_date_to,
                                                                       m.bill_date
                                                                    )
                                           AND ( (NVL (p_descendant_off, '0') =
                                                     '0'
                                                  AND m.office_cd =
                                                        NVL (p_office_cd,
                                                             m.office_cd))
                                                OR (NVL (p_descendant_off, '0') =
                                                       '1'
                                                    AND m.office_cd IN
                                                             (    SELECT   office_cd
                                                                    FROM   hrm_office_setup
                                                              START WITH   office_cd =
                                                                              p_office_cd
                                                              CONNECT BY   PRIOR office_cd =
                                                                              control_office_cd))))
                      GROUP BY   office_cd, desig_cd, ins_tp_cd)
             WHERE   ins_tp_cd = NVL (p_ins_tp_cd, ins_tp_cd)
                     AND desig_cd = p_emp_type_cd
          GROUP BY   office_cd, desig_cd, ins_tp_cd
          ORDER BY   office_cd)
      LOOP
         l_com_bill.office_cd := i.office_cd;
         l_com_bill.office_name := i.office_name;
         l_com_bill.service_off := i.service_off;
         l_com_bill.service_off_cd := i.service_off_cd;
         l_com_bill.frist_yr_prem := i.frist_yr_prem;
         l_com_bill.second_yr_prem := i.second_yr_prem;
         l_com_bill.third_yr_prem := i.third_yr_prem;
         l_com_bill.frist_yr_comm := i.frist_yr_comm;
         l_com_bill.second_yr_comm := i.second_yr_comm;
         l_com_bill.third_yr_comm := i.third_yr_comm;
         l_com_bill.tot_prem := i.tot_prem;
         l_com_bill.tot_comm := i.tot_comm;
         l_com_bill.tot_prem_word := i.tot_prem_word;
         l_com_bill.tot_comm_word := i.tot_comm_word;
         l_com_bill.remarks := i.remarks;
         l_com_bill.ins_tp_cd := i.ins_tp_cd;
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_com_off_com_bill_info;

   --- 4. Branch Wise Agent Commission Bill Info ---
   FUNCTION fun_com_branch_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_br_cd            IN acc_branch.br_cd%TYPE,
      -- Parameter: Branch Code
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2
   -- IF Y Then consider descend office
   )
      RETURN com_branch_com_bill_info_tab
      PIPELINED
   AS
      l_com_bill   com_branch_com_bill_info_row;
   BEGIN
      FOR i
      IN (SELECT   m.agent_id,
                   f_agent_idra_cd (m.agent_id) idra_cd,
                   f_agent_nm (m.agent_id) agent_nm,
                   f_agent_license_no (m.agent_id) license_no,
                   m.agent_acc_no,
                   m.cheque_no,
                   d.net_bill_amt,
                   m.remarks,
                   m.ins_tp_cd
            FROM   com_agent_com_bill_mst m,
                   com_agent_com_bill_dtl d,
                   acc_branch b
           WHERE       m.bill_no = d.bill_no
                   AND m.ins_tp_cd = p_ins_tp_cd
                   AND m.agent_acc_br_cd = b.br_cd
                   AND m.agent_acc_br_cd = NVL (p_br_cd, m.agent_acc_br_cd)
                   AND ( (NVL (p_descendant_off, '0') = '0'
                          AND m.office_cd = NVL (p_office_cd, m.office_cd))
                        OR (NVL (p_descendant_off, '0') = '1'
                            AND m.office_cd IN
                                     (    SELECT   office_cd
                                            FROM   hrm_office_setup
                                      START WITH   office_cd = p_office_cd
                                      CONNECT BY   PRIOR office_cd =
                                                      control_office_cd))))
      LOOP
         l_com_bill.agent_nm := i.agent_nm;
         l_com_bill.agent_id := i.agent_id;
         l_com_bill.idra_cd := i.idra_cd;
         l_com_bill.license_no := i.license_no;
         l_com_bill.agent_acc_no := i.agent_acc_no;
         l_com_bill.cheque_no := i.cheque_no;
         l_com_bill.net_bill_amt := i.net_bill_amt;
         l_com_bill.remarks := i.remarks;
         l_com_bill.ins_tp_cd := i.ins_tp_cd;
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_com_branch_com_bill_info;

   --- 5. Mobile Banking Wise Agent Commission Bill Info ---
   FUNCTION fun_com_mobile_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_account_no       IN hrm_agent.account_no%TYPE,
      -- Parameter: Mobile Banking Account No
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2
   -- IF Y Then consider descend office
   )
      RETURN com_mobile_com_bill_info_tab
      PIPELINED
   AS
      l_com_bill   com_mobile_com_bill_info_row;
   BEGIN
      FOR i
      IN (  SELECT   m.agent_id,
                     f_agent_idra_cd (m.agent_id) idra_cd,
                     f_agent_nm (m.agent_id) agent_nm,
                     f_agent_license_no (m.agent_id) license_no,
                     m.agent_acc_no,
                     m.cheque_no,
                     d.net_bill_amt,
                     m.remarks,
                     m.ins_tp_cd
              FROM   com_agent_com_bill_mst m, com_agent_com_bill_dtl d
             WHERE       m.bill_no = d.bill_no
                     AND m.ins_tp_cd = p_ins_tp_cd
                     AND m.agent_acc_no = NVL (p_account_no, m.agent_acc_no)
                     AND ( (NVL (p_descendant_off, '0') = '0'
                            AND m.office_cd = NVL (p_office_cd, m.office_cd))
                          OR (NVL (p_descendant_off, '0') = '1'
                              AND m.office_cd IN
                                       (    SELECT   office_cd
                                              FROM   hrm_office_setup
                                        START WITH   office_cd = p_office_cd
                                        CONNECT BY   PRIOR office_cd =
                                                        control_office_cd)))
          ORDER BY   m.agent_acc_no)
      LOOP
         l_com_bill.agent_nm := i.agent_nm;
         l_com_bill.agent_id := i.agent_id;
         l_com_bill.idra_cd := i.idra_cd;
         l_com_bill.license_no := i.license_no;
         l_com_bill.agent_acc_no := i.agent_acc_no;
         l_com_bill.cheque_no := i.cheque_no;
         l_com_bill.net_bill_amt := i.net_bill_amt;
         l_com_bill.remarks := i.remarks;
         l_com_bill.ins_tp_cd := i.ins_tp_cd;
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_com_mobile_com_bill_info;

   --- 6. Cash Amount Wise Agent Commission Bill Info ---
   FUNCTION fun_com_cash_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_bill_date_fm     IN DATE,
      p_bill_date_to     IN DATE,
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2
   -- IF Y Then consider descend office
   )
      RETURN com_cash_com_bill_info_tab
      PIPELINED
   AS
      l_com_bill   com_cash_com_bill_info_row;
   BEGIN
      FOR i
      IN (  SELECT   m.agent_id,
                     f_agent_idra_cd (m.agent_id) idra_cd,
                     f_agent_nm (m.agent_id) agent_nm,
                     f_agent_license_no (m.agent_id) license_no,
                     --m.agent_acc_no,
                     m.cheque_no,
                     SUM (d.net_bill_amt) net_bill_amt,
                     m.remarks,
                     m.ins_tp_cd
              FROM   com_agent_com_bill_mst m, com_agent_com_bill_dtl d
             WHERE   m.bill_no = d.bill_no AND m.ins_tp_cd = p_ins_tp_cd
                     AND m.bill_date BETWEEN NVL (p_bill_date_fm, m.bill_date)
                                         AND  NVL (p_bill_date_to, m.bill_date)
                     AND ( (NVL (p_descendant_off, '0') = '0'
                            AND m.office_cd = NVL (p_office_cd, m.office_cd))
                          OR (NVL (p_descendant_off, '0') = '1'
                              AND m.office_cd IN
                                       (    SELECT   office_cd
                                              FROM   hrm_office_setup
                                        START WITH   office_cd = p_office_cd
                                        CONNECT BY   PRIOR office_cd =
                                                        control_office_cd)))
          GROUP BY   m.agent_id,
                     m.ins_tp_cd,
                     m.cheque_no,
                     m.remarks
          ORDER BY   m.ins_tp_cd, m.agent_id, m.cheque_no)
      LOOP
         l_com_bill.agent_nm := i.agent_nm;
         l_com_bill.agent_id := i.agent_id;
         l_com_bill.idra_cd := i.idra_cd;
         l_com_bill.license_no := i.license_no;
         --l_com_bill.agent_acc_no := i.agent_acc_no;
         l_com_bill.cheque_no := i.cheque_no;
         l_com_bill.net_bill_amt := i.net_bill_amt;
         l_com_bill.remarks := i.remarks;
         l_com_bill.ins_tp_cd := i.ins_tp_cd;
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_com_cash_com_bill_info;

   --- 7. First Premium FA Commission BIl Info ---
   FUNCTION fun_com_fpfa_com_bill_info (
      p_ins_tp_cd   IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_agent_id    IN hrm_agent.agent_id%TYPE,
      -- Parameter: Agent Id
      p_pgid        IN ins_p_proposal.pgid%TYPE,
      -- Parameter: pgid
      p_date_from   IN DATE,
      -- Parameter Bill date from
      p_date_to     IN DATE,
      -- Parameter Bill date to
      p_bill_from   IN com_agent_com_bill_dtl.net_bill_amt%TYPE,
      -- Parameter: Net bill amount from
      p_bill_to     IN com_agent_com_bill_dtl.net_bill_amt%TYPE,
      -- Parameter: Net bill amount to
      p_office_cd   IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_check       IN VARCHAR2
   -- IF 1 Then consider descend office
   )
      RETURN com_fpfa_com_bill_info_tab
      PIPELINED
   AS
      l_com_bill   com_fpfa_com_bill_info_row;
   BEGIN
      FOR i
      IN (SELECT   m.agent_id,
                   f_agent_idra_cd (m.agent_id) idra_cd,
                   h.agent_nm_eng,
                   rep_f_salutation (h.salut) salut,
                   m.office_cd,
                   f_office (m.office_cd) office_nm,
                   m.bill_no,
                   m.bill_date,
                   m.agent_acc_no,
                   m.agent_acc_bank_cd bank_cd,
                   f_bank (m.agent_acc_bank_cd) bank_nm,
                   m.agent_acc_br_cd br_cd,
                   f_branch (m.agent_acc_br_cd) br_nm,
                   DECODE (m.ins_tp_cd,
                           '1',
                           'Conventional Life Insurance',
                           '2',
                           'Takaful Life Insurance')
                      ins_tp_nm,
                   h.join_dt,
                   NULL bill_srl,
                   h.license_no,
                   h.license_valid_from_dt,
                   h.license_valid_to_dt,
                      m.agent_id
                   || '-'
                   || rep_f_emp_cd (s.do_gid)
                   || '-'
                   || rep_f_emp_cd (s.dm_gid)
                   || '-'
                   || s.branch_off
                   || '-'
                   || s.sales_off
                   || '-'
                   || s.zonal_off
                   || '-'
                   || s.regional_off
                      org_setup,
                   fun_ins_pay_mode (s.pay_mode_cd) pay_mod,
                   s.product_cd || '-' || s.term table_term,
                   s.comm_date,
                   s.sum_assured,
                   s.installment_premium,
                   fun_ins_pgid_to_policy_no (s.pgid) policy_no,
                   c.comm_bon_year,
                   NVL (DECODE (c.comm_bon_year, 1, d.gross_bill_amt), 0)
                      first_yr_com,
                   d.tax_ded_amt tot_tax,
                   d.net_bill_amt net_amount,
                   d.pay_rate,
                   d.prem_due_dt,
                   rep_fun_activity_nm (h.activity_cd) activity_nm
            FROM   com_agent_com_bill_mst m,
                   com_agent_com_bill_dtl d,
                   com_agent_com_detail c,
                   ins_p_summery s,
                   hrm_agent h
           WHERE       m.agent_id = NVL (p_agent_id, m.agent_id)
                   AND m.ins_tp_cd = p_ins_tp_cd
                   AND d.pgid = NVL (p_pgid, d.pgid)
                   AND s.pgid = NVL (p_pgid, s.pgid)
                   AND c.comm_bon_year = 1
                   AND c.prem_due_dt = s.comm_date
                   AND NVL (m.disburse_status, '0') = '0'
                   AND (p_date_from IS NULL
                        OR (p_date_from IS NOT NULL
                            AND m.bill_date BETWEEN p_date_from AND p_date_to))
                   AND (p_bill_from IS NULL
                        OR (p_bill_from IS NOT NULL
                            AND TO_NUMBER(SUBSTR (
                                             SUBSTR (m.bill_no, 15),
                                             1,
                                             INSTR (SUBSTR (m.bill_no, 15),
                                                    '/')
                                             - 1
                                          )) BETWEEN NVL (
                                                        p_bill_from,
                                                        TO_NUMBER(SUBSTR (
                                                                     SUBSTR (
                                                                        m.bill_no,
                                                                        11
                                                                     ),
                                                                     1,
                                                                     INSTR (
                                                                        SUBSTR (
                                                                           m.bill_no,
                                                                           15
                                                                        ),
                                                                        '/'
                                                                     )
                                                                     - 1
                                                                  ))
                                                     )
                                                 AND  NVL (
                                                         p_bill_to,
                                                         TO_NUMBER(SUBSTR (
                                                                      SUBSTR (
                                                                         m.bill_no,
                                                                         15
                                                                      ),
                                                                      1,
                                                                      INSTR (
                                                                         SUBSTR (
                                                                            m.bill_no,
                                                                            15
                                                                         ),
                                                                         '/'
                                                                      )
                                                                      - 1
                                                                   ))
                                                      )))
                   AND m.office_cd IN
                            (SELECT   DISTINCT
                                      NVL (
                                         DECODE (p_check,
                                                 0, x.office_cd,
                                                 y.office_cd),
                                         m.office_cd
                                      )
                               FROM   (SELECT   p_office_cd office_cd
                                         FROM   DUAL) x,
                                      (    SELECT   office_cd
                                             FROM   hrm_office_setup
                                       CONNECT BY   PRIOR office_cd =
                                                       control_office_cd
                                       START WITH   office_cd =
                                                       NVL (p_office_cd,
                                                            office_cd)) y)
                   AND m.bill_no = d.bill_no
                   AND s.pgid = d.pgid
                   AND d.fa_comm_no = c.fa_comm_no
                   AND m.agent_id = s.agent_id
                   AND m.agent_id = h.agent_id)
      LOOP
         l_com_bill.agent_id := i.agent_id;
         l_com_bill.idra_cd := i.idra_cd;
         l_com_bill.agent_nm := i.agent_nm_eng;
         l_com_bill.salut := i.salut;
         l_com_bill.office_cd := i.office_cd;
         l_com_bill.office_nm := i.office_nm;
         l_com_bill.bill_no := i.bill_no;
         l_com_bill.bill_date := i.bill_date;
         l_com_bill.agent_acc_no := i.agent_acc_no;
         l_com_bill.bank_cd := i.bank_cd;
         l_com_bill.bank_nm := i.bank_nm;
         l_com_bill.br_cd := i.br_cd;
         l_com_bill.br_nm := i.br_nm;
         l_com_bill.ins_tp_nm := i.ins_tp_nm;
         l_com_bill.join_dt := i.join_dt;
         l_com_bill.bill_srl := i.bill_srl;
         l_com_bill.license_no := i.license_no;
         l_com_bill.license_valid_from_dt := i.license_valid_from_dt;
         l_com_bill.license_valid_to_dt := i.license_valid_to_dt;
         l_com_bill.org_setup := i.org_setup;
         l_com_bill.pay_mod := i.pay_mod;
         l_com_bill.table_term := i.table_term;
         l_com_bill.comm_date := i.comm_date;
         l_com_bill.sum_assured := i.sum_assured;
         l_com_bill.installment_premium := i.installment_premium;
         l_com_bill.policy_no := i.policy_no;
         l_com_bill.comm_bon_year := i.comm_bon_year;
         l_com_bill.first_yr_com := i.first_yr_com;
         l_com_bill.tot_tax := i.tot_tax;
         l_com_bill.net_amount := i.net_amount;
         l_com_bill.pay_rate := i.pay_rate;
         l_com_bill.prem_due_dt := i.prem_due_dt;
         l_com_bill.activity_nm := i.activity_nm;
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_com_fpfa_com_bill_info;

   --- 8. Employee Commission Bill Info ---
   FUNCTION fun_com_employee_com_bill_info (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_gid          IN hrm_employee.emp_gid%TYPE,
      -- Parameter: Agent Id
      p_emp_type         IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: pgid
      p_pgid             IN ins_p_summery.pgid%TYPE,
      p_bill_no_frm      IN com_emp_com_bill_mst.bill_no%TYPE,
      -- Parameter Bill no from
      p_bill_no_to       IN com_emp_com_bill_mst.bill_no%TYPE,
      -- Parameter Bill no to
      p_date_from        IN DATE,
      -- Parameter Bill date from
      p_date_to          IN DATE,
      -- Parameter Bill date to
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2,
      -- IF Y Then consider descend office
      p_user_type        IN VARCHAR2
   ----IF 1 THEN HEAD OFFICE USER
   )
      RETURN com_employee_com_bill_info_tab
      PIPELINED
   AS
      l_com_bill   com_employee_com_bill_info_row;
   BEGIN
      FOR i
      IN (  SELECT   m.bill_no,
                     m.bill_date,
                     m.emp_gid,
                     e.emp_id,
                     e.emp_nm_eng,
                     c.agent_id,
                     f_agent_nm (c.agent_id) agent_nm,
                     c.bill_no fa_bill_no,
                     d.pgid,
                     fun_ins_pgid_to_policy_no (s.pgid) policy_no,
                     e.desig_cd,
                     f_desig (e.desig_cd) desig_nm,
                     e.emp_type_cd,
                     (SELECT   emp_type_nm
                        FROM   hrm_emp_type
                       WHERE   emp_type_cd = e.emp_type_cd)
                        emp_type_nm,
                     m.office_cd,
                     f_office (m.office_cd) office_nm,
                     d.gross_bill_amt gross_payable_amt,
                     d.tax_ded_amt,
                     d.net_bill_amt bill_amount,
                     m.ins_tp_cd,
                     NVL (m.disburse_status, 0) disburse_status,
                     d.comm_ded_amt,
                     (NVL (d.net_bill_amt, 0) - NVL (d.comm_ded_amt, 0))
                        net_payable_amt
              FROM   com_emp_com_bill_mst m,
                     com_emp_com_bill_dtl d,
                     (  SELECT   g.agent_id,
                                 g.bill_no,
                                 g.pgid,
                                 g.prem_due_dt
                          FROM   com_agent_com_detail g
                      GROUP BY   g.agent_id,
                                 g.bill_no,
                                 g.pgid,
                                 g.prem_due_dt) c,
                     ins_p_summery s,
                     hrm_employee e
             WHERE       m.emp_gid = NVL (p_emp_gid, m.emp_gid)
                     AND m.ins_tp_cd = p_ins_tp_cd
                     AND m.bill_no = d.bill_no
                     AND d.pgid = c.pgid
                     AND d.prem_due_dt = c.prem_due_dt
                     AND s.pgid = NVL (p_pgid, s.pgid)
                     AND d.pgid = NVL (p_pgid, d.pgid)
                     --AND d.earning_cd = c.earning_cd
                     --AND s.comm_date = c.prem_due_dt
                     AND s.pgid = d.pgid
                     AND e.emp_type_cd = NVL (p_emp_type, e.emp_type_cd)
                     AND ( (p_user_type = '0'
                            AND NVL (m.disburse_status, '0') = '0')
                          OR (p_user_type = '1'
                              AND NVL (m.disburse_status, '0') = '1'
                              OR NVL (m.disburse_status, '0') = '0'))
                     AND ( (NVL (p_descendant_off, '0') = '0'
                            AND m.office_cd = NVL (p_office_cd, m.office_cd))
                          OR (NVL (p_descendant_off, '0') = '1'
                              AND m.office_cd IN
                                       (    SELECT   office_cd
                                              FROM   hrm_office_setup
                                        START WITH   office_cd = p_office_cd
                                        CONNECT BY   PRIOR office_cd =
                                                        control_office_cd)))
                     AND m.bill_no BETWEEN NVL (p_bill_no_frm, m.bill_no)
                                       AND  NVL (p_bill_no_to, m.bill_no)
                     AND m.bill_date BETWEEN NVL (p_date_from, m.bill_date)
                                         AND  NVL (p_date_to, m.bill_date)
                     AND m.emp_gid = e.emp_gid
          ORDER BY   policy_no)
      LOOP
         l_com_bill.bill_no := i.bill_no;
         l_com_bill.bill_date := i.bill_date;
         l_com_bill.emp_gid := i.emp_gid;
         l_com_bill.emp_id := i.emp_id;
         l_com_bill.agent_id := i.agent_id;
         l_com_bill.agent_nm := i.agent_nm;
         l_com_bill.fa_bill_no := i.fa_bill_no;
         l_com_bill.pgid := i.pgid;
         l_com_bill.policy_no := i.policy_no;
         l_com_bill.emp_nm_eng := i.emp_nm_eng;
         l_com_bill.desig_cd := i.desig_cd;
         l_com_bill.desig_nm := i.desig_nm;
         l_com_bill.emp_type_cd := i.emp_type_cd;
         l_com_bill.emp_type_nm := i.emp_type_nm;
         l_com_bill.office_cd := i.office_cd;
         l_com_bill.office_nm := i.office_nm;
         l_com_bill.gross_payable_amt := i.gross_payable_amt;
         l_com_bill.tax_ded_amt := i.tax_ded_amt;
         l_com_bill.bill_amount := i.bill_amount;
         l_com_bill.ins_tp_cd := i.ins_tp_cd;
         l_com_bill.disburse_status := i.disburse_status;
         l_com_bill.comm_ded_amt := i.comm_ded_amt;
         l_com_bill.net_payable_amt := i.net_payable_amt;
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_com_employee_com_bill_info;

   --- 9. Employee Commission Bill for PLICL (UM BM BC DC and Above)
   FUNCTION fun_com_emp_com_bill_plicl (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_gid          IN hrm_employee.emp_gid%TYPE,
      -- Parameter: Agent Id
      p_emp_type         IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: pgid
      p_pgid             IN ins_p_summery.pgid%TYPE,
      p_bill_no_frm      IN com_emp_com_bill_mst.bill_no%TYPE,
      -- Parameter Bill no from
      p_bill_no_to       IN com_emp_com_bill_mst.bill_no%TYPE,
      -- Parameter Bill no to
      p_date_from        IN DATE,
      -- Parameter Bill date from
      p_date_to          IN DATE,
      -- Parameter Bill date to
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Contain Office Code
      p_descendant_off   IN VARCHAR2,
      -- IF Y Then consider descend office
      p_user_type        IN VARCHAR2,
      ----IF 1 THEN HEAD OFFICE USER
      p_emp_type_cd_gr   IN VARCHAR2,
      ----p_emp_type_cd_gr here '1' means UM and BM and '2' Means Above BM
      p_earning_cd       IN VARCHAR2
   -- for p_emp_type_cd_gr='2' can input the p_earning_cd
   )
      RETURN com_emp_com_bill_plicl_tab
      PIPELINED
   AS
      l_com_bill   com_emp_com_bill_plicl_row;
   BEGIN
      FOR i
      IN (SELECT   m.bill_no,
                   m.bill_date,
                   m.emp_gid,
                   e.emp_id,
                   e.emp_nm_eng,
                   d.pgid,
                   fun_ins_pgid_to_policy_no (s.pgid) policy_no,
                   s.installment_premium,
                   d.prem_due_dt,
                   e.desig_cd,
                   f_desig (e.desig_cd) desig_nm,
                   e.emp_type_cd,
                   (SELECT   emp_type_nm
                      FROM   hrm_emp_type
                     WHERE   emp_type_cd = e.emp_type_cd)
                      emp_type_nm,
                   m.office_cd,
                   f_office (m.office_cd) office_nm,
                   d.gross_bill_amt gross_payable_amt,
                   d.tax_ded_amt,
                   d.net_bill_amt bill_amount,
                   m.ins_tp_cd,
                   NVL (m.disburse_status, 0) disburse_status
            FROM   com_emp_com_bill_mst m,
                   com_emp_com_bill_dtl d,
                   ins_p_summery s,
                   hrm_employee e
           WHERE       m.emp_gid = NVL (p_emp_gid, m.emp_gid)
                   AND m.ins_tp_cd = p_ins_tp_cd
                   AND m.bill_no = d.bill_no
                   AND s.pgid = NVL (p_pgid, s.pgid)
                   AND d.pgid = NVL (p_pgid, d.pgid)
                   AND s.pgid = d.pgid
                   AND e.emp_type_cd = NVL (p_emp_type, e.emp_type_cd)
                   AND ( (p_user_type = '0'
                          AND NVL (m.disburse_status, '0') = '0')
                        OR (p_user_type = '1'
                            AND NVL (m.disburse_status, '0') = '1'
                            OR NVL (m.disburse_status, '0') = '0'))
                   AND ( (NVL (p_descendant_off, '0') = '0'
                          AND m.office_cd = NVL (p_office_cd, m.office_cd))
                        OR (NVL (p_descendant_off, '0') = '1'
                            AND m.office_cd IN
                                     (    SELECT   office_cd
                                            FROM   hrm_office_setup
                                      START WITH   office_cd = p_office_cd
                                      CONNECT BY   PRIOR office_cd =
                                                      control_office_cd)))
                   AND m.bill_no BETWEEN NVL (p_bill_no_frm, m.bill_no)
                                     AND  NVL (p_bill_no_to, m.bill_no)
                   AND m.bill_date BETWEEN NVL (p_date_from, m.bill_date)
                                       AND  NVL (p_date_to, m.bill_date)
                   AND m.emp_gid = e.emp_gid
                   AND p_emp_type_cd_gr = '1'                 --Only UM and BM
          UNION ALL
          SELECT   m.bill_no,
                   m.bill_date,
                   m.emp_gid,
                   e.emp_id,
                   e.emp_nm_eng,
                   cd.pgid,
                   fun_ins_pgid_to_policy_no (cd.pgid) policy_no,
                   cd.premium_amt installment_premium,
                   cd.prem_due_date prem_due_dt,
                   e.desig_cd,
                   f_desig (e.desig_cd) desig_nm,
                   e.emp_type_cd,
                   (SELECT   emp_type_nm
                      FROM   hrm_emp_type
                     WHERE   emp_type_cd = e.emp_type_cd)
                      emp_type_nm,
                   m.office_cd,
                   f_office (m.office_cd) office_nm,
                   cd.gross_payable_amt gross_payable_amt,
                   cd.tax_ded_amt,
                   cd.net_payable_amt bill_amount,
                   m.ins_tp_cd,
                   NVL (m.disburse_status, 0) disburse_status
            FROM   com_emp_bon_com_bil_mst m,
                   com_emp_bon_com_bil_dtl d,
                   hrm_employee e,
                   com_dev_emp_bonus_comm c,
                   com_dev_emp_bonus_comm_dtl cd,
                   ins_p_summery s
           WHERE       m.bill_no = d.bill_no
                   AND m.emp_gid = e.emp_gid
                   AND d.payable_no = c.payable_no
                   AND c.payable_no = cd.payable_no
                   AND cd.pgid = s.pgid
                   AND m.emp_gid = NVL (p_emp_gid, m.emp_gid)
                   AND e.emp_type_cd = p_emp_type
                   AND m.bill_date BETWEEN p_date_from AND p_date_to
                   AND ( (p_user_type = '0'
                          AND NVL (m.disburse_status, '0') = '0')
                        OR (p_user_type = '1'
                            AND NVL (m.disburse_status, '0') = '1'
                            OR NVL (m.disburse_status, '0') = '0'))
                   AND d.earning_cd = NVL (p_earning_cd, d.earning_cd)
                   AND EXISTS
                         (SELECT   1
                            FROM   (SELECT   p_office_cd office_cd
                                      FROM   DUAL
                                     WHERE   NVL (p_descendant_off, '0') =
                                                '0'
                                    UNION ALL
                                        SELECT   office_cd
                                          FROM   hrm_office_setup
                                         WHERE   NVL (p_descendant_off, '0') =
                                                    '1'
                                    START WITH   office_cd = p_office_cd
                                    CONNECT BY   PRIOR office_cd =
                                                    control_office_cd) a
                           WHERE   a.office_cd = m.office_cd)
                   AND p_emp_type_cd_gr = '2'                --Above BM to top
                                             )
      LOOP
         l_com_bill.bill_no := i.bill_no;
         l_com_bill.bill_date := i.bill_date;
         l_com_bill.emp_gid := i.emp_gid;
         l_com_bill.emp_id := i.emp_id;
         l_com_bill.premium_amt := i.installment_premium;
         l_com_bill.prem_due_dt := i.prem_due_dt;
         l_com_bill.pgid := i.pgid;
         l_com_bill.policy_no := i.policy_no;
         l_com_bill.emp_nm_eng := i.emp_nm_eng;
         l_com_bill.desig_cd := i.desig_cd;
         l_com_bill.desig_nm := i.desig_nm;
         l_com_bill.emp_type_cd := i.emp_type_cd;
         l_com_bill.emp_type_nm := i.emp_type_nm;
         l_com_bill.office_cd := i.office_cd;
         l_com_bill.office_nm := i.office_nm;
         l_com_bill.gross_payable_amt := i.gross_payable_amt;
         l_com_bill.tax_ded_amt := i.tax_ded_amt;
         l_com_bill.bill_amount := i.bill_amount;
         l_com_bill.ins_tp_cd := i.ins_tp_cd;
         l_com_bill.disburse_status := i.disburse_status;
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_com_emp_com_bill_plicl;

   --- . Office Source Tax Statement ---
   FUNCTION fun_com_off_source_tax (
      p_ins_tp_cd        IN ins_insurance_type.ins_tp_cd%TYPE,
      -- Parameter: Insurance Type
      p_emp_type_cd      IN hrm_emp_type.emp_type_cd%TYPE,
      -- Parameter: Employee Type
      p_emp_id           IN hrm_employee.emp_id%TYPE,
      p_bill_date_fm     IN DATE,
      p_bill_date_to     IN DATE,
      p_office_cd        IN hrm_office.office_cd%TYPE,
      -- Parameter:Office Code
      p_descendant_off   IN VARCHAR2
   -- IF 1 Then consider descend office
   )
      RETURN com_off_source_tax_tab
      PIPELINED
   AS
      l_com_bill   com_off_source_tax_row;
   BEGIN
      FOR i
      IN (  SELECT   emp_id,
                     idra_cd,
                     agent_nm,
                     desig_nm,
                     desig_cd,
                     office_cd,
                     f_office (fun_find_service_off (office_cd)) service_off,
                     office_add1,
                     office_nm,
                     comm_amt,
                     initial_comm_amt,
                     initial_com_return,
                     tax_amt,
                     comm_after_tax,
                     ins_tp_cd,
                     premium_amt,
                     agent_nm || ' [ ' || emp_id ||' ,'|| idra_cd||' ] ' employee_nm,
                     office_cd || ' , ' || office_nm office,
                     f_in_word (comm_amt) com_aftr_word,
                     f_in_word (tax_amt) s_tax_word,
                     f_in_word (comm_after_tax) aftr_tax_word,
                     f_in_word (premium_amt) prem_amt_word
              FROM   (  SELECT   a.agent_id emp_id,
                                 f_agent_idra_cd (a.agent_id) idra_cd,
                                 f_agent_nm (a.agent_id) agent_nm,
                                 'FA' desig_nm,
                                 '05' desig_cd,
                                 a.office_cd,
                                 o.office_add1,
                                 o.office_nm,
                                 SUM (b.gross_bill_amt) comm_amt,
                                 SUM (b.comm_ded_amt) initial_comm_amt,
                                 SUM(  NVL (b.paid_interest_amt, 0)
                                     + NVL (b.paid_ded_amount, 0)
                                     + NVL (b.um_paid_interest_amt, 0)
                                     + NVL (b.um_paid_ded_amount, 0)
                                     + NVL (b.bm_paid_interest_amt, 0)
                                     + NVL (b.bm_paid_ded_amount, 0))
                                    initial_com_return,
                                 SUM (b.tax_ded_amt) tax_amt,
                                 SUM (b.net_bill_amt) comm_after_tax,
                                 NVL (p_ins_tp_cd, 0) ins_tp_cd,
                                 SUM(DECODE (
                                        t.cal_based_on,
                                        '6',
                                        s.life_premium,
                                        '7',
                                        (  NVL (s.life_premium, 0)
                                         + NVL (s.suppl_ben_premium, 0)
                                         + NVL (s.suppl_product_premium, 0)),
                                        '8',
                                        (NVL (s.suppl_ben_premium, 0)
                                         + NVL (s.suppl_product_premium, 0)),
                                        s.installment_premium
                                     ))
                                    premium_amt
                          FROM   com_agent_com_bill_mst a,
                                 com_agent_com_bill_dtl b,
                                 --ins_prem_acc_receivable c,
                                 ins_p_summery s,
                                 com_earn_tp t,
                                 hrm_office o
                         WHERE       a.bill_no = b.bill_no
                                 --AND b.pgid = c.pgid
                                 --AND b.prem_due_dt = c.next_due_dt
                                 AND a.office_cd = o.office_cd
                                 AND b.pgid = s.pgid
                                 AND b.earning_cd = t.earning_cd
                                 AND a.agent_id = NVL (p_emp_id, a.agent_id)
                                 AND a.bill_date BETWEEN NVL (p_bill_date_fm,
                                                              a.bill_date)
                                                     AND  NVL (p_bill_date_to,
                                                               a.bill_date)
                                 AND ( (NVL (p_descendant_off, '0') = '0'
                                        AND a.office_cd =
                                              NVL (p_office_cd, a.office_cd))
                                      OR (NVL (p_descendant_off, '0') = '1'
                                          AND a.office_cd IN
                                                   (    SELECT   office_cd
                                                          FROM   hrm_office_setup
                                                    START WITH   office_cd =
                                                                    p_office_cd
                                                    CONNECT BY   PRIOR office_cd =
                                                                    control_office_cd)))
                      GROUP BY   a.agent_id,
                                 a.office_cd                    --,a.ins_tp_cd
                                            ,
                                 o.office_cd,
                                 o.office_add1,
                                 o.office_nm
                      UNION
                        SELECT   f_emp_id (a.emp_gid) emp_id,
                                 NULL idra_cd,
                                 f_emp_nm (a.emp_gid) agent_nm,
                                 f_emp_type_nm (a.emp_gid) desig_nm,
                                 f_emp_type_cd (a.emp_gid) desig_cd,
                                 a.office_cd,
                                 o.office_add1,
                                 o.office_nm,
                                 SUM (b.gross_bill_amt) comm_amt,
                                 SUM (b.comm_ded_amt) initial_comm_amt,
                                 SUM (0) initial_com_return,
                                 SUM (b.tax_ded_amt) tax_amt,
                                 SUM (b.net_bill_amt) comm_after_tax,
                                 NVL (p_ins_tp_cd, 0) ins_tp_cd,
                                 SUM (c.installment_premium) premium_amt
                          FROM   com_emp_com_bill_mst a,
                                 com_emp_com_bill_dtl b,
                                 ins_prem_acc_receivable c,
                                 hrm_office o
                         WHERE       a.bill_no = b.bill_no
                                 AND b.pgid = c.pgid
                                 AND b.prem_due_dt = c.next_due_dt
                                 AND a.office_cd = o.office_cd
                                 AND a.emp_gid = NVL (p_emp_id, a.emp_gid)
                                 AND a.bill_date BETWEEN NVL (p_bill_date_fm,
                                                              a.bill_date)
                                                     AND  NVL (p_bill_date_to,
                                                               a.bill_date)
                                 AND ( (NVL (p_descendant_off, '0') = '0'
                                        AND a.office_cd =
                                              NVL (p_office_cd, a.office_cd))
                                      OR (NVL (p_descendant_off, '0') = '1'
                                          AND a.office_cd IN
                                                   (    SELECT   office_cd
                                                          FROM   hrm_office_setup
                                                    START WITH   office_cd =
                                                                    p_office_cd
                                                    CONNECT BY   PRIOR office_cd =
                                                                    control_office_cd)))
                      GROUP BY   a.emp_gid,
                                 a.office_cd                    --,a.ins_tp_cd
                                            ,
                                 o.office_add1,
                                 o.office_nm)
             WHERE   ins_tp_cd = NVL (p_ins_tp_cd, ins_tp_cd)
                     AND (p_emp_type_cd IS NULL
                          OR (p_emp_type_cd IS NOT NULL
                              AND desig_cd = p_emp_type_cd))
          ORDER BY   office_cd, desig_cd)
      LOOP
         l_com_bill.agent_nm := i.agent_nm;
         l_com_bill.emp_id := i.emp_id;
         l_com_bill.idra_cd := i.idra_cd;
         l_com_bill.office_cd := i.office_cd;
         l_com_bill.office_add1 := i.office_add1;
         l_com_bill.office_name := i.office_nm;
         l_com_bill.service_off := i.service_off;
         l_com_bill.desig_nm := i.desig_nm;
         l_com_bill.desig_cd := i.desig_cd;
         l_com_bill.comm_amt := i.comm_amt;
         l_com_bill.initial_comm_amt := i.initial_comm_amt;
         l_com_bill.initial_com_return := i.initial_com_return;
         l_com_bill.tax_amt := i.tax_amt;
         l_com_bill.comm_after_tax := i.comm_after_tax;
         l_com_bill.ins_tp_cd := i.ins_tp_cd;
         l_com_bill.premium_amt := i.premium_amt;
         l_com_bill.employee_nm := i.employee_nm;
         l_com_bill.office := i.office;
         l_com_bill.com_aftr_word := i.com_aftr_word;
         l_com_bill.s_tax_word := i.s_tax_word;
         l_com_bill.aftr_tax_word := i.aftr_tax_word;
         l_com_bill.prem_amt_word := i.prem_amt_word;
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_com_off_source_tax;
END pkg_commission_report;
/


--
-- PKG_DASHBOARD  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_dashboard
IS

   PROCEDURE pro_coll_deposit_dashboard (p_trans_date DATE, p_user VARCHAR2)
   IS
      /******************************************************************************
         NAME:       pro_coll_deposit_dashboard

         REVISIONS:
         Ver        Date        Author           Description
         ---------  ----------  ---------------  ------------------------------------
         1.0        31/10/2021   Md. Sayadur Rahaman      1. Created this procedure.

       ******************************************************************************/
      v_opening_bal             acc_coll_deposit_dashboad.opening_bal%TYPE;
      v_first_year_target_amt   acc_coll_deposit_dashboad.first_year_target_amt%TYPE;
      v_renewal_target_amt      acc_coll_deposit_dashboad.renewal_target_amt%TYPE;
      v_count                   NUMBER;
      v_error                   VARCHAR2 (200);
      v_deposit_amt             NUMBER (12);
      v_trans_date              DATE;
      v_process_time            DATE;
      v_rec_count               NUMBER := 0;
   BEGIN
      v_process_time := SYSDATE;

      IF p_trans_date IS NULL
      THEN
         v_trans_date := TRUNC (SYSDATE);
      ELSE
         v_trans_date := p_trans_date;
      END IF;

      pro_premium_coll_summery (p_user, v_error);

      FOR i
      IN (  SELECT   office_cd,
                     servicing_off,
                     coll_date,
                     SUM (first_prem_amt) first_prem_amt,
                     SUM (deff_prem_amt) deff_prem_amt,
                     SUM (sec_prem_amt) sec_prem_amt,
                     SUM (ren_prem_amt) ren_prem_amt,
                     SUM (grp_prem_amt) grp_prem_amt,
                     SUM (others_coll_amt) others_coll_amt,
                     SUM (commission_amt) commission_amt,
                     SUM (deposit_amt) deposit_amt
              FROM   (SELECT   active_office_cd office_cd,
                               active_regional_cd servicing_off,
                               receive_dt coll_date,
                               f_coll_amount first_prem_amt,
                               d_coll_amount deff_prem_amt,
                               s_coll_amount sec_prem_amt,
                               r_coll_amount ren_prem_amt,
                               0 grp_prem_amt,
                               0 others_coll_amt,
                               fun_comm_cal_dashboard (s.product_cd,
                                                       s.term,
                                                       f_coll_amount,
                                                       d_coll_amount,
                                                       s_coll_amount,
                                                       r_coll_amount,
                                                       0)
                                  commission_amt,
                               0 deposit_amt
                        FROM   acc_coll_summery c, ins_p_summery s
                       WHERE       c.pgid = s.pgid
                               AND receive_dt = v_trans_date
                               AND rec_status = '1'
                      UNION ALL
                      SELECT   active_office_cd office_cd,
                               fun_find_service_off (active_office_cd)
                                  servicing_off,
                               receive_date coll_date,
                               0 first_prem_amt,
                               0 deff_prem_amt,
                               0 sec_prem_amt,
                               0 ren_prem_amt,
                               coll_amount grp_prem_amt,
                               0 others_coll_amt,
                               fun_comm_cal_dashboard (s.product_cd,
                                                       s.term,
                                                       0,
                                                       0,
                                                       0,
                                                       0,
                                                       coll_amount)
                                  commission_amt,
                               0 deposit_amt
                        FROM   grp_receivables r, grp_group_ins_summery s
                       WHERE       r.pgid = s.pgid
                               AND receive_date = v_trans_date
                               AND rec_status = '1'
                      UNION ALL
                      SELECT   r.office_cd,
                               fun_find_service_off (r.office_cd) servicing_off,
                               r.receive_dt coll_date,
                               0 first_prem_amt,
                               0 deff_prem_amt,
                               0 sec_prem_amt,
                               0 ren_prem_amt,
                               0 grp_prem_amt,
                               r.trns_amt others_coll_amt,
                               0 commission_amt,
                               0 deposit_amt
                        FROM   acc_oth_coll_mst r
                       WHERE       r.approved_st <> '2'
                               AND r.receive_dt = v_trans_date
                               AND r.status = '1'
                      UNION ALL
                      SELECT   r.active_office_cd office_cd,
                               fun_find_service_off (r.active_office_cd)
                                  servicing_off,
                               r.receive_date coll_date,
                               0 first_prem_amt,
                               0 deff_prem_amt,
                               0 sec_prem_amt,
                               0 ren_prem_amt,
                               0 grp_prem_amt,
                               r.coll_amount others_coll_amt,
                               0 commission_amt,
                               0 deposit_amt
                        FROM   acc_alt_receivables r
                       WHERE   r.rec_status = '1'
                               AND r.receive_date = v_trans_date
                      UNION ALL
                      SELECT   r.active_office_cd office_cd,
                               fun_find_service_off (r.active_office_cd)
                                  servicing_off,
                               r.receive_date coll_date,
                               0 first_prem_amt,
                               0 deff_prem_amt,
                               0 sec_prem_amt,
                               0 ren_prem_amt,
                               0 grp_prem_amt,
                               r.coll_amount others_coll_amt,
                               0 commission_amt,
                               0 deposit_amt
                        FROM   pol_loan_recovery r
                       WHERE       r.rec_status = '1'
                               AND r.collection_type = '03'
                               AND r.receive_date = v_trans_date
                      UNION ALL
                      SELECT   r.active_office_cd office_cd,
                               fun_find_service_off (r.active_office_cd)
                                  servicing_off,
                               r.receive_date coll_date,
                               0 first_prem_amt,
                               0 deff_prem_amt,
                               0 sec_prem_amt,
                               0 ren_prem_amt,
                               0 grp_prem_amt,
                               r.coll_amount others_coll_amt,
                               0 commission_amt,
                               0 deposit_amt
                        FROM   pay_loan_recovery r
                       WHERE       r.rec_status = '1'
                               AND r.collection_type = '03'
                               AND r.receive_date = v_trans_date
                      UNION ALL
                      SELECT   office_cd,
                               fun_find_service_off (r.office_cd) servicing_off,
                               tran_dt coll_date,
                               0 first_prem_amt,
                               0 deff_prem_amt,
                               0 sec_prem_amt,
                               0 ren_prem_amt,
                               0 grp_prem_amt,
                               0 others_coll_amt,
                               0 commission_amt,
                               deposit_amt
                        FROM   acc_bank_tran_actual r
                       WHERE   tran_dt = v_trans_date)
          --WHERE office_cd = '07042'
          GROUP BY   office_cd, servicing_off, coll_date)
      LOOP
         ---Findings the office wise opening balance
         /*SELECT SUM (fun_gl_head_opening (c.glac_sl_no,
                                          '07001',
                                          i.office_cd,
                                          '0',
                                          i.coll_date,
                                          NULL
                                         )
                    )
           INTO v_opening_bal
           FROM acc_gl_coa c
          WHERE glac_sl_no IN ('101562', '101575');*/
         BEGIN
            SELECT   COUNT (1)
              INTO   v_rec_count
              FROM   acc_coll_deposit_dashboad
             WHERE   office_cd = i.office_cd AND coll_date = i.coll_date - 1;

            IF v_rec_count > 0
            THEN
               SELECT   NVL (
                             opening_bal
                           + first_prem_amt
                           + deff_prem_amt
                           + sec_prem_amt
                           + ren_prem_amt
                           + grp_prem_amt
                           + others_coll_amt
                           - bank_deposit_amt,
                           0
                        )
                 INTO   v_opening_bal
                 FROM   acc_coll_deposit_dashboad
                WHERE   office_cd = i.office_cd
                        AND coll_date = v_trans_date - 1;
            ELSE
               SELECT   NVL (
                             SUM (first_prem_amt)
                           + SUM (deff_prem_amt)
                           + SUM (sec_prem_amt)
                           + SUM (ren_prem_amt)
                           + SUM (grp_prem_amt)
                           + SUM (others_coll_amt)
                           - SUM (deposit_amt),
                           0
                        )
                 INTO   v_opening_bal
                 FROM   (SELECT   f_coll_amount first_prem_amt,
                                  d_coll_amount deff_prem_amt,
                                  s_coll_amount sec_prem_amt,
                                  r_coll_amount ren_prem_amt,
                                  0 grp_prem_amt,
                                  0 others_coll_amt,
                                  0 deposit_amt
                           FROM   acc_coll_summery c, ins_p_summery s
                          WHERE   c.pgid = s.pgid AND rec_status = '1'
                                  AND receive_dt BETWEEN TO_DATE (
                                                            '01-jan-2021'
                                                         )
                                                     AND  v_trans_date - 1
                                  AND active_office_cd = i.office_cd
                         UNION ALL
                         SELECT   0 first_prem_amt,
                                  0 deff_prem_amt,
                                  0 sec_prem_amt,
                                  0 ren_prem_amt,
                                  coll_amount grp_prem_amt,
                                  0 others_coll_amt,
                                  0 deposit_amt
                           FROM   grp_receivables r, grp_group_ins_summery s
                          WHERE   r.pgid = s.pgid AND rec_status = '1'
                                  AND receive_date BETWEEN TO_DATE (
                                                              '01-jan-2021'
                                                           )
                                                       AND  v_trans_date - 1
                                  AND active_office_cd = i.office_cd
                         UNION ALL
                         SELECT   0 first_prem_amt,
                                  0 deff_prem_amt,
                                  0 sec_prem_amt,
                                  0 ren_prem_amt,
                                  0 grp_prem_amt,
                                  r.trns_amt others_coll_amt,
                                  0 deposit_amt
                           FROM   acc_oth_coll_mst r
                          WHERE   r.approved_st <> '2' AND r.status = '1'
                                  AND receive_dt BETWEEN TO_DATE (
                                                            '01-jan-2021'
                                                         )
                                                     AND  v_trans_date - 1
                                  AND r.office_cd = i.office_cd
                         UNION ALL
                         SELECT   0 first_prem_amt,
                                  0 deff_prem_amt,
                                  0 sec_prem_amt,
                                  0 ren_prem_amt,
                                  0 grp_prem_amt,
                                  r.coll_amount others_coll_amt,
                                  0 deposit_amt
                           FROM   acc_alt_receivables r
                          WHERE   r.rec_status = '1'
                                  AND receive_date BETWEEN TO_DATE (
                                                              '01-jan-2021'
                                                           )
                                                       AND  v_trans_date - 1
                                  AND r.active_office_cd = i.office_cd
                         UNION ALL
                         SELECT   0 first_prem_amt,
                                  0 deff_prem_amt,
                                  0 sec_prem_amt,
                                  0 ren_prem_amt,
                                  0 grp_prem_amt,
                                  r.coll_amount others_coll_amt,
                                  0 deposit_amt
                           FROM   pol_loan_recovery r
                          WHERE   r.rec_status = '1'
                                  AND r.collection_type = '03'
                                  AND receive_date BETWEEN TO_DATE (
                                                              '01-jan-2021'
                                                           )
                                                       AND  v_trans_date - 1
                                  AND r.active_office_cd = i.office_cd
                         UNION ALL
                         SELECT   0 first_prem_amt,
                                  0 deff_prem_amt,
                                  0 sec_prem_amt,
                                  0 ren_prem_amt,
                                  0 grp_prem_amt,
                                  r.coll_amount others_coll_amt,
                                  0 deposit_amt
                           FROM   pay_loan_recovery r
                          WHERE   r.rec_status = '1'
                                  AND r.collection_type = '03'
                                  AND receive_date BETWEEN TO_DATE (
                                                              '01-jan-2021'
                                                           )
                                                       AND  v_trans_date - 1
                                  AND r.active_office_cd = i.office_cd
                         UNION ALL
                         SELECT   0 first_prem_amt,
                                  0 deff_prem_amt,
                                  0 sec_prem_amt,
                                  0 ren_prem_amt,
                                  0 grp_prem_amt,
                                  0 others_coll_amt,
                                  deposit_amt
                           FROM   acc_bank_tran_actual r
                          WHERE   tran_dt BETWEEN TO_DATE ('01-jan-2021')
                                              AND  v_trans_date - 1
                                  AND r.office_cd = i.office_cd);
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_opening_bal := 0;
         END;

         ---Findings the office wise target amount
         BEGIN
            SELECT   t.first_yr_target, t.renewal_target
              INTO   v_first_year_target_amt, v_renewal_target_amt
              FROM   hrm_office_target t
             WHERE   i.coll_date BETWEEN start_dt AND end_dt
                     AND office_cd = i.office_cd;
         EXCEPTION
            WHEN OTHERS
            THEN
               BEGIN
                  SELECT   t.first_yr_target, t.renewal_target
                    INTO   v_first_year_target_amt, v_renewal_target_amt
                    FROM   hrm_office_target t
                   WHERE   i.coll_date BETWEEN start_dt AND end_dt
                           AND f_off_catg_cd (i.office_cd) = t.off_catg_cd;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_first_year_target_amt := 0;
                     v_renewal_target_amt := 0;
               END;
         END;

         SELECT   COUNT (1)
           INTO   v_count
           FROM   acc_coll_deposit_dashboad
          WHERE   office_cd = i.office_cd AND coll_date = i.coll_date;

         IF v_count > 0
         THEN
            UPDATE   acc_coll_deposit_dashboad
               SET   opening_bal = v_opening_bal,
                     first_prem_amt = i.first_prem_amt,
                     deff_prem_amt = i.deff_prem_amt,
                     sec_prem_amt = i.sec_prem_amt,
                     ren_prem_amt = i.ren_prem_amt,
                     grp_prem_amt = i.grp_prem_amt,
                     others_coll_amt = i.others_coll_amt,
                     commission_amt = i.commission_amt,
                     bank_deposit_amt = i.deposit_amt,
                     first_year_target_amt = v_first_year_target_amt,
                     renewal_target_amt = v_renewal_target_amt,
                     i_usr = p_user,
                     pre_process_date = process_date,
                     process_date = v_process_time
             WHERE   office_cd = i.office_cd AND coll_date = i.coll_date;
         ELSE
            INSERT INTO acc_coll_deposit_dashboad (office_cd,
                                                   servicing_off,
                                                   coll_date,
                                                   opening_bal,
                                                   first_prem_amt,
                                                   deff_prem_amt,
                                                   sec_prem_amt,
                                                   ren_prem_amt,
                                                   grp_prem_amt,
                                                   others_coll_amt,
                                                   commission_amt,
                                                   bank_deposit_amt,
                                                   first_year_target_amt,
                                                   renewal_target_amt,
                                                   i_usr,
                                                   process_date)
              VALUES   (i.office_cd,
                        i.servicing_off,
                        i.coll_date,
                        v_opening_bal,
                        i.first_prem_amt,
                        i.deff_prem_amt,
                        i.sec_prem_amt,
                        i.ren_prem_amt,
                        i.grp_prem_amt,
                        i.others_coll_amt,
                        i.commission_amt,
                        i.deposit_amt,
                        v_first_year_target_amt,
                        v_renewal_target_amt,
                        p_user,
                        v_process_time);
         END IF;
      END LOOP;

      COMMIT;

      BEGIN
         /*FOR j
         IN (SELECT   office_cd,
                      servicing_off,
                      first_year_target_amt,
                      renewal_target_amt
               FROM   acc_coll_deposit_dashboad d
              WHERE   coll_date = v_trans_date - 1
                      AND NOT EXISTS
                            (SELECT   1
                               FROM   acc_coll_deposit_dashboad
                              WHERE   coll_date = v_trans_date
                                      AND office_cd = d.office_cd))
         LOOP
--            SELECT   SUM (fun_gl_head_opening (c.glac_sl_no,
--                                               '07001',
--                                               j.office_cd,
--                                               '0',
--                                               v_trans_date,
--                                               NULL))
--              INTO   v_opening_bal
--              FROM   acc_gl_coa c
--             WHERE   glac_sl_no IN ('101562', '101575');
            SELECT     opening_bal
                     + first_prem_amt
                     + deff_prem_amt
                     + sec_prem_amt
                     + ren_prem_amt
                     + grp_prem_amt
                     + others_coll_amt
                     - bank_deposit_amt
              INTO   v_opening_bal
              FROM   acc_coll_deposit_dashboad
             WHERE   office_cd = j.office_cd AND coll_date = v_trans_date - 1;

            INSERT INTO acc_coll_deposit_dashboad (office_cd,
                                                   servicing_off,
                                                   coll_date,
                                                   opening_bal,
                                                   first_prem_amt,
                                                   deff_prem_amt,
                                                   sec_prem_amt,
                                                   ren_prem_amt,
                                                   grp_prem_amt,
                                                   others_coll_amt,
                                                   commission_amt,
                                                   bank_deposit_amt,
                                                   first_year_target_amt,
                                                   renewal_target_amt,
                                                   i_usr,
                                                   process_date)
              VALUES   (j.office_cd,
                        j.servicing_off,
                        v_trans_date,
                        v_opening_bal,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        j.first_year_target_amt,
                        j.renewal_target_amt,
                        p_user,
                        v_process_time);
         END LOOP;*/


         INSERT INTO acc_coll_deposit_dashboad (office_cd,
                                                servicing_off,
                                                coll_date,
                                                opening_bal,
                                                first_prem_amt,
                                                deff_prem_amt,
                                                sec_prem_amt,
                                                ren_prem_amt,
                                                grp_prem_amt,
                                                others_coll_amt,
                                                commission_amt,
                                                bank_deposit_amt,
                                                first_year_target_amt,
                                                renewal_target_amt,
                                                i_usr,
                                                process_date)
            SELECT   office_cd,
                     servicing_off,
                     v_trans_date,
                       opening_bal
                     + first_prem_amt
                     + deff_prem_amt
                     + sec_prem_amt
                     + ren_prem_amt
                     + grp_prem_amt
                     + others_coll_amt
                     - bank_deposit_amt
                        opening_balance,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     0,
                     first_year_target_amt,
                     renewal_target_amt,
                     p_user,
                     v_process_time
              FROM   ACC_COLL_DEPOSIT_DASHBOAD d
             WHERE   coll_date = v_trans_date - 1
                     AND NOT EXISTS
                           (SELECT   1
                              FROM   ACC_COLL_DEPOSIT_DASHBOAD
                             WHERE   coll_date = v_trans_date
                                     AND office_cd = d.office_cd);
      END;

      COMMIT;
   END;

   FUNCTION fun_coll_tar_dashboard (p_office_type         CHAR,
                                    --1'=Collection Office,'2'=Servicing Office (Mandatory)
                                    p_servicing_off_cd    VARCHAR2, --Optional
                                    p_office_cd           VARCHAR2, --Optional
                                    p_date_from           DATE,    --Mandatory
                                    p_date_to             DATE     --Mandatory
                                                              )
      RETURN tp_coll_tar_tab
      PIPELINED
   AS
      l_com_bill                tp_coll_tar_row;
      v_sl_no                   NUMBER := 0;
      v_first_year_target_amt   NUMBER (12);
      v_renewal_target_amt      NUMBER (12);
      v_total_target            NUMBER (12);
   BEGIN
      FOR i
      IN (  SELECT   office_cd,
                     SUM (f_coll_amount) f_coll_amount,
                     SUM (d_coll_amount) d_coll_amount,
                     SUM (f_coll_amount + d_coll_amount) first_year_prem,
                     SUM (s_coll_amount) s_coll_amount,
                     SUM (r_coll_amount) r_coll_amount,
                     SUM (s_coll_amount + r_coll_amount) renewal_prem,
                     SUM(  f_coll_amount
                         + d_coll_amount
                         + s_coll_amount
                         + r_coll_amount)
                        total_prem
              FROM   (SELECT   CASE
                                  WHEN p_office_type = '1'
                                  THEN
                                     active_office_cd
                                  WHEN p_office_type = '2'
                                  THEN
                                     active_regional_cd
                               END
                                  office_cd,
                               f_coll_amount,
                               d_coll_amount,
                               s_coll_amount,
                               r_coll_amount
                        FROM   acc_coll_summery
                       WHERE   active_office_cd =
                                  NVL (p_office_cd, active_office_cd)
                               AND active_regional_cd =
                                     NVL (p_servicing_off_cd,
                                          active_regional_cd)
                               AND receive_dt BETWEEN p_date_from AND p_date_to)
          GROUP BY   office_cd
          ORDER BY   office_cd)
      LOOP
         ---Findings the office wise target amount
         BEGIN
            SELECT   t.first_yr_target,
                     t.renewal_target,
                     t.first_yr_target + t.renewal_target
              INTO   v_first_year_target_amt,
                     v_renewal_target_amt,
                     v_total_target
              FROM   hrm_office_target t
             WHERE   p_date_to BETWEEN start_dt AND end_dt
                     AND office_cd = i.office_cd;
         EXCEPTION
            WHEN OTHERS
            THEN
               BEGIN
                  SELECT   t.first_yr_target,
                           t.renewal_target,
                           t.first_yr_target + t.renewal_target
                    INTO   v_first_year_target_amt,
                           v_renewal_target_amt,
                           v_total_target
                    FROM   hrm_office_target t
                   WHERE   p_date_to BETWEEN start_dt AND end_dt
                           AND f_off_catg_cd (i.office_cd) = t.off_catg_cd;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_first_year_target_amt := 0;
                     v_renewal_target_amt := 0;
               END;
         END;

         v_sl_no := v_sl_no + 1;
         l_com_bill.sl_no := v_sl_no;
         l_com_bill.office_cd := i.office_cd;
         l_com_bill.office_nm := rep_f_office (i.office_cd);
         l_com_bill.incharge_name :=
            rep_f_emp_nm (
               fun_ins_office_incharge (i.office_cd, p_date_from, p_date_to)
            );
         l_com_bill.f_coll_amount := i.f_coll_amount;
         l_com_bill.d_coll_amount := i.d_coll_amount;
         l_com_bill.first_year_prem := i.first_year_prem;
         l_com_bill.first_year_target := v_first_year_target_amt;

         IF v_first_year_target_amt > 0
         THEN
            l_com_bill.first_year_ach_ratio :=
               ROUND ( (i.first_year_prem * 100) / v_first_year_target_amt,
                      2);
         ELSE
            l_com_bill.first_year_ach_ratio := 0;
         END IF;

         l_com_bill.first_year_ach_amount :=
            i.first_year_prem - v_first_year_target_amt;
         l_com_bill.s_coll_amount := i.s_coll_amount;
         l_com_bill.r_coll_amount := i.r_coll_amount;
         l_com_bill.renewal_prem := i.renewal_prem;
         l_com_bill.renewal_target := v_renewal_target_amt;

         IF v_renewal_target_amt > 0
         THEN
            l_com_bill.renwal_ach_ratio :=
               ROUND ( (i.renewal_prem * 100) / v_renewal_target_amt, 2);
         ELSE
            l_com_bill.renwal_ach_ratio := 0;
         END IF;

         l_com_bill.renewal_ach_amount :=
            i.renewal_prem - v_renewal_target_amt;
         l_com_bill.total_target := v_total_target;
         l_com_bill.total_premium := i.total_prem;

         IF v_total_target > 0
         THEN
            l_com_bill.total_ach_ratio :=
               ROUND ( (i.total_prem * 100) / v_total_target, 2);
         ELSE
            l_com_bill.total_ach_ratio := 0;
         END IF;

         l_com_bill.total_ach_amount := i.total_prem - v_total_target;
         PIPE ROW (l_com_bill);
      END LOOP;

      RETURN;
   END fun_coll_tar_dashboard;
 /*
 SELECT sl_no, office_cd, office_nm, incharge_name, f_coll_amount,
     d_coll_amount, first_year_prem, first_year_target,
     first_year_ach_ratio, first_year_ach_amount, s_coll_amount,
     r_coll_amount, renewal_prem, renewal_target, renwal_ach_ratio,
     renewal_ach_amount, total_target, total_premium, total_ach_ratio,
     total_ach_amount
FROM TABLE (pkg_dashboard.fun_coll_tar_dashboard (:p_office_type,
                                                  :p_servicing_off_cd,
                                                  :p_office_cd,
                                                  :p_date_from,
                                                  :p_date_to
                                                 )
           )
 */
END;
/


--
-- PKG_EMP_ADV_REGISTER  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_emp_adv_register
IS
   /*******************************
   Debit Voucher
   Prepared by : Md. Sayadur Rahaman
   Date: 01-Jun-2017

   ********************************/
   FUNCTION rep_employee_wise (
      p_office_cd        IN   VARCHAR2,
      p_descendant_off   IN   CHAR,
      p_glac_sl_no       IN   VARCHAR2,
      p_date_from        IN   DATE,
      p_date_to          IN   DATE,
      p_party_type       IN   CHAR,        --here 01 for Employee 02=Supplier
      p_emp_gid               NUMBER,
      p_supp_id               NUMBER
   )
      RETURN acc_emp_adv_tab PIPELINED
   AS
      l_tab               acc_emp_adv_row;
      v_emp_id            hrm_employee.emp_id%TYPE;
      v_emp_nm_eng        hrm_employee.emp_nm_eng%TYPE;
      v_desig_cd          hrm_desig.desig_cd%TYPE;
      v_desig_nm          hrm_desig.desig_nm%TYPE;
      v_office_nm         hrm_office.office_nm%TYPE;
      v_approved_date     DATE;
      v_pre_payment_amt   NUMBER (10, 2);
      v_jv_amt            NUMBER (10, 2);
      v_mr_amt            NUMBER (10, 2);
      v_count             NUMBER (2)                     := 0;
      v_opening_bal       NUMBER (10, 2)                 := 0;
   BEGIN
      FOR i IN (SELECT NVL (a.emp_gid, b.emp_gid) emp_gid,
                       NVL (a.supplier_id, b.supplier_id) supplier_id,
                       NVL (a.glac_sl_no, b.glac_sl_no) glac_sl_no,
                       NVL (a.pay_amt, 0) pay_amt, NVL (b.jv_amt, 0) jv_amt,
                       NVL (b.mr_amt, 0) mr_amt
                  FROM (SELECT   emp_gid, supplier_id, glac_sl_no,
                                 SUM (pay_amt) pay_amt
                            FROM v_emp_adv_payment o
                           WHERE approved_date BETWEEN NVL (p_date_from,
                                                            approved_date
                                                           )
                                                   AND NVL (p_date_to,
                                                            approved_date
                                                           )
                             AND o.glac_sl_no =
                                              NVL (p_glac_sl_no, o.glac_sl_no)
                             AND (   (    NVL (p_descendant_off, '0') = '0'
                                      AND o.office_cd =
                                                NVL (p_office_cd, o.office_cd)
                                     )
                                  OR (    NVL (p_descendant_off, '0') = '1'
                                      AND o.office_cd IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             START WITH office_cd =
                                                                   p_office_cd
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                                     )
                                 )
                             AND (   p_party_type IS NULL
                                  OR (    p_party_type = '01'
                                      AND emp_gid = NVL (p_emp_gid, emp_gid)
                                     )
                                  OR (    p_party_type = '02'
                                      AND supplier_id =
                                                  NVL (p_supp_id, supplier_id)
                                     )
                                 )
                        GROUP BY emp_gid, supplier_id, glac_sl_no) a
                       FULL OUTER JOIN
                       (SELECT   emp_gid, supplier_id, glac_sl_no,
                                 SUM (jv_amt) jv_amt, SUM (mr_amt) mr_amt
                            FROM v_emp_adv_payment_recovery o
                           WHERE recovery_date BETWEEN NVL (p_date_from,
                                                            recovery_date
                                                           )
                                                   AND NVL (p_date_to,
                                                            recovery_date
                                                           )
                             AND o.glac_sl_no =
                                              NVL (p_glac_sl_no, o.glac_sl_no)
                             AND (   (    NVL (p_descendant_off, '0') = '0'
                                      AND o.office_cd =
                                                NVL (p_office_cd, o.office_cd)
                                     )
                                  OR (    NVL (p_descendant_off, '0') = '1'
                                      AND o.office_cd IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             START WITH office_cd =
                                                                   p_office_cd
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                                     )
                                 )
                             AND (   p_party_type IS NULL
                                  OR (    p_party_type = '01'
                                      AND emp_gid = NVL (p_emp_gid, emp_gid)
                                     )
                                  OR (    p_party_type = '02'
                                      AND supplier_id =
                                                  NVL (p_supp_id, supplier_id)
                                     )
                                 )
                        GROUP BY emp_gid, supplier_id, glac_sl_no) b
                       ON (   a.emp_gid = b.emp_gid
                           OR a.supplier_id = b.supplier_id
                          )
                     AND a.glac_sl_no = b.glac_sl_no
                       )
      LOOP
         BEGIN
            IF i.emp_gid IS NOT NULL
            THEN
               SELECT emp_id, emp_nm_eng, d.desig_cd, d.desig_nm,
                      f_office (office_cd)
                 INTO v_emp_id, v_emp_nm_eng, v_desig_cd, v_desig_nm,
                      v_office_nm
                 FROM hrm_employee h, hrm_desig d
                WHERE h.emp_gid = i.emp_gid AND h.desig_cd = d.desig_cd;
            ELSIF i.supplier_id IS NOT NULL
            THEN
               SELECT supplier_id, supplier_nm
                 INTO v_emp_id, v_emp_nm_eng
                 FROM acc_coll_media_supplier s
                WHERE s.supplier_id = i.supplier_id;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;

         BEGIN
            SELECT MAX (approved_date)
              INTO v_approved_date
              FROM v_emp_adv_payment
             WHERE emp_gid = i.emp_gid
               AND glac_sl_no = i.glac_sl_no
               AND approved_date BETWEEN NVL (p_date_from, approved_date)
                                     AND NVL (p_date_to, approved_date);
         EXCEPTION
            WHEN OTHERS
            THEN
               v_approved_date := NULL;
         END;

         /*
         BEGIN
            SELECT NVL (SUM (pay_amt), 0)
              INTO v_pre_payment_amt
              FROM v_emp_adv_payment
             WHERE emp_gid = i.emp_gid
               AND glac_sl_no = i.glac_sl_no
               AND approved_date < p_date_from;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_pre_payment_amt := 0;
         END;

         BEGIN
            SELECT NVL (SUM (jv_amt), 0), NVL (SUM (mr_amt), 0)
              INTO v_jv_amt, v_mr_amt
              FROM v_emp_adv_payment_recovery
             WHERE emp_gid = i.emp_gid
               AND glac_sl_no = i.glac_sl_no
               AND recovery_date < p_date_from;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_jv_amt := 0;
               v_mr_amt := 0;
         END;*/  ---Add by Musha on 07.08.2017

         ---Add by Musha on 07.08.2017
         BEGIN
            SELECT closing_bal
              INTO v_opening_bal
              FROM acc_gl_emp_coa_hist m
             WHERE m.glac_sl_no = i.glac_sl_no
               AND (   (i.emp_gid IS NOT NULL AND m.emp_gid = i.emp_gid)
                    OR (    i.supplier_id IS NOT NULL
                        AND supplier_id = i.supplier_id
                       )
                   )
               AND m.bal_year = TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')) - 1;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_opening_bal := 0;
         END;

         l_tab.emp_name := v_emp_nm_eng;
         l_tab.desig_cd := v_desig_cd;
         l_tab.desig_nm := v_desig_nm;
         l_tab.emp_id := v_emp_id;
         l_tab.office_name := v_office_nm;
         l_tab.approved_date := v_approved_date;
         l_tab.opening_bal := v_opening_bal;
         --v_pre_payment_amt - (v_jv_amt + v_mr_amt);
         l_tab.adv_payment := i.pay_amt;
         l_tab.total_adv_payment :=
              v_opening_bal      --(v_pre_payment_amt - (v_jv_amt + v_mr_amt))
            + i.pay_amt;
         l_tab.rec_jv := i.jv_amt;
         l_tab.rec_mr := i.mr_amt;
         l_tab.rec_total := i.jv_amt + i.mr_amt;
         l_tab.cur_bal :=
              (  v_opening_bal   --(v_pre_payment_amt - (v_jv_amt + v_mr_amt))
               + i.pay_amt
              )
            - (i.jv_amt + i.mr_amt);
         l_tab.glac_sl_no := i.glac_sl_no;
         PIPE ROW (l_tab);
      END LOOP;

      RETURN;
   END;

   FUNCTION rep_indiv_employee_wise (
      p_office_cd        IN   VARCHAR2,
      p_descendant_off   IN   CHAR,
      p_glac_sl_no       IN   VARCHAR2,
      p_date_from        IN   DATE,
      p_date_to          IN   DATE,
      p_party_type       IN   CHAR,         --here 01 for Employee 02=Supplier
      p_emp_gid               NUMBER,
      p_supp_id               NUMBER
   )
      RETURN acc_emp_indv_tab PIPELINED
   AS
      l_tab                acc_emp_indv_row;
      v_emp_id             hrm_employee.emp_id%TYPE;
      v_emp_nm_eng         hrm_employee.emp_nm_eng%TYPE;
      v_desig_cd           hrm_desig.desig_cd%TYPE;
      v_desig_nm           hrm_desig.desig_nm%TYPE;
      v_office_nm          hrm_office.office_nm%TYPE;
      v_approved_date      DATE;
      v_pre_payment_amt    NUMBER (10, 2);
      v_jv_amt             NUMBER (10, 2);
      v_mr_amt             NUMBER (10, 2);
      v_count              NUMBER (2)                     := 0;
      v_recovery_date_fr   DATE                           := NULL;
      v_cur_jv_amt         NUMBER (10, 2);
      v_cur_mr_amt         NUMBER (10, 2);
      v_open_bal           NUMBER (10, 2);
      v_rec_count number:=1;
      v_closing_bal number:=0;
   BEGIN
      FOR i IN
         (SELECT   
         
         
         
         emp_gid, to_number(supplier_id) supplier_id ,
                   TO_CHAR (month_nm, 'Mon RRRR') approved_date,last_day(month_nm) approved_month ,
                    glac_sl_no,
                   SUM (pay_amt) pay_amt, SUM (jv_amt) jv_amt,
                   SUM (mr_amt) mr_amt
              FROM (SELECT   emp_gid, supplier_id, glac_sl_no,
                             approved_date month_nm, SUM (pay_amt) pay_amt,
                             0 jv_amt, 0 mr_amt
                        FROM v_emp_adv_payment o
                       WHERE approved_date BETWEEN NVL (p_date_from,
                                                        approved_date
                                                       )
                                               AND NVL (p_date_to,
                                                        approved_date
                                                       )
                         AND o.glac_sl_no = NVL (p_glac_sl_no, o.glac_sl_no)
                         AND (   (    NVL (p_descendant_off, '0') = '0'
                                  AND o.office_cd =
                                                NVL (p_office_cd, o.office_cd)
                                 )
                              OR (    NVL (p_descendant_off, '0') = '1'
                                  AND o.office_cd IN (
                                         SELECT     office_cd
                                               FROM hrm_office_setup
                                         START WITH office_cd = p_office_cd
                                         CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                                 )
                             )
                         AND (   p_party_type IS NULL
                              OR (    p_party_type = '01'
                                  AND emp_gid = NVL (p_emp_gid, emp_gid)
                                 )
                              OR (    p_party_type = '02'
                                  AND supplier_id =
                                                  NVL (p_supp_id, supplier_id)
                                 )
                             )
                    GROUP BY emp_gid, supplier_id, glac_sl_no, approved_date
                    UNION ALL
                    SELECT   emp_gid, supplier_id, glac_sl_no,
                             recovery_date month_nm, 0 pay_amt,
                             SUM (jv_amt) jv_amt, SUM (mr_amt) mr_amt
                        FROM v_emp_adv_payment_recovery o
                       WHERE recovery_date BETWEEN NVL (p_date_from,
                                                        recovery_date
                                                       )
                                               AND NVL (p_date_to,
                                                        recovery_date
                                                       )
                         AND o.glac_sl_no = NVL (p_glac_sl_no, o.glac_sl_no)
                         AND (   (    NVL (p_descendant_off, '0') = '0'
                                  AND o.office_cd =
                                                NVL (p_office_cd, o.office_cd)
                                 )
                              OR (    NVL (p_descendant_off, '0') = '1'
                                  AND o.office_cd IN (
                                         SELECT     office_cd
                                               FROM hrm_office_setup
                                         START WITH office_cd = p_office_cd
                                         CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                                 )
                             )
                         AND (   p_party_type IS NULL
                              OR (    p_party_type = '01'
                                  AND emp_gid = NVL (p_emp_gid, emp_gid)
                                 )
                              OR (    p_party_type = '02'
                                  AND supplier_id =
                                                  NVL (p_supp_id, supplier_id)
                                 )
                             )
                    GROUP BY emp_gid, supplier_id, glac_sl_no, recovery_date)
          GROUP BY emp_gid,
                   supplier_id,
                   TO_CHAR (month_nm, 'Mon RRRR'),
                   glac_sl_no,
                   LAST_DAY (month_nm)
          ORDER BY LAST_DAY (month_nm))
      LOOP
         BEGIN
            IF i.emp_gid IS NOT NULL
            THEN
               SELECT emp_id, emp_nm_eng, d.desig_cd, d.desig_nm,
                      f_office (office_cd)
                 INTO v_emp_id, v_emp_nm_eng, v_desig_cd, v_desig_nm,
                      v_office_nm
                 FROM hrm_employee h, hrm_desig d
                WHERE h.emp_gid = i.emp_gid AND h.desig_cd = d.desig_cd;
            ELSIF i.supplier_id IS NOT NULL
            THEN
               SELECT supplier_id, supplier_nm
                 INTO v_emp_id, v_emp_nm_eng
                 FROM acc_coll_media_supplier s
                WHERE s.supplier_id = i.supplier_id;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;

         
         IF v_rec_count=1 then
         BEGIN
            SELECT NVL (SUM (pay_amt), 0)
              INTO v_pre_payment_amt
              FROM v_emp_adv_payment
             WHERE emp_gid = i.emp_gid
               AND glac_sl_no = i.glac_sl_no
               AND approved_date < p_date_from;  
         EXCEPTION
            WHEN OTHERS
            THEN
               v_pre_payment_amt := 0;
         END;

         BEGIN
            SELECT NVL (SUM (jv_amt), 0), NVL (SUM (mr_amt), 0)
              INTO v_jv_amt, v_mr_amt
              FROM v_emp_adv_payment_recovery
             WHERE emp_gid = i.emp_gid
               AND glac_sl_no = i.glac_sl_no
               AND recovery_date < p_date_from;  
         EXCEPTION
            WHEN OTHERS
            THEN
               v_jv_amt := 0;
               v_mr_amt := 0;
         END;
         
         /*v_pre_payment_amt:=0;
         v_jv_amt := 0;
               v_mr_amt := 0;*/
         l_tab.opening_bal := nvl(v_pre_payment_amt,0)-nvl(v_jv_amt,0)+nvl(v_mr_amt,0);
        
         l_tab.total_adv_payment := (nvl(v_pre_payment_amt,0)-nvl(v_jv_amt,0)+nvl(v_mr_amt,0)) + i.pay_amt;
         l_tab.cur_bal := (nvl(v_pre_payment_amt,0)-nvl(v_jv_amt,0)+nvl(v_mr_amt,0))+i.pay_amt - (i.jv_amt + i.mr_amt);
         v_closing_bal:=(nvl(v_pre_payment_amt,0)-nvl(v_jv_amt,0)+nvl(v_mr_amt,0))+i.pay_amt - (i.jv_amt + i.mr_amt);
         ELSE
        l_tab.opening_bal := v_closing_bal;
        
         l_tab.total_adv_payment := v_closing_bal + i.pay_amt;
         l_tab.cur_bal := v_closing_bal+i.pay_amt - (i.jv_amt + i.mr_amt);
         v_closing_bal:=(v_closing_bal + i.pay_amt)- (i.jv_amt + i.mr_amt);
         end if;

         ---Add by Musha on 07.08.2017
         --Skipped by Sayadur on 05/04/2021
         /*BEGIN
            SELECT closing_bal
              INTO v_open_bal
              FROM acc_gl_emp_coa_hist m
             WHERE m.glac_sl_no = i.glac_sl_no
               AND (   (i.emp_gid IS NOT NULL AND m.emp_gid = i.emp_gid)
                    OR (    i.supplier_id IS NOT NULL
                        AND supplier_id = i.supplier_id
                       )
                   )
               AND m.bal_year = TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')) - 1;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_open_bal := 0;
         END;*/

         /*IF v_recovery_date_fr IS NULL
         THEN
            v_recovery_date_fr := i.approved_date;
         END IF;

         BEGIN
            SELECT NVL (SUM (jv_amt), 0), NVL (SUM (mr_amt), 0)
              INTO v_cur_jv_amt, v_cur_mr_amt
              FROM v_emp_adv_payment_recovery
             WHERE (   (i.emp_gid IS NOT NULL AND emp_gid = i.emp_gid)
                    OR (    i.supplier_id IS NOT NULL
                        AND supplier_id = i.supplier_id
                       )
                   )
               AND glac_sl_no = i.glac_sl_no
               AND recovery_date BETWEEN p_date_from AND p_date_to;
         --v_recovery_date_fr AND i.approved_date;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_cur_jv_amt := 0;
               v_cur_mr_amt := 0;
         END;*/
         
         
         
         l_tab.emp_name := v_emp_nm_eng;
         l_tab.desig_cd := v_desig_cd;
         l_tab.desig_nm := v_desig_nm;
         l_tab.emp_id := v_emp_id;
         l_tab.office_name := v_office_nm;
         l_tab.approved_date := i.approved_date;
         l_tab.approved_month:=i.approved_month;
         l_tab.adv_payment := i.pay_amt;
         
         l_tab.rec_jv := i.jv_amt;
         l_tab.rec_mr := i.mr_amt;
         l_tab.rec_total := i.jv_amt + i.mr_amt;
         
         l_tab.glac_sl_no := i.glac_sl_no;
         
         PIPE ROW (l_tab);
         v_rec_count:=v_rec_count+1;
      END LOOP;

      RETURN;
   END;

   FUNCTION rep_adv_head_wise (
      p_office_cd        IN   VARCHAR2,
      p_descendant_off   IN   CHAR,
      p_glac_sl_no       IN   VARCHAR2,
      p_date_from        IN   DATE,
      p_date_to          IN   DATE,
      p_party_type       IN   CHAR,         --here 01 for Employee 02=Supplier
      p_emp_gid               NUMBER,
      p_supp_id               NUMBER
   )
      RETURN acc_emp_adv_tab PIPELINED
   AS
      l_tab               acc_emp_adv_row;
      v_approved_date     DATE;
      v_pre_payment_amt   NUMBER (10, 2);
      v_jv_amt            NUMBER (10, 2);
      v_mr_amt            NUMBER (10, 2);
      v_count             NUMBER (2)      := 0;
      v_opening_bal       NUMBER (10, 2)  := 0;
   BEGIN
      FOR i IN (SELECT NVL (a.glac_sl_no, b.glac_sl_no) glac_sl_no,
                       NVL (a.pay_amt, 0) pay_amt, NVL (b.jv_amt, 0) jv_amt,
                       NVL (b.mr_amt, 0) mr_amt
                  FROM (SELECT   glac_sl_no, SUM (pay_amt) pay_amt
                            FROM v_emp_adv_payment o
                           WHERE approved_date BETWEEN NVL (p_date_from,
                                                            approved_date
                                                           )
                                                   AND NVL (p_date_to,
                                                            approved_date
                                                           )
                             AND o.glac_sl_no =
                                              NVL (p_glac_sl_no, o.glac_sl_no)
                             AND (   (    NVL (p_descendant_off, '0') = '0'
                                      AND o.office_cd =
                                                NVL (p_office_cd, o.office_cd)
                                     )
                                  OR (    NVL (p_descendant_off, '0') = '1'
                                      AND o.office_cd IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             START WITH office_cd =
                                                                   p_office_cd
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                                     )
                                 )
                             AND (   p_party_type IS NULL
                                  OR (    p_party_type = '01'
                                      AND emp_gid = NVL (p_emp_gid, emp_gid)
                                     )
                                  OR (    p_party_type = '02'
                                      AND supplier_id =
                                                  NVL (p_supp_id, supplier_id)
                                     )
                                 )
                        GROUP BY glac_sl_no) a
                       FULL OUTER JOIN
                       (SELECT   glac_sl_no, SUM (jv_amt) jv_amt,
                                 SUM (mr_amt) mr_amt
                            FROM v_emp_adv_payment_recovery o
                           WHERE recovery_date BETWEEN NVL (p_date_from,
                                                            recovery_date
                                                           )
                                                   AND NVL (p_date_to,
                                                            recovery_date
                                                           )
                             AND o.glac_sl_no =
                                              NVL (p_glac_sl_no, o.glac_sl_no)
                             AND (   (    NVL (p_descendant_off, '0') = '0'
                                      AND o.office_cd =
                                                NVL (p_office_cd, o.office_cd)
                                     )
                                  OR (    NVL (p_descendant_off, '0') = '1'
                                      AND o.office_cd IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             START WITH office_cd =
                                                                   p_office_cd
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                                     )
                                 )
                             AND (   p_party_type IS NULL
                                  OR (    p_party_type = '01'
                                      AND emp_gid = NVL (p_emp_gid, emp_gid)
                                     )
                                  OR (    p_party_type = '02'
                                      AND supplier_id =
                                                  NVL (p_supp_id, supplier_id)
                                     )
                                 )
                        GROUP BY glac_sl_no) b ON a.glac_sl_no = b.glac_sl_no
                       )
      LOOP
         BEGIN
            SELECT MAX (approved_date)
              INTO v_approved_date
              FROM v_emp_adv_payment
             WHERE glac_sl_no = i.glac_sl_no
               AND approved_date BETWEEN NVL (p_date_from, approved_date)
                                     AND NVL (p_date_to, approved_date);
         EXCEPTION
            WHEN OTHERS
            THEN
               v_approved_date := NULL;
         END;

         /*
         BEGIN
            SELECT NVL (SUM (pay_amt), 0)
              INTO v_pre_payment_amt
              FROM v_emp_adv_payment
             WHERE glac_sl_no = i.glac_sl_no AND approved_date < p_date_from;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_pre_payment_amt := 0;
         END;

         BEGIN
            SELECT NVL (SUM (jv_amt), 0), NVL (SUM (mr_amt), 0)
              INTO v_jv_amt, v_mr_amt
              FROM v_emp_adv_payment_recovery
             WHERE glac_sl_no = i.glac_sl_no AND recovery_date < p_date_from;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_jv_amt := 0;
               v_mr_amt := 0;
         END;*/ ---Musha on 06.08.2017

         ---Add by Musha on 06.08.2017
         BEGIN
            SELECT closing_bal
              INTO v_opening_bal
              FROM acc_gl_coa_mst_hist m
             WHERE m.glac_sl_no = i.glac_sl_no
               AND m.office_cd = '07001'
               AND m.bal_year = TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')) - 1;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_opening_bal := 0;
         END;

         l_tab.emp_name := NULL;
         l_tab.desig_cd := NULL;
         l_tab.desig_nm := NULL;
         l_tab.emp_id := NULL;
         l_tab.office_name := NULL;
         l_tab.approved_date := v_approved_date;
         l_tab.opening_bal := v_opening_bal;
         --v_pre_payment_amt - (v_jv_amt + v_mr_amt);
         l_tab.adv_payment := i.pay_amt;
         l_tab.total_adv_payment :=
              v_opening_bal      --(v_pre_payment_amt - (v_jv_amt + v_mr_amt))
            + i.pay_amt;
         l_tab.rec_jv := i.jv_amt;
         l_tab.rec_mr := i.mr_amt;
         l_tab.rec_total := i.jv_amt + i.mr_amt;
         l_tab.cur_bal :=
              (  v_opening_bal   --(v_pre_payment_amt - (v_jv_amt + v_mr_amt))
               + i.pay_amt
              )
            - (i.jv_amt + i.mr_amt);
         l_tab.glac_sl_no := i.glac_sl_no;
         PIPE ROW (l_tab);
      END LOOP;

      RETURN;
   END;
END pkg_emp_adv_register;
/


--
-- PKG_GL_ACCOUNT_REPORT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_gl_account_report
IS
   /*******************************
   Accounts Subsidiarry register
   Modified by: Md. Sayadur Rahaman
   Date: 11-Dec-2016
   Modified Area: added new field in query chq_o, chq_dt and filter field ins_tp_cd
   ********************************/
   FUNCTION rep_acc_sub_ledger (
      p_cost_center    IN   VARCHAR2,
      p_cost_check     IN   CHAR,
      p_glac_no        IN   VARCHAR2,
      pdate_from       IN   DATE,
      pdate_to         IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER
   )
      RETURN acc_sub_ledger_tab PIPELINED
   AS
      l_tab              acc_sub_ledger_row;
      v_check_calc       NUMBER                            := 0;
      v_tot_amt          acc_gl_trans_dtl.trans_amt%TYPE   := 0;
      v_opening_amt      acc_gl_trans_dtl.trans_amt%TYPE   := 0;
      v_counter          CHAR (1)                          := '0';
      v_glac_sl_no       VARCHAR2 (20)                     := NULL;
      v_act_glac_sl_no   VARCHAR2 (20)                     := NULL;
      v_act_glac_no      VARCHAR2 (20)                     := NULL;
      v_act_glac_nm      VARCHAR2 (200)                    := NULL;
      v_count            NUMBER (2)                        := 0;
      v_divert_account   VARCHAR2 (20)                     := NULL;
   BEGIN
      IF p_fiscal_yr_tp = '0'
      THEN
         FOR i IN
            (SELECT b.vouch_dt,
                    DECODE (NVL (ledger_st, 1),
                            '0', trans_id,
                            NVL (b.cost_center_vr_no, a.vouch_no)
                           ) vouch_no,
                    c.glac_sl_no, glac_no, glac_nm, a.chq_no, a.chq_dt,
                    DECODE (a.dr_cr, 'C', a.trans_amt, 0) credit_amt,
                    DECODE (a.dr_cr, 'D', a.trans_amt, 0) debit_amt,
                    b.narration, b.vouch_cd, a.vouch_no vouch_no_actual,
                    ledger_st
               FROM acc_gl_trans_dtl a, acc_gl_trans_mst b, acc_gl_coa c
              WHERE b.ins_tp_cd = NVL (p_ins_tp_cd, b.ins_tp_cd)
                AND b.cost_center IN (
                       SELECT DISTINCT DECODE (p_cost_check,
                                               '0', x.office_cd,
                                               y.office_cd
                                              )
                                  FROM (SELECT p_cost_center office_cd
                                          FROM DUAL) x,
                                       (SELECT     office_cd
                                              FROM hrm_office_setup
                                        CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                        START WITH office_cd = p_cost_center) y)
                AND a.glac_sl_no = p_glac_no
                AND TRUNC (b.vouch_dt) BETWEEN pdate_from AND pdate_to
                AND a.office_cd = b.office_cd
                AND a.vouch_no = b.vouch_no
                AND a.glac_sl_no = c.glac_sl_no
                AND NVL (b.payable_st, '0') != '1')
         LOOP
            l_tab.vouch_dt := i.vouch_dt;
            l_tab.vouch_no := i.vouch_no;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.chq_no := i.chq_no;
            l_tab.chq_dt := i.chq_dt;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;

            IF v_count > 0
            THEN
               l_tab.narration := NULL;
            ELSE
               l_tab.narration := i.narration;
            END IF;

            l_tab.vouch_cd := i.vouch_cd;
            PIPE ROW (l_tab);
            v_counter := '1';
         END LOOP;

         IF v_counter = '0'
         THEN
            BEGIN
               l_tab.balance_amt := v_tot_amt;
               l_tab.vouch_dt := NULL;
               l_tab.vouch_no := NULL;
               l_tab.glac_sl_no := v_act_glac_sl_no;
               l_tab.glac_no := v_act_glac_no;
               l_tab.glac_nm := v_act_glac_nm;
               l_tab.chq_no := NULL;
               l_tab.chq_dt := NULL;
               l_tab.credit_amt := 0;
               l_tab.debit_amt := 0;
               l_tab.narration := NULL;
               l_tab.vouch_cd := NULL;
               PIPE ROW (l_tab);
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END IF;

         RETURN;
      ELSE
         FOR i IN (SELECT b.vouch_dt, a.vouch_no, a.glac_sl_no, c.glac_no,
                          c.glac_nm,
                          DECODE (a.dr_cr, 'C', a.trans_amt, 0) credit_amt,
                          DECODE (a.dr_cr, 'D', a.trans_amt, 0) debit_amt,
                          b.narration, b.vouch_cd
                     FROM acc_gl_trans_dtl_hist a,
                          acc_gl_trans_mst_hist b,
                          acc_gl_coa c
                    WHERE NVL (b.cost_center, 'X') =
                                 NVL (p_cost_center, NVL (b.cost_center, 'X'))
                      AND a.glac_sl_no = p_glac_no
                      AND TRUNC (b.vouch_dt) BETWEEN NVL (pdate_from,
                                                          TRUNC (b.vouch_dt)
                                                         )
                                                 AND NVL (pdate_to,
                                                          TRUNC (b.vouch_dt)
                                                         )
                      AND (   (    p_ins_tp_cd IS NOT NULL
                               AND b.ins_tp_cd = p_ins_tp_cd
                              )
                           OR (p_ins_tp_cd IS NULL AND 1 = 1)
                          )
                      AND a.vouch_no = b.vouch_no
                      AND a.glac_sl_no = c.glac_sl_no)
         LOOP
            l_tab.vouch_dt := i.vouch_dt;
            l_tab.vouch_no := i.vouch_no;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;
            l_tab.narration := i.narration;
            l_tab.vouch_cd := i.vouch_cd;
            PIPE ROW (l_tab);
         END LOOP;

         RETURN;
      END IF;
   END;

    /*******************************
   Accounts Subsidiarry summery Register
   Modified by: Md. Sayadur Rahaman
   Date: 11-Dec-2016
   Modified Area: added new field in query chq_o, chq_dt and filter field ins_tp_cd
   ********************************/
   FUNCTION rep_acc_sub_sum (
      p_cost_center    IN   VARCHAR2,
      p_cost_check     IN   CHAR,
      p_glac_no        IN   VARCHAR2,
      pdate_from       IN   DATE,
      pdate_to         IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER
   )
      RETURN acc_sub_sum_tab PIPELINED
   AS
      l_tab              acc_sub_sum_row;
      v_check_calc       NUMBER                            := 0;
      v_tot_amt          acc_gl_trans_dtl.trans_amt%TYPE   := 0;
      v_opening_amt      acc_gl_trans_dtl.trans_amt%TYPE   := 0;
      v_glac_sl_no       VARCHAR2 (20)                     := NULL;
      v_act_glac_sl_no   VARCHAR2 (20)                     := NULL;
      v_act_glac_no      VARCHAR2 (20)                     := NULL;
      v_act_glac_nm      VARCHAR2 (200)                    := NULL;
      v_count            NUMBER (2)                        := 0;
      v_divert_account   VARCHAR2 (20)                     := NULL;
      v_opening_bal      NUMBER (15, 2)                    := 0;
   BEGIN
      IF p_fiscal_yr_tp = '0'
      THEN
         FOR i IN
            (SELECT m.cost_center, c.glac_sl_no, c.glac_no, c.glac_nm,
                    (m.debit_amt - m.credit_amt) balance
               FROM (SELECT   a.glac_sl_no, b.cost_center,
                              SUM (DECODE (a.dr_cr, 'C', a.trans_amt, 0)
                                  ) credit_amt,
                              SUM (DECODE (a.dr_cr, 'D', a.trans_amt, 0)
                                  ) debit_amt
                         FROM acc_gl_trans_dtl a, acc_gl_trans_mst b
                        WHERE b.ins_tp_cd = NVL (p_ins_tp_cd, b.ins_tp_cd)
                          AND b.cost_center IN (
                                 SELECT DISTINCT DECODE (p_cost_check,
                                                         '0', x.office_cd,
                                                         y.office_cd
                                                        )
                                            FROM (SELECT p_cost_center
                                                                    office_cd
                                                    FROM DUAL) x,
                                                 (SELECT     office_cd
                                                        FROM hrm_office_setup
                                                  CONNECT BY PRIOR office_cd =
                                                                control_office_cd
                                                  START WITH office_cd =
                                                                 p_cost_center) y)
                          AND a.glac_sl_no = NVL (p_glac_no, a.glac_sl_no)
                          AND TRUNC (b.vouch_dt) BETWEEN pdate_from AND pdate_to
                          AND a.office_cd = b.office_cd
                          AND a.vouch_no = b.vouch_no
                          AND NVL (b.payable_st, '0') != '1'
                     GROUP BY a.glac_sl_no, b.cost_center) m,
                    acc_gl_coa c,
                    acc_cash_book_divert d
              WHERE m.glac_sl_no = c.glac_sl_no
                    AND c.glac_sl_no = d.glac_sl_no)
         LOOP
            SELECT fun_gl_subr_head_opening (i.glac_sl_no,
                                             '07001',
                                             i.cost_center,
                                             pdate_from,
                                             p_ins_tp_cd
                                            )
              INTO v_opening_bal
              FROM DUAL;

            l_tab.cost_center := i.cost_center;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.opening_amt := v_opening_bal;
            l_tab.period_bal_amt := i.balance;
            l_tab.balance_amt := v_opening_bal + i.balance;
            PIPE ROW (l_tab);
         END LOOP;

         RETURN;
      ELSE
         NULL;
      END IF;
   END;

   /*******************************
   Accounts Ledger
   Modified by: Md Zahid Hasan
   Date: 10-November-2014
   Modified Area: added new field in query chq_o, chq_dt and filter field ins_tp_cd
   ********************************/
   FUNCTION rep_acc_ledger (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_glac_no        IN   VARCHAR2,
      pdate_from       IN   DATE,
      pdate_to         IN   DATE,
      p_business_tp    IN   VARCHAR2,
      p_vr_tp          IN   VARCHAR2,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_vouch_no       IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2
   )
      RETURN acc_ledger_tab PIPELINED
   AS
      l_tab              acc_ledger_row;
      v_check_calc       NUMBER                            := 0;
      v_tot_amt          acc_gl_trans_dtl.trans_amt%TYPE   := 0;
      v_opening_amt      acc_gl_trans_dtl.trans_amt%TYPE   := 0;
      v_counter          CHAR (1)                          := '0';
      v_glac_sl_no       VARCHAR2 (20)                     := NULL;
      v_act_glac_sl_no   VARCHAR2 (20)                     := NULL;
      v_act_glac_no      VARCHAR2 (20)                     := NULL;
      v_act_glac_nm      VARCHAR2 (200)                    := NULL;
      v_count            NUMBER (2)                        := 0;
      v_divert_account   VARCHAR2 (20)                     := NULL;
      v_sub_reg_count    NUMBER (3)                        := 0;
      v_sub_reg_st       CHAR (1)                          := '0';
   --Here 1 means subsidiarry register's Leadger
   BEGIN
      --Checking the  subsidiary register account
      BEGIN
         SELECT COUNT (1)
           INTO v_sub_reg_count
           FROM acc_cash_book_divert
          WHERE glac_sl_no = p_glac_no;

         IF v_sub_reg_count > 0
         THEN
            v_sub_reg_st := '1';
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_sub_reg_st := '0';
      END;

      --Checking the divert account instead of paybale account
      BEGIN
         SELECT glac_sl_no
           INTO v_divert_account
           FROM acc_cash_book_divert
          WHERE divert_to_glac_sl_no = p_glac_no;

         v_glac_sl_no := v_divert_account;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_divert_account := NULL;
            v_glac_sl_no := p_glac_no;
      END;

      BEGIN
         SELECT c.glac_sl_no, c.glac_no, c.glac_nm
           INTO v_act_glac_sl_no, v_act_glac_no, v_act_glac_nm
           FROM acc_gl_coa c
          WHERE glac_sl_no = p_glac_no;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      IF p_fiscal_yr_tp = '0'
      THEN
         FOR i IN
            (SELECT m.vouch_dt, m.vouch_no, m.glac_sl_no, c.glac_no,
                    c.glac_nm, m.chq_no, m.chq_dt, m.credit_amt, m.debit_amt,
                    m.narration, m.vouch_cd, m.vouch_no_actual,
                    m.cost_center
               FROM (SELECT b.vouch_dt,
                            NVL (b.cost_center_vr_no, a.vouch_no) vouch_no,
                            NVL (d.divert_to_glac_sl_no,
                                 a.glac_sl_no
                                ) glac_sl_no,
                            a.chq_no, a.chq_dt,
                            DECODE (a.dr_cr, 'C', a.trans_amt, 0) credit_amt,
                            DECODE (a.dr_cr, 'D', a.trans_amt, 0) debit_amt,
                            b.narration, b.vouch_cd,
                            a.vouch_no vouch_no_actual, b.cost_center
                       FROM acc_gl_trans_dtl a,
                            acc_gl_trans_mst b,
                            acc_cash_book_divert d
                      WHERE v_sub_reg_st = '0'
                        /*AND b.office_cd IN (
                               SELECT DISTINCT DECODE (p_check,
                                                       '0', x.office_cd,
                                                       y.office_cd
                                                      )
                                          FROM (SELECT p_office_cd office_cd
                                                  FROM DUAL) x,
                                               (SELECT     office_cd
                                                      FROM hrm_office_setup
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                   p_office_cd) y)*/
                        AND b.office_cd = p_office_cd
                        AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                        AND b.ins_tp_cd = NVL (p_ins_tp_cd, b.ins_tp_cd)
                        /*AND NVL (b.cost_center, 'X') =
                                 NVL (p_cost_center, NVL (b.cost_center, 'X'))*/
                        AND (   (p_cost_center IS NULL AND 1 = 1)
                             OR (    p_cost_center IS NOT NULL
                                 AND EXISTS (
                                        SELECT 1
                                          FROM (SELECT p_cost_center
                                                                    office_cd
                                                  FROM DUAL
                                                 WHERE p_check = '0'
                                                UNION
                                                SELECT     office_cd
                                                      FROM hrm_office_setup
                                                     WHERE p_check = '1'
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                 p_cost_center) y
                                         WHERE office_cd = b.cost_center)
                                )
                            )
                        AND a.glac_sl_no = v_glac_sl_no
                        AND TRUNC (b.vouch_dt) BETWEEN pdate_from AND pdate_to
                        AND b.object_cd = NVL (p_business_tp, b.object_cd)
                        AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                        AND a.office_cd = b.office_cd
                        AND a.vouch_no = b.vouch_no
                        AND NVL (b.ledger_st, '1') = '1'
                        AND NVL (b.payable_st, '0') = '0'
                        AND a.glac_sl_no = d.glac_sl_no(+)
                        AND NVL (b.adjustment_st, '0') = '0'
                     UNION ALL
                     SELECT b.vouch_dt,
                            NVL (b.cost_center_vr_no, a.vouch_no) vouch_no,
                            NVL (d.divert_to_glac_sl_no,
                                 a.glac_sl_no
                                ) glac_sl_no,
                            a.chq_no, a.chq_dt,
                            DECODE (a.dr_cr, 'D', a.trans_amt, 0) credit_amt,
                            DECODE (a.dr_cr, 'C', a.trans_amt, 0) debit_amt,
                            b.narration, b.vouch_cd,
                            a.vouch_no vouch_no_actual, b.cost_center
                       FROM acc_gl_trans_dtl a,
                            acc_gl_trans_mst b,
                            acc_cash_book_divert d
                      WHERE v_sub_reg_st = '0'
                        /*AND b.office_cd IN (
                               SELECT DISTINCT DECODE (p_check,
                                                       '0', x.office_cd,
                                                       y.office_cd
                                                      )
                                          FROM (SELECT p_office_cd office_cd
                                                  FROM DUAL) x,
                                               (SELECT     office_cd
                                                      FROM hrm_office_setup
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                   p_office_cd) y)*/
                        AND b.office_cd = p_office_cd
                        AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                        AND b.ins_tp_cd = NVL (p_ins_tp_cd, b.ins_tp_cd)
                        /*AND NVL (b.cost_center, 'X') =
                                 NVL (p_cost_center, NVL (b.cost_center, 'X'))*/
                        AND (   (p_cost_center IS NULL AND 1 = 1)
                             OR (    p_cost_center IS NOT NULL
                                 AND EXISTS (
                                        SELECT 1
                                          FROM (SELECT p_cost_center
                                                                    office_cd
                                                  FROM DUAL
                                                 WHERE p_check = '0'
                                                UNION
                                                SELECT     office_cd
                                                      FROM hrm_office_setup
                                                     WHERE p_check = '1'
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                 p_cost_center) y
                                         WHERE office_cd = b.cost_center)
                                )
                            )
                        AND a.glac_sl_no = v_glac_sl_no
                        AND TRUNC (b.vouch_dt) BETWEEN pdate_from AND pdate_to
                        AND b.object_cd = NVL (p_business_tp, b.object_cd)
                        AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                        AND a.office_cd = b.office_cd
                        AND a.vouch_no = b.vouch_no
                        AND NVL (b.ledger_st, '1') = '1'
                        AND NVL (b.payable_st, '0') = '1'
                        AND a.glac_sl_no = d.glac_sl_no(+)
                        AND NVL (b.adjustment_st, '0') = '0'
                     UNION ALL
                     SELECT b.vouch_dt,
                            NVL (b.cost_center_vr_no, a.vouch_no) vouch_no,
                            a.glac_sl_no, a.chq_no, a.chq_dt,
                            DECODE (a.dr_cr, 'C', a.trans_amt, 0) credit_amt,
                            DECODE (a.dr_cr, 'D', a.trans_amt, 0) debit_amt,
                            b.narration, b.vouch_cd,
                            a.vouch_no vouch_no_actual, b.cost_center
                       FROM acc_gl_trans_dtl a, acc_gl_trans_mst b
                      WHERE v_sub_reg_st = '0'
                        AND b.office_cd IN (
                               SELECT DISTINCT DECODE (p_check,
                                                       '0', x.office_cd,
                                                       y.office_cd
                                                      )
                                          FROM (SELECT p_office_cd office_cd
                                                  FROM DUAL) x,
                                               (SELECT     office_cd
                                                      FROM hrm_office_setup
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                   p_office_cd) y)
                        AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                        AND b.ins_tp_cd = NVL (p_ins_tp_cd, b.ins_tp_cd)
                        AND NVL (b.cost_center, 'X') =
                                 NVL (p_cost_center, NVL (b.cost_center, 'X'))
                        AND a.glac_sl_no = p_glac_no
                        AND TRUNC (b.vouch_dt) BETWEEN pdate_from AND pdate_to
                        AND b.object_cd = NVL (p_business_tp, b.object_cd)
                        AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                        AND a.office_cd = b.office_cd
                        AND a.vouch_no = b.vouch_no
                        AND NVL (b.ledger_st, '1') = '1'
                        AND NVL (b.payable_st, '0') = '0'
                        AND NVL (b.adjustment_st, '0') = '1'
                     UNION ALL
                     SELECT b.vouch_dt,
                            NVL (b.cost_center_vr_no, a.vouch_no) vouch_no,
                            a.glac_sl_no, a.chq_no, a.chq_dt,
                            DECODE (a.dr_cr, 'C', a.trans_amt, 0) credit_amt,
                            DECODE (a.dr_cr, 'D', a.trans_amt, 0) debit_amt,
                            b.narration, b.vouch_cd,
                            a.vouch_no vouch_no_actual, b.cost_center
                       FROM acc_gl_trans_dtl a, acc_gl_trans_mst b
                      WHERE v_sub_reg_st = '0'
                        /*AND b.office_cd IN (
                               SELECT DISTINCT DECODE (p_check,
                                                       '0', x.office_cd,
                                                       y.office_cd
                                                      )
                                          FROM (SELECT p_office_cd office_cd
                                                  FROM DUAL) x,
                                               (SELECT     office_cd
                                                      FROM hrm_office_setup
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                   p_office_cd) y)*/
                        AND b.office_cd = p_office_cd
                        AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                        AND b.ins_tp_cd = NVL (p_ins_tp_cd, b.ins_tp_cd)
                        /*AND NVL (b.cost_center, 'X') =
                                 NVL (p_cost_center, NVL (b.cost_center, 'X'))*/
                        AND (   (p_cost_center IS NULL AND 1 = 1)
                             OR (    p_cost_center IS NOT NULL
                                 AND EXISTS (
                                        SELECT 1
                                          FROM (SELECT p_cost_center
                                                                    office_cd
                                                  FROM DUAL
                                                 WHERE p_check = '0'
                                                UNION
                                                SELECT     office_cd
                                                      FROM hrm_office_setup
                                                     WHERE p_check = '1'
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                 p_cost_center) y
                                         WHERE office_cd = b.cost_center)
                                )
                            )
                        AND a.glac_sl_no = p_glac_no
                        AND TRUNC (b.vouch_dt) BETWEEN pdate_from AND pdate_to
                        AND b.object_cd = NVL (p_business_tp, b.object_cd)
                        AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                        AND a.office_cd = b.office_cd
                        AND a.vouch_no = b.vouch_no
                        AND NVL (b.ledger_st, '1') = '1'
                        AND NVL (b.payable_st, '0') = '0'
                        AND (   (    b.vouch_cd = '05'
                                 AND b.source_vouch_no NOT LIKE 'JV%'
                                )
                             OR (b.vouch_cd != '05')
                            )
                        AND v_divert_account IS NOT NULL
                     UNION ALL
                     --This part is only subsidiarry register's leadger
                     SELECT b.vouch_dt,
                            NVL (b.cost_center_vr_no, a.vouch_no) vouch_no,
                            a.glac_sl_no, a.chq_no, a.chq_dt,
                            DECODE (a.dr_cr, 'C', a.trans_amt, 0) credit_amt,
                            DECODE (a.dr_cr, 'D', a.trans_amt, 0) debit_amt,
                            b.narration, b.vouch_cd,
                            a.vouch_no vouch_no_actual, b.cost_center
                       FROM acc_gl_trans_dtl a, acc_gl_trans_mst b
                      WHERE v_sub_reg_st = '1'
                        /*AND b.office_cd IN (
                               SELECT DISTINCT DECODE (p_check,
                                                       '0', x.office_cd,
                                                       y.office_cd
                                                      )
                                          FROM (SELECT p_office_cd office_cd
                                                  FROM DUAL) x,
                                               (SELECT     office_cd
                                                      FROM hrm_office_setup
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                   p_office_cd) y)*/
                        AND b.office_cd = p_office_cd
                        AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                        AND b.ins_tp_cd = NVL (p_ins_tp_cd, b.ins_tp_cd)
                        /*AND NVL (b.cost_center, 'X') =
                        NVL (p_cost_center, NVL (b.cost_center, 'X'))*/
                        AND (   (p_cost_center IS NULL AND 1 = 1)
                             OR (    p_cost_center IS NOT NULL
                                 AND EXISTS (
                                        SELECT 1
                                          FROM (SELECT p_cost_center
                                                                    office_cd
                                                  FROM DUAL
                                                 WHERE p_check = '0'
                                                UNION
                                                SELECT     office_cd
                                                      FROM hrm_office_setup
                                                     WHERE p_check = '1'
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                 p_cost_center) y
                                         WHERE office_cd = b.cost_center)
                                )
                            )
                        AND a.glac_sl_no = p_glac_no
                        AND TRUNC (b.vouch_dt) BETWEEN pdate_from AND pdate_to
                        AND b.object_cd = NVL (p_business_tp, b.object_cd)
                        AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                        AND a.office_cd = b.office_cd
                        AND a.vouch_no = b.vouch_no
                        AND NVL (b.ledger_st, '1') = '1'
                        AND NVL (b.payable_st, '0') = '1') m,
                    acc_gl_coa c
              WHERE m.glac_sl_no = c.glac_sl_no)
         LOOP
            --v_tot_amt := v_tot_amt-v_opening_amt;
            IF v_check_calc = 0 AND v_tot_amt = 0
            THEN
               l_tab.balance_amt := v_tot_amt;
               v_check_calc := '1';
            END IF;

            BEGIN                                       ---Musha on 25.10.2016
               SELECT COUNT (1)
                 INTO v_count
                 FROM clm_claim_payable_gen g, ser_lock_policy l
                WHERE g.pgid = l.pgid
                  AND g.vouch_no = i.vouch_no_actual
                  AND status = '1';
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            l_tab.vouch_dt := i.vouch_dt;
            l_tab.vouch_no := i.vouch_no;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.chq_no := i.chq_no;
            l_tab.chq_dt := i.chq_dt;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;
            l_tab.cost_center := i.cost_center;

            ---- added by Anamul on 7.04.2019
            IF v_count > 0
            THEN                                        ---Musha on 25.10.2016
               l_tab.narration := NULL;
            ELSE
               l_tab.narration := i.narration;
            END IF;

            l_tab.vouch_cd := i.vouch_cd;
            PIPE ROW (l_tab);
            v_counter := '1';
         END LOOP;

         IF v_counter = '0'
         THEN
            BEGIN
               l_tab.balance_amt := v_tot_amt;
               l_tab.vouch_dt := NULL;
               l_tab.vouch_no := NULL;
               l_tab.glac_sl_no := v_act_glac_sl_no;
               l_tab.glac_no := v_act_glac_no;
               l_tab.glac_nm := v_act_glac_nm;
               l_tab.chq_no := NULL;
               l_tab.chq_dt := NULL;
               l_tab.credit_amt := 0;
               l_tab.debit_amt := 0;
               l_tab.narration := NULL;
               l_tab.vouch_cd := NULL;
               l_tab.cost_center := NULL;   ---- added by Anamul on 7.04.2019
               PIPE ROW (l_tab);
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END IF;

         RETURN;
      ELSE
         FOR i IN
            (SELECT b.vouch_dt, a.vouch_no, a.glac_sl_no, c.glac_no,
                    c.glac_nm,
                    DECODE (a.dr_cr, 'C', a.trans_amt, 0) credit_amt,
                    DECODE (a.dr_cr, 'D', a.trans_amt, 0) debit_amt,
                    b.narration, b.vouch_cd, b.cost_center
               FROM acc_gl_trans_dtl_hist a,
                    acc_gl_trans_mst_hist b,
                    acc_gl_coa c
              WHERE b.office_cd = p_office_cd
                /*b.office_cd IN (
                         SELECT DISTINCT DECODE (p_check,
                                                 '0', x.office_cd,
                                                 y.office_cd
                                                )
                                    FROM (SELECT p_office_cd office_cd
                                            FROM DUAL) x,
                                         (SELECT     office_cd
                                                FROM hrm_office_setup
                                          CONNECT BY PRIOR office_cd =
                                                               control_office_cd
                                          START WITH office_cd = p_office_cd) y)*//*AND NVL (b.cost_center, 'X') =
                                   NVL (p_cost_center, NVL (b.cost_center, 'X'))*/
                AND (   (p_cost_center IS NULL AND 1 = 1)
                     OR (    p_cost_center IS NOT NULL
                         AND EXISTS (
                                SELECT 1
                                  FROM (SELECT p_cost_center office_cd
                                          FROM DUAL
                                         WHERE p_check = '0'
                                        UNION
                                        SELECT     office_cd
                                              FROM hrm_office_setup
                                             WHERE p_check = '1'
                                        CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                        START WITH office_cd = p_cost_center) y
                                 WHERE office_cd = b.cost_center)
                        )
                    )
                AND a.glac_sl_no = p_glac_no
                AND TRUNC (b.vouch_dt) BETWEEN NVL (pdate_from,
                                                    TRUNC (b.vouch_dt)
                                                   )
                                           AND NVL (pdate_to,
                                                    TRUNC (b.vouch_dt)
                                                   )
                AND b.object_cd = NVL (p_business_tp, b.object_cd)
                AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                AND (   (p_ins_tp_cd IS NOT NULL AND b.ins_tp_cd = p_ins_tp_cd
                        )
                     OR (p_ins_tp_cd IS NULL AND 1 = 1)
                    )
                AND a.vouch_no = b.vouch_no
                AND a.glac_sl_no = c.glac_sl_no)
         LOOP
            l_tab.vouch_dt := i.vouch_dt;
            l_tab.vouch_no := i.vouch_no;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;
            l_tab.narration := i.narration;
            l_tab.vouch_cd := i.vouch_cd;
            l_tab.cost_center := i.cost_center;
            ---- added by Anamul on 7.04.2019
            PIPE ROW (l_tab);
         END LOOP;

         RETURN;
      END IF;
   END;

    /*******************************
   Trial Balance
   Modified by: Md Zahid Hasan
   Date: 10-November-2014
   Modified Area: added parmeter p_ins_tp_cd
   ********************************/
   FUNCTION rep_acc_trial_bal (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2,
      p_opening_st     IN   CHAR
   --Here 1=with opening balance,'2'=Without Opening Balance,'3'=Only Opening
   )
      RETURN acc_trial_tab PIPELINED
   AS
      l_tab               acc_trial_row;
      v_gl_prev_balance   NUMBER (12, 2);
      v_error             VARCHAR2 (100);
      v_opening_bal       NUMBER (12, 2) := 0;
      v_date_from         DATE;
      v_debit_amt         NUMBER         := 0;
      v_credit_amt        NUMBER         := 0;
      v_count             NUMBER (10)    := 0;
   BEGIN
      SELECT COUNT (1)
        INTO v_count
        FROM acc_gl_coa c, acc_gl_cost_bal_sheet m
       WHERE p_cost_center IS NOT NULL
         AND c.postable = 'P'
         AND c.glac_sl_no = m.glac_sl_no
         AND m.office_cd = p_cost_center
         AND TO_CHAR (opening_dt, 'RRRR') = TO_CHAR (p_date_to, 'RRRR');

      IF p_fiscal_yr_tp = '0'
      THEN
         v_date_from :=
            TO_DATE ('01-JAN-' || TO_CHAR (TO_DATE (p_date_to), 'RRRR'),
                     'DD-MON-RRRR'
                    );

         FOR i IN
            (SELECT   y.glac_sl_no, y.cntrl_glac_sl_no, y.glac_no, y.glac_nm,
                      y.account_type, NVL (SUM (bal), 0) bal
                 FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal
                           FROM (SELECT   NVL
                                             (d.divert_to_glac_sl_no,
                                              a.glac_sl_no
                                             ) glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit
                                     FROM acc_gl_trans_dtl a,
                                          acc_gl_trans_mst b,
                                          acc_cash_book_divert d
                                    WHERE p_opening_st <> '3'
                                      AND a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                 AND p_date_to
                                      AND b.ins_tp_cd =
                                                NVL (p_ins_tp_cd, b.ins_tp_cd)
                                      AND b.office_cd = p_office_cd
                                      AND b.cost_center =
                                             NVL (p_cost_center,
                                                  b.cost_center)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '0'
                                      AND a.glac_sl_no = d.glac_sl_no(+)
                                      AND NVL (b.adjustment_st, '0') = '0'
                                 GROUP BY a.glac_sl_no,
                                          d.divert_to_glac_sl_no
                                 UNION ALL
                                 SELECT   a.glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit
                                     FROM acc_gl_trans_dtl a,
                                          acc_gl_trans_mst b
                                    WHERE p_opening_st <> '3'
                                      AND a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                 AND p_date_to
                                      AND b.ins_tp_cd =
                                                NVL (p_ins_tp_cd, b.ins_tp_cd)
                                      AND b.office_cd = p_office_cd
                                      AND b.cost_center =
                                             NVL (p_cost_center,
                                                  b.cost_center)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '1'
                                 GROUP BY a.glac_sl_no
                                 UNION ALL
                                 SELECT   a.glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit
                                     FROM acc_gl_trans_dtl a,
                                          acc_gl_trans_mst b
                                    WHERE p_opening_st <> '3'
                                      AND a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                 AND p_date_to
                                      AND b.ins_tp_cd =
                                                NVL (p_ins_tp_cd, b.ins_tp_cd)
                                      AND b.office_cd = p_office_cd
                                      AND b.cost_center =
                                             NVL (p_cost_center,
                                                  b.cost_center)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '0'
                                      AND NVL (b.adjustment_st, '0') = '1'
                                 GROUP BY a.glac_sl_no) u
                       GROUP BY glac_sl_no) x,
                      (SELECT c.glac_sl_no, c.cntrl_glac_sl_no, c.glac_no,
                              c.glac_nm, c.account_type
                         FROM acc_gl_coa c, acc_gl_coa_mst m
                        WHERE (p_cost_center IS NULL OR v_count = 0)
                          AND c.postable = 'P'
                          AND c.glac_sl_no = m.glac_sl_no
                          AND m.office_cd = p_office_cd
                       UNION
                       SELECT c.glac_sl_no, c.cntrl_glac_sl_no, c.glac_no,
                              c.glac_nm, c.account_type
                         FROM acc_gl_coa c, acc_gl_cost_bal_sheet m
                        WHERE (p_cost_center IS NOT NULL AND v_count > 0)
                          AND c.postable = 'P'
                          AND c.glac_sl_no = m.glac_sl_no
                          AND m.office_cd = p_cost_center
                          AND TO_CHAR (opening_dt, 'RRRR') =
                                                   TO_CHAR (p_date_to, 'RRRR')) y
                WHERE x.glac_sl_no(+) = y.glac_sl_no
             GROUP BY y.glac_sl_no,
                      y.cntrl_glac_sl_no,
                      y.glac_no,
                      y.glac_nm,
                      y.account_type
             ORDER BY y.glac_no)
         LOOP
            BEGIN
               IF p_cost_center IS NULL
               THEN
                  IF TO_CHAR (p_date_from, 'RRRR') =
                                                    TO_CHAR (SYSDATE, 'RRRR')
                  THEN
                     SELECT NVL (DECODE (p_ins_tp_cd,
                                         '1', m.opening_bal_con,
                                         '2', m.opening_bal_tak,
                                         m.opening_bal
                                        ),
                                 0
                                )
                       INTO v_gl_prev_balance
                       FROM acc_gl_coa_mst m
                      --This acc_gl_coa is asded on 16/08/17
                     WHERE  p_opening_st <> '2'
                        AND m.glac_sl_no = i.glac_sl_no
                        AND m.office_cd = p_office_cd;
                  ELSE
                     SELECT NVL (DECODE (p_ins_tp_cd,
                                         '1', m.opening_bal_con,
                                         '2', m.opening_bal_tak,
                                         m.opening_bal
                                        ),
                                 0
                                )
                       INTO v_gl_prev_balance
                       FROM acc_gl_coa_mst_hist m
                      --This acc_gl_coa is asded on 16/08/17
                     WHERE  p_opening_st <> '2'
                        AND m.glac_sl_no = i.glac_sl_no
                        AND m.office_cd = p_office_cd
                        AND bal_year = TO_CHAR (p_date_from, 'RRRR')
                        AND quarter = 1;
                  END IF;
               ELSE
                  SELECT NVL (DECODE (p_ins_tp_cd,
                                      '1', opening_bal_con,
                                      '2', opening_bal_tak,
                                      opening_bal
                                     ),
                              0
                             )
                    INTO v_gl_prev_balance
                    FROM acc_gl_cost_bal_sheet
                   WHERE p_opening_st <> '2'
                     AND glac_sl_no = i.glac_sl_no
                     AND office_cd = p_cost_center
                     AND TO_CHAR (opening_dt, 'RRRR') =
                                                   TO_CHAR (p_date_to, 'RRRR');
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_gl_prev_balance := 0;
            END;

            SELECT ABS
                      (CASE
                          WHEN (    i.account_type = 'D'
                                AND i.bal + NVL (v_gl_prev_balance, 0) > 0
                               )
                           OR (    i.account_type = 'C'
                               AND i.bal + NVL (v_gl_prev_balance, 0) > 0
                              )
                             THEN i.bal + NVL (v_gl_prev_balance, 0)
                          ELSE 0
                       END
                      ),
                   ABS
                      (CASE
                          WHEN (    i.account_type = 'D'
                                AND i.bal + NVL (v_gl_prev_balance, 0) < 0
                               )
                           OR (    i.account_type = 'C'
                               AND i.bal + NVL (v_gl_prev_balance, 0) < 0
                              )
                             THEN i.bal + NVL (v_gl_prev_balance, 0)
                          ELSE 0
                       END
                      )
              INTO v_debit_amt,
                   v_credit_amt
              FROM DUAL;

            IF v_debit_amt = 0 AND v_credit_amt = 0
            THEN
               NULL;
            ELSE
               l_tab.glac_sl_no := i.glac_sl_no;
               l_tab.cntrl_glac_sl_no := i.cntrl_glac_sl_no;
               l_tab.glac_no := i.glac_no;
               l_tab.glac_nm := i.glac_nm;
               l_tab.credit_amt := v_credit_amt;
               l_tab.debit_amt := v_debit_amt;
               PIPE ROW (l_tab);
            END IF;
         END LOOP;

         RETURN;
      ELSE
         v_date_from :=
            TO_DATE ('01-JAN-' || TO_CHAR (TO_DATE (p_date_to), 'RRRR'),
                     'DD-MON-RRRR'
                    );

         FOR i IN
            (SELECT   y.glac_sl_no, y.cntrl_glac_sl_no, y.glac_no, y.glac_nm,
                      y.account_type, NVL (SUM (bal), 0) bal
                 FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal
                           FROM (SELECT   NVL
                                             (d.divert_to_glac_sl_no,
                                              a.glac_sl_no
                                             ) glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit
                                     FROM acc_gl_trans_dtl_hist a,
                                          acc_gl_trans_mst_hist b,
                                          acc_cash_book_divert d
                                    WHERE p_opening_st <> '3'
                                      AND a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                 AND p_date_to
                                      AND b.ins_tp_cd =
                                                NVL (p_ins_tp_cd, b.ins_tp_cd)
                                      AND b.office_cd = p_office_cd
                                      AND b.cost_center =
                                             NVL (p_cost_center,
                                                  b.cost_center)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '0'
                                      AND a.glac_sl_no = d.glac_sl_no(+)
                                      AND NVL (b.adjustment_st, '0') = '0'
                                 GROUP BY a.glac_sl_no,
                                          d.divert_to_glac_sl_no
                                 UNION ALL
                                 SELECT   a.glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit
                                     FROM acc_gl_trans_dtl_hist a,
                                          acc_gl_trans_mst_hist b
                                    WHERE p_opening_st <> '3'
                                      AND a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                 AND p_date_to
                                      AND b.ins_tp_cd =
                                                NVL (p_ins_tp_cd, b.ins_tp_cd)
                                      AND b.office_cd = p_office_cd
                                      AND b.cost_center =
                                             NVL (p_cost_center,
                                                  b.cost_center)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '1'
                                 GROUP BY a.glac_sl_no
                                 UNION ALL
                                 SELECT   a.glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit
                                     FROM acc_gl_trans_dtl_hist a,
                                          acc_gl_trans_mst_hist b
                                    WHERE p_opening_st <> '3'
                                      AND a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                 AND p_date_to
                                      AND b.ins_tp_cd =
                                                NVL (p_ins_tp_cd, b.ins_tp_cd)
                                      AND b.office_cd = p_office_cd
                                      AND b.cost_center =
                                             NVL (p_cost_center,
                                                  b.cost_center)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '0'
                                      AND NVL (b.adjustment_st, '0') = '1'
                                 GROUP BY a.glac_sl_no) u
                       GROUP BY glac_sl_no) x,
                      (SELECT c.glac_sl_no, c.cntrl_glac_sl_no, c.glac_no,
                              c.glac_nm, c.account_type
                         FROM acc_gl_coa c, acc_gl_coa_mst_hist m
                        WHERE (p_cost_center IS NULL OR v_count = 0)
                          AND c.postable = 'P'
                          AND c.glac_sl_no = m.glac_sl_no
                          AND m.office_cd = p_office_cd
                          AND m.bal_year = EXTRACT (YEAR FROM (p_date_to))
                          AND m.quarter = 4
                       UNION
                       SELECT c.glac_sl_no, c.cntrl_glac_sl_no, c.glac_no,
                              c.glac_nm, c.account_type
                         FROM acc_gl_coa c, acc_gl_cost_bal_sheet m
                        WHERE (p_cost_center IS NOT NULL AND v_count > 0)
                          AND c.postable = 'P'
                          AND c.glac_sl_no = m.glac_sl_no
                          AND m.office_cd = p_cost_center
                          AND TO_CHAR (opening_dt, 'RRRR') =
                                                   TO_CHAR (p_date_to, 'RRRR')) y
                WHERE x.glac_sl_no(+) = y.glac_sl_no
             GROUP BY y.glac_sl_no,
                      y.cntrl_glac_sl_no,
                      y.glac_no,
                      y.glac_nm,
                      y.account_type
             ORDER BY y.glac_no)
         LOOP
            BEGIN
               IF p_cost_center IS NULL
               THEN
                  SELECT NVL (DECODE (p_ins_tp_cd,
                                      '1', m.opening_bal_con,
                                      '2', m.opening_bal_tak,
                                      m.opening_bal
                                     ),
                              0
                             )
                    INTO v_gl_prev_balance
                    FROM acc_gl_coa_mst_hist m
                   WHERE p_opening_st <> '2'
                     AND m.glac_sl_no = i.glac_sl_no
                     AND m.office_cd = p_office_cd
                     AND bal_year = TO_CHAR (p_date_from, 'RRRR')
                     AND quarter = 4;
               ELSE
                  SELECT NVL (DECODE (p_ins_tp_cd,
                                      '1', opening_bal_con,
                                      '2', opening_bal_tak,
                                      opening_bal
                                     ),
                              0
                             )
                    INTO v_gl_prev_balance
                    FROM acc_gl_cost_bal_sheet
                   WHERE p_opening_st <> '2'
                     AND glac_sl_no = i.glac_sl_no
                     AND office_cd = p_cost_center
                     AND TO_CHAR (opening_dt, 'RRRR') =
                                                   TO_CHAR (p_date_to, 'RRRR');
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_gl_prev_balance := 0;
            END;

            SELECT ABS
                      (CASE
                          WHEN (    i.account_type = 'D'
                                AND i.bal + NVL (v_gl_prev_balance, 0) > 0
                               )
                           OR (    i.account_type = 'C'
                               AND i.bal + NVL (v_gl_prev_balance, 0) > 0
                              )
                             THEN i.bal + NVL (v_gl_prev_balance, 0)
                          ELSE 0
                       END
                      ),
                   ABS
                      (CASE
                          WHEN (    i.account_type = 'D'
                                AND i.bal + NVL (v_gl_prev_balance, 0) < 0
                               )
                           OR (    i.account_type = 'C'
                               AND i.bal + NVL (v_gl_prev_balance, 0) < 0
                              )
                             THEN i.bal + NVL (v_gl_prev_balance, 0)
                          ELSE 0
                       END
                      )
              INTO v_debit_amt,
                   v_credit_amt
              FROM DUAL;

            IF v_debit_amt = 0 AND v_credit_amt = 0
            THEN
               NULL;
            ELSE
               l_tab.glac_sl_no := i.glac_sl_no;
               l_tab.cntrl_glac_sl_no := i.cntrl_glac_sl_no;
               l_tab.glac_no := i.glac_no;
               l_tab.glac_nm := i.glac_nm;
               l_tab.credit_amt := v_credit_amt;
               l_tab.debit_amt := v_debit_amt;
               PIPE ROW (l_tab);
            END IF;
         END LOOP;

         RETURN;
      END IF;
   END;

   /*******************************
   Trial Balance Details
   Create by: Syed Md. Musha
   Date: 31-Jan-2016
   Modified Area: added parmeter p_ins_tp_cd
   ********************************/
   FUNCTION rep_acc_trial_bal_detl (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_glac_sl_no     IN   acc_gl_coa.glac_sl_no%TYPE,
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2
   )
      RETURN acc_trial_detl_tab PIPELINED
   AS
      l_tab   acc_trial_detl_row;
   BEGIN
      IF p_fiscal_yr_tp = '0'
      THEN
         FOR i IN
            (SELECT   b.cost_center, a.glac_sl_no, c.cntrl_glac_sl_no,
                      c.glac_no, c.glac_nm, c.account_type,
                      
                      --SUM(DECODE(a.dr_cr, 'D', a.trans_amt, 0)) debit_amt,
                      --SUM(DECODE(a.dr_cr, 'C', a.trans_amt, 0)) credit_amt
                      DECODE (c.account_type,
                              'D', SUM (DECODE (a.dr_cr, 'D', a.trans_amt, 0))
                               - SUM (DECODE (a.dr_cr, 'C', a.trans_amt, 0)),
                              0
                             ) debit_amt,
                      DECODE (c.account_type,
                              'C', SUM (DECODE (a.dr_cr, 'C', a.trans_amt, 0))
                               - SUM (DECODE (a.dr_cr, 'D', a.trans_amt, 0)),
                              0
                             ) credit_amt
                 FROM acc_gl_trans_dtl a, acc_gl_trans_mst b, acc_gl_coa c
                WHERE a.vouch_no = b.vouch_no
                  AND a.glac_sl_no = c.glac_sl_no
                  AND TRUNC (b.vouch_dt) BETWEEN p_date_from AND p_date_to
                  AND b.ins_tp_cd = NVL (p_ins_tp_cd, b.ins_tp_cd)
                  AND a.glac_sl_no = NVL (p_glac_sl_no, a.glac_sl_no)
                  AND b.office_cd IN (
                         SELECT DISTINCT DECODE (p_check,
                                                 '0', x.office_cd,
                                                 y.office_cd
                                                )
                                    FROM (SELECT p_office_cd office_cd
                                            FROM DUAL) x,
                                         (SELECT     office_cd
                                                FROM hrm_office_setup
                                          CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                          START WITH office_cd = p_office_cd) y)
                  AND b.cost_center = NVL (p_cost_center, b.cost_center)
             GROUP BY b.cost_center,
                      a.glac_sl_no,
                      c.cntrl_glac_sl_no,
                      c.glac_no,
                      c.glac_nm,
                      c.account_type)
         LOOP
            l_tab.cost_center := i.cost_center;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.cntrl_glac_sl_no := i.cntrl_glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;

            --l_tab.credit_amt        := i.credit_amt;
            --l_tab.debit_amt         := i.debit_amt;
            IF i.credit_amt > 0
            THEN
               l_tab.credit_amt := i.credit_amt;
            ELSIF i.debit_amt < 0
            THEN
               l_tab.credit_amt := ABS (i.debit_amt);
            ELSIF i.credit_amt <= 0
            THEN
               l_tab.credit_amt := 0;
            END IF;

            IF i.debit_amt > 0
            THEN
               l_tab.debit_amt := i.debit_amt;
            ELSIF i.credit_amt < 0
            THEN
               l_tab.debit_amt := ABS (i.credit_amt);
            ELSIF i.debit_amt <= 0
            THEN
               l_tab.debit_amt := 0;
            END IF;

            PIPE ROW (l_tab);
         END LOOP;

         RETURN;
      ELSE
         FOR i IN
            (SELECT   b.cost_center, a.glac_sl_no, c.cntrl_glac_sl_no,
                      c.glac_no, c.glac_nm, c.account_type,
                      SUM (DECODE (a.dr_cr, 'D', a.trans_amt, 0)) debit_amt,
                      SUM (DECODE (a.dr_cr, 'C', a.trans_amt, 0)) credit_amt
                 FROM acc_gl_trans_dtl_hist a,
                      acc_gl_trans_mst_hist b,
                      acc_gl_coa c
                WHERE a.vouch_no = b.vouch_no
                  AND a.glac_sl_no = c.glac_sl_no
                  AND TRUNC (b.vouch_dt) BETWEEN p_date_from AND p_date_to
                  AND b.office_cd IN (
                         SELECT DISTINCT DECODE (p_check,
                                                 '0', x.office_cd,
                                                 y.office_cd
                                                )
                                    FROM (SELECT p_office_cd office_cd
                                            FROM DUAL) x,
                                         (SELECT     office_cd
                                                FROM hrm_office_setup
                                          CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                          START WITH office_cd = p_office_cd) y)
                  AND b.cost_center = NVL (p_cost_center, b.cost_center)
             GROUP BY b.cost_center,
                      a.glac_sl_no,
                      c.cntrl_glac_sl_no,
                      c.glac_no,
                      c.glac_nm,
                      c.account_type)
         LOOP
            l_tab.cost_center := i.cost_center;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.cntrl_glac_sl_no := i.cntrl_glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;
            PIPE ROW (l_tab);
         END LOOP;

         RETURN;
      END IF;
   END;

   FUNCTION rep_acc_income_expense (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2
   )
      RETURN acc_inex_tab PIPELINED
   AS
      l_tab   acc_inex_row;
   BEGIN
      IF p_fiscal_yr_tp = '0'
      THEN
         FOR i IN
            (SELECT   c.glac_type, d.glac_sl_no, c.glac_nm,
                      DECODE (c.account_type,
                              'C', SUM (DECODE (d.dr_cr, 'C', d.trans_amt, 0))
                               - SUM (DECODE (d.dr_cr, 'D', d.trans_amt, 0))
                             ) credit_amt,
                      DECODE (c.account_type,
                              'D', SUM (DECODE (d.dr_cr, 'D', d.trans_amt, 0))
                               - SUM (DECODE (d.dr_cr, 'C', d.trans_amt, 0))
                             ) debit_amt
                 FROM acc_gl_trans_mst m, acc_gl_trans_dtl d, acc_gl_coa c
                WHERE m.office_cd IN (
                         SELECT DISTINCT DECODE (p_check,
                                                 '0', x.office_cd,
                                                 y.office_cd
                                                )
                                    FROM (SELECT p_office_cd office_cd
                                            FROM DUAL) x,
                                         (SELECT     office_cd
                                                FROM hrm_office_setup
                                          CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                          START WITH office_cd = p_office_cd) y)
                  AND c.glac_type IN ('I', 'E')
                  AND m.ins_tp_cd = p_ins_tp_cd
                  AND m.vouch_dt BETWEEN p_date_from AND p_date_to
                  AND d.glac_sl_no = c.glac_sl_no
                  AND m.vouch_no = d.vouch_no
             GROUP BY c.glac_type, d.glac_sl_no, c.glac_nm, c.account_type)
         LOOP
            l_tab.glac_type := i.glac_type;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;
            PIPE ROW (l_tab);
         END LOOP;

         RETURN;
      ELSE
         FOR i IN
            (SELECT   c.glac_type, d.glac_sl_no, c.glac_nm,
                      DECODE (c.account_type,
                              'C', SUM (DECODE (d.dr_cr, 'C', d.trans_amt, 0))
                               - SUM (DECODE (d.dr_cr, 'D', d.trans_amt, 0))
                             ) credit_amt,
                      DECODE (c.account_type,
                              'D', SUM (DECODE (d.dr_cr, 'D', d.trans_amt, 0))
                               - SUM (DECODE (d.dr_cr, 'C', d.trans_amt, 0))
                             ) debit_amt
                 FROM acc_gl_trans_mst_hist m,
                      acc_gl_trans_dtl_hist d,
                      acc_gl_coa c
                WHERE m.office_cd IN (
                         SELECT DISTINCT DECODE (p_check,
                                                 '0', x.office_cd,
                                                 y.office_cd
                                                )
                                    FROM (SELECT p_office_cd office_cd
                                            FROM DUAL) x,
                                         (SELECT     office_cd
                                                FROM hrm_office_setup
                                          CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                          START WITH office_cd = p_office_cd) y)
                  AND c.glac_type IN ('I', 'E')
                  AND m.vouch_dt BETWEEN p_date_from AND p_date_to
                  AND d.glac_sl_no = c.glac_sl_no
                  AND m.vouch_no = d.vouch_no
             GROUP BY c.glac_type, d.glac_sl_no, c.glac_nm, c.account_type
             ORDER BY d.glac_sl_no)
         LOOP
            l_tab.glac_type := i.glac_type;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;
            PIPE ROW (l_tab);
         END LOOP;

         RETURN;
      END IF;
   END;

   FUNCTION rep_acc_balance_sheet (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_fiscal_yr      IN   VARCHAR2,
      p_check          IN   VARCHAR2
   )
      RETURN acc_bal_tab PIPELINED
   AS
      l_tab                  acc_bal_row;
      v_bal_sheet_type       acc_gl_policy.bal_sheet_type%TYPE;
      v_bal_sheet_lvl        acc_gl_policy.bal_sheet_lvl%TYPE;
      v_fiscal_yr_tp         CHAR (1);
      err_acc_glacc_policy   EXCEPTION;
   BEGIN
      SELECT p.bal_sheet_type, p.bal_sheet_lvl
        INTO v_bal_sheet_type, v_bal_sheet_lvl
        FROM acc_gl_policy p
       WHERE auth_status = '1';

      IF v_bal_sheet_type IS NULL OR v_bal_sheet_lvl IS NULL
      THEN
         RAISE err_acc_glacc_policy;
      END IF;

      IF p_fiscal_yr = TO_CHAR (SYSDATE, 'RRRR')
      THEN
         v_fiscal_yr_tp := '0';
      ELSE
         v_fiscal_yr_tp := '1';
      END IF;

      IF v_fiscal_yr_tp = '0'
      THEN
         FOR i IN
            (SELECT   b.glac_sl_no, c.glac_nm, c.glac_type,
                      NVL (b.cntrl_glac_sl_no, b.glac_sl_no) control_ac,
                      (opening_bal + NVL (b.current_bal, 0)) cur_bal,
                      (SELECT SUM (opening_bal + NVL (b.current_bal, 0)
                                  )
                         FROM acc_gl_coa_mst
                        WHERE glac_sl_no = b.cntrl_glac_sl_no
                          AND office_cd = p_office_cd) total_bal
                 FROM acc_gl_coa_mst b, acc_gl_coa c
                WHERE b.office_cd IN (
                         SELECT DISTINCT DECODE (p_check,
                                                 '0', x.office_cd,
                                                 y.office_cd
                                                )
                                    FROM (SELECT p_office_cd office_cd
                                            FROM DUAL) x,
                                         (SELECT     office_cd
                                                FROM hrm_office_setup
                                          CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                          START WITH office_cd = p_office_cd) y)
                  AND b.glac_sl_no = c.glac_sl_no
                  AND (opening_bal + NVL (b.current_bal, 0)) > 0
                  AND (   (    DECODE (v_bal_sheet_type, '1', '1', '0') = '1'
                           AND c.lvl <= v_bal_sheet_lvl
                          )
                       OR (    DECODE (v_bal_sheet_type, '2', '1', '0') = '1'
                           AND c.bal_sheet_st = '1'
                          )
                      )
             ORDER BY NVL (b.cntrl_glac_sl_no, b.glac_sl_no))
         LOOP
            l_tab.glac_type := i.glac_type;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.cntrl_glac_sl_no := i.control_ac;
            l_tab.current_bal := i.cur_bal;
            l_tab.total_bal := i.total_bal;
            PIPE ROW (l_tab);
         END LOOP;

         RETURN;
      ELSE
         FOR i IN
            (SELECT b.glac_sl_no, c.glac_nm, c.glac_type,
                    NVL (b.cntrl_glac_sl_no, b.glac_sl_no) control_ac,
                    b.closing_bal cur_bal,
                    (SELECT SUM (b.closing_bal)
                       FROM acc_gl_coa_mst_hist
                      WHERE glac_sl_no = b.cntrl_glac_sl_no
                        AND office_cd = p_office_cd
                        AND bal_year = p_fiscal_yr) total_bal
               FROM acc_gl_coa_mst_hist b, acc_gl_coa c
              WHERE b.office_cd IN (
                       SELECT DISTINCT DECODE (p_check,
                                               '0', x.office_cd,
                                               y.office_cd
                                              )
                                  FROM (SELECT p_office_cd office_cd
                                          FROM DUAL) x,
                                       (SELECT     office_cd
                                              FROM hrm_office_setup
                                        CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                        START WITH office_cd = p_office_cd) y)
                AND b.glac_sl_no = c.glac_sl_no
                AND b.bal_year = p_fiscal_yr
                AND (opening_bal + NVL (b.current_bal, 0)) > 0
                AND (   (    DECODE (v_bal_sheet_type, '1', '1', '0') = '1'
                         AND c.lvl <= v_bal_sheet_lvl
                        )
                     OR (    DECODE (v_bal_sheet_type, '2', '1', '0') = '1'
                         AND c.bal_sheet_st = '1'
                        )
                    ))
         LOOP
            l_tab.glac_type := i.glac_type;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.cntrl_glac_sl_no := i.control_ac;
            l_tab.current_bal := i.cur_bal;
            l_tab.total_bal := i.total_bal;
            PIPE ROW (l_tab);
         END LOOP;

         RETURN;
      END IF;
   EXCEPTION
      WHEN err_acc_glacc_policy
      THEN
         NULL;
      WHEN OTHERS
      THEN
         NULL;
   END;

   FUNCTION rep_acc_per_trial_bal (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2,
      p_opening_st     IN   CHAR
   --Here 1=with opening balance,'2'=Without Opening Balance,'3'=Only Opening
   )
      RETURN acc_trial_tab PIPELINED
   AS
      l_tab               acc_trial_row;
      v_gl_prev_balance   NUMBER (12, 2);
      v_error             VARCHAR2 (100);
      v_opening_bal       NUMBER (12, 2) := 0;
      v_date_from         DATE;
      v_debit_amt         NUMBER         := 0;
      v_credit_amt        NUMBER         := 0;
   BEGIN
      IF p_fiscal_yr_tp = '0'
      THEN
         v_date_from := p_date_from;

         FOR i IN
            (SELECT   y.glac_sl_no, y.cntrl_glac_sl_no, y.glac_no, y.glac_nm,
                      y.account_type, NVL (SUM (bal), 0) bal
                 FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal
                           FROM (SELECT m.glac_sl_no,
                                        CASE
                                           WHEN vouch_st = '0'
                                              THEN m.debit
                                           WHEN vouch_st = '1'
                                           AND n.actual_amount_tp = 'D'
                                           AND ABS (m.debit) > 0
                                           AND n.record_no = 2
                                              THEN m.debit
                                           WHEN vouch_st = '1'
                                           AND n.actual_amount_tp = 'C'
                                           AND ABS (m.debit) > 0
                                           AND n.record_no = 2
                                              THEN n.actual_amount
                                           ELSE m.debit
                                        END debit,
                                        CASE
                                           WHEN vouch_st = '0'
                                              THEN m.credit
                                           WHEN vouch_st = '1'
                                           AND n.actual_amount_tp = 'C'
                                           AND ABS (m.credit) > 0
                                           AND n.record_no = 2
                                              THEN m.credit
                                           WHEN vouch_st = '1'
                                           AND n.actual_amount_tp = 'D'
                                           AND ABS (m.credit) > 0
                                           AND n.record_no = 2
                                              THEN n.actual_amount
                                           ELSE m.credit
                                        END credit,
                                        n.actual_amount, n.actual_amount_tp,
                                        n.record_no, n.vouch_st
                                   FROM (SELECT a.vouch_no,
                                                NVL
                                                   (d.divert_to_glac_sl_no,
                                                    a.glac_sl_no
                                                   ) glac_sl_no,
                                                DECODE (a.dr_cr,
                                                        'D', a.trans_amt,
                                                        0
                                                       ) debit,
                                                DECODE (a.dr_cr,
                                                        'C', a.trans_amt,
                                                        0
                                                       ) credit
                                           FROM acc_gl_trans_dtl a,
                                                acc_gl_trans_mst b,
                                                acc_cash_book_divert d
                                          WHERE p_opening_st <> '3'
                                            AND a.office_cd = b.office_cd
                                            AND a.vouch_no = b.vouch_no
                                            AND TRUNC (b.vouch_dt)
                                                   BETWEEN v_date_from
                                                       AND p_date_to
                                            AND b.ins_tp_cd =
                                                   NVL (p_ins_tp_cd,
                                                        b.ins_tp_cd
                                                       )
                                            AND b.office_cd = p_office_cd
                                            AND b.cost_center =
                                                   NVL (p_cost_center,
                                                        b.cost_center
                                                       )
                                            AND NVL (b.ledger_st, '1') = '1'
                                            AND NVL (b.payable_st, '0') = '0'
                                            AND a.glac_sl_no = d.glac_sl_no(+)
                                            AND (   (    b.vouch_cd = '05'
                                                     AND b.narration LIKE
                                                                    'Invalid%'
                                                    )
                                                 OR (b.vouch_cd <> '05')
                                                )
                                            AND NOT EXISTS (
                                                   SELECT 1
                                                     FROM acc_gl_coa
                                                    WHERE glac_sl_no =
                                                                  a.glac_sl_no
                                                      AND glac_type = 'L'
                                                      AND a.dr_cr = 'C'
                                                      AND b.vouch_cd IN
                                                                 ('04', '02'))
                                         UNION ALL
                                         SELECT a.vouch_no, a.glac_sl_no,
                                                DECODE (a.dr_cr,
                                                        'D', a.trans_amt,
                                                        0
                                                       ) debit,
                                                DECODE (a.dr_cr,
                                                        'C', a.trans_amt,
                                                        0
                                                       ) credit
                                           FROM acc_gl_trans_dtl a,
                                                acc_gl_trans_mst b
                                          WHERE p_opening_st <> '3'
                                            AND a.office_cd = b.office_cd
                                            AND a.vouch_no = b.vouch_no
                                            AND TRUNC (b.vouch_dt)
                                                   BETWEEN v_date_from
                                                       AND p_date_to
                                            AND b.ins_tp_cd =
                                                   NVL (p_ins_tp_cd,
                                                        b.ins_tp_cd
                                                       )
                                            AND b.office_cd = p_office_cd
                                            AND b.cost_center =
                                                   NVL (p_cost_center,
                                                        b.cost_center
                                                       )
                                            AND NVL (b.ledger_st, '1') = '1'
                                            AND NVL (b.payable_st, '0') = '1'
                                            AND (   (    b.vouch_cd = '05'
                                                     AND b.narration LIKE
                                                                    'Invalid%'
                                                    )
                                                 OR (b.vouch_cd <> '05')
                                                )
                                            AND NOT EXISTS (
                                                   SELECT 1
                                                     FROM acc_gl_coa
                                                    WHERE glac_sl_no =
                                                                  a.glac_sl_no
                                                      AND glac_type = 'L'
                                                      AND a.dr_cr = 'C'
                                                      AND b.vouch_cd IN
                                                                 ('04', '02'))) m,
                                        (SELECT vouch_no, debit, credit,
                                                CASE
                                                   WHEN debit =
                                                              credit
                                                      THEN '0'
                                                   ELSE '1'
                                                END vouch_st,
                                                CASE
                                                   WHEN debit <
                                                          credit
                                                      THEN debit
                                                   WHEN credit <
                                                          debit
                                                      THEN credit
                                                   ELSE 0
                                                END actual_amount,
                                                CASE
                                                   WHEN debit <
                                                          credit
                                                      THEN 'D'
                                                   WHEN credit <
                                                          debit
                                                      THEN 'C'
                                                   ELSE NULL
                                                END actual_amount_tp,
                                                record_no
                                           FROM (SELECT   a.vouch_no,
                                                          SUM
                                                             (DECODE
                                                                 (a.dr_cr,
                                                                  'D', a.trans_amt,
                                                                  0
                                                                 )
                                                             ) debit,
                                                          SUM
                                                             (DECODE
                                                                 (a.dr_cr,
                                                                  'C', a.trans_amt,
                                                                  0
                                                                 )
                                                             ) credit,
                                                          COUNT (1) record_no
                                                     FROM acc_gl_trans_dtl a,
                                                          acc_gl_trans_mst b,
                                                          acc_cash_book_divert d
                                                    WHERE p_opening_st <> '3'
                                                      AND a.office_cd =
                                                                   b.office_cd
                                                      AND a.vouch_no =
                                                                    b.vouch_no
                                                      AND TRUNC (b.vouch_dt)
                                                             BETWEEN v_date_from
                                                                 AND p_date_to
                                                      AND b.ins_tp_cd =
                                                             NVL (p_ins_tp_cd,
                                                                  b.ins_tp_cd
                                                                 )
                                                      AND b.office_cd =
                                                                   p_office_cd
                                                      AND b.cost_center =
                                                             NVL
                                                                (p_cost_center,
                                                                 b.cost_center
                                                                )
                                                      AND NVL (b.ledger_st,
                                                               '1'
                                                              ) = '1'
                                                      AND NVL (b.payable_st,
                                                               '0'
                                                              ) = '0'
                                                      AND a.glac_sl_no = d.glac_sl_no(+)
                                                      AND (   (    b.vouch_cd =
                                                                          '05'
                                                               AND b.narration LIKE
                                                                      'Invalid%'
                                                              )
                                                           OR (b.vouch_cd <>
                                                                          '05'
                                                              )
                                                          )
                                                      AND NOT EXISTS (
                                                             SELECT 1
                                                               FROM acc_gl_coa
                                                              WHERE glac_sl_no =
                                                                       a.glac_sl_no
                                                                AND glac_type =
                                                                           'L'
                                                                AND a.dr_cr =
                                                                           'C'
                                                                AND b.vouch_cd IN
                                                                       ('04',
                                                                        '02'))
                                                 GROUP BY a.vouch_no
                                                 UNION ALL
                                                 SELECT   a.vouch_no,
                                                          SUM
                                                             (DECODE
                                                                 (a.dr_cr,
                                                                  'D', a.trans_amt,
                                                                  0
                                                                 )
                                                             ) debit,
                                                          SUM
                                                             (DECODE
                                                                 (a.dr_cr,
                                                                  'C', a.trans_amt,
                                                                  0
                                                                 )
                                                             ) credit,
                                                          COUNT (1) record_no
                                                     FROM acc_gl_trans_dtl a,
                                                          acc_gl_trans_mst b
                                                    WHERE p_opening_st <> '3'
                                                      AND a.office_cd =
                                                                   b.office_cd
                                                      AND a.vouch_no =
                                                                    b.vouch_no
                                                      AND TRUNC (b.vouch_dt)
                                                             BETWEEN v_date_from
                                                                 AND p_date_to
                                                      AND b.ins_tp_cd =
                                                             NVL (p_ins_tp_cd,
                                                                  b.ins_tp_cd
                                                                 )
                                                      AND b.office_cd =
                                                                   p_office_cd
                                                      AND b.cost_center =
                                                             NVL
                                                                (p_cost_center,
                                                                 b.cost_center
                                                                )
                                                      AND NVL (b.ledger_st,
                                                               '1'
                                                              ) = '1'
                                                      AND NVL (b.payable_st,
                                                               '0'
                                                              ) = '1'
                                                      AND (   (    b.vouch_cd =
                                                                          '05'
                                                               AND b.narration LIKE
                                                                      'Invalid%'
                                                              )
                                                           OR (b.vouch_cd <>
                                                                          '05'
                                                              )
                                                          )
                                                      AND NOT EXISTS (
                                                             SELECT 1
                                                               FROM acc_gl_coa
                                                              WHERE glac_sl_no =
                                                                       a.glac_sl_no
                                                                AND glac_type =
                                                                           'L'
                                                                AND a.dr_cr =
                                                                           'C'
                                                                AND b.vouch_cd IN
                                                                       ('04',
                                                                        '02'))
                                                 GROUP BY a.vouch_no) u) n
                                  WHERE m.vouch_no = n.vouch_no) l
                       GROUP BY glac_sl_no) x,
                      (SELECT c.glac_sl_no, c.cntrl_glac_sl_no, c.glac_no,
                              c.glac_nm, c.account_type
                         FROM acc_gl_coa c
                        WHERE c.postable = 'P') y
                WHERE x.glac_sl_no = y.glac_sl_no
             GROUP BY y.glac_sl_no,
                      y.cntrl_glac_sl_no,
                      y.glac_no,
                      y.glac_nm,
                      y.account_type
             ORDER BY y.glac_sl_no)
                    --Below part is omiited due to above part is added on 13/03/2018 by Md. Sayadur Rhamana
                    /* (SELECT   y.glac_sl_no, y.cntrl_glac_sl_no, y.glac_no, y.glac_nm,
                               y.account_type, NVL (SUM (bal), 0) bal
                          FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal
                                    FROM (SELECT   NVL
                                                      (d.divert_to_glac_sl_no,
                                                       a.glac_sl_no
                                                      ) glac_sl_no,
                                                   SUM (DECODE (a.dr_cr,
                                                                'D', a.trans_amt,
                                                                0
                                                               )
                                                       ) debit,
                                                   SUM (DECODE (a.dr_cr,
                                                                'C', a.trans_amt,
                                                                0
                                                               )
                                                       ) credit
                                              FROM acc_gl_trans_dtl a,
                                                   acc_gl_trans_mst b,
                                                   acc_cash_book_divert d
                                             WHERE p_opening_st <> '3'
                                               AND a.office_cd = b.office_cd
                                               AND a.vouch_no = b.vouch_no
                                               AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                          AND p_date_to
                                               AND b.ins_tp_cd =
                                                         NVL (p_ins_tp_cd, b.ins_tp_cd)
                                               AND b.office_cd = p_office_cd
                                               AND b.cost_center =
                                                      NVL (p_cost_center,
                                                           b.cost_center)
                                               AND NVL (b.ledger_st, '1') = '1'
                                               AND NVL (b.payable_st, '0') = '0'
                                               AND b.vouch_cd <> '05'
         --This Part is added due to make synchronize with receive & payment Statement by Md, Sayadur Rahaman on 11/03/2018 as per OTRS Ticket:Ticket#2018021344000142
                                               AND a.glac_sl_no = d.glac_sl_no(+)
                                          GROUP BY a.glac_sl_no,
                                                   d.divert_to_glac_sl_no
                                          UNION ALL
                                          SELECT   a.glac_sl_no,
                                                   SUM (DECODE (a.dr_cr,
                                                                'D', a.trans_amt,
                                                                0
                                                               )
                                                       ) debit,
                                                   SUM (DECODE (a.dr_cr,
                                                                'C', a.trans_amt,
                                                                0
                                                               )
                                                       ) credit
                                              FROM acc_gl_trans_dtl a,
                                                   acc_gl_trans_mst b
                                             WHERE p_opening_st <> '3'
                                               AND a.office_cd = b.office_cd
                                               AND a.vouch_no = b.vouch_no
                                               AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                          AND p_date_to
                                               AND b.ins_tp_cd =
                                                         NVL (p_ins_tp_cd, b.ins_tp_cd)
                                               AND b.office_cd = p_office_cd
                                               AND b.cost_center =
                                                      NVL (p_cost_center,
                                                           b.cost_center)
                                               AND NVL (b.ledger_st, '1') = '1'
                                               AND NVL (b.payable_st, '0') = '1'
                                               AND b.vouch_cd <> '05'
         --This Part is added due to make synchronize with receive & payment Statement by Md, Sayadur Rahaman on 11/03/2018 as per OTRS Ticket:Ticket#2018021344000142
                                          GROUP BY a.glac_sl_no) u
                                GROUP BY glac_sl_no) x,
                               (

                                SELECT c.glac_sl_no, c.cntrl_glac_sl_no, c.glac_no,
                                       c.glac_nm, c.account_type
                                  FROM acc_gl_coa c
                                 WHERE c.postable = 'P') y
                         WHERE x.glac_sl_no = y.glac_sl_no
                      GROUP BY y.glac_sl_no,
                               y.cntrl_glac_sl_no,
                               y.glac_no,
                               y.glac_nm,
                               y.account_type
                      ORDER BY y.glac_sl_no)*/
         LOOP
            --Below condition is added due to ticket ref Ticket#2018021344000142 where SL=7
            v_gl_prev_balance := 0;

            /*IF i.glac_sl_no IN ('101575', '101562')
            THEN
               SELECT SUM (fun_gl_head_opening (i.glac_sl_no,
                                                p_office_cd,
                                                p_cost_center,
                                                p_check,
                                                p_date_from,
                                                p_ins_tp_cd
                                               )
                          )
                 INTO v_gl_prev_balance
                 FROM DUAL;
            ELSE
               v_gl_prev_balance := 0;
            END IF;*/
            SELECT ABS
                      (CASE
                          WHEN (    i.account_type = 'D'
                                AND i.bal + NVL (v_gl_prev_balance, 0) > 0
                               )
                           OR (    i.account_type = 'C'
                               AND i.bal + NVL (v_gl_prev_balance, 0) > 0
                              )
                             THEN i.bal + NVL (v_gl_prev_balance, 0)
                          ELSE 0
                       END
                      ),
                   ABS
                      (CASE
                          WHEN (    i.account_type = 'D'
                                AND i.bal + NVL (v_gl_prev_balance, 0) < 0
                               )
                           OR (    i.account_type = 'C'
                               AND i.bal + NVL (v_gl_prev_balance, 0) < 0
                              )
                             THEN i.bal + NVL (v_gl_prev_balance, 0)
                          ELSE 0
                       END
                      )
              INTO v_debit_amt,
                   v_credit_amt
              FROM DUAL;

            IF v_debit_amt = 0 AND v_credit_amt = 0
            THEN
               NULL;
            ELSE
               l_tab.glac_sl_no := i.glac_sl_no;
               l_tab.cntrl_glac_sl_no := i.cntrl_glac_sl_no;
               l_tab.glac_no := i.glac_no;
               l_tab.glac_nm := i.glac_nm;
               l_tab.credit_amt := v_credit_amt;
               l_tab.debit_amt := v_debit_amt;
               PIPE ROW (l_tab);
            END IF;
         END LOOP;

         RETURN;
      ELSE
         v_date_from := p_date_from;

         FOR i IN
            (SELECT   y.glac_sl_no, y.cntrl_glac_sl_no, y.glac_no, y.glac_nm,
                      y.account_type, NVL (SUM (bal), 0) bal
                 FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal
                           FROM (SELECT m.glac_sl_no,
                                        CASE
                                           WHEN vouch_st = '0'
                                              THEN m.debit
                                           WHEN vouch_st = '1'
                                           AND n.actual_amount_tp = 'D'
                                           AND ABS (m.debit) > 0
                                           AND n.record_no = 2
                                              THEN m.debit
                                           WHEN vouch_st = '1'
                                           AND n.actual_amount_tp = 'C'
                                           AND ABS (m.debit) > 0
                                           AND n.record_no = 2
                                              THEN n.actual_amount
                                           ELSE m.debit
                                        END debit,
                                        CASE
                                           WHEN vouch_st = '0'
                                              THEN m.credit
                                           WHEN vouch_st = '1'
                                           AND n.actual_amount_tp = 'C'
                                           AND ABS (m.credit) > 0
                                           AND n.record_no = 2
                                              THEN m.credit
                                           WHEN vouch_st = '1'
                                           AND n.actual_amount_tp = 'D'
                                           AND ABS (m.credit) > 0
                                           AND n.record_no = 2
                                              THEN n.actual_amount
                                           ELSE m.credit
                                        END credit,
                                        n.actual_amount, n.actual_amount_tp,
                                        n.record_no, n.vouch_st
                                   FROM (SELECT a.vouch_no,
                                                NVL
                                                   (d.divert_to_glac_sl_no,
                                                    a.glac_sl_no
                                                   ) glac_sl_no,
                                                DECODE (a.dr_cr,
                                                        'D', a.trans_amt,
                                                        0
                                                       ) debit,
                                                DECODE (a.dr_cr,
                                                        'C', a.trans_amt,
                                                        0
                                                       ) credit
                                           FROM acc_gl_trans_dtl_hist a,
                                                acc_gl_trans_mst_hist b,
                                                acc_cash_book_divert d
                                          WHERE p_opening_st <> '3'
                                            AND a.office_cd = b.office_cd
                                            AND a.vouch_no = b.vouch_no
                                            AND TRUNC (b.vouch_dt)
                                                   BETWEEN v_date_from
                                                       AND p_date_to
                                            AND b.ins_tp_cd =
                                                   NVL (p_ins_tp_cd,
                                                        b.ins_tp_cd
                                                       )
                                            AND b.office_cd = p_office_cd
                                            AND b.cost_center =
                                                   NVL (p_cost_center,
                                                        b.cost_center
                                                       )
                                            AND NVL (b.ledger_st, '1') = '1'
                                            AND NVL (b.payable_st, '0') = '0'
                                            AND a.glac_sl_no = d.glac_sl_no(+)
                                            AND (   (    b.vouch_cd = '05'
                                                     AND b.narration LIKE
                                                                    'Invalid%'
                                                    )
                                                 OR (b.vouch_cd <> '05')
                                                )
                                            AND NOT EXISTS (
                                                   SELECT 1
                                                     FROM acc_gl_coa
                                                    WHERE glac_sl_no =
                                                                  a.glac_sl_no
                                                      AND glac_type = 'L'
                                                      AND a.dr_cr = 'C'
                                                      AND b.vouch_cd IN
                                                                 ('04', '02'))
                                         UNION ALL
                                         SELECT a.vouch_no, a.glac_sl_no,
                                                DECODE (a.dr_cr,
                                                        'D', a.trans_amt,
                                                        0
                                                       ) debit,
                                                DECODE (a.dr_cr,
                                                        'C', a.trans_amt,
                                                        0
                                                       ) credit
                                           FROM acc_gl_trans_dtl_hist a,
                                                acc_gl_trans_mst_hist b
                                          WHERE p_opening_st <> '3'
                                            AND a.office_cd = b.office_cd
                                            AND a.vouch_no = b.vouch_no
                                            AND TRUNC (b.vouch_dt)
                                                   BETWEEN v_date_from
                                                       AND p_date_to
                                            AND b.ins_tp_cd =
                                                   NVL (p_ins_tp_cd,
                                                        b.ins_tp_cd
                                                       )
                                            AND b.office_cd = p_office_cd
                                            AND b.cost_center =
                                                   NVL (p_cost_center,
                                                        b.cost_center
                                                       )
                                            AND NVL (b.ledger_st, '1') = '1'
                                            AND NVL (b.payable_st, '0') = '1'
                                            AND (   (    b.vouch_cd = '05'
                                                     AND b.narration LIKE
                                                                    'Invalid%'
                                                    )
                                                 OR (b.vouch_cd <> '05')
                                                )
                                            AND NOT EXISTS (
                                                   SELECT 1
                                                     FROM acc_gl_coa
                                                    WHERE glac_sl_no =
                                                                  a.glac_sl_no
                                                      AND glac_type = 'L'
                                                      AND a.dr_cr = 'C'
                                                      AND b.vouch_cd IN
                                                                 ('04', '02'))) m,
                                        (SELECT vouch_no, debit, credit,
                                                CASE
                                                   WHEN debit =
                                                              credit
                                                      THEN '0'
                                                   ELSE '1'
                                                END vouch_st,
                                                CASE
                                                   WHEN debit <
                                                          credit
                                                      THEN debit
                                                   WHEN credit <
                                                          debit
                                                      THEN credit
                                                   ELSE 0
                                                END actual_amount,
                                                CASE
                                                   WHEN debit <
                                                          credit
                                                      THEN 'D'
                                                   WHEN credit <
                                                          debit
                                                      THEN 'C'
                                                   ELSE NULL
                                                END actual_amount_tp,
                                                record_no
                                           FROM (SELECT   a.vouch_no,
                                                          SUM
                                                             (DECODE
                                                                 (a.dr_cr,
                                                                  'D', a.trans_amt,
                                                                  0
                                                                 )
                                                             ) debit,
                                                          SUM
                                                             (DECODE
                                                                 (a.dr_cr,
                                                                  'C', a.trans_amt,
                                                                  0
                                                                 )
                                                             ) credit,
                                                          COUNT (1) record_no
                                                     FROM acc_gl_trans_dtl_hist a,
                                                          acc_gl_trans_mst_hist b,
                                                          acc_cash_book_divert d
                                                    WHERE p_opening_st <> '3'
                                                      AND a.office_cd =
                                                                   b.office_cd
                                                      AND a.vouch_no =
                                                                    b.vouch_no
                                                      AND TRUNC (b.vouch_dt)
                                                             BETWEEN v_date_from
                                                                 AND p_date_to
                                                      AND b.ins_tp_cd =
                                                             NVL (p_ins_tp_cd,
                                                                  b.ins_tp_cd
                                                                 )
                                                      AND b.office_cd =
                                                                   p_office_cd
                                                      AND b.cost_center =
                                                             NVL
                                                                (p_cost_center,
                                                                 b.cost_center
                                                                )
                                                      AND NVL (b.ledger_st,
                                                               '1'
                                                              ) = '1'
                                                      AND NVL (b.payable_st,
                                                               '0'
                                                              ) = '0'
                                                      AND a.glac_sl_no = d.glac_sl_no(+)
                                                      AND (   (    b.vouch_cd =
                                                                          '05'
                                                               AND b.narration LIKE
                                                                      'Invalid%'
                                                              )
                                                           OR (b.vouch_cd <>
                                                                          '05'
                                                              )
                                                          )
                                                      AND NOT EXISTS (
                                                             SELECT 1
                                                               FROM acc_gl_coa
                                                              WHERE glac_sl_no =
                                                                       a.glac_sl_no
                                                                AND glac_type =
                                                                           'L'
                                                                AND a.dr_cr =
                                                                           'C'
                                                                AND b.vouch_cd IN
                                                                       ('04',
                                                                        '02'))
                                                 GROUP BY a.vouch_no
                                                 UNION ALL
                                                 SELECT   a.vouch_no,
                                                          SUM
                                                             (DECODE
                                                                 (a.dr_cr,
                                                                  'D', a.trans_amt,
                                                                  0
                                                                 )
                                                             ) debit,
                                                          SUM
                                                             (DECODE
                                                                 (a.dr_cr,
                                                                  'C', a.trans_amt,
                                                                  0
                                                                 )
                                                             ) credit,
                                                          COUNT (1) record_no
                                                     FROM acc_gl_trans_dtl_hist a,
                                                          acc_gl_trans_mst_hist b
                                                    WHERE p_opening_st <> '3'
                                                      AND a.office_cd =
                                                                   b.office_cd
                                                      AND a.vouch_no =
                                                                    b.vouch_no
                                                      AND TRUNC (b.vouch_dt)
                                                             BETWEEN v_date_from
                                                                 AND p_date_to
                                                      AND b.ins_tp_cd =
                                                             NVL (p_ins_tp_cd,
                                                                  b.ins_tp_cd
                                                                 )
                                                      AND b.office_cd =
                                                                   p_office_cd
                                                      AND b.cost_center =
                                                             NVL
                                                                (p_cost_center,
                                                                 b.cost_center
                                                                )
                                                      AND NVL (b.ledger_st,
                                                               '1'
                                                              ) = '1'
                                                      AND NVL (b.payable_st,
                                                               '0'
                                                              ) = '1'
                                                      AND (   (    b.vouch_cd =
                                                                          '05'
                                                               AND b.narration LIKE
                                                                      'Invalid%'
                                                              )
                                                           OR (b.vouch_cd <>
                                                                          '05'
                                                              )
                                                          )
                                                      AND NOT EXISTS (
                                                             SELECT 1
                                                               FROM acc_gl_coa
                                                              WHERE glac_sl_no =
                                                                       a.glac_sl_no
                                                                AND glac_type =
                                                                           'L'
                                                                AND a.dr_cr =
                                                                           'C'
                                                                AND b.vouch_cd IN
                                                                       ('04',
                                                                        '02'))
                                                 GROUP BY a.vouch_no) u) n
                                  WHERE m.vouch_no = n.vouch_no) l
                       GROUP BY glac_sl_no) x,
                      (SELECT c.glac_sl_no, c.cntrl_glac_sl_no, c.glac_no,
                              c.glac_nm, c.account_type
                         FROM acc_gl_coa c
                        WHERE c.postable = 'P') y
                WHERE x.glac_sl_no = y.glac_sl_no
             GROUP BY y.glac_sl_no,
                      y.cntrl_glac_sl_no,
                      y.glac_no,
                      y.glac_nm,
                      y.account_type
             ORDER BY y.glac_sl_no)
                    /* (SELECT   y.glac_sl_no, y.cntrl_glac_sl_no, y.glac_no, y.glac_nm,
                               y.account_type, NVL (SUM (bal), 0) bal
                          FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal
                                    FROM (SELECT   NVL
                                                      (d.divert_to_glac_sl_no,
                                                       a.glac_sl_no
                                                      ) glac_sl_no,
                                                   SUM (DECODE (a.dr_cr,
                                                                'D', a.trans_amt,
                                                                0
                                                               )
                                                       ) debit,
                                                   SUM (DECODE (a.dr_cr,
                                                                'C', a.trans_amt,
                                                                0
                                                               )
                                                       ) credit
                                              FROM acc_gl_trans_dtl_hist a,
                                                   acc_gl_trans_mst_hist b,
                                                   acc_cash_book_divert d
                                             WHERE a.office_cd = b.office_cd
                                               AND a.vouch_no = b.vouch_no
                                               AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                          AND p_date_to
                                               AND b.ins_tp_cd =
                                                         NVL (p_ins_tp_cd, b.ins_tp_cd)
                                               AND b.office_cd = p_office_cd
                                               AND b.cost_center =
                                                      NVL (p_cost_center,
                                                           b.cost_center)
                                               AND NVL (b.ledger_st, '1') = '1'
                                               AND NVL (b.payable_st, '0') = '0'
                                               AND a.glac_sl_no = d.glac_sl_no(+)
                                               AND b.vouch_cd <> '05'
         --This Part is added due to make synchronize with receive & payment Statement by Md, Sayadur Rahaman on 11/03/2018 as per OTRS Ticket:Ticket#2018021344000142
                                          GROUP BY a.glac_sl_no,
                                                   d.divert_to_glac_sl_no
                                          UNION ALL
                                          SELECT   a.glac_sl_no,
                                                   SUM (DECODE (a.dr_cr,
                                                                'D', a.trans_amt,
                                                                0
                                                               )
                                                       ) debit,
                                                   SUM (DECODE (a.dr_cr,
                                                                'C', a.trans_amt,
                                                                0
                                                               )
                                                       ) credit
                                              FROM acc_gl_trans_dtl_hist a,
                                                   acc_gl_trans_mst_hist b
                                             WHERE a.office_cd = b.office_cd
                                               AND a.vouch_no = b.vouch_no
                                               AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                          AND p_date_to
                                               AND b.ins_tp_cd =
                                                         NVL (p_ins_tp_cd, b.ins_tp_cd)
                                               AND b.office_cd = p_office_cd
                                               AND b.cost_center =
                                                      NVL (p_cost_center,
                                                           b.cost_center)
                                               AND NVL (b.ledger_st, '1') = '1'
                                               AND NVL (b.payable_st, '0') = '1'
                                               AND b.vouch_cd <> '05'
         --This Part is added due to make synchronize with receive & payment Statement by Md, Sayadur Rahaman on 11/03/2018 as per OTRS Ticket:Ticket#2018021344000142
                                          GROUP BY a.glac_sl_no) u
                                GROUP BY glac_sl_no) x,
                               (

                                SELECT c.glac_sl_no, c.cntrl_glac_sl_no, c.glac_no,
                                       c.glac_nm, c.account_type
                                  FROM acc_gl_coa c
                                 WHERE c.postable = 'P') y
                         WHERE x.glac_sl_no = y.glac_sl_no
                      GROUP BY y.glac_sl_no,
                               y.cntrl_glac_sl_no,
                               y.glac_no,
                               y.glac_nm,
                               y.account_type
                      ORDER BY y.glac_sl_no)*/
         LOOP
            v_gl_prev_balance := 0;

            SELECT ABS
                      (CASE
                          WHEN (    i.account_type = 'D'
                                AND i.bal + NVL (v_gl_prev_balance, 0) >= 0
                               )
                           OR (    i.account_type = 'C'
                               AND i.bal + NVL (v_gl_prev_balance, 0) >= 0
                              )
                             THEN i.bal + NVL (v_gl_prev_balance, 0)
                          ELSE 0
                       END
                      ),
                   ABS
                      (CASE
                          WHEN (    i.account_type = 'D'
                                AND i.bal + NVL (v_gl_prev_balance, 0) < 0
                               )
                           OR (    i.account_type = 'C'
                               AND i.bal + NVL (v_gl_prev_balance, 0) < 0
                              )
                             THEN i.bal + NVL (v_gl_prev_balance, 0)
                          ELSE 0
                       END
                      )
              INTO v_debit_amt,
                   v_credit_amt
              FROM DUAL;

            IF v_debit_amt = 0 AND v_credit_amt = 0
            THEN
               NULL;
            ELSE
               l_tab.glac_sl_no := i.glac_sl_no;
               l_tab.cntrl_glac_sl_no := i.cntrl_glac_sl_no;
               l_tab.glac_no := i.glac_no;
               l_tab.glac_nm := i.glac_nm;
               l_tab.credit_amt := v_credit_amt;
               l_tab.debit_amt := v_debit_amt;
               PIPE ROW (l_tab);
            END IF;
         END LOOP;

         RETURN;
      END IF;
   END;

   /*******************************
   Accounts Subsidiarry register
   Modified by: Md. Sayadur Rahaman
   Date: 11-Dec-2016
   Modified Area: added new field in query chq_o, chq_dt and filter field ins_tp_cd
   ********************************/
   FUNCTION rep_acc_sub_register (
      p_cost_center   IN   VARCHAR2,
      p_cost_check    IN   CHAR,
      p_glac_sl_no    IN   VARCHAR2,
      pdate_from      IN   DATE,
      pdate_to        IN   DATE                                         /*,
                                            p_emp_gid          IN   NUMBER,
                                            p_dev_emp_gid      IN   NUMBER,
                                            p_agent_id         IN   VARCHAR2,
                                            p_supplier_id      IN   NUMBER,
                                            p_rent_office_cd   IN   VARCHAR2,
                                            p_pgid             IN   VARCHAR2*/
   )
      RETURN acc_sub_regsiter_tab PIPELINED
   AS
      l_tab              acc_sub_register_row;
      v_party_nm         VARCHAR2 (500);
      v_cheque_no        VARCHAR2 (50);
      v_cheque_date      DATE;
      v_ded_amt          NUMBER (10);
      v_emp_gid          hrm_employee.emp_gid%TYPE;
      v_dev_emp_gid      hrm_employee.emp_gid%TYPE;
      v_agent_id         hrm_agent.agent_id%TYPE;
      v_supplier_id      acc_coll_media_supplier.supplier_id%TYPE;
      v_rent_office_cd   hrm_office.office_cd%TYPE;
      v_pgid             ins_p_proposal.pgid%TYPE;
   BEGIN
      FOR i IN (SELECT m.vouch_no, m.cost_center_vr_no, d.glac_sl_no,
                       d.chq_no, d.chq_dt, m.cost_center,
                       rep_f_office (m.cost_center) office_nm, d.trans_amt,
                       m.object_cd, m.trans_id, m.narration, c.glac_nm
                  FROM acc_gl_trans_mst m, acc_gl_trans_dtl d, acc_gl_coa c
                 WHERE m.office_cd = d.office_cd
                   AND m.vouch_no = d.vouch_no
                   AND m.vouch_dt BETWEEN pdate_from AND pdate_to
                   AND d.glac_sl_no = p_glac_sl_no
                   AND d.glac_sl_no = c.glac_sl_no
                   AND (   (    NVL (p_cost_check, '0') = '0'
                            AND m.cost_center =
                                            NVL (p_cost_center, m.cost_center)
                           )
                        OR (    NVL (p_cost_check, '0') = '1'
                            AND m.cost_center IN (
                                   SELECT     office_cd
                                         FROM hrm_office_setup
                                   START WITH office_cd = p_cost_center
                                   CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                           )
                       ))
      LOOP
----02235 pol_loan_recovery.fmx   Policy Loan Recovery
         IF i.object_cd = '02235'
         THEN
            BEGIN
               SELECT party_name, r.cheque_no, r.cheque_date, 0,
                      NULL, NULL, NULL, NULL,
                      NULL, p.pgid
                 INTO v_party_nm, v_cheque_no, v_cheque_date, v_ded_amt,
                      v_emp_gid, v_dev_emp_gid, v_agent_id, v_supplier_id,
                      v_rent_office_cd, v_pgid
                 FROM pol_loan_recovery r, ins_p_personal p
                WHERE receive_id = i.trans_id
                  AND r.pgid = p.pgid
                  AND p.party_cd = '03'
                  AND p.sl_no = '1';
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_party_nm := i.narration;
                  v_cheque_no := NULL;
                  v_cheque_date := NULL;
                  v_ded_amt := 0;
                  v_emp_gid := NULL;
                  v_dev_emp_gid := NULL;
                  v_agent_id := NULL;
                  v_supplier_id := NULL;
                  v_rent_office_cd := NULL;
                  v_pgid := NULL;
            END;
----02190 clm_payable_approval.fmx   Claim Approval
         ELSIF i.object_cd = '02190'
         THEN
            BEGIN
               SELECT party_name, r.cheque_no, r.cheque_dt, 0,
                      NULL, NULL, NULL, NULL,
                      NULL, p.pgid
                 INTO v_party_nm, v_cheque_no, v_cheque_date, v_ded_amt,
                      v_emp_gid, v_dev_emp_gid, v_agent_id, v_supplier_id,
                      v_rent_office_cd, v_pgid
                 FROM clm_claim_payable_gen r, ins_p_personal p
                WHERE payable_no = i.trans_id
                  AND r.pgid = p.pgid
                  AND p.party_cd = '03'
                  AND p.sl_no = '1';
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_party_nm := i.narration;
                  v_cheque_no := NULL;
                  v_cheque_date := NULL;
                  v_ded_amt := 0;
                  v_emp_gid := NULL;
                  v_dev_emp_gid := NULL;
                  v_agent_id := NULL;
                  v_supplier_id := NULL;
                  v_rent_office_cd := NULL;
                  v_pgid := NULL;
            END;
----05351 acc_oth_col_mst_approval.fmx  Others Collection Approval
         ELSIF i.object_cd = '05351'
         THEN
            BEGIN
               SELECT NVL (emp_nm_eng, collection_from), r.chq_no, r.chq_dt,
                      0, p.emp_gid, NULL, NULL,
                      NULL, NULL, NULL
                 INTO v_party_nm, v_cheque_no, v_cheque_date,
                      v_ded_amt, v_emp_gid, v_dev_emp_gid, v_agent_id,
                      v_supplier_id, v_rent_office_cd, v_pgid
                 FROM acc_oth_coll_mst r, hrm_employee p
                WHERE receive_id = i.trans_id AND r.collection_from_gid = p.emp_gid(+);
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_party_nm := i.narration;
                  v_cheque_no := NULL;
                  v_cheque_date := NULL;
                  v_ded_amt := 0;
                  v_emp_gid := NULL;
                  v_dev_emp_gid := NULL;
                  v_agent_id := NULL;
                  v_supplier_id := NULL;
                  v_rent_office_cd := NULL;
                  v_pgid := NULL;
            END;
         ELSE
            v_party_nm := NULL;
            v_cheque_no := NULL;
            v_cheque_date := NULL;
            v_ded_amt := 0;
            v_emp_gid := NULL;
            v_dev_emp_gid := NULL;
            v_agent_id := NULL;
            v_supplier_id := NULL;
            v_rent_office_cd := NULL;
            v_pgid := NULL;
         END IF;

         l_tab.vouch_no := i.vouch_no;
         l_tab.cost_center_vr_no := i.cost_center_vr_no;
         l_tab.glac_nm := i.glac_nm;
         l_tab.emp_or_party_nm := v_party_nm;
         l_tab.chq_no := v_cheque_no;
         l_tab.chq_dt := v_cheque_date;
         l_tab.office_nm := i.office_nm;
         l_tab.trans_amount := i.trans_amt;
         l_tab.ded_amt := v_ded_amt;
         l_tab.emp_gid := v_emp_gid;
         l_tab.dev_emp_gid := v_dev_emp_gid;
         l_tab.agent_id := v_agent_id;
         l_tab.supplier_id := v_supplier_id;
         l_tab.rent_office_cd := v_rent_office_cd;
         l_tab.pgid := v_pgid;
         PIPE ROW (l_tab);
/*

05371 acc_oth_payment_approval.fmx  Approval For Others Payment

02890 sur_surrender_cheque_issue.fmx   Surrender Cheque Issue
03120 ser_prem_payment_due_spc.fmx  Special Invalid Premium Collection
05446 acc_cheque_invalid.fmx  Invalid Cheque
02715 pay_loan_disburse.fmx   Loan Disbursement

01875 pir_policy_assignment.fmx  Policy No Assignment
04210 acc_bank_withdraw.fmx   Bank Withdrawal
02125 pol_loan_approval.fmx   Policy Loan Approval
05926 com_agent_refund.fmx FA Bill Refund Information
04065 com_dev_emp_com_bill_disburse.fmx   Employee Commisssion bill disbursement
06566 acc_oth_adv_adjustment.fmx Adjusment of Advance Payment
02620 com_agent_coll_adj.fmx  Premium Collection Adjustment
03860 acc_bank_deposit.fmx Bank Deposit
02610 com_com_bill_disburse.fmx  FA Commission Bill Disbursement
01850 acc_fund_req_app_transfer.fmx Approved Fund Transfer
03440 com_fp_agent_com_bill.fmx  First Premium FA Commission Bill

00080 acc_collection.fmx   Premium Collection
02405 clm_commute_approval.fmx   Pension Commutation Payment Approval
02625 com_agent_coll_com.fmx  FA (Defferd+Renewal) Comm Calculation
02845 sal_salary_disbursement.fmx   Salary Disbursement
05651 uts_bill_payment.fmx Utility Bill Payment
05301 acc_sus_rtn_cheque_issue.fmx  Unadjusted Premium Return Cheque Issue
02750 com_bill_comm_coll_undo.fmx   Bill, Commission & Collection Undo
03380 pir_policy_dispatch_info.fmx  Bima Stamp Entry Information
03845 acc_claim_cheque_issue.fmx Claim Cheque Issue
02140 pol_loan_cheque_issue.fmx  Policy Loan cheque Issue
03600 acc_alt_collection.fmx  Collection For Alteration
04385 com_dev_emp_comm_calc.fmx  Employeer of FA Commission Calculation
02340 acc_partial_collection.fmx Partial Premium Collection
03145 grp_claim_approval.fmx  Group Insurance Claim Approval
02385 ser_partial_coll_adjustment.fmx  Premium Adjustment
05596 sal_salary_cal_approval.fmx   Salary Approval
00105 acc_voucher_entry.fmx   Voucher Entry
04780 acc_proposal_amount_coll.fmx  Proposal Amount Collection
02650 sur_surrender_approval.fmx Surrender  Approval
03085 grp_collection.fmx   Group Premium Collection
03375 pir_stamp_purchase.fmx  Stamp Purchase Information
05541 grp_group_ins_clm_check_issue.fmx   Group Insurance Cheque Issue
02055 ser_ren_prem_coll_invalid.fmx Invalid Premium Collection
05831 pay_loan_recovery_approval.fmx   Employee Loan Recovery Approval*/
      END LOOP;

      RETURN;
      NULL;
   END;

   ---Test
   FUNCTION rep_acc_trial_bal_test (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_ins_tp_cd      IN   NUMBER,
      p_check          IN   VARCHAR2,
      p_opening_st     IN   CHAR
--Here 1=with opening balance,'2'=Without Opening Balance,'3'=Only Opening
   )
      RETURN acc_trial_tab_test PIPELINED
   AS
      l_tab               acc_trial_row_test;
      v_gl_prev_balance   NUMBER (12, 2);
      v_error             VARCHAR2 (100);
      v_opening_bal       NUMBER (12, 2)     := 0;
      v_date_from         DATE;
      v_debit_amt         NUMBER             := 0;
      v_credit_amt        NUMBER             := 0;
      v_count             NUMBER (10)        := 0;
   BEGIN
      v_count := 0;

      IF p_fiscal_yr_tp = '0'
      THEN
         v_date_from :=
            TO_DATE ('01-JAN-' || TO_CHAR (TO_DATE (p_date_to), 'RRRR'),
                     'DD-MON-RRRR'
                    );

         FOR i IN
            (SELECT   x.cost_center, y.glac_sl_no, y.cntrl_glac_sl_no,
                      y.glac_no, y.glac_nm, y.account_type,
                      NVL (SUM (bal), 0) bal
                 FROM (SELECT   cost_center, glac_sl_no,
                                SUM (debit) - SUM (credit) bal
                           FROM (SELECT   b.cost_center,
                                          NVL
                                             (d.divert_to_glac_sl_no,
                                              a.glac_sl_no
                                             ) glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit
                                     FROM acc_gl_trans_dtl a,
                                          acc_gl_trans_mst b,
                                          acc_cash_book_divert d
                                    WHERE p_opening_st <> '3'
                                      AND a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                 AND p_date_to
                                      AND b.ins_tp_cd =
                                                NVL (p_ins_tp_cd, b.ins_tp_cd)
                                      AND b.office_cd = p_office_cd
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '0'
                                      AND a.glac_sl_no = d.glac_sl_no(+)
                                 GROUP BY b.cost_center,
                                          a.glac_sl_no,
                                          d.divert_to_glac_sl_no
                                 UNION ALL
                                 SELECT   b.cost_center, a.glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit
                                     FROM acc_gl_trans_dtl a,
                                          acc_gl_trans_mst b
                                    WHERE p_opening_st <> '3'
                                      AND a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                 AND p_date_to
                                      AND b.ins_tp_cd =
                                                NVL (p_ins_tp_cd, b.ins_tp_cd)
                                      AND b.office_cd = p_office_cd
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '1'
                                 GROUP BY b.cost_center, a.glac_sl_no) u
                       GROUP BY cost_center, glac_sl_no) x,
                      (SELECT c.glac_sl_no, c.cntrl_glac_sl_no, c.glac_no,
                              c.glac_nm, c.account_type
                         FROM acc_gl_coa c, acc_gl_coa_mst m
                        WHERE v_count = 0
                          AND c.postable = 'P'
                          AND c.glac_sl_no = m.glac_sl_no
                          AND m.office_cd = p_office_cd
                       UNION
                       SELECT c.glac_sl_no, c.cntrl_glac_sl_no, c.glac_no,
                              c.glac_nm, c.account_type
                         FROM acc_gl_coa c, acc_gl_cost_bal_sheet m
                        WHERE v_count > 0
                          AND c.postable = 'P'
                          AND c.glac_sl_no = m.glac_sl_no
                          AND TO_CHAR (opening_dt, 'RRRR') =
                                                   TO_CHAR (p_date_to, 'RRRR')) y
                WHERE x.glac_sl_no(+) = y.glac_sl_no
             GROUP BY x.cost_center,
                      y.glac_sl_no,
                      y.cntrl_glac_sl_no,
                      y.glac_no,
                      y.glac_nm,
                      y.account_type
             ORDER BY y.glac_no)
         LOOP
            v_gl_prev_balance := 0;

            SELECT ABS
                      (CASE
                          WHEN (    i.account_type = 'D'
                                AND i.bal + NVL (v_gl_prev_balance, 0) > 0
                               )
                           OR (    i.account_type = 'C'
                               AND i.bal + NVL (v_gl_prev_balance, 0) > 0
                              )
                             THEN i.bal + NVL (v_gl_prev_balance, 0)
                          ELSE 0
                       END
                      ),
                   ABS
                      (CASE
                          WHEN (    i.account_type = 'D'
                                AND i.bal + NVL (v_gl_prev_balance, 0) < 0
                               )
                           OR (    i.account_type = 'C'
                               AND i.bal + NVL (v_gl_prev_balance, 0) < 0
                              )
                             THEN i.bal + NVL (v_gl_prev_balance, 0)
                          ELSE 0
                       END
                      )
              INTO v_debit_amt,
                   v_credit_amt
              FROM DUAL;

            IF v_debit_amt = 0 AND v_credit_amt = 0
            THEN
               NULL;
            ELSE
               l_tab.cost_center := i.cost_center;
               l_tab.glac_sl_no := i.glac_sl_no;
               l_tab.cntrl_glac_sl_no := i.cntrl_glac_sl_no;
               l_tab.glac_no := i.glac_no;
               l_tab.glac_nm := i.glac_nm;
               l_tab.credit_amt := v_credit_amt;
               l_tab.debit_amt := v_debit_amt;
               PIPE ROW (l_tab);
            END IF;
         END LOOP;

         RETURN;
      END IF;
   END;
END pkg_gl_account_report;
/


--
-- PKG_GL_DR_CR_VOUCHER  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_gl_dr_cr_voucher wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
b
af2f 2526
DtLzUgO7pNbU+1Z+1S/gwEuS/EIwg81VLtBdU6cbfZMe6noTQJj7J6hl+Bn8J79UHSHy0V5j
ouwMIW2XlB8A1kgOW3U1+4IKzgjNuQikiA9YEE4rAafH89GXh0Hv8QddQvrvlT7bTxVXV135
F7W7teS7gZ21moG15JySmvlj+bW1crX+mvnGtYGW16AqQQlOGwBxGZBeVl7cPO7D+O58jSP6
wTB2K7EgULCxvyeXGeg+AOTHvfZ6QIHGM6TRLPne42PU+f1TdcRbd8iX1qdk7pJpQCPEklS7
hlWufGyqlLbHRRPUqxxBzdFkIH/QlxyomHhTMhbBKr1/vN7j08vc6951sCHS0A6lYfvBsJoZ
Y/7pPOSbM7KLmw4zbpe6WXuWB8Zgc1LBnCnJu5X4wIZ2Bpg8P4kA/yjC5v6L+aoWJE9ArrPZ
H1DZwVAF5KPksH2w+LuZdkBS8iDy3L8sgbsZPW210tCqOh49luWbOQ9KagVR0CszUPy3Kdba
KCkj/YtbUqe5HRJNnIEIMRmjcfgIZHlOWNRePFvvn+31ZAyBAcHNPQs6PnkNegQ1mhgsd05O
wgYFn/jkciBPOrPYFaM/4j5Wahf3IOsK6uJxDxCZTnzLHobWQdQmqnzBI5dOjqo/fhgeLRI0
vvjop1UfjWg7QggU7UFAMtk+Rw+pvM8EztaAEChM5KMtyJJ4jRAFCOqYB/2ucjo6K6NFjjwq
ev/VO7zV9jBQpKebQvVFR+L40Ry7T3vPz1OruXJqhMnB19cgjRKKfb9DHPi119dypxPZe2Li
sbGqHEhfTCR5B5JXqwn5J4KdIIoz/Pip0Ov8TABG0usLgCIpQkd6IUO5/rPSUDwIzoexkk0m
c8u9mmPBHvG80eD+IVVZKbn977uvNrkZ4lfZ+MxzafDEAxUf1Mkk22go0BuzJHcjeUyB6jv+
1MGV/+tWc+2VhpYYxjJ9ncP5zdY/fBIA4lfBD0oNsO7OP7mUJJalsgaBtlYFaqI6pFO8R5KW
IaU0d1cH3iawpcdXR4SkB5HkNvgjOc64Uc8ETnNbMQ+FP24sIk3k75J5i5m0z794le6B9SWd
chC6m85i+iB5Q1ICnbwjCIaEKIftztk9lsaDxDIALpa7EE8z1g+/DxZzaw9O3N0H2bHGdVXq
LFGWKJm4Qq160rP9oSBoazMdhf5ZZq4JJI7Mm+qibuuMeASLrtgzKFMrnRxQDycOHq5VFZau
eeokenWzBY0ki0M1hngTc83xEj9u0Cxf2pawyD/5l+RCgYZb8s/EEgjRENBPCKjOquvuzlq7
ufyYBYYF0YWY0u28hZxd5JBuiZIL/LUqdo2A7df+gXK1vAObw/qagAUXdqdJeXLc2QPrm0nH
oyLakU+knJbonQKGm/RBFySLMdA6URmqmj9H3qSnmvyFz2nOeCOC0OHsux7onTfaTtJTndBF
cjqCrvxBpOwXB4tyi1DPn3ciEiEPWZqbESKnCBcFbToq/5cLkmLL2QuSPdzZt8KAmRBUJYsp
a/q8KUvkBSL7Qnw7wYLIwYLIwT3+x1O40caAwe28iGLQVQiAuqkssvg0SGoFcPDBtvedQ2Xk
N1+tweuA0yR0GDCcGdHMuwe7+IGl7++SQ2ouJl3+fyzN+KlKM4wR8A9vz3is4LRKgchOrg1P
0WqjHH61jPeBbVFkefg4XySvLKFOgCv5gcEQJ5j5hlJ/EMjtc02FpXJSVwDirNeWT6j6Q+6h
Ya6qklf1XUwjLB/HTtyGsPwiYNEsZpxkyg+xhosKlKFzeU4MhKUQKQwzm47K9XNquW3JCEbO
5pqqN6GgKCWxe8HO6xPtL04fVo/Xh9sZ5PUIArwcJG7h6Ln9TpIT5rq9QzQAuX7kuIGYk6J7
ck7EIyk+CR5z5FJOvJ4QvnNmmzsqNNcQyzrudzM2+Y/UwaW7aCmxfb8xcjgkYZcoO9JtfbE8
+f/SJN5AKblMeoOqgVE6oFIQF5Kgthm0CJ8ifgEyADIgkOAkoNDLzkl4ZOJkn/mMloP4Hvw0
N7XTTpGBc9azEAm+v7II/8E/fhhyVMY0sk+WzmBDHkFCt75zy6Tr+IqWdAhr1yT2bbs0JrHh
GQEk9guu/7X9TiNF+dP8O3mdvPl2/DvBOqv+3/4BEpJQ0iJk/pDWku5UkyIHz6R2OuL/rjFy
PF36xM8oz5C1BDoE997XlkwkjTEQpR4LCiTRtCxh+B5N/8QOW7bOWRSG0LXOD4c0MgWdx1c0
6qV2Bc5iR8d+hhLJtUvDsTQzrhz4ZBT+u20/E5qdqDNOxuT59xkk4vuqWxi1v5HOIMByFLUg
3JskYvlkooPETtb6nRs0rgb5MHFzYi61xeTEwNLQIc9K6Ko2MEpMzyJOtWAjIk61zxJ6xtE/
z9ulvNLqVciWxD3q5Le7bUjkh3Lu9hyXv0Df+SNcT/7MvHhhCBKJEFz/6kR6+BZyIpcfz4ma
YloIH6O8KQrPPxEiT1Z6T1bkJq5v+XO5k7XT/s2QMQ8DYvg0HfggMlszB53kRaS0/gZP/g+d
AkIZqhAZqnP91SMZqnO/23kci217wcj5fTbBJsudtdyKBye8WVIiogDHbhdKTkdSQa3/gsY6
wHK1CK3/D7XuZCTPKMZCloHQWnkZAJp/T8Rri5wps7H5vIwOsKE6cWGSS6CxgQgqX3zi2WpP
WweGBZUPrkcobEBrvO4EIIKdQF5fTKuXmMiXgO86gcbV/p1DPfD4ID8vBh/YZnrx8cY5I5sz
LGAFvyGbIGOULB6S7ViVEnlyXQauLtEZy/5qIXKuUwgeU67oRO620iCGqLuwGFv1MJw6VjO7
5KdDe2gQlOQF+pfaOk8XPrs/P+hJctJdWEF667cXI5tDQbW2ULe10gaYffpOs9kLIyIjOsQz
k5pyLL56nSX5WeP5VEZ988SQxJKLx9KqS8engDz5hVA/mgunrqDPQZ3P4SPJf3JWi1iVegN1
F29OQ0G1gkt1teRq/lvx7ZxzsGtlKF7NH1jZ618zPzjPdVwstWScsQ/eEbxo8q7NzmFiQEPS
DpjL3n7PggBipsaB+7xui+ROpaQHZ2QX+YBiIDGXEx5VZGQ90JpMCs3Pe9frhqE9m+09I6Ox
m3qxQ69LhBDV7hL2ztyGE6M/yLXPLgdJvDMQ0ooqAO0j5IKfHktGgbDXEpszMQaGauSByd/4
3dr56npoq5jEsKOdeKr42szEFzwzwcl5OgiY4O7BJOAwaE7M64KhEhveD2cit6AP4E+hg4Kh
+M0g+ORqKJowBcHtNCT1dHEET7xs5AopJV6+IB8w/QgzTV1M2wUeR2RtMBKevL3Z6/7u+c0s
HnpA+3OkVK9ewyWaB4h6JiPJW6qjn6XO7o2x704I/N6gc3+aa0JOs+4N+dya/fnD+h+aTzqm
TkeIQa1qghcwi3Rybu7ZALXGwXSqQggoqu0njx3/UKb5jyHuD7tZQ1hs3YIMpqam4oMKOaam
qZAvC5AlTEj9pqbjVVcHVF5IVT0MIsYLLm0eY5hdx3o8tLtxm60c9qODOaamkqiLP7hVv3Oj
hoNF/GSjAbLeCjg+qvKnfFawq04JKOt6sQHV1DmmMEJ2PDWK1K3bRdcqARIQeP+oPHniPnim
pqiBp7nxcghUXmGxv5zPSsbswB2mLwkgKZtVVY4HqxISEJy7uehXd7R4pqaogae58XIIVF5h
eJ9ydu5DfBQpZZgiPSKJaxk7O2OYXcd6PLyKq6ampqZGdwycMYEmM2t0DV08JUybrRz2D5+y
prxOJCJVQELjlSWVNI2rB8NADYc87MIMIsYLLr4N9X8gY9SojTh5/aamFh6
t6bEMv/rBMNgQ
Mb5dx3o8vKCnSPK6YrCr+CuK1K3bRdcqQ2H7pqm08MfjKmI7Hnl1B1R02SboY8vefqampqZT
uk4GU9EyVNzH+UIEq6ampqaW0Gp7BKdepLAZGbSy2SZKXp3Hnl4PDEj9pqZURY48Kok+sDy0
pOhC4jj6wcOJKho7QGOgsqamGtmKRbsGCLzoaKuYMHa5coQuQkkcu/aXeR2mpillmLmYMDRk
EN7wTHrL/sFrMwFJHLv2D4M5pqY8wtxtHr7Y6warC5y7uSfjLehopqampqX8jQoz5fumpqaP
PdUeuOW/gS8lruLG0ZpVPYRaJD20u6umpqamh+3APYcqpqampjQjAaTcgeIcPMgGs4G0Q5iY
I1T2ir95Haampt1cEj2mpqamtA2ypqam4oMKOaamqZAvC5AlTEj9pqbjVVcHVF5IVT0MIsYL
Lm0eY5hdx3o8tLtxm60c9qODOaamkqiLP7hVv3OjhoNF/GSjAbLeCjg+Ox/ac7h18gWmpmck
22go4vjiD/ZxuuoI5Vw8yGGrpyUjLbaxa0/yHaZTuk5m21TGvtR222H7pqkvC6TBozzIYUV+
lSXfpqYv4NiGcdmrJSv4ZR4FOaam4If8S278qLCrTgko63GcOwT9po9DUlRbLf3BLx7fsYnN
gVVXB1TEvuhopqZGd7pFDCLGCy4xh5pMm60c9peypmda7WPZv79edieKzYFMvJgTBmkLmqam
Rne6RQwixgsuMRm0geufV2QFaZb2Lr77pucmxPWcz0rGqxJewBCBBsYKPD1tnXHNq6apOabK
Ghm0geufV2QFaZb2LjGHRUfiroHxcghUXkjwTCR5B05FsoHCPIm/sqZnWu1jbULVKssmdArt
9VhMTydHuiZSWgFUugwfTisndgmIPEwdpi8JICnROnbQDZbLhEKtdKFFR+KuDSgBTb/29inR
OnbQDZaYOaampqaogSUBnxDlEBaEYr4N9ZzPSsaDnFXi+3zBzyemj0JqVoGSSG6E2AVxXmF4
MoZ24FWL7Jt5HanBsoJ19r0HufFyCFRenwN4MpzPSsbsm3kdpsdi7lCVNI2rB8NAPdcZd5U0
jasHw0F4R6fABabdcQxX9QgwD16fA3gyCDAPXrx5pnDibHZFMDRkEFIDeDIIMA/4wAWm3XEM
V/Wo1HtjmIrJIPzmXzLyvzph+6m+p7h91K3b7MIT7QykwS/2l8SypkcNRoS/+sEw2N5SA3gy
nM9KxuynBTmmi6MVax4HasMnVBgT7SYeB2rDSP2mdfa9B9HihCSNq6cGySD8BnvSXr55po8h
kDn2Pykj4mx2n8SyqaiBi26uxC4dcKSXQi7EsnxHBfXBw07uT0BUJ4rNTO3OCCS1pbEKORbG
qPumUKZT2Qr6iaumUxlAQuOVJZU0jasHw0ANhzzswgwixgsuvg31fyBj1KiNOHn9pqYWHq3p
sQy/+sEw2BAxvl3Hejy8oKdI8rpisKv4K4rUrdtF1ypDYfumqbTwx+MqYjseeXUHVHTZJuhj
y95+pqamplO6TgZT0TJU3Mf5QgSrpqamppbQansEp16ksBkZtLLZJkpenceeXg8MSP2mplRF
jjwqiT6wPLTXrRqrp1HYqHkqVmN5pqbKTMmxEB/Q/ipDPLSVhriqHCeX2ggwD15I/aamWpwx
MpqVhhDNDPaKBlJTJCgNltoIMA/4Jd+mpkunMqNxcgGQb7EEmD+DyyrbVF5IpqampjCBl1wS
Paampqal/I0yVz2YI+cpSbELsa4FaxzmkibUP7GmpqampfyNCjPl+6ampo891R645b+BS0CO
0OLG4k9hhADYKjOYYfumpqaP5e0npqampoqDOaampurNXB2mpt3c4y3cKdHEsqam20huhNg+
xLn8bE+GLeiVgSVMm60c9oq/0Tp20CpieR2mpnMvxyRTuZg/O1J5TIHqO8JAoD1LiTxtkD9X
WWN5pqYOLOC5W7EQsWQq4jsKMD3F9lq6sgze7bT0HlCuY/umaDtC8+DYhnELy+AFpqZn4y1K
x2L2WrpMYeDe/aam5388UuIBst4KEFiBeR2mptD3xMfLJkDr3uLu9aOWAy37poccBzIvmFLL
LUjHLjGHmvDH4zIT9peypmda7WOYXcd6PInNgVVsT4Yt6GimpkZ3ukXPv3iVa9QZh5pDmJg+
yyozsqZnWu1jmF3HejyJzfBMJHkHI/rBMHY87MAdpi8JICnROnbQKjPoXZL8ldDqOwofqr6D
KqamsqZnWu0tHrDNaZY6dtBqo15hnNEDHl7tXcd6PIm6C7GuBWuHm60cBw3oNPampub8YkxH
uiZSWgFUzWPZipLDCxny8ITFaoOjRXXECYbIl0u5q6apyCMMv/rBMNgQUgSX2ThaJQGfEOUQ
FoTturoMv/rBMNgQMSqmpqam5yac0QMeXs2EiCf6O2OYXcd6PLyKn7KprcFeHaYHOG4JHaa0
QELj6YrUrdvswNWfhnbgLgzVn4Z24FWL7MAdpnDybJh3Usst6GhFd1LLLehjMiaGduBVi+zA
HaaPSNdtLwvwONo8hP8kPT9FdPazxOZfMm72RzV+pqaHHAcyUL9z9Yg8CQzihnbgVYvswu20
8MfjMhP2l7KmpqiBkkhuhNgFcV5heDKGduBVi+ybeR2maiTG7sPobqum3dmGyF3Adjw7+6aJ
hsirpqbRMm6E2D6YMRNFUsst6M8Fpqa4JoZ24C5tE+0m/cEv9qNI/aam0TJuhNgFcV6fA3gy
hnbgVYvsm3kdpoT8IBM5poujFWuYXcd6PLxTMRNFDCLGC83ZeR2mx2LuUEybrRz2l0gz6Lnx
cghUXrx5pnDibHZFdcQJhsiXS0UxE0V1xAmGyJdLGd+mfLHTy1WJYaPcKjNIM+hI8rpisKv4
BTmmi6MVa/3BLx7fsYlVikz8VwdUxL7ozwWm3XEMV/WGduAubRPtDKTBL/ajSP2mdfa9B7mO
6Lyniskg/Nw4/Pb6xLKmRw1GhJwVRUBlQ13JIPwJVLFp6G5I/aZ19r0H4tioeSpWldcZd40q
GjtAY2jfpnyx08tMehmxiVWKLkx6GbGJIP2mdfa9B9Ecu/YPaIouTHoZsbxo36Z8sdPLTOMt
3CnRmDETRS8LkCVMvHmmcOJsdkVSyy3oism7Ccat2+ybeR2mx2LuUEybrRz2o2iKLlVsT4Yt
6ENh+6m+p7h9ku58jaunBskg/JLufI0FOaaLoxVrbR5QrmNAY1MxE0VTy3PDSP2mVy6wr+wP
RUH2vQdVeR1wWu2twet566ZUB8CH63kddE7fVa09z86wqKerEhLqlj/kxp3kgeX7l1Japqam
Iaa5mydlYzmm4sQ4HOCvJZU0jasHw0ANhzzswgwixgsuvg31fyBj1KiNOHn9pqYO2MGOTJZV
bE+GLTMBwfFyCFT4JaNFPnkNbieKBTmmplRFjjwqiT5JsHyBDV08JWNL4mtZrQ2ypqZLkB+x
C5xACa67JFu+XjzIYaunJd+mpmdFR+L40Ry79pc7LW3G7vl6d4m/Bgi86GjfpqZnRUfi+NEc
u/YPowsf0GpzQk0QMfTG+IOcYfumpjzC3G0evtjrBqsLsa4Fa0AE9peypqampjQjQ+XtJ6am
pqaPPdUeuOW/gS8lruLG4k9hhABG0l7wc+L7pqamqepkcQ3qsqampqY0IwGk3IHiHDzIBrOB
tIHrn00HDdQ/sd+mpqamuD2HKqampqa0DbKmpqZTJ2SrpqamtL1/PD5VQ2H7pqbgeP+oPHni
PsTUrdvspzxXB1ReSP2mpo/ih5utHPajcZZVbE+GLdQ/wfFyCFTrJd+mpmck22go4vjiD/Zx
uupzXArYqHkqVmOB4LAsy17e/aamDizguVuxELFkKuI7CjA9xfZaurIM3u209B5QrmP7prjE
i+njLUrH8K3jeR2mpkYEHlexwkCgPQHVp2H7pqbmXzJu
9pOEgycPyRAFpqamunUeb4tL+XGc
OwT9pqmcxjik20huhNgFcV5hsb+GduBVi+zAHaZnWu1jmF3HejyJzYFVbE+GLehopqYvCSAp
m1VVjgerEhIQnLu56Fd3tHimpkZ3ukUMIsYLLjEZtJAVctnI8u3YsqamqIGnufFyCFQLIPLi
ZIfkMD1FIwicCkwdpmda7S3aAk+cqI0jk81j2YqSw5Y6dtAqQzy0kBVy2cjy7diYOaapyCMM
H04rJ3YJiCsSKWWYIj11xAmGyJdLYafRizt3Vxpl2Jg5pqnIIwy/+sEw2BBSBJfZOFolAZ8Q
5RAWhO26ugy/+sEw2BAxKqampqbKGodFR+KuDSgBTWzEp7nxcghU+ML2pt1Ti0767hcMH04r
J3YJiDwjk/aXeR2mplZMR7omUloBVAU5pqYWHq3psQy/+sEw2BAxDbKmpkv1XoMnrT20xLKm
pi+YUsstSMcuvnmmpqm08MfjKmJ5HaamVkyeHquXiV4FpqamDJwVRUBlQ3ffpqZnmpWGEC6+
eaamqS1txu75eneJBTmmpn2YMDRkEN79pqZwigZSUyQoDZZ5HaamX0wkeQer4Ng+xLKmpnyf
c6Ck/Dg7LSD9pqbKn4Z24C6+eaamqS0esM1pKKhzwwua36am3SVMm60c9ooFOaamfZg/O1J5
/aamDtioeSpWAbGmdcciKqa4BNQ+KqapeXUHVNtIboTYPsTgeP+oPKCg4Hj/qDx54j54pqbo
w8IMpMEv9pc7DKTBL/ajo5x7/6g8eeI+eKamuTw05388BGELAF3kXs2w2UtvENXbVMa+1Hbb
OaaPQ1JUWxCxrpw4Yg1de/+oPHniPgVtVVcHVMS+6Gimpi8JZLvUrdtF1yoBEl54/6g8eeI+
mt+mfOTHdtwBlyb7pjR6y6HRxjhVq6Znrcsm+6aPCcat2+zCE+0m/cEv9pfEsqamnHv/qDyg
UzETRVLLLehDYfumjwnGrdtF1yoBeBJeeP+oPHniPprfpnwa+WHepnDibHZFDCLGC81tE+0m
mF3Hejy8aN+mfLHTy1VsT4Yt6IrJIPzROnbQKkMFOaaLoxVrbULVKssmdAoT7SZtQtUqyyZ0
Hnkdpsdi7lAu3gpDwwu7ySD86KA9wOUtnXmmcOJsdkVSyy1Ixy4x1xljSsfjMhP2l8SypkcN
RoR4/6g8oFMxmHdSyy3oQ2H7qb6nuH3cOPz2+kgz6LmO6LynzwWm3XEMV/U+2PYWXtxIM+jR
AjKyAZcpYfupvqe4fZerJStqCWiKLkyThIMnVJd5HabHYu5QlYYQLjHXGXeVhhAuOmH7qb6n
uH0GCLwzldcZd5WGEM3ZeR2mx2LuUAIEHom5whPtJpl/PD5VQwU5poujFWv9wS/2l0gz0TJu
hNg+mt+mfLHTy1VsT4Yt6JXXGXdMm60c9qNI/aZ19r0H4izLXiY4Pkgz6OIsy16+eaZw4mx2
RVPLc8MnVBgT7SZtHlCuQ2H7qev1q9g6Yx6+p7i0Vd+mQHcTxyJV37KmUCEu6yEu6yEu6yEu
6yEu6yEu6yEu6yEu6yEu6yEu6yEu6yGmPGtusfUFpoT8Lr/EskB3mt+E/JA/qx5XsT87Ujuc
z0rGOO1zJPkfF248Rw==
/


--
-- PKG_GL_GRA  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_gl_gra
IS
   FUNCTION rep_gra_trial_balance (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_date_from      IN   DATE,
      p_date_to        IN   DATE,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_check          IN   VARCHAR2
   )
      RETURN gra_trial_tab PIPELINED
   AS
      l_tab               gra_trial_row;
      v_gl_prev_balance   NUMBER (12, 2);
      v_error             VARCHAR2 (100);
      v_opening_bal       NUMBER (12, 2) := 0;
      v_date_from         DATE;
      v_bal_year          VARCHAR2 (4);
   BEGIN
      IF p_fiscal_yr_tp = '0'
      THEN
         v_date_from :=
            TO_DATE ('01-JAN-' || TO_CHAR (TO_DATE (p_date_to), 'RRRR'),
                     'DD-MON-RRRR'
                    );

         FOR i IN
            (SELECT   x.glac_sl_no, cntrl_glac_sl_no, glac_no, glac_nm,
                      account_type,
                      SUM (ABS (CASE
                                   WHEN (account_type = 'D' AND bal >= 0)
                                    OR (account_type = 'C' AND bal >= 0)
                                      THEN bal
                                   ELSE 0
                                END
                               )
                          ) debit_amt,
                      SUM
                         (ABS (CASE
                                  WHEN (account_type = 'D' AND bal < 0)
                                   OR (account_type = 'C' AND bal < 0)
                                     THEN bal
                                  ELSE 0
                               END
                              )
                         ) credit_amt
                 FROM (SELECT   gm.glac_sl_no,
                                  SUM
                                     (CASE
                                         WHEN coa.glac_type IN ('A', 'L')
                                            THEN opening_bal
                                         ELSE 0
                                      END
                                     )
                                + NVL ((SUM (debit) - SUM (credit)), 0) bal
                           FROM (SELECT   NVL
                                             (d.divert_to_glac_sl_no,
                                              a.glac_sl_no
                                             ) glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit
                                     FROM gra_gl_trans_dtl a,
                                          gra_gl_trans_mst b,
                                          gra_cash_book_divert d
                                    WHERE a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                 AND p_date_to
                                      AND b.office_cd IN (
                                             SELECT DISTINCT DECODE
                                                                 (p_check,
                                                                  '0', x.office_cd,
                                                                  y.office_cd
                                                                 )
                                                        FROM (SELECT p_office_cd
                                                                        office_cd
                                                                FROM DUAL) x,
                                                             (SELECT     office_cd
                                                                    FROM hrm_office_setup
                                                              CONNECT BY PRIOR office_cd =
                                                                            control_office_cd
                                                              START WITH office_cd =
                                                                            p_office_cd) y)
                                      AND b.cost_center =
                                             NVL (p_cost_center,
                                                  b.cost_center)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '0'
                                      AND a.glac_sl_no = d.glac_sl_no(+)
                                 GROUP BY a.glac_sl_no,
                                          d.divert_to_glac_sl_no
                                 UNION ALL
                                 SELECT   a.glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit
                                     FROM gra_gl_trans_dtl a,
                                          gra_gl_trans_mst b
                                    WHERE a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                 AND p_date_to
                                      AND b.office_cd IN (
                                             SELECT DISTINCT DECODE
                                                                 (p_check,
                                                                  '0', x.office_cd,
                                                                  y.office_cd
                                                                 )
                                                        FROM (SELECT p_office_cd
                                                                        office_cd
                                                                FROM DUAL) x,
                                                             (SELECT     office_cd
                                                                    FROM hrm_office_setup
                                                              CONNECT BY PRIOR office_cd =
                                                                            control_office_cd
                                                              START WITH office_cd =
                                                                            p_office_cd) y)
                                      AND b.cost_center =
                                             NVL (p_cost_center,
                                                  b.cost_center)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '1'
                                 GROUP BY a.glac_sl_no) u,
                                gra_gl_coa_mst gm,
                                gra_gl_coa coa
                          WHERE gm.glac_sl_no = u.glac_sl_no(+)
                            AND gm.glac_sl_no = coa.glac_sl_no
                       GROUP BY gm.glac_sl_no) x,
                      gra_gl_coa c
                WHERE x.glac_sl_no = c.glac_sl_no AND c.postable = 'P'
             GROUP BY x.glac_sl_no,
                      cntrl_glac_sl_no,
                      glac_no,
                      glac_nm,
                      account_type
             ORDER BY x.glac_sl_no)
         LOOP
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.cntrl_glac_sl_no := i.cntrl_glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;

            IF i.account_type = 'C'
            THEN
               l_tab.credit_amt := i.credit_amt;
            ELSE
               l_tab.credit_amt := i.credit_amt;
            END IF;

            IF i.account_type = 'D'
            THEN
               l_tab.debit_amt := i.debit_amt;
            ELSE
               l_tab.debit_amt := i.debit_amt;
            END IF;

            PIPE ROW (l_tab);
         END LOOP;
      ELSIF p_fiscal_yr_tp = '1'
      THEN
         v_bal_year := TO_CHAR (p_date_from, 'RRRR');

         FOR i IN
            (SELECT   c.glac_sl_no, c.cntrl_glac_sl_no, c.glac_no, c.glac_nm,
                      c.account_type,
                      SUM
                         (ABS (CASE
                                  WHEN (account_type = 'D'
                                        AND closing_bal >= 0
                                       )
                                   OR (account_type = 'C' AND closing_bal >= 0
                                      )
                                     THEN closing_bal
                                  ELSE 0
                               END
                              )
                         ) debit_amt,
                      SUM
                         (ABS (CASE
                                  WHEN (account_type = 'D' AND closing_bal < 0
                                       )
                                   OR (account_type = 'C' AND closing_bal < 0
                                      )
                                     THEN closing_bal
                                  ELSE 0
                               END
                              )
                         ) credit_amt
                 FROM gra_gl_coa_mst_hist h, gra_gl_coa c
                WHERE h.bal_year = v_bal_year
                  AND h.office_cd = p_office_cd
                  AND h.glac_sl_no = c.glac_sl_no
                  AND c.postable = 'P'
             GROUP BY c.glac_sl_no,
                      c.cntrl_glac_sl_no,
                      c.glac_no,
                      c.glac_nm,
                      c.account_type
             ORDER BY c.glac_sl_no)
         LOOP
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.cntrl_glac_sl_no := i.cntrl_glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;

            IF i.account_type = 'C'
            THEN
               l_tab.credit_amt := i.credit_amt;
            ELSE
               l_tab.credit_amt := i.credit_amt;
            END IF;

            IF i.account_type = 'D'
            THEN
               l_tab.debit_amt := i.debit_amt;
            ELSE
               l_tab.debit_amt := i.debit_amt;
            END IF;

            PIPE ROW (l_tab);
         END LOOP;
      END IF;

      RETURN;
   END;

   FUNCTION rep_gra_ledger (
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_cost_center    IN   VARCHAR2,
      p_glac_no        IN   VARCHAR2,
      pdate_from       IN   DATE,
      pdate_to         IN   DATE,
      p_business_tp    IN   VARCHAR2,
      p_vr_tp          IN   VARCHAR2,
      p_fiscal_yr_tp   IN   VARCHAR2,
      p_vouch_no       IN   VARCHAR2,
      p_check          IN   VARCHAR2
   )
      RETURN gra_ledger_tab PIPELINED
   AS
      l_tab              gra_ledger_row;
      v_check_calc       NUMBER                            := 0;
      v_tot_amt          gra_gl_trans_dtl.trans_amt%TYPE   := 0;
      v_opening_amt      gra_gl_trans_dtl.trans_amt%TYPE   := 0;
      v_counter          CHAR (1)                          := '0';
      v_glac_no          VARCHAR2 (20);
      v_glac_nm          VARCHAR2 (200);
      v_count            NUMBER (2)                        := 0;
      v_act_glac_sl_no   VARCHAR2 (20)                     := NULL;
      v_act_glac_no      VARCHAR2 (20)                     := NULL;
      v_act_glac_nm      VARCHAR2 (200)                    := NULL;
      v_divert_account   VARCHAR2 (20)                     := NULL;
      v_glac_sl_no       VARCHAR2 (20)                     := NULL;
   BEGIN
      BEGIN
         SELECT glac_sl_no
           INTO v_divert_account
           FROM gra_cash_book_divert
          WHERE divert_to_glac_sl_no = p_glac_no;

         v_glac_sl_no := v_divert_account;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_divert_account := NULL;
            v_glac_sl_no := p_glac_no;
      END;

      BEGIN
         SELECT c.glac_sl_no, c.glac_no, c.glac_nm
           INTO v_act_glac_sl_no, v_act_glac_no, v_act_glac_nm
           FROM gra_gl_coa c
          WHERE glac_sl_no = p_glac_no;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      IF p_fiscal_yr_tp = '0'
      THEN
         FOR i IN
            (SELECT m.vouch_dt, m.vouch_no, m.glac_sl_no, c.glac_no,
                    c.glac_nm, m.chq_no, m.chq_dt, m.credit_amt, m.debit_amt,
                    m.narration, m.vouch_cd, m.vouch_no_actual
               FROM (SELECT b.vouch_dt, a.vouch_no vouch_no,
                            NVL (d.divert_to_glac_sl_no,
                                 a.glac_sl_no
                                ) glac_sl_no,
                            a.chq_no, a.chq_dt,
                            DECODE (a.dr_cr, 'C', a.trans_amt, 0) credit_amt,
                            DECODE (a.dr_cr, 'D', a.trans_amt, 0) debit_amt,
                            b.narration, b.vouch_cd,
                            a.vouch_no vouch_no_actual
                       FROM gra_gl_trans_dtl a,
                            gra_gl_trans_mst b,
                            gra_cash_book_divert d
                      WHERE b.office_cd IN (
                               SELECT DISTINCT DECODE (p_check,
                                                       '0', x.office_cd,
                                                       y.office_cd
                                                      )
                                          FROM (SELECT p_office_cd office_cd
                                                  FROM DUAL) x,
                                               (SELECT     office_cd
                                                      FROM hrm_office_setup
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                   p_office_cd) y)
                        AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                        AND NVL (b.cost_center, 'X') =
                                 NVL (p_cost_center, NVL (b.cost_center, 'X'))
                        AND a.glac_sl_no = v_glac_sl_no
                        AND TRUNC (b.vouch_dt) BETWEEN pdate_from AND pdate_to
                        AND b.object_cd = NVL (p_business_tp, b.object_cd)
                        AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                        AND a.office_cd = b.office_cd
                        AND a.vouch_no = b.vouch_no
                        AND NVL (b.ledger_st, '1') = '1'
                        AND NVL (b.payable_st, '0') = '0'
                        AND a.glac_sl_no = d.glac_sl_no(+)
                     UNION ALL
                     SELECT b.vouch_dt, a.vouch_no vouch_no,
                            NVL (d.divert_to_glac_sl_no,
                                 a.glac_sl_no
                                ) glac_sl_no,
                            a.chq_no, a.chq_dt,
                            DECODE (a.dr_cr, 'D', a.trans_amt, 0) credit_amt,
                            DECODE (a.dr_cr, 'C', a.trans_amt, 0) debit_amt,
                            b.narration, b.vouch_cd,
                            a.vouch_no vouch_no_actual
                       FROM gra_gl_trans_dtl a,
                            gra_gl_trans_mst b,
                            gra_cash_book_divert d
                      WHERE b.office_cd IN (
                               SELECT DISTINCT DECODE (p_check,
                                                       '0', x.office_cd,
                                                       y.office_cd
                                                      )
                                          FROM (SELECT p_office_cd office_cd
                                                  FROM DUAL) x,
                                               (SELECT     office_cd
                                                      FROM hrm_office_setup
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                   p_office_cd) y)
                        AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                        AND NVL (b.cost_center, 'X') =
                                 NVL (p_cost_center, NVL (b.cost_center, 'X'))
                        AND a.glac_sl_no = v_glac_sl_no
                        AND TRUNC (b.vouch_dt) BETWEEN pdate_from AND pdate_to
                        AND b.object_cd = NVL (p_business_tp, b.object_cd)
                        AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                        AND a.office_cd = b.office_cd
                        AND a.vouch_no = b.vouch_no
                        AND NVL (b.ledger_st, '1') = '1'
                        AND NVL (b.payable_st, '0') = '1'
                        AND a.glac_sl_no = d.glac_sl_no(+)
                     UNION ALL
                     SELECT b.vouch_dt, a.vouch_no vouch_no, a.glac_sl_no,
                            a.chq_no, a.chq_dt,
                            DECODE (a.dr_cr, 'C', a.trans_amt, 0) credit_amt,
                            DECODE (a.dr_cr, 'D', a.trans_amt, 0) debit_amt,
                            b.narration, b.vouch_cd,
                            a.vouch_no vouch_no_actual
                       FROM gra_gl_trans_dtl a, gra_gl_trans_mst b
                      WHERE b.office_cd IN (
                               SELECT DISTINCT DECODE (p_check,
                                                       '0', x.office_cd,
                                                       y.office_cd
                                                      )
                                          FROM (SELECT p_office_cd office_cd
                                                  FROM DUAL) x,
                                               (SELECT     office_cd
                                                      FROM hrm_office_setup
                                                CONNECT BY PRIOR office_cd =
                                                              control_office_cd
                                                START WITH office_cd =
                                                                   p_office_cd) y)
                        AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                        AND NVL (b.cost_center, 'X') =
                                 NVL (p_cost_center, NVL (b.cost_center, 'X'))
                        AND a.glac_sl_no = p_glac_no
                        AND TRUNC (b.vouch_dt) BETWEEN pdate_from AND pdate_to
                        AND b.object_cd = NVL (p_business_tp, b.object_cd)
                        AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                        AND a.office_cd = b.office_cd
                        AND a.vouch_no = b.vouch_no
                        AND NVL (b.ledger_st, '1') = '1'
                        AND NVL (b.payable_st, '0') = '0'
                        AND (   (    b.vouch_cd = '05'
                                 AND b.source_vouch_no NOT LIKE 'JV%'
                                )
                             OR (b.vouch_cd != '05')
                            )
                        AND v_divert_account IS NOT NULL) m,
                    gra_gl_coa c
              WHERE m.glac_sl_no = c.glac_sl_no)
         LOOP
            IF v_check_calc = 0 AND v_tot_amt = 0
            THEN
               l_tab.balance_amt := v_tot_amt;
               v_check_calc := '1';
            END IF;

            l_tab.vouch_dt := i.vouch_dt;
            l_tab.vouch_no := i.vouch_no;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.chq_no := i.chq_no;
            l_tab.chq_dt := i.chq_dt;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;
            l_tab.narration := i.narration;
            l_tab.vouch_cd := i.vouch_cd;
            PIPE ROW (l_tab);
            v_counter := '1';
         END LOOP;

         IF v_counter = '0'
         THEN
            BEGIN
               l_tab.balance_amt := v_tot_amt;
               l_tab.vouch_dt := NULL;
               l_tab.vouch_no := NULL;
               l_tab.glac_sl_no := v_act_glac_sl_no;
               l_tab.glac_no := v_act_glac_no;
               l_tab.glac_nm := v_act_glac_nm;
               l_tab.chq_no := NULL;
               l_tab.chq_dt := NULL;
               l_tab.credit_amt := 0;
               l_tab.debit_amt := 0;
               l_tab.narration := NULL;
               l_tab.vouch_cd := NULL;
               PIPE ROW (l_tab);
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END IF;

         RETURN;
      END IF;
   END;

   FUNCTION rep_gra_dr_cr_voucher (
      p_vouch_no         IN   VARCHAR2,
      p_object_cd        IN   VARCHAR2,
      p_cost_center      IN   VARCHAR2,
      p_date_fr          IN   DATE,
      p_date_to          IN   DATE,
      p_config_act_for   IN   CHAR
   )
      RETURN gra_debit_tab PIPELINED
   AS
      l_tab       gra_debit_row;
      v_glac_no   VARCHAR2 (20);
      v_glac_nm   VARCHAR2 (300);
      v_count     NUMBER (2)     := 0;
   BEGIN
      /* IF p_object_cd = '03845'                 -- Claim Related Debit Voucher
       THEN*/
      FOR i IN
         (SELECT m.vouch_no vouch_no, m.cost_center,
                 TRUNC (m.vouch_dt) vouch_dt, m.ins_tp_cd, c.glac_sl_no,
                 c.glac_nm,
                 TO_CHAR
                       ((SELECT DECODE (a.applicant_tp,
                                        '1', rep_f_employee (g.emp_gid)
                                         || ' ('
                                         || f_emp_id (g.emp_gid)
                                         || ')',
                                        applicant_name
                                       )
                           FROM gra_settle_appl_dtl
                          WHERE appl_no = s.appl_no AND sl_no = s.sl_no)
                       ) paid_to,
                 m.narration, d.trans_amt, NVL (d.chq_no, s.cheque_no)
                                                                      chq_no,
                 NVL (d.chq_dt, s.cheque_date) chq_dt,
                 LTRIM (RTRIM (   g.to_acc_no
                               || ','
                               || rep_f_bank (g.to_bank_cd)
                               || ','
                               || rep_f_branch (g.to_br_cd),
                               ','
                              ),
                        ','
                       ) acc_info,
                 c.glac_no, f_vouch_nm (m.vouch_cd) vouch_nm,
                 DECODE (d.dr_cr, 'D', trans_amt, 0) debit,
                 DECODE (d.dr_cr, 'C', trans_amt, 0) credit,
                 m.vouch_no vouch_no_actual
            FROM gra_gl_coa c,
                 gra_gl_trans_mst m,
                 gra_gl_trans_dtl d,
                 gra_gratuity_settlement g,
                 gra_settle_appl_mst a,
                 gra_gratuity_settlement_dtl s
           WHERE c.glac_sl_no = d.glac_sl_no
             AND m.vouch_no = d.vouch_no
             AND m.office_cd = d.office_cd
             AND m.vouch_no = s.dis_voucher
             AND g.appl_no = a.appl_no
             AND a.appl_no = s.appl_no
             AND m.vouch_cd IN ('03', '04')
            -- AND d.dr_cr = 'D'     Disable Anamul 12.11.2018
             AND m.vouch_no = NVL (p_vouch_no, m.vouch_no)
             AND m.cost_center = NVL (p_cost_center, m.cost_center)
             AND m.vouch_dt BETWEEN NVL (p_date_fr, m.vouch_dt)
                                AND NVL (p_date_to, m.vouch_dt)
          UNION ALL
          SELECT m.vouch_no vouch_no, m.cost_center,
                 TRUNC (m.vouch_dt) vouch_dt, m.ins_tp_cd, c.glac_sl_no,
                 c.glac_nm, 'SLICL' paid_to, m.narration, d.trans_amt,
                 NVL (d.chq_no, s.cheque_no) chq_no,
                 NVL (d.chq_dt, s.cheque_date) chq_dt,
                 LTRIM (RTRIM (   g.to_acc_no
                               || ','
                               || rep_f_bank (g.to_bank_cd)
                               || ','
                               || rep_f_branch (g.to_br_cd),
                               ','
                              ),
                        ','
                       ) acc_info,
                 c.glac_no, f_vouch_nm (m.vouch_cd) vouch_nm,
                 DECODE (d.dr_cr, 'D', trans_amt, 0) debit,
                 DECODE (d.dr_cr, 'C', trans_amt, 0) credit,
                 m.vouch_no vouch_no_actual
            FROM gra_gl_coa c,
                 gra_gl_trans_mst m,
                 gra_gl_trans_dtl d,
                 gra_gratuity_settlement g,
                 gra_gratuity_settlement_ded s
           WHERE c.glac_sl_no = d.glac_sl_no
             AND m.vouch_no = d.vouch_no
             AND m.office_cd = d.office_cd
             AND m.vouch_no = s.voucher_no
             AND g.appl_no = s.appl_no
             AND m.vouch_cd IN ('03', '04')
            -- AND d.dr_cr = 'D'    Disable Anamul 12.11.2018
             AND m.vouch_no = NVL (p_vouch_no, m.vouch_no)
             AND m.cost_center = NVL (p_cost_center, m.cost_center)
             AND m.vouch_dt BETWEEN NVL (p_date_fr, m.vouch_dt)
                                AND NVL (p_date_to, m.vouch_dt))
      LOOP
         l_tab.vouch_dt := i.vouch_dt;
         l_tab.vouch_no := i.vouch_no;
         l_tab.cost_center := i.cost_center;
         l_tab.ins_tp_cd := i.ins_tp_cd;
         l_tab.glac_sl_no := i.glac_sl_no;
         l_tab.glac_nm := i.glac_nm;
         l_tab.paid_to := i.paid_to;
         l_tab.narration := i.narration;
         l_tab.trans_amt := i.trans_amt;
         l_tab.chq_no := i.chq_no;
         l_tab.chq_dt := i.chq_dt;
         l_tab.acc_info := i.acc_info;
         l_tab.glac_no := i.glac_no;
         l_tab.vouch_nm := i.vouch_nm;
         l_tab.debit_amt := i.debit;
         l_tab.credit_amt := i.credit;
         PIPE ROW (l_tab);
      END LOOP;

      RETURN;
   --  END IF;
   END;
END pkg_gl_gra;
/


--
-- PKG_GL_PF  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_gl_pf
IS
   FUNCTION rep_pf_trial_bal (p_office_cd      IN hrm_office.office_cd%TYPE,
                              p_cost_center    IN VARCHAR2,
                              p_date_from      IN DATE,
                              p_date_to        IN DATE,
                              p_fiscal_yr_tp   IN VARCHAR2,
                              p_check          IN VARCHAR2)
      RETURN acc_trial_tab
      PIPELINED
   AS
      l_tab               acc_trial_row;
      v_gl_prev_balance   NUMBER (12, 2);
      v_error             VARCHAR2 (100);
      v_opening_bal       NUMBER (12, 2) := 0;
      v_date_from         DATE;
   BEGIN
      IF p_fiscal_yr_tp = '0'
      THEN
         v_date_from :=
            TO_DATE ('01-JAN-' || TO_CHAR (TO_DATE (p_date_to), 'RRRR'),
                     'DD-MON-RRRR');

         FOR i
         IN (  SELECT   x.glac_sl_no,
                        cntrl_glac_sl_no,
                        glac_no,
                        glac_nm,
                        account_type,
                        SUM(ABS(CASE
                                   WHEN (account_type = 'D' AND bal >= 0)
                                        OR (account_type = 'C' AND bal >= 0)
                                   THEN
                                      bal
                                   ELSE
                                      0
                                END))
                           debit_amt,
                        SUM(ABS(CASE
                                   WHEN (account_type = 'D' AND bal < 0)
                                        OR (account_type = 'C' AND bal < 0)
                                   THEN
                                      bal
                                   ELSE
                                      0
                                END))
                           credit_amt
                 FROM   (  SELECT   gm.glac_sl_no,
                                    SUM(CASE
                                           WHEN gm.glac_sl_no LIKE '1%'
                                                OR gm.glac_sl_no LIKE '2%'
                                           THEN
                                              opening_bal
                                           ELSE
                                              0
                                        END)
                                    + NVL ( (SUM (debit) - SUM (credit)), 0)
                                       bal
                             FROM   (  SELECT   NVL (d.divert_to_glac_sl_no,
                                                     a.glac_sl_no)
                                                   glac_sl_no,
                                                SUM(DECODE (a.dr_cr,
                                                            'D', a.trans_amt,
                                                            0))
                                                   debit,
                                                SUM(DECODE (a.dr_cr,
                                                            'C', a.trans_amt,
                                                            0))
                                                   credit
                                         FROM   cpf_gl_trans_dtl a,
                                                cpf_gl_trans_mst b,
                                                cpf_cash_book_divert d
                                        WHERE   a.office_cd = b.office_cd
                                                AND a.vouch_no = b.vouch_no
                                                AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                           AND  p_date_to
                                                AND b.office_cd IN
                                                         (SELECT   DISTINCT
                                                                   DECODE (
                                                                      p_check,
                                                                      '0',
                                                                      x.office_cd,
                                                                      y.office_cd
                                                                   )
                                                            FROM   (SELECT   p_office_cd
                                                                                office_cd
                                                                      FROM   DUAL)
                                                                   x,
                                                                   (    SELECT   office_cd
                                                                          FROM   hrm_office_setup
                                                                    CONNECT BY   PRIOR office_cd =
                                                                                    control_office_cd
                                                                    START WITH   office_cd =
                                                                                    p_office_cd)
                                                                   y)
                                                AND b.cost_center =
                                                      NVL (p_cost_center,
                                                           b.cost_center)
                                                AND NVL (b.ledger_st, '1') = '1'
                                                AND NVL (b.payable_st, '0') = '0'
                                                AND a.glac_sl_no = d.glac_sl_no(+)
                                     GROUP BY   a.glac_sl_no,
                                                d.divert_to_glac_sl_no
                                     UNION ALL
                                       SELECT   a.glac_sl_no,
                                                SUM(DECODE (a.dr_cr,
                                                            'D', a.trans_amt,
                                                            0))
                                                   debit,
                                                SUM(DECODE (a.dr_cr,
                                                            'C', a.trans_amt,
                                                            0))
                                                   credit
                                         FROM   cpf_gl_trans_dtl a,
                                                cpf_gl_trans_mst b
                                        WHERE   a.office_cd = b.office_cd
                                                AND a.vouch_no = b.vouch_no
                                                AND TRUNC (b.vouch_dt) BETWEEN v_date_from
                                                                           AND  p_date_to
                                                AND b.office_cd IN
                                                         (SELECT   DISTINCT
                                                                   DECODE (
                                                                      p_check,
                                                                      '0',
                                                                      x.office_cd,
                                                                      y.office_cd
                                                                   )
                                                            FROM   (SELECT   p_office_cd
                                                                                office_cd
                                                                      FROM   DUAL)
                                                                   x,
                                                                   (    SELECT   office_cd
                                                                          FROM   hrm_office_setup
                                                                    CONNECT BY   PRIOR office_cd =
                                                                                    control_office_cd
                                                                    START WITH   office_cd =
                                                                                    p_office_cd)
                                                                   y)
                                                AND b.cost_center =
                                                      NVL (p_cost_center,
                                                           b.cost_center)
                                                AND NVL (b.ledger_st, '1') = '1'
                                                AND NVL (b.payable_st, '0') = '1'
                                     GROUP BY   a.glac_sl_no) u,
                                    cpf_gl_coa_mst gm
                            WHERE   gm.glac_sl_no = u.glac_sl_no(+)
                         GROUP BY   gm.glac_sl_no) x,
                        cpf_gl_coa c
                WHERE   x.glac_sl_no = c.glac_sl_no AND c.postable = 'P'
             GROUP BY   x.glac_sl_no,
                        cntrl_glac_sl_no,
                        glac_no,
                        glac_nm,
                        account_type
             ORDER BY   x.glac_sl_no)
         LOOP
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.cntrl_glac_sl_no := i.cntrl_glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;

            IF i.account_type = 'C'
            THEN
               l_tab.credit_amt := i.credit_amt;
            ELSE
               l_tab.credit_amt := i.credit_amt;
            END IF;

            IF i.account_type = 'D'
            THEN
               l_tab.debit_amt := i.debit_amt;
            ELSE
               l_tab.debit_amt := i.debit_amt;
            END IF;

            PIPE ROW (l_tab);
         END LOOP;

         RETURN;
      END IF;
   END;

   FUNCTION rep_pf_ledger (p_office_cd      IN hrm_office.office_cd%TYPE,
                           p_cost_center    IN VARCHAR2,
                           p_glac_no        IN VARCHAR2,
                           pdate_from       IN DATE,
                           pdate_to         IN DATE,
                           p_business_tp    IN VARCHAR2,
                           p_vr_tp          IN VARCHAR2,
                           p_fiscal_yr_tp   IN VARCHAR2,
                           p_vouch_no       IN VARCHAR2,
                           p_check          IN VARCHAR2)
      RETURN pf_ledger_tab
      PIPELINED
   AS
      l_tab              acc_ledger_row;
      v_check_calc       NUMBER := 0;
      v_tot_amt          acc_gl_trans_dtl.trans_amt%TYPE := 0;
      v_opening_amt      acc_gl_trans_dtl.trans_amt%TYPE := 0;
      v_counter          CHAR (1) := '0';
      v_glac_no          VARCHAR2 (20);
      v_glac_nm          VARCHAR2 (200);
      v_count            NUMBER (2) := 0;
      v_act_glac_sl_no   VARCHAR2 (20) := NULL;
      v_act_glac_no      VARCHAR2 (20) := NULL;
      v_act_glac_nm      VARCHAR2 (200) := NULL;
      v_divert_account   VARCHAR2 (20) := NULL;
      v_glac_sl_no       VARCHAR2 (20) := NULL;
   BEGIN
      BEGIN
         SELECT   glac_sl_no
           INTO   v_divert_account
           FROM   cpf_cash_book_divert
          WHERE   divert_to_glac_sl_no = p_glac_no;

         v_glac_sl_no := v_divert_account;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_divert_account := NULL;
            v_glac_sl_no := p_glac_no;
      END;

      BEGIN
         SELECT   c.glac_sl_no, c.glac_no, c.glac_nm
           INTO   v_act_glac_sl_no, v_act_glac_no, v_act_glac_nm
           FROM   cpf_gl_coa c
          WHERE   glac_sl_no = p_glac_no;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      IF p_fiscal_yr_tp = '0'
      THEN
         FOR i
         IN (SELECT   m.vouch_dt,
                      m.vouch_no,
                      m.glac_sl_no,
                      c.glac_no,
                      c.glac_nm,
                      m.chq_no,
                      m.chq_dt,
                      m.credit_amt,
                      m.debit_amt,
                      m.narration,
                      m.vouch_cd,
                      m.vouch_no_actual
               FROM   (SELECT   b.vouch_dt,
                                a.vouch_no vouch_no,
                                NVL (d.divert_to_glac_sl_no, a.glac_sl_no)
                                   glac_sl_no,
                                a.chq_no,
                                a.chq_dt,
                                DECODE (a.dr_cr, 'C', a.trans_amt, 0)
                                   credit_amt,
                                DECODE (a.dr_cr, 'D', a.trans_amt, 0)
                                   debit_amt,
                                b.narration,
                                b.vouch_cd,
                                a.vouch_no vouch_no_actual
                         FROM   cpf_gl_trans_dtl a,
                                cpf_gl_trans_mst b,
                                cpf_cash_book_divert d
                        WHERE   b.office_cd IN
                                      (SELECT   DISTINCT
                                                DECODE (p_check,
                                                        '0', x.office_cd,
                                                        y.office_cd)
                                         FROM   (SELECT   p_office_cd
                                                             office_cd
                                                   FROM   DUAL) x,
                                                (    SELECT   office_cd
                                                       FROM   hrm_office_setup
                                                 CONNECT BY   PRIOR office_cd =
                                                                 control_office_cd
                                                 START WITH   office_cd =
                                                                 p_office_cd)
                                                y)
                                AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                                AND NVL (b.cost_center, 'X') =
                                      NVL (p_cost_center,
                                           NVL (b.cost_center, 'X'))
                                AND a.glac_sl_no = v_glac_sl_no
                                AND TRUNC (b.vouch_dt) BETWEEN pdate_from
                                                           AND  pdate_to
                                AND b.object_cd =
                                      NVL (p_business_tp, b.object_cd)
                                AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                                AND a.office_cd = b.office_cd
                                AND a.vouch_no = b.vouch_no
                                AND NVL (b.ledger_st, '1') = '1'
                                AND NVL (b.payable_st, '0') = '0'
                                AND a.glac_sl_no = d.glac_sl_no(+)
                       UNION ALL
                       SELECT   b.vouch_dt,
                                a.vouch_no vouch_no,
                                NVL (d.divert_to_glac_sl_no, a.glac_sl_no)
                                   glac_sl_no,
                                a.chq_no,
                                a.chq_dt,
                                DECODE (a.dr_cr, 'D', a.trans_amt, 0)
                                   credit_amt,
                                DECODE (a.dr_cr, 'C', a.trans_amt, 0)
                                   debit_amt,
                                b.narration,
                                b.vouch_cd,
                                a.vouch_no vouch_no_actual
                         FROM   cpf_gl_trans_dtl a,
                                cpf_gl_trans_mst b,
                                cpf_cash_book_divert d
                        WHERE   b.office_cd IN
                                      (SELECT   DISTINCT
                                                DECODE (p_check,
                                                        '0', x.office_cd,
                                                        y.office_cd)
                                         FROM   (SELECT   p_office_cd
                                                             office_cd
                                                   FROM   DUAL) x,
                                                (    SELECT   office_cd
                                                       FROM   hrm_office_setup
                                                 CONNECT BY   PRIOR office_cd =
                                                                 control_office_cd
                                                 START WITH   office_cd =
                                                                 p_office_cd)
                                                y)
                                AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                                AND NVL (b.cost_center, 'X') =
                                      NVL (p_cost_center,
                                           NVL (b.cost_center, 'X'))
                                AND a.glac_sl_no = v_glac_sl_no
                                AND TRUNC (b.vouch_dt) BETWEEN pdate_from
                                                           AND  pdate_to
                                AND b.object_cd =
                                      NVL (p_business_tp, b.object_cd)
                                AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                                AND a.office_cd = b.office_cd
                                AND a.vouch_no = b.vouch_no
                                AND NVL (b.ledger_st, '1') = '1'
                                AND NVL (b.payable_st, '0') = '1'
                                AND a.glac_sl_no = d.glac_sl_no(+)
                       UNION ALL
                       SELECT   b.vouch_dt,
                                a.vouch_no vouch_no,
                                a.glac_sl_no,
                                a.chq_no,
                                a.chq_dt,
                                DECODE (a.dr_cr, 'C', a.trans_amt, 0)
                                   credit_amt,
                                DECODE (a.dr_cr, 'D', a.trans_amt, 0)
                                   debit_amt,
                                b.narration,
                                b.vouch_cd,
                                a.vouch_no vouch_no_actual
                         FROM   cpf_gl_trans_dtl a, cpf_gl_trans_mst b
                        WHERE   b.office_cd IN
                                      (SELECT   DISTINCT
                                                DECODE (p_check,
                                                        '0', x.office_cd,
                                                        y.office_cd)
                                         FROM   (SELECT   p_office_cd
                                                             office_cd
                                                   FROM   DUAL) x,
                                                (    SELECT   office_cd
                                                       FROM   hrm_office_setup
                                                 CONNECT BY   PRIOR office_cd =
                                                                 control_office_cd
                                                 START WITH   office_cd =
                                                                 p_office_cd)
                                                y)
                                AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                                AND NVL (b.cost_center, 'X') =
                                      NVL (p_cost_center,
                                           NVL (b.cost_center, 'X'))
                                AND a.glac_sl_no = p_glac_no
                                AND TRUNC (b.vouch_dt) BETWEEN pdate_from
                                                           AND  pdate_to
                                AND b.object_cd =
                                      NVL (p_business_tp, b.object_cd)
                                AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                                AND a.office_cd = b.office_cd
                                AND a.vouch_no = b.vouch_no
                                AND NVL (b.ledger_st, '1') = '1'
                                AND NVL (b.payable_st, '0') = '0'
                                AND ( (b.vouch_cd = '05'
                                       AND b.source_vouch_no NOT LIKE 'JV%')
                                     OR (b.vouch_cd != '05'))
                                AND v_divert_account IS NOT NULL) m,
                      cpf_gl_coa c
              WHERE   m.glac_sl_no = c.glac_sl_no)
         /*(SELECT   b.vouch_dt,
                      NVL (b.source_vouch_no, a.vouch_no) vouch_no,
                      v_act_glac_sl_no glac_sl_no,
                      v_act_glac_no glac_no,
                      v_act_glac_nm glac_nm,
                      a.chq_no,
                      a.chq_dt,
                      DECODE (a.dr_cr, 'C', a.trans_amt, 0) credit_amt,
                      DECODE (a.dr_cr, 'D', a.trans_amt, 0) debit_amt,
                      b.narration,
                      b.vouch_cd,
                      a.vouch_no vouch_no_actual
               FROM   cpf_gl_trans_dtl a, cpf_gl_trans_mst b, cpf_gl_coa c
              WHERE   b.office_cd IN
                            (SELECT   DISTINCT
                                      DECODE (p_check,
                                              '0', x.office_cd,
                                              y.office_cd)
                               FROM   (SELECT   p_office_cd office_cd
                                         FROM   DUAL) x,
                                      (    SELECT   office_cd
                                             FROM   hrm_office_setup
                                       CONNECT BY   PRIOR office_cd =
                                                       control_office_cd
                                       START WITH   office_cd = p_office_cd)
                                      y)
                      AND b.vouch_no = NVL (p_vouch_no, b.vouch_no)
                      AND NVL (b.cost_center, 'X') =
                            NVL (p_cost_center, NVL (b.cost_center, 'X'))
                      AND a.glac_sl_no = v_glac_sl_no
                      AND TRUNC (b.vouch_dt) BETWEEN pdate_from AND pdate_to
                      AND b.object_cd = NVL (p_business_tp, b.object_cd)
                      AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                      AND a.office_cd = b.office_cd
                      AND a.vouch_no = b.vouch_no
                      AND a.glac_sl_no = c.glac_sl_no
                      AND ( (v_divert_account IS NULL AND 1 = 1)
                           OR (v_divert_account IS NOT NULL
                               AND ( (b.vouch_cd <> '05'
                                      AND source_vouch_no IS NULL)
                                    OR (b.vouch_cd = '05'
                                        AND source_vouch_no NOT LIKE 'JV%')))))*/
         LOOP
            IF v_check_calc = 0 AND v_tot_amt = 0
            THEN
               l_tab.balance_amt := v_tot_amt;
               v_check_calc := '1';
            END IF;

            l_tab.vouch_dt := i.vouch_dt;
            l_tab.vouch_no := i.vouch_no;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.chq_no := i.chq_no;
            l_tab.chq_dt := i.chq_dt;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;
            l_tab.narration := i.narration;
            l_tab.vouch_cd := i.vouch_cd;
            PIPE ROW (l_tab);
            v_counter := '1';
         END LOOP;

         IF v_counter = '0'
         THEN
            BEGIN
               l_tab.balance_amt := v_tot_amt;
               l_tab.vouch_dt := NULL;
               l_tab.vouch_no := NULL;
               l_tab.glac_sl_no := v_act_glac_sl_no;
               l_tab.glac_no := v_act_glac_no;
               l_tab.glac_nm := v_act_glac_nm;
               l_tab.chq_no := NULL;
               l_tab.chq_dt := NULL;
               l_tab.credit_amt := 0;
               l_tab.debit_amt := 0;
               l_tab.narration := NULL;
               l_tab.vouch_cd := NULL;
               PIPE ROW (l_tab);
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END IF;

         RETURN;
      /*ELSE
         FOR i IN
            (SELECT b.vouch_dt, a.vouch_no, a.glac_sl_no, c.glac_no,
                    c.glac_nm,
                    DECODE (a.dr_cr, 'C', a.trans_amt, 0) credit_amt,
                    DECODE (a.dr_cr, 'D', a.trans_amt, 0) debit_amt,
                    b.narration, b.vouch_cd
               FROM acc_gl_trans_dtl_hist a,
                    acc_gl_trans_mst_hist b,
                    acc_gl_coa c
              WHERE b.office_cd IN (
                       SELECT DISTINCT DECODE (p_check,
                                               '0', x.office_cd,
                                               y.office_cd
                                              )
                                  FROM (SELECT p_office_cd office_cd
                                          FROM DUAL) x,
                                       (SELECT     office_cd
                                              FROM hrm_office_setup
                                        CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                        START WITH office_cd = p_office_cd) y)
                AND NVL (b.cost_center, 'X') =
                                 NVL (p_cost_center, NVL (b.cost_center, 'X'))
                AND a.glac_sl_no = p_glac_no
                AND TRUNC (b.vouch_dt) BETWEEN NVL (pdate_from,
                                                    TRUNC (b.vouch_dt)
                                                   )
                                           AND NVL (pdate_to,
                                                    TRUNC (b.vouch_dt)
                                                   )
                AND b.object_cd = NVL (p_business_tp, b.object_cd)
                AND b.vouch_cd = NVL (p_vr_tp, b.vouch_cd)
                AND (   (p_ins_tp_cd IS NOT NULL AND b.ins_tp_cd = p_ins_tp_cd
                        )
                     OR (p_ins_tp_cd IS NULL AND 1 = 1)
                    )
                AND a.vouch_no = b.vouch_no
                AND a.glac_sl_no = c.glac_sl_no)
         LOOP
            l_tab.vouch_dt := i.vouch_dt;
            l_tab.vouch_no := i.vouch_no;
            l_tab.glac_sl_no := i.glac_sl_no;
            l_tab.glac_no := i.glac_no;
            l_tab.glac_nm := i.glac_nm;
            l_tab.credit_amt := i.credit_amt;
            l_tab.debit_amt := i.debit_amt;
            l_tab.narration := i.narration;
            l_tab.vouch_cd := i.vouch_cd;
            PIPE ROW (l_tab);
         END LOOP;

         RETURN;*/
      END IF;
   END;

   FUNCTION rep_pf_dr_cr_voucher (p_vouch_no         IN VARCHAR2,
                                  p_object_cd        IN VARCHAR2,
                                  p_cost_center      IN VARCHAR2,
                                  p_date_fr          IN DATE,
                                  p_date_to          IN DATE,
                                  p_config_act_for   IN CHAR)
      RETURN pf_debit_tab
      PIPELINED
   AS
      l_tab       pf_debit_row;
      v_glac_no   VARCHAR2 (20);
      v_glac_nm   VARCHAR2 (300);
      v_count     NUMBER (2) := 0;
   BEGIN
      /* IF p_object_cd = '03845'                  -- Claim Related Debit Voucher
       THEN*/
      FOR i
      IN (SELECT   s.voucher_no vouch_no,
                   m.cost_center,
                   TRUNC (m.vouch_dt) vouch_dt,
                   --   M.INS_TP_CD,
                   c.glac_sl_no,
                   c.glac_nm,
                   /*(SELECT    emp_nm_eng
                           || ' ('
                           || f_emp_nm (e.emp_gid)
                           || ')'
                      FROM hrm_employee
                     WHERE emp_gid = e.emp_gid)*/
                   ---Musha on 30.10.2017
                   (SELECT   DECODE (
                                applicant_tp,
                                '1',
                                   rep_f_employee (e.emp_gid)
                                || ' ('
                                || f_emp_id (e.emp_gid)
                                || ')',
                                applicant_name
                             )
                      FROM   cpf_final_settl_appl_dtl
                     WHERE   appl_no = s.appl_no AND sl_no = s.sl_no)
                      paid_to,
                   m.narration,
                   d.trans_amt,
                   NVL (d.chq_no, s.pay_order_no) chq_no,
                   NVL (d.chq_dt, s.pay_order_date) chq_dt,
                   LTRIM (
                      RTRIM (
                            g.dis_account_no
                         || ','
                         || rep_f_bank (g.dis_bank_cd)
                         || ','
                         || rep_f_branch (g.dis_branch_cd),
                         ','
                      ),
                      ','
                   )
                      acc_info,
                   c.glac_no,
                   f_vouch_nm (m.vouch_cd) vouch_nm,
                   DECODE (d.dr_cr, 'D', trans_amt, 0) debit,
                   DECODE (d.dr_cr, 'C', trans_amt, 0) credit
            FROM   cpf_gl_coa c,
                   cpf_gl_trans_mst m,
                   cpf_gl_trans_dtl d,
                   cpf_final_settl_appl_mst e,
                   cpf_final_settle_disburs_mst g,
                   cpf_final_settle_disburs_dtl s
           WHERE       c.glac_sl_no = d.glac_sl_no
                   AND e.appl_no = g.appl_no
                   AND m.vouch_no = d.vouch_no
                   AND m.office_cd = d.office_cd
                   -- AND M.VOUCH_NO = G.VOUCHER_NO
                   AND s.appl_no = g.appl_no
                   AND m.vouch_cd IN ('03', '04')
                   AND d.dr_cr = 'D'
                   AND s.voucher_no = NVL (p_vouch_no, s.voucher_no)
                   AND m.cost_center = NVL (p_cost_center, m.cost_center)
                   AND m.vouch_dt BETWEEN NVL (p_date_fr, m.vouch_dt)
                                      AND  NVL (p_date_to, m.vouch_dt))
      LOOP
         l_tab.vouch_dt := i.vouch_dt;
         l_tab.vouch_no := i.vouch_no;
         l_tab.cost_center := i.cost_center;
         -- l_tab.ins_tp_cd := i.ins_tp_cd;
         l_tab.glac_sl_no := i.glac_sl_no;
         l_tab.glac_nm := i.glac_nm;
         l_tab.paid_to := i.paid_to;
         l_tab.narration := i.narration;
         l_tab.trans_amt := i.trans_amt;
         l_tab.chq_no := i.chq_no;
         l_tab.chq_dt := i.chq_dt;
         l_tab.acc_info := i.acc_info;
         l_tab.glac_no := i.glac_no;
         l_tab.vouch_nm := i.vouch_nm;
         l_tab.debit_amt := i.debit;
         l_tab.credit_amt := i.credit;
         PIPE ROW (l_tab);
      END LOOP;

      RETURN;
   -- END IF;
   END;
END pkg_gl_pf;
/


--
-- PKG_GL_VOUCHER  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_gl_voucher
IS
   PROCEDURE pro_voucher_posting (
      p_table          IN       t_trans_tab,
      p_object_cd      IN       VARCHAR2,
      p_vouch_cd       IN       VARCHAR2,
      p_inter_off_st   IN       CHAR,
      p_office_cd      IN       hrm_office.office_cd%TYPE,
      p_trans_id       IN       VARCHAR2,
      p_trans_date     IN       DATE,
      p_cost_center    IN       VARCHAR2,
      p_narration      IN       VARCHAR2,
      p_user           IN       VARCHAR2,
      p_ins_tp_cd      IN       NUMBER,
      p_voucher_no     OUT      VARCHAR2,
      p_error          OUT      VARCHAR2
   )
   AS
      v_debit_amt                  NUMBER (15, 2)               := 0;
      v_credit_amt                 NUMBER (15, 2)               := 0;
      v_glac_sl_no                 acc_gl_coa.glac_sl_no%TYPE;
      v_trans_type                 CHAR (1);
      v_counter                    NUMBER (10)                  := 1;
      v_voucher_no                 VARCHAR2 (15);
      --v_vouch_sl_no                NUMBER (10);
      p_output                     VARCHAR2 (200)               := NULL;
      v_count                      NUMBER (1)                   := 0;
      v_process_st                 VARCHAR2 (200);
      --v_user                       VARCHAR2 (30)                := p_user;
      err_gl_tr_setup              EXCEPTION;
      err_gl_tr_amount             EXCEPTION;
      err_voucher_seq              EXCEPTION;
      err_office_wise_gl_account   EXCEPTION;
      err_unable_to_update         EXCEPTION;
      v_payabale_count             NUMBER (3)                   := 0;
      v_ledger_st                  CHAR (1)                     := '1';
      --v_trans_date                 DATE                    := TRUNC (SYSDATE);
                          --this updated by md. Sayadur rahaman on 22/05/2019
      v_trans_date                 DATE                       := p_trans_date;
   /*this updated by md. Sayadur rahaman on 02/01/2020 for open back dated voucher posting
   such that voucher is created according to user provide date*/
   BEGIN
      FOR i IN p_table.FIRST .. p_table.LAST
      LOOP
         BEGIN
            SELECT glac_sl_no, trans_type
              INTO v_glac_sl_no, v_trans_type
              FROM acc_gl_tr_setup_mst m, acc_gl_tr_setup_dtl d
             WHERE m.object_cd = p_object_cd
               AND m.vouch_cd = p_vouch_cd
               AND m.inter_off_st = p_inter_off_st
               AND d.trans_item_cd = p_table (i).trans_item_cd
               AND m.setup_id = d.setup_id;

            IF p_table (i).glac_sl_no IS NOT NULL
            THEN
               v_glac_sl_no := p_table (i).glac_sl_no;
            END IF;

            SELECT COUNT (1)
              INTO v_count
              FROM acc_gl_coa_mst
             WHERE office_cd = p_office_cd AND glac_sl_no = v_glac_sl_no;

            IF v_count = 0
            THEN
               RAISE err_office_wise_gl_account;
               EXIT;
            END IF;

            IF v_trans_type = 'D'
            THEN
               v_debit_amt := v_debit_amt + p_table (i).post_amount;
            ELSE
               v_credit_amt := v_credit_amt + p_table (i).post_amount;
            END IF;

            --Checking paybale voucher
            BEGIN
               IF v_ledger_st = '1'
               THEN
                  SELECT COUNT (1)
                    INTO v_payabale_count
                    FROM acc_cash_book_divert
                   WHERE glac_sl_no = v_glac_sl_no AND p_vouch_cd = '05';

                  IF v_payabale_count > 0
                  THEN
                     v_ledger_st := '0';
                  END IF;
               END IF;
            END;
         EXCEPTION
            WHEN OTHERS
            THEN
               RAISE err_gl_tr_setup;
               EXIT;
         END;
      END LOOP;

      IF v_debit_amt <> v_credit_amt
      THEN
         RAISE err_gl_tr_amount;
      ELSE
         FOR i IN p_table.FIRST .. p_table.LAST
         LOOP
            SELECT glac_sl_no, trans_type
              INTO v_glac_sl_no, v_trans_type
              FROM acc_gl_tr_setup_mst m, acc_gl_tr_setup_dtl d
             WHERE m.object_cd = p_object_cd
               AND m.vouch_cd = p_vouch_cd
               AND m.inter_off_st = p_inter_off_st
               AND d.trans_item_cd = p_table (i).trans_item_cd
               AND m.setup_id = d.setup_id;

            IF p_table (i).glac_sl_no IS NOT NULL
            THEN
               v_glac_sl_no := p_table (i).glac_sl_no;
            END IF;

            IF v_counter = 1
            THEN
               pkg_gl_voucher.pro_voucher_no
                                     (p_office_cd       => p_office_cd,
                                      p_fiscale_yr      => TO_CHAR
                                                                (v_trans_date,
                                                                 
                                                                 --p_trans_date, this updated by md. Sayadur rahaman on 22/05/2019
                                                                 'RRRR'
                                                                ),
                                      p_vouch_cd        => p_vouch_cd,
                                      p_user            => p_user,
                                      p_vouch_no        => v_voucher_no,
                                      p_process_st      => p_output
                                     );

               IF p_output IS NOT NULL
               THEN
                  RAISE err_voucher_seq;
                  EXIT;
               END IF;

               INSERT INTO acc_gl_trans_mst
                           (office_cd, vouch_no, vouch_dt,
                            vouch_cd, status, bank_recon_st, cost_center,
                            object_cd, trans_id, narration, i_usr,
                            i_dt, ins_tp_cd, ledger_st, payable_st
                           )
                    VALUES (p_office_cd, v_voucher_no, v_trans_date,
                            --p_trans_date, this updated by md. Sayadur rahaman on 22/05/2019
                            p_vouch_cd, '1', '0', p_cost_center,
                            p_object_cd, p_trans_id, p_narration, p_user,
                            SYSDATE, NVL (p_ins_tp_cd, '1'), v_ledger_st, '0'
                           );

               IF p_table (i).post_amount > 0
               THEN
                  INSERT INTO acc_gl_trans_dtl
                              (office_cd, vouch_no, sl_no,
                               glac_sl_no, dr_cr,
                               trans_amt, chq_tp,
                               chq_no, chq_dt,
                               i_usr, i_dt
                              )
                       VALUES (p_office_cd, v_voucher_no, v_counter,
                               v_glac_sl_no, v_trans_type,
                               p_table (i).post_amount, p_table (i).chq_tp,
                               p_table (i).chq_no, p_table (i).chq_dt,
                               p_user, SYSDATE
                              );

                  v_counter := v_counter + 1;
               END IF;
            ELSE
               IF p_table (i).post_amount > 0
               THEN
                  INSERT INTO acc_gl_trans_dtl
                              (office_cd, vouch_no, sl_no,
                               glac_sl_no, dr_cr,
                               trans_amt, chq_tp,
                               chq_no, chq_dt,
                               i_usr, i_dt
                              )
                       VALUES (p_office_cd, v_voucher_no, v_counter,
                               v_glac_sl_no, v_trans_type,
                               p_table (i).post_amount, p_table (i).chq_tp,
                               p_table (i).chq_no, p_table (i).chq_dt,
                               p_user, SYSDATE
                              );

                  v_counter := v_counter + 1;
               END IF;
            END IF;

            --Update the offic wise chart of accounts as per posted amount
            --Temporaray block by Md. Sayadur Rahaman on 15-April-2015
            /*pro_office_coa_update (p_office_cd       => p_office_cd,
                                   p_glac_sl_no      => v_glac_sl_no,
                                   p_trans_amt       => p_table (i).post_amount,
                                   p_dr_cr           => v_trans_type,
                                   p_fiscal_yr       => TO_CHAR (p_trans_date,
                                                                 'RRRR'
                                                                ),
                                   p_user            => p_user,
                                   p_process_st      => v_process_st
                                  );*/
            v_process_st := NULL;

            IF v_process_st IS NOT NULL
            THEN
               RAISE err_unable_to_update;
               EXIT;
            END IF;
         END LOOP;
      END IF;

      p_voucher_no := v_voucher_no;
      p_error := NULL;
   EXCEPTION
      WHEN err_office_wise_gl_account
      THEN
         p_error := 'GL account not found for the office of:' || p_office_cd;
      WHEN err_gl_tr_setup
      THEN
         p_error := 'Error found at GL trans setup due to ' || SQLERRM;
      WHEN err_gl_tr_amount
      THEN
         p_error :=
            'Failed to transaction due to Debit and Credit amount is not same!';
      WHEN err_voucher_seq
      THEN
         p_error := p_output;
      WHEN err_unable_to_update
      THEN
         p_error := v_process_st;
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END;

   PROCEDURE pro_cpf_voucher_posting (
      p_table          IN       t_trans_tab,
      p_object_cd      IN       VARCHAR2,
      p_vouch_cd       IN       VARCHAR2,
      p_inter_off_st   IN       CHAR,
      p_office_cd      IN       hrm_office.office_cd%TYPE,
      p_trans_id       IN       VARCHAR2,
      p_trans_date     IN       DATE,
      p_cost_center    IN       VARCHAR2,
      p_narration      IN       VARCHAR2,
      p_user           IN       VARCHAR2,
      p_ins_tp_cd      IN       NUMBER,
      p_voucher_no     OUT      VARCHAR2,
      p_error          OUT      VARCHAR2
   )
   AS
      v_debit_amt                  NUMBER (15, 2)               := 0;
      v_credit_amt                 NUMBER (15, 2)               := 0;
      v_glac_sl_no                 acc_gl_coa.glac_sl_no%TYPE;
      v_trans_type                 CHAR (1);
      v_counter                    NUMBER (10)                  := 1;
      --v_vouch_sl_no                NUMBER (10);
      p_output                     VARCHAR2 (200)               := NULL;
      v_vouch_no                   VARCHAR2 (200)               := NULL;
      v_count                      NUMBER (1)                   := 0;
      --v_user                       VARCHAR2 (30)                := p_user;
      v_sequence_nm                VARCHAR2 (200)               := NULL;
      v_statement                  VARCHAR2 (200)               := NULL;
      v_create_seq                 VARCHAR2 (200)               := NULL;
      v_vouch_sl_no                NUMBER (10);
      v_process_st                 VARCHAR2 (200)               := NULL;
      err_gl_tr_setup              EXCEPTION;
      err_gl_tr_amount             EXCEPTION;
      err_voucher_seq              EXCEPTION;
      err_office_wise_gl_account   EXCEPTION;
      err_unable_to_update         EXCEPTION;
   BEGIN
      FOR i IN p_table.FIRST .. p_table.LAST
      LOOP
         BEGIN
            SELECT glac_sl_no, trans_type
              INTO v_glac_sl_no, v_trans_type
              FROM cpf_gl_tr_setup_mst m, cpf_gl_tr_setup_dtl d
             WHERE m.object_cd = p_object_cd
               AND m.vouch_cd = p_vouch_cd
               AND m.inter_off_st = p_inter_off_st
               AND d.trans_item_cd = p_table (i).trans_item_cd
               AND m.setup_id = d.setup_id;

            IF p_table (i).glac_sl_no IS NOT NULL
            THEN
               v_glac_sl_no := p_table (i).glac_sl_no;
            END IF;

            SELECT COUNT (1)
              INTO v_count
              FROM cpf_gl_coa_mst
             WHERE office_cd = p_office_cd AND glac_sl_no = v_glac_sl_no;

            IF v_count = 0
            THEN
               RAISE err_office_wise_gl_account;
               EXIT;
            END IF;

            IF v_trans_type = 'D'
            THEN
               v_debit_amt := v_debit_amt + p_table (i).post_amount;
            ELSE
               v_credit_amt := v_credit_amt + p_table (i).post_amount;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               RAISE err_gl_tr_setup;
               EXIT;
         END;
      END LOOP;

      IF v_debit_amt <> v_credit_amt
      THEN
         RAISE err_gl_tr_amount;
      ELSE
         FOR i IN p_table.FIRST .. p_table.LAST
         LOOP
            SELECT glac_sl_no, trans_type
              INTO v_glac_sl_no, v_trans_type
              FROM cpf_gl_tr_setup_mst m, cpf_gl_tr_setup_dtl d
             WHERE m.object_cd = p_object_cd
               AND m.vouch_cd = p_vouch_cd
               AND m.inter_off_st = p_inter_off_st
               AND d.trans_item_cd = p_table (i).trans_item_cd
               AND m.setup_id = d.setup_id;

            IF p_table (i).glac_sl_no IS NOT NULL
            THEN
               v_glac_sl_no := p_table (i).glac_sl_no;
            END IF;

            IF v_counter = 1
            THEN
               BEGIN
                  SELECT object_name
                    INTO v_sequence_nm
                    FROM dba_objects
                   WHERE object_type = 'SEQUENCE'
                     AND object_name LIKE
                               'CPF_VOUCH'
                            || '_'
                            || p_vouch_cd
                            || '_'
                            || p_office_cd
                            || '_'
                            || TO_CHAR (p_trans_date, 'RRRR');

                  v_statement :=
                            'select ' || v_sequence_nm || '.NEXTVAL from dual';

                  EXECUTE IMMEDIATE v_statement
                               INTO v_vouch_sl_no;

                  SELECT    vouch_sh_nm
                         || '-'
                         || TO_CHAR (p_trans_date, 'RRRR')
                         || '-'
                         || LPAD (TO_CHAR (v_vouch_sl_no), 7, '0')
                    INTO v_vouch_no
                    FROM acc_voucher_type
                   WHERE vouch_cd = p_vouch_cd;

                  v_process_st := NULL;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     v_process_st :=
                           'Voucher:Sequence Not found for'
                        || p_office_cd
                        || 'On the fiscale year of '
                        || TO_CHAR (p_trans_date, 'RRRR');
                  WHEN OTHERS
                  THEN
                     v_process_st := SQLERRM;
               END;

               IF v_process_st IS NOT NULL
               THEN
                  RAISE err_voucher_seq;
                  EXIT;
               END IF;

               INSERT INTO cpf_gl_trans_mst
                           (office_cd, vouch_no, vouch_dt,
                            vouch_cd, status, bank_recon_st, cost_center,
                            object_cd, trans_id, narration, i_usr,
                            i_dt
                           )
                    VALUES (p_office_cd, v_vouch_no, p_trans_date,
                            p_vouch_cd, '1', '0', p_cost_center,
                            p_object_cd, p_trans_id, p_narration, p_user,
                            SYSDATE
                           );

               IF p_table (i).post_amount > 0
               THEN
                  INSERT INTO cpf_gl_trans_dtl
                              (office_cd, vouch_no, sl_no,
                               glac_sl_no, dr_cr,
                               trans_amt, chq_tp,
                               chq_no, chq_dt,
                               i_usr, i_dt
                              )
                       VALUES (p_office_cd, v_vouch_no, v_counter,
                               v_glac_sl_no, v_trans_type,
                               p_table (i).post_amount, p_table (i).chq_tp,
                               p_table (i).chq_no, p_table (i).chq_dt,
                               p_user, SYSDATE
                              );

                  v_counter := v_counter + 1;
               END IF;
            ELSE
               IF p_table (i).post_amount > 0
               THEN
                  INSERT INTO cpf_gl_trans_dtl
                              (office_cd, vouch_no, sl_no,
                               glac_sl_no, dr_cr,
                               trans_amt, chq_tp,
                               chq_no, chq_dt,
                               i_usr, i_dt
                              )
                       VALUES (p_office_cd, v_vouch_no, v_counter,
                               v_glac_sl_no, v_trans_type,
                               p_table (i).post_amount, p_table (i).chq_tp,
                               p_table (i).chq_no, p_table (i).chq_dt,
                               p_user, SYSDATE
                              );

                  v_counter := v_counter + 1;
               END IF;
            END IF;

            --Update the offic wise chart of accounts as per posted amount
            --Temporaray block by Md. Sayadur Rahaman on 15-April-2015
            /*pro_office_coa_update (p_office_cd       => p_office_cd,
                                   p_glac_sl_no      => v_glac_sl_no,
                                   p_trans_amt       => p_table (i).post_amount,
                                   p_dr_cr           => v_trans_type,
                                   p_fiscal_yr       => TO_CHAR (p_trans_date,
                                                                 'RRRR'
                                                                ),
                                   p_user            => p_user,
                                   p_process_st      => v_process_st
                                  );*/
            v_process_st := NULL;

            IF v_process_st IS NOT NULL
            THEN
               RAISE err_unable_to_update;
               EXIT;
            END IF;
         END LOOP;
      END IF;

      p_voucher_no := v_vouch_no;
      p_error := NULL;
   EXCEPTION
      WHEN err_office_wise_gl_account
      THEN
         p_error := 'GL account not found for the office of:' || p_office_cd;
      WHEN err_gl_tr_setup
      THEN
         p_error := 'Error found at GL trans setup due to ' || SQLERRM;
      WHEN err_gl_tr_amount
      THEN
         p_error :=
            'Failed to transaction due to Debit and Credit amount is not same!';
      WHEN err_voucher_seq
      THEN
         p_error := p_output;
      WHEN err_unable_to_update
      THEN
         p_error := v_process_st;
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END;

   PROCEDURE pro_gra_voucher_posting (
      p_table          IN       t_trans_tab,
      p_object_cd      IN       VARCHAR2,
      p_vouch_cd       IN       VARCHAR2,
      p_inter_off_st   IN       CHAR,
      p_office_cd      IN       hrm_office.office_cd%TYPE,
      p_trans_id       IN       VARCHAR2,
      p_trans_date     IN       DATE,
      p_cost_center    IN       VARCHAR2,
      p_narration      IN       VARCHAR2,
      p_user           IN       VARCHAR2,
      p_ins_tp_cd      IN       NUMBER,
      p_voucher_no     OUT      VARCHAR2,
      p_error          OUT      VARCHAR2
   )
   AS
      v_debit_amt                  NUMBER (15, 2)               := 0;
      v_credit_amt                 NUMBER (15, 2)               := 0;
      v_glac_sl_no                 acc_gl_coa.glac_sl_no%TYPE;
      v_trans_type                 CHAR (1);
      v_counter                    NUMBER (10)                  := 1;
      --v_vouch_sl_no                NUMBER (10);
      p_output                     VARCHAR2 (200)               := NULL;
      v_vouch_no                   VARCHAR2 (200)               := NULL;
      v_count                      NUMBER (1)                   := 0;
      --v_user                       VARCHAR2 (30)                := p_user;
      v_sequence_nm                VARCHAR2 (200)               := NULL;
      v_statement                  VARCHAR2 (200)               := NULL;
      v_create_seq                 VARCHAR2 (200)               := NULL;
      v_vouch_sl_no                NUMBER (10);
      v_process_st                 VARCHAR2 (200)               := NULL;
      err_gl_tr_setup              EXCEPTION;
      err_gl_tr_amount             EXCEPTION;
      err_voucher_seq              EXCEPTION;
      err_office_wise_gl_account   EXCEPTION;
      err_unable_to_update         EXCEPTION;
   BEGIN
      FOR i IN p_table.FIRST .. p_table.LAST
      LOOP
         BEGIN
            SELECT glac_sl_no, trans_type
              INTO v_glac_sl_no, v_trans_type
              FROM gra_gl_tr_setup_mst m, gra_gl_tr_setup_dtl d
             WHERE m.object_cd = p_object_cd
               AND m.vouch_cd = p_vouch_cd
               AND m.inter_off_st = p_inter_off_st
               AND d.trans_item_cd = p_table (i).trans_item_cd
               AND m.setup_id = d.setup_id;

            IF p_table (i).glac_sl_no IS NOT NULL
            THEN
               v_glac_sl_no := p_table (i).glac_sl_no;
            END IF;

            SELECT COUNT (1)
              INTO v_count
              FROM gra_gl_coa_mst
             WHERE office_cd = p_office_cd AND glac_sl_no = v_glac_sl_no;

            IF v_count = 0
            THEN
               RAISE err_office_wise_gl_account;
               EXIT;
            END IF;

            IF v_trans_type = 'D'
            THEN
               v_debit_amt := v_debit_amt + p_table (i).post_amount;
            ELSE
               v_credit_amt := v_credit_amt + p_table (i).post_amount;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               RAISE err_gl_tr_setup;
               EXIT;
         END;
      END LOOP;

      IF v_debit_amt <> v_credit_amt
      THEN
         RAISE err_gl_tr_amount;
      ELSE
         FOR i IN p_table.FIRST .. p_table.LAST
         LOOP
            SELECT glac_sl_no, trans_type
              INTO v_glac_sl_no, v_trans_type
              FROM gra_gl_tr_setup_mst m, gra_gl_tr_setup_dtl d
             WHERE m.object_cd = p_object_cd
               AND m.vouch_cd = p_vouch_cd
               AND m.inter_off_st = p_inter_off_st
               AND d.trans_item_cd = p_table (i).trans_item_cd
               AND m.setup_id = d.setup_id;

            IF p_table (i).glac_sl_no IS NOT NULL
            THEN
               v_glac_sl_no := p_table (i).glac_sl_no;
            END IF;

            IF v_counter = 1
            THEN
               BEGIN
                  SELECT object_name
                    INTO v_sequence_nm
                    FROM dba_objects
                   WHERE object_type = 'SEQUENCE'
                     AND object_name LIKE
                               'GRA_VOUCH'
                            || '_'
                            || p_vouch_cd
                            || '_'
                            || p_office_cd
                            || '_'
                            || TO_CHAR (p_trans_date, 'RRRR');

                  v_statement :=
                            'select ' || v_sequence_nm || '.NEXTVAL from dual';

                  EXECUTE IMMEDIATE v_statement
                               INTO v_vouch_sl_no;

                  SELECT    vouch_sh_nm
                         || '-'
                         || TO_CHAR (p_trans_date, 'RRRR')
                         || '-'
                         || LPAD (TO_CHAR (v_vouch_sl_no), 7, '0')
                    INTO v_vouch_no
                    FROM acc_voucher_type
                   WHERE vouch_cd = p_vouch_cd;

                  v_process_st := NULL;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     v_process_st :=
                           'Voucher:Sequence Not found for'
                        || p_office_cd
                        || 'On the fiscale year of '
                        || TO_CHAR (p_trans_date, 'RRRR');
                  WHEN OTHERS
                  THEN
                     v_process_st := SQLERRM;
               END;

               IF v_process_st IS NOT NULL
               THEN
                  RAISE err_voucher_seq;
                  EXIT;
               END IF;

               INSERT INTO gra_gl_trans_mst
                           (office_cd, vouch_no, vouch_dt,
                            vouch_cd, status, bank_recon_st, cost_center,
                            object_cd, trans_id, narration, i_usr,
                            i_dt
                           )
                    VALUES (p_office_cd, v_vouch_no, p_trans_date,
                            p_vouch_cd, '1', '0', p_cost_center,
                            p_object_cd, p_trans_id, p_narration, p_user,
                            SYSDATE
                           );

               IF p_table (i).post_amount > 0
               THEN
                  INSERT INTO gra_gl_trans_dtl
                              (office_cd, vouch_no, sl_no,
                               glac_sl_no, dr_cr,
                               trans_amt, chq_tp,
                               chq_no, chq_dt,
                               i_usr, i_dt
                              )
                       VALUES (p_office_cd, v_vouch_no, v_counter,
                               v_glac_sl_no, v_trans_type,
                               p_table (i).post_amount, p_table (i).chq_tp,
                               p_table (i).chq_no, p_table (i).chq_dt,
                               p_user, SYSDATE
                              );

                  v_counter := v_counter + 1;
               END IF;
            ELSE
               IF p_table (i).post_amount > 0
               THEN
                  INSERT INTO gra_gl_trans_dtl
                              (office_cd, vouch_no, sl_no,
                               glac_sl_no, dr_cr,
                               trans_amt, chq_tp,
                               chq_no, chq_dt,
                               i_usr, i_dt
                              )
                       VALUES (p_office_cd, v_vouch_no, v_counter,
                               v_glac_sl_no, v_trans_type,
                               p_table (i).post_amount, p_table (i).chq_tp,
                               p_table (i).chq_no, p_table (i).chq_dt,
                               p_user, SYSDATE
                              );

                  v_counter := v_counter + 1;
               END IF;
            END IF;

            --Update the offic wise chart of accounts as per posted amount
            --Temporaray block by Md. Sayadur Rahaman on 15-April-2015
            /*pro_office_coa_update (p_office_cd       => p_office_cd,
                                   p_glac_sl_no      => v_glac_sl_no,
                                   p_trans_amt       => p_table (i).post_amount,
                                   p_dr_cr           => v_trans_type,
                                   p_fiscal_yr       => TO_CHAR (p_trans_date,
                                                                 'RRRR'
                                                                ),
                                   p_user            => p_user,
                                   p_process_st      => v_process_st
                                  );*/
            v_process_st := NULL;

            IF v_process_st IS NOT NULL
            THEN
               RAISE err_unable_to_update;
               EXIT;
            END IF;
         END LOOP;
      END IF;

      p_voucher_no := v_vouch_no;
      p_error := NULL;
   EXCEPTION
      WHEN err_office_wise_gl_account
      THEN
         p_error := 'GL account not found for the office of:' || p_office_cd;
      WHEN err_gl_tr_setup
      THEN
         p_error := 'Error found at GL trans setup due to ' || SQLERRM;
      WHEN err_gl_tr_amount
      THEN
         p_error :=
            'Failed to transaction due to Debit and Credit amount is not same!';
      WHEN err_voucher_seq
      THEN
         p_error := p_output;
      WHEN err_unable_to_update
      THEN
         p_error := v_process_st;
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END;

   PROCEDURE pro_voucher_no (
      p_office_cd          VARCHAR2,
      p_fiscale_yr         VARCHAR2,
      p_vouch_cd           VARCHAR2,
      p_user               VARCHAR2,
      p_vouch_no     OUT   VARCHAR2,
      p_process_st   OUT   VARCHAR2
   )
   IS
      v_sequence_nm   VARCHAR2 (200) := NULL;
      v_statement     VARCHAR2 (200) := NULL;
      v_create_seq    VARCHAR2 (200) := NULL;
      v_vouch_sl_no   NUMBER (10);
   BEGIN
      SELECT object_name
        INTO v_sequence_nm
        FROM dba_objects
       WHERE object_type = 'SEQUENCE'
         AND object_name LIKE
                   'ACC_VOUCH'
                || '_'
                || p_vouch_cd
                || '_'
                || p_office_cd
                || '_'
                || p_fiscale_yr;

      v_statement := 'select ' || v_sequence_nm || '.NEXTVAL from dual';

      EXECUTE IMMEDIATE v_statement
                   INTO v_vouch_sl_no;

      SELECT    vouch_sh_nm
             || '-'
             || p_fiscale_yr
             || '-'
             || LPAD (TO_CHAR (v_vouch_sl_no), 7, '0')
        INTO p_vouch_no
        FROM acc_voucher_type
       WHERE vouch_cd = p_vouch_cd;

      p_process_st := NULL;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         p_process_st :=
               'Voucher:Sequence Not found for'
            || p_office_cd
            || 'On the fiscale year of '
            || p_fiscale_yr;
      WHEN OTHERS
      THEN
         p_process_st := SQLERRM;
   END;

   PROCEDURE pro_cpf_voucher_no (
      p_office_cd          VARCHAR2,
      p_fiscale_yr         VARCHAR2,
      p_vouch_cd           VARCHAR2,
      p_user               VARCHAR2,
      p_vouch_no     OUT   VARCHAR2,
      p_process_st   OUT   VARCHAR2
   )
   IS
      v_sequence_nm   VARCHAR2 (200) := NULL;
      v_statement     VARCHAR2 (200) := NULL;
      v_create_seq    VARCHAR2 (200) := NULL;
      v_vouch_sl_no   NUMBER (10);
   BEGIN
      SELECT object_name
        INTO v_sequence_nm
        FROM dba_objects
       WHERE object_type = 'SEQUENCE'
         AND object_name LIKE
                   'CPF_VOUCH'
                || '_'
                || p_vouch_cd
                || '_'
                || p_office_cd
                || '_'
                || p_fiscale_yr;

      v_statement := 'select ' || v_sequence_nm || '.NEXTVAL from dual';

      EXECUTE IMMEDIATE v_statement
                   INTO v_vouch_sl_no;

      SELECT    vouch_sh_nm
             || '-'
             || p_fiscale_yr
             || '-'
             || LPAD (TO_CHAR (v_vouch_sl_no), 7, '0')
        INTO p_vouch_no
        FROM acc_voucher_type
       WHERE vouch_cd = p_vouch_cd;

      p_process_st := NULL;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         p_process_st :=
               'Voucher:Sequence Not found for'
            || p_office_cd
            || 'On the fiscale year of '
            || p_fiscale_yr;
      WHEN OTHERS
      THEN
         p_process_st := SQLERRM;
   END;

   PROCEDURE pro_office_coa_update (
      p_office_cd             VARCHAR2,
      p_glac_sl_no            VARCHAR2,
      p_trans_amt             NUMBER,
      p_dr_cr                 VARCHAR2,
      p_fiscal_yr             VARCHAR2,
      p_user         IN       VARCHAR2,
      p_process_st   OUT      VARCHAR2
   )
   AS
      err_unable_to_update   EXCEPTION;
   BEGIN
      FOR i IN (SELECT     c.glac_sl_no, c.account_type
                      FROM acc_gl_coa c
                START WITH c.glac_sl_no = p_glac_sl_no
                CONNECT BY PRIOR c.cntrl_glac_sl_no = c.glac_sl_no)
      LOOP
         BEGIN
            IF p_fiscal_yr = TO_CHAR (SYSDATE, 'RRRR')
            THEN
               UPDATE acc_gl_coa_mst
                  SET current_bal =
                         CASE
                            WHEN p_dr_cr = i.account_type
                               THEN NVL (current_bal, 0) + p_trans_amt
                            ELSE NVL (current_bal, 0) - p_trans_amt
                         END,
                      u_usr = p_user,
                      u_dt = SYSDATE
                WHERE office_cd = p_office_cd AND glac_sl_no = i.glac_sl_no;
            ELSE
               UPDATE acc_gl_coa_mst_hist
                  SET current_bal =
                         CASE
                            WHEN p_dr_cr = i.account_type
                               THEN NVL (current_bal, 0) + p_trans_amt
                            ELSE NVL (current_bal, 0) - p_trans_amt
                         END,
                      u_usr = p_user,
                      u_dt = SYSDATE
                WHERE office_cd = p_office_cd
                  AND glac_sl_no = i.glac_sl_no
                  AND bal_year = p_fiscal_yr;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               RAISE err_unable_to_update;
               EXIT;
         END;
      END LOOP;
   EXCEPTION
      WHEN err_unable_to_update
      THEN
         p_process_st :=
               'Unable to update the office wise Chart of Accounts due to!'
            || SQLERRM;
   END;

   PROCEDURE pro_rev_voucher_posting (
      p_object_cd        IN       VARCHAR2,
      p_trans_date       IN       DATE,
      p_rev_voucher_no   IN       VARCHAR2,
      p_narration        IN       VARCHAR2,
      p_user             IN       VARCHAR2,
      p_voucher_no       OUT      VARCHAR2,
      p_error            OUT      VARCHAR2
   )
   AS
      v_vouch_dt             DATE;
      v_object_cd            VARCHAR2 (5);
      v_cost_center          hrm_office.office_cd%TYPE;
      v_office_cd            hrm_office.office_cd%TYPE;
      v_voucher_no           VARCHAR2 (15);
      p_output               VARCHAR2 (200)                      := NULL;
      v_vouch_cd             VARCHAR2 (2)                        := '05';
      --Here '05' means journal voucher
      v_trans_type           CHAR (1);
      v_process_st           VARCHAR2 (200);
      v_ins_tp_cd            ins_insurance_type.ins_tp_cd%TYPE;
      err_unable_to_update   EXCEPTION;
      v_payabale_count       NUMBER (3)                          := 0;
      v_ledger_st            CHAR (1)                            := '1';
   BEGIN
      IF p_rev_voucher_no IS NOT NULL
      THEN
         BEGIN
            SELECT m.vouch_dt, m.object_cd, m.cost_center, m.office_cd,
                   m.ins_tp_cd
              INTO v_vouch_dt, v_object_cd, v_cost_center, v_office_cd,
                   v_ins_tp_cd
              FROM acc_gl_trans_mst m
             WHERE vouch_no = p_rev_voucher_no;
         EXCEPTION                 --Add this exception by Musha on 18.04.2017
            WHEN NO_DATA_FOUND
            THEN
               SELECT m.vouch_dt, m.object_cd, m.cost_center, m.office_cd,
                      m.ins_tp_cd
                 INTO v_vouch_dt, v_object_cd, v_cost_center, v_office_cd,
                      v_ins_tp_cd
                 FROM acc_gl_trans_mst_hist m
                WHERE vouch_no = p_rev_voucher_no;
         END;

         IF v_vouch_dt >= TO_DATE ('01/01/2019', 'dd/mm/rrrr')
         THEN
            --Add this condition by Musha on 19.06.2019 as per SLICL requirments
            pkg_gl_voucher.pro_voucher_no
                                     (p_office_cd       => v_office_cd,
                                      p_fiscale_yr      => TO_CHAR
                                                                (p_trans_date,
                                                                 'RRRR'
                                                                ),
                                      p_vouch_cd        => v_vouch_cd,
                                      p_user            => p_user,
                                      p_vouch_no        => v_voucher_no,
                                      p_process_st      => p_output
                                     );

            IF p_output IS NULL
            THEN
               INSERT INTO acc_gl_trans_mst
                           (office_cd, vouch_no, vouch_dt,
                            vouch_cd, status, bank_recon_st, cost_center,
                            object_cd, trans_id, narration,
                            i_usr, i_dt, ins_tp_cd, source_vouch_no
                           )
                    VALUES (v_office_cd, v_voucher_no, p_trans_date,
                            v_vouch_cd, '1', '0', v_cost_center,
                            p_object_cd, p_rev_voucher_no, p_narration,
                            p_user, SYSDATE, v_ins_tp_cd, p_rev_voucher_no
                           );

               FOR i IN (SELECT   office_cd, sl_no, glac_sl_no, dr_cr,
                                  trans_amt, chq_tp, chq_no, chq_dt
                             FROM acc_gl_trans_dtl
                            WHERE vouch_no = p_rev_voucher_no
                         UNION ALL                --Add by Musha on 18.04.2017
                         SELECT   office_cd, sl_no, glac_sl_no, dr_cr,
                                  trans_amt, chq_tp, chq_no, chq_dt
                             FROM acc_gl_trans_dtl_hist
                            WHERE vouch_no = p_rev_voucher_no
                         ORDER BY sl_no)
               LOOP
                  --Checking paybale voucher added on 23/11/2016 by Md. Sayadur Rahaman
                  BEGIN
                     IF v_ledger_st = '1'
                     THEN
                        SELECT COUNT (1)
                          INTO v_payabale_count
                          FROM acc_cash_book_divert
                         WHERE glac_sl_no = i.glac_sl_no
                           AND v_vouch_cd = '05'
                           AND p_rev_voucher_no LIKE 'JV%';

                        IF v_payabale_count > 0
                        THEN
                           v_ledger_st := '0';
                        END IF;
                     END IF;
                  END;

                  SELECT DECODE (i.dr_cr, 'D', 'C', 'D')
                    INTO v_trans_type
                    FROM DUAL;

                  INSERT INTO acc_gl_trans_dtl
                              (office_cd, vouch_no, sl_no,
                               glac_sl_no, dr_cr, trans_amt,
                               chq_tp, chq_no, chq_dt, i_usr, i_dt
                              )
                       VALUES (v_office_cd, v_voucher_no, i.sl_no,
                               i.glac_sl_no, v_trans_type, i.trans_amt,
                               i.chq_tp, i.chq_no, i.chq_dt, p_user, SYSDATE
                              );

                  --Update the offic wise chart of accounts as per posted amount
                  --Temporaray block by Md. Sayadur Rahaman on 15-April-2015
                  /*
                     pro_office_coa_update (p_office_cd       => v_office_cd,
                                            p_glac_sl_no      => i.glac_sl_no,
                                            p_trans_amt       => i.trans_amt,
                                            p_dr_cr           => v_trans_type,
                                            p_fiscal_yr       => TO_CHAR
                                                                      (p_trans_date,
                                                                       'RRRR'
                                                                      ),
                                            p_user            => p_user,
                                            p_process_st      => v_process_st
                                           );*/
                  v_process_st := NULL;

                  IF v_process_st IS NOT NULL
                  THEN
                     RAISE err_unable_to_update;
                     EXIT;
                  END IF;
               END LOOP;

               UPDATE acc_gl_trans_mst
                  SET ledger_st = v_ledger_st,
                      payable_st = '0'
                WHERE office_cd = v_office_cd AND vouch_no = v_voucher_no;

               p_voucher_no := v_voucher_no;
            ELSE
               p_error := SQLERRM;
            END IF;
         END IF;
      ELSE
         p_error := 'Voucher number should not be empty';
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         p_error := p_rev_voucher_no || ' is not found in leadger';
      WHEN err_unable_to_update
      THEN
         p_error := 'Unable to update the office wise GL';
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END;
END;
/


--
-- PKG_GL_YEAR_CLOSING  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_gl_year_closing
IS
   PROCEDURE pro_leadger_checking (
      p_st_date            DATE,
      p_end_date           DATE,
      p_office_cd          hrm_office.office_cd%TYPE,
      p_leadger_tp         CHAR,
      --1=Accounts office wise,'2'=Cost Center wise
      p_output       OUT   VARCHAR2
   )
   IS
      CURSOR cur_office_bal
      IS
         SELECT   m.office_cd,
                  SUM (DECODE (d.dr_cr, 'D', d.trans_amt, 0)) sum_debit,
                  SUM (DECODE (d.dr_cr, 'C', d.trans_amt, 0)) sum_credit
             FROM acc_gl_trans_mst m, acc_gl_trans_dtl d
            WHERE m.vouch_no = d.vouch_no
              AND m.vouch_dt BETWEEN p_st_date AND p_end_date
              AND (   (p_leadger_tp = 1 AND m.office_cd = p_office_cd)
                   OR (p_leadger_tp = 2 AND m.cost_center = p_office_cd)
                  )
         GROUP BY m.office_cd;

      rec_cur_office_bal   cur_office_bal%ROWTYPE;
      v_office_cd          hrm_office.office_cd%TYPE   := NULL;
   BEGIN
      OPEN cur_office_bal;

      LOOP
         FETCH cur_office_bal
          INTO rec_cur_office_bal;

         EXIT WHEN cur_office_bal%NOTFOUND;

         IF rec_cur_office_bal.sum_debit <> rec_cur_office_bal.sum_credit
         THEN
            IF v_office_cd IS NULL
            THEN
               v_office_cd := v_office_cd || rec_cur_office_bal.office_cd;
            ELSE
               v_office_cd :=
                           v_office_cd || ',' || rec_cur_office_bal.office_cd;
            END IF;
         END IF;
      END LOOP;

      CLOSE cur_office_bal;

      IF v_office_cd IS NULL
      THEN
         p_output := NULL;
      ELSE
         p_output :=
               '"Leadger" is not completed of the following office: '
            || v_office_cd
            || '.So checking the "Leadger" of this/those office.';
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_output := SQLERRM;
   END;

   PROCEDURE pro_coa_transfer_to_hist (
      p_fiscal_yr         VARCHAR2,
      p_quarter           NUMBER,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   )
   IS
      v_process_st   CHAR (1)       := 'Y';
--Note:if Process has succesfully completed  the value of this variable reaim 'Y' other wise it will be 'N'
      v_error        VARCHAR2 (200);
   BEGIN
      INSERT INTO acc_gl_coa_mst_hist
                  (bal_year, office_cd, glac_sl_no, cntrl_glac_sl_no,
                   opening_dt, opening_bal, current_bal, closing_bal,
                   closing_dt, i_usr, i_dt, u_usr, u_dt, opening_bal_con,
                   current_bal_con, closing_bal_con, opening_bal_tak,
                   current_bal_tak, closing_bal_tak, quarter)
         (SELECT p_fiscal_yr, office_cd, glac_sl_no, cntrl_glac_sl_no,
                 opening_dt, opening_bal, current_bal,
                 opening_bal + current_bal, SYSDATE, i_usr, i_dt, u_usr,
                 u_dt, opening_bal_con, current_bal_con,
                 NVL (opening_bal_con, 0) + current_bal_con, opening_bal_tak,
                 current_bal_tak, NVL (opening_bal_tak, 0) + current_bal_tak,
                 p_quarter
            FROM acc_gl_coa_mst m
           WHERE office_cd = NVL (p_office_cd, office_cd)
             AND TO_CHAR (m.opening_dt, 'RRRR') = p_fiscal_yr);
   EXCEPTION
      WHEN OTHERS
      THEN
         ROLLBACK;
         p_output :=
               'Chart of Accounts Transfer Process Not Completed Due to: '
            || SQLERRM;
   END;

   PROCEDURE pro_gl_leadger_close (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   )
   IS
      CURSOR cur_voucher
      IS
         SELECT vouch_no, office_cd
           FROM acc_gl_trans_mst m
          WHERE TRUNC (m.vouch_dt) BETWEEN p_st_date AND p_end_date
            AND office_cd = NVL (p_office_cd, office_cd)
            AND NOT EXISTS (
                       SELECT 1
                         FROM acc_gl_trans_mst_hist
                        WHERE vouch_no = m.vouch_no
                              AND office_cd = m.office_cd);

      CURSOR cur_del_voucher
      IS
         SELECT vouch_no, office_cd
           FROM acc_gl_trans_mst m
          WHERE TRUNC (m.vouch_dt) BETWEEN p_st_date AND p_end_date
            AND office_cd = NVL (p_office_cd, office_cd);

      rec_cur_voucher       cur_voucher%ROWTYPE;
      v_rec_count           NUMBER (3)                := 0;
      v_count               NUMBER (10)               := 0;
      v_count_mst           NUMBER (10)               := 0;
      v_count_mst_hist      NUMBER (10)               := 0;
      v_count_dtl           NUMBER (10)               := 0;
      v_count_dtl_hist      NUMBER (10)               := 0;
      rec_cur_del_voucher   cur_del_voucher%ROWTYPE;
   BEGIN
      OPEN cur_voucher;

      LOOP
         FETCH cur_voucher
          INTO rec_cur_voucher;

         EXIT WHEN cur_voucher%NOTFOUND;

         INSERT INTO acc_gl_trans_mst_hist
                     (office_cd, vouch_no, vouch_dt, vouch_cd, status,
                      bank_recon_st, source_vouch_no, cost_center, object_cd,
                      trans_id, narration, i_usr, i_dt, u_usr, u_dt,
                      ins_tp_cd, old_cost_center, cost_center_vr_no,
                      ledger_st, payable_st)
            (SELECT office_cd, vouch_no, vouch_dt, vouch_cd, status,
                    bank_recon_st, source_vouch_no, cost_center, object_cd,
                    trans_id, narration, i_usr, i_dt, u_usr, u_dt, ins_tp_cd,
                    old_cost_center, cost_center_vr_no, ledger_st,
                    payable_st
               FROM acc_gl_trans_mst m
              WHERE vouch_no = rec_cur_voucher.vouch_no
                AND office_cd = rec_cur_voucher.office_cd);

         INSERT INTO acc_gl_trans_dtl_hist
                     (office_cd, vouch_no, sl_no, glac_sl_no, dr_cr,
                      trans_amt, chq_tp, chq_no, chq_dt, i_usr, i_dt, u_usr,
                      u_dt)
            (SELECT office_cd, vouch_no, sl_no, glac_sl_no, dr_cr, trans_amt,
                    chq_tp, chq_no, chq_dt, i_usr, i_dt, u_usr, u_dt
               FROM acc_gl_trans_dtl d
              WHERE vouch_no = rec_cur_voucher.vouch_no
                AND office_cd = rec_cur_voucher.office_cd);

         IF v_rec_count = 100
         THEN
            COMMIT;
            v_rec_count := 0;
         ELSE
            v_rec_count := v_rec_count + 1;
         END IF;
      END LOOP;

      CLOSE cur_voucher;

      COMMIT;
      --Start: Delete statement from voucher information
      v_rec_count := 0;

      SELECT COUNT (1)
        INTO v_count_mst
        FROM acc_gl_trans_mst m
       WHERE TRUNC (m.vouch_dt) BETWEEN p_st_date AND p_end_date
         AND office_cd = NVL (p_office_cd, office_cd);

      SELECT COUNT (1)
        INTO v_count_mst_hist
        FROM acc_gl_trans_mst_hist m
       WHERE TRUNC (m.vouch_dt) BETWEEN p_st_date AND p_end_date
         AND office_cd = NVL (p_office_cd, office_cd);

      SELECT COUNT (1)
        INTO v_count_dtl
        FROM acc_gl_trans_mst m, acc_gl_trans_dtl d
       WHERE TRUNC (m.vouch_dt) BETWEEN p_st_date AND p_end_date
         AND m.office_cd = NVL (p_office_cd, m.office_cd)
         AND m.office_cd = d.office_cd
         AND m.vouch_no = d.vouch_no;

      SELECT COUNT (1)
        INTO v_count_dtl_hist
        FROM acc_gl_trans_mst_hist m, acc_gl_trans_dtl_hist d
       WHERE TRUNC (m.vouch_dt) BETWEEN p_st_date AND p_end_date
         AND m.office_cd = NVL (p_office_cd, m.office_cd)
         AND m.office_cd = d.office_cd
         AND m.vouch_no = d.vouch_no;

      IF v_count_mst = v_count_mst_hist AND v_count_dtl = v_count_dtl_hist
      THEN
         OPEN cur_del_voucher;

         LOOP
            FETCH cur_del_voucher
             INTO rec_cur_del_voucher;

            EXIT WHEN cur_del_voucher%NOTFOUND;

            DELETE FROM acc_gl_trans_dtl
                  WHERE vouch_no = rec_cur_del_voucher.vouch_no
                    AND office_cd = rec_cur_del_voucher.office_cd;

            DELETE FROM acc_gl_trans_mst
                  WHERE vouch_no = rec_cur_del_voucher.vouch_no
                    AND office_cd = rec_cur_del_voucher.office_cd;

            IF v_rec_count = 100
            THEN
               COMMIT;
               v_rec_count := 0;
            ELSE
               v_rec_count := v_rec_count + 1;
            END IF;
         END LOOP;

         CLOSE cur_del_voucher;

         COMMIT;
      ELSE
         IF v_count_mst <> v_count_mst_hist
         THEN
            p_output := 'All Master voucher is not transfered to history.';
         ELSIF v_count_dtl <> v_count_dtl_hist
         THEN
            p_output := 'All Detail voucher is not transfered to history.';
         ELSE
            SELECT COUNT (1)
              INTO v_count
              FROM acc_gl_trans_mst m
             WHERE TRUNC (m.vouch_dt) BETWEEN p_st_date AND p_end_date
               AND office_cd = NVL (p_office_cd, office_cd);

            IF v_count = 0
            THEN
               p_output := NULL;
            ELSE
               p_output :=
                          'More Voucher are available in Voucher repository.';
            END IF;
         END IF;
      END IF;
   --END: Delete statement from voucher information
   END;

   PROCEDURE pro_fiscle_year_close (
      p_st_date          DATE,
      p_end_date         DATE,
      p_user             VARCHAR2,
      p_output     OUT   VARCHAR2
   )
   IS
   BEGIN
      UPDATE acc_fiscal_year
         SET status = 0,
             year_end_pro_st = '1',
             u_usr = p_user,
             u_dt = SYSDATE
       WHERE fy_st_dt = p_st_date AND fy_ed_dt = p_end_date;

      p_output := NULL;
   --COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         ROLLBACK;
         p_output := 'Unable to close the year due to: ' || SQLERRM;
   END;

   PROCEDURE pro_open_new_fiscle_year (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   )
   IS
      v_output     VARCHAR2 (200) := NULL;
      v_count_gl   NUMBER (1)     := 0;
      v_st_date    DATE;
      v_end_date   DATE;
   BEGIN
      DECLARE
         v_count   NUMBER (1) := 0;
      BEGIN
         SELECT COUNT (1)
           INTO v_count
           FROM acc_fiscal_year
          WHERE fy_st_dt = p_st_date AND fy_ed_dt = fy_ed_dt;

         IF v_count = 0
         THEN
            INSERT INTO acc_fiscal_year
                        (fy_st_dt, fy_ed_dt, status, i_usr, i_dt, fyc,
                         fy_close, year_end_pro_st
                        )
                 VALUES (p_st_date, p_end_date, '1', p_user, SYSDATE, '2',
                         '0', '0'
                        );
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_output := SQLERRM;
      END;

      IF v_output IS NULL
      THEN
         UPDATE acc_gl_coa_mst
            SET opening_dt = p_st_date,
                opening_bal = 0,
                opening_bal_con = 0,
                opening_bal_tak = 0,
                current_bal = 0,
                closing_bal = 0,
                current_bal_con = 0,
                closing_bal_con = 0,
                current_bal_tak = 0,
                closing_bal_tak = 0,
                u_usr = p_user,
                u_dt = SYSDATE
          WHERE office_cd = NVL (p_office_cd, office_cd);

         FOR i IN (SELECT h.glac_sl_no,
                            NVL (opening_bal, 0)
                          + NVL (current_bal, 0) opening_bal,
                            NVL (opening_bal_con, 0)
                          + NVL (current_bal_con, 0) opening_bal_con,
                            NVL (opening_bal_tak, 0)
                          + NVL (current_bal_tak, 0) opening_bal_tak
                     FROM acc_gl_coa_mst_hist h, acc_gl_coa c
                    WHERE bal_year = TO_CHAR (p_st_date, 'RRRR') - 1
                      AND quarter = '4'
                      AND h.glac_sl_no = c.glac_sl_no
                      AND c.glac_type IN ('A', 'L'))
         LOOP
            SELECT COUNT (1)
              INTO v_count_gl
              FROM acc_gl_coa_mst
             WHERE office_cd = NVL (p_office_cd, office_cd)
               AND glac_sl_no = i.glac_sl_no;

            IF v_count_gl > 0
            THEN
               UPDATE acc_gl_coa_mst
                  SET opening_bal = i.opening_bal,
                      opening_bal_con = i.opening_bal_con,
                      opening_bal_tak = i.opening_bal_tak
                WHERE office_cd = NVL (p_office_cd, office_cd)
                  AND glac_sl_no = i.glac_sl_no;
            ELSE
               INSERT INTO acc_gl_coa_mst
                           (office_cd, glac_sl_no, cntrl_glac_sl_no,
                            opening_dt, opening_bal, current_bal,
                            closing_bal, closing_dt, i_usr, i_dt, u_usr,
                            u_dt, opening_bal_con, closing_bal_con,
                            opening_bal_tak, closing_bal_tak,
                            current_bal_con, current_bal_tak)
                  SELECT p_office_cd, glac_sl_no, cntrl_glac_sl_no,
                         p_st_date, i.opening_bal, 0, 0, NULL, i_usr, i_dt,
                         u_usr, u_dt, i.opening_bal_con, 0,
                         i.opening_bal_tak, 0, 0, 0
                    FROM acc_gl_coa
                   WHERE glac_sl_no = i.glac_sl_no;
            END IF;
         END LOOP;

         v_st_date :=
            TO_DATE (   TO_CHAR (p_st_date, 'DD-MON')
                     || TO_CHAR (TO_NUMBER (TO_CHAR (p_st_date, 'RRRR')) - 1)
                    );
         v_end_date :=
            TO_DATE (   TO_CHAR (p_end_date, 'DD-MON')
                     || TO_CHAR (TO_NUMBER (TO_CHAR (p_end_date, 'RRRR')) - 1)
                    );

         INSERT INTO acc_opening_balance
                     (office_cd, ins_tp_cd, glac_sl_no, opening_bal_dt, dr_cr,
                      trans_amt, i_usr, i_dt)
            (SELECT office_cd, ins_tp_cd, glac_sl_no, p_st_date,
                    CASE
                       WHEN balance > 0
                          THEN 'D'
                       ELSE 'C'
                    END dr_cr, ABS (balance) balance, p_user, TRUNC (SYSDATE)
               FROM (SELECT   m.cost_center office_cd, m.ins_tp_cd,
                              m.glac_sl_no, SUM (debit)
                                            - SUM (credit) balance
                         FROM (SELECT   b.cost_center, b.ins_tp_cd,
                                        a.glac_sl_no,
                                        SUM (DECODE (a.dr_cr,
                                                     'D', a.trans_amt,
                                                     0
                                                    )
                                            ) debit,
                                        SUM (DECODE (a.dr_cr,
                                                     'C', a.trans_amt,
                                                     0
                                                    )
                                            ) credit
                                   FROM acc_gl_trans_dtl a,
                                        acc_gl_trans_mst b,
                                        acc_gl_coa c
                                  WHERE a.office_cd = b.office_cd
                                    AND a.vouch_no = b.vouch_no
                                    AND TRUNC (b.vouch_dt) BETWEEN v_st_date
                                                               AND v_end_date
                                    AND b.office_cd = p_office_cd
                                    AND NVL (b.ledger_st, '1') = '1'
                                    AND NVL (b.payable_st, '0') = '0'
                                    AND NVL (b.adjustment_st, '0') = '0'
                                    AND a.glac_sl_no = c.glac_sl_no
                                    AND c.glac_type IN ('A', 'L')
                               GROUP BY b.cost_center,
                                        b.ins_tp_cd,
                                        a.glac_sl_no
                               UNION ALL
                               SELECT   b.cost_center, b.ins_tp_cd,
                                        a.glac_sl_no,
                                        SUM (DECODE (a.dr_cr,
                                                     'D', a.trans_amt,
                                                     0
                                                    )
                                            ) debit,
                                        SUM (DECODE (a.dr_cr,
                                                     'C', a.trans_amt,
                                                     0
                                                    )
                                            ) credit
                                   FROM acc_gl_trans_dtl a,
                                        acc_gl_trans_mst b,
                                        acc_gl_coa c
                                  WHERE a.office_cd = b.office_cd
                                    AND a.vouch_no = b.vouch_no
                                    AND TRUNC (b.vouch_dt) BETWEEN v_st_date
                                                               AND v_end_date
                                    AND b.office_cd = p_office_cd
                                    AND NVL (b.ledger_st, '1') = '1'
                                    AND NVL (b.payable_st, '0') = '1'
                                    AND a.glac_sl_no = c.glac_sl_no
                                    AND c.glac_type IN ('A', 'L')
                               GROUP BY b.cost_center,
                                        b.ins_tp_cd,
                                        a.glac_sl_no
                               UNION ALL
                               SELECT   b.cost_center, b.ins_tp_cd,
                                        a.glac_sl_no,
                                        SUM (DECODE (a.dr_cr,
                                                     'D', a.trans_amt,
                                                     0
                                                    )
                                            ) debit,
                                        SUM (DECODE (a.dr_cr,
                                                     'C', a.trans_amt,
                                                     0
                                                    )
                                            ) credit
                                   FROM acc_gl_trans_dtl a,
                                        acc_gl_trans_mst b,
                                        acc_gl_coa c
                                  WHERE a.office_cd = b.office_cd
                                    AND a.vouch_no = b.vouch_no
                                    AND TRUNC (b.vouch_dt) BETWEEN v_st_date
                                                               AND v_end_date
                                    AND b.office_cd = p_office_cd
                                    AND NVL (b.ledger_st, '1') = '1'
                                    AND NVL (b.payable_st, '0') = '0'
                                    AND NVL (b.adjustment_st, '0') = '1'
                                    AND a.glac_sl_no = c.glac_sl_no
                                    AND c.glac_type IN ('A', 'L')
                               GROUP BY b.cost_center,
                                        b.ins_tp_cd,
                                        a.glac_sl_no
                               UNION ALL
                               SELECT   office_cd cost_center, ins_tp_cd,
                                        glac_sl_no,
                                        SUM (DECODE (dr_cr,
                                                     'D', trans_amt,
                                                     0
                                                    )
                                            ) debit,
                                        SUM (DECODE (dr_cr,
                                                     'C', trans_amt,
                                                     0
                                                    )
                                            ) credit
                                   FROM acc_opening_balance
                                  WHERE opening_bal_dt = v_st_date
                               GROUP BY office_cd, glac_sl_no, ins_tp_cd) m,
                              acc_gl_coa c,
                              hrm_office h
                        WHERE m.glac_sl_no = c.glac_sl_no
                          AND m.cost_center = h.office_cd
                     GROUP BY m.cost_center, m.ins_tp_cd, m.glac_sl_no));
      ELSE
         --ROLLBACK;
         p_output :=
                   'Unable to open the new Fiscale Year due to: ' || v_output;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         --ROLLBACK;
         p_output :=
                    'Unable to open the new Fiscale Year due to: ' || SQLERRM;
   END;

   PROCEDURE pro_accounts_bal_sheet (
      p_st_date           DATE,
      p_end_date          DATE,
      p_quarter           NUMBER,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_fiscal_yr         VARCHAR2,
      p_output      OUT   VARCHAR2
   )
   AS
      err_unable_to_update   EXCEPTION;
      v_count                NUMBER (4) := 0;
      v_year_end_pro_st      CHAR (1)   := '0';
   BEGIN
      SELECT year_end_pro_st
        INTO v_year_end_pro_st
        FROM acc_fiscal_year
       WHERE TO_CHAR (fy_ed_dt, 'RRRR') = p_fiscal_yr;

      UPDATE acc_gl_coa_mst
         SET current_bal = 0,
             current_bal_con = 0,
             current_bal_tak = 0,
             closing_bal = 0,
             closing_bal_con = 0,
             closing_bal_tak = 0,
             u_usr = p_user,
             u_dt = SYSDATE
       WHERE office_cd = p_office_cd;

      FOR i IN
         (SELECT   x.glac_sl_no, SUM (bal) balance, SUM (bal_con) balance_con,
                   SUM (bal_tak) balance_tak
              FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal,
                             SUM (debit_con) - SUM (credit_con) bal_con,
                             SUM (debit_tak) - SUM (credit_tak) bal_tak
                        FROM (SELECT   NVL
                                          (d.divert_to_glac_sl_no,
                                           a.glac_sl_no
                                          ) glac_sl_no,
                                       SUM (DECODE (a.dr_cr,
                                                    'D', a.trans_amt,
                                                    0
                                                   )
                                           ) debit,
                                       SUM (DECODE (a.dr_cr,
                                                    'C', a.trans_amt,
                                                    0
                                                   )
                                           ) credit,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'D', DECODE (ins_tp_cd,
                                                                '1', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) debit_con,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'C', DECODE (ins_tp_cd,
                                                                '1', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) credit_con,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'D', DECODE (ins_tp_cd,
                                                                '2', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) debit_tak,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'C', DECODE (ins_tp_cd,
                                                                '2', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) credit_tak
                                  FROM acc_gl_trans_dtl a,
                                       acc_gl_trans_mst b,
                                       acc_cash_book_divert d
                                 WHERE a.office_cd = b.office_cd
                                   AND a.vouch_no = b.vouch_no
                                   AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                              AND p_end_date
                                   AND b.office_cd = p_office_cd
                                   AND NVL (b.ledger_st, '1') = '1'
                                   AND NVL (b.payable_st, '0') = '0'
                                   AND a.glac_sl_no = d.glac_sl_no(+)
                                   AND NVL (b.adjustment_st, '0') = '0'
                              GROUP BY a.glac_sl_no, d.divert_to_glac_sl_no
                              UNION ALL
                              SELECT   a.glac_sl_no,
                                       SUM (DECODE (a.dr_cr,
                                                    'D', a.trans_amt,
                                                    0
                                                   )
                                           ) debit,
                                       SUM (DECODE (a.dr_cr,
                                                    'C', a.trans_amt,
                                                    0
                                                   )
                                           ) credit,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'D', DECODE (ins_tp_cd,
                                                                '1', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) debit_con,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'C', DECODE (ins_tp_cd,
                                                                '1', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) credit_con,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'D', DECODE (ins_tp_cd,
                                                                '2', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) debit_tak,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'C', DECODE (ins_tp_cd,
                                                                '2', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) credit_tak
                                  FROM acc_gl_trans_dtl a, acc_gl_trans_mst b
                                 WHERE a.office_cd = b.office_cd
                                   AND a.vouch_no = b.vouch_no
                                   AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                              AND p_end_date
                                   AND b.office_cd = p_office_cd
                                   AND NVL (b.ledger_st, '1') = '1'
                                   AND NVL (b.payable_st, '0') = '0'
                                   AND NVL (b.adjustment_st, '0') = '1'
                              GROUP BY a.glac_sl_no
                              UNION ALL
                              SELECT   a.glac_sl_no,
                                       SUM (DECODE (a.dr_cr,
                                                    'D', a.trans_amt,
                                                    0
                                                   )
                                           ) debit,
                                       SUM (DECODE (a.dr_cr,
                                                    'C', a.trans_amt,
                                                    0
                                                   )
                                           ) credit,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'D', DECODE (ins_tp_cd,
                                                                '1', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) debit_con,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'C', DECODE (ins_tp_cd,
                                                                '1', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) credit_con,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'D', DECODE (ins_tp_cd,
                                                                '2', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) debit_tak,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'C', DECODE (ins_tp_cd,
                                                                '2', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) credit_tak
                                  FROM acc_gl_trans_dtl a, acc_gl_trans_mst b
                                 WHERE a.office_cd = b.office_cd
                                   AND a.vouch_no = b.vouch_no
                                   AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                              AND p_end_date
                                   AND b.office_cd = p_office_cd
                                   AND NVL (b.ledger_st, '1') = '1'
                                   AND NVL (b.payable_st, '0') = '1'
                              GROUP BY a.glac_sl_no) u
                    GROUP BY glac_sl_no) x,
                   acc_gl_coa c
             WHERE x.glac_sl_no = c.glac_sl_no
          GROUP BY x.glac_sl_no)
      LOOP
         BEGIN
            IF v_year_end_pro_st = '0'
            --p_fiscal_yr = TO_CHAR (SYSDATE, 'RRRR')
            THEN
               FOR j IN (SELECT     c.glac_sl_no, c.account_type, c.postable,
                                    cntrl_glac_sl_no
                               FROM acc_gl_coa c
                         START WITH c.glac_sl_no = i.glac_sl_no
                         CONNECT BY PRIOR c.cntrl_glac_sl_no = c.glac_sl_no)
               LOOP
                  SELECT COUNT (1)
                    INTO v_count
                    FROM acc_gl_coa_mst
                   WHERE glac_sl_no = j.glac_sl_no AND office_cd = p_office_cd;

                  IF v_count = 0
                  THEN
                     INSERT INTO acc_gl_coa_mst
                                 (office_cd, glac_sl_no,
                                  cntrl_glac_sl_no, opening_dt, opening_bal,
                                  current_bal, closing_bal, closing_dt,
                                  i_usr, i_dt, opening_bal_con,
                                  closing_bal_con, opening_bal_tak,
                                  closing_bal_tak, current_bal_con,
                                  current_bal_tak
                                 )
                          VALUES (p_office_cd, j.glac_sl_no,
                                  j.cntrl_glac_sl_no, p_st_date, 0,
                                  i.balance, 0, NULL,
                                  p_user, SYSDATE, 0,
                                  0, 0,
                                  0, i.balance_con,
                                  i.balance_tak
                                 );
                  ELSE
                     IF j.postable = 'P'
                     THEN
                        UPDATE acc_gl_coa_mst
                           SET current_bal = i.balance,
                               current_bal_con = i.balance_con,
                               current_bal_tak = i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no;
                     ELSE
                        /*This is skipped in 23/10/2019 by Md. Sayadur Rahaman. No need to update the controlling head in acc_gl_coa_mst.
                        if needed it will be update on  acc_gl_coa_mst_hist*/

                        /*UPDATE acc_gl_coa_mst
                           SET current_bal = NVL (current_bal, 0) + i.balance,
                               current_bal_con =
                                       NVL (current_bal_con, 0)
                                       + i.balance_con,
                               current_bal_tak =
                                       NVL (current_bal_tak, 0)
                                       + i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no;*/
                        NULL;
                     END IF;
                  END IF;
               END LOOP;
            ELSE
               FOR j IN (SELECT     c.glac_sl_no, c.account_type, c.postable,
                                    cntrl_glac_sl_no
                               FROM acc_gl_coa c
                         START WITH c.glac_sl_no = i.glac_sl_no
                         CONNECT BY PRIOR c.cntrl_glac_sl_no = c.glac_sl_no)
               LOOP
                  SELECT COUNT (1)
                    INTO v_count
                    FROM acc_gl_coa_mst_hist
                   WHERE glac_sl_no = j.glac_sl_no
                     AND office_cd = p_office_cd
                     AND bal_year = p_fiscal_yr
                     AND quarter = p_quarter;

                  IF v_count = 0
                  THEN
                     INSERT INTO acc_gl_coa_mst_hist
                                 (bal_year, office_cd, glac_sl_no,
                                  cntrl_glac_sl_no, opening_dt, opening_bal,
                                  current_bal, closing_bal, closing_dt,
                                  i_usr, i_dt, opening_bal_con,
                                  closing_bal_con, opening_bal_tak,
                                  closing_bal_tak, current_bal_con,
                                  current_bal_tak, quarter
                                 )
                          VALUES (p_fiscal_yr, p_office_cd, j.glac_sl_no,
                                  j.cntrl_glac_sl_no, p_st_date, 0,
                                  i.balance, 0, NULL,
                                  p_user, SYSDATE, 0,
                                  0, 0,
                                  0, i.balance_con,
                                  i.balance_tak, p_quarter
                                 );
                  ELSE
                     IF j.postable = 'P'
                     THEN
                        UPDATE acc_gl_coa_mst_hist
                           SET current_bal = i.balance,
                               current_bal_con = i.balance_con,
                               current_bal_tak = i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr
                           AND quarter = p_quarter;
                     ELSE
                        /*This is skipped in 23/10/2019 by Md. Sayadur Rahaman. No need to update the controlling head in acc_gl_coa_mst_hist.
                        it will be update at point of "Update Controlling head section"*/
                        /*UPDATE acc_gl_coa_mst_hist
                           SET current_bal = NVL (current_bal, 0) + i.balance,
                               current_bal_con =
                                       NVL (current_bal_con, 0)
                                       + i.balance_con,
                               current_bal_tak =
                                       NVL (current_bal_tak, 0)
                                       + i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr
                           AND quarter = p_quarter;*/
                        NULL;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               RAISE err_unable_to_update;
               EXIT;
         END;
      END LOOP;

      IF v_year_end_pro_st = '0'
      --p_fiscal_yr = TO_CHAR (SYSDATE, 'RRRR')
      THEN
         /*INSERT INTO acc_gl_coa_mst_hist
                     (bal_year, office_cd, glac_sl_no, cntrl_glac_sl_no,
                      opening_dt, opening_bal, current_bal, closing_bal,
                      closing_dt, i_usr, i_dt, opening_bal_con,
                      closing_bal_con, opening_bal_tak, closing_bal_tak,
                      current_bal_con, current_bal_tak, quarter)
            (SELECT p_fiscal_yr, p_office_cd, m.glac_sl_no,
                    m.cntrl_glac_sl_no, p_st_date, m.opening_bal,
                    m.current_bal, 0, p_end_date, p_user, SYSDATE,
                    m.opening_bal_con, 0, m.opening_bal_tak, 0,
                    m.current_bal_con, m.current_bal_tak, p_quarter
               FROM acc_gl_coa_mst m
              WHERE m.office_cd = p_office_cd);*/
         BEGIN
            FOR j IN
               (SELECT p_fiscal_yr, p_office_cd, m.glac_sl_no,
                       m.cntrl_glac_sl_no, p_st_date,
                       pkg_gl_year_closing.fun_opening_bal
                                                    (p_fiscal_yr,
                                                     p_quarter,
                                                     p_office_cd,
                                                     m.glac_sl_no
                                                    ) opening_bal,
                       m.current_bal, p_end_date, p_user, SYSDATE,
                       pkg_gl_year_closing.fun_opening_bal_con
                                                (p_fiscal_yr,
                                                 p_quarter,
                                                 p_office_cd,
                                                 m.glac_sl_no
                                                ) opening_bal_con,
                       0,
                       pkg_gl_year_closing.fun_opening_bal_tak
                                                (p_fiscal_yr,
                                                 p_quarter,
                                                 p_office_cd,
                                                 m.glac_sl_no
                                                ) opening_bal_tak,
                       m.current_bal_con, m.current_bal_tak, p_quarter
                  FROM acc_gl_coa_mst m
                 WHERE m.office_cd = p_office_cd)
            LOOP
               INSERT INTO acc_gl_coa_mst_hist
                           (bal_year, office_cd, glac_sl_no,
                            cntrl_glac_sl_no, opening_dt, opening_bal,
                            current_bal, closing_bal, closing_dt, i_usr,
                            i_dt, opening_bal_con, closing_bal_con,
                            opening_bal_tak, closing_bal_tak,
                            current_bal_con, current_bal_tak, quarter
                           )
                    VALUES (j.p_fiscal_yr, j.p_office_cd, j.glac_sl_no,
                            j.cntrl_glac_sl_no, j.p_st_date, j.opening_bal,
                            j.current_bal, 0, j.p_end_date, j.p_user,
                            SYSDATE, j.opening_bal_con, 0,
                            j.opening_bal_tak, 0,
                            j.current_bal_con, j.current_bal_tak, j.p_quarter
                           );
            END LOOP;
         END;
      END IF;

---Update Controlling head section"* in this section controlling head will be update of acc_gl_coa_mst_hist.Need to write the code
      BEGIN
         FOR i IN (SELECT x.glac_sl_no, opening_bal, current_bal,
                          closing_bal, opening_bal_con, current_bal_con,
                          closing_bal_con, opening_bal_tak, current_bal_tak,
                          closing_bal_tak
                     FROM acc_gl_coa_mst_hist x, acc_gl_coa c
                    WHERE x.office_cd = p_office_cd
                      AND x.bal_year = p_fiscal_yr
                      AND x.quarter = p_quarter
                      AND x.glac_sl_no = c.glac_sl_no
                      AND c.postable = 'P')
         LOOP
            FOR j IN (SELECT     c.glac_sl_no, c.account_type, c.postable,
                                 cntrl_glac_sl_no
                            FROM acc_gl_coa c
                           WHERE lvl <> 1
                      START WITH c.glac_sl_no = i.glac_sl_no
                      CONNECT BY PRIOR c.cntrl_glac_sl_no = c.glac_sl_no)
            LOOP
               IF j.postable = 'P'
               THEN
                  NULL;
               ELSE
                  UPDATE acc_gl_coa_mst_hist
                     SET current_bal = NVL (current_bal, 0) + i.current_bal,
                         current_bal_con =
                                   NVL (current_bal_con, 0)
                                   + i.current_bal_con,
                         current_bal_tak =
                                   NVL (current_bal_tak, 0)
                                   + i.current_bal_tak,
                         u_usr = p_user,
                         u_dt = SYSDATE
                   WHERE office_cd = p_office_cd
                     AND glac_sl_no = j.glac_sl_no
                     AND bal_year = p_fiscal_yr
                     AND quarter = p_quarter;
               END IF;
            END LOOP;
         END LOOP;

         UPDATE acc_gl_coa_mst_hist
            SET closing_bal = opening_bal + current_bal,
                closing_bal_con = opening_bal_con + current_bal_con,
                closing_bal_tak = opening_bal_tak + current_bal_tak
          WHERE office_cd = p_office_cd
            AND bal_year = p_fiscal_yr
            AND quarter = p_quarter;
      END;

      --Closing Blance of life insurance preparation
      DECLARE
         v_closing_life_fund   NUMBER;
      BEGIN
         BEGIN
            SELECT   ABS (SUM (DECODE (glac_type,
                                       'I', NVL (balance, total),
                                       0
                                      )
                              )
                         )
                   - ABS (SUM (DECODE (glac_type,
                                       'E', NVL (balance, total),
                                       0
                                      )
                              )
                         )
              INTO v_closing_life_fund
              FROM (SELECT a.header_cd, a.header_desc, a.cntrl_header_cd,
                           a.serial_no, a.glac_type, a.glac_sl_no,
                           a.note_number,
                           CASE
                              WHEN a.glac_sl_no IS NOT NULL
                                 THEN NVL (b.amount, 0)
                              ELSE b.amount
                           END balance,
                           (SELECT SUM (balance)
                              FROM (SELECT a.header_cd, a.header_desc,
                                           a.cntrl_header_cd, a.serial_no,
                                           a.glac_type, a.glac_sl_no,
                                           CASE
                                              WHEN a.cntrl_header_cd =
                                                                 2191
                                                 THEN (b.op_amount)
                                              WHEN a.cntrl_header_cd =
                                                                 2253
                                                 THEN b.amount
                                                      * (-1)
                                              WHEN a.glac_sl_no IS NOT NULL
                                                 THEN b.amount
                                              ELSE b.amount
                                           END balance
                                      FROM (SELECT     header_cd, header_desc,
                                                       cntrl_header_cd,
                                                       balance, serial_no,
                                                       glac_type, glac_sl_no,
                                                       visible_status, lvl
                                                  FROM acc_gl_report_setup c
                                                 WHERE report_cd = '2'
                                            START WITH c.cntrl_header_cd IS NULL
                                            CONNECT BY PRIOR c.header_cd =
                                                             c.cntrl_header_cd) a,
                                           (SELECT h.glac_sl_no,
                                                   c.account_type,
                                                   closing_bal amount,
                                                   opening_bal op_amount
                                              FROM acc_gl_coa_mst_hist h,
                                                   acc_gl_coa c
                                             WHERE office_cd = p_office_cd
                                               AND bal_year = p_fiscal_yr
                                               AND h.glac_sl_no = c.glac_sl_no
                                               AND h.quarter = p_quarter) b
                                     WHERE a.glac_sl_no = b.glac_sl_no(+)) m
                             WHERE m.cntrl_header_cd = a.header_cd) total,
                           visible_status, lvl
                      FROM (SELECT     header_cd, header_desc,
                                       cntrl_header_cd, serial_no, glac_type,
                                       glac_sl_no, note_number,
                                       visible_status, lvl
                                  FROM acc_gl_report_setup c
                                 WHERE report_cd = '2'
                            START WITH c.cntrl_header_cd IS NULL
                            CONNECT BY PRIOR c.header_cd = c.cntrl_header_cd) a,
                           (SELECT h.glac_sl_no, c.account_type,
                                   closing_bal amount, opening_bal op_amount
                              FROM acc_gl_coa_mst_hist h, acc_gl_coa c
                             WHERE office_cd = p_office_cd
                               AND bal_year = p_fiscal_yr
                               AND h.glac_sl_no = c.glac_sl_no
                               AND h.quarter = p_quarter) b
                     WHERE a.glac_sl_no = b.glac_sl_no(+))
             WHERE visible_status = '1'
               AND cntrl_header_cd IS NOT NULL
               AND header_cd <> 2253;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_closing_life_fund := 0;
         END;

         UPDATE acc_gl_coa_mst_hist h
            SET closing_bal = v_closing_life_fund * (-1)
          WHERE office_cd = p_office_cd
            AND bal_year = p_fiscal_yr
            AND h.quarter = p_quarter
            AND h.glac_sl_no IN (
                              SELECT glac_sl_no
                                FROM acc_gl_report_setup c
                               WHERE report_cd = '2'
                                     AND cntrl_header_cd = 2253);
      END;
   EXCEPTION
      WHEN err_unable_to_update
      THEN
         p_output :=
               'Unable to update the office wise Chart of Accounts due to!'
            || SQLERRM;
      WHEN OTHERS
      THEN
         p_output := 'System Error!' || SQLERRM;
   END;

   PROCEDURE pro_accounts_bal_sheet_hist (
      p_st_date              DATE,
      p_end_date             DATE,
      p_quarter              NUMBER,
      p_office_cd            hrm_office.office_cd%TYPE,
      p_user                 VARCHAR2,
      p_fiscal_yr            VARCHAR2,
      p_process_type         CHAR,
--'1'=Refessh the historical balance Sheet,'2'=Re-Create the historical balance Sheet
      p_output         OUT   VARCHAR2
   )
   AS
      err_unable_to_update       EXCEPTION;
      err_leadger_close_output   EXCEPTION;
      v_count                    NUMBER (4)     := 0;
      v_year_end_pro_st          CHAR (1)       := '0';
      v_next_year_end_pro_st     CHAR (1)       := '0';
      v_next_fiscal_yr           VARCHAR2 (4)   := NULL;
      v_process_output           CHAR (1)       := '0';
      v_leadger_close_output     VARCHAR2 (200) := NULL;
   BEGIN
      SELECT year_end_pro_st
        INTO v_year_end_pro_st
        FROM acc_fiscal_year
       WHERE TO_CHAR (fy_ed_dt, 'RRRR') = p_fiscal_yr;

      v_next_fiscal_yr := p_fiscal_yr + 1;

      SELECT year_end_pro_st
        INTO v_next_year_end_pro_st
        FROM acc_fiscal_year
       WHERE TO_CHAR (fy_ed_dt, 'RRRR') = v_next_fiscal_yr;

      IF v_year_end_pro_st = '1'
      THEN
         IF p_process_type = '1'
         THEN                      --'1'=Refessh the historical balance Sheet
            FOR i IN
               (SELECT   x.glac_sl_no, SUM (bal) balance,
                         SUM (bal_con) balance_con, SUM (bal_tak)
                                                                 balance_tak
                    FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal,
                                   SUM (debit_con) - SUM (credit_con) bal_con,
                                   SUM (debit_tak) - SUM (credit_tak) bal_tak
                              FROM (SELECT   NVL
                                                (d.divert_to_glac_sl_no,
                                                 a.glac_sl_no
                                                ) glac_sl_no,
                                             SUM (DECODE (a.dr_cr,
                                                          'D', a.trans_amt,
                                                          0
                                                         )
                                                 ) debit,
                                             SUM (DECODE (a.dr_cr,
                                                          'C', a.trans_amt,
                                                          0
                                                         )
                                                 ) credit,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) debit_con,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) credit_con,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) debit_tak,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) credit_tak
                                        FROM acc_gl_trans_dtl a,
                                             acc_gl_trans_mst b,
                                             acc_cash_book_divert d
                                       WHERE a.office_cd = b.office_cd
                                         AND a.vouch_no = b.vouch_no
                                         AND TRUNC (b.vouch_dt)
                                                BETWEEN p_st_date
                                                    AND p_end_date
                                         AND b.office_cd = p_office_cd
                                         AND NVL (b.ledger_st, '1') = '1'
                                         AND NVL (b.payable_st, '0') = '0'
                                         AND a.glac_sl_no = d.glac_sl_no(+)
                                    GROUP BY a.glac_sl_no,
                                             d.divert_to_glac_sl_no
                                    UNION ALL
                                    SELECT   a.glac_sl_no,
                                             SUM (DECODE (a.dr_cr,
                                                          'D', a.trans_amt,
                                                          0
                                                         )
                                                 ) debit,
                                             SUM (DECODE (a.dr_cr,
                                                          'C', a.trans_amt,
                                                          0
                                                         )
                                                 ) credit,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) debit_con,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) credit_con,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) debit_tak,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) credit_tak
                                        FROM acc_gl_trans_dtl a,
                                             acc_gl_trans_mst b
                                       WHERE a.office_cd = b.office_cd
                                         AND a.vouch_no = b.vouch_no
                                         AND TRUNC (b.vouch_dt)
                                                BETWEEN p_st_date
                                                    AND p_end_date
                                         AND b.office_cd = p_office_cd
                                         AND NVL (b.ledger_st, '1') = '1'
                                         AND NVL (b.payable_st, '0') = '1'
                                    GROUP BY a.glac_sl_no) u
                          GROUP BY glac_sl_no) x,
                         acc_gl_coa c
                   WHERE x.glac_sl_no = c.glac_sl_no
                GROUP BY x.glac_sl_no)
            LOOP
               BEGIN
                  FOR j IN (SELECT     c.glac_sl_no, c.account_type,
                                       c.postable, cntrl_glac_sl_no
                                  FROM acc_gl_coa c
                            START WITH c.glac_sl_no = i.glac_sl_no
                            CONNECT BY PRIOR c.cntrl_glac_sl_no =
                                                                 c.glac_sl_no)
                  LOOP
                     SELECT COUNT (1)
                       INTO v_count
                       FROM acc_gl_coa_mst_hist
                      WHERE glac_sl_no = j.glac_sl_no
                        AND office_cd = p_office_cd
                        AND bal_year = p_fiscal_yr
                        AND quarter = p_quarter;

                     IF v_count = 0
                     THEN
                        INSERT INTO acc_gl_coa_mst_hist
                                    (bal_year, office_cd, glac_sl_no,
                                     cntrl_glac_sl_no, opening_dt,
                                     opening_bal, current_bal, closing_bal,
                                     closing_dt, i_usr, i_dt,
                                     opening_bal_con, closing_bal_con,
                                     opening_bal_tak, closing_bal_tak,
                                     current_bal_con, current_bal_tak,
                                     quarter
                                    )
                             VALUES (p_fiscal_yr, p_office_cd, j.glac_sl_no,
                                     j.cntrl_glac_sl_no, p_st_date,
                                     0, i.balance, 0,
                                     NULL, p_user, SYSDATE,
                                     0, 0,
                                     0, 0,
                                     i.balance_con, i.balance_tak,
                                     p_quarter
                                    );
                     ELSE
                        IF j.postable = 'P'
                        THEN
                           UPDATE acc_gl_coa_mst_hist
                              SET current_bal = i.balance,
                                  current_bal_con = i.balance_con,
                                  current_bal_tak = i.balance_tak,
                                  u_usr = p_user,
                                  u_dt = SYSDATE
                            WHERE office_cd = p_office_cd
                              AND glac_sl_no = j.glac_sl_no
                              AND bal_year = p_fiscal_yr
                              AND quarter = p_quarter;
                        ELSE
                           /*UPDATE acc_gl_coa_mst_hist
                              SET current_bal =
                                               NVL (current_bal, 0)
                                               + i.balance,
                                  current_bal_con =
                                       NVL (current_bal_con, 0)
                                       + i.balance_con,
                                  current_bal_tak =
                                       NVL (current_bal_tak, 0)
                                       + i.balance_tak,
                                  u_usr = p_user,
                                  u_dt = SYSDATE
                            WHERE office_cd = p_office_cd
                              AND glac_sl_no = j.glac_sl_no
                              AND bal_year = p_fiscal_yr
                              AND quarter = p_quarter;*/
                           NULL;
                        END IF;

                        /* Theis part is used to update the next year opening balance
                          Added by Md. Sayadur Rahaman on 18/05/2017*/
                        IF v_next_year_end_pro_st = '0'
                        THEN
                           UPDATE acc_gl_coa_mst
                              SET opening_bal = opening_bal + i.balance,
                                  opening_bal_con =
                                               opening_bal_con + i.balance_con,
                                  opening_bal_tak =
                                               opening_bal_tak + i.balance_tak,
                                  u_usr = p_user,
                                  u_dt = SYSDATE
                            WHERE office_cd = p_office_cd
                              AND glac_sl_no = j.glac_sl_no;
                        ELSE
                           UPDATE acc_gl_coa_mst_hist
                              SET opening_bal = opening_bal + i.balance,
                                  opening_bal_con =
                                               opening_bal_con + i.balance_con,
                                  opening_bal_tak =
                                               opening_bal_tak + i.balance_tak,
                                  u_usr = p_user,
                                  u_dt = SYSDATE
                            WHERE office_cd = p_office_cd
                              AND glac_sl_no = j.glac_sl_no
                              AND bal_year = v_next_fiscal_yr
                              AND quarter = p_quarter;
                        END IF;
                     /* END:Theis part is used to update the next year opening balance*/
                     END IF;
                  END LOOP;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_process_output := '1';                --Process Failed
                     RAISE err_unable_to_update;
                     EXIT;
               END;
            END LOOP;

            IF v_process_output = '0'
            THEN                                             --When not failed
               UPDATE acc_gl_coa_mst_hist
                  SET closing_bal = opening_bal + current_bal,
                      closing_bal_con = opening_bal_con + current_bal_con,
                      closing_bal_tak = opening_bal_tak + current_bal_tak,
                      u_usr = p_user,
                      u_dt = SYSDATE
                WHERE office_cd = p_office_cd
                  AND bal_year IN (p_fiscal_yr, v_next_fiscal_yr)
                  AND quarter = p_quarter;

               pkg_gl_year_closing.pro_gl_leadger_close
                                           (p_st_date        => p_st_date,
                                            p_end_date       => p_end_date,
                                            p_office_cd      => p_office_cd,
                                            p_user           => p_user,
                                            p_output         => v_leadger_close_output
                                           );

               IF v_leadger_close_output IS NOT NULL
               THEN
                  RAISE err_leadger_close_output;
               END IF;
            END IF;
         ELSIF p_process_type = '2'
         ---'2'=Re-Create the historical balance Sheet
         THEN
            UPDATE acc_gl_coa_mst_hist
               SET current_bal = 0,
                   current_bal_con = 0,
                   current_bal_tak = 0,
                   u_usr = p_user,
                   u_dt = SYSDATE
             WHERE office_cd = p_office_cd
               AND bal_year = p_fiscal_yr
               AND quarter = p_quarter;

            /*UPDATE acc_gl_coa_mst
               SET opening_bal = 0,
                   opening_bal_con = 0,
                   opening_bal_tak = 0,
                   u_usr = p_user,
                   u_dt = SYSDATE
             WHERE office_cd = p_office_cd AND v_next_year_end_pro_st = '0';*/
            UPDATE acc_gl_coa_mst
               SET current_bal = 0,
                   current_bal_con = 0,
                   current_bal_tak = 0,
                   closing_bal = 0,
                   closing_bal_con = 0,
                   closing_bal_tak = 0,
                   u_usr = p_user,
                   u_dt = SYSDATE
             WHERE office_cd = p_office_cd AND v_next_year_end_pro_st = '0';

            FOR i IN
               (SELECT   x.glac_sl_no, SUM (bal) balance,
                         SUM (bal_con) balance_con, SUM (bal_tak) balance_tak
                    FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal,
                                   SUM (debit_con) - SUM (credit_con) bal_con,
                                   SUM (debit_tak) - SUM (credit_tak) bal_tak
                              FROM (SELECT   NVL
                                                (d.divert_to_glac_sl_no,
                                                 a.glac_sl_no
                                                ) glac_sl_no,
                                             SUM (DECODE (a.dr_cr,
                                                          'D', a.trans_amt,
                                                          0
                                                         )
                                                 ) debit,
                                             SUM (DECODE (a.dr_cr,
                                                          'C', a.trans_amt,
                                                          0
                                                         )
                                                 ) credit,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) debit_con,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) credit_con,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) debit_tak,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) credit_tak
                                        FROM acc_gl_trans_dtl_hist a,
                                             acc_gl_trans_mst_hist b,
                                             acc_cash_book_divert d
                                       WHERE a.office_cd = b.office_cd
                                         AND a.vouch_no = b.vouch_no
                                         AND TRUNC (b.vouch_dt)
                                                BETWEEN p_st_date
                                                    AND p_end_date
                                         AND b.office_cd = p_office_cd
                                         AND NVL (b.ledger_st, '1') = '1'
                                         AND NVL (b.payable_st, '0') = '0'
                                         AND a.glac_sl_no = d.glac_sl_no(+)
                                    GROUP BY a.glac_sl_no,
                                             d.divert_to_glac_sl_no
                                    UNION ALL
                                    SELECT   a.glac_sl_no,
                                             SUM (DECODE (a.dr_cr,
                                                          'D', a.trans_amt,
                                                          0
                                                         )
                                                 ) debit,
                                             SUM (DECODE (a.dr_cr,
                                                          'C', a.trans_amt,
                                                          0
                                                         )
                                                 ) credit,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) debit_con,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) credit_con,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) debit_tak,
                                             SUM
                                                (DECODE (a.dr_cr,
                                                         'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                         0
                                                        )
                                                ) credit_tak
                                        FROM acc_gl_trans_dtl_hist a,
                                             acc_gl_trans_mst_hist b
                                       WHERE a.office_cd = b.office_cd
                                         AND a.vouch_no = b.vouch_no
                                         AND TRUNC (b.vouch_dt)
                                                BETWEEN p_st_date
                                                    AND p_end_date
                                         AND b.office_cd = p_office_cd
                                         AND NVL (b.ledger_st, '1') = '1'
                                         AND NVL (b.payable_st, '0') = '1'
                                    GROUP BY a.glac_sl_no) u
                          GROUP BY glac_sl_no) x,
                         acc_gl_coa c
                   WHERE x.glac_sl_no = c.glac_sl_no
                GROUP BY x.glac_sl_no)
            LOOP
               BEGIN
                  FOR j IN (SELECT     c.glac_sl_no, c.account_type,
                                       c.postable, cntrl_glac_sl_no
                                  FROM acc_gl_coa c
                            START WITH c.glac_sl_no = i.glac_sl_no
                            CONNECT BY PRIOR c.cntrl_glac_sl_no =
                                                                 c.glac_sl_no)
                  LOOP
                     SELECT COUNT (1)
                       INTO v_count
                       FROM acc_gl_coa_mst_hist
                      WHERE glac_sl_no = j.glac_sl_no
                        AND office_cd = p_office_cd
                        AND bal_year = p_fiscal_yr
                        AND quarter = p_quarter;

                     IF v_count = 0
                     THEN
                        INSERT INTO acc_gl_coa_mst_hist
                                    (bal_year, office_cd, glac_sl_no,
                                     cntrl_glac_sl_no, opening_dt,
                                     opening_bal, current_bal, closing_bal,
                                     closing_dt, i_usr, i_dt,
                                     opening_bal_con, closing_bal_con,
                                     opening_bal_tak, closing_bal_tak,
                                     current_bal_con, current_bal_tak,
                                     quarter
                                    )
                             VALUES (p_fiscal_yr, p_office_cd, j.glac_sl_no,
                                     j.cntrl_glac_sl_no, p_st_date,
                                     0, i.balance, 0,
                                     NULL, p_user, SYSDATE,
                                     0, 0,
                                     0, 0,
                                     i.balance_con, i.balance_tak,
                                     p_quarter
                                    );
                     ELSE
                        IF j.postable = 'P'
                        THEN
                           UPDATE acc_gl_coa_mst_hist
                              SET current_bal = i.balance,
                                  current_bal_con = i.balance_con,
                                  current_bal_tak = i.balance_tak,
                                  u_usr = p_user,
                                  u_dt = SYSDATE
                            WHERE office_cd = p_office_cd
                              AND glac_sl_no = j.glac_sl_no
                              AND bal_year = p_fiscal_yr
                              AND quarter = p_quarter;
                        ELSE
                           UPDATE acc_gl_coa_mst_hist
                              SET current_bal =
                                               NVL (current_bal, 0)
                                               + i.balance,
                                  current_bal_con =
                                       NVL (current_bal_con, 0)
                                       + i.balance_con,
                                  current_bal_tak =
                                       NVL (current_bal_tak, 0)
                                       + i.balance_tak,
                                  u_usr = p_user,
                                  u_dt = SYSDATE
                            WHERE office_cd = p_office_cd
                              AND glac_sl_no = j.glac_sl_no
                              AND bal_year = p_fiscal_yr
                              AND quarter = p_quarter;
                        END IF;

                        /* Theis part is used to update the next year opening balance
                          Added by Md. Sayadur Rahaman on 18/05/2017*/
                        IF v_next_year_end_pro_st = '0'
                        THEN
                           UPDATE acc_gl_coa_mst
                              SET opening_bal = opening_bal + i.balance,
                                  opening_bal_con =
                                               opening_bal_con + i.balance_con,
                                  opening_bal_tak =
                                               opening_bal_tak + i.balance_tak,
                                  u_usr = p_user,
                                  u_dt = SYSDATE
                            WHERE office_cd = p_office_cd
                              AND glac_sl_no = j.glac_sl_no;
                        ELSE
                           UPDATE acc_gl_coa_mst_hist
                              SET opening_bal = opening_bal + i.balance,
                                  opening_bal_con =
                                               opening_bal_con + i.balance_con,
                                  opening_bal_tak =
                                               opening_bal_tak + i.balance_tak,
                                  u_usr = p_user,
                                  u_dt = SYSDATE
                            WHERE office_cd = p_office_cd
                              AND glac_sl_no = j.glac_sl_no
                              AND bal_year = v_next_fiscal_yr
                              AND quarter = p_quarter;
                        END IF;
                     /* END:Theis part is used to update the next year opening balance*/
                     END IF;
                  END LOOP;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_process_output := '1';
                     RAISE err_unable_to_update;
                     EXIT;
               END;
            END LOOP;

            IF v_process_output = '0'
            THEN
               UPDATE acc_gl_coa_mst_hist
                  SET closing_bal = opening_bal + current_bal,
                      closing_bal_con = opening_bal_con + current_bal_con,
                      closing_bal_tak = opening_bal_tak + current_bal_tak,
                      u_usr = p_user,
                      u_dt = SYSDATE
                WHERE office_cd = p_office_cd
                  AND bal_year IN (p_fiscal_yr, v_next_fiscal_yr)
                  AND quarter = p_quarter;
            END IF;
         END IF;
      ELSE
         p_output :=
            'This is only applicable for "Closed Year". So Execute the "Year End Process" First.';
      END IF;
   EXCEPTION
      WHEN err_unable_to_update
      THEN
         p_output :=
               'Unable to update the office wise Chart of Accounts due to!'
            || SQLERRM;
      WHEN err_leadger_close_output
      THEN
         p_output :=
               'Process Not Successfully Complated due to !'
            || v_leadger_close_output;
   END;

   PROCEDURE pro_cost_center_bal_sheet (
      p_st_date           DATE,
      p_end_date          DATE,
      p_quarter           NUMBER,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_fiscal_yr         VARCHAR2,
      p_output      OUT   VARCHAR2
   )
   AS
      err_unable_to_update   EXCEPTION;
      v_count                NUMBER (4) := 0;
      v_year_end_pro_st      CHAR (1)   := '0';
   BEGIN
      SELECT year_end_pro_st
        INTO v_year_end_pro_st
        FROM acc_fiscal_year
       WHERE TO_CHAR (fy_ed_dt, 'RRRR') = p_fiscal_yr;

      IF v_year_end_pro_st = '0'
      THEN
         FOR i IN
            (SELECT   p_office_cd office_cd, x.glac_sl_no, SUM (bal) balance,
                      SUM (bal_con) balance_con, SUM (bal_tak) balance_tak
                 FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal,
                                SUM (debit_con) - SUM (credit_con) bal_con,
                                SUM (debit_tak) - SUM (credit_tak) bal_tak
                           FROM (SELECT   NVL
                                             (d.divert_to_glac_sl_no,
                                              a.glac_sl_no
                                             ) glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_tak,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_tak
                                     FROM acc_gl_trans_dtl a,
                                          acc_gl_trans_mst b,
                                          acc_cash_book_divert d
                                    WHERE a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                                 AND p_end_date
                                      AND b.cost_center IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                             START WITH office_cd =
                                                                   p_office_cd)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '0'
                                      AND a.glac_sl_no = d.glac_sl_no(+)
                                 GROUP BY a.glac_sl_no,
                                          d.divert_to_glac_sl_no
                                 UNION ALL
                                 SELECT   a.glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_tak,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_tak
                                     FROM acc_gl_trans_dtl a,
                                          acc_gl_trans_mst b
                                    WHERE a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                                 AND p_end_date
                                      AND b.cost_center IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                             START WITH office_cd =
                                                                   p_office_cd)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '1'
                                 GROUP BY a.glac_sl_no) u
                       GROUP BY glac_sl_no) x,
                      acc_gl_coa c
                WHERE x.glac_sl_no = c.glac_sl_no
             GROUP BY p_office_cd, x.glac_sl_no)
         LOOP
            BEGIN
               FOR j IN (SELECT     c.glac_sl_no, c.account_type, c.postable,
                                    cntrl_glac_sl_no
                               FROM acc_gl_coa c
                         START WITH c.glac_sl_no = i.glac_sl_no
                         CONNECT BY PRIOR c.cntrl_glac_sl_no = c.glac_sl_no)
               LOOP
                  SELECT COUNT (1)
                    INTO v_count
                    FROM acc_gl_cost_bal_sheet
                   WHERE glac_sl_no = j.glac_sl_no
                     AND office_cd = p_office_cd
                     AND bal_year = p_fiscal_yr;

                  IF v_count = 0
                  THEN
                     INSERT INTO acc_gl_cost_bal_sheet
                                 (bal_year, office_cd, glac_sl_no,
                                  cntrl_glac_sl_no, opening_dt, opening_bal,
                                  current_bal, closing_bal, closing_dt,
                                  i_usr, i_dt, opening_bal_con,
                                  closing_bal_con, opening_bal_tak,
                                  closing_bal_tak, current_bal_con,
                                  current_bal_tak
                                 )
                          VALUES (p_fiscal_yr, p_office_cd, j.glac_sl_no,
                                  j.cntrl_glac_sl_no, p_st_date, 0,
                                  i.balance, 0, NULL,
                                  p_user, SYSDATE, 0,
                                  0, 0,
                                  0, i.balance_con,
                                  i.balance_tak
                                 );
                  ELSE
                     IF j.postable = 'P'
                     THEN
                        UPDATE acc_gl_cost_bal_sheet
                           SET current_bal = i.balance,
                               current_bal_con = i.balance_con,
                               current_bal_tak = i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr;
                     ELSE
                        UPDATE acc_gl_cost_bal_sheet
                           SET current_bal = current_bal + i.balance,
                               current_bal_con =
                                               current_bal_con + i.balance_con,
                               current_bal_tak =
                                               current_bal_tak + i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr;
                     END IF;
                  END IF;
               END LOOP;
            EXCEPTION
               WHEN OTHERS
               THEN
                  RAISE err_unable_to_update;
                  EXIT;
            END;
         END LOOP;
      ELSE
         FOR i IN
            (SELECT   p_office_cd office_cd, x.glac_sl_no, SUM (bal) balance,
                      SUM (bal_con) balance_con, SUM (bal_tak) balance_tak
                 FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal,
                                SUM (debit_con) - SUM (credit_con) bal_con,
                                SUM (debit_tak) - SUM (credit_tak) bal_tak
                           FROM (SELECT   NVL
                                             (d.divert_to_glac_sl_no,
                                              a.glac_sl_no
                                             ) glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_tak,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_tak
                                     FROM acc_gl_trans_dtl_hist a,
                                          acc_gl_trans_mst_hist b,
                                          acc_cash_book_divert d
                                    WHERE a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                                 AND p_end_date
                                      AND b.cost_center IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                             START WITH office_cd =
                                                                   p_office_cd)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '0'
                                      AND a.glac_sl_no = d.glac_sl_no(+)
                                 GROUP BY a.glac_sl_no,
                                          d.divert_to_glac_sl_no
                                 UNION ALL
                                 SELECT   a.glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_tak,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_tak
                                     FROM acc_gl_trans_dtl_hist a,
                                          acc_gl_trans_mst_hist b
                                    WHERE a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                                 AND p_end_date
                                      AND b.cost_center IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                             START WITH office_cd =
                                                                   p_office_cd)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '1'
                                 GROUP BY a.glac_sl_no) u
                       GROUP BY glac_sl_no) x,
                      acc_gl_coa c
                WHERE x.glac_sl_no = c.glac_sl_no
             GROUP BY p_office_cd, x.glac_sl_no)
         LOOP
            BEGIN
               FOR j IN (SELECT     c.glac_sl_no, c.account_type, c.postable,
                                    cntrl_glac_sl_no
                               FROM acc_gl_coa c
                         START WITH c.glac_sl_no = i.glac_sl_no
                         CONNECT BY PRIOR c.cntrl_glac_sl_no = c.glac_sl_no)
               LOOP
                  SELECT COUNT (1)
                    INTO v_count
                    FROM acc_gl_cost_bal_sheet
                   WHERE glac_sl_no = j.glac_sl_no
                     AND office_cd = p_office_cd
                     AND bal_year = p_fiscal_yr;

                  IF v_count = 0
                  THEN
                     INSERT INTO acc_gl_cost_bal_sheet
                                 (bal_year, office_cd, glac_sl_no,
                                  cntrl_glac_sl_no, opening_dt, opening_bal,
                                  current_bal, closing_bal, closing_dt,
                                  i_usr, i_dt, opening_bal_con,
                                  closing_bal_con, opening_bal_tak,
                                  closing_bal_tak, current_bal_con,
                                  current_bal_tak
                                 )
                          VALUES (p_fiscal_yr, p_office_cd, j.glac_sl_no,
                                  j.cntrl_glac_sl_no, p_st_date, 0,
                                  i.balance, 0, NULL,
                                  p_user, SYSDATE, 0,
                                  0, 0,
                                  0, i.balance_con,
                                  i.balance_tak
                                 );
                  ELSE
                     IF j.postable = 'P'
                     THEN
                        UPDATE acc_gl_cost_bal_sheet
                           SET current_bal = i.balance,
                               current_bal_con = i.balance_con,
                               current_bal_tak = i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr;
                     ELSE
                        UPDATE acc_gl_cost_bal_sheet
                           SET current_bal = current_bal + i.balance,
                               current_bal_con =
                                               current_bal_con + i.balance_con,
                               current_bal_tak =
                                               current_bal_tak + i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr;
                     END IF;
                  END IF;
               END LOOP;
            EXCEPTION
               WHEN OTHERS
               THEN
                  RAISE err_unable_to_update;
                  EXIT;
            END;
         END LOOP;
      END IF;
   EXCEPTION
      WHEN err_unable_to_update
      THEN
         p_output :=
               'Unable to update the office wise Chart of Accounts due to!'
            || SQLERRM;
   END;

   FUNCTION fun_opening_bal (
      p_bal_year     VARCHAR2,
      p_quarter      CHAR,
      p_office_cd    VARCHAR2,
      p_glac_sl_no   VARCHAR2
   )
      RETURN NUMBER
   AS
      v_opening_bal   NUMBER;
   BEGIN
      IF p_bal_year = TO_CHAR (SYSDATE, 'RRRR')
      THEN
         SELECT opening_bal
           INTO v_opening_bal
           FROM acc_gl_coa_mst
          WHERE glac_sl_no = p_glac_sl_no AND office_cd = p_office_cd;
      ELSE
         SELECT closing_bal
           INTO v_opening_bal
           FROM acc_gl_coa_mst_hist m, acc_gl_coa c
          WHERE m.glac_sl_no = p_glac_sl_no
            AND bal_year = p_bal_year - 1
            AND quarter = '4'
            AND office_cd = p_office_cd
            AND m.glac_sl_no = c.glac_sl_no
            AND c.glac_type IN ('A', 'L');
      END IF;

      RETURN v_opening_bal;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 0;
   END;

   FUNCTION fun_opening_bal_con (
      p_bal_year     VARCHAR2,
      p_quarter      CHAR,
      p_office_cd    VARCHAR2,
      p_glac_sl_no   VARCHAR2
   )
      RETURN NUMBER
   AS
      v_opening_bal   NUMBER;
   BEGIN
      IF p_bal_year = TO_CHAR (SYSDATE, 'RRRR')
      THEN
         SELECT opening_bal_con
           INTO v_opening_bal
           FROM acc_gl_coa_mst
          WHERE glac_sl_no = p_glac_sl_no AND office_cd = p_office_cd;
      ELSE
         SELECT closing_bal_con
           INTO v_opening_bal
           FROM acc_gl_coa_mst_hist m, acc_gl_coa c
          WHERE m.glac_sl_no = p_glac_sl_no
            AND bal_year = p_bal_year - 1
            AND quarter = '4'
            AND office_cd = p_office_cd
            AND m.glac_sl_no = c.glac_sl_no
            AND c.glac_type IN ('A', 'L');
      END IF;

      RETURN v_opening_bal;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 0;
   END;

   FUNCTION fun_opening_bal_tak (
      p_bal_year     VARCHAR2,
      p_quarter      CHAR,
      p_office_cd    VARCHAR2,
      p_glac_sl_no   VARCHAR2
   )
      RETURN NUMBER
   AS
      v_opening_bal   NUMBER;
   BEGIN
      IF p_bal_year = TO_CHAR (SYSDATE, 'RRRR')
      THEN
         SELECT opening_bal_tak
           INTO v_opening_bal
           FROM acc_gl_coa_mst
          WHERE glac_sl_no = p_glac_sl_no AND office_cd = p_office_cd;
      ELSE
         SELECT closing_bal_tak
           INTO v_opening_bal
           FROM acc_gl_coa_mst_hist m, acc_gl_coa c
          WHERE m.glac_sl_no = p_glac_sl_no
            AND bal_year = p_bal_year - 1
            AND quarter = '4'
            AND office_cd = p_office_cd
            AND m.glac_sl_no = c.glac_sl_no
            AND c.glac_type IN ('A', 'L');
      END IF;

      RETURN v_opening_bal;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 0;
   END;
END;
/


--
-- PKG_GRA_YEAR_CLOSING  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_gra_year_closing
IS
   PROCEDURE pro_leadger_checking (
      p_st_date            DATE,
      p_end_date           DATE,
      p_office_cd          hrm_office.office_cd%TYPE,
      p_leadger_tp         CHAR,
      --1=graounts office wise,'2'=Cost Center wise
      p_output       OUT   VARCHAR2
   )
   IS
      CURSOR cur_office_bal
      IS
         SELECT   m.office_cd,
                  SUM (DECODE (d.dr_cr, 'D', d.trans_amt, 0)) sum_debit,
                  SUM (DECODE (d.dr_cr, 'C', d.trans_amt, 0)) sum_credit
             FROM gra_gl_trans_mst m, gra_gl_trans_dtl d
            WHERE m.vouch_no = d.vouch_no
              AND m.vouch_dt BETWEEN p_st_date AND p_end_date
              AND (   (p_leadger_tp = 1 AND m.office_cd = p_office_cd)
                   OR (p_leadger_tp = 2 AND m.cost_center = p_office_cd)
                  )
         GROUP BY m.office_cd;

      rec_cur_office_bal   cur_office_bal%ROWTYPE;
      v_office_cd          hrm_office.office_cd%TYPE   := NULL;
   BEGIN
      OPEN cur_office_bal;

      LOOP
         FETCH cur_office_bal
          INTO rec_cur_office_bal;

         EXIT WHEN cur_office_bal%NOTFOUND;

         IF rec_cur_office_bal.sum_debit <> rec_cur_office_bal.sum_credit
         THEN
            IF v_office_cd IS NULL
            THEN
               v_office_cd := v_office_cd || rec_cur_office_bal.office_cd;
            ELSE
               v_office_cd :=
                           v_office_cd || ',' || rec_cur_office_bal.office_cd;
            END IF;
         END IF;
      END LOOP;

      CLOSE cur_office_bal;

      IF v_office_cd IS NULL
      THEN
         p_output := NULL;
      ELSE
         p_output :=
               '"Leadger" is not completed of the following office: '
            || v_office_cd
            || '.So checking the "Leadger" of this/those office.';
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_output := SQLERRM;
   END;

   PROCEDURE pro_coa_transfer_to_hist (
      p_fiscal_yr         VARCHAR2,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   )
   IS
      v_process_st   CHAR (1)       := 'Y';
--Note:if Process has succesfully completed  the value of this variable reaim 'Y' other wise it will be 'N'
      v_error        VARCHAR2 (200);
   BEGIN
      INSERT INTO gra_gl_coa_mst_hist
                  (bal_year, office_cd, glac_sl_no, cntrl_glac_sl_no,
                   opening_dt, opening_bal, current_bal, closing_bal,
                   closing_dt, i_usr, i_dt, u_usr, u_dt, opening_bal_con,
                   current_bal_con, closing_bal_con, opening_bal_tak,
                   current_bal_tak, closing_bal_tak)
         (SELECT p_fiscal_yr, office_cd, glac_sl_no, cntrl_glac_sl_no,
                 opening_dt, opening_bal, current_bal,
                 opening_bal + current_bal, SYSDATE, i_usr, i_dt, u_usr,
                 u_dt, opening_bal_con, current_bal_con,
                 NVL (opening_bal_con, 0) + current_bal_con, opening_bal_tak,
                 current_bal_tak, NVL (opening_bal_tak, 0) + current_bal_tak
            FROM gra_gl_coa_mst m
           WHERE office_cd = NVL (p_office_cd, office_cd)
             AND TO_CHAR (m.opening_dt, 'RRRR') = p_fiscal_yr);
   EXCEPTION
      WHEN OTHERS
      THEN
         ROLLBACK;
         p_output :=
               'Chart of graounts Transfer Process Not Completed Due to: '
            || SQLERRM;
   END;

   PROCEDURE pro_gl_leadger_close (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   )
   IS
      CURSOR cur_voucher
      IS
         SELECT vouch_no, office_cd
           FROM gra_gl_trans_mst m
          WHERE TRUNC (m.vouch_dt) BETWEEN p_st_date AND p_end_date
            AND office_cd = NVL (p_office_cd, office_cd);

      rec_cur_voucher   cur_voucher%ROWTYPE;
      v_rec_count       NUMBER (3)            := 0;
      v_count           NUMBER (10)           := 0;
   BEGIN
      OPEN cur_voucher;

      LOOP
         FETCH cur_voucher
          INTO rec_cur_voucher;

         EXIT WHEN cur_voucher%NOTFOUND;

         INSERT INTO gra_gl_trans_mst_hist
            (SELECT *
               FROM gra_gl_trans_mst
              WHERE vouch_no = rec_cur_voucher.vouch_no
                AND office_cd = rec_cur_voucher.office_cd);

         INSERT INTO gra_gl_trans_dtl_hist
            (SELECT *
               FROM gra_gl_trans_dtl
              WHERE vouch_no = rec_cur_voucher.vouch_no
                AND office_cd = rec_cur_voucher.office_cd);

         DELETE FROM gra_gl_trans_dtl
               WHERE vouch_no = rec_cur_voucher.vouch_no
                 AND office_cd = rec_cur_voucher.office_cd;

         DELETE FROM gra_gl_trans_mst
               WHERE vouch_no = rec_cur_voucher.vouch_no
                 AND office_cd = rec_cur_voucher.office_cd;

         IF v_rec_count = 100
         THEN
            COMMIT;
            v_rec_count := 0;
         ELSE
            v_rec_count := v_rec_count + 1;
         END IF;
      END LOOP;

      CLOSE cur_voucher;

      COMMIT;

      SELECT COUNT (1)
        INTO v_count
        FROM gra_gl_trans_mst m
       WHERE TRUNC (m.vouch_dt) BETWEEN p_st_date AND p_end_date
         AND office_cd = NVL (p_office_cd, office_cd);

      IF v_count = 0
      THEN
         p_output := NULL;
      ELSE
         p_output := 'More Voucher are available in Voucher repository.';
      END IF;
   END;

   PROCEDURE pro_fiscle_year_close (
      p_st_date          DATE,
      p_end_date         DATE,
      p_user             VARCHAR2,
      p_output     OUT   VARCHAR2
   )
   IS
   BEGIN
      UPDATE acc_fiscal_year
         SET status = 0,
             --fy_close = '1',
             fy_close_dt = SYSDATE,
             year_end_pro_st = '1',
             u_usr = p_user,
             u_dt = SYSDATE
       WHERE fy_st_dt = p_st_date AND fy_ed_dt = p_end_date;
   --COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         ROLLBACK;
         p_output := 'Unable to close the year due to: ' || SQLERRM;
   END;

   PROCEDURE pro_open_new_fiscle_year (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_output      OUT   VARCHAR2
   )
   IS
      v_output   VARCHAR2 (200) := NULL;
      v_count    NUMBER (1)     := 0;
   BEGIN
      BEGIN
         SELECT COUNT (1)
           INTO v_count
           FROM acc_fiscal_year
          WHERE fy_st_dt = (p_end_date + 1);

         IF v_count = 0
         THEN
            INSERT INTO acc_fiscal_year
                        (fy_st_dt, fy_ed_dt,
                         status, i_usr, i_dt, fyc, fy_close
                        )
                 VALUES ((p_end_date + 1), ADD_MONTHS (p_end_date, 12),
                         '1', p_user, SYSDATE, '2', '0'
                        );
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_output := SQLERRM;
      END;

      IF v_output IS NULL
      THEN
         UPDATE gra_gl_coa_mst
            SET opening_dt = (p_end_date + 1),
                opening_bal = 0,
                opening_bal_con = 0,
                opening_bal_tak = 0,
                current_bal = 0,
                closing_bal = 0,
                current_bal_con = 0,
                closing_bal_con = 0,
                current_bal_tak = 0,
                closing_bal_tak = 0,
                u_usr = p_user,
                u_dt = SYSDATE
          WHERE office_cd = p_office_cd;

         BEGIN
            FOR i IN
               (SELECT c.glac_type, c.glac_sl_no,
                       cm.closing_bal actual_closing,
                       DECODE
                          (c.glac_sl_no,
                           '200002', (SELECT NVL (income - expense,
                                                  0
                                                 ) tot_profit
                                        FROM (SELECT '200002' glac_sl_no,
                                                     NVL
                                                        (SUM (ABS (closing_bal)
                                                             ),
                                                         0
                                                        ) income
                                                FROM gra_gl_coa c,
                                                     gra_gl_coa_mst_hist cm
                                               WHERE glac_type = 'I'
                                                 AND postable = 'P'
                                                 AND c.glac_sl_no =
                                                                 cm.glac_sl_no
                                                 AND cm.office_cd =
                                                                   p_office_cd
                                                 AND cm.bal_year =
                                                        TO_CHAR (p_st_date,
                                                                 'RRRR'
                                                                )) a,
                                             (SELECT '200002' glac_sl_no,
                                                     NVL
                                                        (SUM (ABS (closing_bal)
                                                             ),
                                                         0
                                                        ) expense
                                                FROM gra_gl_coa c,
                                                     gra_gl_coa_mst_hist cm
                                               WHERE glac_type = 'E'
                                                 AND postable = 'P'
                                                 AND c.glac_sl_no =
                                                                 cm.glac_sl_no
                                                 AND cm.office_cd =
                                                                   p_office_cd
                                                 AND cm.bal_year =
                                                        TO_CHAR (p_st_date,
                                                                 'RRRR'
                                                                )) b
                                       WHERE a.glac_sl_no = b.glac_sl_no),
                           0
                          ) profit,
                         cm.closing_bal
                       - DECODE
                            (c.glac_sl_no,
                             '200002', (SELECT NVL (income - expense,
                                                    0
                                                   ) tot_profit
                                          FROM (SELECT '200002' glac_sl_no,
                                                       NVL
                                                          (SUM
                                                              (ABS
                                                                  (closing_bal)
                                                              ),
                                                           0
                                                          ) income
                                                  FROM gra_gl_coa c,
                                                       gra_gl_coa_mst_hist cm
                                                 WHERE glac_type = 'I'
                                                   AND postable = 'P'
                                                   AND c.glac_sl_no =
                                                                 cm.glac_sl_no
                                                   AND cm.office_cd =
                                                                   p_office_cd
                                                   AND cm.bal_year =
                                                          TO_CHAR (p_st_date,
                                                                   'RRRR'
                                                                  )) a,
                                               (SELECT '200002' glac_sl_no,
                                                       NVL
                                                          (SUM
                                                              (ABS
                                                                  (closing_bal)
                                                              ),
                                                           0
                                                          ) expense
                                                  FROM gra_gl_coa c,
                                                       gra_gl_coa_mst_hist cm
                                                 WHERE glac_type = 'E'
                                                   AND postable = 'P'
                                                   AND c.glac_sl_no =
                                                                 cm.glac_sl_no
                                                   AND cm.office_cd =
                                                                   p_office_cd
                                                   AND cm.bal_year =
                                                          TO_CHAR (p_st_date,
                                                                   'RRRR'
                                                                  )) b
                                         WHERE a.glac_sl_no = b.glac_sl_no),
                             0
                            ) closing_bal
                  FROM gra_gl_coa c, gra_gl_coa_mst_hist cm
                 WHERE c.postable = 'P'
                   AND c.glac_type IN ('A', 'L')
                   AND c.glac_sl_no = cm.glac_sl_no
                   AND cm.office_cd = p_office_cd
                   AND cm.bal_year = TO_CHAR (p_st_date, 'RRRR'))
            /*FOR i IN
               (SELECT h.office_cd, h.glac_sl_no, g.glac_nm,
                       DECODE
                          (h.glac_sl_no,
                           '200002', h.opening_bal
                            + (SELECT NVL (  SUM (DECODE (g.glac_type,
                                                          'I', ABS
                                                                (h.current_bal),
                                                          0
                                                         )
                                                 )
                                           - SUM (DECODE (g.glac_type,
                                                          'E', ABS
                                                                (h.current_bal),
                                                          0
                                                         )
                                                 ),
                                           0
                                          )
                                 FROM gra_gl_coa_mst h, gra_gl_coa g
                                WHERE h.glac_sl_no = g.glac_sl_no
                                  AND g.glac_type IN ('I', 'E')),
                           h.opening_bal + h.current_bal
                          ) opening_bal,
                       DECODE
                          (h.glac_sl_no,
                           '200002', h.opening_bal_con
                            + (SELECT NVL
                                         (  SUM
                                               (DECODE
                                                      (g.glac_type,
                                                       'I', ABS
                                                            (h.current_bal_con),
                                                       0
                                                      )
                                               )
                                          - SUM
                                               (DECODE
                                                      (g.glac_type,
                                                       'E', ABS
                                                            (h.current_bal_con),
                                                       0
                                                      )
                                               ),
                                          0
                                         )
                                 FROM gra_gl_coa_mst h, gra_gl_coa g
                                WHERE h.glac_sl_no = g.glac_sl_no
                                  AND g.glac_type IN ('I', 'E')),
                           h.opening_bal_con + h.current_bal_con
                          ) opening_bal_con,
                       DECODE
                          (h.glac_sl_no,
                           '200002', h.opening_bal_tak
                            + (SELECT NVL
                                         (  SUM
                                               (DECODE
                                                      (g.glac_type,
                                                       'I', ABS
                                                            (h.current_bal_tak),
                                                       0
                                                      )
                                               )
                                          - SUM
                                               (DECODE
                                                      (g.glac_type,
                                                       'E', ABS
                                                            (h.current_bal_tak),
                                                       0
                                                      )
                                               ),
                                          0
                                         )
                                 FROM gra_gl_coa_mst h, gra_gl_coa g
                                WHERE h.glac_sl_no = g.glac_sl_no
                                  AND g.glac_type IN ('I', 'E')),
                           h.opening_bal_tak + h.current_bal_tak
                          ) opening_bal_tak
                  FROM gra_gl_coa_mst h, gra_gl_coa g
                 WHERE office_cd = NVL (p_office_cd, office_cd)
                   AND h.glac_sl_no = g.glac_sl_no
                   AND g.glac_type IN ('A', 'L'))*/
            LOOP
               FOR j IN (SELECT     c.glac_sl_no, c.graount_type, c.postable,
                                    cntrl_glac_sl_no
                               FROM gra_gl_coa c
                         START WITH c.glac_sl_no = i.glac_sl_no
                         CONNECT BY PRIOR c.cntrl_glac_sl_no = c.glac_sl_no)
               LOOP
                  SELECT COUNT (1)
                    INTO v_count
                    FROM gra_gl_coa_mst
                   WHERE glac_sl_no = j.glac_sl_no AND office_cd = p_office_cd;

                  IF v_count = 0
                  THEN
                     INSERT INTO gra_gl_coa_mst
                                 (office_cd, glac_sl_no,
                                  cntrl_glac_sl_no, opening_dt, opening_bal,
                                  current_bal, closing_bal, closing_dt,
                                  i_usr, i_dt, opening_bal_con,
                                  closing_bal_con, opening_bal_tak,
                                  closing_bal_tak, current_bal_con,
                                  current_bal_tak
                                 )
                          VALUES (p_office_cd, j.glac_sl_no,
                                  j.cntrl_glac_sl_no, p_st_date, 0,
                                  i.closing_bal, 0, NULL,
                                  p_user, SYSDATE, 0,
                                  0, 0,
                                  0, 0,
                                  0
                                 );
                  ELSE
                     IF j.postable = 'P'
                     THEN
                        UPDATE gra_gl_coa_mst
                           SET current_bal = i.closing_bal,
                               current_bal_con = 0,
                               current_bal_tak = 0,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no;
                     ELSE
                        UPDATE gra_gl_coa_mst
                           SET current_bal =
                                           NVL (current_bal, 0)
                                           + i.closing_bal,
                               current_bal_con = NVL (current_bal_con, 0) + 0,
                               current_bal_tak = NVL (current_bal_tak, 0) + 0,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no;
                     END IF;
                  END IF;
               END LOOP;
            END LOOP;
         END;

         DELETE FROM acc_opening_balance
               WHERE opening_bal_dt = (p_end_date + 1);

         INSERT INTO acc_opening_balance
                     (office_cd, glac_sl_no, opening_bal_dt, dr_cr, trans_amt,
                      i_usr, i_dt, ins_tp_cd)
            SELECT cost_center, glac_sl_no, (p_end_date + 1),
                   CASE
                      WHEN bal > 0
                         THEN 'D'
                      ELSE 'C'
                   END dr_cr, ABS (bal), p_user, SYSDATE, ins_tp_cd
              FROM (SELECT   m.cost_center, m.glac_sl_no,
                             SUM (debit) - SUM (credit) bal, ins_tp_cd
                        FROM (SELECT   b.cost_center,
                                       NVL
                                          (d.divert_to_glac_sl_no,
                                           a.glac_sl_no
                                          ) glac_sl_no,
                                       SUM (DECODE (a.dr_cr,
                                                    'D', a.trans_amt,
                                                    0
                                                   )
                                           ) debit,
                                       SUM (DECODE (a.dr_cr,
                                                    'C', a.trans_amt,
                                                    0
                                                   )
                                           ) credit,
                                       ins_tp_cd
                                  FROM acc_gl_trans_dtl a,
                                       acc_gl_trans_mst b,
                                       acc_cash_book_divert d
                                 WHERE a.office_cd = b.office_cd
                                   AND a.vouch_no = b.vouch_no
                                   AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                              AND p_end_date
                                   AND b.office_cd = p_office_cd
                                   AND NVL (b.ledger_st, '1') = '1'
                                   AND NVL (b.payable_st, '0') = '0'
                                   AND a.glac_sl_no = d.glac_sl_no(+)
                                   AND NVL (b.adjustment_st, '0') = '0'
                              GROUP BY b.cost_center,
                                       a.glac_sl_no,
                                       d.divert_to_glac_sl_no,
                                       b.ins_tp_cd
                              UNION
                              SELECT   b.cost_center, a.glac_sl_no,
                                       SUM (DECODE (a.dr_cr,
                                                    'D', a.trans_amt,
                                                    0
                                                   )
                                           ) debit,
                                       SUM (DECODE (a.dr_cr,
                                                    'C', a.trans_amt,
                                                    0
                                                   )
                                           ) credit,
                                       ins_tp_cd
                                  FROM acc_gl_trans_dtl a, acc_gl_trans_mst b
                                 WHERE a.office_cd = b.office_cd
                                   AND a.vouch_no = b.vouch_no
                                   AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                              AND p_end_date
                                   AND b.office_cd = p_office_cd
                                   AND NVL (b.ledger_st, '1') = '1'
                                   AND NVL (b.payable_st, '0') = '1'
                              GROUP BY b.cost_center,
                                       a.glac_sl_no,
                                       b.ins_tp_cd
                              UNION
                              SELECT   b.cost_center, a.glac_sl_no,
                                       SUM (DECODE (a.dr_cr,
                                                    'D', a.trans_amt,
                                                    0
                                                   )
                                           ) debit,
                                       SUM (DECODE (a.dr_cr,
                                                    'C', a.trans_amt,
                                                    0
                                                   )
                                           ) credit,
                                       ins_tp_cd
                                  FROM acc_gl_trans_dtl a, acc_gl_trans_mst b
                                 WHERE a.office_cd = b.office_cd
                                   AND a.vouch_no = b.vouch_no
                                   AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                              AND p_end_date
                                   AND b.office_cd = p_office_cd
                                   AND NVL (b.ledger_st, '1') = '1'
                                   AND NVL (b.payable_st, '0') = '0'
                                   AND NVL (b.adjustment_st, '0') = '1'
                              GROUP BY b.cost_center,
                                       a.glac_sl_no,
                                       b.ins_tp_cd
                              UNION
                              SELECT   office_cd, glac_sl_no,
                                       SUM (DECODE (dr_cr, 'D', trans_amt, 0)
                                           ) debit,
                                       SUM (DECODE (dr_cr, 'C', trans_amt, 0)
                                           ) credit,
                                       ins_tp_cd
                                  FROM acc_opening_balance
                                 WHERE opening_bal_dt = p_st_date
                              GROUP BY office_cd, glac_sl_no, ins_tp_cd) m,
                             acc_gl_coa c
                       WHERE m.glac_sl_no = c.glac_sl_no
                         AND c.glac_type IN ('A', 'L')
                    GROUP BY m.cost_center, m.glac_sl_no, m.ins_tp_cd)
             WHERE ABS (bal) > 0;
      ELSE
         --ROLLBACK;
         p_output :=
                   'Unable to open the new Fiscale Year due to: ' || v_output;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         --ROLLBACK;
         p_output :=
                    'Unable to open the new Fiscale Year due to: ' || SQLERRM;
   END;

   PROCEDURE pro_gra_bal_sheet (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_fiscal_yr         VARCHAR2,
      p_output      OUT   VARCHAR2
   )
   AS
      err_unable_to_update   EXCEPTION;
      v_count                NUMBER (4) := 0;
      v_year_end_pro_st      CHAR (1)   := '0';
   BEGIN
      SELECT year_end_pro_st
        INTO v_year_end_pro_st
        FROM acc_fiscal_year
       WHERE TO_CHAR (fy_ed_dt, 'RRRR') = p_fiscal_yr;

      FOR i IN
         (SELECT   x.glac_sl_no, SUM (bal) balance, SUM (bal_con) balance_con,
                   SUM (bal_tak) balance_tak
              FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal,
                             SUM (debit_con) - SUM (credit_con) bal_con,
                             SUM (debit_tak) - SUM (credit_tak) bal_tak
                        FROM (SELECT   NVL
                                          (d.divert_to_glac_sl_no,
                                           a.glac_sl_no
                                          ) glac_sl_no,
                                       SUM (DECODE (a.dr_cr,
                                                    'D', a.trans_amt,
                                                    0
                                                   )
                                           ) debit,
                                       SUM (DECODE (a.dr_cr,
                                                    'C', a.trans_amt,
                                                    0
                                                   )
                                           ) credit,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'D', DECODE (ins_tp_cd,
                                                                '1', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) debit_con,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'C', DECODE (ins_tp_cd,
                                                                '1', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) credit_con,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'D', DECODE (ins_tp_cd,
                                                                '2', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) debit_tak,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'C', DECODE (ins_tp_cd,
                                                                '2', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) credit_tak
                                  FROM gra_gl_trans_dtl a,
                                       gra_gl_trans_mst b,
                                       gra_cash_book_divert d
                                 WHERE a.office_cd = b.office_cd
                                   AND a.vouch_no = b.vouch_no
                                   AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                              AND p_end_date
                                   AND b.office_cd = p_office_cd
                                   AND NVL (b.ledger_st, '1') = '1'
                                   AND NVL (b.payable_st, '0') = '0'
                                   AND a.glac_sl_no = d.glac_sl_no(+)
                              GROUP BY a.glac_sl_no, d.divert_to_glac_sl_no
                              UNION ALL
                              SELECT   a.glac_sl_no,
                                       SUM (DECODE (a.dr_cr,
                                                    'D', a.trans_amt,
                                                    0
                                                   )
                                           ) debit,
                                       SUM (DECODE (a.dr_cr,
                                                    'C', a.trans_amt,
                                                    0
                                                   )
                                           ) credit,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'D', DECODE (ins_tp_cd,
                                                                '1', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) debit_con,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'C', DECODE (ins_tp_cd,
                                                                '1', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) credit_con,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'D', DECODE (ins_tp_cd,
                                                                '2', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) debit_tak,
                                       SUM
                                          (DECODE (a.dr_cr,
                                                   'C', DECODE (ins_tp_cd,
                                                                '2', a.trans_amt,
                                                                0
                                                               ),
                                                   0
                                                  )
                                          ) credit_tak
                                  FROM gra_gl_trans_dtl a, gra_gl_trans_mst b
                                 WHERE a.office_cd = b.office_cd
                                   AND a.vouch_no = b.vouch_no
                                   AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                              AND p_end_date
                                   AND b.office_cd = p_office_cd
                                   AND NVL (b.ledger_st, '1') = '1'
                                   AND NVL (b.payable_st, '0') = '1'
                              GROUP BY a.glac_sl_no) u
                    GROUP BY glac_sl_no) x,
                   gra_gl_coa c
             WHERE x.glac_sl_no = c.glac_sl_no
          GROUP BY x.glac_sl_no
                               /*SELECT   m.office_cd, d.glac_sl_no, SUM (d.trans_amt) balance,
                                                  SUM (DECODE (ins_tp_cd, '1', d.trans_amt, 0)
                                                      ) balance_con,
                                                  SUM (DECODE (ins_tp_cd, '2', d.trans_amt, 0)
                                                      ) balance_tak
                                             FROM gra_gl_trans_mst m, gra_gl_trans_dtl d
                                            WHERE m.vouch_no = d.vouch_no
                                              AND m.vouch_dt BETWEEN p_st_date AND p_end_date
                                              AND m.office_cd = p_office_cd
                                         GROUP BY m.office_cd, d.glac_sl_no*/
         )
      LOOP
         BEGIN
            IF v_year_end_pro_st = '0'
            --p_fiscal_yr = TO_CHAR (SYSDATE, 'RRRR')
            THEN
               FOR j IN (SELECT     c.glac_sl_no, c.graount_type, c.postable,
                                    cntrl_glac_sl_no
                               FROM gra_gl_coa c
                         START WITH c.glac_sl_no = i.glac_sl_no
                         CONNECT BY PRIOR c.cntrl_glac_sl_no = c.glac_sl_no)
               LOOP
                  SELECT COUNT (1)
                    INTO v_count
                    FROM gra_gl_coa_mst
                   WHERE glac_sl_no = j.glac_sl_no AND office_cd = p_office_cd;

                  IF v_count = 0
                  THEN
                     INSERT INTO gra_gl_coa_mst
                                 (office_cd, glac_sl_no,
                                  cntrl_glac_sl_no, opening_dt, opening_bal,
                                  current_bal, closing_bal, closing_dt,
                                  i_usr, i_dt, opening_bal_con,
                                  closing_bal_con, opening_bal_tak,
                                  closing_bal_tak, current_bal_con,
                                  current_bal_tak
                                 )
                          VALUES (p_office_cd, j.glac_sl_no,
                                  j.cntrl_glac_sl_no, p_st_date, 0,
                                  i.balance, 0, NULL,
                                  p_user, SYSDATE, 0,
                                  0, 0,
                                  0, i.balance_con,
                                  i.balance_tak
                                 );
                  ELSE
                     IF j.postable = 'P'
                     THEN
                        UPDATE gra_gl_coa_mst
                           SET current_bal = i.balance,
                               current_bal_con = i.balance_con,
                               current_bal_tak = i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no;
                     ELSE
                        UPDATE gra_gl_coa_mst
                           SET current_bal = NVL (current_bal, 0) + i.balance,
                               current_bal_con =
                                       NVL (current_bal_con, 0)
                                       + i.balance_con,
                               current_bal_tak =
                                       NVL (current_bal_tak, 0)
                                       + i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no;
                     END IF;
                  END IF;
               END LOOP;
            ELSE
               FOR j IN (SELECT     c.glac_sl_no, c.graount_type, c.postable,
                                    cntrl_glac_sl_no
                               FROM gra_gl_coa c
                         START WITH c.glac_sl_no = i.glac_sl_no
                         CONNECT BY PRIOR c.cntrl_glac_sl_no = c.glac_sl_no)
               LOOP
                  SELECT COUNT (1)
                    INTO v_count
                    FROM gra_gl_coa_mst_hist
                   WHERE glac_sl_no = j.glac_sl_no
                     AND office_cd = p_office_cd
                     AND bal_year = p_fiscal_yr;

                  IF v_count = 0
                  THEN
                     INSERT INTO gra_gl_coa_mst_hist
                                 (bal_year, office_cd, glac_sl_no,
                                  cntrl_glac_sl_no, opening_dt, opening_bal,
                                  current_bal, closing_bal, closing_dt,
                                  i_usr, i_dt, opening_bal_con,
                                  closing_bal_con, opening_bal_tak,
                                  closing_bal_tak, current_bal_con,
                                  current_bal_tak
                                 )
                          VALUES (p_fiscal_yr, p_office_cd, j.glac_sl_no,
                                  j.cntrl_glac_sl_no, p_st_date, 0,
                                  i.balance, 0, NULL,
                                  p_user, SYSDATE, 0,
                                  0, 0,
                                  0, i.balance_con,
                                  i.balance_tak
                                 );
                  ELSE
                     IF j.postable = 'P'
                     THEN
                        UPDATE gra_gl_coa_mst_hist
                           SET current_bal = i.balance,
                               current_bal_con = i.balance_con,
                               current_bal_tak = i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr;
                     ELSE
                        UPDATE gra_gl_coa_mst_hist
                           SET current_bal = NVL (current_bal, 0) + i.balance,
                               current_bal_con =
                                       NVL (current_bal_con, 0)
                                       + i.balance_con,
                               current_bal_tak =
                                       NVL (current_bal_tak, 0)
                                       + i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               RAISE err_unable_to_update;
               EXIT;
         END;
      END LOOP;
   EXCEPTION
      WHEN err_unable_to_update
      THEN
         p_output :=
               'Unable to update the office wise Chart of graounts due to!'
            || SQLERRM;
   END;

   PROCEDURE pro_cost_center_bal_sheet (
      p_st_date           DATE,
      p_end_date          DATE,
      p_office_cd         hrm_office.office_cd%TYPE,
      p_user              VARCHAR2,
      p_fiscal_yr         VARCHAR2,
      p_output      OUT   VARCHAR2
   )
   AS
      err_unable_to_update   EXCEPTION;
      v_count                NUMBER (4) := 0;
      v_year_end_pro_st      CHAR (1)   := '0';
   BEGIN
      SELECT year_end_pro_st
        INTO v_year_end_pro_st
        FROM acc_fiscal_year
       WHERE TO_CHAR (fy_ed_dt, 'RRRR') = p_fiscal_yr;

      IF v_year_end_pro_st = '0'
      THEN
         FOR i IN
            (SELECT   p_office_cd office_cd, x.glac_sl_no, SUM (bal) balance,
                      SUM (bal_con) balance_con, SUM (bal_tak) balance_tak
                 FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal,
                                SUM (debit_con) - SUM (credit_con) bal_con,
                                SUM (debit_tak) - SUM (credit_tak) bal_tak
                           FROM (SELECT   NVL
                                             (d.divert_to_glac_sl_no,
                                              a.glac_sl_no
                                             ) glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_tak,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_tak
                                     FROM gra_gl_trans_dtl a,
                                          gra_gl_trans_mst b,
                                          gra_cash_book_divert d
                                    WHERE a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                                 AND p_end_date
                                      AND b.cost_center IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                             START WITH office_cd =
                                                                   p_office_cd)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '0'
                                      AND a.glac_sl_no = d.glac_sl_no(+)
                                 GROUP BY a.glac_sl_no,
                                          d.divert_to_glac_sl_no
                                 UNION ALL
                                 SELECT   a.glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_tak,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_tak
                                     FROM gra_gl_trans_dtl a,
                                          gra_gl_trans_mst b
                                    WHERE a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                                 AND p_end_date
                                      AND b.cost_center IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                             START WITH office_cd =
                                                                   p_office_cd)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '1'
                                 GROUP BY a.glac_sl_no) u
                       GROUP BY glac_sl_no) x,
                      gra_gl_coa c
                WHERE x.glac_sl_no = c.glac_sl_no
             GROUP BY p_office_cd, x.glac_sl_no)
         LOOP
            BEGIN
               FOR j IN (SELECT     c.glac_sl_no, c.graount_type, c.postable,
                                    cntrl_glac_sl_no
                               FROM gra_gl_coa c
                         START WITH c.glac_sl_no = i.glac_sl_no
                         CONNECT BY PRIOR c.cntrl_glac_sl_no = c.glac_sl_no)
               LOOP
                  SELECT COUNT (1)
                    INTO v_count
                    FROM gra_gl_cost_bal_sheet
                   WHERE glac_sl_no = j.glac_sl_no
                     AND office_cd = p_office_cd
                     AND bal_year = p_fiscal_yr;

                  IF v_count = 0
                  THEN
                     INSERT INTO gra_gl_cost_bal_sheet
                                 (bal_year, office_cd, glac_sl_no,
                                  cntrl_glac_sl_no, opening_dt, opening_bal,
                                  current_bal, closing_bal, closing_dt,
                                  i_usr, i_dt, opening_bal_con,
                                  closing_bal_con, opening_bal_tak,
                                  closing_bal_tak, current_bal_con,
                                  current_bal_tak
                                 )
                          VALUES (p_fiscal_yr, p_office_cd, j.glac_sl_no,
                                  j.cntrl_glac_sl_no, p_st_date, 0,
                                  i.balance, 0, NULL,
                                  p_user, SYSDATE, 0,
                                  0, 0,
                                  0, i.balance_con,
                                  i.balance_tak
                                 );
                  ELSE
                     IF j.postable = 'P'
                     THEN
                        UPDATE gra_gl_cost_bal_sheet
                           SET current_bal = i.balance,
                               current_bal_con = i.balance_con,
                               current_bal_tak = i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr;
                     ELSE
                        UPDATE gra_gl_cost_bal_sheet
                           SET current_bal = current_bal + i.balance,
                               current_bal_con =
                                               current_bal_con + i.balance_con,
                               current_bal_tak =
                                               current_bal_tak + i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr;
                     END IF;
                  END IF;
               END LOOP;
            EXCEPTION
               WHEN OTHERS
               THEN
                  RAISE err_unable_to_update;
                  EXIT;
            END;
         END LOOP;
      ELSE
         FOR i IN
            (SELECT   p_office_cd office_cd, x.glac_sl_no, SUM (bal) balance,
                      SUM (bal_con) balance_con, SUM (bal_tak) balance_tak
                 FROM (SELECT   glac_sl_no, SUM (debit) - SUM (credit) bal,
                                SUM (debit_con) - SUM (credit_con) bal_con,
                                SUM (debit_tak) - SUM (credit_tak) bal_tak
                           FROM (SELECT   NVL
                                             (d.divert_to_glac_sl_no,
                                              a.glac_sl_no
                                             ) glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_tak,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_tak
                                     FROM gra_gl_trans_dtl_hist a,
                                          gra_gl_trans_mst_hist b,
                                          gra_cash_book_divert d
                                    WHERE a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                                 AND p_end_date
                                      AND b.cost_center IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                             START WITH office_cd =
                                                                   p_office_cd)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '0'
                                      AND a.glac_sl_no = d.glac_sl_no(+)
                                 GROUP BY a.glac_sl_no,
                                          d.divert_to_glac_sl_no
                                 UNION ALL
                                 SELECT   a.glac_sl_no,
                                          SUM (DECODE (a.dr_cr,
                                                       'D', a.trans_amt,
                                                       0
                                                      )
                                              ) debit,
                                          SUM (DECODE (a.dr_cr,
                                                       'C', a.trans_amt,
                                                       0
                                                      )
                                              ) credit,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '1', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_con,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'D', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) debit_tak,
                                          SUM
                                             (DECODE (a.dr_cr,
                                                      'C', DECODE
                                                                 (ins_tp_cd,
                                                                  '2', a.trans_amt,
                                                                  0
                                                                 ),
                                                      0
                                                     )
                                             ) credit_tak
                                     FROM gra_gl_trans_dtl_hist a,
                                          gra_gl_trans_mst_hist b
                                    WHERE a.office_cd = b.office_cd
                                      AND a.vouch_no = b.vouch_no
                                      AND TRUNC (b.vouch_dt) BETWEEN p_st_date
                                                                 AND p_end_date
                                      AND b.cost_center IN (
                                             SELECT     office_cd
                                                   FROM hrm_office_setup
                                             CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                             START WITH office_cd =
                                                                   p_office_cd)
                                      AND NVL (b.ledger_st, '1') = '1'
                                      AND NVL (b.payable_st, '0') = '1'
                                 GROUP BY a.glac_sl_no) u
                       GROUP BY glac_sl_no) x,
                      gra_gl_coa c
                WHERE x.glac_sl_no = c.glac_sl_no
             GROUP BY p_office_cd, x.glac_sl_no)
         LOOP
            BEGIN
               FOR j IN (SELECT     c.glac_sl_no, c.graount_type, c.postable,
                                    cntrl_glac_sl_no
                               FROM gra_gl_coa c
                         START WITH c.glac_sl_no = i.glac_sl_no
                         CONNECT BY PRIOR c.cntrl_glac_sl_no = c.glac_sl_no)
               LOOP
                  SELECT COUNT (1)
                    INTO v_count
                    FROM gra_gl_cost_bal_sheet
                   WHERE glac_sl_no = j.glac_sl_no
                     AND office_cd = p_office_cd
                     AND bal_year = p_fiscal_yr;

                  IF v_count = 0
                  THEN
                     INSERT INTO gra_gl_cost_bal_sheet
                                 (bal_year, office_cd, glac_sl_no,
                                  cntrl_glac_sl_no, opening_dt, opening_bal,
                                  current_bal, closing_bal, closing_dt,
                                  i_usr, i_dt, opening_bal_con,
                                  closing_bal_con, opening_bal_tak,
                                  closing_bal_tak, current_bal_con,
                                  current_bal_tak
                                 )
                          VALUES (p_fiscal_yr, p_office_cd, j.glac_sl_no,
                                  j.cntrl_glac_sl_no, p_st_date, 0,
                                  i.balance, 0, NULL,
                                  p_user, SYSDATE, 0,
                                  0, 0,
                                  0, i.balance_con,
                                  i.balance_tak
                                 );
                  ELSE
                     IF j.postable = 'P'
                     THEN
                        UPDATE gra_gl_cost_bal_sheet
                           SET current_bal = i.balance,
                               current_bal_con = i.balance_con,
                               current_bal_tak = i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr;
                     ELSE
                        UPDATE gra_gl_cost_bal_sheet
                           SET current_bal = current_bal + i.balance,
                               current_bal_con =
                                               current_bal_con + i.balance_con,
                               current_bal_tak =
                                               current_bal_tak + i.balance_tak,
                               u_usr = p_user,
                               u_dt = SYSDATE
                         WHERE office_cd = p_office_cd
                           AND glac_sl_no = j.glac_sl_no
                           AND bal_year = p_fiscal_yr;
                     END IF;
                  END IF;
               END LOOP;
            EXCEPTION
               WHEN OTHERS
               THEN
                  RAISE err_unable_to_update;
                  EXIT;
            END;
         END LOOP;
      END IF;
   EXCEPTION
      WHEN err_unable_to_update
      THEN
         p_output :=
               'Unable to update the office wise Chart of graounts due to!'
            || SQLERRM;
   END;
END;
/


--
-- PKG_INVESTMENT_CALCULATION  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_investment_calculation wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
b
89c 33f
8KBXFaNXX49hGLejykWEgkuIx+gwg80rzCATfC8ZA6qVJpb7ven6m3fpQrhfoRGvYNQUHofY
5Rg8EaRYjsKaJP3ndWfrXFWG3PdLEMG7/5q/dRR1aIaUAmz+LI+x0LsnT7UZpG1PmDRprtCW
rrCcxuCqhcx1ZqbnZWCRhViITch5EateG5T/FOqsZUVESX8eGM5nPFQwyE3dHxgIwPyrdHms
l1l8fDfXPFm9vFzTlqi9tqsCX5IbRZcKeYwwG2sNsm85m4JX6/rbkHjMOXewPr5vlCYBztcV
/B8lBvNBLd+W2QZslDt41JIUa89pvPQILRoXLNbik9qc9ZTCe0cc9gzeovRGTqh6EbYRfncm
k8AeU4fEBNplL3o5WVpsdSEYk7nN7J6eDcmZcBNN91AKHNFwi4Rihq1R7CM9jKinP2whf7Ks
fs85cfxW3phNsEfRLSv+2eFgm0KqNnPZKERoR8oiXZVO86UmV6m0Q7BV102h1OSt5qQZxS12
l+fcsQH2q4Nx9TWjiED5rE8YbplXVbej1xbF3jp8UjLlfBEjefu2IaK2guRoGRnfEv8F7Kex
0rJ830UVEt1ERpIvfAIIBEW84042TPUt/x/8IevZgRy4maoXj5Cjyor4xYtZ4l64l8JjW4LE
kcxpJfab+5gZ1x0zrqtopIV/267Nf/7ZU5cJ/oFVtCKGNP0kX+C5NVC/81dsh07xMeiaN8JK
QdBgPhBkyh8BEiAWswMx2njksRAvQwtFE9o+fdEoNv6DHY0z1Dh7TwT9O7d37Fju9qqUi4Uw
t/iNY01mV2aTRtdJkfkpKMqTgwM=
/


--
-- PKG_LEAVE_CALCULATION  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_leave_calculation
IS
   /* This process has been developved by Md. Sayadur Rahaman
   On dated:27/02/2018.
   This used for leave opening calculation
   */
   PROCEDURE pro_leave_opening (
      p_employment_tp_cd   IN       VARCHAR2,
      p_lve_year           IN       VARCHAR2,
      p_emp_gid            IN       VARCHAR2,
      p_usr                IN       VARCHAR2,
      p_error              OUT      VARCHAR2
   )
   IS
      v_count         NUMBER (2)  := 0;
      v_close_yr      NUMBER (2)  := 0;
      v_open_yr       NUMBER (2)  := 0;
      v_leave_count   NUMBER (10) := 0;
      v_preyr_bal     NUMBER (10) := 0;
   BEGIN
      SELECT COUNT (1)
        INTO v_close_yr
        FROM hrm_leave_balance_mst
       WHERE lve_year = p_lve_year - 1 AND status = '1';

      --Chaecking the leave closing year
      IF v_close_yr > 0
      THEN
         SELECT COUNT (1)
           INTO v_open_yr
           FROM hrm_leave_balance_mst
          WHERE lve_year = p_lve_year AND status = '0';

         --Chaecking the leave opening year
         IF v_open_yr = 0 OR p_emp_gid IS NOT NULL
         THEN
            FOR i IN (SELECT   emp_gid, employment_tp_cd, sex_cd, desig_cd,
                               service_cd
                          FROM hrm_employee
                         WHERE employment_tp_cd = p_employment_tp_cd
                           AND activity_cd = '01'
                      ORDER BY employment_tp_cd, sex_cd, desig_cd, service_cd)
            LOOP
               FOR j IN (SELECT   m.levtp_cd, m.lev_catagory,
                                  m.time_limit_st, d.number_of_limit,
                                  d.entitle_leave
                             FROM hrm_leave_setup_mst m,
                                  hrm_leave_setup_dtl d
                            WHERE m.setup_cd = d.setup_cd
                              AND (   (emp_tp_st = '0' AND 1 = 1)
                                   OR (    emp_tp_st = '1'
                                       AND d.employment_tp_cd =
                                                            i.employment_tp_cd
                                      )
                                  )
                              AND (   (gender_st = '0' AND 1 = 1)
                                   OR (    gender_st = '1'
                                       AND d.gender_cd = i.sex_cd
                                      )
                                  )
                              AND (   (desig_st = '0' AND 1 = 1)
                                   OR (    desig_st = '1'
                                       AND d.desig_cd = i.desig_cd
                                      )
                                  )
                              AND (   (service_st = '0' AND 1 = 1)
                                   OR (    service_st = '1'
                                       AND d.service_cd = i.service_cd
                                      )
                                  )
                         ORDER BY m.levtp_cd)
               LOOP
                  BEGIN
                     SELECT COUNT (1)
                       INTO v_count
                       FROM hrm_leave_balance
                      WHERE emp_gid = i.emp_gid
                        AND levtp_cd = j.levtp_cd
                        AND lve_year = p_lve_year;

                     IF v_count = 0
                     THEN
                        IF j.time_limit_st = '1'
                        THEN
                           SELECT COUNT (1)
                             INTO v_leave_count
                             FROM hrm_leave_application
                            WHERE emp_gid = i.emp_gid
                              AND levtp_cd = j.levtp_cd
                              AND status <> '2';

                           IF v_leave_count < j.number_of_limit
                           THEN       ---Checking the avlaible number of leave
                              IF j.lev_catagory = '0'
                              THEN                                   --Normal
                                 pkg_leave_calculation.pro_insert_leave
                                    (p_emp_gid               => i.emp_gid,
                                     p_employment_tp_cd      => i.employment_tp_cd,
                                     p_lve_year              => p_lve_year,
                                     p_levtp_cd              => j.levtp_cd,
                                     p_no_of_leave           => (  j.number_of_limit
                                                                 - v_leave_count
                                                                ),
                                     p_prev_leave            => 0,
                                     p_leave_avil            => j.entitle_leave,
                                     p_leave_balance         => j.entitle_leave,
                                     p_i_usr                 => p_usr
                                    );
                              ELSIF j.lev_catagory = '2'
                              THEN                                  --Saleable
                                 pkg_leave_calculation.pro_insert_leave
                                    (p_emp_gid               => i.emp_gid,
                                     p_employment_tp_cd      => i.employment_tp_cd,
                                     p_lve_year              => p_lve_year,
                                     p_levtp_cd              => j.levtp_cd,
                                     p_no_of_leave           => (  j.number_of_limit
                                                                 - v_leave_count
                                                                ),
                                     p_prev_leave            => 0,
                                     p_leave_avil            => j.entitle_leave,
                                     p_leave_balance         => j.entitle_leave,
                                     p_i_usr                 => p_usr
                                    );
                              ELSIF j.lev_catagory = '3'
                              THEN                  --'2'=Merge with next year
                                 v_preyr_bal :=
                                    fun_prev_leave
                                       (p_emp_gid               => i.emp_gid,
                                        p_employment_tp_cd      => i.employment_tp_cd,
                                        p_lve_year              => p_lve_year,
                                        p_levtp_cd              => j.levtp_cd
                                       );
                                 pkg_leave_calculation.pro_insert_leave
                                    (p_emp_gid               => i.emp_gid,
                                     p_employment_tp_cd      => i.employment_tp_cd,
                                     p_lve_year              => p_lve_year,
                                     p_levtp_cd              => j.levtp_cd,
                                     p_no_of_leave           => (  j.number_of_limit
                                                                 - v_leave_count
                                                                ),
                                     p_prev_leave            => v_preyr_bal,
                                     p_leave_avil            => j.entitle_leave,
                                     p_leave_balance         =>   j.entitle_leave
                                                                + v_preyr_bal,
                                     p_i_usr                 => p_usr
                                    );
                              END IF;
                           ELSE
                              NULL;
                           --There is no available leave of this employee
                           END IF;
                        ELSE
                           --Those leave which have no "no of limit boundary"
                           IF j.lev_catagory = '0'
                           THEN                                      --Normal
                              pkg_leave_calculation.pro_insert_leave
                                   (p_emp_gid               => i.emp_gid,
                                    p_employment_tp_cd      => i.employment_tp_cd,
                                    p_lve_year              => p_lve_year,
                                    p_levtp_cd              => j.levtp_cd,
                                    p_no_of_leave           => j.entitle_leave,
                                    p_prev_leave            => 0,
                                    p_leave_avil            => j.entitle_leave,
                                    p_leave_balance         => j.entitle_leave,
                                    p_i_usr                 => p_usr
                                   );
                           ELSIF j.lev_catagory = '2'
                           THEN                                     --Saleable
                              pkg_leave_calculation.pro_insert_leave
                                   (p_emp_gid               => i.emp_gid,
                                    p_employment_tp_cd      => i.employment_tp_cd,
                                    p_lve_year              => p_lve_year,
                                    p_levtp_cd              => j.levtp_cd,
                                    p_no_of_leave           => j.entitle_leave,
                                    p_prev_leave            => 0,
                                    p_leave_avil            => j.entitle_leave,
                                    p_leave_balance         => j.entitle_leave,
                                    p_i_usr                 => p_usr
                                   );
                           ELSIF j.lev_catagory = '3'
                           THEN                     --'2'=Merge with next year
                              v_preyr_bal :=
                                 fun_prev_leave
                                    (p_emp_gid               => i.emp_gid,
                                     p_employment_tp_cd      => i.employment_tp_cd,
                                     p_lve_year              => p_lve_year,
                                     p_levtp_cd              => j.levtp_cd
                                    );
                              pkg_leave_calculation.pro_insert_leave
                                    (p_emp_gid               => i.emp_gid,
                                     p_employment_tp_cd      => i.employment_tp_cd,
                                     p_lve_year              => p_lve_year,
                                     p_levtp_cd              => j.levtp_cd,
                                     p_no_of_leave           => j.entitle_leave,
                                     p_prev_leave            => v_preyr_bal,
                                     p_leave_avil            => j.entitle_leave,
                                     p_leave_balance         =>   j.entitle_leave
                                                                + v_preyr_bal,
                                     p_i_usr                 => p_usr
                                    );
                           END IF;
                        END IF;
                     ELSE
                        NULL;  --Already leave calculation has been completed
                     END IF;
                  END;
               END LOOP;
            END LOOP;

            p_error := NULL;
         ELSE
            p_error := 'Leave calculation has been completed of this year!';
         END IF;
      ELSE
         p_error := 'Previous Year is not yet closed!';
      END IF;
   END;

   PROCEDURE pro_leave_closing (
      p_employment_tp_cd   IN       VARCHAR2,
      p_lve_year           IN       VARCHAR2,
      p_emp_gid            IN       VARCHAR2,
      p_usr                IN       VARCHAR2,
      p_error              OUT      VARCHAR2
   )
   IS
   BEGIN
      NULL;
   END;

   PROCEDURE pro_insert_leave (
      p_emp_gid            IN   NUMBER,
      p_employment_tp_cd   IN   VARCHAR2,
      p_lve_year           IN   NUMBER,
      p_levtp_cd           IN   VARCHAR2,
      p_no_of_leave        IN   NUMBER,
      p_prev_leave         IN   NUMBER,
      p_leave_avil         IN   NUMBER,
      p_leave_balance      IN   NUMBER,
      p_i_usr              IN   VARCHAR2
   )
   IS
   BEGIN
      INSERT INTO hrm_leave_balance
                  (emp_gid, employment_tp_cd, lve_year, levtp_cd,
                   no_of_leave, prev_leave, leave_avil,
                   leave_balance, i_usr, i_dt
                  )
           VALUES (p_emp_gid, p_employment_tp_cd, p_lve_year, p_levtp_cd,
                   p_no_of_leave, p_prev_leave, p_leave_avil,
                   p_leave_balance, p_i_usr, SYSDATE
                  );
   END;

   FUNCTION fun_prev_leave (
      p_emp_gid            IN   NUMBER,
      p_employment_tp_cd   IN   VARCHAR2,
      p_lve_year           IN   NUMBER,
      p_levtp_cd           IN   VARCHAR2
   )
      RETURN NUMBER
   AS
      v_pre_leave_balance   NUMBER (10) := 0;
   BEGIN
      BEGIN
         SELECT NVL (leave_balance, 0)
           INTO v_pre_leave_balance
           FROM hrm_leave_balance
          WHERE emp_gid = p_emp_gid
            AND lve_year = p_lve_year - 1
            AND levtp_cd = p_levtp_cd;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_pre_leave_balance := 0;
      END;

      RETURN v_pre_leave_balance;
   END;
END;
/


--
-- PKG_LIVE_DATA_MGR  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_live_data_mgr
IS
   PROCEDURE pro_proposal_info
   IS
      v_tab      VARCHAR2 (50);
      v_errror   VARCHAR2 (500);
      v_cnt      NUMBER (4)     := 0;

      CURSOR cur_proposal
      IS
         SELECT pgid, proposal_dt, assurance_type, i_usr, i_dt, u_usr, u_dt,
                policy_no, comm_dt, proposal_no, agent_id, servicing_office,
                policy_catg_cd, project_cd, urban_rural, sl_no, office_cd,
                ins_tp_cd, review, review_by, review_dt, proposal_sl_no,
                check_digit, old_policy_no
           FROM ins_p_proposal@dbl_dmgdb R
          WHERE i_usr = 'SLICL'
            AND NOT EXISTS (
                           SELECT 1
                             FROM ins_p_proposal p
                            WHERE p.policy_no = r.policy_no
                            )
            AND TRUNC(r.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR');

      CURSOR cur_personal
      IS
         SELECT pgid, party_cd, party_id, sl_no, party_name, relate_party_id,
                party_party_relation, father_name, mother_name, sex_cd, dob,
                age_docu_cd, pob, country_cd, marital_status, children_no,
                identification_mark, edu_qual_cd, edu_docu_cd, occu_cd,
                employer_name, designation, annual_income, income_source,
                tin, percentage, i_usr, i_dt, u_usr, u_dt, occu_class_cd,
                occu_scope_cd, occu_base_cd, nid, employee_name, age
           FROM ins_p_personal@dbl_dmgdb r
          WHERE i_usr = 'SLICL'
            AND EXISTS (
                               SELECT 1
                                 FROM ins_p_proposal p
                                WHERE p.pgid = r.pgid
                                  AND TRUNC(p.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR')
                            )
            AND NOT EXISTS (SELECT 1
                              FROM ins_p_personal l
                             WHERE l.pgid = r.pgid)
            AND TRUNC(r.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR');

      CURSOR cur_address
      IS
         SELECT pgid, party_cd, party_id, p_address_1, p_address_2,
                p_country_cd, p_division_cd, p_district_cd, p_thana_cd,
                p_po_cd, p_phone_no, t_address, t_country_cd, t_division_cd,
                t_district_cd, t_thana_cd, t_po_cd, t_phone_no, mobile_no,
                fax_no, e_mail, i_usr, i_dt, u_usr, u_dt
           FROM ins_p_address@dbl_dmgdb r
          WHERE i_usr = 'SLICL'
            AND EXISTS (
                               SELECT 1
                                 FROM ins_p_proposal p
                                WHERE p.pgid = r.pgid
                                  AND TRUNC(p.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR')
                            )
            AND NOT EXISTS (SELECT 1
                              FROM ins_p_address l
                             WHERE l.pgid = r.pgid)
            AND TRUNC(r.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR');

      CURSOR cur_agent
      IS
         SELECT pgid, agent_id, status, i_usr, i_dt, u_usr, u_dt, accepted
           FROM ins_p_agent@dbl_dmgdb r
          WHERE i_usr = 'SLICL'
            AND EXISTS (
                               SELECT 1
                                 FROM ins_p_proposal p
                                WHERE p.pgid = r.pgid
                                  AND TRUNC(p.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR')
                            )
            AND NOT EXISTS (SELECT 1
                              FROM ins_p_agent l
                             WHERE l.pgid = r.pgid)
            AND TRUNC(r.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR');

      CURSOR cur_basic
      IS
         SELECT pgid, product_cd, age, term, pay_mode_cd, option_cd,
                objective_cd, i_usr, i_dt, u_usr, u_dt, expected_premium,
                installment_premium, gender_extra, occupational_extra,
                sum_assured_rebate, pay_mode_rebate, sum_assured,
                staff_rebate, emp_id, desig_cd, office_cd, join_dt, emp_gid,
                region
           FROM ins_p_basic@dbl_dmgdb r
          WHERE i_usr = 'SLICL'
            AND EXISTS (
                               SELECT 1
                                 FROM ins_p_proposal p
                                WHERE p.pgid = r.pgid
                                  AND TRUNC(p.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR')
                            )
            AND NOT EXISTS (SELECT 1
                              FROM ins_p_basic l
                             WHERE l.pgid = r.pgid)
            AND TRUNC(r.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR');

      CURSOR cur_premium
      IS
         SELECT pgid, term_from, term_to, yrl_premium, inst_premium, i_usr,
                i_dt, u_usr, u_dt
           FROM ins_premium@dbl_dmgdb r
          WHERE i_usr = 'SLICL'
            AND EXISTS (
                               SELECT 1
                                 FROM ins_p_proposal p
                                WHERE p.pgid = r.pgid
                                  AND TRUNC(p.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR')
                            )
            AND NOT EXISTS (SELECT 1
                              FROM ins_premium l
                             WHERE l.pgid = r.pgid)
            AND TRUNC(r.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR');

      CURSOR cur_summery
      IS
         SELECT pgid, proposal_date, comm_date, risk_date, fpr_no, dob, age,
                age_docu_cd, sex_cd, option_cd, sum_assured, product_cd,
                term, pay_mode_cd, policy_installment, life_premium,
                suppl_ben_premium, suppl_product_premium, pay_mode_rebate,
                staff_rebate, sum_rebate, total_yearly_premium,
                installment_premium, maturity_date, zone_cd, agent_id,
                cession_no, last_paid_inst_no, last_paid_date,
                next_due_inst_no, next_due_date, policy_status,
                apparal_state_cd, ownership_cd, i_usr, i_dt, u_usr, u_dt,
                emp_gid, suspense_amt, cession_dt, office_cd,
                fpr_issue_invalid, policy_status_dt, paid_up_dt,
                paid_up_status, gender_extra_amt, occu_extra_amt,
                life_class_extra_amt, accepted_life_std_class_cd,
                extra_premium, do_gid, do_office_cd, dm_gid, re_ins_amount,
                last_adjustment_dt, fpr_issue, branch_off, sales_off,
                zonal_off, regional_off, servicing_off, policy_catg_cd,
                process_user, process_date, active_status, re_ins_status,
                pps_cd, ins_tp_cd, fpr_date
           FROM ins_p_summery@dbl_dmgdb r
          WHERE i_usr = 'SLICL'
            AND EXISTS (
                               SELECT 1
                                 FROM ins_p_proposal p
                                WHERE p.pgid = r.pgid
                                  AND TRUNC(p.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR')
                            )
            AND NOT EXISTS (SELECT 1
                              FROM ins_p_summery l
                             WHERE l.pgid = r.pgid)
            AND TRUNC(r.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR');

      CURSOR cur_suppben
      IS
         SELECT pgid, supp_ben_cd, supp_ben_term, i_usr, i_dt, u_usr, u_dt,
                premium, chart_acc_no, installment_premium
           FROM ins_p_supp_benefit@dbl_dmgdb r
          WHERE i_usr = 'SLICL'
            AND EXISTS (
                               SELECT 1
                                 FROM ins_p_proposal p
                                WHERE p.pgid = r.pgid
                                  AND TRUNC(p.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR')
                            )
            AND NOT EXISTS (SELECT 1
                              FROM ins_p_supp_benefit l
                             WHERE l.pgid = r.pgid)
            AND TRUNC(r.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR');
   BEGIN
      v_tab := 'ins_p_proposal';
      v_cnt := 0;

      FOR i IN cur_proposal
      LOOP
         BEGIN
            INSERT INTO ins_p_proposal
                        (pgid, proposal_dt, assurance_type, i_usr,
                         i_dt, u_usr, u_dt, policy_no, comm_dt,
                         proposal_no, agent_id, servicing_office,
                         policy_catg_cd, project_cd, urban_rural,
                         sl_no, office_cd, ins_tp_cd, review,
                         review_by, review_dt, proposal_sl_no,
                         check_digit, old_policy_no
                        )
                 VALUES (i.pgid, i.proposal_dt, i.assurance_type, i.i_usr,
                         i.i_dt, i.u_usr, i.u_dt, i.policy_no, i.comm_dt,
                         i.proposal_no, i.agent_id, i.servicing_office,
                         i.policy_catg_cd, i.project_cd, i.urban_rural,
                         i.sl_no, i.office_cd, i.ins_tp_cd, i.review,
                         i.review_by, i.review_dt, i.proposal_sl_no,
                         i.check_digit, i.old_policy_no
                        );

            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
      v_tab := 'ins_p_personal';
      v_cnt := 0;

      FOR i IN cur_personal
      LOOP
         BEGIN
            INSERT INTO ins_p_personal
                        (pgid, party_cd, party_id, sl_no,
                         party_name, relate_party_id,
                         party_party_relation, father_name,
                         mother_name, sex_cd, dob, age_docu_cd,
                         pob, country_cd, marital_status,
                         children_no, identification_mark,
                         edu_qual_cd, edu_docu_cd, occu_cd,
                         employer_name, designation, annual_income,
                         income_source, tin, percentage, i_usr,
                         i_dt, u_usr, u_dt, occu_class_cd,
                         occu_scope_cd, occu_base_cd, nid,
                         employee_name, age
                        )
                 VALUES (i.pgid, i.party_cd, i.party_id, i.sl_no,
                         i.party_name, i.relate_party_id,
                         i.party_party_relation, i.father_name,
                         i.mother_name, i.sex_cd, i.dob, i.age_docu_cd,
                         i.pob, i.country_cd, i.marital_status,
                         i.children_no, i.identification_mark,
                         i.edu_qual_cd, i.edu_docu_cd, i.occu_cd,
                         i.employer_name, i.designation, i.annual_income,
                         i.income_source, i.tin, i.percentage, i.i_usr,
                         i.i_dt, i.u_usr, i.u_dt, i.occu_class_cd,
                         i.occu_scope_cd, i.occu_base_cd, i.nid,
                         i.employee_name, i.age
                        );

            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
      v_tab := 'ins_p_address';
      v_cnt := 0;

      FOR i IN cur_address
      LOOP
         BEGIN
            INSERT INTO ins_p_address
                        (pgid, party_cd, party_id, p_address_1,
                         p_address_2, p_country_cd, p_division_cd,
                         p_district_cd, p_thana_cd, p_po_cd,
                         p_phone_no, t_address, t_country_cd,
                         t_division_cd, t_district_cd, t_thana_cd,
                         t_po_cd, t_phone_no, mobile_no, fax_no,
                         e_mail, i_usr, i_dt, u_usr, u_dt
                        )
                 VALUES (i.pgid, i.party_cd, i.party_id, i.p_address_1,
                         i.p_address_2, i.p_country_cd, i.p_division_cd,
                         i.p_district_cd, i.p_thana_cd, i.p_po_cd,
                         i.p_phone_no, i.t_address, i.t_country_cd,
                         i.t_division_cd, i.t_district_cd, i.t_thana_cd,
                         i.t_po_cd, i.t_phone_no, i.mobile_no, i.fax_no,
                         i.e_mail, i.i_usr, i.i_dt, i.u_usr, i.u_dt
                        );

            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
      v_tab := 'ins_p_agent';
      v_cnt := 0;

      FOR i IN cur_agent
      LOOP
         BEGIN
            INSERT INTO ins_p_agent
                        (pgid, agent_id, status, i_usr, i_dt,
                         u_usr, u_dt, accepted
                        )
                 VALUES (i.pgid, i.agent_id, i.status, i.i_usr, i.i_dt,
                         i.u_usr, i.u_dt, i.accepted
                        );

            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
      v_tab := 'ins_p_basic';
      v_cnt := 0;

      FOR i IN cur_basic
      LOOP
         BEGIN
            INSERT INTO ins_p_basic
                        (pgid, product_cd, age, term, pay_mode_cd,
                         option_cd, objective_cd, i_usr, i_dt,
                         u_usr, u_dt, expected_premium,
                         installment_premium, gender_extra,
                         occupational_extra, sum_assured_rebate,
                         pay_mode_rebate, sum_assured, staff_rebate,
                         emp_id, desig_cd, office_cd, join_dt,
                         emp_gid, region
                        )
                 VALUES (i.pgid, i.product_cd, i.age, i.term, i.pay_mode_cd,
                         i.option_cd, i.objective_cd, i.i_usr, i.i_dt,
                         i.u_usr, i.u_dt, i.expected_premium,
                         i.installment_premium, i.gender_extra,
                         i.occupational_extra, i.sum_assured_rebate,
                         i.pay_mode_rebate, i.sum_assured, i.staff_rebate,
                         i.emp_id, i.desig_cd, i.office_cd, i.join_dt,
                         i.emp_gid, i.region
                        );

            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
      v_tab := 'ins_premium';
      v_cnt := 0;

      FOR i IN cur_premium
      LOOP
         BEGIN
            INSERT INTO ins_premium
                        (pgid, term_from, term_to, yrl_premium,
                         inst_premium, i_usr, i_dt, u_usr, u_dt
                        )
                 VALUES (i.pgid, i.term_from, i.term_to, i.yrl_premium,
                         i.inst_premium, i.i_usr, i.i_dt, i.u_usr, i.u_dt
                        );

            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
      v_tab := 'ins_p_summery';
      v_cnt := 0;

      FOR i IN cur_summery
      LOOP
         BEGIN
            INSERT INTO ins_p_summery
                        (pgid, proposal_date, comm_date, risk_date,
                         fpr_no, dob, age, age_docu_cd, sex_cd,
                         option_cd, sum_assured, product_cd, term,
                         pay_mode_cd, policy_installment,
                         life_premium, suppl_ben_premium,
                         suppl_product_premium, pay_mode_rebate,
                         staff_rebate, sum_rebate,
                         total_yearly_premium, installment_premium,
                         maturity_date, zone_cd, agent_id,
                         cession_no, last_paid_inst_no,
                         last_paid_date, next_due_inst_no,
                         next_due_date, policy_status,
                         apparal_state_cd, ownership_cd, i_usr,
                         i_dt, u_usr, u_dt, emp_gid, suspense_amt,
                         cession_dt, office_cd, fpr_issue_invalid,
                         policy_status_dt, paid_up_dt, paid_up_status,
                         gender_extra_amt, occu_extra_amt,
                         life_class_extra_amt,
                         accepted_life_std_class_cd, extra_premium,
                         do_gid, do_office_cd, dm_gid,
                         re_ins_amount, last_adjustment_dt, fpr_issue,
                         branch_off, sales_off, zonal_off,
                         regional_off, servicing_off, policy_catg_cd,
                         process_user, process_date, active_status,
                         re_ins_status, pps_cd, ins_tp_cd, fpr_date
                        )
                 VALUES (i.pgid, i.proposal_date, i.comm_date, i.risk_date,
                         i.fpr_no, i.dob, i.age, i.age_docu_cd, i.sex_cd,
                         i.option_cd, i.sum_assured, i.product_cd, i.term,
                         i.pay_mode_cd, i.policy_installment,
                         i.life_premium, i.suppl_ben_premium,
                         i.suppl_product_premium, i.pay_mode_rebate,
                         i.staff_rebate, i.sum_rebate,
                         i.total_yearly_premium, i.installment_premium,
                         i.maturity_date, i.zone_cd, i.agent_id,
                         i.cession_no, i.last_paid_inst_no,
                         i.last_paid_date, i.next_due_inst_no,
                         i.next_due_date, i.policy_status,
                         i.apparal_state_cd, i.ownership_cd, i.i_usr,
                         i.i_dt, i.u_usr, i.u_dt, i.emp_gid, i.suspense_amt,
                         i.cession_dt, i.office_cd, i.fpr_issue_invalid,
                         i.policy_status_dt, i.paid_up_dt, i.paid_up_status,
                         i.gender_extra_amt, i.occu_extra_amt,
                         i.life_class_extra_amt,
                         i.accepted_life_std_class_cd, i.extra_premium,
                         i.do_gid, i.do_office_cd, i.dm_gid,
                         i.re_ins_amount, i.last_adjustment_dt, i.fpr_issue,
                         i.branch_off, i.sales_off, i.zonal_off,
                         i.regional_off, i.servicing_off, i.policy_catg_cd,
                         i.process_user, i.process_date, i.active_status,
                         i.re_ins_status, i.pps_cd, i.ins_tp_cd, i.fpr_date
                        );

            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
      v_tab := 'ins_p_supp_benefit';
      v_cnt := 0;

      FOR i IN cur_suppben
      LOOP
         BEGIN
            INSERT INTO ins_p_supp_benefit
                        (pgid, supp_ben_cd, supp_ben_term, i_usr,
                         i_dt, u_usr, u_dt, premium, chart_acc_no,
                         installment_premium
                        )
                 VALUES (i.pgid, i.supp_ben_cd, i.supp_ben_term, i.i_usr,
                         i.i_dt, i.u_usr, i.u_dt, i.premium, i.chart_acc_no,
                         i.installment_premium
                        );

            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_errror := SQLERRM;
         ROLLBACK;

         INSERT INTO dmg_log_data_mgr
                     (pgid, error_desc, error_tab, data_tp
                     )
              VALUES (NULL, v_errror, v_tab, 'P'
                     );

         COMMIT;
   END pro_proposal_info;

   PROCEDURE pro_collection_info
   IS
      v_fp_receive_id   acc_advance_receivables.receive_id%TYPE;
      v_receive_id      acc_receivables.receive_id%TYPE;
      v_tab             VARCHAR2 (50);
      v_errror          VARCHAR2 (500);
      v_cnt             NUMBER (4)                                := 0;

      CURSOR cur_due
      IS
         SELECT pgid, installment_premium, paid_amount, balance, pay_status,
                ref_voucher, i_usr, i_dt, u_usr, u_dt, payment_date,
                prem_year_status, sl_no, policy_status, installment_no,
                next_due_dt, total_installment, proposer_pk1,
                proposed_status, date_of_com, last_paid_dt, sum_assured,
                pid_term, pay_mode, pol_option, do_id, dm_id, branch_off,
                sales_off, zonal_off, regional_off, agent_id, policy_no,
                office_cd, process_user, process_date, proposer_pk,
                fp_receive_id
           FROM ins_prem_acc_receivable@dbl_dmgdb r
          WHERE i_usr = 'SLICL' AND NVL (proposed_status, '0') <> '0'
            AND EXISTS (
                               SELECT 1
                                 FROM ins_p_proposal p
                                WHERE p.pgid = r.pgid
                                  AND TRUNC(p.i_dt) = TO_DATE ('02/06/2015', 'DD/MM/RRRR')
                            )
            AND r.i_dt >= TO_DATE ('10/03/2015', 'DD/MM/RRRR');

      --and pgid = '1005300700115841';
      CURSOR cur_adv_coll
      IS
         SELECT receive_id, receive_date, pgid, proposal_no, collection_type,
                mode_tp, coll_slip_no, coll_slip_rec_dt, receive_mode,
                cheque_no, cheque_date, to_bank_cd, to_br_cd, coll_amount,
                status, rec_status, cheque_deposit, com_calculated,
                coll_sl_no, office_code, active_office_cd, adjustment_date,
                adjusted_by, com_exe_date, vouch_ref, interoffice_voucher,
                received_by, i_usr, i_dt, u_usr, u_dt, party_nm, adj_voucher,
                slno, collected_late_fee, stamp_amt, amt_submit_st,
                amt_submit_dt, coll_check_status, coll_check_dt,
                coll_checked_by, product_cd, old_active_off_cd
           FROM acc_advance_receivables@dbl_dmgdb r
          WHERE i_usr = 'SLICL'
            AND EXISTS (
                               SELECT 1
                                 FROM ins_p_proposal p
                                WHERE p.pgid = r.pgid
                                  AND TRUNC(p.i_dt) = TO_DATE ('02/06/2015', 'DD/MM/RRRR')
                            )
            AND r.i_dt >= TO_DATE ('10/03/2015', 'DD/MM/RRRR');

      --and pgid = '1005300700115841';
      CURSOR cur_coll
      IS
         SELECT receive_id, receive_date, received_by, collection_type,
                office_code, receive_mode, coll_slip_no, coll_amount, pgid,
                bank_branch_name, cheque_no, cheque_date, vouch_ref,
                coll_slip_by, i_usr, i_dt, u_usr, u_dt, coll_slip_rec_dt,
                to_bank_cd, to_br_cd, status, premium_status,
                installment_no_from, avl_sus_amt, installment_no_to,
                due_dt_from, due_dt_to, tot_premium_amt, late_fee,
                interoffice_voucher, active_office_cd, mode_tp, coll_sl_no,
                web_feed_send, rec_status, latefee_waiver, cheque_deposit,
                receipt_status, collection_time_pol_stat, com_calculated,
                adjustment_date, adv_status, man_adjusted, adjusted_by,
                com_exe_date, last_due_dt_of_com_exe, alt_sl,
                adjusted_by_dgh, stamp_amt, amt_submit_st, amt_submit_dt,
                coll_check_status, coll_check_dt, coll_checked_by,
                summery_flag, bank_deposit_st
           FROM acc_receivables@dbl_dmgdb r
          WHERE i_usr = 'SLICL'
            AND EXISTS (
                               SELECT 1
                                 FROM ins_p_proposal p
                                WHERE p.pgid = r.pgid
                                  AND TRUNC(p.i_dt) = TO_DATE ('02/06/2015', 'DD/MM/RRRR')
                            )
            AND r.i_dt >= TO_DATE ('10/03/2015', 'DD/MM/RRRR');
   --and pgid = '1005300700115841';
   BEGIN
      v_tab := 'acc_advance_receivables';
      v_cnt := 0;

      FOR i IN cur_adv_coll
      LOOP
         BEGIN
            /*SELECT acc_adv_rec_id.NEXTVAL
              INTO v_fp_receive_id
              FROM DUAL;*/
            INSERT INTO acc_advance_receivables
                        (receive_id, receive_date, pgid,
                         proposal_no, collection_type, mode_tp,
                         coll_slip_no, coll_slip_rec_dt, receive_mode,
                         cheque_no, cheque_date, to_bank_cd,
                         to_br_cd, coll_amount, status, rec_status,
                         cheque_deposit, com_calculated, coll_sl_no,
                         office_code, active_office_cd,
                         adjustment_date, adjusted_by, com_exe_date,
                         vouch_ref, interoffice_voucher, received_by,
                         i_usr, i_dt, u_usr, u_dt, party_nm,
                         adj_voucher, slno, collected_late_fee,
                         stamp_amt, amt_submit_st, amt_submit_dt,
                         coll_check_status, coll_check_dt,
                         coll_checked_by, product_cd, old_active_off_cd
                        )
                 VALUES (i.receive_id, i.receive_date, i.pgid,
                         i.proposal_no, i.collection_type, i.mode_tp,
                         i.coll_slip_no, i.coll_slip_rec_dt, i.receive_mode,
                         i.cheque_no, i.cheque_date, i.to_bank_cd,
                         i.to_br_cd, i.coll_amount, i.status, i.rec_status,
                         i.cheque_deposit, i.com_calculated, i.coll_sl_no,
                         i.office_code, i.active_office_cd,
                         i.adjustment_date, i.adjusted_by, i.com_exe_date,
                         i.vouch_ref, i.interoffice_voucher, i.received_by,
                         i.i_usr, i.i_dt, i.u_usr, i.u_dt, i.party_nm,
                         i.adj_voucher, i.slno, i.collected_late_fee,
                         i.stamp_amt, i.amt_submit_st, i.amt_submit_dt,
                         i.coll_check_status, i.coll_check_dt,
                         i.coll_checked_by, i.product_cd, i.old_active_off_cd
                        );

            /*UPDATE ins_prem_acc_receivable
               SET fp_receive_id = v_fp_receive_id
             WHERE pgid = i.pgid
               AND fp_receive_id = i.receive_id
               AND installment_no = '1';*/
            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
      v_tab := 'acc_receivables';
      v_cnt := 0;

      FOR i IN cur_coll
      LOOP
         BEGIN
            --count for pr no if not found then insert--
            /*SELECT acc_rec_id.NEXTVAL
              INTO v_receive_id
              FROM DUAL;*/
            
            ---count for instl no. if not found then insert--
            ---if found then get max instl no then using this insert the data---
            
            INSERT INTO acc_receivables
                        (receive_id, receive_date, received_by,
                         collection_type, office_code, receive_mode,
                         coll_slip_no, coll_amount, pgid,
                         bank_branch_name, cheque_no, cheque_date,
                         vouch_ref, coll_slip_by, i_usr, i_dt,
                         u_usr, u_dt, coll_slip_rec_dt, to_bank_cd,
                         to_br_cd, status, premium_status,
                         installment_no_from, avl_sus_amt,
                         installment_no_to, due_dt_from, due_dt_to,
                         tot_premium_amt, late_fee,
                         interoffice_voucher, active_office_cd,
                         mode_tp, coll_sl_no, web_feed_send,
                         rec_status, latefee_waiver, cheque_deposit,
                         receipt_status, collection_time_pol_stat,
                         com_calculated, adjustment_date, adv_status,
                         man_adjusted, adjusted_by, com_exe_date,
                         last_due_dt_of_com_exe, alt_sl,
                         adjusted_by_dgh, stamp_amt, amt_submit_st,
                         amt_submit_dt, coll_check_status,
                         coll_check_dt, coll_checked_by, summery_flag,
                         bank_deposit_st
                        )
                 VALUES (i.receive_id, i.receive_date, i.received_by,
                         i.collection_type, i.office_code, i.receive_mode,
                         i.coll_slip_no, i.coll_amount, i.pgid,
                         i.bank_branch_name, i.cheque_no, i.cheque_date,
                         i.vouch_ref, i.coll_slip_by, i.i_usr, i.i_dt,
                         i.u_usr, i.u_dt, i.coll_slip_rec_dt, i.to_bank_cd,
                         i.to_br_cd, i.status, i.premium_status,
                         i.installment_no_from, i.avl_sus_amt,
                         i.installment_no_to, i.due_dt_from, i.due_dt_to,
                         i.tot_premium_amt, i.late_fee,
                         i.interoffice_voucher, i.active_office_cd,
                         i.mode_tp, i.coll_sl_no, i.web_feed_send,
                         i.rec_status, i.latefee_waiver, i.cheque_deposit,
                         i.receipt_status, i.collection_time_pol_stat,
                         i.com_calculated, i.adjustment_date, i.adv_status,
                         i.man_adjusted, i.adjusted_by, i.com_exe_date,
                         i.last_due_dt_of_com_exe, i.alt_sl,
                         i.adjusted_by_dgh, i.stamp_amt, i.amt_submit_st,
                         i.amt_submit_dt, i.coll_check_status,
                         i.coll_check_dt, i.coll_checked_by, i.summery_flag,
                         i.bank_deposit_st
                        );

            /*UPDATE ins_prem_acc_receivable
               SET proposer_pk = v_receive_id
             WHERE pgid = i.pgid AND proposer_pk = i.receive_id;*/
            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
      v_tab := 'ins_prem_acc_receivable';
      v_cnt := 0;

      FOR i IN cur_due
      LOOP
         BEGIN
            INSERT INTO ins_prem_acc_receivable
                        (pgid, installment_premium, paid_amount,
                         balance, pay_status, ref_voucher, i_usr,
                         i_dt, u_usr, u_dt, payment_date,
                         prem_year_status, sl_no, policy_status,
                         installment_no, next_due_dt,
                         total_installment, proposer_pk1,
                         proposed_status, date_of_com, last_paid_dt,
                         sum_assured, pid_term, pay_mode,
                         pol_option, do_id, dm_id, branch_off,
                         sales_off, zonal_off, regional_off,
                         agent_id, policy_no, office_cd,
                         process_user, process_date, proposer_pk,
                         fp_receive_id
                        )
                 VALUES (i.pgid, i.installment_premium, i.paid_amount,
                         i.balance, i.pay_status, i.ref_voucher, i.i_usr,
                         i.i_dt, i.u_usr, i.u_dt, i.payment_date,
                         i.prem_year_status, i.sl_no, i.policy_status,
                         i.installment_no, i.next_due_dt,
                         i.total_installment, i.proposer_pk1,
                         i.proposed_status, i.date_of_com, i.last_paid_dt,
                         i.sum_assured, i.pid_term, i.pay_mode,
                         i.pol_option, i.do_id, i.dm_id, i.branch_off,
                         i.sales_off, i.zonal_off, i.regional_off,
                         i.agent_id, i.policy_no, i.office_cd,
                         i.process_user, i.process_date, i.proposer_pk,
                         i.fp_receive_id
                        );

            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
      /*v_tab := 'acc_partial_receivables';

      INSERT INTO acc_partial_receivables
         SELECT *
           FROM acc_partial_receivables@dbl_dmgdb
          WHERE i_usr = 'SLICL';*/
      COMMIT;
   /*v_tab := 'acc_partial_receivables_ref';

   INSERT INTO acc_partial_receivables_ref
      SELECT *
        FROM acc_partial_receivables_ref@dbl_dmgdb;

   COMMIT;*/
   EXCEPTION
      WHEN OTHERS
      THEN
         v_errror := SQLERRM;
         ROLLBACK;

         INSERT INTO dmg_log_data_mgr
                     (pgid, error_desc, error_tab, data_tp
                     )
              VALUES (NULL, v_errror, v_tab, 'C'
                     );

         COMMIT;
   END pro_collection_info;

   
   PROCEDURE pro_coll_update
   IS
      CURSOR cur_coll
      IS
         SELECT l.pgid, c.policy_no, c.or_amount, c.receive_date,
                c.coll_slip_no, c.coll_slip_rec_dt, c.coll_amount,
                c.tot_premium_amt, c.tot_due_amt, late_fee, adjustment_date
           FROM slicl.prem_coll_mst_life@dbl_dmgdb c, ins_p_proposal l
          WHERE l.policy_no = LPAD (c.project_cd || c.policy_no, 15, 0)
            --AND c.policy_no = '0136170'
            AND l.i_usr = 'SLICL';
   BEGIN
      FOR i IN cur_coll
      LOOP
         FOR k IN (SELECT r.receive_id, r.coll_amount, r.pgid,
                          r.tot_premium_amt, r.late_fee
                     FROM acc_receivables r
                    WHERE pgid = i.pgid
                      AND coll_slip_no = i.coll_slip_no
                      AND coll_slip_rec_dt = i.coll_slip_rec_dt
                      AND NVL (receive_date, TRUNC (SYSDATE)) =
                                         NVL (i.receive_date, TRUNC (SYSDATE))
                      AND coll_amount = i.coll_amount
                      AND tot_premium_amt = i.tot_premium_amt
                      AND coll_amount <> i.or_amount)
         LOOP
            --dbms_output.put_line ((k.coll_amount + NVL (k.late_fee, 0))||'=='||k.tot_premium_amt);
            IF (i.or_amount + NVL (k.late_fee, 0)) >= k.tot_premium_amt
            THEN
               UPDATE acc_receivables
                  SET coll_amount = i.or_amount,
                      status = '1',
                      man_adjusted = '1',
                      u_usr = 'SLICL',
                      u_dt  = SYSDATE
                WHERE pgid = k.pgid AND receive_id = k.receive_id;

               UPDATE ins_prem_acc_receivable
                  SET paid_amount = installment_premium,
                      balance = 0,
                      pay_status = 1,
                      payment_date = i.adjustment_date,
                      proposed_status = '1',
                      u_usr = 'SLICL',
                      u_dt  = SYSDATE
                WHERE pgid = k.pgid AND proposer_pk = k.receive_id;
            ELSE
               UPDATE acc_receivables
                  SET coll_amount = i.or_amount,
                      u_usr = 'SLICL',
                      u_dt  = SYSDATE
                WHERE pgid = k.pgid AND receive_id = k.receive_id;
            END IF;
         END LOOP;
         
         COMMIT;
      END LOOP;
   END pro_coll_update;
   
   PROCEDURE pro_pending_coll_info
   IS
      v_fp_receive_id   acc_advance_receivables.receive_id%TYPE;
      v_receive_id      acc_receivables.receive_id%TYPE;
      v_tab             VARCHAR2 (50);
      v_errror          VARCHAR2 (500);
      v_cnt             NUMBER (4)                                := 0;
      v_rec_cnt         NUMBER (4)                                := 0;
      v_pr_cnt          NUMBER (4)                                := 0;
      v_max_instl_no    NUMBER (3);
      v_instl_no_from   NUMBER (3);
      v_instl_no_to     NUMBER (3);
      
      v_due_creat_errm      VARCHAR2(200);
      v_due_reate_no        NUMBER (3);

      CURSOR cur_due
      IS
         SELECT pgid, installment_premium, paid_amount, balance, pay_status,
                ref_voucher, i_usr, i_dt, u_usr, u_dt, payment_date,
                prem_year_status, sl_no, policy_status, installment_no,
                next_due_dt, total_installment, proposer_pk1,
                proposed_status, date_of_com, last_paid_dt, sum_assured,
                pid_term, pay_mode, pol_option, do_id, dm_id, branch_off,
                sales_off, zonal_off, regional_off, agent_id, policy_no,
                office_cd, process_user, process_date, proposer_pk,
                fp_receive_id
           FROM ins_prem_acc_receivable@dbl_dmgdb r
          WHERE i_usr = 'SLICL' AND NVL (proposed_status, '0') <> '0'
            AND r.i_dt = TO_DATE ('29/06/2015', 'DD/MM/RRRR');

      --and pgid = '1005300700115841';
      CURSOR cur_adv_coll
      IS
         SELECT receive_id, receive_date, pgid, proposal_no, collection_type,
                mode_tp, coll_slip_no, coll_slip_rec_dt, receive_mode,
                cheque_no, cheque_date, to_bank_cd, to_br_cd, coll_amount,
                status, rec_status, cheque_deposit, com_calculated,
                coll_sl_no, office_code, active_office_cd, adjustment_date,
                adjusted_by, com_exe_date, vouch_ref, interoffice_voucher,
                received_by, i_usr, i_dt, u_usr, u_dt, party_nm, adj_voucher,
                slno, collected_late_fee, stamp_amt, amt_submit_st,
                amt_submit_dt, coll_check_status, coll_check_dt,
                coll_checked_by, product_cd, old_active_off_cd
           FROM acc_advance_receivables@dbl_dmgdb r
          WHERE i_usr = 'SLICL'
            AND TRUNC(r.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR');

      --and pgid = '1005300700115841';
      CURSOR cur_coll
      IS
         SELECT receive_id, receive_date, received_by, collection_type,
                office_code, receive_mode, coll_slip_no, coll_amount, pgid,
                bank_branch_name, cheque_no, cheque_date, vouch_ref,
                coll_slip_by, i_usr, i_dt, u_usr, u_dt, coll_slip_rec_dt,
                to_bank_cd, to_br_cd, status, premium_status,
                installment_no_from, avl_sus_amt, installment_no_to,
                due_dt_from, due_dt_to, tot_premium_amt, late_fee,
                interoffice_voucher, active_office_cd, mode_tp, coll_sl_no,
                web_feed_send, rec_status, latefee_waiver, cheque_deposit,
                receipt_status, collection_time_pol_stat, com_calculated,
                adjustment_date, adv_status, man_adjusted, adjusted_by,
                com_exe_date, last_due_dt_of_com_exe, alt_sl,
                adjusted_by_dgh, stamp_amt, amt_submit_st, amt_submit_dt,
                coll_check_status, coll_check_dt, coll_checked_by,
                summery_flag, bank_deposit_st
           FROM acc_receivables@dbl_dmgdb r
          WHERE i_usr = 'SLICL'
            AND TRUNC(r.i_dt) = TO_DATE ('29/06/2015', 'DD/MM/RRRR')
            --and r.pgid = '0012310700701107'
            ;
   BEGIN
      v_tab := 'acc_advance_receivables';
      v_cnt := 0;

      /*FOR i IN cur_adv_coll
      LOOP
         BEGIN
            SELECT COUNT(PGID)
              INTO v_rec_cnt
              FROM acc_advance_receivables
             WHERE pgid = i.pgid;
             
            IF v_rec_cnt = 0 THEN
                SELECT acc_adv_rec_id.NEXTVAL
                  INTO v_fp_receive_id
                  FROM DUAL;
                  
                INSERT INTO acc_advance_receivables
                            (receive_id, receive_date, pgid,
                             proposal_no, collection_type, mode_tp,
                             coll_slip_no, coll_slip_rec_dt, receive_mode,
                             cheque_no, cheque_date, to_bank_cd,
                             to_br_cd, coll_amount, status, rec_status,
                             cheque_deposit, com_calculated, coll_sl_no,
                             office_code, active_office_cd,
                             adjustment_date, adjusted_by, com_exe_date,
                             vouch_ref, interoffice_voucher, received_by,
                             i_usr, i_dt, u_usr, u_dt, party_nm,
                             adj_voucher, slno, collected_late_fee,
                             stamp_amt, amt_submit_st, amt_submit_dt,
                             coll_check_status, coll_check_dt,
                             coll_checked_by, product_cd, old_active_off_cd
                            )
                     VALUES (v_fp_receive_id, i.receive_date, i.pgid,
                             i.proposal_no, i.collection_type, i.mode_tp,
                             i.coll_slip_no, i.coll_slip_rec_dt, i.receive_mode,
                             i.cheque_no, i.cheque_date, i.to_bank_cd,
                             i.to_br_cd, i.coll_amount, i.status, i.rec_status,
                             i.cheque_deposit, i.com_calculated, i.coll_sl_no,
                             i.office_code, i.active_office_cd,
                             i.adjustment_date, i.adjusted_by, i.com_exe_date,
                             i.vouch_ref, i.interoffice_voucher, i.received_by,
                             i.i_usr, i.i_dt, i.u_usr, i.u_dt, i.party_nm,
                             i.adj_voucher, i.slno, i.collected_late_fee,
                             i.stamp_amt, i.amt_submit_st, i.amt_submit_dt,
                             i.coll_check_status, i.coll_check_dt,
                             i.coll_checked_by, i.product_cd, i.old_active_off_cd
                            );

                UPDATE ins_prem_acc_receivable
                   SET paid_amount = installment_premium,
                       balance     = 0,
                       pay_status  = '1',
                       proposed_status = '1',
                       fp_receive_id = v_fp_receive_id
                 WHERE pgid = i.pgid
                   AND installment_no = '1';
                   
                IF SQL%NOTFOUND THEN
                    pro_policy_due_creation (
                               p_pgid     => i.pgid,
                               p_usr      => 'SLICL',
                               p_dt       => TRUNC(SYSDATE),
                               p_errm     => v_due_creat_errm,
                               p_record   => v_due_reate_no 
                            );
                            
                    UPDATE ins_prem_acc_receivable
                       SET paid_amount = installment_premium,
                           balance     = 0,
                           pay_status  = '1',
                           proposed_status = '1',
                           fp_receive_id = v_fp_receive_id
                     WHERE pgid = i.pgid
                       AND installment_no = '1';
                END IF;
                   
                v_cnt := v_cnt + 1;
            END IF;
            
            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;*/
      v_tab := 'acc_receivables';
      v_cnt := 0;

      FOR i IN cur_coll
      LOOP
         BEGIN
            --count for pr no if not found then insert--
            SELECT COUNT(PGID)
              INTO v_pr_cnt
              FROM acc_receivables
             WHERE pgid = i.pgid
               AND coll_slip_no = i.coll_slip_no;
            
            IF v_pr_cnt = 0 THEN 
                SELECT acc_rec_id.NEXTVAL
                  INTO v_receive_id
                  FROM DUAL;
                
                ---count for instl no. if not found then insert--
                ---if found then get max instl no then using this insert the data---
                SELECT MAX (i.installment_no_to)
                  INTO v_max_instl_no
                  FROM acc_receivables
                 WHERE pgid = i.pgid
                   AND rec_status = '1';
                
                --IF v_max_instl_no >= i.installment_no_from THEN
                    v_instl_no_from   := NVL(v_max_instl_no, 0) + 1;
                    v_instl_no_to     := v_instl_no_from + (i.installment_no_to - i.installment_no_from);
                /*ELSE
                    v_instl_no_from   := i.installment_no_from;
                    v_instl_no_to     := i.installment_no_to;
                END IF;*/
                 
                INSERT INTO acc_receivables
                            (receive_id, receive_date, received_by,
                             collection_type, office_code, receive_mode,
                             coll_slip_no, coll_amount, pgid,
                             bank_branch_name, cheque_no, cheque_date,
                             vouch_ref, coll_slip_by, i_usr, i_dt,
                             u_usr, u_dt, coll_slip_rec_dt, to_bank_cd,
                             to_br_cd, status, premium_status,
                             installment_no_from, avl_sus_amt,
                             installment_no_to, due_dt_from, due_dt_to,
                             tot_premium_amt, late_fee,
                             interoffice_voucher, active_office_cd,
                             mode_tp, coll_sl_no, web_feed_send,
                             rec_status, latefee_waiver, cheque_deposit,
                             receipt_status, collection_time_pol_stat,
                             com_calculated, adjustment_date, adv_status,
                             man_adjusted, adjusted_by, com_exe_date,
                             last_due_dt_of_com_exe, alt_sl,
                             adjusted_by_dgh, stamp_amt, amt_submit_st,
                             amt_submit_dt, coll_check_status,
                             coll_check_dt, coll_checked_by, summery_flag,
                             bank_deposit_st, receive_id_sl_no
                            )
                     VALUES (v_receive_id, i.receive_date, i.received_by,
                             i.collection_type, i.office_code, i.receive_mode,
                             i.coll_slip_no, i.coll_amount, i.pgid,
                             i.bank_branch_name, i.cheque_no, i.cheque_date,
                             i.vouch_ref, i.coll_slip_by, i.i_usr, i.i_dt,
                             i.u_usr, i.u_dt, i.coll_slip_rec_dt, i.to_bank_cd,
                             i.to_br_cd, i.status, i.premium_status,
                             v_instl_no_from, i.avl_sus_amt,
                             v_instl_no_to, i.due_dt_from, i.due_dt_to,
                             i.tot_premium_amt, i.late_fee,
                             i.interoffice_voucher, i.active_office_cd,
                             i.mode_tp, i.coll_sl_no, i.web_feed_send,
                             i.rec_status, i.latefee_waiver, i.cheque_deposit,
                             i.receipt_status, i.collection_time_pol_stat,
                             i.com_calculated, i.adjustment_date, i.adv_status,
                             i.man_adjusted, i.adjusted_by, i.com_exe_date,
                             i.last_due_dt_of_com_exe, i.alt_sl,
                             i.adjusted_by_dgh, i.stamp_amt, i.amt_submit_st,
                             i.amt_submit_dt, i.coll_check_status,
                             i.coll_check_dt, i.coll_checked_by, i.summery_flag,
                             i.bank_deposit_st, v_receive_id||i.coll_sl_no
                            );

                UPDATE ins_prem_acc_receivable
                   SET paid_amount = installment_premium,
                       balance     = 0,
                       pay_status  = '1',
                       proposed_status = '1',
                       proposer_pk = v_receive_id
                 WHERE pgid = i.pgid 
                   AND installment_no BETWEEN v_instl_no_from AND v_instl_no_to
                   AND proposer_pk IS NULL;
                   
                IF SQL%NOTFOUND THEN
                    pro_policy_due_creation (
                               p_pgid     => i.pgid,
                               p_usr      => 'SLICL',
                               p_dt       => TRUNC(SYSDATE),
                               p_errm     => v_due_creat_errm,
                               p_record   => v_due_reate_no 
                            );
                            
                    UPDATE ins_prem_acc_receivable
                       SET paid_amount = installment_premium,
                           balance     = 0,
                           pay_status  = '1',
                           proposed_status = '1',
                           proposer_pk = v_receive_id
                     WHERE pgid = i.pgid 
                       AND installment_no BETWEEN v_instl_no_from AND v_instl_no_to
                       AND proposer_pk IS NULL;
                END IF;
                   
                v_cnt := v_cnt + 1;
            END IF;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;
      
      /*
      v_tab := 'ins_prem_acc_receivable';
      v_cnt := 0;

      FOR i IN cur_due
      LOOP
         BEGIN
            INSERT INTO ins_prem_acc_receivable
                        (pgid, installment_premium, paid_amount,
                         balance, pay_status, ref_voucher, i_usr,
                         i_dt, u_usr, u_dt, payment_date,
                         prem_year_status, sl_no, policy_status,
                         installment_no, next_due_dt,
                         total_installment, proposer_pk1,
                         proposed_status, date_of_com, last_paid_dt,
                         sum_assured, pid_term, pay_mode,
                         pol_option, do_id, dm_id, branch_off,
                         sales_off, zonal_off, regional_off,
                         agent_id, policy_no, office_cd,
                         process_user, process_date, proposer_pk,
                         fp_receive_id
                        )
                 VALUES (i.pgid, i.installment_premium, i.paid_amount,
                         i.balance, i.pay_status, i.ref_voucher, i.i_usr,
                         i.i_dt, i.u_usr, i.u_dt, i.payment_date,
                         i.prem_year_status, i.sl_no, i.policy_status,
                         i.installment_no, i.next_due_dt,
                         i.total_installment, i.proposer_pk1,
                         i.proposed_status, i.date_of_com, i.last_paid_dt,
                         i.sum_assured, i.pid_term, i.pay_mode,
                         i.pol_option, i.do_id, i.dm_id, i.branch_off,
                         i.sales_off, i.zonal_off, i.regional_off,
                         i.agent_id, i.policy_no, i.office_cd,
                         i.process_user, i.process_date, i.proposer_pk,
                         i.fp_receive_id
                        );

            v_cnt := v_cnt + 1;

            IF v_cnt >= 1000
            THEN
               COMMIT;
               v_cnt := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_errror := SQLERRM;
               ROLLBACK;

               INSERT INTO dmg_log_data_mgr
                           (pgid, error_desc, error_tab, data_tp
                           )
                    VALUES (i.pgid, v_errror, v_tab, 'C'
                           );

               COMMIT;
         END;
      END LOOP;

      COMMIT;*/
   EXCEPTION
      WHEN OTHERS
      THEN
         v_errror := SQLERRM;
         ROLLBACK;

         INSERT INTO dmg_log_data_mgr
                     (pgid, error_desc, error_tab, data_tp
                     )
              VALUES (NULL, v_errror, v_tab, 'C'
                     );

         COMMIT;
   END pro_pending_coll_info;
END pkg_live_data_mgr;
/


--
-- PKG_MIS_REPORT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_mis_report
IS
   FUNCTION fun_product_wise_commision (
      p_office_cd    IN   hrm_office.office_cd%TYPE,
      p_product_cd   IN   VARCHAR2,
      p_date_from    IN   DATE,
      p_date_to      IN   DATE
   )
      RETURN product_wise_commision_tab PIPELINED
   AS
      l_tab   product_wise_commision_row;
   BEGIN
      FOR i IN (SELECT   s.regional_off, s.product_cd,
                         SUM (a.tot_com_paid_amt) tot_com_paid_amt,
                         SUM (a.tot_bonus_paid_amt) tot_bonus_paid_amt,
                         SUM (a.tot_pbc_paid_amt) tot_pbc_paid_amt,
                         SUM (a.tot_tax) tot_tax
                    FROM ins_p_summery s,
                         (SELECT   d.pgid, SUM (0) tot_com_paid_amt,
                                   SUM (0) tot_bonus_paid_amt,
                                   SUM (0) tot_pbc_paid_amt,
                                   SUM (d.tax_ded_amt) tot_tax
                              FROM com_agent_com_bill_dtl d,
                                   com_agent_com_bill_mst m
                             WHERE m.bill_date BETWEEN p_date_from AND p_date_to
                               AND d.bill_no = m.bill_no
                          GROUP BY d.pgid) a
                   WHERE s.pgid = a.pgid
                     AND s.regional_off = NVL (p_office_cd, s.regional_off)
                     AND s.product_cd = NVL (p_product_cd, s.product_cd)
                GROUP BY s.regional_off, s.product_cd)
      LOOP
         l_tab.regional_off := i.regional_off;
         l_tab.product_cd := i.product_cd;
         l_tab.com_paid_amt := i.tot_com_paid_amt;
         l_tab.bonus_paid_amt := i.tot_bonus_paid_amt;
         l_tab.pbc_paid_amt := i.tot_pbc_paid_amt;
         l_tab.tot_tax := i.tot_tax;
         PIPE ROW (l_tab);
      END LOOP;

      RETURN;
   END;

   FUNCTION fun_prem_type_wise_coll (
      p_office_cd   IN   hrm_office.office_cd%TYPE,
      p_check       IN   CHAR,
      p_date_from   IN   DATE,
      p_date_to     IN   DATE,
      p_catg_tp     IN   CHAR,
      p_rec_stat    IN   CHAR,
      p_coll_type   IN   CHAR,
      p_usr         IN   VARCHAR2
   )
      RETURN prem_type_wise_coll_tab PIPELINED
   AS
      l_prem             prem_type_wise_coll_row;
      v_installment      NUMBER (3)              := NULL;
      v_due_wise_prem    NUMBER (10, 2)          := NULL;
      v_first_prem       NUMBER (10, 2)          := 0;
      v_deffered_prem    NUMBER (10, 2)          := 0;
      v_second_yr_prem   NUMBER (10, 2)          := 0;
      v_renewal_prem     NUMBER (10, 2)          := 0;
      v_due_amount       NUMBER (10, 2)          := 0;
      v_due_sus_amt      NUMBER (10, 2)          := 0;
   BEGIN
      FOR i IN
         (SELECT      r.active_office_cd
                   || '-'
                   || TO_CHAR (r.receive_date, 'RR')
                   || '-'
                   || r.coll_sl_no collection_no,
                   r.receive_date receive_date,
                   r.collection_type collection_type,
                   rep_f_office_sh_nm (r.active_office_cd) active_office_cd,
                   DECODE (r.receive_mode,
                           1, 'Cash',
                           2, 'Cheque',
                           3, 'Others'
                          ) receive_mode,
                   r.office_code office_code,
                   NVL (r.coll_amount, 0) coll_amount,
                      SUBSTR (fun_ins_pgid_to_policy_no (r.pgid),
                              1,
                              9
                             )
                   || '-'
                   || SUBSTR (fun_ins_pgid_to_policy_no (r.pgid), 10, 1)
                                                                   policy_no,
                   r.due_dt_from due_dt_from,
                   (NVL (r.tot_premium_amt, 0) - NVL (r.avl_sus_amt, 0)
                   ) tot_premium_amt,
                   NVL (r.late_fee, 0) late_fee,
                   rep_f_employee (r.received_by) received_by,
                   (  NVL (r.coll_amount, 0)
                    - (  NVL (r.tot_premium_amt, 0)
                       + (NVL (r.late_fee, 0) - NVL (r.latefee_waiver, 0))
                       - NVL (r.avl_sus_amt, 0)
                      )
                   ) adv_due,
                   DECODE (r.mode_tp, 1, 'On-Line', 2, 'Off-Line') mode_tp,
                   r.due_dt_to due_dt_to, oc.off_catg_cd office_tp,
                   r.rec_status rec_status, r.coll_sl_no coll_sl_no,
                   r.installment_no_from, r.installment_no_to, s.pay_mode_cd,
                   s.installment_premium, NVL (r.avl_sus_amt, 0) avl_sus_amt,
                   r.coll_slip_no media_no, r.coll_slip_rec_dt media_dt
              FROM ins.acc_receivables r,
                   ins_p_summery s,
                   hrm_office o,
                   hrm_off_catg oc
             WHERE r.active_office_cd = o.office_cd
               AND o.off_catg_cd = oc.off_catg_cd
               AND r.pgid = s.pgid
               AND r.active_office_cd IN (
                      SELECT DISTINCT DECODE (p_check,
                                              0, x.office_cd,
                                              y.office_cd
                                             )
                                 FROM (SELECT p_office_cd office_cd
                                         FROM DUAL) x,
                                      (SELECT     office_cd
                                             FROM hrm_office_setup
                                       CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                       START WITH office_cd =
                                                     NVL (p_office_cd,
                                                          office_cd
                                                         )
                                       UNION ALL
                                       SELECT p_office_cd office_cd
                                         FROM DUAL) y)
               AND (       r.collection_type = 'OL'
                       AND (TRUNC (r.receive_date)
                               BETWEEN NVL (p_date_from,
                                            TRUNC (r.receive_date)
                                           )
                                   AND NVL (p_date_to, TRUNC (r.receive_date))
                           )
                    OR     r.collection_type != 'OL'
                       AND (TRUNC (r.i_dt) BETWEEN NVL (p_date_from,
                                                        TRUNC (r.i_dt)
                                                       )
                                               AND NVL (p_date_to,
                                                        TRUNC (r.i_dt)
                                                       )
                           )
                   )
               AND r.mode_tp = NVL (p_catg_tp, r.mode_tp)   --on-line/off-line
               AND r.rec_status = DECODE (p_rec_stat, '0', '0', r.rec_status)
               AND r.receive_mode =
                      DECODE (NVL (p_coll_type, '9'),
                              '9', r.receive_mode,
                              p_coll_type
                             )
               AND r.received_by = NVL (p_usr, r.received_by)
          UNION ALL
          SELECT      p.active_office_cd
                   || '-'
                   || TO_CHAR (p.receive_date, 'RR')
                   || '-'
                   || p.coll_sl_no collection_no,
                   p.receive_date receive_date, p.coll_media collection_type,
                   rep_f_office_sh_nm (p.active_office_cd) active_office_cd,
                   DECODE (p.coll_type,
                           1, 'Cash',
                           2, 'Cheque',
                           'Others'
                          ) receive_mode,
                   p.office_code office_code,
                   NVL (p.coll_amount, 0) coll_amount,
                      SUBSTR (fun_ins_pgid_to_policy_no (p.pgid),
                              1,
                              9
                             )
                   || '-'
                   || SUBSTR (fun_ins_pgid_to_policy_no (p.pgid), 10, 1)
                                                                    policy_no,
                   MIN (p.due_date_from) due_date_from,
                   (NVL (p.req_premium_amt, 0) - NVL (p.avl_sus_amt, 0)
                   ) tot_premium_amt,
                   NVL (p.late_fee, 0) late_fee,
                   rep_f_employee (p.received_by) received_by,
                   p.avl_sus_amt adv_due,
                   DECODE (p.mode_tp, 1, 'On-Line', 'Off-Line') mode_tp,
                   MAX (p.due_date_to) due_date_to, oc.off_catg_cd office_tp,
                   p.rec_status rec_status, p.coll_sl_no coll_sl_no,
                   MIN (r.installment_no_from) installment_no_from,
                   MAX (r.installment_no_to) installment_no_to, s.pay_mode_cd,
                   s.installment_premium, 0 avl_sus_amt, p.media_no,
                   p.media_dt
              FROM ins.acc_partial_receivables p,
                   acc_partial_receivables_ref prf,
                   acc_receivables r,
                   ins_p_summery s,
                   hrm_office o,
                   hrm_off_catg oc
             WHERE p.active_office_cd = o.office_cd
               AND o.off_catg_cd = oc.off_catg_cd
               AND p.receive_id = prf.receive_id
               AND prf.receive_id_ref = r.receive_id
               AND r.pgid = s.pgid
               AND p.active_office_cd IN (
                      SELECT DISTINCT DECODE (p_check,
                                              0, x.office_cd,
                                              y.office_cd
                                             )
                                 FROM (SELECT p_office_cd office_cd
                                         FROM DUAL) x,
                                      (SELECT     office_cd
                                             FROM hrm_office_setup
                                       CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                       START WITH office_cd =
                                                     NVL (p_office_cd,
                                                          office_cd
                                                         )
                                       UNION ALL
                                       SELECT p_office_cd office_cd
                                         FROM DUAL) y)
               AND (       p.coll_media = 'OL'
                       AND (TRUNC (p.receive_date)
                               BETWEEN NVL (p_date_from,
                                            TRUNC (p.receive_date)
                                           )
                                   AND NVL (p_date_to, TRUNC (p.receive_date))
                           )
                    OR     p.coll_media != 'OL'
                       AND (TRUNC (p.i_dt) BETWEEN NVL (p_date_from,
                                                        TRUNC (p.i_dt)
                                                       )
                                               AND NVL (p_date_to,
                                                        TRUNC (p.i_dt)
                                                       )
                           )
                   )
               AND p.coll_media = DECODE (p_catg_tp, '1', 'OL', p.coll_media)
               AND p.coll_type =
                      DECODE (NVL (p_coll_type, '9'),
                              '9', p.coll_type,
                              p_coll_type
                             )
               AND p.received_by = NVL (p_usr, p.received_by)
               AND p.rec_status = DECODE (p_rec_stat, '0', '0', p.rec_status)
               AND (  NVL (r.coll_amount, 0)
                    - (  NVL (r.tot_premium_amt, 0)
                       + (NVL (r.late_fee, 0) - NVL (r.latefee_waiver, 0))
                       - NVL (r.avl_sus_amt, 0)
                      )
                   ) < 0
          GROUP BY    p.active_office_cd
                   || '-'
                   || TO_CHAR (p.receive_date, 'RR')
                   || '-'
                   || p.coll_sl_no,
                   p.receive_date,
                   p.coll_media,
                   rep_f_office_sh_nm (p.active_office_cd),
                   DECODE (p.coll_type, 1, 'Cash', 2, 'Cheque', 'Others'),
                   p.office_code,
                   NVL (p.coll_amount, 0),
                      SUBSTR (fun_ins_pgid_to_policy_no (p.pgid), 1, 9)
                   || '-'
                   || SUBSTR (fun_ins_pgid_to_policy_no (p.pgid), 10, 1),
                   (NVL (p.req_premium_amt, 0) - NVL (p.avl_sus_amt, 0)
                   ),
                   NVL (p.late_fee, 0),
                   rep_f_employee (p.received_by),
                   p.avl_sus_amt,
                   DECODE (p.mode_tp, 1, 'On-Line', 'Off-Line'),
                   oc.off_catg_cd,
                   p.rec_status,
                   p.coll_sl_no,
                   s.pay_mode_cd,
                   s.installment_premium,
                   p.media_no,
                   p.media_dt
          ORDER BY receive_date, coll_sl_no)
      LOOP
         v_installment := (i.installment_no_to - i.installment_no_from) + 1;
         /*IF i.coll_amount >= i.tot_premium_amt
         THEN
            v_due_wise_prem := ROUND (i.tot_premium_amt / v_installment);
         ELSE
            v_due_wise_prem := ROUND (i.coll_amount / v_installment);
         END IF;*/
         v_first_prem := 0;
         v_deffered_prem := 0;
         v_second_yr_prem := 0;
         v_renewal_prem := 0;
         v_due_amount := i.coll_amount + i.avl_sus_amt;
         v_due_sus_amt := i.avl_sus_amt;

         FOR inst IN i.installment_no_from .. i.installment_no_to
         LOOP
            /* ChangeNo:1 This part is Change due to breate down the collection amount specific premium type
            Change Date:27-Jun-12
            Changed By: Md. Sayadur Rahaman*/
            IF v_due_amount > 0
            THEN
               IF v_due_amount >= i.installment_premium
               THEN
                  IF inst = i.installment_no_to
                  THEN
                     v_due_wise_prem := v_due_amount;
                     v_due_amount := 0;
                  ELSE
                     v_due_wise_prem := i.installment_premium;
                     v_due_amount := v_due_amount - v_due_wise_prem;
                  END IF;
               ELSE
                  v_due_wise_prem := v_due_amount;
                  v_due_amount := 0;
               END IF;
            ELSE
               v_due_wise_prem := 0;
            END IF;

            IF v_due_sus_amt > 0
            THEN
               IF v_due_sus_amt >= v_due_wise_prem
               THEN
                  v_due_sus_amt := v_due_sus_amt - v_due_wise_prem;
                  v_due_wise_prem := 0;
               ELSE
                  v_due_wise_prem := v_due_wise_prem - v_due_sus_amt;
                  v_due_sus_amt := 0;
               END IF;
            ELSE
               NULL;
            END IF;

            /* End Of ChangeNo:1 */
            IF i.pay_mode_cd = '01'
            THEN
               IF inst = 1
               THEN
                  v_first_prem := v_first_prem + v_due_wise_prem;
               ELSIF inst = 2
               THEN
                  v_second_yr_prem := v_second_yr_prem + v_due_wise_prem;
               ELSE
                  v_renewal_prem := v_renewal_prem + v_due_wise_prem;
               END IF;
            ELSIF i.pay_mode_cd = '02'
            THEN
               IF inst = 1
               THEN
                  v_first_prem := v_first_prem + v_due_wise_prem;
               ELSIF inst = 2
               THEN
                  v_deffered_prem := v_deffered_prem + v_due_wise_prem;
               ELSIF inst IN (3, 4)
               THEN
                  v_second_yr_prem := v_second_yr_prem + v_due_wise_prem;
               ELSE
                  v_renewal_prem := v_renewal_prem + v_due_wise_prem;
               END IF;
            ELSIF i.pay_mode_cd = '03'
            THEN
               IF inst = 1
               THEN
                  v_first_prem := v_first_prem + v_due_wise_prem;
               ELSIF inst >= 2 AND inst <= 4
               THEN
                  v_deffered_prem := v_deffered_prem + v_due_wise_prem;
               ELSIF inst >= 5 AND inst <= 8
               THEN
                  v_second_yr_prem := v_second_yr_prem + v_due_wise_prem;
               ELSE
                  v_renewal_prem := v_renewal_prem + v_due_wise_prem;
               END IF;
            ELSIF i.pay_mode_cd = '04'
            THEN
               IF inst = 1
               THEN
                  v_first_prem := v_first_prem + v_due_wise_prem;
               ELSIF inst >= 2 AND inst <= 12
               THEN
                  v_deffered_prem := v_deffered_prem + v_due_wise_prem;
               ELSIF inst >= 13 AND inst <= 24
               THEN
                  v_second_yr_prem := v_second_yr_prem + v_due_wise_prem;
               ELSE
                  v_renewal_prem := v_renewal_prem + v_due_wise_prem;
               END IF;
            END IF;
         END LOOP;

         l_prem.collection_no := i.collection_no;
         l_prem.receive_date := i.receive_date;
         l_prem.collection_type := i.collection_type;
         l_prem.active_office_cd := i.active_office_cd;
         l_prem.receive_mode := i.receive_mode;
         l_prem.office_code := i.office_code;
         l_prem.policy_no := i.policy_no;
         l_prem.due_dt_from := i.due_dt_from;
         l_prem.tot_premium_amt := i.tot_premium_amt;
         l_prem.late_fee := i.late_fee;
         l_prem.coll_amount := i.coll_amount;
         l_prem.received_by := i.received_by;
         l_prem.adv_due := i.adv_due;
         l_prem.mode_tp := i.mode_tp;
         l_prem.due_dt_to := i.due_dt_to;
         l_prem.rec_status := i.rec_status;
         l_prem.coll_sl_no := i.coll_sl_no;
         l_prem.first_premium := v_first_prem;
         l_prem.deffered_premium := v_deffered_prem;
         l_prem.second_premium := v_second_yr_prem;
         l_prem.renewal_premium := v_renewal_prem;
         l_prem.media_no := i.media_no;
         l_prem.media_dt := i.media_dt;
         PIPE ROW (l_prem);
      END LOOP;

      RETURN;
   END;

   FUNCTION fun_gender_wise_newbusiness (
      p_servicing_off   IN   hrm_office.office_cd%TYPE,
      p_business_yr     IN   CHAR,
      p_sex_cd          IN   CHAR
   )
      RETURN gender_wise_newbusiness_tab PIPELINED
   AS
      l_business   gender_wise_newbusiness_row;
   BEGIN
      FOR i IN (SELECT   s.sex_cd, TO_CHAR (s.comm_date, 'RRRR') business_yr,
                         COUNT (1) no_of_pol, SUM (s.sum_assured)
                                                                 sum_assured
                    FROM ins_p_summery s
                   WHERE TO_CHAR (s.comm_date, 'RRRR') BETWEEN (  p_business_yr
                                                                - 1
                                                               )
                                                           AND p_business_yr
                     AND s.sex_cd = NVL (p_sex_cd, s.sex_cd)
                     AND servicing_off =
                                        NVL (p_servicing_off, s.servicing_off)
                GROUP BY s.sex_cd, TO_CHAR (s.comm_date, 'RRRR')
                ORDER BY s.sex_cd, TO_CHAR (s.comm_date, 'RRRR'))
      LOOP
         l_business.sex_cd := i.sex_cd;
         l_business.business_yr := i.business_yr;
         l_business.no_of_pol := i.no_of_pol;
         l_business.sum_assured := i.sum_assured;
         PIPE ROW (l_business);
      END LOOP;

      RETURN;
   END;

   FUNCTION fun_medical_wise_newbusiness (
      p_servicing_off    IN   hrm_office.office_cd%TYPE,
      p_business_yr      IN   CHAR,
      p_policy_catg_cd   IN   CHAR
   )
      RETURN medical_wise_newbusiness_tab PIPELINED
   AS
      l_business   medical_wise_newbusiness_row;
   BEGIN
      FOR i IN (SELECT   p.policy_catg_cd,
                         TO_CHAR (s.comm_date, 'RRRR') business_yr,
                         COUNT (1) no_of_pol, SUM (s.sum_assured)
                                                                 sum_assured
                    FROM ins_p_proposal p, ins_p_summery s
                   WHERE TO_CHAR (s.comm_date, 'RRRR') BETWEEN (  p_business_yr
                                                                - 1
                                                               )
                                                           AND p_business_yr
                     AND p.policy_catg_cd =
                                      NVL (p_policy_catg_cd, p.policy_catg_cd)
                     AND servicing_off =
                                        NVL (p_servicing_off, s.servicing_off)
                     AND p.pgid = s.pgid
                GROUP BY p.policy_catg_cd, TO_CHAR (s.comm_date, 'RRRR')
                ORDER BY p.policy_catg_cd, TO_CHAR (s.comm_date, 'RRRR'))
      LOOP
         l_business.pol_catg_cd := i.policy_catg_cd;
         l_business.business_yr := i.business_yr;
         l_business.no_of_pol := i.no_of_pol;
         l_business.sum_assured := i.sum_assured;
         PIPE ROW (l_business);
      END LOOP;

      RETURN;
   END;

   FUNCTION fun_summ_assured_class (p_class_no NUMBER)
      RETURN summ_assured_class_tab PIPELINED
   AS
      l_class       summ_assured_class_row;
      v_lower_val   NUMBER (10)            := NULL;
      v_higer_val   NUMBER (10)            := NULL;
   BEGIN
      FOR i IN 1 .. p_class_no
      LOOP
         IF i = 1
         THEN
            l_class.class_no := i;
            l_class.lower_value := 1;
            l_class.upper_value := 5000;
            v_lower_val := 5000;
         ELSE
            l_class.class_no := i;
            l_class.lower_value := v_lower_val + 1;
            l_class.upper_value := v_lower_val * 2;
            v_lower_val := v_lower_val * 2;
         END IF;

         PIPE ROW (l_class);
      END LOOP;

      RETURN;
   END;

   FUNCTION fun_year_wise_biz_comp (
      p_office_cat   VARCHAR2,
      p_prem_type    VARCHAR2,
      p_year_from    NUMBER,
      p_year_to      NUMBER
   )
      RETURN year_wise_biz_comp_tab PIPELINED
   AS
      l_biz   year_wise_biz_comp_row;
   BEGIN
      FOR i IN
         (SELECT   p_office_cat, p_prem_type, x.c office_cd, x.d business_yr,
                   SUM (x.e) biz_amount
              FROM (SELECT DECODE (p_office_cat,
                                   '2', s.regional_off,
                                   '3', s.zonal_off,
                                   '4', s.sales_off,
                                   '5', s.branch_off
                                  ) c,
                           s.business_yr d,
                           DECODE (p_prem_type,
                                   'F', s.first_prem,
                                   'D', s.deffered,
                                   'S', s.second_yr,
                                   'R', s.renewal
                                  ) e
                      FROM acc_coll_summery s
                     WHERE business_yr BETWEEN p_year_from AND p_year_to
                    UNION ALL
                    SELECT office_cd c, biz_year d, biz_amount e
                      FROM TABLE
                              (pkg_mis_report.fun_year_wise_biz_zero
                                                                (p_office_cat,
                                                                 p_prem_type,
                                                                 p_year_from,
                                                                 p_year_to
                                                                )
                              )) x
          GROUP BY p_office_cat, p_prem_type, x.c, x.d
                                                      /*SELECT   p_office_cat, p_prem_type,
                                                               DECODE (p_office_cat,
                                                                       '2', s.regional_off,
                                                                       '3', s.zonal_off,
                                                                       '4', s.sales_off,
                                                                       '5', s.branch_off
                                                                      ) office_cd,
                                                               s.business_yr,
                                                               SUM (DECODE (p_prem_type,
                                                                            'F', s.first_prem,
                                                                            'D', s.deffered,
                                                                            'S', s.second_yr,
                                                                            'R', s.renewal
                                                                           )
                                                                   ) biz_amount
                                                          FROM acc_coll_summery s
                                                         WHERE s.business_yr BETWEEN p_year_from AND p_year_to
                                                      GROUP BY p_office_cat,
                                                               p_prem_type,
                                                               DECODE (p_office_cat,
                                                                       '2', s.regional_off,
                                                                       '3', s.zonal_off,
                                                                       '4', s.sales_off,
                                                                       '5', s.branch_off
                                                                      ),
                                                               s.business_yr*/
         )
      LOOP
         l_biz.office_cat := i.p_office_cat;
         l_biz.prem_type := i.p_prem_type;
         l_biz.office_cd := i.office_cd;
         l_biz.biz_year := i.business_yr;
         l_biz.biz_amount := i.biz_amount;
         PIPE ROW (l_biz);
      END LOOP;

      RETURN;
   END;

   FUNCTION fun_year_wise_biz_zero (
      p_office_cat   VARCHAR2,
      p_prem_type    VARCHAR2,
      p_year_from    NUMBER,
      p_year_to      NUMBER
   )
      RETURN year_wise_biz_zero_tab PIPELINED
   AS
      l_biz   year_wise_biz_zero_row;
   BEGIN
      FOR i IN (SELECT DISTINCT DECODE (p_office_cat,
                                        '2', s.regional_off,
                                        '3', s.zonal_off,
                                        '4', s.sales_off,
                                        '5', s.branch_off
                                       ) office_cd
                           FROM acc_coll_summery s
                          WHERE s.business_yr BETWEEN p_year_from AND p_year_to)
      LOOP
         FOR l IN p_year_from .. p_year_to
         LOOP
            l_biz.office_cat := p_office_cat;
            l_biz.prem_type := p_prem_type;
            l_biz.office_cd := i.office_cd;
            l_biz.biz_year := l;
            l_biz.biz_amount := 0;
            PIPE ROW (l_biz);
         END LOOP;
      END LOOP;

      RETURN;
   END;

   FUNCTION fun_gen_business_performance (
      p_report_type         VARCHAR2,
      --<<Mandatory for all report>> here  p_report_type :1=Employee wise busienss performance report,2=office wise busienss performance report
      p_off_category        VARCHAR2,
      --<<Mandatory for only office wise report>>Here p_category should be office category or employee category
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      --<<Mandatory for all report>>
      p_emp_category        VARCHAR2,
      --<<Mandatory for only employee wise report>>
      p_emp_gid        IN   NUMBER,
      p_prem_type      IN   VARCHAR2,
      --<<Mandatory for all report>>
      p_business_yr    IN   NUMBER,
      --<<Mandatory for all report>> example of p_business_yr=2004 and so on..
      p_business_mon   IN   VARCHAR2
   --<<Mandatory for all report>>example of p_business_mon=01,02 and so on..
   )
      RETURN business_performance_tab PIPELINED
   AS
      l_business                      business_performance_row;
      v_date_from                     DATE;
      v_date_to                       DATE;
      v_pre_month_of_year_amt         NUMBER (15, 2);
      v_cur_month_of_year_amt         NUMBER (15, 2);
      v_cur_year_jan_to_rep_mon_amt   NUMBER (15, 2);
      v_pre_year_jan_to_rep_mon_amt   NUMBER (15, 2);
      v_ratio_of_two_month            NUMBER (15, 2);
      v_ratio_of_two_year             NUMBER (15, 2);
      v_target_amt                    NUMBER (15, 2);
   BEGIN
      v_date_from := TO_DATE ('01-JAN-' || p_business_yr);
      v_date_to :=
         LAST_DAY (TO_DATE ('01-' || p_business_mon || '-' || p_business_yr));

      IF p_report_type = '1'
      THEN
         --1=Employee wise busienss performance report
         FOR i IN (SELECT emp_gid, desig_cd
                     FROM hrm_employee h
                    WHERE h.employment_tp_cd = '02'
                      AND h.activity_cd = '01'
                      AND h.emp_type_cd = NVL (p_emp_category, h.emp_type_cd)
                      AND h.emp_gid = NVL (p_emp_gid, h.emp_gid)
                      AND h.office_cd IN (
                                  SELECT     office_cd
                                        FROM hrm_office_setup
                                  CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                  START WITH office_cd = p_office_cd))
         LOOP
            --Findinng the employee wise achievement amount
            SELECT fun_gen_business_amount
                                     (p_off_category      => p_off_category,
                                      p_office_cd         => p_office_cd,
                                      p_emp_category      => p_emp_category,
                                      p_emp_gid           => i.emp_gid,
                                      p_prem_type         => p_prem_type,
                                      p_business_yr       => (p_business_yr
                                                              - 1
                                                             ),
                                      p_date_from         => (  ADD_MONTHS
                                                                   (v_date_to,
                                                                    -13
                                                                   )
                                                              + 1
                                                             ),
                                      p_date_to           => ADD_MONTHS
                                                                   (v_date_to,
                                                                    -12
                                                                   )
                                     ),
                   fun_gen_business_amount
                                     (p_off_category      => p_off_category,
                                      p_office_cd         => p_office_cd,
                                      p_emp_category      => p_emp_category,
                                      p_emp_gid           => i.emp_gid,
                                      p_prem_type         => p_prem_type,
                                      p_business_yr       => p_business_yr,
                                      p_date_from         => (  ADD_MONTHS
                                                                   (v_date_to,
                                                                    -1
                                                                   )
                                                              + 1
                                                             ),
                                      p_date_to           => v_date_to
                                     ),
                   fun_gen_business_amount
                                     (p_off_category      => p_off_category,
                                      p_office_cd         => p_office_cd,
                                      p_emp_category      => p_emp_category,
                                      p_emp_gid           => i.emp_gid,
                                      p_prem_type         => p_prem_type,
                                      p_business_yr       => (p_business_yr
                                                              - 1
                                                             ),
                                      p_date_from         => ADD_MONTHS
                                                                 (v_date_from,
                                                                  -12
                                                                 ),
                                      p_date_to           => ADD_MONTHS
                                                                   (v_date_to,
                                                                    -12
                                                                   )
                                     ),
                   fun_gen_business_amount (p_off_category      => p_off_category,
                                            p_office_cd         => p_office_cd,
                                            p_emp_category      => p_emp_category,
                                            p_emp_gid           => i.emp_gid,
                                            p_prem_type         => p_prem_type,
                                            p_business_yr       => p_business_yr,
                                            p_date_from         => v_date_from,
                                            p_date_to           => v_date_to
                                           )
              INTO v_pre_month_of_year_amt,
                   v_cur_month_of_year_amt,
                   v_pre_year_jan_to_rep_mon_amt,
                   v_cur_year_jan_to_rep_mon_amt
              FROM DUAL;

            --Findinng the employee wise target amount
            v_target_amt :=
               pkg_mis_report.fun_emp_target_amount
                                                  (p_emp_gid        => i.emp_gid,
                                                   p_desig_cd       => i.desig_cd,
                                                   p_prem_type      => p_prem_type,
                                                   p_date_from      => v_date_from,
                                                   p_date_to        => v_date_to
                                                  );

            IF v_pre_month_of_year_amt > 0
            THEN
               v_ratio_of_two_month :=
                  ROUND (  (  (  v_cur_month_of_year_amt
                               - v_pre_month_of_year_amt
                              )
                            * 100
                           )
                         / v_pre_month_of_year_amt,
                         2
                        );
            ELSE
               v_ratio_of_two_month := NULL;
            END IF;

            IF v_pre_year_jan_to_rep_mon_amt > 0
            THEN
               v_ratio_of_two_year :=
                  ROUND (  (  (  v_cur_year_jan_to_rep_mon_amt
                               - v_pre_year_jan_to_rep_mon_amt
                              )
                            * 100
                           )
                         / v_pre_year_jan_to_rep_mon_amt,
                         2
                        );
            ELSE
               v_ratio_of_two_year := NULL;
            END IF;

            l_business.rep_month := p_business_mon;
            l_business.rep_year := p_business_yr;
            l_business.emp_id := rep_f_emp_id (i.emp_gid);
            l_business.office_cd := p_office_cd;
            l_business.pre_month_of_year_amt := v_pre_month_of_year_amt;
            l_business.cur_month_of_year_amt := v_cur_month_of_year_amt;
            l_business.ratio_of_two_month := v_ratio_of_two_month;
            l_business.pre_year_jan_to_rep_mon_amt :=
                                                 v_pre_year_jan_to_rep_mon_amt;
            l_business.cur_year_jan_to_rep_mon_amt :=
                                                 v_cur_year_jan_to_rep_mon_amt;
            l_business.ratio_of_two_year := v_ratio_of_two_year;
            l_business.rep_year_target_amt := v_target_amt;

            IF v_target_amt > 0
            THEN
               l_business.ratio_of_achievement :=
                  ROUND ((v_cur_year_jan_to_rep_mon_amt * 100) / v_target_amt,
                         2
                        );
            ELSE
               l_business.ratio_of_achievement := 0;
            END IF;

            PIPE ROW (l_business);
         END LOOP;
      ELSIF p_report_type = '2'
      THEN
         --2=office wise busienss performance report
         FOR i IN (SELECT o.office_cd, o.off_sub_cat, o.off_catg_cd
                     FROM hrm_office o
                    WHERE o.off_catg_cd = p_off_category
                      AND office_cd IN (
                                  SELECT     office_cd
                                        FROM hrm_office_setup
                                  CONNECT BY PRIOR office_cd =
                                                             control_office_cd
                                  START WITH office_cd = p_office_cd))
         LOOP
            --Finding the office wise achievement amount
            SELECT fun_gen_business_amount
                                     (p_off_category      => i.off_catg_cd,
                                      p_office_cd         => i.office_cd,
                                      p_emp_category      => NULL,
                                      p_emp_gid           => NULL,
                                      p_prem_type         => p_prem_type,
                                      p_business_yr       => (p_business_yr
                                                              - 1
                                                             ),
                                      p_date_from         => (  ADD_MONTHS
                                                                   (v_date_to,
                                                                    -13
                                                                   )
                                                              + 1
                                                             ),
                                      p_date_to           => ADD_MONTHS
                                                                   (v_date_to,
                                                                    -12
                                                                   )
                                     ),
                   fun_gen_business_amount
                                     (p_off_category      => i.off_catg_cd,
                                      p_office_cd         => i.office_cd,
                                      p_emp_category      => NULL,
                                      p_emp_gid           => NULL,
                                      p_prem_type         => p_prem_type,
                                      p_business_yr       => p_business_yr,
                                      p_date_from         => (  ADD_MONTHS
                                                                   (v_date_to,
                                                                    -1
                                                                   )
                                                              + 1
                                                             ),
                                      p_date_to           => v_date_to
                                     ),
                   fun_gen_business_amount
                                     (p_off_category      => i.off_catg_cd,
                                      p_office_cd         => i.office_cd,
                                      p_emp_category      => NULL,
                                      p_emp_gid           => NULL,
                                      p_prem_type         => p_prem_type,
                                      p_business_yr       => (p_business_yr
                                                              - 1
                                                             ),
                                      p_date_from         => ADD_MONTHS
                                                                 (v_date_from,
                                                                  -12
                                                                 ),
                                      p_date_to           => ADD_MONTHS
                                                                   (v_date_to,
                                                                    -12
                                                                   )
                                     ),
                   fun_gen_business_amount (p_off_category      => i.off_catg_cd,
                                            p_office_cd         => i.office_cd,
                                            p_emp_category      => NULL,
                                            p_emp_gid           => NULL,
                                            p_prem_type         => p_prem_type,
                                            p_business_yr       => p_business_yr,
                                            p_date_from         => v_date_from,
                                            p_date_to           => v_date_to
                                           )
              INTO v_pre_month_of_year_amt,
                   v_cur_month_of_year_amt,
                   v_pre_year_jan_to_rep_mon_amt,
                   v_cur_year_jan_to_rep_mon_amt
              FROM DUAL;

            --Findinng the office wise target amount
            v_target_amt :=
               pkg_mis_report.fun_office_target_amount
                                              (p_office_cd        => i.office_cd,
                                               p_off_sub_cd       => i.off_sub_cat,
                                               p_off_catg_cd      => i.off_catg_cd,
                                               p_prem_type        => p_prem_type,
                                               p_date_from        => v_date_from,
                                               p_date_to          => v_date_to
                                              );

            IF v_pre_month_of_year_amt > 0
            THEN
               v_ratio_of_two_month :=
                  ROUND (  (  (  v_cur_month_of_year_amt
                               - v_pre_month_of_year_amt
                              )
                            * 100
                           )
                         / v_pre_month_of_year_amt,
                         2
                        );
            ELSE
               v_ratio_of_two_month := NULL;
            END IF;

            IF v_pre_year_jan_to_rep_mon_amt > 0
            THEN
               v_ratio_of_two_year :=
                  ROUND (  (  (  v_cur_year_jan_to_rep_mon_amt
                               - v_pre_year_jan_to_rep_mon_amt
                              )
                            * 100
                           )
                         / v_pre_year_jan_to_rep_mon_amt,
                         2
                        );
            ELSE
               v_ratio_of_two_year := NULL;
            END IF;

            l_business.rep_month := p_business_mon;
            l_business.rep_year := p_business_yr;
            l_business.emp_id := NULL;
            l_business.office_cd := i.office_cd;
            l_business.pre_month_of_year_amt := v_pre_month_of_year_amt;
            l_business.cur_month_of_year_amt := v_cur_month_of_year_amt;
            l_business.ratio_of_two_month := v_ratio_of_two_month;
            l_business.pre_year_jan_to_rep_mon_amt :=
                                                 v_pre_year_jan_to_rep_mon_amt;
            l_business.cur_year_jan_to_rep_mon_amt :=
                                                 v_cur_year_jan_to_rep_mon_amt;
            l_business.ratio_of_two_year := v_ratio_of_two_year;
            l_business.rep_year_target_amt := v_target_amt;

            IF v_target_amt > 0
            THEN
               l_business.ratio_of_achievement :=
                  ROUND ((v_cur_year_jan_to_rep_mon_amt * 100) / v_target_amt,
                         2
                        );
            ELSE
               l_business.ratio_of_achievement := 0;
            END IF;

            PIPE ROW (l_business);
         END LOOP;
      END IF;

      RETURN;
   END;

   FUNCTION fun_gen_business_amount (
      p_off_category        VARCHAR2,
      --Here p_category should be office category or employee category
      p_office_cd      IN   hrm_office.office_cd%TYPE,
      p_emp_category        VARCHAR2,
      p_emp_gid        IN   NUMBER,
      p_prem_type      IN   VARCHAR2,
      p_business_yr    IN   NUMBER,
      --example of p_business_yr=2004 and so on..
      p_date_from      IN   DATE,
      p_date_to        IN   DATE
   )
      RETURN NUMBER
   IS
      v_premium   NUMBER (15, 2);
   BEGIN
      SELECT NVL (SUM (DECODE (p_prem_type,
                               'F', s.first_prem + s.deffered,
                               'R', s.renewal + s.second_yr
                              )
                      ),
                  0
                 )
        INTO v_premium
        FROM acc_coll_summery s
       WHERE DECODE (p_emp_category, '06', s.um_gid, '05', s.bm_gid, '1') =
                                                          NVL (p_emp_gid, '1')
         AND (   (p_prem_type = 'F' AND amount_type IN ('F', 'D'))
              OR (p_prem_type = 'R' AND amount_type IN ('S', 'R'))
             )
         AND DECODE (NVL (p_off_category, '1'),
                     '01', '9001',
                     '02', s.regional_off,
                     '03', s.zonal_off,
                     '04', s.sales_off,
                     '05', s.branch_off,
                     p_office_cd
                    ) =
                NVL (p_office_cd,
                     DECODE (NVL (p_off_category, '1'),
                             '01', '9001',
                             '02', s.regional_off,
                             '03', s.zonal_off,
                             '04', s.sales_off,
                             '05', s.branch_off,
                             p_office_cd
                            )
                    )
         AND s.business_yr = p_business_yr
         AND business_date BETWEEN p_date_from AND p_date_to;

      --GROUP BY DECODE (p_emp_category, '06', s.do_gid, '05', s.dm_gid);
      RETURN NVL (v_premium, 0);
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 0;
   END;

   FUNCTION fun_emp_target_amount (
      p_emp_gid          VARCHAR2,
      p_desig_cd    IN   VARCHAR2,
      p_prem_type   IN   VARCHAR2,
      p_date_from   IN   DATE,
      p_date_to     IN   DATE
   )
      RETURN NUMBER
   AS
      v_target_amt   NUMBER (15, 2) := NULL;
   BEGIN
      BEGIN
         SELECT DECODE (p_prem_type,
                        'F', t.first_yr_target,
                        'R', t.renewal_target
                       )
           INTO v_target_amt
           FROM hrm_emp_target t
          WHERE t.start_dt = p_date_from
            AND t.end_dt = p_date_to
            AND t.emp_gid = p_emp_gid;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_target_amt := NULL;
      END;

      IF v_target_amt IS NULL
      THEN
         BEGIN
            SELECT DECODE (p_prem_type,
                           'F', t.first_yr_target,
                           'R', t.renewal_target
                          )
              INTO v_target_amt
              FROM hrm_emp_target t
             WHERE t.start_dt = p_date_from
               AND t.end_dt = p_date_to
               AND t.desig_cd = p_desig_cd;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_target_amt := 0;
         END;
      END IF;

      RETURN v_target_amt;
   END;

   FUNCTION fun_office_target_amount (
      p_office_cd          VARCHAR2,
      p_off_sub_cd    IN   VARCHAR2,
      p_off_catg_cd   IN   VARCHAR2,
      p_prem_type     IN   VARCHAR2,
      p_date_from     IN   DATE,
      p_date_to       IN   DATE
   )
      RETURN NUMBER
   AS
      v_target_amt   NUMBER (15, 2) := NULL;
   BEGIN
      BEGIN
         SELECT DECODE (p_prem_type,
                        'F', t.first_yr_target,
                        'R', t.renewal_target
                       )
           INTO v_target_amt
           FROM hrm_office_target t
          WHERE t.start_dt = p_date_from
            AND t.end_dt = p_date_to
            AND t.office_cd = p_office_cd;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_target_amt := NULL;
      END;

      IF v_target_amt IS NULL
      THEN
         BEGIN
            SELECT DECODE (p_prem_type,
                           'F', t.first_yr_target,
                           'R', t.renewal_target
                          )
              INTO v_target_amt
              FROM hrm_office_target t
             WHERE t.start_dt = p_date_from
               AND t.end_dt = p_date_to
               AND t.off_sub_cat = p_off_sub_cd;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_target_amt := NULL;
         END;

         IF v_target_amt IS NULL
         THEN
            BEGIN
               SELECT DECODE (p_prem_type,
                              'F', t.first_yr_target,
                              'R', t.renewal_target
                             )
                 INTO v_target_amt
                 FROM hrm_office_target t
                WHERE t.start_dt = p_date_from
                  AND t.end_dt = p_date_to
                  AND t.off_catg_cd = p_off_catg_cd;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_target_amt := 0;
            END;
         END IF;
      END IF;

      RETURN v_target_amt;
   END;

   FUNCTION fun_policy_status_wise_policy (
      p_policy_status   VARCHAR2,
      p_date_to         DATE
   )
      RETURN policy_status_wise_policy_tab PIPELINED
   AS
      l_business   policy_status_wise_policy_row;
   BEGIN
      FOR i IN (SELECT   policy_status, COUNT (1) v_count
                    FROM ins_policy_status_log
                   WHERE policy_status = NVL (p_policy_status, policy_status)
                     AND p_date_to BETWEEN st_dt_from
                                       AND NVL (st_dt_to,
                                                  ADD_MONTHS (TRUNC (SYSDATE,
                                                                     'YEAR'
                                                                    ),
                                                              12
                                                             )
                                                - 1
                                               )
                GROUP BY policy_status)
      LOOP
         l_business.policy_status := i.policy_status;
         l_business.no_of_policy := i.v_count;
         PIPE ROW (l_business);
      END LOOP;

      RETURN;
   END;

/***************************/
   FUNCTION fun_yr_wise_prj_biz_comp (
      p_project_cd   VARCHAR2,
      p_prem_type    VARCHAR2,
      p_year_from    NUMBER,
      p_year_to      NUMBER
   )
      RETURN yr_wise_prj_biz_comp_tab PIPELINED
   AS
      l_biz   yr_wise_prj_biz_comp_row;
   BEGIN
      FOR i IN
         (SELECT   x.project_cd, p_prem_type, x.business_yr,
                   SUM (x.business_amt) biz_amount
              FROM (SELECT p.project_cd, s.business_yr,
                           DECODE (p_prem_type,
                                   'F', s.first_prem,
                                   'D', s.deffered,
                                   'S', s.second_yr,
                                   'R', s.renewal,
                                   (  s.first_prem
                                    + s.deffered
                                    + s.second_yr
                                    + s.renewal
                                   )
                                  ) business_amt
                      FROM acc_coll_summery s, ins_project p, hrm_employee e
                     WHERE business_yr BETWEEN p_year_from AND p_year_to
                       AND p.project_cd = NVL (p_project_cd, p.project_cd)
                       AND DECODE (p_prem_type,
                                   'F', s.first_prem,
                                   'D', s.deffered,
                                   'S', s.second_yr,
                                   'R', s.renewal,
                                   (  s.first_prem
                                    + s.deffered
                                    + s.second_yr
                                    + s.renewal
                                   )
                                  ) > 0
                       AND p.emp_gid = e.emp_gid
                       AND DECODE (NVL (f_off_catg_cd (e.office_cd), '01'),
                                   '01', '9001',
                                   '02', s.regional_off,
                                   '03', s.zonal_off,
                                   '04', s.sales_off,
                                   '05', s.branch_off
                                  ) = e.office_cd
                    UNION ALL
                    SELECT p.project_cd, l.lvl business_yr, 0 business_amt
                      FROM (SELECT DISTINCT j.project_cd
                                       FROM acc_coll_summery c,
                                            ins_project j,
                                            hrm_employee e
                                      WHERE j.emp_gid = e.emp_gid
                                        AND j.project_cd =
                                               NVL (p_project_cd,
                                                    j.project_cd)
                                        AND DECODE (p_prem_type,
                                                    'F', c.first_prem,
                                                    'D', c.deffered,
                                                    'S', c.second_yr,
                                                    'R', c.renewal,
                                                    (  c.first_prem
                                                     + c.deffered
                                                     + c.second_yr
                                                     + c.renewal
                                                    )
                                                   ) > 0
                                        AND DECODE
                                               (NVL
                                                   (f_off_catg_cd (e.office_cd),
                                                    '01'
                                                   ),
                                                '01', '9001',
                                                '02', c.regional_off,
                                                '03', c.zonal_off,
                                                '04', c.sales_off,
                                                '05', c.branch_off
                                               ) = e.office_cd) p,
                           (SELECT     p_year_from + LEVEL - 1 lvl
                                  FROM DUAL
                            CONNECT BY LEVEL <= (p_year_to - p_year_from + 1)) l) x
          GROUP BY x.project_cd, p_prem_type, x.business_yr
          ORDER BY x.project_cd, x.business_yr)
      LOOP
         l_biz.project_cd := i.project_cd;
         l_biz.prem_type := i.p_prem_type;
         l_biz.biz_year := i.business_yr;
         l_biz.biz_amount := i.biz_amount;
         PIPE ROW (l_biz);
      END LOOP;

      RETURN;
   END fun_yr_wise_prj_biz_comp;

   FUNCTION fun_prem_tp_wise_prj_biz (
      p_project_cd    VARCHAR2,
      p_business_yr   VARCHAR2,
      p_coll_dt_fr    DATE,
      p_coll_dt_to    DATE,
      p_status        VARCHAR2
   )
      RETURN prem_tp_wise_prj_biz_tab PIPELINED
   IS
      l_biz   prem_tp_wise_prj_biz_row;
   BEGIN
      FOR i IN (SELECT   p.project_cd, SUM (cs.first_prem) first_prem,
                         SUM (cs.deffered) deffered,
                         SUM (cs.second_yr) second_yr,
                         SUM (cs.renewal) renewal
                    FROM acc_coll_summery cs, ins_project p, hrm_employee e
                   WHERE cs.receive_dt BETWEEN p_coll_dt_fr AND p_coll_dt_to
                     AND p.project_cd = NVL (p_project_cd, p.project_cd)
                     AND   cs.first_prem
                         + cs.deffered
                         + (cs.second_yr)
                         + (cs.renewal) > 0
                     AND cs.status = NVL (p_status, cs.status)
                     AND cs.business_yr = p_business_yr
                     AND p.emp_gid = e.emp_gid
                     AND DECODE (NVL (f_off_catg_cd (e.office_cd), '01'),
                                 '01', '9001',
                                 '02', cs.regional_off,
                                 '03', cs.zonal_off,
                                 '04', cs.sales_off,
                                 '05', cs.branch_off
                                ) = e.office_cd
                GROUP BY p.project_cd
                ORDER BY p.project_cd)
      LOOP
         l_biz.project_cd := i.project_cd;
         l_biz.first_prem := i.first_prem;
         l_biz.deffered := i.deffered;
         l_biz.second_yr := i.second_yr;
         l_biz.renewal := i.renewal;
         PIPE ROW (l_biz);
      END LOOP;
   END fun_prem_tp_wise_prj_biz;

   FUNCTION fun_premtp_month_wise_prj_biz (
      p_project_cd    VARCHAR2,
      p_business_yr   VARCHAR2,
      p_coll_dt_fr    DATE,
      p_coll_dt_to    DATE,
      p_status        VARCHAR2
   )
      RETURN premtp_month_wise_prj_biz_tab PIPELINED
   IS
      l_biz   premtp_month_wise_prj_biz_row;
   BEGIN
      FOR i IN (SELECT   p.project_cd, cs.business_yr,
                         TO_CHAR (cs.receive_dt, 'Month') coll_month,
                         SUM (cs.first_prem) first_prem,
                         SUM (cs.deffered) deffered,
                         SUM (cs.second_yr) second_yr,
                         SUM (cs.renewal) renewal
                    FROM acc_coll_summery cs, ins_project p, hrm_employee e
                   WHERE cs.receive_dt BETWEEN p_coll_dt_fr AND p_coll_dt_to
                     AND p.project_cd = NVL (p_project_cd, p.project_cd)
                     AND   NVL (cs.first_prem, 0)
                         + NVL (cs.deffered, 0)
                         + NVL (cs.second_yr, 0)
                         + NVL (cs.renewal, 0) > 0
                     AND cs.status = NVL (p_status, cs.status)
                     AND cs.business_yr = NVL (p_business_yr, cs.business_yr)
                     AND p.emp_gid = e.emp_gid
                     AND DECODE (NVL (f_off_catg_cd (e.office_cd), '01'),
                                 '01', '9001',
                                 '02', cs.regional_off,
                                 '03', cs.zonal_off,
                                 '04', cs.sales_off,
                                 '05', cs.branch_off
                                ) = e.office_cd
                GROUP BY p.project_cd,
                         cs.business_yr,
                         TO_CHAR (cs.receive_dt, 'Month'),
                         TO_CHAR (cs.receive_dt, 'MM')
                ORDER BY p.project_cd,
                         cs.business_yr,
                         TO_CHAR (cs.receive_dt, 'MM'))
      LOOP
         l_biz.project_cd := i.project_cd;
         l_biz.business_yr := i.business_yr;
         l_biz.coll_month := i.coll_month;
         l_biz.first_prem := i.first_prem;
         l_biz.deffered := i.deffered;
         l_biz.second_yr := i.second_yr;
         l_biz.renewal := i.renewal;
         PIPE ROW (l_biz);
      END LOOP;
   END fun_premtp_month_wise_prj_biz;

   FUNCTION fun_premtp_yr_wise_prj_biz (
      p_project_cd        VARCHAR2,
      p_business_yr_frm   VARCHAR2,
      p_business_yr_to    VARCHAR2,
      p_coll_dt_fr        DATE,
      p_coll_dt_to        DATE,
      p_status            VARCHAR2
   )
      RETURN premtp_yr_wise_prj_biz_tab PIPELINED
   IS
      l_biz   premtp_yr_wise_prj_biz_row;
   BEGIN
      FOR i IN (SELECT   p.project_cd, cs.business_yr,
                         SUM (cs.first_prem) first_prem,
                         SUM (cs.deffered) deffered,
                         SUM (cs.second_yr) second_yr,
                         SUM (cs.renewal) renewal
                    FROM acc_coll_summery cs, ins_project p, hrm_employee e
                   WHERE cs.receive_dt BETWEEN p_coll_dt_fr AND p_coll_dt_to
                     AND p.project_cd = NVL (p_project_cd, p.project_cd)
                     AND   cs.first_prem
                         + cs.deffered
                         + (cs.second_yr)
                         + (cs.renewal) > 0
                     AND cs.status = NVL (p_status, cs.status)
                     AND cs.business_yr BETWEEN NVL (p_business_yr_frm,
                                                     cs.business_yr
                                                    )
                                            AND NVL (p_business_yr_to,
                                                     cs.business_yr
                                                    )
                     AND p.emp_gid = e.emp_gid
                     AND DECODE (NVL (f_off_catg_cd (e.office_cd), '01'),
                                 '01', '9001',
                                 '02', cs.regional_off,
                                 '03', cs.zonal_off,
                                 '04', cs.sales_off,
                                 '05', cs.branch_off
                                ) = e.office_cd
                GROUP BY p.project_cd, cs.business_yr
                ORDER BY p.project_cd, cs.business_yr)
      LOOP
         l_biz.project_cd := i.project_cd;
         l_biz.business_yr := i.business_yr;
         l_biz.first_prem := i.first_prem;
         l_biz.deffered := i.deffered;
         l_biz.second_yr := i.second_yr;
         l_biz.renewal := i.renewal;
         PIPE ROW (l_biz);
      END LOOP;
   END fun_premtp_yr_wise_prj_biz;

   FUNCTION fun_ser_sp_office_pol (
      p_office_tp          CHAR,
      p_servicing_off_cd   VARCHAR2,
      p_sales_off_cd       VARCHAR2,
      p_branch_off_cd      VARCHAR2,
      p_ins_tp_cd          NUMBER,
      p_com_date_from      DATE,
      p_com_date_to        DATE
   )
      RETURN ser_sp_office_pol_row_tab PIPELINED
   IS
      l_biz         ser_sp_office_pol_row;
      v_office_cd   VARCHAR2 (10);
   BEGIN
      BEGIN
         SELECT office_cd
           INTO v_office_cd
           FROM hrm_office
          WHERE off_catg_cd = '01';
      EXCEPTION
         WHEN OTHERS
         THEN
            v_office_cd := '00000';
      END;

      IF p_office_tp = '02'
      THEN
         FOR i IN (SELECT   f.servicing_off, f.number_of_policy,
                            f.total_premium,
                            NVL (s.no_of_2nd_yr_policy,
                                 0) no_of_2nd_yr_policy,
                            NVL (s.second_yr_premium, 0) second_yr_premium
                       FROM (SELECT   DECODE (cs.servicing_off,
                                              '00000', v_office_cd,
                                              cs.servicing_off
                                             ) servicing_off,
                                      COUNT (pgid) number_of_policy,
                                      SUM (installment_premium) total_premium
                                 FROM ins_p_summery cs
                                WHERE cs.servicing_off =
                                         NVL (p_servicing_off_cd,
                                              cs.servicing_off
                                             )
                                  AND comm_date BETWEEN p_com_date_from
                                                    AND p_com_date_to
                                  AND (   (    p_ins_tp_cd IS NOT NULL
                                           AND ins_tp_cd = p_ins_tp_cd
                                          )
                                       OR (p_ins_tp_cd IS NULL)
                                      )
                             GROUP BY DECODE (cs.servicing_off,
                                              '00000', v_office_cd,
                                              cs.servicing_off
                                             )) f,
                            (SELECT   DECODE (servicing_off,
                                              '00000', v_office_cd,
                                              servicing_off
                                             ) servicing_off,
                                      COUNT (pgid) no_of_2nd_yr_policy,
                                      SUM
                                         (installment_premium
                                         ) second_yr_premium
                                 FROM ins_p_summery
                                WHERE last_paid_inst_no >
                                         DECODE (pay_mode_cd,
                                                 '01', 1,
                                                 '02', 2,
                                                 '03', 4,
                                                 '04', 12
                                                )
                                  AND comm_date BETWEEN p_com_date_from
                                                    AND p_com_date_to
                                  AND (   (    p_ins_tp_cd IS NOT NULL
                                           AND ins_tp_cd = p_ins_tp_cd
                                          )
                                       OR (p_ins_tp_cd IS NULL)
                                      )
                             GROUP BY DECODE (servicing_off,
                                              '00000', v_office_cd,
                                              servicing_off
                                             )) s
                      WHERE f.servicing_off = s.servicing_off(+)
                   ORDER BY f.servicing_off)
         LOOP
            l_biz.servicing_off := i.servicing_off;
            l_biz.sales_off := NULL;
            l_biz.branch_off := NULL;
            l_biz.tot_no_policy := i.number_of_policy;
            l_biz.first_yr_premium := i.total_premium;
            l_biz.tot_2nd_yr_policy := i.no_of_2nd_yr_policy;
            l_biz.second_yr_premium := i.second_yr_premium;
            l_biz.policy_ration :=
                ROUND ((i.no_of_2nd_yr_policy * 100) / i.number_of_policy, 2);
            l_biz.premium_ration :=
                     ROUND ((i.second_yr_premium * 100) / i.total_premium, 2);
            PIPE ROW (l_biz);
         END LOOP;
      ELSIF p_office_tp = '04'
      THEN
         FOR i IN
            (SELECT   f.servicing_off, f.sales_off, f.number_of_policy,
                      f.total_premium,
                      NVL (s.no_of_2nd_yr_policy, 0) no_of_2nd_yr_policy,
                      NVL (s.second_yr_premium, 0) second_yr_premium
                 FROM (SELECT   DECODE (cs.servicing_off,
                                        '00000', v_office_cd,
                                        cs.servicing_off
                                       ) servicing_off,
                                DECODE (cs.sales_off,
                                        '00000', DECODE (cs.servicing_off,
                                                         '00000', v_office_cd,
                                                         cs.servicing_off
                                                        ),
                                        cs.sales_off
                                       ) sales_off,
                                COUNT (pgid) number_of_policy,
                                SUM (installment_premium) total_premium
                           FROM ins_p_summery cs
                          WHERE cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                            AND cs.sales_off =
                                            NVL (p_sales_off_cd, cs.sales_off)
                            AND comm_date BETWEEN p_com_date_from
                                              AND p_com_date_to
                            AND (   (    p_ins_tp_cd IS NOT NULL
                                     AND ins_tp_cd = p_ins_tp_cd
                                    )
                                 OR (p_ins_tp_cd IS NULL)
                                )
                       GROUP BY DECODE (cs.servicing_off,
                                        '00000', v_office_cd,
                                        cs.servicing_off
                                       ),
                                DECODE (cs.sales_off,
                                        '00000', DECODE (cs.servicing_off,
                                                         '00000', v_office_cd,
                                                         cs.servicing_off
                                                        ),
                                        cs.sales_off
                                       )) f,
                      (SELECT   DECODE (cs.servicing_off,
                                        '00000', v_office_cd,
                                        cs.servicing_off
                                       ) servicing_off,
                                DECODE (cs.sales_off,
                                        '00000', DECODE (cs.servicing_off,
                                                         '00000', v_office_cd,
                                                         cs.servicing_off
                                                        ),
                                        cs.sales_off
                                       ) sales_off,
                                COUNT (pgid) no_of_2nd_yr_policy,
                                SUM (installment_premium) second_yr_premium
                           FROM ins_p_summery cs
                          WHERE last_paid_inst_no >
                                   DECODE (cs.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12
                                          )
                            AND comm_date BETWEEN p_com_date_from
                                              AND p_com_date_to
                            AND (   (    p_ins_tp_cd IS NOT NULL
                                     AND ins_tp_cd = p_ins_tp_cd
                                    )
                                 OR (p_ins_tp_cd IS NULL)
                                )
                       GROUP BY DECODE (cs.servicing_off,
                                        '00000', v_office_cd,
                                        cs.servicing_off
                                       ),
                                DECODE (cs.sales_off,
                                        '00000', DECODE (cs.servicing_off,
                                                         '00000', v_office_cd,
                                                         cs.servicing_off
                                                        ),
                                        cs.sales_off
                                       )) s
                WHERE f.servicing_off = s.servicing_off(+)
                      AND f.sales_off = s.sales_off(+)
             ORDER BY f.servicing_off, f.sales_off)
         LOOP
            l_biz.servicing_off := i.servicing_off;
            l_biz.sales_off := i.sales_off;
            l_biz.branch_off := NULL;
            l_biz.tot_no_policy := i.number_of_policy;
            l_biz.first_yr_premium := i.total_premium;
            l_biz.tot_2nd_yr_policy := i.no_of_2nd_yr_policy;
            l_biz.second_yr_premium := i.second_yr_premium;
            l_biz.policy_ration :=
                ROUND ((i.no_of_2nd_yr_policy * 100) / i.number_of_policy, 2);
            l_biz.premium_ration :=
                     ROUND ((i.second_yr_premium * 100) / i.total_premium, 2);
            PIPE ROW (l_biz);
         END LOOP;
      ELSIF p_office_tp = '05'
      THEN
         FOR i IN
            (SELECT   f.servicing_off, f.sales_off, f.branch_off,
                      f.number_of_policy, f.total_premium,
                      NVL (s.no_of_2nd_yr_policy, 0) no_of_2nd_yr_policy,
                      NVL (s.second_yr_premium, 0) second_yr_premium
                 FROM (SELECT   DECODE (cs.servicing_off,
                                        '00000', v_office_cd,
                                        cs.servicing_off
                                       ) servicing_off,
                                DECODE (cs.sales_off,
                                        '00000', DECODE (cs.servicing_off,
                                                         '00000', v_office_cd,
                                                         cs.servicing_off
                                                        ),
                                        cs.sales_off
                                       ) sales_off,
                                DECODE
                                   (cs.branch_off,
                                    '00000', DECODE
                                                   (cs.sales_off,
                                                    '00000', DECODE
                                                            (cs.servicing_off,
                                                             '00000', v_office_cd,
                                                             cs.servicing_off
                                                            ),
                                                    cs.sales_off
                                                   ),
                                    cs.branch_off
                                   ) branch_off,
                                COUNT (pgid) number_of_policy,
                                SUM (installment_premium) total_premium
                           FROM ins_p_summery cs
                          WHERE comm_date BETWEEN p_com_date_from
                                              AND p_com_date_to
                            AND (   (    p_ins_tp_cd IS NOT NULL
                                     AND ins_tp_cd = p_ins_tp_cd
                                    )
                                 OR (p_ins_tp_cd IS NULL)
                                )
                       GROUP BY DECODE (cs.servicing_off,
                                        '00000', v_office_cd,
                                        cs.servicing_off
                                       ),
                                DECODE (cs.sales_off,
                                        '00000', DECODE (cs.servicing_off,
                                                         '00000', v_office_cd,
                                                         cs.servicing_off
                                                        ),
                                        cs.sales_off
                                       ),
                                DECODE (cs.branch_off,
                                        '00000', DECODE
                                                   (cs.sales_off,
                                                    '00000', DECODE
                                                            (cs.servicing_off,
                                                             '00000', v_office_cd,
                                                             cs.servicing_off
                                                            ),
                                                    cs.sales_off
                                                   ),
                                        cs.branch_off
                                       )) f,
                      (SELECT   DECODE (cs.servicing_off,
                                        '00000', v_office_cd,
                                        cs.servicing_off
                                       ) servicing_off,
                                DECODE (cs.sales_off,
                                        '00000', DECODE (cs.servicing_off,
                                                         '00000', v_office_cd,
                                                         cs.servicing_off
                                                        ),
                                        cs.sales_off
                                       ) sales_off,
                                DECODE
                                   (cs.branch_off,
                                    '00000', DECODE
                                                   (cs.sales_off,
                                                    '00000', DECODE
                                                            (cs.servicing_off,
                                                             '00000', v_office_cd,
                                                             cs.servicing_off
                                                            ),
                                                    cs.sales_off
                                                   ),
                                    cs.branch_off
                                   ) branch_off,
                                COUNT (pgid) no_of_2nd_yr_policy,
                                SUM (installment_premium) second_yr_premium
                           FROM ins_p_summery cs
                          WHERE cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                            AND cs.sales_off =
                                            NVL (p_sales_off_cd, cs.sales_off)
                            AND cs.branch_off =
                                          NVL (p_branch_off_cd, cs.branch_off)
                            AND last_paid_inst_no >
                                   DECODE (cs.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12
                                          )
                            AND comm_date BETWEEN p_com_date_from
                                              AND p_com_date_to
                            AND (   (    p_ins_tp_cd IS NOT NULL
                                     AND ins_tp_cd = p_ins_tp_cd
                                    )
                                 OR (p_ins_tp_cd IS NULL)
                                )
                       GROUP BY DECODE (cs.servicing_off,
                                        '00000', v_office_cd,
                                        cs.servicing_off
                                       ),
                                DECODE (cs.sales_off,
                                        '00000', DECODE (cs.servicing_off,
                                                         '00000', v_office_cd,
                                                         cs.servicing_off
                                                        ),
                                        cs.sales_off
                                       ),
                                DECODE (cs.branch_off,
                                        '00000', DECODE
                                                   (cs.sales_off,
                                                    '00000', DECODE
                                                            (cs.servicing_off,
                                                             '00000', v_office_cd,
                                                             cs.servicing_off
                                                            ),
                                                    cs.sales_off
                                                   ),
                                        cs.branch_off
                                       )) s
                WHERE f.servicing_off = s.servicing_off(+)
                  AND f.sales_off = s.sales_off(+)
                  AND f.branch_off = s.branch_off(+)
             ORDER BY f.servicing_off, f.sales_off, f.branch_off)
         LOOP
            l_biz.servicing_off := i.servicing_off;
            l_biz.sales_off := i.sales_off;
            l_biz.branch_off := i.branch_off;
            l_biz.tot_no_policy := i.number_of_policy;
            l_biz.first_yr_premium := i.total_premium;
            l_biz.tot_2nd_yr_policy := i.no_of_2nd_yr_policy;
            l_biz.second_yr_premium := i.second_yr_premium;
            l_biz.policy_ration :=
                ROUND ((i.no_of_2nd_yr_policy * 100) / i.number_of_policy, 2);
            l_biz.premium_ration :=
                     ROUND ((i.second_yr_premium * 100) / i.total_premium, 2);
            PIPE ROW (l_biz);
         END LOOP;
      END IF;

      NULL;
   END fun_ser_sp_office_pol;

---------------------
   FUNCTION fun_mis_emp_wise_bus (
      p_office_tp          CHAR,
      p_servicing_off_cd   VARCHAR2,
      p_sales_off_cd       VARCHAR2,
      p_branch_off_cd      VARCHAR2,
      p_coll_dt_fr         DATE,
      p_coll_dt_to         DATE,
      p_bus_cal_tp         CHAR,
      p_receive_mode       CHAR
-- '1' for Receive Date  Wise -- '2' fro Adjustment Date Wise -- '3' from Commission Date Wise
   )
      RETURN mis_emp_bus_row_tab PIPELINED
   IS
      l_biz         mis_emp_bus_row;
      v_office_cd   VARCHAR2 (10);
   BEGIN
      BEGIN
         SELECT office_cd
           INTO v_office_cd
           FROM hrm_office
          WHERE off_catg_cd = '01';
      EXCEPTION
         WHEN OTHERS
         THEN
            v_office_cd := '00000';
      END;

-- Add by Sharmin Sultana Prite 10-may-2016
      IF p_office_tp = '01'
      THEN
         FOR i IN (SELECT   agent_id, um_gid, bm_gid, bc_gid, dc_gid, rc_gid,
                            dvc_gid, cc_gid, SUM (cs.first_prem) first_prem,
                            SUM (cs.deffered) deffered,
                            SUM (cs.second_yr) second_yr,
                            SUM (cs.renewal) renewal,
                            SUM (DECODE (policy_file_tp,
                                         '1', cs.first_prem,
                                         0
                                        )
                                ) one_stop_amt,
                            SUM (DECODE (policy_file_tp,
                                         '2', cs.first_prem,
                                         0
                                        )
                                ) fdr_amt
                       FROM acc_coll_summery cs
                      WHERE (   (    p_bus_cal_tp = 1
                                 AND cs.receive_dt BETWEEN p_coll_dt_fr
                                                       AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 2
                                 AND cs.business_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 3
                                 AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                         AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 4
                                 AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                            )
                        AND   cs.first_prem
                            + cs.deffered
                            + (cs.second_yr)
                            + (cs.renewal) > 0
                        AND cs.rec_status = '1'
                        AND cs.status = '1'
                        AND cs.RECEIVE_MODE = p_receive_mode
                   GROUP BY agent_id,
                            um_gid,
                            bm_gid,
                            bc_gid,
                            dc_gid,
                            rc_gid,
                            dvc_gid,
                            cc_gid
                   ORDER BY agent_id,
                            um_gid,
                            bm_gid,
                            bc_gid,
                            dc_gid,
                            rc_gid,
                            dvc_gid,
                            cc_gid)
         LOOP
            /*IF i.agent_id != 0
            THEN
               l_biz.servicing_off := NULL;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.agent_id;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;*/---Musha on 31.05.2016
            IF i.um_gid != 0
            THEN
               l_biz.servicing_off := v_office_cd;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.um_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bm_gid != 0
            THEN
               l_biz.servicing_off := v_office_cd;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.bm_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bc_gid != 0
            THEN
               l_biz.servicing_off := v_office_cd;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.bc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dc_gid != 0
            THEN
               l_biz.servicing_off := v_office_cd;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.dc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.rc_gid != 0
            THEN
               l_biz.servicing_off := v_office_cd;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.rc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dvc_gid != 0
            THEN
               l_biz.servicing_off := v_office_cd;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.dvc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.cc_gid != 0
            THEN
               l_biz.servicing_off := v_office_cd;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.cc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;
         END LOOP;

         NULL;
--=================================================================
      ELSIF p_office_tp = '02'
      THEN
         FOR i IN (SELECT   DECODE (cs.servicing_off,
                                    '00000', v_office_cd,
                                    cs.servicing_off
                                   ) servicing_off,
                            um_gid, bm_gid, bc_gid, dc_gid, rc_gid, dvc_gid,
                            cc_gid, SUM (cs.first_prem) first_prem,
                            SUM (cs.deffered) deffered,
                            SUM (cs.second_yr) second_yr,
                            SUM (cs.renewal) renewal,
                            SUM (DECODE (policy_file_tp,
                                         '1', cs.first_prem,
                                         0
                                        )
                                ) one_stop_amt,
                            SUM (DECODE (policy_file_tp,
                                         '2', cs.first_prem,
                                         0
                                        )
                                ) fdr_amt
                       FROM acc_coll_summery cs
                      WHERE (   (    p_bus_cal_tp = 1
                                 AND cs.receive_dt BETWEEN p_coll_dt_fr
                                                       AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 2
                                 AND cs.business_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 3
                                 AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                         AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 4
                                 AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                            )
                        AND   cs.first_prem
                            + cs.deffered
                            + (cs.second_yr)
                            + (cs.renewal) > 0
                        AND cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                        AND cs.rec_status = '1'
                        AND cs.status = '1'
                   GROUP BY cs.servicing_off,
                            um_gid,
                            bm_gid,
                            bc_gid,
                            dc_gid,
                            rc_gid,
                            dvc_gid,
                            cc_gid
                   ORDER BY servicing_off,
                            um_gid,
                            bm_gid,
                            bc_gid,
                            dc_gid,
                            rc_gid,
                            dvc_gid,
                            cc_gid)
         LOOP
            IF i.um_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.um_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bm_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.bm_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.bc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.dc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.rc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.rc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dvc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.dvc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.cc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.cc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;
         END LOOP;

         NULL;
      ELSIF p_office_tp = '04'
      THEN
         FOR i IN (SELECT   DECODE (cs.servicing_off,
                                    '00000', v_office_cd,
                                    cs.servicing_off
                                   ) servicing_off,
                            DECODE (cs.sales_off,
                                    '00000', DECODE (cs.servicing_off,
                                                     '00000', v_office_cd,
                                                     cs.servicing_off
                                                    ),
                                    cs.sales_off
                                   ) sales_off,
                            um_gid, bm_gid, bc_gid, dc_gid, rc_gid, dvc_gid,
                            cc_gid, SUM (cs.first_prem) first_prem,
                            SUM (cs.deffered) deffered,
                            SUM (cs.second_yr) second_yr,
                            SUM (cs.renewal) renewal,
                            SUM (DECODE (policy_file_tp,
                                         '1', cs.first_prem,
                                         0
                                        )
                                ) one_stop_amt,
                            SUM (DECODE (policy_file_tp,
                                         '2', cs.first_prem,
                                         0
                                        )
                                ) fdr_amt
                       FROM acc_coll_summery cs
                      WHERE (   (    p_bus_cal_tp = 1
                                 AND cs.receive_dt BETWEEN p_coll_dt_fr
                                                       AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 2
                                 AND cs.business_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 3
                                 AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                         AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 4
                                 AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                            )
                        AND   cs.first_prem
                            + cs.deffered
                            + (cs.second_yr)
                            + (cs.renewal) > 0
                        AND cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                        AND cs.sales_off = NVL (p_sales_off_cd, cs.sales_off)
                        AND cs.rec_status = '1'
                        AND cs.status = '1'
                   GROUP BY cs.servicing_off,
                            cs.sales_off,
                            um_gid,
                            bm_gid,
                            bc_gid,
                            dc_gid,
                            rc_gid,
                            dvc_gid,
                            cc_gid
                   ORDER BY servicing_off,
                            um_gid,
                            bm_gid,
                            bc_gid,
                            dc_gid,
                            rc_gid,
                            dvc_gid,
                            cc_gid)
         LOOP
            IF i.um_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.um_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bm_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.bm_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.bc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.dc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.rc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.rc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dvc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.dvc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.cc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.cc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;
         END LOOP;

         NULL;
      ELSIF p_office_tp = '05'
      THEN
         FOR i IN
            (SELECT   DECODE (cs.servicing_off,
                              '00000', v_office_cd,
                              cs.servicing_off
                             ) servicing_off,
                      DECODE (cs.sales_off,
                              '00000', DECODE (cs.servicing_off,
                                               '00000', v_office_cd,
                                               cs.servicing_off
                                              ),
                              cs.sales_off
                             ) sales_off,
                      DECODE (cs.branch_off,
                              '00000', DECODE (cs.sales_off,
                                               '00000', DECODE
                                                            (cs.servicing_off,
                                                             '00000', v_office_cd,
                                                             cs.servicing_off
                                                            ),
                                               cs.sales_off
                                              ),
                              cs.branch_off
                             ) branch_off,
                      um_gid, bm_gid, bc_gid, dc_gid, rc_gid, dvc_gid,
                      cc_gid, SUM (cs.first_prem) first_prem,
                      SUM (cs.deffered) deffered,
                      SUM (cs.second_yr) second_yr, SUM (cs.renewal) renewal,
                      SUM (DECODE (policy_file_tp, '1', cs.first_prem, 0)
                          ) one_stop_amt,
                      SUM (DECODE (policy_file_tp, '2', cs.first_prem, 0)
                          ) fdr_amt
                 FROM acc_coll_summery cs
                WHERE (   (    p_bus_cal_tp = 1
                           AND cs.receive_dt BETWEEN p_coll_dt_fr AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 2
                           AND cs.business_date BETWEEN p_coll_dt_fr
                                                    AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 3
                           AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                   AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 4
                           AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                    AND p_coll_dt_to
                          )
                      )
                  AND   cs.first_prem
                      + cs.deffered
                      + (cs.second_yr)
                      + (cs.renewal) > 0
                  AND cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                  AND cs.sales_off = NVL (p_sales_off_cd, cs.sales_off)
                  AND cs.branch_off = NVL (p_branch_off_cd, cs.branch_off)
                  AND cs.rec_status = '1'
                  AND cs.status = '1'
             GROUP BY cs.servicing_off,
                      cs.sales_off,
                      cs.branch_off,
                      um_gid,
                      bm_gid,
                      bc_gid,
                      dc_gid,
                      rc_gid,
                      dvc_gid,
                      cc_gid
             ORDER BY servicing_off,
                      um_gid,
                      bm_gid,
                      bc_gid,
                      dc_gid,
                      rc_gid,
                      dvc_gid,
                      cc_gid)
         LOOP
            IF i.um_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.um_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bm_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.bm_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.bc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.dc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.rc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.rc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dvc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.dvc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.cc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.cc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;
         END LOOP;
      END IF;
   END fun_mis_emp_wise_bus;
---===============================

   ----
   FUNCTION fun_year_bus (p_year_from CHAR, p_year_to CHAR)
      RETURN mis_year_row_tab PIPELINED
   IS
      l_biz    mis_year_row;
      v_year   VARCHAR2 (10);
   BEGIN
      FOR i IN TO_NUMBER (p_year_from) .. TO_NUMBER (p_year_to)
      LOOP
         l_biz.p_year := i;
         PIPE ROW (l_biz);
      END LOOP;
   END fun_year_bus;
END pkg_mis_report;
/


--
-- PKG_NEWBUSINESS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_newbusiness
AS
   PROCEDURE pro_client_age (
      p_pgid         IN       ins_p_proposal.pgid%TYPE,
      p_product_cd   IN       ins_product.product_cd%TYPE,
      p_age          OUT      NUMBER,
      p_min_age      OUT      NUMBER,
      p_max_age      OUT      NUMBER
   )
   AS
      v_age            NUMBER (3)                          := 0;
      v_age1           NUMBER (3)                          := 0;
      v_age2           NUMBER (3)                          := 0;
      v_policy_group   ins_policy_type.policy_tp_cd%TYPE;
   BEGIN
      SELECT po.policy_tp_cd
        INTO v_policy_group
        FROM ins_product p, ins_policy_type po
       WHERE p.policy_tp_cd = po.policy_tp_cd AND p.product_cd = p_product_cd;

      IF v_policy_group = '05'
      THEN
         SELECT ROUND ((NVL (p.comm_dt, p.proposal_dt) - r.dob) / 365.242199)
                                                                          age
           INTO v_age1
           FROM ins_p_proposal p, ins_p_personal r
          WHERE p.pgid = p_pgid
            AND r.party_cd = '03'
            AND r.sl_no = 1
            AND p.pgid = r.pgid;

         SELECT ROUND ((NVL (p.comm_dt, p.proposal_dt) - r.dob) / 365.242199)
                                                                          age
           INTO v_age2
           FROM ins_p_proposal p, ins_p_personal r
          WHERE p.pgid = p_pgid
            AND r.party_cd = '03'
            AND r.sl_no = 2
            AND p.pgid = r.pgid;

         SELECT   DECODE (l.adj_with,
                          'L', GREATEST (v_age1, v_age2),
                          LEAST (v_age1, v_age2)
                         )
                + DECODE (l.subtract_add, 'S', -no_of_yr, no_of_yr)
           INTO v_age
           FROM ins_age_adj_list l
          WHERE ABS (v_age1 - v_age2) BETWEEN l.age_diff_from AND l.age_diff_to;
      ELSE
         SELECT ROUND ((NVL (p.comm_dt, p.proposal_dt) - r.dob) / 365.242199)
                                                                          age
           INTO v_age
           FROM ins_p_proposal p, ins_p_personal r
          WHERE p.pgid = r.pgid
            AND r.party_cd = DECODE (v_policy_group, '03', '02', '03')
            AND p.pgid = p_pgid;
      END IF;

      p_age := v_age;

      IF v_age1 >= v_age2
      THEN
         p_max_age := v_age1;
         p_min_age := v_age2;
      ELSE
         p_max_age := v_age2;
         p_min_age := v_age1;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_age := 0;
         p_min_age := 0;
         p_max_age := 0;
   END pro_client_age;

/*Calculate policy premium amount*/

   /* Update By Md. sayadur Rahaman

   Update Date:15-Jan-2014*/
   PROCEDURE pro_prem_cal (
      p_pgid               IN       ins_p_proposal.pgid%TYPE,
      p_product_cd         IN       ins_product.product_cd%TYPE,
      p_term               IN       ins_p_summery.term%TYPE,
      p_sumassured         IN       ins_p_summery.term%TYPE,
      p_pay_mode           IN       ins_p_summery.pay_mode_cd%TYPE,
      p_option             IN       ins_p_summery.option_cd%TYPE,
      p_staf_flag          IN       VARCHAR2,
      p_age_at_entry       IN       ins_p_summery.age%TYPE,
      p_min_age            IN       ins_p_summery.age%TYPE,
      p_max_age            IN       ins_p_summery.age%TYPE,
      p_life_prem          OUT      ins_p_summery.life_premium%TYPE,
      p_yearly_life_prem   OUT      ins_p_summery.life_premium%TYPE,
--p_accidental_prem OUT ins_p_summery.life_premium%TYPE,

      --p_extra_prem OUT ins_p_summery.life_premium%TYPE,

      --p_instl_prem OUT ins_p_summery.life_premium%TYPE,
      p_error              OUT      VARCHAR2
   )
   IS
      v_product_cd           ins_product.product_cd%TYPE;
      v_term                 ins_p_summery.term%TYPE;
      v_age_at_entry         ins_p_summery.age%TYPE;
      v_sum_assured          ins_p_summery.sum_assured%TYPE;
      v_pay_mode             ins_p_summery.pay_mode_cd%TYPE;
      v_staff_rebate         ins_p_basic.staff_rebate%TYPE;
      v_option_cd            ins_p_summery.option_cd%TYPE;
      v_yly_premium          ins_p_summery.installment_premium%TYPE;
      v_life_premium         ins_p_summery.installment_premium%TYPE;
      v_accidental_prem      ins_p_summery.installment_premium%TYPE;
      v_extra_premium        ins_p_summery.installment_premium%TYPE;
      v_instl_premium        ins_p_summery.installment_premium%TYPE;
      v_param_sum_assured    ins_p_summery.sum_assured%TYPE;
      v_param_monthly_prem   ins_p_summery.installment_premium%TYPE;
      v_min_age              NUMBER (3)                                 := 0;
      v_mult_factor          NUMBER (3)                                 := 0;
--v_monthly_prem ins_p_summery.installment_premium%TYPE;
      v_premium_rate         ins_product_defn.rate%TYPE;
      v_supp_prod_premium    ins_p_summery.installment_premium%TYPE;
      v_supp_ben_premium     ins_p_summery.installment_premium%TYPE;
      v_cal_para             ins_product.cal_para%TYPE;
--v_gross_reb_extra_amt NUMBER := 0;
      v_gross_life_premium   NUMBER;
----------------------
      v_policy_tp_cd         ins_product.policy_tp_cd%TYPE;
      v_second_age_rate_st   ins_product_defn.second_age_rate_st%TYPE;
      v_gen_value_amt        NUMBER;
      v_rebate_extra_amt     NUMBER;
      v_rebate_extra_error   VARCHAR2 (200);
   BEGIN
      v_product_cd := p_product_cd;
      v_term := p_term;
      v_sum_assured := p_sumassured;
      v_pay_mode := p_pay_mode;
      v_option_cd := p_option;
      v_staff_rebate := p_staf_flag;
      v_age_at_entry := p_age_at_entry;

      BEGIN
         SELECT p.policy_tp_cd
           INTO v_policy_tp_cd
           FROM ins_product p
          WHERE p.product_cd = p_product_cd;
      EXCEPTION
         WHEN OTHERS
         THEN
            p_error := 'Policy type not found.';
      END;

--ins_policy_type--

      /*01 Endowment (General)

      02 Pension

      03 Children

      04 Endowment (Stage)

      05 Endowment (Joint)

      06 Endowment (DPS)

      07 Whole Life Assurance

      08 Endowment(Overseas)

      09 Term

      10 Single Payment*/

      --Find product rate or monthly premium--

      --IF v_product_cd = '63'
      IF v_policy_tp_cd = '06'
      THEN
         BEGIN
            SELECT d.instl_premium
              INTO v_premium_rate                             --v_monthly_prem
              FROM ins_product_mon_setup_mst m, ins_product_mon_setup_dtl d
             WHERE m.setup_id = d.setup_id
               AND product_cd = v_product_cd
               AND v_age_at_entry BETWEEN m.min_entry_age AND m.max_entry_age
               AND d.term = v_term
               AND d.sum_assured = v_sum_assured;

            v_gross_life_premium := v_premium_rate * 12;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_error :=
                     'Premium Rate not found as per regarding information, Product_cd='
                  || v_product_cd
                  || ' Term='
                  || v_term
                  || ' Age='
                  || v_age_at_entry
                  || ' and Sum Assured='
                  || v_sum_assured;
--END;
         END;
      ELSE
         BEGIN
--For all policy exception of Joint policy
            SELECT d.rate, p.cal_para, d.second_age_rate_st
              INTO v_premium_rate, v_cal_para, v_second_age_rate_st
              FROM ins_product_defn d, ins_product p
             WHERE d.product_cd = v_product_cd
               AND d.term = v_term
               AND d.age = v_age_at_entry
               AND d.product_cd = p.product_cd;

--for joint policy when rate is define as per minimum and maximum age. this setup is found in SLIC
            IF v_policy_tp_cd = '05' AND v_second_age_rate_st = '1'
            THEN
--here '05' means joint policy and v_second_age_rate_st = '1' means second age is defined seperatly
               pro_double_age_prem_rate_prem
                                           (p_product_cd        => v_product_cd,
                                            p_term              => v_term,
                                            p_min_age           => p_min_age,
                                            p_max_age           => p_max_age,
                                            p_premium_rate      => v_premium_rate,
                                            p_error             => p_error
                                           );
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               BEGIN
                  SELECT MIN (age)
                    INTO v_min_age
                    FROM ins_product_defn
                   WHERE product_cd = v_product_cd AND term = v_term;

                  IF v_age_at_entry < v_min_age
                  THEN
                     SELECT d.rate, p.cal_para, d.second_age_rate_st
                       INTO v_premium_rate, v_cal_para, v_second_age_rate_st
                       FROM ins_product_defn d, ins_product p
                      WHERE d.product_cd = v_product_cd
                        AND term = v_term
                        AND age = v_min_age
                        AND d.product_cd = p.product_cd;

                     --for joint policy when rate is define as per minimum and maximum age. this setup is found in SLIC
                     IF v_policy_tp_cd = '05' AND v_second_age_rate_st = '1'
                     THEN
                        --here '05' means joint policy and v_second_age_rate_st = '1' means second age is defined seperatly
                        pro_double_age_prem_rate_prem
                                           (p_product_cd        => v_product_cd,
                                            p_term              => v_term,
                                            p_min_age           => p_min_age,
                                            p_max_age           => p_max_age,
                                            p_premium_rate      => v_premium_rate,
                                            p_error             => p_error
                                           );
                     END IF;
                  END IF;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     p_error := 'Invalid Product Rate';
                  WHEN OTHERS
                  THEN
                     p_error := 'Invalid Product Rate';
               END;
         END;

         v_gross_life_premium := v_sum_assured * v_premium_rate / v_cal_para;
      END IF;

      IF p_error IS NULL
      THEN
         --Finding the rebate or extra premium
         /*DECLARE
            CURSOR cur_rebate (
               p_product_cd    VARCHAR2,
               p_pay_mode_cd   VARCHAR2,
               p_sum_assured   NUMBER
            )
            IS
               (SELECT d.gen_value_amt, d.add_deduct_flag, d.add_ded_with,
                       d.rate_calc_on, d.rate_fixed_flag, d.staff_value_amt,
                       d.cal_para
                  FROM ins_rebate_setup_mst m,
                       ins_rebate_setup_dtl d,
                       ins_rebate_extra r
                 WHERE m.rebate_extra_cd = d.rebate_extra_cd
                   AND m.rebate_extra_cd = r.rebate_extra_cd
                   AND r.status = '1'
                   AND (   (    m.product_depn = '1'
                            AND d.product_cd = p_product_cd
                           )
                        OR (m.product_depn = '0')
                       )
                   AND (   (    m.pay_mode_depn = '1'
                            AND d.pay_mode_cd = p_pay_mode_cd
                           )
                        OR (m.pay_mode_depn = '0')
                       )
                   AND (   (    m.sum_assured_depn = '1'
                            AND p_sum_assured BETWEEN sum_assured_from
                                                  AND sum_assured_to
                           )
                        OR (m.sum_assured_depn = '0')
                       ));

            rec_cur_rebate          cur_rebate%ROWTYPE;
            v_reb_extra_amt         ins_product_defn.rate%TYPE;
            v_staff_reb_extra_amt   ins_product_defn.rate%TYPE;
         BEGIN
            OPEN cur_rebate (v_product_cd, v_pay_mode, v_sum_assured);

            LOOP
               FETCH cur_rebate
                INTO rec_cur_rebate;

               EXIT WHEN cur_rebate%NOTFOUND;

               IF rec_cur_rebate.add_ded_with = '1'
               THEN                       --1= Premium Rate, 2 = Life Premium
                  IF rec_cur_rebate.rate_fixed_flag = '1'
                  THEN                 --rate_fixed_flag: 1 = Rate, 2 = Fixed
                     v_reb_extra_amt :=
                          (v_premium_rate * rec_cur_rebate.gen_value_amt
                          )
                        / rec_cur_rebate.cal_para;

                     IF     v_staff_rebate = '1'
                        AND rec_cur_rebate.gen_value_amt > 0
                     THEN
                        v_staff_reb_extra_amt :=
                             (v_premium_rate * rec_cur_rebate.staff_value_amt
                             )
                           / rec_cur_rebate.cal_para;
                     ELSE
                        v_staff_reb_extra_amt := 0;
                     END IF;

                     IF rec_cur_rebate.add_deduct_flag = '1'
                     THEN               --add_deduct_flag: 1 = Add, 2 = Deduct
                        v_premium_rate :=
                             v_premium_rate
                           + (v_reb_extra_amt + v_staff_reb_extra_amt);
                     ELSIF rec_cur_rebate.add_deduct_flag = '2'
                     THEN               --add_deduct_flag: 1 = Add, 2 = Deduct
                        v_premium_rate :=
                             v_premium_rate
                           - (v_reb_extra_amt + v_staff_reb_extra_amt);
                     END IF;
                  ELSIF rec_cur_rebate.rate_fixed_flag = '2'
                  THEN                  --rate_fixed_flag: 1 = Rate, 2 = Fixed
                     v_reb_extra_amt := rec_cur_rebate.gen_value_amt;

                     IF     v_staff_rebate = '1'
                        AND rec_cur_rebate.gen_value_amt > 0
                     THEN
                        v_staff_reb_extra_amt :=
                                               rec_cur_rebate.staff_value_amt;
                     ELSE
                        v_staff_reb_extra_amt := 0;
                     END IF;

                     IF rec_cur_rebate.add_deduct_flag = '1'
                     THEN               --add_deduct_flag: 1 = Add, 2 = Deduct
                        v_premium_rate :=
                             v_premium_rate
                           + (v_reb_extra_amt + v_staff_reb_extra_amt);
                     ELSIF rec_cur_rebate.add_deduct_flag = '2'
                     THEN               --add_deduct_flag: 1 = Add, 2 = Deduct
                        v_premium_rate :=
                             v_premium_rate
                           - (v_reb_extra_amt + v_staff_reb_extra_amt);
                     END IF;
                  END IF;
               ELSIF rec_cur_rebate.add_ded_with = '2'
               THEN                        --1= Premium Rate, 2 = Life Premium
                  NULL;
               END IF;
            END LOOP;

            CLOSE cur_rebate;
         END;*/---Musha on 29.12.2016
         IF v_policy_tp_cd = '06'
         THEN
            v_yly_premium := v_premium_rate * 12;
            v_life_premium := v_premium_rate;
         ELSE
            v_yly_premium := v_sum_assured * v_premium_rate / v_cal_para;
            ---------------Musha on 29.12.2016----------
            pro_rebate_extra_calc (p_product_cd              => v_product_cd,
                                   p_pay_mode_cd             => v_pay_mode,
                                   p_sum_assured             => v_sum_assured,
                                   p_premium_rate            => v_premium_rate,
                                   p_staff_rebate            => v_staff_rebate,
                                   p_add_ded_with            => '1',
                                   p_gross_life_premium      => v_yly_premium,
                                   p_rebate_extra_amt        => v_rebate_extra_amt,
                                   p_error                   => v_rebate_extra_error
                                  );
            v_yly_premium := v_yly_premium + NVL (v_rebate_extra_amt, 0);

---------------------------------------------
            SELECT ROUND (  v_yly_premium
                          / DECODE (v_pay_mode,
                                    '01', 1,
                                    '02', 2,
                                    '03', 4,
                                    '04', 12,
                                    1
                                   )
                         )
              INTO v_life_premium
              FROM DUAL;
         END IF;

         p_yearly_life_prem := v_yly_premium;

         --Find accedental premium--
         SELECT NVL (SUM (p.installment_premium), 0)
           INTO v_supp_prod_premium
           FROM ins_p_supp_product p
          WHERE p.pgid = p_pgid;

         SELECT NVL (SUM (b.installment_premium), 0)
           INTO v_supp_ben_premium
           FROM ins_p_supp_benefit b
          WHERE b.pgid = p_pgid;

         v_accidental_prem :=
                     NVL (v_supp_prod_premium, 0)
                     + NVL (v_supp_ben_premium, 0);

         --Find extra premium--
         SELECT NVL (SUM (x.rebate_extra_inst_amt), 0)
           INTO v_extra_premium
           FROM ins_p_basic_rebate_extra x
          WHERE x.pgid = p_pgid;

         v_instl_premium :=
            ROUND ((  NVL (v_life_premium, 0)
                    + NVL (v_accidental_prem, 0)
                    + NVL (v_extra_premium, 0)
                   ),
                   2
                  );
         p_life_prem := ROUND (NVL (v_life_premium, 0));
      ELSE
         p_life_prem := 0;
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         p_error := 'Invalid Proposal/Policy';
      WHEN OTHERS
      THEN
         p_error := 'Error in pro_prem_cal: ' || SQLERRM;
   END pro_prem_cal;

/*Supplementary benefit premium calculation*/
   PROCEDURE pro_supp_ben_prem (
      p_pgid          IN       ins_p_proposal.pgid%TYPE,
      p_supp_ben_cd   IN       ins_p_supp_benefit.supp_ben_cd%TYPE,
      p_product_cd    IN       ins_product.product_cd%TYPE,
      p_sumassured    IN       ins_p_summery.term%TYPE,
      p_pay_mode      IN       ins_p_summery.pay_mode_cd%TYPE,
      p_extra_prem    OUT      ins_p_summery.life_premium%TYPE,
      p_error         OUT      VARCHAR2
   )
   IS
      v_rate                 NUMBER (7, 2);
      v_cal_para             NUMBER (6, 2);
      v_gen_value_amt        ins_rebate_setup_dtl.gen_value_amt%TYPE;
      v_rebate_extra_amt     NUMBER;
      v_rebate_extra_error   VARCHAR2 (200);
      v_staff_rebate         VARCHAR2 (1);
   BEGIN
      FOR i IN (SELECT p.sex_cd,
                       NVL (e.edu_ins_qualified, 0) edu_ins_qualified,
                       NVL (p.occu_class_cd, '01') occu_class_cd,
                       ROUND (  (NVL (s.comm_dt, s.proposal_dt) - p.dob)
                              / 365.242199
                             ) age
--c.occu_dependency
                FROM   ins_p_personal p,
                       ins_p_proposal s,
                       ins_edu_qualification e,
                       ins_occu_setup c
                 WHERE p.pgid = p_pgid
                   AND p.party_cd = '03'
                   AND p.pgid = s.pgid
                   AND p.edu_qual_cd = e.edu_qual_cd(+)
                   AND p.occu_cd = c.occu_cd(+)
                   AND p.occu_scope_cd = c.occu_scope_cd(+))
      LOOP
         BEGIN
            SELECT t.ben_rate, b.cal_para
              INTO v_rate, v_cal_para
              FROM ins_supp_ben_tar t, ins_supp_benifit b
             WHERE t.supp_ben_cd = b.supp_ben_cd
               AND t.supp_ben_cd = p_supp_ben_cd
               AND t.occu_class_cd = i.occu_class_cd;

            p_extra_prem :=
                 NVL (p_extra_prem, 0)
               + ROUND ((p_sumassured * v_rate) / v_cal_para);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_error :=
                  'Error in pro_supp_ben_prem: Invalid supplimentary benefit rate setup';
         END;
      END LOOP;

      IF p_error IS NULL
      THEN
         p_extra_prem := ROUND (p_extra_prem, 2);
         ---------------Musha on 29.12.2016----------
         v_staff_rebate := '0';
         pro_rebate_extra_calc (p_product_cd              => p_product_cd,
                                p_pay_mode_cd             => p_pay_mode,
                                p_sum_assured             => p_sumassured,
                                p_premium_rate            => v_rate,
                                p_staff_rebate            => v_staff_rebate,
                                p_add_ded_with            => '3',
                                p_gross_life_premium      => p_extra_prem,
                                p_rebate_extra_amt        => v_rebate_extra_amt,
                                p_error                   => v_rebate_extra_error
                               );
         p_extra_prem := ROUND (p_extra_prem + NVL (v_rebate_extra_amt, 0), 2);

---------------------------------------------
         SELECT ROUND (  p_extra_prem
                       / DECODE (p_pay_mode,
                                 '01', 1,
                                 '02', 2,
                                 '03', 4,
                                 '04', 12,
                                 1
                                )
                      )
           INTO p_extra_prem
           FROM DUAL;
      ELSE
         p_extra_prem := 0;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := 'Error in pro_supp_ben_prem: ' || SQLERRM;
   END pro_supp_ben_prem;

/*Term wise premium calculation*/
   PROCEDURE pro_term_wise_premium (
      p_pgid       IN       ins_p_summery.pgid%TYPE,
      p_prem_tab   OUT      tp_term_wise_prem_tab,
      p_error      OUT      VARCHAR2
   )
   IS
      CURSOR cursor_premium
      IS
         SELECT   a.term
             FROM (SELECT pp.supp_product_term term
                     FROM ins_p_basic b, ins_p_supp_product pp
                    WHERE b.pgid = pp.pgid
                      AND pp.pgid = p_pgid
                      AND pp.supp_product_term < b.term
                   UNION
                   SELECT bb.supp_ben_term term
                     FROM ins_p_basic b, ins_p_supp_benefit bb
                    WHERE b.pgid = bb.pgid
                      AND bb.pgid = p_pgid
                      AND bb.supp_ben_term < b.term
                   UNION
                   SELECT b.term term
                     FROM ins_p_basic b
                    WHERE b.pgid = p_pgid) a
         ORDER BY 1;

      v_cursor_premium    cursor_premium%ROWTYPE;
      v_monthly_prem      NUMBER (10, 2)           := 0;
      v_basic_premium     NUMBER (15, 2);
      v_product_premium   NUMBER (15, 2);
      v_benifit_premium   NUMBER (15, 2);
      v_inst_premium      NUMBER (15, 2);
      v_counter           NUMBER (3)               := 0;
      v_basic_term        NUMBER (3)               := 0;
      v_inst_from         NUMBER (3)               := 0;
      v_inst_to           NUMBER (3)               := 0;
      v_indx              NUMBER (2)               := 0;
   BEGIN
      OPEN cursor_premium;

      LOOP
         FETCH cursor_premium
          INTO v_cursor_premium;

         EXIT WHEN cursor_premium%NOTFOUND;

         SELECT b.expected_premium, b.term
           INTO v_basic_premium, v_basic_term
           FROM ins_p_basic b
          WHERE pgid = p_pgid;

         SELECT NVL (SUM (p.installment_premium), 0)
           INTO v_product_premium
           FROM ins_p_supp_product p
          WHERE p.pgid = p_pgid
            AND NVL (p.supp_product_term, v_basic_term) =
                                                         v_cursor_premium.term;

         SELECT NVL (SUM (b.installment_premium), 0)
           INTO v_benifit_premium
           FROM ins_p_supp_benefit b
          WHERE b.pgid = p_pgid
            AND NVL (b.supp_ben_term, v_basic_term) = v_cursor_premium.term;

         v_inst_from := v_counter + 1;
         v_inst_to := v_cursor_premium.term;
         v_counter := v_cursor_premium.term;
         v_inst_premium :=
               ROUND (v_basic_premium + v_product_premium + v_benifit_premium);
         p_prem_tab (v_indx).inst_no_from := v_inst_from;
         p_prem_tab (v_indx).inst_no_to := v_inst_to;
         p_prem_tab (v_indx).inst_premium := v_inst_premium;
         v_indx := v_indx + 1;
      END LOOP;

      CLOSE cursor_premium;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END pro_term_wise_premium;

/*Life standard class finding*/
   PROCEDURE pro_life_std_class (
      p_pgid                IN       ins_p_proposal.pgid%TYPE,
      p_life_std_class_cd   OUT      ins_life_std_class.life_class_cd%TYPE,
      p_life_class_extra    OUT      ins_uw_accpt_gen.life_class_extra%TYPE,
      p_error               OUT      VARCHAR2
   )
   IS
--v_product_cd ins_p_basic.product_cd%TYPE := NULL;

      --v_party_id ins_p_personal.party_id%TYPE := NULL;

      --v_gender_cd ins_p_personal.sex_cd%TYPE := NULL;

      --v_age ins_p_basic.age%TYPE := 0;

      --v_sum_assurerd ins_p_basic.sum_assured%TYPE := 0;

      -----------------------------
      v_diag_mortality         ins_diag_mortality.extra_mortality%TYPE;
      v_habit_mortality        ins_habit_mortality.extra_mortality%TYPE;
      v_height_value           ins_p_main_diag.report_value%TYPE         := 0;
      v_weight_value           ins_p_main_diag.report_value%TYPE         := 0;
      v_overw_cat_cd           ins_built_tbl.overw_cat_cd%TYPE        := NULL;
      v_built_extra_mort       ins_overw_extra_mortality.extra_mortality%TYPE
                                                                         := 0;
      v_cal_para               ins_life_std_class_mort.cal_para%TYPE     := 0;
      v_life_class_mortality   ins_life_std_class_mort.any_default_rating%TYPE;
      v_rate                   ins_life_std_class_basic_rate.rate%TYPE   := 0;
      v_life_std_class_cd      ins_life_std_class.life_class_cd%TYPE  := NULL;
      v_life_class_extra       ins_uw_accpt_gen.life_class_extra%TYPE    := 0;
      v_policy_group           ins_policy_type.policy_tp_cd%TYPE;
   BEGIN
      FOR i IN (SELECT b.product_cd, p.party_id, p.sex_cd, b.age,
                       b.sum_assured
                  FROM ins_p_basic b, ins_p_personal p
                 WHERE b.pgid = p_pgid
                   AND p.party_cd = '03'
                   AND b.pgid = p.pgid)
      LOOP
         SELECT po.policy_tp_cd
           INTO v_policy_group
           FROM ins_product p, ins_policy_type po
          WHERE p.policy_tp_cd = po.policy_tp_cd
            AND p.product_cd = i.product_cd;

--IF v_policy_group NOT IN

         -- ('06') --i.product_cd NOT IN ('61', '62', '63')

         --THEN
         BEGIN
            SELECT NVL (SUM (a.extra_mortality), 0)
              INTO v_diag_mortality
              FROM ins_diag_mortality a, ins_p_main_diag b, ins_diag_test c
             WHERE a.diag_test_cd = b.diag_test_cd
               AND a.diag_test_cd = c.diag_test_cd
--AND c.diag_category = '03'
               AND c.diag_test_cd NOT IN ('0001', '0002')
               AND b.pgid = p_pgid
               AND b.party_id = i.party_id
               AND b.party_cd = '03'
               AND a.gender_cd = i.sex_cd
               AND i.age BETWEEN a.age_from AND a.age_to
               AND b.report_value BETWEEN a.unit_from AND a.unit_to;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_error := 'Diagnosis Mortality Setup Not Found';
         END;

         BEGIN
            SELECT NVL (SUM (a.extra_mortality), 0)
              INTO v_habit_mortality
              FROM ins_habit_mortality a, ins_p_habit b
             WHERE a.habit_cd = b.habit_cd
               AND b.pgid = p_pgid
               AND b.party_id = i.party_id
               AND b.party_cd = '03'
               AND gender_cd = i.sex_cd
               AND i.age BETWEEN a.age_from AND a.age_to
               AND b.habit_value BETWEEN a.unit_from AND a.unit_to;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_error := 'Habit Mortality Setup Not Found';
         END;

         BEGIN
            SELECT ipmg.report_value
              INTO v_height_value
              FROM ins_p_main_diag ipmg, ins_diag_test idt
             WHERE ipmg.diag_test_cd = idt.diag_test_cd
--AND idt.diag_category = '01'
               AND idt.diag_test_cd = '0001'
               AND ipmg.pgid = p_pgid
               AND ipmg.party_cd = '03'
               AND ipmg.party_id = i.party_id;

            SELECT ipmg.report_value
              INTO v_weight_value
              FROM ins_p_main_diag ipmg, ins_diag_test idt
             WHERE ipmg.diag_test_cd = idt.diag_test_cd
--AND idt.diag_category = '02'
               AND idt.diag_test_cd = '0002'
               AND ipmg.pgid = p_pgid
               AND ipmg.party_cd = '03'
               AND ipmg.party_id = i.party_id;

            SELECT overw_cat_cd
              INTO v_overw_cat_cd
              FROM ins_built_tbl
             WHERE gender_cd = i.sex_cd
               AND v_height_value BETWEEN height_from AND height_to
               AND v_weight_value BETWEEN weight_from AND weight_to;

            SELECT NVL (extra_mortality, 0)
              INTO v_built_extra_mort
              FROM ins_overw_extra_mortality
             WHERE overw_cat_cd = v_overw_cat_cd
               AND i.age BETWEEN age_from AND age_to;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
--alert_message('Over Weight Extra Mortality Setup Not Found','Alert');
               NULL;
         END;

         BEGIN
            SELECT a.life_class_cd, a.cal_para, a.any_default_rating
              INTO v_life_std_class_cd, v_cal_para, v_life_class_mortality
              FROM ins_life_std_class_mort a
             WHERE (  NVL (v_diag_mortality, 0)
                    + NVL (v_habit_mortality, 0)
                    + NVL (v_built_extra_mort, 0)
                   ) BETWEEN a.extra_mortality_fr AND a.extra_mortality_to;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_error := 'Life Standard Class Mortality Setup Not Found';
         END;

         BEGIN
            SELECT rate
              INTO v_rate
              FROM ins_life_std_class_basic_rate
             WHERE product_cd = i.product_cd AND age = i.age;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_error := 'Life Standard Class Basic Rate Not Found';
         END;

         v_life_class_extra :=
            NVL (  (i.sum_assured * v_life_class_mortality * v_rate)
                 / v_cal_para,
                 0
                );

         IF    TO_NUMBER (v_life_std_class_cd) >
                                               TO_NUMBER (p_life_std_class_cd)
            OR p_life_std_class_cd IS NULL
         THEN
            p_life_std_class_cd := v_life_std_class_cd;
            p_life_class_extra := v_life_class_extra;
         END IF;
--END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := 'pro_life_std_class: ' || SQLERRM;
   END pro_life_std_class;

/*Insert development employee information the agent*/
   PROCEDURE pro_dev_emp_info (
      p_pgid       IN       ins_p_proposal.pgid%TYPE,
      p_agent_id   IN       hrm_agent.agent_id%TYPE,
      p_user       IN       VARCHAR2,
      p_error      OUT      VARCHAR2
   )
   IS
      dummy              BOOLEAN;
      v_de_gid           NUMBER (8);
      v_employmment_tp   VARCHAR2 (2);
      v_count            NUMBER (2)                               := 1;
      v_cnt_h_emp_gid    NUMBER (5);
      v_do_status        hrm_employee.activity_cd%TYPE;
      v_de_gid_boss      hrm_employee_setup.h_employee_gid%TYPE;
      v_cnt              NUMBER (2)                               := 0;
   BEGIN
      SELECT COUNT (g.pgid)
        INTO v_cnt
        FROM ins_p_agent g
       WHERE g.pgid = p_pgid;

      IF v_cnt = 0
      THEN
         INSERT INTO ins_p_agent
                     (pgid, agent_id, status, i_usr, i_dt, u_usr, u_dt,
                      accepted
                     )
              VALUES (p_pgid, p_agent_id, '01', p_user, SYSDATE, '', '',
                      '0'
                     );

         SELECT dev_emp_gid
           INTO v_de_gid
           FROM hrm_agent
          WHERE agent_id = p_agent_id;

         SELECT hrm_employee.activity_cd
           INTO v_do_status
           FROM hrm_employee
          WHERE emp_gid = v_de_gid;

         INSERT INTO ins_p_dev_employee
              VALUES (p_pgid, v_de_gid, v_count, v_do_status, p_user, SYSDATE,
                      '', '', p_agent_id);

         LOOP
            SELECT COUNT (h_employee_gid)
              INTO v_cnt_h_emp_gid
              FROM hrm_employee_setup s, hrm_employee e,
                   hrm_employment_type t
             WHERE s.employee_gid = v_de_gid
               AND e.emp_gid = s.employee_gid
               AND e.activity_cd = '01'
               AND e.employment_tp_cd = t.employment_tp_cd
               AND e.employment_tp_cd != (SELECT employment_tp_cd
                                            FROM hrm_employment_type
                                           WHERE official_rel = '1');

            EXIT WHEN v_cnt_h_emp_gid = 0;

            SELECT h_employee_gid
              INTO v_de_gid_boss
              FROM hrm_employee_setup s, hrm_employee e,
                   hrm_employment_type t
             WHERE s.employee_gid = v_de_gid
               AND e.emp_gid = s.employee_gid
               AND e.activity_cd = '01'
               AND e.employment_tp_cd = t.employment_tp_cd
               AND e.employment_tp_cd != (SELECT employment_tp_cd
                                            FROM hrm_employment_type
                                           WHERE official_rel = '1');

            v_count := v_count + 1;

            SELECT hrm_employee.activity_cd
              INTO v_do_status
              FROM hrm_employee
             WHERE emp_gid = v_de_gid_boss;

            INSERT INTO ins_p_dev_employee
                 VALUES (p_pgid, v_de_gid_boss, v_count, v_do_status, p_user,
                         SYSDATE, '', '', p_agent_id);

            v_de_gid := v_de_gid_boss;
         END LOOP;
      END IF;
--COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := 'pro_dev_emp_info: ' || SQLERRM;
   END pro_dev_emp_info;

/*Find extra premium*/
   PROCEDURE pro_extra_prem (
      p_pgid               IN       ins_p_proposal.pgid%TYPE,
      p_product_cd         IN       ins_p_basic.product_cd%TYPE,
      p_pay_mode_cd        IN       ins_p_basic.pay_mode_cd%TYPE,
      p_yearly_life_prem   IN       ins_p_summery.life_premium%TYPE,
      p_sum_assured        IN       ins_p_basic.sum_assured%TYPE,
      p_term               IN       ins_p_basic.term%TYPE,
      p_staff_rebate       IN       ins_p_basic.staff_rebate%TYPE,
      p_extra_tab          OUT      tp_extra_prem_tab,
      p_error              OUT      VARCHAR2
   )
   IS
--v_amount NUMBER (15, 2);
      v_cal_para                      NUMBER (15, 2);
--v_percentage_calculation VARCHAR (1);
      v_yrly_no_inst                  NUMBER (2)                         := 0;
      v_comm_dt                       DATE;
--v_gender_cd ins_p_personal.sex_cd%TYPE;

      --v_age ins_p_basic.age%TYPE;

      --v_maturity_age ins_p_basic.age%TYPE;

      --v_marital_status ins_p_personal.marital_status%TYPE;

      --v_edu_qual_cd ins_p_personal.edu_qual_cd%TYPE;

      --v_occu_cd ins_p_personal.occu_cd%TYPE;

      --v_occu_class_cd ins_p_personal.occu_class_cd%TYPE;

      --v_occu_scope_cd ins_p_personal.occu_scope_cd%TYPE;

      -----------------
      v_rebate_extra_cd               ins_rebate_extra.rebate_extra_cd%TYPE;
      v_rebate_extra_nm               ins_rebate_extra.rebate_extra_desc%TYPE;
      v_rebate_extra_amt              NUMBER (12, 2);
      v_rebate_extra_inst_amt         NUMBER (12, 2);
      v_indx                          NUMBER (3)                         := 0;
      v_loop_cnt                      NUMBER (3)                         := 0;
      v_exists                        NUMBER (3)                         := 0;
-------------------
      v_rate_fixed_flag               VARCHAR2 (1);
      v_value_amt                     NUMBER (15, 2);
      v_rate_calc_on                  VARCHAR2 (1);
      v_add_with                      VARCHAR2 (1);
      v_policy_group                  ins_policy_type.policy_tp_cd%TYPE;
      v_rebate_extra_amt_calc         NUMBER;
      v_rebate_extra_error            VARCHAR2 (200);
      v_sum_ass_waiver_depn           ins_extra_setup_mst.sum_ass_waiver_depn%TYPE;
      v_sum_ass_waiver_amt            ins_extra_setup_dtl.sum_ass_waiver_amt%TYPE;
      v_prev_policy_sumassured_depn   ins_extra_setup_mst.prev_policy_sumassured_depn%TYPE;
      v_prev_sum_assured              ins_p_o_policy.sum_assured%TYPE;
      v_calc_sum_assured              ins_p_o_policy.sum_assured%TYPE;

      CURSOR cur_extra (
         p_gender_cd        IN   ins_p_personal.sex_cd%TYPE,
         p_age              IN   ins_p_basic.age%TYPE,
         p_maturity_age     IN   ins_p_basic.age%TYPE,
         p_marital_status   IN   ins_p_personal.marital_status%TYPE,
         p_edu_qual_cd      IN   ins_p_personal.edu_qual_cd%TYPE,
--p_occu_cd IN ins_p_personal.occu_cd%TYPE,
         p_occu_class_cd    IN   ins_p_personal.occu_class_cd%TYPE,
         p_pay_mode_cd      IN   ins_pay_mode.pay_mode_cd%TYPE
      )
      IS
         SELECT s.rebate_extra_cd, r.rebate_extra_desc, sd.rate_fixed_flag,
                sd.value_amt, sd.cal_para, sd.rate_calc_on, sd.add_with,
                NVL (sd.sum_ass_waiver_amt, 0) sum_ass_waiver_amt,
                s.sum_ass_waiver_depn, s.prev_policy_sumassured_depn
           FROM ins_extra_setup_mst s,
                ins_extra_setup_dtl sd,
                ins_rebate_extra r
          WHERE r.rebate_extra = '1'
            AND status = '1'
            AND r.rebate_extra_cd = s.rebate_extra_cd
            AND r.rebate_extra_cd = sd.rebate_extra_cd
            AND (   s.product_depn = 0
                 OR (s.product_depn = 1 AND sd.product_cd = p_product_cd)
                )
            AND (   s.gender_depn = 0
                 OR (s.gender_depn = 1 AND sd.gender_code = p_gender_cd)
                )
            AND (   s.education_depn = 0
                 OR (s.education_depn = 1 AND sd.edu_qual_cd = p_edu_qual_cd
                    )
                )
            AND (   s.occu_class_depn = 0
                 OR (    s.occu_class_depn = 1
                     AND sd.occu_class_cd = p_occu_class_cd
                    )
                )
            AND (   s.pay_mode_depn = 0
                 OR (s.pay_mode_depn = 1 AND sd.pay_mode_cd = p_pay_mode_cd)
                )
            AND (   s.sum_ass_waiver_depn = 0
                 OR (    s.sum_ass_waiver_depn = 1
                     AND sd.sum_ass_waiver_amt < p_sum_assured
                    )
                );
   BEGIN
      SELECT p.policy_tp_cd
        INTO v_policy_group
        FROM ins_product p
       WHERE p.product_cd = p_product_cd;

      IF v_policy_group NOT IN ('06') --p_product_cd NOT IN ('61', '62', '63')
      THEN
         SELECT NVL (l.comm_dt, l.proposal_dt)
           INTO v_comm_dt
           FROM ins_p_proposal l
          WHERE l.pgid = p_pgid;

         SELECT (CASE
                    WHEN p_pay_mode_cd = '01'
                       THEN 1
                    WHEN p_pay_mode_cd = '02'
                       THEN 2
                    WHEN p_pay_mode_cd = '03'
                       THEN 4
                    WHEN p_pay_mode_cd = '04'
                       THEN 12
                    WHEN p_pay_mode_cd = '05'
                       THEN 1
                    ELSE 0
                 END
                )
           INTO v_yrly_no_inst
           FROM DUAL;

         v_loop_cnt := 0;

         FOR i IN (SELECT p.sex_cd,
                          ROUND ((v_comm_dt - p.dob) / 365.242199) age,
                          (ROUND ((v_comm_dt - p.dob) / 365.242199) + p_term
                          ) maturity_age,
                          p.marital_status, p.edu_qual_cd, p.occu_cd,
                          p.occu_class_cd, p.occu_scope_cd
                     FROM ins_p_personal p
                    WHERE p.pgid = p_pgid AND p.party_cd = '03')
         LOOP
            OPEN cur_extra (i.sex_cd,
                            i.age,
                            i.maturity_age,
                            i.marital_status,
                            i.edu_qual_cd,
--i.occu_cd,
                            i.occu_class_cd,
                            p_pay_mode_cd
                           );

            LOOP
               FETCH cur_extra
                INTO v_rebate_extra_cd, v_rebate_extra_nm, v_rate_fixed_flag,
                     v_value_amt, v_cal_para, v_rate_calc_on, v_add_with,
                     v_sum_ass_waiver_amt, v_sum_ass_waiver_depn,
                     v_prev_policy_sumassured_depn;

               EXIT WHEN cur_extra%NOTFOUND;

               IF v_rate_fixed_flag = '1'
               --Rate --v_percentage_calculation = '1'
               THEN
                  IF v_rate_calc_on = '1' --1 = Life Premium, 2 = Sum Assured
                  THEN
                     v_rebate_extra_amt :=
                        ROUND ((p_yearly_life_prem * v_value_amt) / v_cal_para
                              );
                  ELSE
                     SELECT NVL (SUM (p.sum_assured), 0)
                       INTO v_prev_sum_assured
                       FROM ins_p_o_policy p
                      WHERE p.pgid = p_pgid;

                     IF v_prev_sum_assured + p_sum_assured >
                                                          v_sum_ass_waiver_amt
                     THEN
                        IF   (v_prev_sum_assured + p_sum_assured)
                           - v_sum_ass_waiver_amt >= p_sum_assured
                        THEN
                           v_calc_sum_assured := p_sum_assured;
                        ELSE
                           v_calc_sum_assured :=
                                (v_prev_sum_assured + p_sum_assured
                                )
                              - v_sum_ass_waiver_amt;
                        END IF;
                     ELSE
                        v_sum_ass_waiver_amt := 0;
                     END IF;

                     v_rebate_extra_amt :=
                        ROUND (  ((v_calc_sum_assured) * v_value_amt)
                               / v_cal_para
                              );
                  --v_calc_sum_assured instead of p_sum_assured - v_sum_ass_waiver_amt
                  END IF;
               /*v_rebate_extra_inst_amt :=
                                ROUND (v_rebate_extra_amt / v_yrly_no_inst);*/--Musha on 29.12.2016
               ELSE
                  v_rebate_extra_amt := ROUND (v_value_amt);
               /*v_rebate_extra_inst_amt :=
                               ROUND (v_rebate_extra_amt / v_yrly_no_inst);*/--Musha on 29.12.2016
               END IF;

               ---------------Musha on 29.12.2016----------
               pro_rebate_extra_calc
                               (p_product_cd              => p_product_cd,
                                p_pay_mode_cd             => p_pay_mode_cd,
                                p_sum_assured             => p_sum_assured,
                                p_premium_rate            => v_value_amt,
                                p_staff_rebate            => p_staff_rebate,
                                p_add_ded_with            => '3',
                                p_gross_life_premium      => v_rebate_extra_amt,
                                p_rebate_extra_amt        => v_rebate_extra_amt_calc,
                                p_error                   => v_rebate_extra_error
                               );
               v_rebate_extra_amt :=
                  ROUND (v_rebate_extra_amt + NVL (v_rebate_extra_amt_calc, 0),
                         2
                        );
               v_rebate_extra_inst_amt :=
                                   ROUND (v_rebate_extra_amt / v_yrly_no_inst);
---------------------------------------------
               v_exists := 0;

               IF v_rebate_extra_cd IS NOT NULL
               THEN
                  IF v_loop_cnt = 0
                  THEN
                     p_extra_tab (v_indx).rebate_extra_cd :=
                                                            v_rebate_extra_cd;
                     p_extra_tab (v_indx).rebate_extra_nm :=
                                                            v_rebate_extra_nm;
                     p_extra_tab (v_indx).rebate_extra_amt :=
                                                           v_rebate_extra_amt;
                     p_extra_tab (v_indx).rebate_extra_inst_amt :=
                                                      v_rebate_extra_inst_amt;
                     v_indx := v_indx + 1;
                  ELSIF v_loop_cnt > 0
                  THEN
                     FOR j IN p_extra_tab.FIRST .. p_extra_tab.LAST
                     LOOP
                        IF p_extra_tab (j).rebate_extra_cd =
                                                            v_rebate_extra_cd
                        THEN
                           IF p_extra_tab (j).rebate_extra_amt <
                                                           v_rebate_extra_amt
                           THEN
                              p_extra_tab (j).rebate_extra_amt :=
                                                           v_rebate_extra_amt;
                              p_extra_tab (j).rebate_extra_inst_amt :=
                                                      v_rebate_extra_inst_amt;
                           END IF;

                           v_exists := 1;
                        END IF;
                     END LOOP;

                     IF v_exists = 1
                     THEN
                        NULL;
                     ELSE
                        p_extra_tab (v_indx).rebate_extra_cd :=
                                                            v_rebate_extra_cd;
                        p_extra_tab (v_indx).rebate_extra_nm :=
                                                            v_rebate_extra_nm;
                        p_extra_tab (v_indx).rebate_extra_amt :=
                                                           v_rebate_extra_amt;
                        p_extra_tab (v_indx).rebate_extra_inst_amt :=
                                                      v_rebate_extra_inst_amt;
                        v_indx := v_indx + 1;
                     END IF;
                  END IF;
               END IF;
            END LOOP;

            CLOSE cur_extra;

            v_loop_cnt := v_loop_cnt + 1;
         END LOOP;
      END IF;
   END pro_extra_prem;

/*

--- Find single extra premium

Added by Md Zahid Hasan

Date: 30 January, 2014

*/
   PROCEDURE pro_single_extra_prem (
      p_pgid                    IN       ins_p_proposal.pgid%TYPE,
      p_product_cd              IN       ins_p_basic.product_cd%TYPE,
      p_pay_mode_cd             IN       ins_p_basic.pay_mode_cd%TYPE,
      p_product_rate            IN       ins_product_defn.rate%TYPE,
      p_sum_assured             IN       ins_p_basic.sum_assured%TYPE,
--p_term IN ins_p_basic.term%TYPE,
      p_gender_cd               IN       VARCHAR2,
      p_edu_qual_cd             IN       VARCHAR2,
      p_occu_class_cd           IN       VARCHAR2,
      p_staff_rebate            IN       ins_p_basic.staff_rebate%TYPE,
      p_rebate_extra_cd         IN       ins_rebate_extra.rebate_extra_cd%TYPE,
      p_rebate_extra_amt        OUT      NUMBER,
      p_rebate_extra_inst_amt   OUT      NUMBER,
      p_error                   OUT      VARCHAR2
   )
   IS
      v_cal_para          NUMBER (15, 2);
      v_yrly_no_inst      NUMBER (2)                                := 0;
      v_comm_dt           DATE;
      v_rebate_extra_cd   ins_rebate_extra.rebate_extra_cd%TYPE;
      v_rebate_extra_nm   ins_rebate_extra.rebate_extra_desc%TYPE;
-------------------
      v_rate_fixed_flag   VARCHAR2 (1);
      v_value_amt         NUMBER (15, 2);
      v_rate_calc_on      VARCHAR2 (1);
      v_add_with          VARCHAR2 (1);
      v_policy_group      ins_policy_type.policy_tp_cd%TYPE;
   BEGIN
      SELECT p.policy_tp_cd
        INTO v_policy_group
        FROM ins_product p
       WHERE p.product_cd = p_product_cd;

      IF v_policy_group NOT IN ('06') --p_product_cd NOT IN ('61', '62', '63')
      THEN
         SELECT l.comm_dt
           INTO v_comm_dt
           FROM ins_p_proposal l
          WHERE l.pgid = p_pgid;

         SELECT (CASE
                    WHEN p_pay_mode_cd = '01'
                       THEN 1
                    WHEN p_pay_mode_cd = '02'
                       THEN 2
                    WHEN p_pay_mode_cd = '03'
                       THEN 4
                    WHEN p_pay_mode_cd = '04'
                       THEN 12
                    WHEN p_pay_mode_cd = '05'
                       THEN 1
                    ELSE 0
                 END
                )
           INTO v_yrly_no_inst
           FROM DUAL;

         BEGIN
            SELECT s.rebate_extra_cd, r.rebate_extra_desc,
                   sd.rate_fixed_flag, sd.value_amt, sd.cal_para,
                   sd.rate_calc_on, sd.add_with
              INTO v_rebate_extra_cd, v_rebate_extra_nm,
                   v_rate_fixed_flag, v_value_amt, v_cal_para,
                   v_rate_calc_on, v_add_with
              FROM ins_extra_setup_mst s,
                   ins_extra_setup_dtl sd,
                   ins_rebate_extra r
             WHERE r.rebate_extra = '1'
               AND status = '1'
               AND r.rebate_extra_cd = p_rebate_extra_cd
               AND r.rebate_extra_cd = s.rebate_extra_cd
               AND r.rebate_extra_cd = sd.rebate_extra_cd
               AND sd.pay_mode_cd = p_pay_mode_cd
               AND (   s.product_depn = 0
                    OR (s.product_depn = 1 AND sd.product_cd = p_product_cd)
                   )
               AND (   s.gender_depn = 0
                    OR (s.gender_depn = 1 AND sd.gender_code = p_gender_cd)
                   )
               AND (   s.education_depn = 0
                    OR (s.education_depn = 1
                        AND sd.edu_qual_cd = p_edu_qual_cd
                       )
                   )
               AND (   s.occu_class_depn = 0
                    OR (    s.occu_class_depn = 1
                        AND sd.occu_class_cd = p_occu_class_cd
                       )
                   );
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;

         IF v_rate_fixed_flag = '1'
--Rate --v_percentage_calculation = '1'
         THEN
            IF v_rate_calc_on = '1'       --1 = Life Premium, 2 = Sum Assured
            THEN
               p_rebate_extra_amt :=
                  ROUND (  ((p_sum_assured * p_product_rate) * v_value_amt)
                         / v_cal_para
                        );
            ELSE
               p_rebate_extra_amt :=
                           ROUND ((p_sum_assured * v_value_amt) / v_cal_para);
            END IF;

            p_rebate_extra_inst_amt :=
                                   ROUND (p_rebate_extra_amt / v_yrly_no_inst);
         ELSE
            p_rebate_extra_amt := ROUND (v_value_amt);
            p_rebate_extra_inst_amt :=
                                  ROUND (p_rebate_extra_amt / v_yrly_no_inst);
         END IF;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := 'pro_single_extra_prem: ' || SQLERRM;
   END pro_single_extra_prem;

/*******************************************************************/
   PROCEDURE pro_fp_late_fee (
      p_pgid       IN       ins_p_proposal.pgid%TYPE,
      p_late_fee   OUT      NUMBER
   )
   IS
      v_risk_date             DATE;
      v_comm_date             DATE;
      v_installment_premium   ins_p_summery.installment_premium%TYPE;
      v_max_rec_dt            DATE;
      v_late_fee              NUMBER (12, 2);
      v_proposal_no           ins_p_proposal.proposal_no%TYPE;
   BEGIN
      v_late_fee := 0;
      v_risk_date := NULL;
      v_comm_date := NULL;
      v_installment_premium := NULL;

      SELECT NVL (g.risk_date, TRUNC (SYSDATE)), g.comm_dt,
             g.installment_premium
        INTO v_risk_date, v_comm_date,
             v_installment_premium
        FROM ins_uw_accpt_gen g
       WHERE g.pgid = p_pgid;

      SELECT ipp.proposal_no
        INTO v_proposal_no
        FROM ins_p_proposal ipp
       WHERE ipp.pgid = p_pgid;

      SELECT MAX (NVL (r.coll_slip_rec_dt, r.receive_date))
        INTO v_max_rec_dt
        FROM acc_advance_receivables r
       WHERE r.proposal_no = v_proposal_no;

      IF v_max_rec_dt > v_comm_date
      THEN
         IF ROUND (v_risk_date - v_comm_date) > 60
         THEN
            v_late_fee :=
               fun_cal_late_fee_fp (v_installment_premium,
                                    v_comm_date,
                                    v_risk_date
                                   );
         END IF;
      END IF;

      p_late_fee := v_late_fee;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_late_fee := 0;
   END pro_fp_late_fee;

/******************************************************************/
   PROCEDURE pro_uw_data_prep (
      p_pgid    IN       ins_p_proposal.pgid%TYPE,
      p_user    IN       VARCHAR2,
      p_error   OUT      VARCHAR2
   )
   IS
      v_org_office            VARCHAR2 (500);
      v_brnch_off             hrm_office.office_cd%TYPE;
      v_sales_off             hrm_office.office_cd%TYPE;
      v_zonal_off             hrm_office.office_cd%TYPE;
      v_regional_off          hrm_office.office_cd%TYPE;
      v_office_cd             hrm_office.office_cd%TYPE;
      v_age                   NUMBER (5, 2);
      v_policy_group          ins_policy_type.policy_tp_cd%TYPE;
      v_coll_amount           NUMBER (12, 2);
      v_product_cd            ins_product.product_cd%TYPE;
      v_proposal_no           ins_p_proposal.proposal_no%TYPE;
      v_installment_premium   NUMBER (12, 2);
-------
      v_re_ins_amount         NUMBER (12, 2);
      v_cession_no            ins_p_summery.cession_no%TYPE;
      v_cession_dt            DATE;
      v_extra_suspense_amt    NUMBER (12, 2);
      v_late_fee              NUMBER (12, 2);
--------------
      v_accpt_uw_cd           ins_uw.uw_cd%TYPE;
      v_accpt_cnt             NUMBER (2)                                 := 0;
      v_uw_strength           ins_uw.uw_strength%TYPE;
      v_acceptence_req        ins_uw.acceptence_req%TYPE;
      v_accpt_status          VARCHAR2 (1);
      v_unaccpt_cnt           NUMBER (1)                                 := 0;
----
      v_use_code_len          gen_code_no_convention.use_code_len%TYPE;
-----
      v_accptble_stat         VARCHAR2 (2);
      v_reason_stat           VARCHAR2 (500);
      v_accept_error          VARCHAR2 (500);
      v_pre_count             NUMBER;
      v_policy_catg_cd        VARCHAR2 (2);
   BEGIN
      BEGIN
         SELECT MAX (uw_cd), COUNT (pgid)
           INTO v_accpt_uw_cd, v_accpt_cnt
           FROM ins_uw_accpt c
          WHERE c.pgid = p_pgid;

         IF v_accpt_uw_cd IS NOT NULL
         THEN
            SELECT u.uw_strength, u.acceptence_req
              INTO v_uw_strength, v_acceptence_req
              FROM ins_uw u
             WHERE uw_cd = v_accpt_uw_cd;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      IF v_accpt_cnt >= v_acceptence_req
      THEN
         v_accpt_status := 2;

         SELECT b.product_cd, b.age, b.installment_premium
           INTO v_product_cd, v_age, v_installment_premium
           FROM ins_p_basic b
          WHERE b.pgid = p_pgid;

         BEGIN
            SELECT p.policy_tp_cd
              INTO v_policy_group
              FROM ins_product p
             WHERE p.product_cd = v_product_cd;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;

         IF v_policy_group <> '02'
         THEN
            v_age := 0;
         END IF;

         SELECT ha.office_cd, ipp.proposal_no
           INTO v_office_cd, v_proposal_no
           FROM hrm_agent ha, ins_p_proposal ipp
          WHERE ha.agent_id = ipp.agent_id AND ipp.pgid = p_pgid;

         v_org_office := fun_org_office (v_office_cd);

         SELECT use_code_len
           INTO v_use_code_len
           FROM gen_code_no_convention
          WHERE code_id = '1';

         SELECT SUBSTR (v_org_office, 1, v_use_code_len) brnch_off,
                SUBSTR (v_org_office,
                        INSTR (v_org_office, '-', 1) + 1,
                        v_use_code_len
                       ) sales_off,
                SUBSTR (v_org_office,
                        INSTR (v_org_office, '-', 1, 2) + 1,
                        v_use_code_len
                       ) sales_off,
                SUBSTR (v_org_office,
                        INSTR (v_org_office, '-', 1, 3) + 1,
                        v_use_code_len
                       ) sales_off
           INTO v_brnch_off,
                v_sales_off,
                v_zonal_off,
                v_regional_off
           FROM DUAL;

         SELECT NVL (SUM (coll_amount), 0)
           INTO v_coll_amount
           FROM acc_advance_receivables
          WHERE proposal_no = v_proposal_no
            AND status = '0'
            AND rec_status = '1'
            AND NVL (cheque_deposit, 'N') =
                   DECODE (receive_mode,
                           '1', NVL (cheque_deposit, 'N'),
                           '3', NVL (cheque_deposit, 'N'),
                           '4', NVL (cheque_deposit, 'N'),
                           '5', NVL (cheque_deposit, 'N'),
                           '7', NVL (cheque_deposit, 'N'),
                           'Y'
                          );

         pro_proposal_accptble_stat (p_pgid               => p_pgid,
                                     p_instl_premium      => v_installment_premium,
                                     p_accptble_stat      => v_accptble_stat,
--Return '1' if acceptable, '2' if conditionally acceptable and '0' if not acceptable
                                     p_reason_stat        => v_reason_stat,
--Return null if acceptable, return reason if conditionally acceptable or not acceptable
                                     p_error              => v_accept_error
                                    );

         IF v_coll_amount >= v_installment_premium
         THEN
            pro_fp_late_fee (p_pgid, v_late_fee);

            IF v_coll_amount >= v_installment_premium + NVL (v_late_fee, 0)
            THEN
               v_extra_suspense_amt :=
                    v_coll_amount
                  - (v_installment_premium + NVL (v_late_fee, 0));
               v_accpt_status := 1;

--Insert data into ins_p_pre_summery--
               INSERT INTO ins_p_pre_summery
                           (pgid, proposal_date, comm_date, dob, age,
                            age_docu_cd, sex_cd, option_cd, sum_assured,
                            product_cd, term, pay_mode_cd, policy_installment,
                            total_yearly_premium, installment_premium,
                            agent_id, office_cd, suppl_ben_premium,
                            suppl_product_premium, sum_rebate, do_gid, dm_gid,
                            next_due_date, next_due_inst_no, re_ins_amount,
                            cession_no, cession_dt, suspense_amt, i_usr, i_dt,
                            policy_status, policy_status_dt,
                            last_paid_inst_no, last_paid_date, maturity_date,
                            branch_off, sales_off, zonal_off, regional_off,
                            policy_catg_cd, servicing_off, pps_cd,
                            life_premium, risk_date, ins_tp_cd, extra_premium)
                  SELECT p.pgid, p.proposal_dt, p.comm_dt, p.dob, p.age,
                         p.age_docu_cd, p.sex_cd, p.option_cd, p.sum_assured,
                         p.product_cd, p.term, p.pay_mode_cd,
                         (p.term * p.yrly_no_inst) policy_installment,
                         p.yearly_premium, p.installment_premium, p.agent_id,
                         p.office_cd, s.ben_premium, s.pro_premium,
                         s.sum_rebate_extra, p.dev_emp_gid,
                         (SELECT hes.h_employee_gid
                            FROM hrm_employee_setup hes
                           WHERE hes.status = '1'
                             AND hes.employee_gid =
                                    (SELECT dev_emp_gid
                                       FROM hrm_agent
                                      WHERE agent_id =
                                               (SELECT agent_id
                                                  FROM ins_p_agent
                                                 WHERE pgid = p_pgid
                                                   AND status = '01')))
                                                               h_employee_gid,
                         ADD_MONTHS (p.comm_dt,
                                     DECODE (p.yrly_no_inst,
                                             1, 12,
                                             2, 6,
                                             4, 3,
                                             12, 1,12
                                            )
                                    ) next_due_date,
                         2 next_due_inst_no, v_re_ins_amount, v_cession_no,
                         v_cession_dt, v_extra_suspense_amt, p_user, SYSDATE,
                         '09', SYSDATE, 1 last_paid_inst_no,
                         p.comm_dt last_paid_date,
                       --  ADD_MONTHS (p.comm_dt, ((p.term - v_age) * 12)),
                          ADD_MONTHS (p.comm_dt, (p.term * 12)), /* This part is changes by alamgir hossain for dob mismatch */
                         v_brnch_off, v_sales_off, v_zonal_off,
                         v_regional_off, p.policy_catg_cd, p.servicing_office,
                         p.v_pps_cd, p.life_premium, p.risk_date, p.ins_tp_cd,
                         DECODE (p.yrly_no_inst,
                                 1, s.sum_rebate_extra,
                                 2, ROUND (s.sum_rebate_extra / 2, 2),
                                 4, ROUND (s.sum_rebate_extra / 4, 2),
                                 12, ROUND (s.sum_rebate_extra / 12, 2)
                                ) extra_prem
                    FROM (SELECT ippo.pgid, ippo.proposal_dt,
                                 ippo.servicing_office, ippe.dob,
                                 ippe.age_docu_cd, ippe.sex_cd,ROUND ((NVL (ippo.comm_dt, ippo.proposal_dt) - ippe.dob) / 365) age, /* This part is changes by alamgir hossain for dob mismatch */-- iuag.age,
                                 iuag.comm_dt, iuag.option_cd,
                                 iuag.sum_assured, iuag.product_cd, iuag.term,
                                 iuag.pay_mode_cd, iuag.yearly_premium,
                                 iuag.installment_premium, ippo.agent_id,
                                 ha.office_cd, ha.dev_emp_gid,
                                 ipm.yrly_no_inst, iuag.policy_catg_cd,
                                 ippo.project_cd || iuag.product_cd v_pps_cd,
                                 iuag.life_premium, iuag.risk_date,
                                 ippo.ins_tp_cd
                            FROM ins_p_proposal ippo,
                                 ins_p_personal ippe,
                                 ins_uw_accpt_gen iuag,
                                 hrm_agent ha,
                                 ins_pay_mode ipm
                           WHERE ippo.pgid = p_pgid
                             AND ippo.pgid = ippe.pgid
                             AND ippo.pgid = iuag.pgid
                             AND ippo.agent_id = ha.agent_id
                             AND ippe.party_cd = DECODE (v_policy_group, '03', '02', '03') /* This part is changes by alamgir hossain for dob mismatch */-- AND ippe.party_cd = '03'
                             AND ippe.sl_no = 1
                             AND ipm.pay_mode_cd = iuag.pay_mode_cd) p,
                         (SELECT SUM (DECODE (b.reb_ext, 'b', b.premium)
                                     ) ben_premium,
                                 SUM (DECODE (b.reb_ext, 'p', b.premium)
                                     ) pro_premium,
                                 SUM (DECODE (b.reb_ext, 'e', b.premium)
                                     ) sum_rebate_extra
                            FROM (SELECT SUM (x.installment_premium) premium,
                                         'b' reb_ext
                                    FROM ins_uw_accpt_supp_ben x
                                   WHERE x.pgid = p_pgid
                                  UNION ALL
                                  SELECT SUM (y.installment_premium) premium,
                                         'p' reb_ext
                                    FROM ins_uw_accpt_supp_prd y
                                   WHERE y.pgid = p_pgid
                                  UNION ALL
                                  SELECT SUM (z.rebate_extra_amt) premium,
                                         'e' reb_ext
                                    FROM ins_uw_accpt_rebate_extra z
                                   WHERE z.pgid = p_pgid
                                     AND NVL (z.rebate_extra, '1') = '1') b) s;

               BEGIN
                  SELECT policy_catg_cd
                    INTO v_policy_catg_cd
                    FROM ins_uw_accpt_gen
                   WHERE pgid = p_pgid;

                  UPDATE ins_p_proposal
                     SET policy_catg_cd = v_policy_catg_cd
                   WHERE pgid = p_pgid;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;

--===============End of Insert Data into ins_p_pre_summery=========--
               SELECT COUNT (1)
                 INTO v_pre_count
                 FROM ins_p_pre_summery
                WHERE pgid = p_pgid;

               IF v_pre_count > 0
               THEN
                  --Insert data into ins_unaccpted_policy--
                  SELECT ha.office_cd
                    INTO v_office_cd
                    FROM hrm_agent ha, ins_p_proposal ipp
                   WHERE ha.agent_id = ipp.agent_id AND ipp.pgid = p_pgid;

                  UPDATE ins_unaccpted_policy
                     SET status = v_accpt_status,
                         u_usr = p_user,
                         u_dt = SYSDATE
                   WHERE pgid = p_pgid AND status = '2';

--- Finally underwriter accepted

                  --- Added by Md Zahid Hasan on 15-SEP-2014
                  IF v_accpt_status = 1
                  THEN
                     UPDATE ins_uw_accpt
                        SET acceptance_flag = '1'
                      WHERE pgid = p_pgid;
                  END IF;

                  UPDATE ins_uw_accpt
                     SET accept_dt = TRUNC (SYSDATE),
                         u_usr = p_user,
                         u_dt = SYSDATE
                   WHERE pgid = p_pgid;
               ELSE
                  p_error := 'Error in pro_uw_data_prep: ' || SQLERRM;
               END IF;
            ELSE
               p_error :=
                     'Collection Amount is less than required installment Premium with late fee '
                  || SQLERRM;
            END IF;
         ELSE
            p_error :=
                  'Collection Amount is less than required installment Premium '
               || SQLERRM;
         END IF;
      ELSE
         p_error := 'Required Acceptance is not yet Completed! ';
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := 'Error in pro_uw_data_prep: ' || SQLERRM;
   END pro_uw_data_prep;

   FUNCTION fun_pre_client_info (
      p_name        VARCHAR2,
      p_dob         DATE,
      p_father_nm   VARCHAR2,
      p_mother_nm   VARCHAR2,
      p_mobile_no   VARCHAR2,
      p_nid_no      VARCHAR2,
      p_tin_no      VARCHAR2
   )
      RETURN pre_client_info_tab PIPELINED
   AS
      l_tab   pre_client_info_row;
   BEGIN
      FOR i IN (SELECT   pr.policy_no, pr.proposal_no, p.party_cd,
                         p.party_name, p.dob, p.father_name, p.mother_name,
                         p.nid, p.tin, a.mobile_no,
                         (a.p_address_1 || ' ' || a.p_address_2) address
                    FROM ins_p_proposal pr, ins_p_personal p,
                         ins_p_address a
                   WHERE pr.pgid = p.pgid
                     AND p.pgid = a.pgid
                     AND p.party_cd = a.party_cd
                     AND p.party_id = a.party_id
                     AND p.party_cd IN ('02', '03')
                     AND (   (    UPPER (p.party_name) LIKE
                                                          '%' || p_name || '%'
                              AND p.dob = p_dob
                              AND UPPER (p.father_name) LIKE
                                                     '%' || p_father_nm || '%'
                              AND UPPER (p.mother_name) LIKE
                                                     '%' || p_mother_nm || '%'
                             )
                          OR (   p.nid = p_nid_no
                              OR p.tin = p_tin_no
                              OR a.mobile_no = p_mobile_no
                             )
                         )
                ORDER BY p.party_cd)
      LOOP
         l_tab.pre_party_cd := i.party_cd;
         l_tab.pre_policy_no := i.policy_no;
         l_tab.pre_proposal_no := i.proposal_no;
         l_tab.client_nm := i.party_name;
         l_tab.dob := i.dob;
         l_tab.father_nm := i.father_name;
         l_tab.mother_nm := i.mother_name;
         l_tab.address := i.address;
         l_tab.mobile_no := i.mobile_no;
         l_tab.nid_no := i.nid;
         l_tab.tin_no := i.tin;
         PIPE ROW (l_tab);
      END LOOP;

      RETURN;
   END;

/********************************************/
   PROCEDURE pro_proposal_data_load (
      p_pgid          ins_p_proposal.pgid%TYPE,
      p_error   OUT   VARCHAR2
   )
   IS
      v_statement   VARCHAR2 (6000);
      v_rtn         NUMBER;
   BEGIN
      v_statement := 'TRUNCATE TABLE temp_ins_proposal_chk';

      EXECUTE IMMEDIATE (v_statement);

      v_statement :=
            'INSERT INTO temp_ins_proposal_chk

SELECT *

FROM (SELECT pgid, ''ins_p_proposal'' FORM_BLK_NM, ''ins_p_proposal'' TABLE_NM

, COLUMN_NM, rownum FORM_ITEM_NO

, (CASE WHEN column_nm = ''PROPOSAL_NO'' then ''Proposal No''

WHEN column_nm = ''D_PROPOSAL_NO'' then ''Proposal No''

WHEN column_nm = ''PROPOSAL_DT'' then ''Proposal Date''

WHEN column_nm = ''COMM_DT'' then ''Comm. Date''

WHEN column_nm = ''ASSURANCE_TYPE'' then ''Assurance Type''

WHEN column_nm = ''ASSURANCE_TP_NM'' then ''Assurance Type''

WHEN column_nm = ''AGENT_ID'' then ''Agent ID''

WHEN column_nm = ''SERVICING_OFFICE'' then ''Servicing Office''

WHEN column_nm = ''POLICY_CATG_CD'' then ''Policy Category''

WHEN column_nm = ''POLICY_CATG_NM'' then ''Policy Category''

WHEN column_nm = ''PROJECT_CD'' then ''Project Code''

WHEN column_nm = ''PROJECT_NM'' then ''Project Name''

ELSE NULL

end) FORM_ITEM_LBL

, COLUMN_VAL

FROM (SELECT p.pgid, to_char(P.proposal_dt, ''DD-MON-RRRR'') proposal_dt, p.assurance_type,

(CASE

WHEN p.assurance_type = ''1''

THEN ''Single Policy''

WHEN p.assurance_type = ''2''

THEN ''Joint Policy''

WHEN p.assurance_type = ''3''

THEN ''Child Protection Policy''

ELSE NULL

END

) assurance_tp_nm,

to_char(p.comm_dt, ''DD-MON-RRRR'') comm_dt,

LTRIM (SUBSTR (p.proposal_no, 1, 8), 0)

|| ''-''

|| SUBSTR (p.proposal_no, 9, 4)

|| ''-''

|| SUBSTR (p.proposal_no, 13, 4) d_proposal_no,

p.agent_id, p.servicing_office, p.policy_catg_cd, c.policy_catg_nm,

p.project_cd, j.project_nm

FROM ins_p_proposal p, ins_policy_category c, ins_project j

WHERE p.pgid = '''
         || p_pgid
         || '''

AND p.policy_catg_cd = c.policy_catg_cd

AND p.project_cd = j.project_cd

)

UNPIVOT INCLUDE NULLS

(COLUMN_VAL FOR COLUMN_NM

IN ( d_proposal_no

,proposal_dt

,comm_dt

,assurance_type

,assurance_tp_nm

,agent_id

,servicing_office

,policy_catg_cd

,policy_catg_nm

,project_cd

,project_nm

)

))';

--p_error := length (v_statement);
      EXECUTE IMMEDIATE v_statement;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := SQLERRM || '=====';
   END pro_proposal_data_load;

   PROCEDURE pro_double_age_prem_rate_prem (
      p_product_cd     IN       ins_product.product_cd%TYPE,
      p_term           IN       ins_p_summery.term%TYPE,
      p_min_age        IN       ins_p_summery.age%TYPE,
      p_max_age        IN       ins_p_summery.age%TYPE,
      p_premium_rate   OUT      ins_product_defn.rate%TYPE,
      p_error          OUT      VARCHAR2
   )
   IS
      v_max_premium_rate   ins_product_defn.rate%TYPE;
      v_min_premium_rate   ins_product_defn.rate%TYPE;
      v_min_age            NUMBER (3);
--Finding the rate for senior assured
   BEGIN
      BEGIN
         SELECT d.rate
           INTO v_max_premium_rate
           FROM ins_product_defn d
          WHERE d.product_cd = p_product_cd
            AND d.term = p_term
            AND d.age = p_max_age;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            BEGIN
               SELECT MIN (age)
                 INTO v_min_age
                 FROM ins_product_defn
                WHERE product_cd = p_product_cd AND term = p_term;

               IF p_max_age < v_min_age
               THEN
                  SELECT d.rate
                    INTO v_max_premium_rate
                    FROM ins_product_defn d
                   WHERE d.product_cd = p_product_cd
                     AND term = p_term
                     AND age = v_min_age;
               END IF;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  p_error := 'Invalid Product Rate';
               WHEN OTHERS
               THEN
                  p_error := 'Invalid Product Rate';
            END;
      END;

--Finding the rate for senior assured
      BEGIN
         SELECT d.second_age_rate
           INTO v_min_premium_rate
           FROM ins_product_defn d
          WHERE d.product_cd = p_product_cd
            AND d.term = p_term
            AND d.age = p_min_age;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            BEGIN
               SELECT MIN (age)
                 INTO v_min_age
                 FROM ins_product_defn
                WHERE product_cd = p_product_cd AND term = p_term;

               IF p_min_age < v_min_age
               THEN
                  SELECT d.second_age_rate
                    INTO v_min_premium_rate
                    FROM ins_product_defn d
                   WHERE d.product_cd = p_product_cd
                     AND term = p_term
                     AND age = p_min_age;
               END IF;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  p_error := 'Invalid Product Rate';
               WHEN OTHERS
               THEN
                  p_error := 'Invalid Product Rate';
            END;
      END;

      p_premium_rate := v_max_premium_rate + v_min_premium_rate;
   END;

   PROCEDURE pro_premium_rate (
      p_pgid        IN       ins_p_proposal.pgid%TYPE,
      p_prem_rate   OUT      NUMBER,
      p_error       OUT      VARCHAR2
   )
   IS
      v_premium_rate         ins_product_defn.rate%TYPE;
      v_cal_para             ins_product.cal_para%TYPE;
      v_min_age              NUMBER (3)                                 := 0;
      v_max_age              NUMBER (3)                                 := 0;
      v_age                  NUMBER (3)                                 := 0;
      v_age_at_entry         NUMBER (3)                                 := 0;
      v_second_age_rate_st   ins_product_defn.second_age_rate_st%TYPE;
      v_policy_tp_cd         ins_product.policy_tp_cd%TYPE;
      v_product_cd           ins_product.product_cd%TYPE;
      v_term                 ins_p_basic.term%TYPE;
   BEGIN
      SELECT product_cd, term, age
        INTO v_product_cd, v_term, v_age_at_entry
        FROM ins_p_basic
       WHERE pgid = p_pgid;

--For all policy exception of Joint policy
      SELECT d.rate, p.cal_para, d.second_age_rate_st
        INTO v_premium_rate, v_cal_para, v_second_age_rate_st
        FROM ins_product_defn d, ins_product p
       WHERE d.product_cd = v_product_cd
         AND d.term = v_term
         AND d.age = v_age_at_entry
         AND d.product_cd = p.product_cd;

      pro_client_age (p_pgid            => p_pgid,
                      p_product_cd      => v_product_cd,
                      p_age             => v_age,
                      p_min_age         => v_min_age,
                      p_max_age         => v_max_age
                     );

      BEGIN
         SELECT p.policy_tp_cd
           INTO v_policy_tp_cd
           FROM ins_product p
          WHERE p.product_cd = v_product_cd;
      EXCEPTION
         WHEN OTHERS
         THEN
            p_error := 'Policy type not found.';
      END;

--for joint policy when rate is define as per minimum and maximum age. this setup is found in SLIC
      IF v_policy_tp_cd = '05' AND v_second_age_rate_st = '1'
      THEN
--here '05' means joint policy and v_second_age_rate_st = '1' means second age is defined seperatly
         pro_double_age_prem_rate_prem (p_product_cd        => v_product_cd,
                                        p_term              => v_term,
                                        p_min_age           => v_min_age,
                                        p_max_age           => v_max_age,
                                        p_premium_rate      => v_premium_rate,
                                        p_error             => p_error
                                       );

         IF p_error IS NULL
         THEN
            p_prem_rate := v_premium_rate;
         END IF;
      ELSE
         p_prem_rate := v_premium_rate;
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         BEGIN
            SELECT MIN (age)
              INTO v_min_age
              FROM ins_product_defn
             WHERE product_cd = v_product_cd AND term = v_term;

            IF v_age_at_entry < v_min_age
            THEN
               SELECT d.rate, p.cal_para, d.second_age_rate_st
                 INTO v_premium_rate, v_cal_para, v_second_age_rate_st
                 FROM ins_product_defn d, ins_product p
                WHERE d.product_cd = v_product_cd
                  AND term = v_term
                  AND age = v_min_age
                  AND d.product_cd = p.product_cd;

--for joint policy when rate is define as per minimum and maximum age. this setup is found in SLIC
               IF v_policy_tp_cd = '05' AND v_second_age_rate_st = '1'
               THEN
--here '05' means joint policy and v_second_age_rate_st = '1' means second age is defined seperatly
                  pro_double_age_prem_rate_prem
                                           (p_product_cd        => v_product_cd,
                                            p_term              => v_term,
                                            p_min_age           => v_min_age,
                                            p_max_age           => v_max_age,
                                            p_premium_rate      => v_premium_rate,
                                            p_error             => p_error
                                           );

                  IF p_error IS NULL
                  THEN
                     p_prem_rate := v_premium_rate;
                  END IF;
               ELSE
                  p_prem_rate := v_premium_rate;
               END IF;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_error := 'Invalid Product Rate';
            WHEN OTHERS
            THEN
               p_error := 'Invalid Product Rate';
         END;
   END pro_premium_rate;

/*************************************/
   PROCEDURE pro_prep_client_info (
      p_pgid       IN       ins_p_personal.pgid%TYPE,
      p_party_cd   IN       ins_p_personal.party_cd%TYPE,
      p_party_id   IN       ins_p_personal.party_id%TYPE,
      p_user       IN       VARCHAR2,
      p_error      OUT      VARCHAR2
   )
   IS
      v_assurance_type   ins_p_proposal.assurance_type%TYPE;
   BEGIN
      SELECT assurance_type
        INTO v_assurance_type
        FROM ins_p_proposal
       WHERE pgid = p_pgid;

      INSERT INTO ins_p_personal
                  (pgid, party_cd, party_id, sl_no, party_name, father_name,
                   mother_name, sex_cd, dob, age_docu_cd, pob, country_cd,
                   marital_status, children_no, identification_mark,
                   edu_qual_cd, edu_docu_cd, occu_cd, employer_name,
                   designation, annual_income, income_source, tin,
                   occu_class_cd, occu_scope_cd, occu_base_cd, nid, i_usr,
                   i_dt)
         SELECT pgid, '02', party_id, sl_no, party_name, father_name,
                mother_name, sex_cd, dob, age_docu_cd, pob, country_cd,
                marital_status, children_no, identification_mark, edu_qual_cd,
                edu_docu_cd, occu_cd, employer_name, designation,
                annual_income, income_source, tin, occu_class_cd,
                occu_scope_cd, occu_base_cd, nid, p_user, SYSDATE
           FROM ins_p_personal
          WHERE pgid = p_pgid
            AND party_cd = p_party_cd
            AND party_id = p_party_id;

      IF v_assurance_type <> '3'
      THEN
         INSERT INTO ins_p_personal
                     (pgid, party_cd, party_id, sl_no, party_name,
                      father_name, mother_name, sex_cd, dob, age_docu_cd,
                      pob, country_cd, marital_status, children_no,
                      identification_mark, edu_qual_cd, edu_docu_cd, occu_cd,
                      employer_name, designation, annual_income,
                      income_source, tin, occu_class_cd, occu_scope_cd,
                      occu_base_cd, nid, i_usr, i_dt)
            SELECT pgid, '03', party_id, sl_no, party_name, father_name,
                   mother_name, sex_cd, dob, age_docu_cd, pob, country_cd,
                   marital_status, children_no, identification_mark,
                   edu_qual_cd, edu_docu_cd, occu_cd, employer_name,
                   designation, annual_income, income_source, tin,
                   occu_class_cd, occu_scope_cd, occu_base_cd, nid, p_user,
                   SYSDATE
              FROM ins_p_personal
             WHERE pgid = p_pgid
               AND party_cd = p_party_cd
               AND party_id = p_party_id;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END pro_prep_client_info;

/*************************************/
   PROCEDURE pro_upd_client_info (
      p_pgid       IN       ins_p_personal.pgid%TYPE,
      p_party_cd   IN       ins_p_personal.party_cd%TYPE,
      p_party_id   IN       ins_p_personal.party_id%TYPE,
      p_user       IN       VARCHAR2,
      p_error      OUT      VARCHAR2
   )
   IS
      v_assurance_type   ins_p_proposal.assurance_type%TYPE;

      CURSOR cur_client
      IS
         SELECT pgid, party_cd, party_id, sl_no, party_name, father_name,
                mother_name, sex_cd, dob, age_docu_cd, pob, country_cd,
                marital_status, children_no, identification_mark,
                edu_qual_cd, edu_docu_cd, occu_cd, employer_name,
                designation, annual_income, income_source, tin,
                occu_class_cd, occu_scope_cd, occu_base_cd, nid, p_user,
                SYSDATE
           FROM ins_p_personal
          WHERE pgid = p_pgid
            AND party_cd = p_party_cd
            AND party_id = p_party_id;
   BEGIN
      SELECT assurance_type
        INTO v_assurance_type
        FROM ins_p_proposal
       WHERE pgid = p_pgid;

      FOR rec IN cur_client
      LOOP
         UPDATE ins_p_personal
            SET party_name = rec.party_name,
                father_name = rec.father_name,
                mother_name = rec.mother_name,
                sex_cd = rec.sex_cd,
                dob = rec.dob,
                age_docu_cd = rec.age_docu_cd,
                pob = rec.pob,
                country_cd = rec.country_cd,
                marital_status = rec.marital_status,
                children_no = rec.children_no,
                identification_mark = rec.identification_mark,
                edu_qual_cd = rec.edu_qual_cd,
                edu_docu_cd = rec.edu_docu_cd,
                occu_cd = rec.occu_cd,
                employer_name = rec.employer_name,
                designation = rec.designation,
                annual_income = rec.annual_income,
                income_source = rec.income_source,
                tin = rec.tin,
                occu_class_cd = rec.occu_class_cd,
                occu_scope_cd = rec.occu_scope_cd,
                occu_base_cd = rec.occu_base_cd,
                nid = rec.nid,
                u_usr = p_user,
                u_dt = SYSDATE
          WHERE pgid = p_pgid AND party_cd = '02' AND party_id = p_party_id;

         IF v_assurance_type <> '3'
         THEN
            UPDATE ins_p_personal
               SET party_name = rec.party_name,
                   father_name = rec.father_name,
                   mother_name = rec.mother_name,
                   sex_cd = rec.sex_cd,
                   dob = rec.dob,
                   age_docu_cd = rec.age_docu_cd,
                   pob = rec.pob,
                   country_cd = rec.country_cd,
                   marital_status = rec.marital_status,
                   children_no = rec.children_no,
                   identification_mark = rec.identification_mark,
                   edu_qual_cd = rec.edu_qual_cd,
                   edu_docu_cd = rec.edu_docu_cd,
                   occu_cd = rec.occu_cd,
                   employer_name = rec.employer_name,
                   designation = rec.designation,
                   annual_income = rec.annual_income,
                   income_source = rec.income_source,
                   tin = rec.tin,
                   occu_class_cd = rec.occu_class_cd,
                   occu_scope_cd = rec.occu_scope_cd,
                   occu_base_cd = rec.occu_base_cd,
                   nid = rec.nid,
                   u_usr = p_user,
                   u_dt = SYSDATE
             WHERE pgid = p_pgid AND party_cd = '03' AND party_id = p_party_id;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END pro_upd_client_info;

--========================================--

   /*************************************/
   PROCEDURE pro_prep_client_add (
      p_pgid       IN       ins_p_personal.pgid%TYPE,
      p_party_cd   IN       ins_p_personal.party_cd%TYPE,
      p_party_id   IN       ins_p_personal.party_id%TYPE,
      p_user       IN       VARCHAR2,
      p_error      OUT      VARCHAR2
   )
   IS
      v_assurance_type   ins_p_proposal.assurance_type%TYPE;
   BEGIN
      SELECT assurance_type
        INTO v_assurance_type
        FROM ins_p_proposal
       WHERE pgid = p_pgid;

      INSERT INTO ins_p_address
                  (pgid, party_cd, party_id, p_address_1, p_country_cd,
                   p_division_cd, p_district_cd, p_thana_cd, p_po_cd,
                   p_phone_no, t_address, t_country_cd, t_division_cd,
                   t_district_cd, t_thana_cd, t_po_cd, t_phone_no, mobile_no,
                   fax_no, e_mail)
         SELECT d.pgid, '02', d.party_id, d.p_address_1, d.p_country_cd,
                d.p_division_cd, d.p_district_cd, d.p_thana_cd, d.p_po_cd,
                d.p_phone_no, d.t_address, d.t_country_cd, d.t_division_cd,
                d.t_district_cd, d.t_thana_cd, d.t_po_cd, d.t_phone_no,
                d.mobile_no, d.fax_no, d.e_mail
           FROM ins_p_address d
          WHERE d.pgid = p_pgid
            AND d.party_cd = p_party_cd
            AND d.party_id = p_party_id;

      IF v_assurance_type <> '3'
      THEN
         INSERT INTO ins_p_address
                     (pgid, party_cd, party_id, p_address_1, p_country_cd,
                      p_division_cd, p_district_cd, p_thana_cd, p_po_cd,
                      p_phone_no, t_address, t_country_cd, t_division_cd,
                      t_district_cd, t_thana_cd, t_po_cd, t_phone_no,
                      mobile_no, fax_no, e_mail)
            SELECT d.pgid, '03', d.party_id, d.p_address_1, d.p_country_cd,
                   d.p_division_cd, d.p_district_cd, d.p_thana_cd, d.p_po_cd,
                   d.p_phone_no, d.t_address, d.t_country_cd,
                   d.t_division_cd, d.t_district_cd, d.t_thana_cd, d.t_po_cd,
                   d.t_phone_no, d.mobile_no, d.fax_no, d.e_mail
              FROM ins_p_address d
             WHERE d.pgid = p_pgid
               AND d.party_cd = p_party_cd
               AND d.party_id = p_party_id;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END pro_prep_client_add;

/*************************************/
   PROCEDURE pro_upd_client_add (
      p_pgid       IN       ins_p_personal.pgid%TYPE,
      p_party_cd   IN       ins_p_personal.party_cd%TYPE,
      p_party_id   IN       ins_p_personal.party_id%TYPE,
      p_user       IN       VARCHAR2,
      p_error      OUT      VARCHAR2
   )
   IS
      v_assurance_type   ins_p_proposal.assurance_type%TYPE;

      CURSOR cur_add
      IS
         SELECT d.p_address_1, d.p_country_cd, d.p_division_cd,
                d.p_district_cd, d.p_thana_cd, d.p_po_cd, d.p_phone_no,
                d.t_address, d.t_country_cd, d.t_division_cd,
                d.t_district_cd, d.t_thana_cd, d.t_po_cd, d.t_phone_no,
                d.mobile_no, d.fax_no, d.e_mail
           FROM ins_p_address d
          WHERE d.pgid = p_pgid
            AND d.party_cd = p_party_cd
            AND d.party_id = p_party_id;
   BEGIN
      SELECT assurance_type
        INTO v_assurance_type
        FROM ins_p_proposal
       WHERE pgid = p_pgid;

      FOR rec IN cur_add
      LOOP
         UPDATE ins_p_address
            SET p_address_1 = rec.p_address_1,
                p_country_cd = rec.p_country_cd,
                p_division_cd = rec.p_division_cd,
                p_district_cd = rec.p_district_cd,
                p_thana_cd = rec.p_thana_cd,
                p_po_cd = rec.p_po_cd,
                p_phone_no = rec.p_phone_no,
                t_address = rec.t_address,
                t_country_cd = rec.t_country_cd,
                t_division_cd = rec.t_division_cd,
                t_district_cd = rec.t_district_cd,
                t_thana_cd = rec.t_thana_cd,
                t_po_cd = rec.t_po_cd,
                t_phone_no = rec.t_phone_no,
                mobile_no = rec.mobile_no,
                fax_no = rec.fax_no,
                e_mail = rec.e_mail,
                u_usr = p_user,
                u_dt = SYSDATE
          WHERE pgid = p_pgid AND party_cd = '02' AND party_id = p_party_id;

         IF v_assurance_type <> '3'
         THEN
            UPDATE ins_p_address
               SET p_address_1 = rec.p_address_1,
                   p_country_cd = rec.p_country_cd,
                   p_division_cd = rec.p_division_cd,
                   p_district_cd = rec.p_district_cd,
                   p_thana_cd = rec.p_thana_cd,
                   p_po_cd = rec.p_po_cd,
                   p_phone_no = rec.p_phone_no,
                   t_address = rec.t_address,
                   t_country_cd = rec.t_country_cd,
                   t_division_cd = rec.t_division_cd,
                   t_district_cd = rec.t_district_cd,
                   t_thana_cd = rec.t_thana_cd,
                   t_po_cd = rec.t_po_cd,
                   t_phone_no = rec.t_phone_no,
                   mobile_no = rec.mobile_no,
                   fax_no = rec.fax_no,
                   e_mail = rec.e_mail,
                   u_usr = p_user,
                   u_dt = SYSDATE
             WHERE pgid = p_pgid AND party_cd = '03' AND party_id = p_party_id;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_error := SQLERRM;
   END pro_upd_client_add;

   /*Find rebate or extra amount which will be add with premium and should not show in any report*/
   PROCEDURE pro_rebate_extra_calc (
      p_product_cd           IN       ins_p_basic.product_cd%TYPE,
      p_pay_mode_cd          IN       ins_p_basic.pay_mode_cd%TYPE,
      p_sum_assured          IN       ins_p_basic.sum_assured%TYPE,
      p_premium_rate         IN       ins_product_defn.rate%TYPE,
      p_staff_rebate         IN       ins_p_basic.staff_rebate%TYPE,
      p_add_ded_with         IN       ins_rebate_setup_dtl.add_ded_with%TYPE,
      p_gross_life_premium   IN       NUMBER,
      p_rebate_extra_amt     OUT      NUMBER,
      p_error                OUT      VARCHAR2
   )
   IS
      v_reb_extra_amt         ins_product_defn.rate%TYPE;
      v_staff_reb_extra_amt   ins_product_defn.rate%TYPE;
      v_tot_reb_extra_amt     ins_product_defn.rate%TYPE;
   BEGIN
      v_tot_reb_extra_amt := 0;

      FOR rec_cur_rebate IN
         (SELECT d.gen_value_amt, d.add_deduct_flag, d.add_ded_with,
                 d.rate_calc_on, d.rate_fixed_flag, d.staff_value_amt,
                 d.cal_para
            FROM ins_rebate_setup_mst m,
                 ins_rebate_setup_dtl d,
                 ins_rebate_extra r
           WHERE m.rebate_extra_cd = d.rebate_extra_cd
             AND m.rebate_extra_cd = r.rebate_extra_cd
             AND r.status = '1'
             AND (   (m.product_depn = '1' AND d.product_cd = p_product_cd)
                  OR (m.product_depn = '0')
                 )
             AND (   (m.pay_mode_depn = '1' AND d.pay_mode_cd = p_pay_mode_cd
                     )
                  OR (m.pay_mode_depn = '0')
                 )
             AND (   (    m.sum_assured_depn = '1'
                      AND p_sum_assured BETWEEN sum_assured_from
                                            AND sum_assured_to
                     )
                  OR (m.sum_assured_depn = '0')
                 )
             AND (add_ded_with = p_add_ded_with OR add_ded_with = '5'))
      LOOP
         v_reb_extra_amt := 0;
         v_staff_reb_extra_amt := 0;

         IF rec_cur_rebate.rate_calc_on = '1'
         THEN
            --1 = Premium Rate, 2 =  Life Premium ,'3'=Sum Assured
            IF rec_cur_rebate.rate_fixed_flag = '1'
            THEN                      --rate_fixed_flag:  1 = Rate, 2 = Fixed
               v_reb_extra_amt :=
                    (p_premium_rate * rec_cur_rebate.gen_value_amt
                    )
                  / rec_cur_rebate.cal_para;

               IF p_staff_rebate = '1' AND rec_cur_rebate.gen_value_amt > 0
               THEN
                  v_staff_reb_extra_amt :=
                       (p_premium_rate * rec_cur_rebate.staff_value_amt
                       )
                     / rec_cur_rebate.cal_para;
               ELSE
                  v_staff_reb_extra_amt := 0;
               END IF;
            ELSIF rec_cur_rebate.rate_fixed_flag = '2'
            THEN
               v_reb_extra_amt := rec_cur_rebate.gen_value_amt;

               IF p_staff_rebate = '1' AND rec_cur_rebate.gen_value_amt > 0
               THEN
                  v_staff_reb_extra_amt := rec_cur_rebate.staff_value_amt;
               ELSE
                  v_staff_reb_extra_amt := NVL (v_staff_reb_extra_amt, 0);
               END IF;
            END IF;
         ELSIF rec_cur_rebate.rate_calc_on = '2'
         THEN
            IF rec_cur_rebate.rate_fixed_flag = '1'
            THEN                      --rate_fixed_flag:  1 = Rate, 2 = Fixed
               v_reb_extra_amt :=
                    (p_gross_life_premium * rec_cur_rebate.gen_value_amt
                    )
                  / rec_cur_rebate.cal_para;

               IF p_staff_rebate = '1' AND rec_cur_rebate.gen_value_amt > 0
               THEN
                  v_staff_reb_extra_amt :=
                       (p_gross_life_premium * rec_cur_rebate.staff_value_amt
                       )
                     / rec_cur_rebate.cal_para;
               ELSE
                  v_staff_reb_extra_amt := 0;
               END IF;
            ELSIF rec_cur_rebate.rate_fixed_flag = '2'
            THEN
               v_reb_extra_amt := rec_cur_rebate.gen_value_amt;

               IF p_staff_rebate = '1' AND rec_cur_rebate.gen_value_amt > 0
               THEN
                  v_staff_reb_extra_amt := rec_cur_rebate.staff_value_amt;
               ELSE
                  v_staff_reb_extra_amt := NVL (v_staff_reb_extra_amt, 0);
               END IF;
            END IF;
         ELSIF rec_cur_rebate.rate_calc_on = '3'
         THEN
            IF rec_cur_rebate.rate_fixed_flag = '1'
            THEN                      --rate_fixed_flag:  1 = Rate, 2 = Fixed
               v_reb_extra_amt :=
                    (p_sum_assured * rec_cur_rebate.gen_value_amt
                    )
                  / rec_cur_rebate.cal_para;

               IF p_staff_rebate = '1' AND rec_cur_rebate.gen_value_amt > 0
               THEN
                  v_staff_reb_extra_amt :=
                       (p_sum_assured * rec_cur_rebate.staff_value_amt
                       )
                     / rec_cur_rebate.cal_para;
               ELSE
                  v_staff_reb_extra_amt := 0;
               END IF;
            ELSIF rec_cur_rebate.rate_fixed_flag = '2'
            THEN
               v_reb_extra_amt := rec_cur_rebate.gen_value_amt;

               IF p_staff_rebate = '1' AND rec_cur_rebate.gen_value_amt > 0
               THEN
                  v_staff_reb_extra_amt := rec_cur_rebate.staff_value_amt;
               ELSE
                  v_staff_reb_extra_amt := NVL (v_staff_reb_extra_amt, 0);
               END IF;
            END IF;
         END IF;

         IF rec_cur_rebate.add_deduct_flag = '1'
         THEN                                                            --Add
            v_tot_reb_extra_amt :=
                v_tot_reb_extra_amt + v_reb_extra_amt + v_staff_reb_extra_amt;
         ELSIF rec_cur_rebate.add_deduct_flag = '2'
         THEN                                                         --Deduct
            v_tot_reb_extra_amt :=
                 v_tot_reb_extra_amt
               - (v_reb_extra_amt + v_staff_reb_extra_amt);
         ELSIF rec_cur_rebate.add_deduct_flag = '3'
         THEN                                                       --Multiply
            v_tot_reb_extra_amt :=
                 v_tot_reb_extra_amt
               + (v_reb_extra_amt + v_staff_reb_extra_amt);

            SELECT   DECODE (p_pay_mode_cd,
                             '01', 1,
                             '02', 2,
                             '03', 4,
                             '04', 12,
                             '05', 1,
                             0
                            )
                   * v_tot_reb_extra_amt
              INTO v_tot_reb_extra_amt
              FROM DUAL;

            IF rec_cur_rebate.rate_calc_on = '1'
            THEN        --1 = Premium Rate, 2 =  Life Premium ,'3'=Sum Assured
               v_tot_reb_extra_amt := v_tot_reb_extra_amt - p_premium_rate;
            ELSIF rec_cur_rebate.rate_calc_on = '2'
            THEN
               v_tot_reb_extra_amt :=
                                   v_tot_reb_extra_amt - p_gross_life_premium;
            ELSIF rec_cur_rebate.rate_calc_on = '3'
            THEN
               v_tot_reb_extra_amt := v_tot_reb_extra_amt - p_sum_assured;
            END IF;
         END IF;
      END LOOP;

      p_rebate_extra_amt := v_tot_reb_extra_amt;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_rebate_extra_amt := NULL;
         p_error := 'Error at pro_rebate_extra_calc: ' || SQLERRM;
   END pro_rebate_extra_calc;
END pkg_newbusiness;
/


--
-- PKG_NEWBUSINESS_NEW  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_newbusiness_new
AS
   PROCEDURE PRO_CLIENT_AGE (
      P_PGID         IN       INS_P_PROPOSAL.PGID%TYPE,
      P_PRODUCT_CD   IN       INS_PRODUCT.PRODUCT_CD%TYPE,
      P_AGE          OUT      NUMBER,
      P_MIN_AGE      OUT      NUMBER,
      P_MAX_AGE      OUT      NUMBER
   )
   AS
      V_AGE            NUMBER (3)                          := 0;
      V_AGE1           NUMBER (3)                          := 0;
      V_AGE2           NUMBER (3)                          := 0;
      V_POLICY_GROUP   INS_POLICY_TYPE.POLICY_TP_CD%TYPE;
   BEGIN
      SELECT PO.POLICY_TP_CD
        INTO V_POLICY_GROUP
        FROM INS_PRODUCT P, INS_POLICY_TYPE PO
       WHERE P.POLICY_TP_CD = PO.POLICY_TP_CD AND P.PRODUCT_CD = P_PRODUCT_CD;

      IF V_POLICY_GROUP = '05'
      THEN
         SELECT ROUND ((NVL (P.COMM_DT, P.PROPOSAL_DT) - R.DOB) / 365) AGE
           INTO V_AGE1
           FROM INS_P_PROPOSAL P, INS_P_PERSONAL R
          WHERE P.PGID = P_PGID
            AND R.PARTY_CD = '03'
            AND R.SL_NO = 1
            AND P.PGID = R.PGID;

         SELECT ROUND ((NVL (P.COMM_DT, P.PROPOSAL_DT) - R.DOB) / 365) AGE
           INTO V_AGE2
           FROM INS_P_PROPOSAL P, INS_P_PERSONAL R
          WHERE P.PGID = P_PGID
            AND R.PARTY_CD = '03'
            AND R.SL_NO = 2
            AND P.PGID = R.PGID;

         SELECT   DECODE (L.ADJ_WITH,
                          'L', GREATEST (V_AGE1, V_AGE2),
                          LEAST (V_AGE1, V_AGE2)
                         )
                + DECODE (L.SUBTRACT_ADD, 'S', -NO_OF_YR, NO_OF_YR)
           INTO V_AGE
           FROM INS_AGE_ADJ_LIST L
          WHERE ABS (V_AGE1 - V_AGE2) BETWEEN L.AGE_DIFF_FROM AND L.AGE_DIFF_TO;
      ELSE
         SELECT ROUND ((NVL (P.COMM_DT, P.PROPOSAL_DT) - R.DOB) / 365) AGE
           INTO V_AGE
           FROM INS_P_PROPOSAL P, INS_P_PERSONAL R
          WHERE P.PGID = R.PGID
            AND R.PARTY_CD = DECODE (V_POLICY_GROUP, '03', '02', '03')
            AND P.PGID = P_PGID;
      END IF;

      P_AGE := V_AGE;

      IF V_AGE1 >= V_AGE2
      THEN
         P_MAX_AGE := V_AGE1;
         P_MIN_AGE := V_AGE2;
      ELSE
         P_MAX_AGE := V_AGE2;
         P_MIN_AGE := V_AGE1;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_AGE := 0;
         P_MIN_AGE := 0;
         P_MAX_AGE := 0;
   END PRO_CLIENT_AGE;






   PROCEDURE PRO_PREM_CAL (
      P_PGID               IN       INS_P_PROPOSAL.PGID%TYPE,
      P_PRODUCT_CD         IN       INS_PRODUCT.PRODUCT_CD%TYPE,
      P_TERM               IN       INS_P_SUMMERY.TERM%TYPE,
      P_SUMASSURED         IN       INS_P_SUMMERY.TERM%TYPE,
      P_PAY_MODE           IN       INS_P_SUMMERY.PAY_MODE_CD%TYPE,
      P_OPTION             IN       INS_P_SUMMERY.OPTION_CD%TYPE,
      P_STAF_FLAG          IN       VARCHAR2,
      P_AGE_AT_ENTRY       IN       INS_P_SUMMERY.AGE%TYPE,
      P_MIN_AGE            IN       INS_P_SUMMERY.AGE%TYPE,
      P_MAX_AGE            IN       INS_P_SUMMERY.AGE%TYPE,
      P_LIFE_PREM          OUT      INS_P_SUMMERY.LIFE_PREMIUM%TYPE,
      P_YEARLY_LIFE_PREM   OUT      INS_P_SUMMERY.LIFE_PREMIUM%TYPE,





      P_ERROR              OUT      VARCHAR2
   )
   IS
      V_PRODUCT_CD           INS_PRODUCT.PRODUCT_CD%TYPE;
      V_TERM                 INS_P_SUMMERY.TERM%TYPE;
      V_AGE_AT_ENTRY         INS_P_SUMMERY.AGE%TYPE;
      V_SUM_ASSURED          INS_P_SUMMERY.SUM_ASSURED%TYPE;
      V_PAY_MODE             INS_P_SUMMERY.PAY_MODE_CD%TYPE;
      V_STAFF_REBATE         INS_P_BASIC.STAFF_REBATE%TYPE;
      V_OPTION_CD            INS_P_SUMMERY.OPTION_CD%TYPE;
      V_YLY_PREMIUM          INS_P_SUMMERY.INSTALLMENT_PREMIUM%TYPE;
      V_LIFE_PREMIUM         INS_P_SUMMERY.INSTALLMENT_PREMIUM%TYPE;
      V_ACCIDENTAL_PREM      INS_P_SUMMERY.INSTALLMENT_PREMIUM%TYPE;
      V_EXTRA_PREMIUM        INS_P_SUMMERY.INSTALLMENT_PREMIUM%TYPE;
      V_INSTL_PREMIUM        INS_P_SUMMERY.INSTALLMENT_PREMIUM%TYPE;
      V_PARAM_SUM_ASSURED    INS_P_SUMMERY.SUM_ASSURED%TYPE;
      V_PARAM_MONTHLY_PREM   INS_P_SUMMERY.INSTALLMENT_PREMIUM%TYPE;
      V_MIN_AGE              NUMBER (3)                                 := 0;
      V_MULT_FACTOR          NUMBER (3)                                 := 0;

      V_PREMIUM_RATE         INS_PRODUCT_DEFN.RATE%TYPE;
      V_SUPP_PROD_PREMIUM    INS_P_SUMMERY.INSTALLMENT_PREMIUM%TYPE;
      V_SUPP_BEN_PREMIUM     INS_P_SUMMERY.INSTALLMENT_PREMIUM%TYPE;
      V_CAL_PARA             INS_PRODUCT.CAL_PARA%TYPE;

      V_GROSS_LIFE_PREMIUM   NUMBER;

      V_POLICY_TP_CD         INS_PRODUCT.POLICY_TP_CD%TYPE;
      V_SECOND_AGE_RATE_ST   INS_PRODUCT_DEFN.SECOND_AGE_RATE_ST%TYPE;
      V_GEN_VALUE_AMT        NUMBER;
   BEGIN
      V_PRODUCT_CD := P_PRODUCT_CD;
      V_TERM := P_TERM;
      V_SUM_ASSURED := P_SUMASSURED;
      V_PAY_MODE := P_PAY_MODE;
      V_OPTION_CD := P_OPTION;
      V_STAFF_REBATE := P_STAF_FLAG;
      V_AGE_AT_ENTRY := P_AGE_AT_ENTRY;

      BEGIN
         SELECT P.POLICY_TP_CD
           INTO V_POLICY_TP_CD
           FROM INS_PRODUCT P
          WHERE P.PRODUCT_CD = P_PRODUCT_CD;
      EXCEPTION
         WHEN OTHERS
         THEN
            P_ERROR := 'Policy type not found.';
      END;


      IF V_POLICY_TP_CD = '06'
      THEN
         BEGIN
            SELECT D.INSTL_PREMIUM
              INTO V_PREMIUM_RATE
              FROM INS_PRODUCT_MON_SETUP_MST M, INS_PRODUCT_MON_SETUP_DTL D
             WHERE M.SETUP_ID = D.SETUP_ID
               AND PRODUCT_CD = V_PRODUCT_CD
               AND V_AGE_AT_ENTRY BETWEEN M.MIN_ENTRY_AGE AND M.MAX_ENTRY_AGE
               AND D.TERM = V_TERM
               AND D.SUM_ASSURED = V_SUM_ASSURED;

            V_GROSS_LIFE_PREMIUM := V_PREMIUM_RATE * 12;
         EXCEPTION

            WHEN NO_DATA_FOUND
            THEN
               P_ERROR :=
                     'Premium Rate not found as per regarding information, Product_cd='
                  || V_PRODUCT_CD
                  || ' Term='
                  || V_TERM
                  || ' Age='
                  || V_AGE_AT_ENTRY
                  || ' and Sum Assured='
                  || V_SUM_ASSURED;

         END;
      ELSE
         BEGIN

            SELECT D.RATE, P.CAL_PARA, D.SECOND_AGE_RATE_ST
              INTO V_PREMIUM_RATE, V_CAL_PARA, V_SECOND_AGE_RATE_ST
              FROM INS_PRODUCT_DEFN D, INS_PRODUCT P
             WHERE D.PRODUCT_CD = V_PRODUCT_CD
               AND D.TERM = V_TERM
               AND D.AGE = V_AGE_AT_ENTRY
               AND D.PRODUCT_CD = P.PRODUCT_CD;


            IF V_POLICY_TP_CD = '05' AND V_SECOND_AGE_RATE_ST = '1'
            THEN

               PRO_DOUBLE_AGE_PREM_RATE_PREM
                                           (P_PRODUCT_CD        => V_PRODUCT_CD,
                                            P_TERM              => V_TERM,
                                            P_MIN_AGE           => P_MIN_AGE,
                                            P_MAX_AGE           => P_MAX_AGE,
                                            P_PREMIUM_RATE      => V_PREMIUM_RATE,
                                            P_ERROR             => P_ERROR
                                           );
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               BEGIN
                  SELECT MIN (AGE)
                    INTO V_MIN_AGE
                    FROM INS_PRODUCT_DEFN
                   WHERE PRODUCT_CD = V_PRODUCT_CD AND TERM = V_TERM;

                  IF V_AGE_AT_ENTRY < V_MIN_AGE
                  THEN
                     SELECT D.RATE, P.CAL_PARA, D.SECOND_AGE_RATE_ST
                       INTO V_PREMIUM_RATE, V_CAL_PARA, V_SECOND_AGE_RATE_ST
                       FROM INS_PRODUCT_DEFN D, INS_PRODUCT P
                      WHERE D.PRODUCT_CD = V_PRODUCT_CD
                        AND TERM = V_TERM
                        AND AGE = V_MIN_AGE
                        AND D.PRODUCT_CD = P.PRODUCT_CD;


                     IF V_POLICY_TP_CD = '05' AND V_SECOND_AGE_RATE_ST = '1'
                     THEN

                        PRO_DOUBLE_AGE_PREM_RATE_PREM
                                           (P_PRODUCT_CD        => V_PRODUCT_CD,
                                            P_TERM              => V_TERM,
                                            P_MIN_AGE           => P_MIN_AGE,
                                            P_MAX_AGE           => P_MAX_AGE,
                                            P_PREMIUM_RATE      => V_PREMIUM_RATE,
                                            P_ERROR             => P_ERROR
                                           );
                     END IF;
                  END IF;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     P_ERROR := 'Invalid Product Rate';
                  WHEN OTHERS
                  THEN
                     P_ERROR := 'Invalid Product Rate';
               END;
         END;

         V_GROSS_LIFE_PREMIUM := V_SUM_ASSURED * V_PREMIUM_RATE / V_CAL_PARA;
      END IF;

      IF P_ERROR IS NULL
      THEN

         DECLARE
            CURSOR CUR_REBATE (
               P_PRODUCT_CD    VARCHAR2,
               P_PAY_MODE_CD   VARCHAR2,
               P_SUM_ASSURED   NUMBER
            )
            IS
               (SELECT D.GEN_VALUE_AMT, D.ADD_DEDUCT_FLAG, D.ADD_DED_WITH,
                       D.RATE_CALC_ON, D.RATE_FIXED_FLAG, D.STAFF_VALUE_AMT,
                       D.CAL_PARA
                  FROM INS_REBATE_SETUP_MST M,
                       INS_REBATE_SETUP_DTL D,
                       INS_REBATE_EXTRA R
                 WHERE M.REBATE_EXTRA_CD = D.REBATE_EXTRA_CD
                   AND M.REBATE_EXTRA_CD = R.REBATE_EXTRA_CD
                   AND R.STATUS = '1'
                   AND (   (    M.PRODUCT_DEPN = '1'
                            AND D.PRODUCT_CD = P_PRODUCT_CD
                           )
                        OR (M.PRODUCT_DEPN = '0')
                       )
                   AND (   (    M.PAY_MODE_DEPN = '1'
                            AND D.PAY_MODE_CD = P_PAY_MODE_CD
                           )
                        OR (M.PAY_MODE_DEPN = '0')
                       )
                   AND (   (    M.SUM_ASSURED_DEPN = '1'
                            AND P_SUM_ASSURED BETWEEN SUM_ASSURED_FROM
                                                  AND SUM_ASSURED_TO
                           )
                        OR (M.SUM_ASSURED_DEPN = '0')
                       ));

            REC_CUR_REBATE          CUR_REBATE%ROWTYPE;
            V_REB_EXTRA_AMT         INS_PRODUCT_DEFN.RATE%TYPE;
            V_STAFF_REB_EXTRA_AMT   INS_PRODUCT_DEFN.RATE%TYPE;
         BEGIN
            OPEN CUR_REBATE (V_PRODUCT_CD, V_PAY_MODE, V_SUM_ASSURED);

            LOOP
               FETCH CUR_REBATE
                INTO REC_CUR_REBATE;

               EXIT WHEN CUR_REBATE%NOTFOUND;

               IF REC_CUR_REBATE.ADD_DED_WITH = '1'
               THEN
                  IF REC_CUR_REBATE.RATE_FIXED_FLAG = '1'
                  THEN
                     V_REB_EXTRA_AMT :=
                          (V_PREMIUM_RATE * REC_CUR_REBATE.GEN_VALUE_AMT
                          )
                        / REC_CUR_REBATE.CAL_PARA;

                     IF     V_STAFF_REBATE = '1'
                        AND REC_CUR_REBATE.GEN_VALUE_AMT > 0
                     THEN
                        V_STAFF_REB_EXTRA_AMT :=
                             (V_PREMIUM_RATE * REC_CUR_REBATE.STAFF_VALUE_AMT
                             )
                           / REC_CUR_REBATE.CAL_PARA;
                     ELSE
                        V_STAFF_REB_EXTRA_AMT := 0;
                     END IF;

                     IF REC_CUR_REBATE.ADD_DEDUCT_FLAG = '1'
                     THEN
                        V_PREMIUM_RATE :=
                             V_PREMIUM_RATE
                           + (V_REB_EXTRA_AMT + V_STAFF_REB_EXTRA_AMT);
                     ELSIF REC_CUR_REBATE.ADD_DEDUCT_FLAG = '2'
                     THEN
                        V_PREMIUM_RATE :=
                             V_PREMIUM_RATE
                           - (V_REB_EXTRA_AMT + V_STAFF_REB_EXTRA_AMT);
                     END IF;
                  ELSIF REC_CUR_REBATE.RATE_FIXED_FLAG = '2'
                  THEN
                     V_REB_EXTRA_AMT := REC_CUR_REBATE.GEN_VALUE_AMT;

                     IF     V_STAFF_REBATE = '1'
                        AND REC_CUR_REBATE.GEN_VALUE_AMT > 0
                     THEN
                        V_STAFF_REB_EXTRA_AMT :=
                                               REC_CUR_REBATE.STAFF_VALUE_AMT;
                     ELSE
                        V_STAFF_REB_EXTRA_AMT := 0;
                     END IF;

                     IF REC_CUR_REBATE.ADD_DEDUCT_FLAG = '1'
                     THEN
                        V_PREMIUM_RATE :=
                             V_PREMIUM_RATE
                           + (V_REB_EXTRA_AMT + V_STAFF_REB_EXTRA_AMT);
                     ELSIF REC_CUR_REBATE.ADD_DEDUCT_FLAG = '2'
                     THEN
                        V_PREMIUM_RATE :=
                             V_PREMIUM_RATE
                           - (V_REB_EXTRA_AMT + V_STAFF_REB_EXTRA_AMT);
                     END IF;
                  END IF;
               ELSIF REC_CUR_REBATE.ADD_DED_WITH = '2'
               THEN
                  NULL;
               END IF;
            END LOOP;

            CLOSE CUR_REBATE;
         END;

         IF V_POLICY_TP_CD = '06'
         THEN
            V_YLY_PREMIUM := V_PREMIUM_RATE * 12;
            V_LIFE_PREMIUM := V_PREMIUM_RATE;
         ELSE
            V_YLY_PREMIUM := V_SUM_ASSURED * V_PREMIUM_RATE / V_CAL_PARA;


            SELECT ROUND (  V_YLY_PREMIUM
                          / DECODE (V_PAY_MODE,
                                    '01', 1,
                                    '02', 2,
                                    '03', 4,
                                    '04', 12
                                   )
                         )
              INTO V_LIFE_PREMIUM
              FROM DUAL;
         END IF;

         P_YEARLY_LIFE_PREM := V_YLY_PREMIUM;


         SELECT NVL (SUM (P.INSTALLMENT_PREMIUM), 0)
           INTO V_SUPP_PROD_PREMIUM
           FROM INS_P_SUPP_PRODUCT P
          WHERE P.PGID = P_PGID;

         SELECT NVL (SUM (B.INSTALLMENT_PREMIUM), 0)
           INTO V_SUPP_BEN_PREMIUM
           FROM INS_P_SUPP_BENEFIT B
          WHERE B.PGID = P_PGID;

         V_ACCIDENTAL_PREM :=
                     NVL (V_SUPP_PROD_PREMIUM, 0)
                     + NVL (V_SUPP_BEN_PREMIUM, 0);


         SELECT NVL (SUM (X.REBATE_EXTRA_INST_AMT), 0)
           INTO V_EXTRA_PREMIUM
           FROM INS_P_BASIC_REBATE_EXTRA X
          WHERE X.PGID = P_PGID;

         V_INSTL_PREMIUM :=
            ROUND ((  NVL (V_LIFE_PREMIUM, 0)
                    + NVL (V_ACCIDENTAL_PREM, 0)
                    + NVL (V_EXTRA_PREMIUM, 0)
                   ),
                   2
                  );
         P_LIFE_PREM := ROUND (NVL (V_LIFE_PREMIUM, 0));

      ELSE
         P_LIFE_PREM := 0;

      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         P_ERROR := 'Invalid Proposal/Policy';
      WHEN OTHERS
      THEN
         P_ERROR := 'Error in pro_prem_cal: ' || SQLERRM;
   END PRO_PREM_CAL;


   PROCEDURE PRO_SUPP_BEN_PREM (
      P_PGID          IN       INS_P_PROPOSAL.PGID%TYPE,
      P_SUPP_BEN_CD   IN       INS_P_SUPP_BENEFIT.SUPP_BEN_CD%TYPE,
      P_PRODUCT_CD    IN       INS_PRODUCT.PRODUCT_CD%TYPE,
      P_SUMASSURED    IN       INS_P_SUMMERY.TERM%TYPE,
      P_PAY_MODE      IN       INS_P_SUMMERY.PAY_MODE_CD%TYPE,
      P_EXTRA_PREM    OUT      INS_P_SUMMERY.LIFE_PREMIUM%TYPE,
      P_ERROR         OUT      VARCHAR2
   )
   IS
      V_RATE            NUMBER (7, 2);
      V_CAL_PARA        NUMBER (6, 2);
      V_GEN_VALUE_AMT   INS_REBATE_SETUP_DTL.GEN_VALUE_AMT%TYPE;

   BEGIN
      FOR I IN (SELECT P.SEX_CD,
                       NVL (E.EDU_INS_QUALIFIED, 0) EDU_INS_QUALIFIED,
                       NVL (P.OCCU_CLASS_CD, '01') OCCU_CLASS_CD,
                       ROUND ((NVL (S.COMM_DT, S.PROPOSAL_DT) - P.DOB) / 365
                             ) AGE

                FROM   INS_P_PERSONAL P,
                       INS_P_PROPOSAL S,
                       INS_EDU_QUALIFICATION E,
                       INS_OCCU_SETUP C
                 WHERE P.PGID = P_PGID
                   AND P.PARTY_CD = '03'
                   AND P.PGID = S.PGID
                   AND P.EDU_QUAL_CD = E.EDU_QUAL_CD(+)
                   AND P.OCCU_CD = C.OCCU_CD(+))
      LOOP
         BEGIN
            SELECT T.BEN_RATE, B.CAL_PARA
              INTO V_RATE, V_CAL_PARA
              FROM INS_SUPP_BEN_TAR T, INS_SUPP_BENIFIT B
             WHERE T.SUPP_BEN_CD = B.SUPP_BEN_CD
               AND T.SUPP_BEN_CD = P_SUPP_BEN_CD
               AND T.OCCU_CLASS_CD = I.OCCU_CLASS_CD;
            P_EXTRA_PREM :=
                 NVL (P_EXTRA_PREM, 0)
               + ROUND ((P_SUMASSURED * V_RATE) / V_CAL_PARA);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_ERROR :=
                  'Error in pro_supp_ben_prem: Invalid supplimentary benefit rate setup';
         END;
      END LOOP;

      IF P_ERROR IS NULL
      THEN
         P_EXTRA_PREM := ROUND (P_EXTRA_PREM, 2);

         SELECT ROUND (  P_EXTRA_PREM
                       / DECODE (P_PAY_MODE,
                                 '01', 1,
                                 '02', 2,
                                 '03', 4,
                                 '04', 12
                                )
                      )
           INTO P_EXTRA_PREM
           FROM DUAL;
      ELSE
         P_EXTRA_PREM := 0;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Error in pro_supp_ben_prem: ' || SQLERRM;
   END PRO_SUPP_BEN_PREM;


   PROCEDURE PRO_TERM_WISE_PREMIUM (
      P_PGID       IN       INS_P_SUMMERY.PGID%TYPE,
      P_PREM_TAB   OUT      TP_TERM_WISE_PREM_TAB,
      P_ERROR      OUT      VARCHAR2
   )
   IS
      CURSOR CURSOR_PREMIUM
      IS
         SELECT   A.TERM
             FROM (SELECT PP.SUPP_PRODUCT_TERM TERM
                     FROM INS_P_BASIC B, INS_P_SUPP_PRODUCT PP
                    WHERE B.PGID = PP.PGID
                      AND PP.PGID = P_PGID
                      AND PP.SUPP_PRODUCT_TERM < B.TERM
                   UNION
                   SELECT BB.SUPP_BEN_TERM TERM
                     FROM INS_P_BASIC B, INS_P_SUPP_BENEFIT BB
                    WHERE B.PGID = BB.PGID
                      AND BB.PGID = P_PGID
                      AND BB.SUPP_BEN_TERM < B.TERM
                   UNION
                   SELECT B.TERM TERM
                     FROM INS_P_BASIC B
                    WHERE B.PGID = P_PGID) A
         ORDER BY 1;

      V_CURSOR_PREMIUM    CURSOR_PREMIUM%ROWTYPE;
      V_MONTHLY_PREM      NUMBER (10, 2)           := 0;
      V_BASIC_PREMIUM     NUMBER (15, 2);
      V_PRODUCT_PREMIUM   NUMBER (15, 2);
      V_BENIFIT_PREMIUM   NUMBER (15, 2);
      V_INST_PREMIUM      NUMBER (15, 2);
      V_COUNTER           NUMBER (3)               := 0;
      V_BASIC_TERM        NUMBER (3)               := 0;
      V_INST_FROM         NUMBER (3)               := 0;
      V_INST_TO           NUMBER (3)               := 0;
      V_INDX              NUMBER (2)               := 0;
   BEGIN
      OPEN CURSOR_PREMIUM;

      LOOP
         FETCH CURSOR_PREMIUM
          INTO V_CURSOR_PREMIUM;

         EXIT WHEN CURSOR_PREMIUM%NOTFOUND;

         SELECT B.EXPECTED_PREMIUM, B.TERM
           INTO V_BASIC_PREMIUM, V_BASIC_TERM
           FROM INS_P_BASIC B
          WHERE PGID = P_PGID;

         SELECT NVL (SUM (P.INSTALLMENT_PREMIUM), 0)
           INTO V_PRODUCT_PREMIUM
           FROM INS_P_SUPP_PRODUCT P
          WHERE P.PGID = P_PGID
            AND NVL (P.SUPP_PRODUCT_TERM, V_BASIC_TERM) =
                                                         V_CURSOR_PREMIUM.TERM;

         SELECT NVL (SUM (B.INSTALLMENT_PREMIUM), 0)
           INTO V_BENIFIT_PREMIUM
           FROM INS_P_SUPP_BENEFIT B
          WHERE B.PGID = P_PGID
            AND NVL (B.SUPP_BEN_TERM, V_BASIC_TERM) = V_CURSOR_PREMIUM.TERM;

         V_INST_FROM := V_COUNTER + 1;
         V_INST_TO := V_CURSOR_PREMIUM.TERM;
         V_COUNTER := V_CURSOR_PREMIUM.TERM;
         V_INST_PREMIUM :=
               ROUND (V_BASIC_PREMIUM + V_PRODUCT_PREMIUM + V_BENIFIT_PREMIUM);
         P_PREM_TAB (V_INDX).INST_NO_FROM := V_INST_FROM;
         P_PREM_TAB (V_INDX).INST_NO_TO := V_INST_TO;
         P_PREM_TAB (V_INDX).INST_PREMIUM := V_INST_PREMIUM;
         V_INDX := V_INDX + 1;
      END LOOP;

      CLOSE CURSOR_PREMIUM;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := SQLERRM;
   END PRO_TERM_WISE_PREMIUM;


   PROCEDURE PRO_LIFE_STD_CLASS (
      P_PGID                IN       INS_P_PROPOSAL.PGID%TYPE,
      P_LIFE_STD_CLASS_CD   OUT      INS_LIFE_STD_CLASS.LIFE_CLASS_CD%TYPE,
      P_LIFE_CLASS_EXTRA    OUT      INS_UW_ACCPT_GEN.LIFE_CLASS_EXTRA%TYPE,
      P_ERROR               OUT      VARCHAR2
   )
   IS

      V_DIAG_MORTALITY         INS_DIAG_MORTALITY.EXTRA_MORTALITY%TYPE;
      V_HABIT_MORTALITY        INS_HABIT_MORTALITY.EXTRA_MORTALITY%TYPE;
      V_HEIGHT_VALUE           INS_P_MAIN_DIAG.REPORT_VALUE%TYPE         := 0;
      V_WEIGHT_VALUE           INS_P_MAIN_DIAG.REPORT_VALUE%TYPE         := 0;
      V_OVERW_CAT_CD           INS_BUILT_TBL.OVERW_CAT_CD%TYPE        := NULL;
      V_BUILT_EXTRA_MORT       INS_OVERW_EXTRA_MORTALITY.EXTRA_MORTALITY%TYPE
                                                                         := 0;
      V_CAL_PARA               INS_LIFE_STD_CLASS_MORT.CAL_PARA%TYPE     := 0;
      V_LIFE_CLASS_MORTALITY   INS_LIFE_STD_CLASS_MORT.ANY_DEFAULT_RATING%TYPE;
      V_RATE                   INS_LIFE_STD_CLASS_BASIC_RATE.RATE%TYPE   := 0;
      V_LIFE_STD_CLASS_CD      INS_LIFE_STD_CLASS.LIFE_CLASS_CD%TYPE  := NULL;
      V_LIFE_CLASS_EXTRA       INS_UW_ACCPT_GEN.LIFE_CLASS_EXTRA%TYPE    := 0;
      V_POLICY_GROUP           INS_POLICY_TYPE.POLICY_TP_CD%TYPE;
   BEGIN
      FOR I IN (SELECT B.PRODUCT_CD, P.PARTY_ID, P.SEX_CD, B.AGE,
                       B.SUM_ASSURED
                  FROM INS_P_BASIC B, INS_P_PERSONAL P
                 WHERE B.PGID = P_PGID
                   AND P.PARTY_CD = '03'
                   AND B.PGID = P.PGID)
      LOOP
         SELECT PO.POLICY_TP_CD
           INTO V_POLICY_GROUP
           FROM INS_PRODUCT P, INS_POLICY_TYPE PO
          WHERE P.POLICY_TP_CD = PO.POLICY_TP_CD
            AND P.PRODUCT_CD = I.PRODUCT_CD;
         BEGIN
            SELECT NVL (SUM (A.EXTRA_MORTALITY), 0)
              INTO V_DIAG_MORTALITY
              FROM INS_DIAG_MORTALITY A, INS_P_MAIN_DIAG B, INS_DIAG_TEST C
             WHERE A.DIAG_TEST_CD = B.DIAG_TEST_CD
               AND A.DIAG_TEST_CD = C.DIAG_TEST_CD

               AND C.DIAG_TEST_CD NOT IN ('0001', '0002')
               AND B.PGID = P_PGID
               AND B.PARTY_ID = I.PARTY_ID
               AND B.PARTY_CD = '03'
               AND A.GENDER_CD = I.SEX_CD
               AND I.AGE BETWEEN A.AGE_FROM AND A.AGE_TO
               AND B.REPORT_VALUE BETWEEN A.UNIT_FROM AND A.UNIT_TO;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_ERROR := 'Diagnosis Mortality Setup Not Found';
         END;

         BEGIN
            SELECT NVL (SUM (A.EXTRA_MORTALITY), 0)
              INTO V_HABIT_MORTALITY
              FROM INS_HABIT_MORTALITY A, INS_P_HABIT B
             WHERE A.HABIT_CD = B.HABIT_CD
               AND B.PGID = P_PGID
               AND B.PARTY_ID = I.PARTY_ID
               AND B.PARTY_CD = '03'
               AND GENDER_CD = I.SEX_CD
               AND I.AGE BETWEEN A.AGE_FROM AND A.AGE_TO
               AND B.HABIT_VALUE BETWEEN A.UNIT_FROM AND A.UNIT_TO;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_ERROR := 'Habit Mortality Setup Not Found';
         END;

         BEGIN
            SELECT IPMG.REPORT_VALUE
              INTO V_HEIGHT_VALUE
              FROM INS_P_MAIN_DIAG IPMG, INS_DIAG_TEST IDT
             WHERE IPMG.DIAG_TEST_CD = IDT.DIAG_TEST_CD

               AND IDT.DIAG_TEST_CD = '0001'
               AND IPMG.PGID = P_PGID
               AND IPMG.PARTY_CD = '03'
               AND IPMG.PARTY_ID = I.PARTY_ID;

            SELECT IPMG.REPORT_VALUE
              INTO V_WEIGHT_VALUE
              FROM INS_P_MAIN_DIAG IPMG, INS_DIAG_TEST IDT
             WHERE IPMG.DIAG_TEST_CD = IDT.DIAG_TEST_CD

               AND IDT.DIAG_TEST_CD = '0002'
               AND IPMG.PGID = P_PGID
               AND IPMG.PARTY_CD = '03'
               AND IPMG.PARTY_ID = I.PARTY_ID;

            SELECT OVERW_CAT_CD
              INTO V_OVERW_CAT_CD
              FROM INS_BUILT_TBL
             WHERE GENDER_CD = I.SEX_CD
               AND V_HEIGHT_VALUE BETWEEN HEIGHT_FROM AND HEIGHT_TO
               AND V_WEIGHT_VALUE BETWEEN WEIGHT_FROM AND WEIGHT_TO;

            SELECT NVL (EXTRA_MORTALITY, 0)
              INTO V_BUILT_EXTRA_MORT
              FROM INS_OVERW_EXTRA_MORTALITY
             WHERE OVERW_CAT_CD = V_OVERW_CAT_CD
               AND I.AGE BETWEEN AGE_FROM AND AGE_TO;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN

               NULL;
         END;

         BEGIN
            SELECT A.LIFE_CLASS_CD, A.CAL_PARA, A.ANY_DEFAULT_RATING
              INTO V_LIFE_STD_CLASS_CD, V_CAL_PARA, V_LIFE_CLASS_MORTALITY
              FROM INS_LIFE_STD_CLASS_MORT A
             WHERE (  NVL (V_DIAG_MORTALITY, 0)
                    + NVL (V_HABIT_MORTALITY, 0)
                    + NVL (V_BUILT_EXTRA_MORT, 0)
                   ) BETWEEN A.EXTRA_MORTALITY_FR AND A.EXTRA_MORTALITY_TO;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_ERROR := 'Life Standard Class Mortality Setup Not Found';
         END;

         BEGIN
            SELECT RATE
              INTO V_RATE
              FROM INS_LIFE_STD_CLASS_BASIC_RATE
             WHERE PRODUCT_CD = I.PRODUCT_CD AND AGE = I.AGE;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_ERROR := 'Life Standard Class Basic Rate Not Found';
         END;

         V_LIFE_CLASS_EXTRA :=
            NVL (  (I.SUM_ASSURED * V_LIFE_CLASS_MORTALITY * V_RATE)
                 / V_CAL_PARA,
                 0
                );

         IF    TO_NUMBER (V_LIFE_STD_CLASS_CD) >
                                               TO_NUMBER (P_LIFE_STD_CLASS_CD)
            OR P_LIFE_STD_CLASS_CD IS NULL
         THEN
            P_LIFE_STD_CLASS_CD := V_LIFE_STD_CLASS_CD;
            P_LIFE_CLASS_EXTRA := V_LIFE_CLASS_EXTRA;
         END IF;

      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'pro_life_std_class: ' || SQLERRM;
   END PRO_LIFE_STD_CLASS;


   PROCEDURE PRO_DEV_EMP_INFO (
      P_PGID       IN       INS_P_PROPOSAL.PGID%TYPE,
      P_AGENT_ID   IN       HRM_AGENT.AGENT_ID%TYPE,
      P_USER       IN       VARCHAR2,
      P_ERROR      OUT      VARCHAR2
   )
   IS
      DUMMY              BOOLEAN;
      V_DE_GID           NUMBER (8);
      V_EMPLOYMMENT_TP   VARCHAR2 (2);
      V_COUNT            NUMBER (2)                               := 1;
      V_CNT_H_EMP_GID    NUMBER (5);
      V_DO_STATUS        HRM_EMPLOYEE.ACTIVITY_CD%TYPE;
      V_DE_GID_BOSS      HRM_EMPLOYEE_SETUP.H_EMPLOYEE_GID%TYPE;
      V_CNT              NUMBER (2)                               := 0;
   BEGIN
      SELECT COUNT (G.PGID)
        INTO V_CNT
        FROM INS_P_AGENT G
       WHERE G.PGID = P_PGID;

      IF V_CNT = 0
      THEN
         INSERT INTO INS_P_AGENT
                     (PGID, AGENT_ID, STATUS, I_USR, I_DT, U_USR, U_DT,
                      ACCEPTED
                     )
              VALUES (P_PGID, P_AGENT_ID, '01', P_USER, SYSDATE, '', '',
                      '0'
                     );

         SELECT DEV_EMP_GID
           INTO V_DE_GID
           FROM HRM_AGENT
          WHERE AGENT_ID = P_AGENT_ID;

         SELECT HRM_EMPLOYEE.ACTIVITY_CD
           INTO V_DO_STATUS
           FROM HRM_EMPLOYEE
          WHERE EMP_GID = V_DE_GID;

         INSERT INTO INS_P_DEV_EMPLOYEE
              VALUES (P_PGID, V_DE_GID, V_COUNT, V_DO_STATUS, P_USER, SYSDATE,
                      '', '', P_AGENT_ID);

         LOOP
            SELECT COUNT (H_EMPLOYEE_GID)
              INTO V_CNT_H_EMP_GID
              FROM HRM_EMPLOYEE_SETUP S, HRM_EMPLOYEE E,
                   HRM_EMPLOYMENT_TYPE T
             WHERE S.EMPLOYEE_GID = V_DE_GID
               AND E.EMP_GID = S.EMPLOYEE_GID
               AND E.ACTIVITY_CD = '01'
               AND E.EMPLOYMENT_TP_CD = T.EMPLOYMENT_TP_CD
               AND E.EMPLOYMENT_TP_CD != (SELECT EMPLOYMENT_TP_CD
                                            FROM HRM_EMPLOYMENT_TYPE
                                           WHERE OFFICIAL_REL = '1');

            EXIT WHEN V_CNT_H_EMP_GID = 0;

            SELECT H_EMPLOYEE_GID
              INTO V_DE_GID_BOSS
              FROM HRM_EMPLOYEE_SETUP S, HRM_EMPLOYEE E,
                   HRM_EMPLOYMENT_TYPE T
             WHERE S.EMPLOYEE_GID = V_DE_GID
               AND E.EMP_GID = S.EMPLOYEE_GID
               AND E.ACTIVITY_CD = '01'
               AND E.EMPLOYMENT_TP_CD = T.EMPLOYMENT_TP_CD
               AND E.EMPLOYMENT_TP_CD != (SELECT EMPLOYMENT_TP_CD
                                            FROM HRM_EMPLOYMENT_TYPE
                                           WHERE OFFICIAL_REL = '1');

            V_COUNT := V_COUNT + 1;

            SELECT HRM_EMPLOYEE.ACTIVITY_CD
              INTO V_DO_STATUS
              FROM HRM_EMPLOYEE
             WHERE EMP_GID = V_DE_GID_BOSS;

            INSERT INTO INS_P_DEV_EMPLOYEE
                 VALUES (P_PGID, V_DE_GID_BOSS, V_COUNT, V_DO_STATUS, P_USER,
                         SYSDATE, '', '', P_AGENT_ID);

            V_DE_GID := V_DE_GID_BOSS;
         END LOOP;
      END IF;

   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'pro_dev_emp_info: ' || SQLERRM;
   END PRO_DEV_EMP_INFO;


   PROCEDURE PRO_EXTRA_PREM (
      P_PGID               IN       INS_P_PROPOSAL.PGID%TYPE,
      P_PRODUCT_CD         IN       INS_P_BASIC.PRODUCT_CD%TYPE,
      P_PAY_MODE_CD        IN       INS_P_BASIC.PAY_MODE_CD%TYPE,
      P_YEARLY_LIFE_PREM   IN       INS_P_SUMMERY.LIFE_PREMIUM%TYPE,
      P_SUM_ASSURED        IN       INS_P_BASIC.SUM_ASSURED%TYPE,
      P_TERM               IN       INS_P_BASIC.TERM%TYPE,
      P_STAFF_REBATE       IN       INS_P_BASIC.STAFF_REBATE%TYPE,
      P_EXTRA_TAB          OUT      TP_EXTRA_PREM_TAB,
      P_ERROR              OUT      VARCHAR2
   )
   IS

      V_CAL_PARA                NUMBER (15, 2);

      V_YRLY_NO_INST            NUMBER (2)                               := 0;
      V_COMM_DT                 DATE;


      V_REBATE_EXTRA_CD         INS_REBATE_EXTRA.REBATE_EXTRA_CD%TYPE;
      V_REBATE_EXTRA_NM         INS_REBATE_EXTRA.REBATE_EXTRA_DESC%TYPE;
      V_REBATE_EXTRA_AMT        NUMBER (12, 2);
      V_REBATE_EXTRA_INST_AMT   NUMBER (12, 2);
      V_INDX                    NUMBER (3)                               := 0;
      V_LOOP_CNT                NUMBER (3)                               := 0;
      V_EXISTS                  NUMBER (3)                               := 0;

      V_RATE_FIXED_FLAG         VARCHAR2 (1);
      V_VALUE_AMT               NUMBER (15, 2);
      V_RATE_CALC_ON            VARCHAR2 (1);
      V_ADD_WITH                VARCHAR2 (1);
      V_POLICY_GROUP            INS_POLICY_TYPE.POLICY_TP_CD%TYPE;

      CURSOR CUR_EXTRA (
         P_GENDER_CD        IN   INS_P_PERSONAL.SEX_CD%TYPE,
         P_AGE              IN   INS_P_BASIC.AGE%TYPE,
         P_MATURITY_AGE     IN   INS_P_BASIC.AGE%TYPE,
         P_MARITAL_STATUS   IN   INS_P_PERSONAL.MARITAL_STATUS%TYPE,
         P_EDU_QUAL_CD      IN   INS_P_PERSONAL.EDU_QUAL_CD%TYPE,

         P_OCCU_CLASS_CD    IN   INS_P_PERSONAL.OCCU_CLASS_CD%TYPE,
         P_PAY_MODE_CD      IN   INS_PAY_MODE.PAY_MODE_CD%TYPE
      )
      IS
         SELECT S.REBATE_EXTRA_CD, R.REBATE_EXTRA_DESC, SD.RATE_FIXED_FLAG,
                SD.VALUE_AMT, SD.CAL_PARA, SD.RATE_CALC_ON, SD.ADD_WITH
           FROM INS_EXTRA_SETUP_MST S,
                INS_EXTRA_SETUP_DTL SD,
                INS_REBATE_EXTRA R
          WHERE R.REBATE_EXTRA = '1'
            AND STATUS = '1'
            AND R.REBATE_EXTRA_CD = S.REBATE_EXTRA_CD
            AND R.REBATE_EXTRA_CD = SD.REBATE_EXTRA_CD
            AND (   S.PRODUCT_DEPN = 0
                 OR (S.PRODUCT_DEPN = 1 AND SD.PRODUCT_CD = P_PRODUCT_CD)
                )
            AND (   S.GENDER_DEPN = 0
                 OR (S.GENDER_DEPN = 1 AND SD.GENDER_CODE = P_GENDER_CD)
                )
            AND (   S.EDUCATION_DEPN = 0
                 OR (S.EDUCATION_DEPN = 1 AND SD.EDU_QUAL_CD = P_EDU_QUAL_CD
                    )
                )
            AND (   S.OCCU_CLASS_DEPN = 0
                 OR (    S.OCCU_CLASS_DEPN = 1
                     AND SD.OCCU_CLASS_CD = P_OCCU_CLASS_CD
                    )
                )
            AND (   S.PAY_MODE_DEPN = 0
                 OR (S.PAY_MODE_DEPN = 1 AND SD.PAY_MODE_CD = P_PAY_MODE_CD)
                );
   BEGIN
      SELECT P.POLICY_TP_CD
        INTO V_POLICY_GROUP
        FROM INS_PRODUCT P
       WHERE P.PRODUCT_CD = P_PRODUCT_CD;

      IF V_POLICY_GROUP NOT IN ('06')
      THEN
         SELECT NVL (L.COMM_DT, L.PROPOSAL_DT)
           INTO V_COMM_DT
           FROM INS_P_PROPOSAL L
          WHERE L.PGID = P_PGID;

         SELECT (CASE
                    WHEN P_PAY_MODE_CD = '01'
                       THEN 1
                    WHEN P_PAY_MODE_CD = '02'
                       THEN 2
                    WHEN P_PAY_MODE_CD = '03'
                       THEN 4
                    WHEN P_PAY_MODE_CD = '04'
                       THEN 12
                    ELSE 0
                 END
                )
           INTO V_YRLY_NO_INST
           FROM DUAL;

         V_LOOP_CNT := 0;

         FOR I IN (SELECT P.SEX_CD, ROUND ((V_COMM_DT - P.DOB) / 365) AGE,
                          (ROUND ((V_COMM_DT - P.DOB) / 365) + P_TERM
                          ) MATURITY_AGE,
                          P.MARITAL_STATUS, P.EDU_QUAL_CD, P.OCCU_CD,
                          P.OCCU_CLASS_CD, P.OCCU_SCOPE_CD
                   FROM   INS_P_PERSONAL P
                    WHERE P.PGID = P_PGID AND P.PARTY_CD = '03')
         LOOP
            OPEN CUR_EXTRA (I.SEX_CD,
                            I.AGE,
                            I.MATURITY_AGE,
                            I.MARITAL_STATUS,
                            I.EDU_QUAL_CD,

                            I.OCCU_CLASS_CD,
                            P_PAY_MODE_CD
                           );

            LOOP
               FETCH CUR_EXTRA
                INTO V_REBATE_EXTRA_CD, V_REBATE_EXTRA_NM, V_RATE_FIXED_FLAG,
                     V_VALUE_AMT, V_CAL_PARA, V_RATE_CALC_ON, V_ADD_WITH;

               EXIT WHEN CUR_EXTRA%NOTFOUND;

               IF V_RATE_FIXED_FLAG = '1'

               THEN
                  IF V_RATE_CALC_ON = '1'
                  THEN
                     V_REBATE_EXTRA_AMT :=
                        ROUND ((P_YEARLY_LIFE_PREM * V_VALUE_AMT) / V_CAL_PARA
                              );
                  ELSE
                     V_REBATE_EXTRA_AMT :=
                           ROUND ((P_SUM_ASSURED * V_VALUE_AMT) / V_CAL_PARA);
                  END IF;

                  V_REBATE_EXTRA_INST_AMT :=
                                   ROUND (V_REBATE_EXTRA_AMT / V_YRLY_NO_INST);
               ELSE
                  V_REBATE_EXTRA_AMT := ROUND (V_VALUE_AMT);
                  V_REBATE_EXTRA_INST_AMT :=
                                  ROUND (V_REBATE_EXTRA_AMT / V_YRLY_NO_INST);
               END IF;

               V_EXISTS := 0;

               IF V_REBATE_EXTRA_CD IS NOT NULL
               THEN
                  IF V_LOOP_CNT = 0
                  THEN
                     P_EXTRA_TAB (V_INDX).REBATE_EXTRA_CD :=
                                                            V_REBATE_EXTRA_CD;
                     P_EXTRA_TAB (V_INDX).REBATE_EXTRA_NM :=
                                                            V_REBATE_EXTRA_NM;
                     P_EXTRA_TAB (V_INDX).REBATE_EXTRA_AMT :=
                                                           V_REBATE_EXTRA_AMT;
                     P_EXTRA_TAB (V_INDX).REBATE_EXTRA_INST_AMT :=
                                                      V_REBATE_EXTRA_INST_AMT;
                     V_INDX := V_INDX + 1;
                  ELSIF V_LOOP_CNT > 0
                  THEN
                     FOR J IN P_EXTRA_TAB.FIRST .. P_EXTRA_TAB.LAST
                     LOOP
                        IF P_EXTRA_TAB (J).REBATE_EXTRA_CD =
                                                            V_REBATE_EXTRA_CD
                        THEN
                           IF P_EXTRA_TAB (J).REBATE_EXTRA_AMT <
                                                           V_REBATE_EXTRA_AMT
                           THEN
                              P_EXTRA_TAB (J).REBATE_EXTRA_AMT :=
                                                           V_REBATE_EXTRA_AMT;
                              P_EXTRA_TAB (J).REBATE_EXTRA_INST_AMT :=
                                                      V_REBATE_EXTRA_INST_AMT;
                           END IF;

                           V_EXISTS := 1;
                        END IF;
                     END LOOP;

                     IF V_EXISTS = 1
                     THEN
                        NULL;
                     ELSE
                        P_EXTRA_TAB (V_INDX).REBATE_EXTRA_CD :=
                                                            V_REBATE_EXTRA_CD;
                        P_EXTRA_TAB (V_INDX).REBATE_EXTRA_NM :=
                                                            V_REBATE_EXTRA_NM;
                        P_EXTRA_TAB (V_INDX).REBATE_EXTRA_AMT :=
                                                           V_REBATE_EXTRA_AMT;
                        P_EXTRA_TAB (V_INDX).REBATE_EXTRA_INST_AMT :=
                                                      V_REBATE_EXTRA_INST_AMT;
                        V_INDX := V_INDX + 1;
                     END IF;
                  END IF;
               END IF;
            END LOOP;

            CLOSE CUR_EXTRA;

            V_LOOP_CNT := V_LOOP_CNT + 1;
         END LOOP;
      END IF;
   END PRO_EXTRA_PREM;

   PROCEDURE PRO_SINGLE_EXTRA_PREM (
      P_PGID                    IN       INS_P_PROPOSAL.PGID%TYPE,
      P_PRODUCT_CD              IN       INS_P_BASIC.PRODUCT_CD%TYPE,
      P_PAY_MODE_CD             IN       INS_P_BASIC.PAY_MODE_CD%TYPE,
      P_PRODUCT_RATE            IN       INS_PRODUCT_DEFN.RATE%TYPE,
      P_SUM_ASSURED             IN       INS_P_BASIC.SUM_ASSURED%TYPE,

      P_GENDER_CD               IN       VARCHAR2,
      P_EDU_QUAL_CD             IN       VARCHAR2,
      P_OCCU_CLASS_CD           IN       VARCHAR2,
      P_STAFF_REBATE            IN       INS_P_BASIC.STAFF_REBATE%TYPE,
      P_REBATE_EXTRA_CD         IN       INS_REBATE_EXTRA.REBATE_EXTRA_CD%TYPE,
      P_REBATE_EXTRA_AMT        OUT      NUMBER,
      P_REBATE_EXTRA_INST_AMT   OUT      NUMBER,
      P_ERROR                   OUT      VARCHAR2
   )
   IS
      V_CAL_PARA          NUMBER (15, 2);
      V_YRLY_NO_INST      NUMBER (2)                                := 0;
      V_COMM_DT           DATE;
      V_REBATE_EXTRA_CD   INS_REBATE_EXTRA.REBATE_EXTRA_CD%TYPE;
      V_REBATE_EXTRA_NM   INS_REBATE_EXTRA.REBATE_EXTRA_DESC%TYPE;

      V_RATE_FIXED_FLAG   VARCHAR2 (1);
      V_VALUE_AMT         NUMBER (15, 2);
      V_RATE_CALC_ON      VARCHAR2 (1);
      V_ADD_WITH          VARCHAR2 (1);
      V_POLICY_GROUP      INS_POLICY_TYPE.POLICY_TP_CD%TYPE;
   BEGIN
      SELECT P.POLICY_TP_CD
        INTO V_POLICY_GROUP
        FROM INS_PRODUCT P
       WHERE P.PRODUCT_CD = P_PRODUCT_CD;

      IF V_POLICY_GROUP NOT IN ('06')
      THEN
         SELECT L.COMM_DT
           INTO V_COMM_DT
           FROM INS_P_PROPOSAL L
          WHERE L.PGID = P_PGID;

         SELECT (CASE
                    WHEN P_PAY_MODE_CD = '01'
                       THEN 1
                    WHEN P_PAY_MODE_CD = '02'
                       THEN 2
                    WHEN P_PAY_MODE_CD = '03'
                       THEN 4
                    WHEN P_PAY_MODE_CD = '04'
                       THEN 12
                    ELSE 0
                 END
                )
           INTO V_YRLY_NO_INST
           FROM DUAL;

         BEGIN
            SELECT S.REBATE_EXTRA_CD, R.REBATE_EXTRA_DESC,
                   SD.RATE_FIXED_FLAG, SD.VALUE_AMT, SD.CAL_PARA,
                   SD.RATE_CALC_ON, SD.ADD_WITH
              INTO V_REBATE_EXTRA_CD, V_REBATE_EXTRA_NM,
                   V_RATE_FIXED_FLAG, V_VALUE_AMT, V_CAL_PARA,
                   V_RATE_CALC_ON, V_ADD_WITH
              FROM INS_EXTRA_SETUP_MST S,
                   INS_EXTRA_SETUP_DTL SD,
                   INS_REBATE_EXTRA R
             WHERE R.REBATE_EXTRA = '1'
               AND STATUS = '1'
               AND R.REBATE_EXTRA_CD = P_REBATE_EXTRA_CD
               AND R.REBATE_EXTRA_CD = S.REBATE_EXTRA_CD
               AND R.REBATE_EXTRA_CD = SD.REBATE_EXTRA_CD
               AND SD.PAY_MODE_CD = P_PAY_MODE_CD
               AND (   S.PRODUCT_DEPN = 0
                    OR (S.PRODUCT_DEPN = 1 AND SD.PRODUCT_CD = P_PRODUCT_CD)
                   )
               AND (   S.GENDER_DEPN = 0
                    OR (S.GENDER_DEPN = 1 AND SD.GENDER_CODE = P_GENDER_CD)
                   )
               AND (   S.EDUCATION_DEPN = 0
                    OR (S.EDUCATION_DEPN = 1
                        AND SD.EDU_QUAL_CD = P_EDU_QUAL_CD
                       )
                   )
               AND (   S.OCCU_CLASS_DEPN = 0
                    OR (    S.OCCU_CLASS_DEPN = 1
                        AND SD.OCCU_CLASS_CD = P_OCCU_CLASS_CD
                       )
                   );
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;

         IF V_RATE_FIXED_FLAG = '1'

         THEN
            IF V_RATE_CALC_ON = '1'
            THEN
               P_REBATE_EXTRA_AMT :=
                  ROUND (  ((P_SUM_ASSURED * P_PRODUCT_RATE) * V_VALUE_AMT)
                         / V_CAL_PARA
                        );
            ELSE
               P_REBATE_EXTRA_AMT :=
                           ROUND ((P_SUM_ASSURED * V_VALUE_AMT) / V_CAL_PARA);
            END IF;

            P_REBATE_EXTRA_INST_AMT :=
                                   ROUND (P_REBATE_EXTRA_AMT / V_YRLY_NO_INST);
         ELSE
            P_REBATE_EXTRA_AMT := ROUND (V_VALUE_AMT);
            P_REBATE_EXTRA_INST_AMT :=
                                  ROUND (P_REBATE_EXTRA_AMT / V_YRLY_NO_INST);
         END IF;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'pro_single_extra_prem: ' || SQLERRM;
   END PRO_SINGLE_EXTRA_PREM;


   PROCEDURE PRO_FP_LATE_FEE (
      P_PGID       IN       INS_P_PROPOSAL.PGID%TYPE,
      P_LATE_FEE   OUT      NUMBER
   )
   IS
      V_RISK_DATE             DATE;
      V_COMM_DATE             DATE;
      V_INSTALLMENT_PREMIUM   INS_P_SUMMERY.INSTALLMENT_PREMIUM%TYPE;
      V_MAX_REC_DT            DATE;
      V_LATE_FEE              NUMBER (12, 2);
      V_PROPOSAL_NO           INS_P_PROPOSAL.PROPOSAL_NO%TYPE;
   BEGIN
      V_LATE_FEE := 0;
      V_RISK_DATE := NULL;
      V_COMM_DATE := NULL;
      V_INSTALLMENT_PREMIUM := NULL;

      SELECT NVL (G.RISK_DATE, TRUNC (SYSDATE)), G.COMM_DT,
             G.INSTALLMENT_PREMIUM
        INTO V_RISK_DATE, V_COMM_DATE,
             V_INSTALLMENT_PREMIUM
        FROM INS_UW_ACCPT_GEN G
       WHERE G.PGID = P_PGID;

      SELECT IPP.PROPOSAL_NO
        INTO V_PROPOSAL_NO
        FROM INS_P_PROPOSAL IPP
       WHERE IPP.PGID = P_PGID;

      SELECT MAX (NVL (R.COLL_SLIP_REC_DT, R.RECEIVE_DATE))
        INTO V_MAX_REC_DT
        FROM ACC_ADVANCE_RECEIVABLES R
       WHERE R.PROPOSAL_NO = V_PROPOSAL_NO;

      IF V_MAX_REC_DT > V_COMM_DATE
      THEN
         IF ROUND (V_RISK_DATE - V_COMM_DATE) > 60
         THEN
            V_LATE_FEE :=
               FUN_CAL_LATE_FEE_FP (V_INSTALLMENT_PREMIUM,
                                    V_COMM_DATE,
                                    V_RISK_DATE
                                   );
         END IF;
      END IF;

      P_LATE_FEE := V_LATE_FEE;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_LATE_FEE := 0;
   END PRO_FP_LATE_FEE;


   PROCEDURE PRO_UW_DATA_PREP (
      P_PGID    IN       INS_P_PROPOSAL.PGID%TYPE,
      P_USER    IN       VARCHAR2,
      P_ERROR   OUT      VARCHAR2
   )
   IS
      V_ORG_OFFICE            VARCHAR2 (500);
      V_BRNCH_OFF             HRM_OFFICE.OFFICE_CD%TYPE;
      V_SALES_OFF             HRM_OFFICE.OFFICE_CD%TYPE;
      V_ZONAL_OFF             HRM_OFFICE.OFFICE_CD%TYPE;
      V_REGIONAL_OFF          HRM_OFFICE.OFFICE_CD%TYPE;
      V_OFFICE_CD             HRM_OFFICE.OFFICE_CD%TYPE;
      V_AGE                   NUMBER (5, 2);
      V_POLICY_GROUP          INS_POLICY_TYPE.POLICY_TP_CD%TYPE;
      V_COLL_AMOUNT           NUMBER (12, 2);
      V_PRODUCT_CD            INS_PRODUCT.PRODUCT_CD%TYPE;
      V_PROPOSAL_NO           INS_P_PROPOSAL.PROPOSAL_NO%TYPE;
      V_INSTALLMENT_PREMIUM   NUMBER (12, 2);

      V_RE_INS_AMOUNT         NUMBER (12, 2);
      V_CESSION_NO            INS_P_SUMMERY.CESSION_NO%TYPE;
      V_CESSION_DT            DATE;
      V_EXTRA_SUSPENSE_AMT    NUMBER (12, 2);
      V_LATE_FEE              NUMBER (12, 2);

      V_ACCPT_UW_CD           INS_UW.UW_CD%TYPE;
      V_ACCPT_CNT             NUMBER (2)                                 := 0;
      V_UW_STRENGTH           INS_UW.UW_STRENGTH%TYPE;
      V_ACCEPTENCE_REQ        INS_UW.ACCEPTENCE_REQ%TYPE;
      V_ACCPT_STATUS          VARCHAR2 (1);
      V_UNACCPT_CNT           NUMBER (1)                                 := 0;

      V_USE_CODE_LEN          GEN_CODE_NO_CONVENTION.USE_CODE_LEN%TYPE;

      V_ACCPTBLE_STAT         VARCHAR2 (2);
      V_REASON_STAT           VARCHAR2 (500);
      V_ACCEPT_ERROR          VARCHAR2 (500);
   BEGIN
      BEGIN
         SELECT MAX (UW_CD), COUNT (PGID)
           INTO V_ACCPT_UW_CD, V_ACCPT_CNT
           FROM INS_UW_ACCPT C
          WHERE C.PGID = P_PGID;

         IF V_ACCPT_UW_CD IS NOT NULL
         THEN
            SELECT U.UW_STRENGTH, U.ACCEPTENCE_REQ
              INTO V_UW_STRENGTH, V_ACCEPTENCE_REQ
              FROM INS_UW U
             WHERE UW_CD = V_ACCPT_UW_CD;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      IF V_ACCPT_CNT >= V_ACCEPTENCE_REQ
      THEN
         V_ACCPT_STATUS := 2;

         SELECT B.PRODUCT_CD, B.AGE, B.INSTALLMENT_PREMIUM
           INTO V_PRODUCT_CD, V_AGE, V_INSTALLMENT_PREMIUM
           FROM INS_P_BASIC B
          WHERE B.PGID = P_PGID;

         BEGIN
            SELECT P.POLICY_TP_CD
              INTO V_POLICY_GROUP
              FROM INS_PRODUCT P
             WHERE P.PRODUCT_CD = V_PRODUCT_CD;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;

         IF V_POLICY_GROUP <> '02'
         THEN
            V_AGE := 0;
         END IF;

         SELECT HA.OFFICE_CD, IPP.PROPOSAL_NO
           INTO V_OFFICE_CD, V_PROPOSAL_NO
           FROM HRM_AGENT HA, INS_P_PROPOSAL IPP
          WHERE HA.AGENT_ID = IPP.AGENT_ID AND IPP.PGID = P_PGID;

         V_ORG_OFFICE := FUN_ORG_OFFICE (V_OFFICE_CD);

         SELECT USE_CODE_LEN
           INTO V_USE_CODE_LEN
           FROM GEN_CODE_NO_CONVENTION
          WHERE CODE_ID = '1';
         
         SELECT SUBSTR (V_ORG_OFFICE, 1, V_USE_CODE_LEN) BRNCH_OFF,
                SUBSTR (V_ORG_OFFICE,
                        INSTR (V_ORG_OFFICE, '-', 1) + 1,
                        V_USE_CODE_LEN
                       ) SALES_OFF,
                SUBSTR (V_ORG_OFFICE,
                        INSTR (V_ORG_OFFICE, '-', 1, 2) + 1,
                        V_USE_CODE_LEN
                       ) SALES_OFF,
                SUBSTR (V_ORG_OFFICE,
                        INSTR (V_ORG_OFFICE, '-', 1, 3) + 1,
                        V_USE_CODE_LEN
                       ) SALES_OFF
           INTO V_BRNCH_OFF,
                V_SALES_OFF,
                V_ZONAL_OFF,
                V_REGIONAL_OFF
           FROM DUAL;

         SELECT NVL (SUM (COLL_AMOUNT), 0)
           INTO V_COLL_AMOUNT
           FROM ACC_ADVANCE_RECEIVABLES
          WHERE PROPOSAL_NO = V_PROPOSAL_NO
            AND STATUS = '0'
            AND REC_STATUS = '1'
            AND NVL (CHEQUE_DEPOSIT, 'N') =
                   DECODE (RECEIVE_MODE,
                           '1', NVL (CHEQUE_DEPOSIT, 'N'),
                           '3', NVL (CHEQUE_DEPOSIT, 'N'),
                           'Y'
                          );

         PRO_PROPOSAL_ACCPTBLE_STAT (P_PGID               => P_PGID,
                                     P_INSTL_PREMIUM      => V_INSTALLMENT_PREMIUM,
                                     P_ACCPTBLE_STAT      => V_ACCPTBLE_STAT,

                                     P_REASON_STAT        => V_REASON_STAT,

                                     P_ERROR              => V_ACCEPT_ERROR
                                    );

         IF V_COLL_AMOUNT >= V_INSTALLMENT_PREMIUM
         THEN
            PRO_FP_LATE_FEE (P_PGID, V_LATE_FEE);

            IF V_COLL_AMOUNT >= V_INSTALLMENT_PREMIUM + NVL (V_LATE_FEE, 0)
            THEN
               V_EXTRA_SUSPENSE_AMT :=
                    V_COLL_AMOUNT
                  - (V_INSTALLMENT_PREMIUM + NVL (V_LATE_FEE, 0));
               V_ACCPT_STATUS := 1;


               INSERT INTO INS_P_PRE_SUMMERY
                           (PGID, PROPOSAL_DATE, COMM_DATE, DOB, AGE,
                            AGE_DOCU_CD, SEX_CD, OPTION_CD, SUM_ASSURED,
                            PRODUCT_CD, TERM, PAY_MODE_CD, POLICY_INSTALLMENT,
                            TOTAL_YEARLY_PREMIUM, INSTALLMENT_PREMIUM,
                            AGENT_ID, OFFICE_CD, SUPPL_BEN_PREMIUM,
                            SUPPL_PRODUCT_PREMIUM, SUM_REBATE, DO_GID, DM_GID,
                            NEXT_DUE_DATE, NEXT_DUE_INST_NO, RE_INS_AMOUNT,
                            CESSION_NO, CESSION_DT, SUSPENSE_AMT, I_USR, I_DT,
                            POLICY_STATUS, POLICY_STATUS_DT,
                            LAST_PAID_INST_NO, LAST_PAID_DATE, MATURITY_DATE,
                            BRANCH_OFF, SALES_OFF, ZONAL_OFF, REGIONAL_OFF,
                            POLICY_CATG_CD, SERVICING_OFF, PPS_CD,
                            LIFE_PREMIUM, RISK_DATE, INS_TP_CD, EXTRA_PREMIUM)
                  SELECT P.PGID, P.PROPOSAL_DT, P.COMM_DT, P.DOB, P.AGE,
                         P.AGE_DOCU_CD, P.SEX_CD, P.OPTION_CD, P.SUM_ASSURED,
                         P.PRODUCT_CD, P.TERM, P.PAY_MODE_CD,
                         (P.TERM * P.YRLY_NO_INST) POLICY_INSTALLMENT,
                         P.YEARLY_PREMIUM, P.INSTALLMENT_PREMIUM, P.AGENT_ID,
                         P.OFFICE_CD, S.BEN_PREMIUM, S.PRO_PREMIUM,
                         S.SUM_REBATE_EXTRA, P.DEV_EMP_GID,
                         (SELECT HES.H_EMPLOYEE_GID
                            FROM HRM_EMPLOYEE_SETUP HES
                           WHERE HES.STATUS = '1'
                             AND HES.EMPLOYEE_GID =
                                    (SELECT DEV_EMP_GID
                                       FROM HRM_AGENT
                                      WHERE AGENT_ID =
                                               (SELECT AGENT_ID
                                                  FROM INS_P_AGENT
                                                 WHERE PGID = P_PGID
                                                   AND STATUS = '01')))
                                                               H_EMPLOYEE_GID,
                         ADD_MONTHS (P.COMM_DT,
                                     DECODE (P.YRLY_NO_INST,
                                             1, 12,
                                             2, 6,
                                             4, 3,
                                             12, 1
                                            )
                                    ) NEXT_DUE_DATE,
                         2 NEXT_DUE_INST_NO, V_RE_INS_AMOUNT, V_CESSION_NO,
                         V_CESSION_DT, V_EXTRA_SUSPENSE_AMT, P_USER, SYSDATE,
                         '09', SYSDATE, 1 LAST_PAID_INST_NO,
                         P.COMM_DT LAST_PAID_DATE,
                        --ADD_MONTHS (P.COMM_DT, ((P.TERM - V_AGE) * 12)),
                        ADD_MONTHS (P.COMM_DT, (P.TERM  * 12)),
                         V_BRNCH_OFF, V_SALES_OFF, V_ZONAL_OFF,
                         V_REGIONAL_OFF, P.POLICY_CATG_CD, P.SERVICING_OFFICE,
                         P.V_PPS_CD, P.LIFE_PREMIUM, P.RISK_DATE, P.INS_TP_CD,
                         DECODE (P.YRLY_NO_INST,
                                 1, S.SUM_REBATE_EXTRA,
                                 2, ROUND (S.SUM_REBATE_EXTRA / 2, 2),
                                 4, ROUND (S.SUM_REBATE_EXTRA / 4, 2),
                                 12, ROUND (S.SUM_REBATE_EXTRA / 12, 2)
                                ) EXTRA_PREM
                    FROM (SELECT IPPO.PGID, IPPO.PROPOSAL_DT,
                                 IPPO.SERVICING_OFFICE, IPPE.DOB,
                                 IPPE.AGE_DOCU_CD, IPPE.SEX_CD, ROUND ((NVL (IPPO.COMM_DT, IPPO.PROPOSAL_DT) - IPPE.DOB) / 365) AGE,
                                 IUAG.COMM_DT, IUAG.OPTION_CD,
                                 IUAG.SUM_ASSURED, IUAG.PRODUCT_CD, IUAG.TERM,
                                 IUAG.PAY_MODE_CD, IUAG.YEARLY_PREMIUM,
                                 IUAG.INSTALLMENT_PREMIUM, IPPO.AGENT_ID,
                                 HA.OFFICE_CD, HA.DEV_EMP_GID,
                                 IPM.YRLY_NO_INST, IUAG.POLICY_CATG_CD,
                                 IPPO.PROJECT_CD || IUAG.PRODUCT_CD V_PPS_CD,
                                 IUAG.LIFE_PREMIUM, IUAG.RISK_DATE,
                                 IPPO.INS_TP_CD
                            FROM INS_P_PROPOSAL IPPO,
                                 INS_P_PERSONAL IPPE,
                                 INS_UW_ACCPT_GEN IUAG,
                                 HRM_AGENT HA,
                                 INS_PAY_MODE IPM
                           WHERE IPPO.PGID = P_PGID
                             AND IPPO.PGID = IPPE.PGID
                             AND IPPO.PGID = IUAG.PGID
                             AND IPPO.AGENT_ID = HA.AGENT_ID
                             AND IPPE.PARTY_CD = DECODE (V_POLICY_GROUP, '03', '02', '03')
                             AND IPPE.SL_NO = 1
                             AND IPM.PAY_MODE_CD = IUAG.PAY_MODE_CD) P,
                         (SELECT SUM (DECODE (B.REB_EXT, 'b', B.PREMIUM)
                                     ) BEN_PREMIUM,
                                 SUM (DECODE (B.REB_EXT, 'p', B.PREMIUM)
                                     ) PRO_PREMIUM,
                                 SUM (DECODE (B.REB_EXT, 'e', B.PREMIUM)
                                     ) SUM_REBATE_EXTRA
                            FROM (SELECT SUM (X.PREMIUM) PREMIUM, 'b' REB_EXT
                                    FROM INS_UW_ACCPT_SUPP_BEN X
                                   WHERE X.PGID = P_PGID
                                  UNION ALL
                                  SELECT SUM (Y.PREMIUM) PREMIUM, 'p' REB_EXT
                                    FROM INS_UW_ACCPT_SUPP_PRD Y
                                   WHERE Y.PGID = P_PGID
                                  UNION ALL
                                  SELECT SUM (Z.REBATE_EXTRA_AMT) PREMIUM,
                                         'e' REB_EXT
                                    FROM INS_UW_ACCPT_REBATE_EXTRA Z
                                   WHERE Z.PGID = P_PGID
                                     AND NVL (Z.REBATE_EXTRA, '1') = '1') B) S ;


               SELECT HA.OFFICE_CD
                 INTO V_OFFICE_CD
                 FROM HRM_AGENT HA, INS_P_PROPOSAL IPP
                WHERE HA.AGENT_ID = IPP.AGENT_ID AND IPP.PGID = P_PGID;

               UPDATE INS_UNACCPTED_POLICY
                  SET STATUS = V_ACCPT_STATUS,
                      U_USR = P_USER,
                      U_DT = SYSDATE
                WHERE PGID = P_PGID AND STATUS = '2';

               IF V_ACCPT_STATUS = 1
               THEN
                  UPDATE INS_UW_ACCPT
                     SET ACCEPTANCE_FLAG = '1',
                         REMARKS = 'Accepted'
                   WHERE PGID = P_PGID;
               END IF;


               UPDATE INS_UW_ACCPT
                  SET ACCEPT_DT = TRUNC (SYSDATE),
                      U_USR = P_USER,
                      U_DT = SYSDATE
                WHERE PGID = P_PGID;
            END IF;
         END IF;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Error in pro_uw_data_prep: ' || SQLERRM;
   END PRO_UW_DATA_PREP;

   FUNCTION FUN_PRE_CLIENT_INFO (
      P_NAME        VARCHAR2,
      P_DOB         DATE,
      P_FATHER_NM   VARCHAR2,
      P_MOTHER_NM   VARCHAR2,
      P_MOBILE_NO   VARCHAR2,
      P_NID_NO      VARCHAR2,
      P_TIN_NO      VARCHAR2
   )
      RETURN PRE_CLIENT_INFO_TAB PIPELINED
   AS
      L_TAB   PRE_CLIENT_INFO_ROW;
   BEGIN
      FOR I IN (SELECT   PR.POLICY_NO, PR.PROPOSAL_NO, P.PARTY_CD,
                         P.PARTY_NAME, P.DOB, P.FATHER_NAME, P.MOTHER_NAME,
                         P.NID, P.TIN, A.MOBILE_NO,
                         (A.P_ADDRESS_1 || ' ' || A.P_ADDRESS_2) ADDRESS
                    FROM INS_P_PROPOSAL PR, INS_P_PERSONAL P,
                         INS_P_ADDRESS A
                   WHERE PR.PGID = P.PGID
                     AND P.PGID = A.PGID
                     AND P.PARTY_CD = A.PARTY_CD
                     AND P.PARTY_ID = A.PARTY_ID
                     AND P.PARTY_CD IN ('02', '03')
                     AND (   (    UPPER (P.PARTY_NAME) LIKE
                                                          '%' || P_NAME || '%'
                              AND P.DOB = P_DOB
                              AND UPPER (P.FATHER_NAME) LIKE
                                                     '%' || P_FATHER_NM || '%'
                              AND UPPER (P.MOTHER_NAME) LIKE
                                                     '%' || P_MOTHER_NM || '%'
                             )
                          OR (   P.NID = P_NID_NO
                              OR P.TIN = P_TIN_NO
                              OR A.MOBILE_NO = P_MOBILE_NO
                             )
                         )
                ORDER BY P.PARTY_CD)
      LOOP
         L_TAB.PRE_PARTY_CD := I.PARTY_CD;
         L_TAB.PRE_POLICY_NO := I.POLICY_NO;
         L_TAB.PRE_PROPOSAL_NO := I.PROPOSAL_NO;
         L_TAB.CLIENT_NM := I.PARTY_NAME;
         L_TAB.DOB := I.DOB;
         L_TAB.FATHER_NM := I.FATHER_NAME;
         L_TAB.MOTHER_NM := I.MOTHER_NAME;
         L_TAB.ADDRESS := I.ADDRESS;
         L_TAB.MOBILE_NO := I.MOBILE_NO;
         L_TAB.NID_NO := I.NID;
         L_TAB.TIN_NO := I.TIN;
         PIPE ROW (L_TAB);
      END LOOP;

      RETURN;
   END;


   PROCEDURE PRO_PROPOSAL_DATA_LOAD (
      P_PGID          INS_P_PROPOSAL.PGID%TYPE,
      P_ERROR   OUT   VARCHAR2
   )
   IS
      V_STATEMENT   VARCHAR2 (6000);
      V_RTN         NUMBER;
   BEGIN
      V_STATEMENT := 'TRUNCATE TABLE temp_ins_proposal_chk';

      EXECUTE IMMEDIATE (V_STATEMENT);

      V_STATEMENT :=
            'INSERT INTO temp_ins_proposal_chk

SELECT *

FROM (SELECT pgid, ''ins_p_proposal'' FORM_BLK_NM, ''ins_p_proposal'' TABLE_NM

, COLUMN_NM, rownum FORM_ITEM_NO

, (CASE WHEN column_nm = ''PROPOSAL_NO'' then ''Proposal No''

WHEN column_nm = ''D_PROPOSAL_NO'' then ''Proposal No''

WHEN column_nm = ''PROPOSAL_DT'' then ''Proposal Date''

WHEN column_nm = ''COMM_DT'' then ''Comm. Date''

WHEN column_nm = ''ASSURANCE_TYPE'' then ''Assurance Type''

WHEN column_nm = ''ASSURANCE_TP_NM'' then ''Assurance Type''

WHEN column_nm = ''AGENT_ID'' then ''Agent ID''

WHEN column_nm = ''SERVICING_OFFICE'' then ''Servicing Office''

WHEN column_nm = ''POLICY_CATG_CD'' then ''Policy Category''

WHEN column_nm = ''POLICY_CATG_NM'' then ''Policy Category''

WHEN column_nm = ''PROJECT_CD'' then ''Project Code''

WHEN column_nm = ''PROJECT_NM'' then ''Project Name''

ELSE NULL

end) FORM_ITEM_LBL

, COLUMN_VAL

FROM (SELECT p.pgid, to_char(P.proposal_dt, ''DD-MON-RRRR'') proposal_dt, p.assurance_type,

(CASE

WHEN p.assurance_type = ''1''

THEN ''Single Policy''

WHEN p.assurance_type = ''2''

THEN ''Joint Policy''

WHEN p.assurance_type = ''3''

THEN ''Child Protection Policy''

ELSE NULL

END

) assurance_tp_nm,

to_char(p.comm_dt, ''DD-MON-RRRR'') comm_dt,

LTRIM (SUBSTR (p.proposal_no, 1, 8), 0)

|| ''-''

|| SUBSTR (p.proposal_no, 9, 4)

|| ''-''

|| SUBSTR (p.proposal_no, 13, 4) d_proposal_no,

p.agent_id, p.servicing_office, p.policy_catg_cd, c.policy_catg_nm,

p.project_cd, j.project_nm

FROM ins_p_proposal p, ins_policy_category c, ins_project j

WHERE p.pgid = '''
         || P_PGID
         || '''

AND p.policy_catg_cd = c.policy_catg_cd

AND p.project_cd = j.project_cd

)

UNPIVOT INCLUDE NULLS

(COLUMN_VAL FOR COLUMN_NM

IN ( d_proposal_no

,proposal_dt

,comm_dt

,assurance_type

,assurance_tp_nm

,agent_id

,servicing_office

,policy_catg_cd

,policy_catg_nm

,project_cd

,project_nm

)

))';


      EXECUTE IMMEDIATE V_STATEMENT;

      COMMIT;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := SQLERRM || '=====';
   END PRO_PROPOSAL_DATA_LOAD;

   PROCEDURE PRO_DOUBLE_AGE_PREM_RATE_PREM (
      P_PRODUCT_CD     IN       INS_PRODUCT.PRODUCT_CD%TYPE,
      P_TERM           IN       INS_P_SUMMERY.TERM%TYPE,
      P_MIN_AGE        IN       INS_P_SUMMERY.AGE%TYPE,
      P_MAX_AGE        IN       INS_P_SUMMERY.AGE%TYPE,
      P_PREMIUM_RATE   OUT      INS_PRODUCT_DEFN.RATE%TYPE,
      P_ERROR          OUT      VARCHAR2
   )
   IS
      V_MAX_PREMIUM_RATE   INS_PRODUCT_DEFN.RATE%TYPE;
      V_MIN_PREMIUM_RATE   INS_PRODUCT_DEFN.RATE%TYPE;
      V_MIN_AGE            NUMBER (3);

   BEGIN
      BEGIN
         SELECT D.RATE
           INTO V_MAX_PREMIUM_RATE
           FROM INS_PRODUCT_DEFN D
          WHERE D.PRODUCT_CD = P_PRODUCT_CD
            AND D.TERM = P_TERM
            AND D.AGE = P_MAX_AGE;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            BEGIN
               SELECT MIN (AGE)
                 INTO V_MIN_AGE
                 FROM INS_PRODUCT_DEFN
                WHERE PRODUCT_CD = P_PRODUCT_CD AND TERM = P_TERM;

               IF P_MAX_AGE < V_MIN_AGE
               THEN
                  SELECT D.RATE
                    INTO V_MAX_PREMIUM_RATE
                    FROM INS_PRODUCT_DEFN D
                   WHERE D.PRODUCT_CD = P_PRODUCT_CD
                     AND TERM = P_TERM
                     AND AGE = V_MIN_AGE;
               END IF;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  P_ERROR := 'Invalid Product Rate';
               WHEN OTHERS
               THEN
                  P_ERROR := 'Invalid Product Rate';
            END;
      END;


      BEGIN
         SELECT D.SECOND_AGE_RATE
           INTO V_MIN_PREMIUM_RATE
           FROM INS_PRODUCT_DEFN D
          WHERE D.PRODUCT_CD = P_PRODUCT_CD
            AND D.TERM = P_TERM
            AND D.AGE = P_MIN_AGE;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            BEGIN
               SELECT MIN (AGE)
                 INTO V_MIN_AGE
                 FROM INS_PRODUCT_DEFN
                WHERE PRODUCT_CD = P_PRODUCT_CD AND TERM = P_TERM;

               IF P_MIN_AGE < V_MIN_AGE
               THEN
                  SELECT D.SECOND_AGE_RATE
                    INTO V_MIN_PREMIUM_RATE
                    FROM INS_PRODUCT_DEFN D
                   WHERE D.PRODUCT_CD = P_PRODUCT_CD
                     AND TERM = P_TERM
                     AND AGE = P_MIN_AGE;
               END IF;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  P_ERROR := 'Invalid Product Rate';
               WHEN OTHERS
               THEN
                  P_ERROR := 'Invalid Product Rate';
            END;
      END;

      P_PREMIUM_RATE := V_MAX_PREMIUM_RATE + V_MIN_PREMIUM_RATE;
   END;

   PROCEDURE PRO_PREMIUM_RATE (
      P_PGID        IN       INS_P_PROPOSAL.PGID%TYPE,
      P_PREM_RATE   OUT      NUMBER,
      P_ERROR       OUT      VARCHAR2
   )
   IS
      V_PREMIUM_RATE         INS_PRODUCT_DEFN.RATE%TYPE;
      V_CAL_PARA             INS_PRODUCT.CAL_PARA%TYPE;
      V_MIN_AGE              NUMBER (3)                                 := 0;
      V_MAX_AGE              NUMBER (3)                                 := 0;
      V_AGE                  NUMBER (3)                                 := 0;
      V_AGE_AT_ENTRY         NUMBER (3)                                 := 0;
      V_SECOND_AGE_RATE_ST   INS_PRODUCT_DEFN.SECOND_AGE_RATE_ST%TYPE;
      V_POLICY_TP_CD         INS_PRODUCT.POLICY_TP_CD%TYPE;
      V_PRODUCT_CD           INS_PRODUCT.PRODUCT_CD%TYPE;
      V_TERM                 INS_P_BASIC.TERM%TYPE;
   BEGIN
      SELECT PRODUCT_CD, TERM, AGE
        INTO V_PRODUCT_CD, V_TERM, V_AGE_AT_ENTRY
        FROM INS_P_BASIC
       WHERE PGID = P_PGID;


      SELECT D.RATE, P.CAL_PARA, D.SECOND_AGE_RATE_ST
        INTO V_PREMIUM_RATE, V_CAL_PARA, V_SECOND_AGE_RATE_ST
        FROM INS_PRODUCT_DEFN D, INS_PRODUCT P
       WHERE D.PRODUCT_CD = V_PRODUCT_CD
         AND D.TERM = V_TERM
         AND D.AGE = V_AGE_AT_ENTRY
         AND D.PRODUCT_CD = P.PRODUCT_CD;

      PRO_CLIENT_AGE (P_PGID            => P_PGID,
                      P_PRODUCT_CD      => V_PRODUCT_CD,
                      P_AGE             => V_AGE,
                      P_MIN_AGE         => V_MIN_AGE,
                      P_MAX_AGE         => V_MAX_AGE
                     );

      BEGIN
         SELECT P.POLICY_TP_CD
           INTO V_POLICY_TP_CD
           FROM INS_PRODUCT P
          WHERE P.PRODUCT_CD = V_PRODUCT_CD;
      EXCEPTION
         WHEN OTHERS
         THEN
            P_ERROR := 'Policy type not found.';
      END;


      IF V_POLICY_TP_CD = '05' AND V_SECOND_AGE_RATE_ST = '1'
      THEN

         PRO_DOUBLE_AGE_PREM_RATE_PREM (P_PRODUCT_CD        => V_PRODUCT_CD,
                                        P_TERM              => V_TERM,
                                        P_MIN_AGE           => V_MIN_AGE,
                                        P_MAX_AGE           => V_MAX_AGE,
                                        P_PREMIUM_RATE      => V_PREMIUM_RATE,
                                        P_ERROR             => P_ERROR
                                       );

         IF P_ERROR IS NULL
         THEN
            P_PREM_RATE := V_PREMIUM_RATE;
         END IF;
      ELSE
         P_PREM_RATE := V_PREMIUM_RATE;
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         BEGIN
            SELECT MIN (AGE)
              INTO V_MIN_AGE
              FROM INS_PRODUCT_DEFN
             WHERE PRODUCT_CD = V_PRODUCT_CD AND TERM = V_TERM;

            IF V_AGE_AT_ENTRY < V_MIN_AGE
            THEN
               SELECT D.RATE, P.CAL_PARA, D.SECOND_AGE_RATE_ST
                 INTO V_PREMIUM_RATE, V_CAL_PARA, V_SECOND_AGE_RATE_ST
                 FROM INS_PRODUCT_DEFN D, INS_PRODUCT P
                WHERE D.PRODUCT_CD = V_PRODUCT_CD
                  AND TERM = V_TERM
                  AND AGE = V_MIN_AGE
                  AND D.PRODUCT_CD = P.PRODUCT_CD;


               IF V_POLICY_TP_CD = '05' AND V_SECOND_AGE_RATE_ST = '1'
               THEN

                  PRO_DOUBLE_AGE_PREM_RATE_PREM
                                           (P_PRODUCT_CD        => V_PRODUCT_CD,
                                            P_TERM              => V_TERM,
                                            P_MIN_AGE           => V_MIN_AGE,
                                            P_MAX_AGE           => V_MAX_AGE,
                                            P_PREMIUM_RATE      => V_PREMIUM_RATE,
                                            P_ERROR             => P_ERROR
                                           );

                  IF P_ERROR IS NULL
                  THEN
                     P_PREM_RATE := V_PREMIUM_RATE;
                  END IF;
               ELSE
                  P_PREM_RATE := V_PREMIUM_RATE;
               END IF;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               P_ERROR := 'Invalid Product Rate';
            WHEN OTHERS
            THEN
               P_ERROR := 'Invalid Product Rate';
         END;
   END PRO_PREMIUM_RATE;


   PROCEDURE PRO_PREP_CLIENT_INFO (
      P_PGID       IN       INS_P_PERSONAL.PGID%TYPE,
      P_PARTY_CD   IN       INS_P_PERSONAL.PARTY_CD%TYPE,
      P_PARTY_ID   IN       INS_P_PERSONAL.PARTY_ID%TYPE,
      P_USER       IN       VARCHAR2,
      P_ERROR      OUT      VARCHAR2
   )
   IS
      V_ASSURANCE_TYPE   INS_P_PROPOSAL.ASSURANCE_TYPE%TYPE;
   BEGIN
      SELECT ASSURANCE_TYPE
        INTO V_ASSURANCE_TYPE
        FROM INS_P_PROPOSAL
       WHERE PGID = P_PGID;

      INSERT INTO INS_P_PERSONAL
                  (PGID, PARTY_CD, PARTY_ID, SL_NO, PARTY_NAME, FATHER_NAME,
                   MOTHER_NAME, SEX_CD, DOB, AGE_DOCU_CD, POB, COUNTRY_CD,
                   MARITAL_STATUS, CHILDREN_NO, IDENTIFICATION_MARK,
                   EDU_QUAL_CD, EDU_DOCU_CD, OCCU_CD, EMPLOYER_NAME,
                   DESIGNATION, ANNUAL_INCOME, INCOME_SOURCE, TIN,
                   OCCU_CLASS_CD, OCCU_SCOPE_CD, OCCU_BASE_CD, NID, I_USR,
                   I_DT)
         SELECT PGID, '02', PARTY_ID, SL_NO, PARTY_NAME, FATHER_NAME,
                MOTHER_NAME, SEX_CD, DOB, AGE_DOCU_CD, POB, COUNTRY_CD,
                MARITAL_STATUS, CHILDREN_NO, IDENTIFICATION_MARK, EDU_QUAL_CD,
                EDU_DOCU_CD, OCCU_CD, EMPLOYER_NAME, DESIGNATION,
                ANNUAL_INCOME, INCOME_SOURCE, TIN, OCCU_CLASS_CD,
                OCCU_SCOPE_CD, OCCU_BASE_CD, NID, P_USER, SYSDATE
           FROM INS_P_PERSONAL
          WHERE PGID = P_PGID
            AND PARTY_CD = P_PARTY_CD
            AND PARTY_ID = P_PARTY_ID;

      IF V_ASSURANCE_TYPE <> '3'
      THEN
         INSERT INTO INS_P_PERSONAL
                     (PGID, PARTY_CD, PARTY_ID, SL_NO, PARTY_NAME,
                      FATHER_NAME, MOTHER_NAME, SEX_CD, DOB, AGE_DOCU_CD,
                      POB, COUNTRY_CD, MARITAL_STATUS, CHILDREN_NO,
                      IDENTIFICATION_MARK, EDU_QUAL_CD, EDU_DOCU_CD, OCCU_CD,
                      EMPLOYER_NAME, DESIGNATION, ANNUAL_INCOME,
                      INCOME_SOURCE, TIN, OCCU_CLASS_CD, OCCU_SCOPE_CD,
                      OCCU_BASE_CD, NID, I_USR, I_DT)
            SELECT PGID, '03', PARTY_ID, SL_NO, PARTY_NAME, FATHER_NAME,
                   MOTHER_NAME, SEX_CD, DOB, AGE_DOCU_CD, POB, COUNTRY_CD,
                   MARITAL_STATUS, CHILDREN_NO, IDENTIFICATION_MARK,
                   EDU_QUAL_CD, EDU_DOCU_CD, OCCU_CD, EMPLOYER_NAME,
                   DESIGNATION, ANNUAL_INCOME, INCOME_SOURCE, TIN,
                   OCCU_CLASS_CD, OCCU_SCOPE_CD, OCCU_BASE_CD, NID, P_USER,
                   SYSDATE
              FROM INS_P_PERSONAL
             WHERE PGID = P_PGID
               AND PARTY_CD = P_PARTY_CD
               AND PARTY_ID = P_PARTY_ID;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := SQLERRM;
   END PRO_PREP_CLIENT_INFO;


   PROCEDURE PRO_UPD_CLIENT_INFO (
      P_PGID       IN       INS_P_PERSONAL.PGID%TYPE,
      P_PARTY_CD   IN       INS_P_PERSONAL.PARTY_CD%TYPE,
      P_PARTY_ID   IN       INS_P_PERSONAL.PARTY_ID%TYPE,
      P_USER       IN       VARCHAR2,
      P_ERROR      OUT      VARCHAR2
   )
   IS
      V_ASSURANCE_TYPE   INS_P_PROPOSAL.ASSURANCE_TYPE%TYPE;

      CURSOR CUR_CLIENT
      IS
         SELECT PGID, PARTY_CD, PARTY_ID, SL_NO, PARTY_NAME, FATHER_NAME,
                MOTHER_NAME, SEX_CD, DOB, AGE_DOCU_CD, POB, COUNTRY_CD,
                MARITAL_STATUS, CHILDREN_NO, IDENTIFICATION_MARK,
                EDU_QUAL_CD, EDU_DOCU_CD, OCCU_CD, EMPLOYER_NAME,
                DESIGNATION, ANNUAL_INCOME, INCOME_SOURCE, TIN,
                OCCU_CLASS_CD, OCCU_SCOPE_CD, OCCU_BASE_CD, NID, P_USER,
                SYSDATE
           FROM INS_P_PERSONAL
          WHERE PGID = P_PGID
            AND PARTY_CD = P_PARTY_CD
            AND PARTY_ID = P_PARTY_ID;
   BEGIN
      SELECT ASSURANCE_TYPE
        INTO V_ASSURANCE_TYPE
        FROM INS_P_PROPOSAL
       WHERE PGID = P_PGID;

      FOR REC IN CUR_CLIENT
      LOOP
         UPDATE INS_P_PERSONAL
            SET PARTY_NAME = REC.PARTY_NAME,
                FATHER_NAME = REC.FATHER_NAME,
                MOTHER_NAME = REC.MOTHER_NAME,
                SEX_CD = REC.SEX_CD,
                DOB = REC.DOB,
                AGE_DOCU_CD = REC.AGE_DOCU_CD,
                POB = REC.POB,
                COUNTRY_CD = REC.COUNTRY_CD,
                MARITAL_STATUS = REC.MARITAL_STATUS,
                CHILDREN_NO = REC.CHILDREN_NO,
                IDENTIFICATION_MARK = REC.IDENTIFICATION_MARK,
                EDU_QUAL_CD = REC.EDU_QUAL_CD,
                EDU_DOCU_CD = REC.EDU_DOCU_CD,
                OCCU_CD = REC.OCCU_CD,
                EMPLOYER_NAME = REC.EMPLOYER_NAME,
                DESIGNATION = REC.DESIGNATION,
                ANNUAL_INCOME = REC.ANNUAL_INCOME,
                INCOME_SOURCE = REC.INCOME_SOURCE,
                TIN = REC.TIN,
                OCCU_CLASS_CD = REC.OCCU_CLASS_CD,
                OCCU_SCOPE_CD = REC.OCCU_SCOPE_CD,
                OCCU_BASE_CD = REC.OCCU_BASE_CD,
                NID = REC.NID,
                U_USR = P_USER,
                U_DT = SYSDATE
          WHERE PGID = P_PGID AND PARTY_CD = '02' AND PARTY_ID = P_PARTY_ID;

         IF V_ASSURANCE_TYPE <> '3'
         THEN
            UPDATE INS_P_PERSONAL
               SET PARTY_NAME = REC.PARTY_NAME,
                   FATHER_NAME = REC.FATHER_NAME,
                   MOTHER_NAME = REC.MOTHER_NAME,
                   SEX_CD = REC.SEX_CD,
                   DOB = REC.DOB,
                   AGE_DOCU_CD = REC.AGE_DOCU_CD,
                   POB = REC.POB,
                   COUNTRY_CD = REC.COUNTRY_CD,
                   MARITAL_STATUS = REC.MARITAL_STATUS,
                   CHILDREN_NO = REC.CHILDREN_NO,
                   IDENTIFICATION_MARK = REC.IDENTIFICATION_MARK,
                   EDU_QUAL_CD = REC.EDU_QUAL_CD,
                   EDU_DOCU_CD = REC.EDU_DOCU_CD,
                   OCCU_CD = REC.OCCU_CD,
                   EMPLOYER_NAME = REC.EMPLOYER_NAME,
                   DESIGNATION = REC.DESIGNATION,
                   ANNUAL_INCOME = REC.ANNUAL_INCOME,
                   INCOME_SOURCE = REC.INCOME_SOURCE,
                   TIN = REC.TIN,
                   OCCU_CLASS_CD = REC.OCCU_CLASS_CD,
                   OCCU_SCOPE_CD = REC.OCCU_SCOPE_CD,
                   OCCU_BASE_CD = REC.OCCU_BASE_CD,
                   NID = REC.NID,
                   U_USR = P_USER,
                   U_DT = SYSDATE
             WHERE PGID = P_PGID AND PARTY_CD = '03' AND PARTY_ID = P_PARTY_ID;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := SQLERRM;
   END PRO_UPD_CLIENT_INFO;




   PROCEDURE PRO_PREP_CLIENT_ADD (
      P_PGID       IN       INS_P_PERSONAL.PGID%TYPE,
      P_PARTY_CD   IN       INS_P_PERSONAL.PARTY_CD%TYPE,
      P_PARTY_ID   IN       INS_P_PERSONAL.PARTY_ID%TYPE,
      P_USER       IN       VARCHAR2,
      P_ERROR      OUT      VARCHAR2
   )
   IS
      V_ASSURANCE_TYPE   INS_P_PROPOSAL.ASSURANCE_TYPE%TYPE;
   BEGIN
      SELECT ASSURANCE_TYPE
        INTO V_ASSURANCE_TYPE
        FROM INS_P_PROPOSAL
       WHERE PGID = P_PGID;

      INSERT INTO INS_P_ADDRESS
                  (PGID, PARTY_CD, PARTY_ID, P_ADDRESS_1, P_COUNTRY_CD,
                   P_DIVISION_CD, P_DISTRICT_CD, P_THANA_CD, P_PO_CD,
                   P_PHONE_NO, T_ADDRESS, T_COUNTRY_CD, T_DIVISION_CD,
                   T_DISTRICT_CD, T_THANA_CD, T_PO_CD, T_PHONE_NO, MOBILE_NO,
                   FAX_NO, E_MAIL)
         SELECT D.PGID, '02', D.PARTY_ID, D.P_ADDRESS_1, D.P_COUNTRY_CD,
                D.P_DIVISION_CD, D.P_DISTRICT_CD, D.P_THANA_CD, D.P_PO_CD,
                D.P_PHONE_NO, D.T_ADDRESS, D.T_COUNTRY_CD, D.T_DIVISION_CD,
                D.T_DISTRICT_CD, D.T_THANA_CD, D.T_PO_CD, D.T_PHONE_NO,
                D.MOBILE_NO, D.FAX_NO, D.E_MAIL
           FROM INS_P_ADDRESS D
          WHERE D.PGID = P_PGID
            AND D.PARTY_CD = P_PARTY_CD
            AND D.PARTY_ID = P_PARTY_ID;

      IF V_ASSURANCE_TYPE <> '3'
      THEN
         INSERT INTO INS_P_ADDRESS
                     (PGID, PARTY_CD, PARTY_ID, P_ADDRESS_1, P_COUNTRY_CD,
                      P_DIVISION_CD, P_DISTRICT_CD, P_THANA_CD, P_PO_CD,
                      P_PHONE_NO, T_ADDRESS, T_COUNTRY_CD, T_DIVISION_CD,
                      T_DISTRICT_CD, T_THANA_CD, T_PO_CD, T_PHONE_NO,
                      MOBILE_NO, FAX_NO, E_MAIL)
            SELECT D.PGID, '03', D.PARTY_ID, D.P_ADDRESS_1, D.P_COUNTRY_CD,
                   D.P_DIVISION_CD, D.P_DISTRICT_CD, D.P_THANA_CD, D.P_PO_CD,
                   D.P_PHONE_NO, D.T_ADDRESS, D.T_COUNTRY_CD,
                   D.T_DIVISION_CD, D.T_DISTRICT_CD, D.T_THANA_CD, D.T_PO_CD,
                   D.T_PHONE_NO, D.MOBILE_NO, D.FAX_NO, D.E_MAIL
              FROM INS_P_ADDRESS D
             WHERE D.PGID = P_PGID
               AND D.PARTY_CD = P_PARTY_CD
               AND D.PARTY_ID = P_PARTY_ID;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := SQLERRM;
   END PRO_PREP_CLIENT_ADD;


   PROCEDURE PRO_UPD_CLIENT_ADD (
      P_PGID       IN       INS_P_PERSONAL.PGID%TYPE,
      P_PARTY_CD   IN       INS_P_PERSONAL.PARTY_CD%TYPE,
      P_PARTY_ID   IN       INS_P_PERSONAL.PARTY_ID%TYPE,
      P_USER       IN       VARCHAR2,
      P_ERROR      OUT      VARCHAR2
   )
   IS
      V_ASSURANCE_TYPE   INS_P_PROPOSAL.ASSURANCE_TYPE%TYPE;

      CURSOR CUR_ADD
      IS
         SELECT D.P_ADDRESS_1, D.P_COUNTRY_CD, D.P_DIVISION_CD,
                D.P_DISTRICT_CD, D.P_THANA_CD, D.P_PO_CD, D.P_PHONE_NO,
                D.T_ADDRESS, D.T_COUNTRY_CD, D.T_DIVISION_CD,
                D.T_DISTRICT_CD, D.T_THANA_CD, D.T_PO_CD, D.T_PHONE_NO,
                D.MOBILE_NO, D.FAX_NO, D.E_MAIL
           FROM INS_P_ADDRESS D
          WHERE D.PGID = P_PGID
            AND D.PARTY_CD = P_PARTY_CD
            AND D.PARTY_ID = P_PARTY_ID;
   BEGIN
      SELECT ASSURANCE_TYPE
        INTO V_ASSURANCE_TYPE
        FROM INS_P_PROPOSAL
       WHERE PGID = P_PGID;

      FOR REC IN CUR_ADD
      LOOP
         UPDATE INS_P_ADDRESS
            SET P_ADDRESS_1 = REC.P_ADDRESS_1,
                P_COUNTRY_CD = REC.P_COUNTRY_CD,
                P_DIVISION_CD = REC.P_DIVISION_CD,
                P_DISTRICT_CD = REC.P_DISTRICT_CD,
                P_THANA_CD = REC.P_THANA_CD,
                P_PO_CD = REC.P_PO_CD,
                P_PHONE_NO = REC.P_PHONE_NO,
                T_ADDRESS = REC.T_ADDRESS,
                T_COUNTRY_CD = REC.T_COUNTRY_CD,
                T_DIVISION_CD = REC.T_DIVISION_CD,
                T_DISTRICT_CD = REC.T_DISTRICT_CD,
                T_THANA_CD = REC.T_THANA_CD,
                T_PO_CD = REC.T_PO_CD,
                T_PHONE_NO = REC.T_PHONE_NO,
                MOBILE_NO = REC.MOBILE_NO,
                FAX_NO = REC.FAX_NO,
                E_MAIL = REC.E_MAIL,
                U_USR = P_USER,
                U_DT = SYSDATE
          WHERE PGID = P_PGID AND PARTY_CD = '02' AND PARTY_ID = P_PARTY_ID;

         IF V_ASSURANCE_TYPE <> '3'
         THEN
            UPDATE INS_P_ADDRESS
               SET P_ADDRESS_1 = REC.P_ADDRESS_1,
                   P_COUNTRY_CD = REC.P_COUNTRY_CD,
                   P_DIVISION_CD = REC.P_DIVISION_CD,
                   P_DISTRICT_CD = REC.P_DISTRICT_CD,
                   P_THANA_CD = REC.P_THANA_CD,
                   P_PO_CD = REC.P_PO_CD,
                   P_PHONE_NO = REC.P_PHONE_NO,
                   T_ADDRESS = REC.T_ADDRESS,
                   T_COUNTRY_CD = REC.T_COUNTRY_CD,
                   T_DIVISION_CD = REC.T_DIVISION_CD,
                   T_DISTRICT_CD = REC.T_DISTRICT_CD,
                   T_THANA_CD = REC.T_THANA_CD,
                   T_PO_CD = REC.T_PO_CD,
                   T_PHONE_NO = REC.T_PHONE_NO,
                   MOBILE_NO = REC.MOBILE_NO,
                   FAX_NO = REC.FAX_NO,
                   E_MAIL = REC.E_MAIL,
                   U_USR = P_USER,
                   U_DT = SYSDATE
             WHERE PGID = P_PGID AND PARTY_CD = '03' AND PARTY_ID = P_PARTY_ID;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := SQLERRM;
   END PRO_UPD_CLIENT_ADD;
END PKG_NEWBUSINESS_NEW;
/


--
-- PKG_OFFICE_CASH_BAL  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_office_cash_bal
IS
   v_trans_date   DATE;

   FUNCTION fun_off_cash_bal (p_trans_date DATE, p_cost_center VARCHAR2)
      RETURN office_bal_dtl_row_tab PIPELINED
   AS
      l_tab   office_bal_dtl_row;
   BEGIN
      v_trans_date := p_trans_date;

      --v_trans_date := TO_DATE ('10-JUL-2017');
      FOR r IN
         (                              --Recive part. Here 'R' Means Receive
          SELECT cost_center, glac_sl_no, ins_tp_cd, 'R' trans_type,
                 NULL br_cd, NULL acc_tp, NULL acc_no, trans_amt
            FROM (SELECT   cost_center, ins_tp_cd, a.glac_sl_no,
                           SUM (trans_amt) trans_amt
                      FROM (SELECT m.cost_center, vouch_cd, vouch_dt,
                                   NVL (dr.divert_to_glac_sl_no,
                                        d.glac_sl_no
                                       ) glac_sl_no,
                                   d.trans_amt, d.dr_cr, ins_tp_cd,
                                   m.vouch_no
                              FROM acc_gl_trans_mst m,
                                   acc_gl_trans_dtl d,
                                   acc_cash_book_divert dr
                             WHERE m.office_cd = d.office_cd
                               AND m.vouch_no = d.vouch_no
                               AND (   (    vouch_cd IN ('01', '03')
                                        AND d.dr_cr = 'C'
                                       )
                                    OR (    vouch_cd = '04'
                                        AND d.dr_cr = 'C'
                                        AND d.glac_sl_no LIKE '1%'
                                       )
                                   )
                               AND vouch_dt = v_trans_date
                               AND m.cost_center =
                                            NVL (p_cost_center, m.cost_center)
                               AND d.glac_sl_no = dr.glac_sl_no(+)
                            UNION ALL
                            SELECT m.cost_center, vouch_cd, vouch_dt,
                                   NVL (dr.divert_to_glac_sl_no,
                                        d.glac_sl_no
                                       ) glac_sl_no,
                                   d.trans_amt * (-1) trans_amt, d.dr_cr,
                                   ins_tp_cd, m.vouch_no
                              FROM acc_gl_trans_mst m,
                                   acc_gl_trans_dtl d,
                                   acc_cash_book_divert dr
                             WHERE m.office_cd = d.office_cd
                               AND m.vouch_no = d.vouch_no
                               AND vouch_cd = '05'
                               AND d.dr_cr = 'D'
                               AND narration LIKE 'Invalid%'
                               AND vouch_dt = v_trans_date
                               AND m.cost_center =
                                            NVL (p_cost_center, m.cost_center)
                               AND EXISTS (
                                      SELECT 1
                                        FROM acc_gl_trans_mst
                                       WHERE vouch_no = m.source_vouch_no
                                         AND office_cd = '07001'
                                         AND vouch_dt = v_trans_date
                                         AND (   (    vouch_cd IN
                                                                 ('01', '03')
                                                  AND d.dr_cr = 'D'
                                                 )
                                              OR (    vouch_cd = '04'
                                                  AND d.dr_cr = 'D'
                                                  AND d.glac_sl_no LIKE '1%'
                                                 )
                                             ))
                               AND d.glac_sl_no = dr.glac_sl_no(+)) a,
                           acc_gl_coa c
                     WHERE a.glac_sl_no = c.glac_sl_no
                  GROUP BY cost_center, ins_tp_cd, a.glac_sl_no) p
          UNION ALL                  --Withdrawal part. Here 'W' Means Receive
          SELECT   cost_center, glac_sl_no, ins_tp_cd, 'W' trans_type, br_cd,
                   acc_tp, acc_no, SUM (trans_amt) trans_amt
              FROM (SELECT cost_center, vouch_cd, vouch_dt, c.glac_sl_no,
                           trans_amt, br_cd, acc_tp, acc_no, m.ins_tp_cd,
                           account_type
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_gl_bank_acc_setup_mst c,
                           acc_gl_coa g
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND d.glac_sl_no = c.glac_sl_no
                       AND d.glac_sl_no = g.glac_sl_no
                       AND vouch_cd = '06'
                       AND account_type = 'D'
                       AND dr_cr = 'C'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                    UNION ALL
                    SELECT cost_center, vouch_cd, vouch_dt, c.glac_sl_no,
                           d.trans_amt * (-1) trans_amt, br_cd, acc_tp,
                           acc_no, m.ins_tp_cd, account_type
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_gl_bank_acc_setup_mst c,
                           acc_gl_coa g
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND d.glac_sl_no = c.glac_sl_no
                       AND d.glac_sl_no = g.glac_sl_no
                       AND vouch_cd = '05'
                       AND account_type = 'D'
                       AND dr_cr = 'D'
                       AND narration LIKE 'Invalid%'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                       AND EXISTS (
                              SELECT 1
                                FROM acc_gl_trans_mst
                               WHERE vouch_no = m.source_vouch_no
                                 AND office_cd = '07001'
                                 AND vouch_dt = v_trans_date
                                 AND vouch_cd = '06'
                                 AND d.dr_cr = 'C'))
          GROUP BY cost_center, ins_tp_cd, br_cd, acc_tp, acc_no, glac_sl_no
          UNION ALL                     --Payment part. Here 'P' Means Receive
          SELECT   cost_center, a.glac_sl_no, ins_tp_cd, 'P' trans_type,
                   NULL br_cd, NULL acc_tp, NULL acc_no,
                   SUM (trans_amt) trans_amt
              FROM (SELECT cost_center, vouch_cd, vouch_dt,
                           NVL (dr.divert_to_glac_sl_no,
                                d.glac_sl_no
                               ) glac_sl_no,
                           fun_voucher_payment_amt (m.vouch_no) trans_amt,
                           d.dr_cr, ins_tp_cd
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_cash_book_divert dr
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND vouch_cd IN ('02', '04')
                       AND d.dr_cr = 'D'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                       AND d.glac_sl_no = dr.glac_sl_no(+)
                    UNION ALL
                    SELECT cost_center, vouch_cd, vouch_dt,
                           NVL (dr.divert_to_glac_sl_no,
                                d.glac_sl_no
                               ) glac_sl_no,
                           d.trans_amt * (-1) trans_amt, d.dr_cr, ins_tp_cd
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_cash_book_divert dr
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND vouch_cd = '05'
                       AND d.dr_cr = 'C'
                       AND narration LIKE 'Invalid%'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                       AND EXISTS (
                              SELECT 1
                                FROM acc_gl_trans_mst
                               WHERE vouch_no = m.source_vouch_no
                                 AND office_cd = '07001'
                                 AND vouch_dt = v_trans_date
                                 AND vouch_cd IN ('02', '04'))
                       AND d.glac_sl_no = dr.glac_sl_no(+)) a,
                   acc_gl_coa c
             WHERE a.glac_sl_no = c.glac_sl_no
          GROUP BY cost_center, ins_tp_cd, a.glac_sl_no
          UNION ALL
          --Deposit part. Here 'D' Means Receive
          SELECT   cost_center, glac_sl_no, ins_tp_cd, 'D' trans_type, br_cd,
                   acc_tp, acc_no, SUM (trans_amt) trans_amt
              FROM (SELECT cost_center, vouch_cd, vouch_dt, c.glac_sl_no,
                           trans_amt, br_cd, acc_tp, acc_no, m.ins_tp_cd,
                           account_type
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_gl_bank_acc_setup_mst c,
                           acc_gl_coa g
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND d.glac_sl_no = c.glac_sl_no
                       AND d.glac_sl_no = g.glac_sl_no
                       AND vouch_cd = '06'
                       AND account_type = 'D'
                       AND dr_cr = 'D'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                    UNION ALL
                    SELECT cost_center, vouch_cd, vouch_dt, d.glac_sl_no,
                           d.trans_amt * (-1) trans_amt, br_cd, acc_tp,
                           acc_no, m.ins_tp_cd, account_type
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_gl_bank_acc_setup_mst c,
                           acc_gl_coa g
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND d.glac_sl_no = c.glac_sl_no
                       AND d.glac_sl_no = g.glac_sl_no
                       AND vouch_cd = '05'
                       AND account_type = 'D'
                       AND dr_cr = 'C'
                       AND narration LIKE 'Invalid%'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                       AND EXISTS (
                              SELECT 1
                                FROM acc_gl_trans_mst
                               WHERE vouch_no = m.source_vouch_no
                                 AND office_cd = '07001'
                                 AND vouch_dt = v_trans_date
                                 AND vouch_cd = '06'
                                 AND d.dr_cr = 'D'))
          GROUP BY cost_center, ins_tp_cd, br_cd, acc_tp, acc_no, glac_sl_no)
      LOOP
         l_tab.cost_center := r.cost_center;
         l_tab.ins_tp_cd := r.ins_tp_cd;
         l_tab.glac_sl_no := r.glac_sl_no;
         l_tab.trans_type := r.trans_type;
         l_tab.trans_amt := r.trans_amt;
         l_tab.br_cd := r.br_cd;
         l_tab.acc_tp := r.acc_tp;
         l_tab.acc_no := r.acc_no;
         PIPE ROW (l_tab);
      END LOOP;

      RETURN;
   END fun_off_cash_bal;

   PROCEDURE pro_cash_bal_insert (
      p_trans_date         DATE,
      p_office_cd          VARCHAR2,
      p_user               VARCHAR2,
      p_output       OUT   VARCHAR2
   )
   AS
      v_trans_id          NUMBER;
      v_opening_bal       NUMBER (15, 2);
      v_invalid_amt       NUMBER (15, 2);
      v_closing_bal       NUMBER (15, 2);
      v_pro_sl_no         NUMBER (10);
      v_process_st_time   DATE;
      v_office_count      NUMBER         := 0;
      v_office_cd         VARCHAR2 (10)  := NULL;
      v_adjusted_amt      NUMBER (15, 2);
   BEGIN
      BEGIN
                  /*SELECT TRUNC (SYSDATE) - 1, SYSDATE
         --Since this process will executed on after 12:00 PM. So v_trans_date is one day before
                  INTO   v_trans_date, v_process_st_time
                    FROM DUAL;*/
         SELECT MAX (process_date) + 1, SYSDATE
           INTO v_trans_date, v_process_st_time
           FROM acc_cash_bal_pro_log;

         IF p_trans_date IS NOT NULL
         THEN
            v_trans_date := p_trans_date;
         END IF;

         SELECT NVL (MAX (pro_sl_no), 0) + 1
           INTO v_pro_sl_no
           FROM acc_cash_bal_pro_log;

         SELECT NVL (MAX (trans_id), 0) + 1
           INTO v_trans_id
           FROM acc_cash_bal_mst;

         FOR i IN
            (SELECT   cost_center, ins_tp_cd,
                      SUM (DECODE (trans_type, 'R', trans_amt, 0)
                          ) received_amt,
                      SUM (DECODE (trans_type, 'W', trans_amt, 0)
                          ) withdraw_amt,
                      SUM (DECODE (trans_type,
                                   'P', trans_amt,
                                   0
                                  )) payment_amt,
                      SUM (DECODE (trans_type,
                                   'D', trans_amt,
                                   0
                                  )) deposit_amt
                 FROM TABLE
                          (pkg_office_cash_bal.fun_off_cash_bal (v_trans_date,
                                                                 p_office_cd
                                                                )
                          )
             GROUP BY cost_center, ins_tp_cd)
         LOOP
            SELECT SUM (fun_gl_head_opening (glac_sl_no,
                                             '07001',
                                             i.cost_center,
                                             '0',
                                             v_trans_date,
                                             i.ins_tp_cd
                                            )
                       )
              INTO v_opening_bal
              FROM acc_gl_coa
             WHERE glac_sl_no IN ('101575', '101562');

            SELECT NVL (SUM (trans_amt), 0)
              INTO v_invalid_amt
              FROM (SELECT DISTINCT a.source_vouch_no, a.trans_amt
                               FROM (SELECT m.source_vouch_no,
                                            d.trans_amt trans_amt
                                       FROM acc_gl_trans_mst m,
                                            acc_gl_trans_dtl d,
                                            acc_cash_book_divert dr
                                      WHERE m.office_cd = d.office_cd
                                        AND m.vouch_no = d.vouch_no
                                        AND vouch_cd = '05'
                                        AND d.dr_cr = 'C'
                                        AND narration LIKE 'Invalid%'
                                        AND d.glac_sl_no IN
                                                         ('101575', '101562')
                                        AND ins_tp_cd = i.ins_tp_cd
                                        AND vouch_dt = v_trans_date
                                        AND NVL (m.ledger_st, '1') = '1'
                                        AND NVL (m.payable_st, '0') = '0'
                                        AND m.cost_center = i.cost_center
                                        AND EXISTS (
                                               SELECT 1
                                                 FROM acc_gl_trans_mst
                                                WHERE vouch_no =
                                                             m.source_vouch_no
                                                  AND office_cd = '07001'
                                                  AND vouch_dt < v_trans_date)
                                        AND d.glac_sl_no = dr.glac_sl_no(+)
                                     UNION ALL
                                     SELECT m.source_vouch_no,
                                            d.trans_amt trans_amt
                                       FROM acc_gl_trans_mst m,
                                            acc_gl_trans_dtl d,
                                            acc_cash_book_divert dr
                                      WHERE m.office_cd = d.office_cd
                                        AND m.vouch_no = d.vouch_no
                                        AND vouch_cd = '05'
                                        AND d.dr_cr = 'C'
                                        AND narration LIKE 'Invalid%'
                                        AND d.glac_sl_no IN
                                                         ('101575', '101562')
                                        AND NVL (m.ledger_st, '1') = '1'
                                        AND NVL (m.payable_st, '0') = '0'
                                        AND ins_tp_cd = i.ins_tp_cd
                                        AND vouch_dt = v_trans_date
                                        AND m.cost_center = i.cost_center
                                        AND TO_NUMBER
                                                   (SUBSTR (m.source_vouch_no,
                                                            4,
                                                            4
                                                           )
                                                   ) <
                                               TO_NUMBER (TO_CHAR (SYSDATE,
                                                                   'rrrr'
                                                                  )
                                                         )
                                        AND d.glac_sl_no = dr.glac_sl_no(+)) a);

            SELECT NVL (SUM (trans_amt), 0)
              INTO v_adjusted_amt
              FROM (SELECT DISTINCT a.source_vouch_no, a.trans_amt
                               FROM (SELECT   m.source_vouch_no,
                                                SUM
                                                   (DECODE (d.dr_cr,
                                                            'D', d.trans_amt,
                                                            0
                                                           )
                                                   )
                                              - SUM (DECODE (d.dr_cr,
                                                             'C', d.trans_amt,
                                                             0
                                                            )
                                                    ) trans_amt
                                         FROM acc_gl_trans_mst m,
                                              acc_gl_trans_dtl d,
                                              acc_cash_book_divert dr
                                        WHERE m.office_cd = d.office_cd
                                          AND m.vouch_no = d.vouch_no
                                          AND vouch_cd = '05'
                                          AND d.glac_sl_no IN
                                                         ('101575', '101562')
                                          AND ins_tp_cd = i.ins_tp_cd
                                          AND vouch_dt = v_trans_date
                                          AND NVL (m.ledger_st, '1') = '1'
                                          AND NVL (m.payable_st, '0') = '0'
                                          AND NVL (m.adjustment_st, '0') = '1'
                                          AND m.cost_center = i.cost_center
                                          AND d.glac_sl_no = dr.glac_sl_no(+)
                                     GROUP BY m.source_vouch_no) a);

            v_closing_bal :=
                 (NVL (v_opening_bal, 0) + i.received_amt + i.withdraw_amt
                 )
               - (i.payment_amt + i.deposit_amt + NVL (v_invalid_amt, 0))
               + v_adjusted_amt;

            INSERT INTO acc_cash_bal_mst
                        (trans_id, cost_center, ins_tp_cd,
                         trans_date, opening_bal, invalid_amt,
                         closing_amt, i_usr, i_dt, pro_sl_no,
                         received_amt, withdraw_amt, payment_amt,
                         deposit_amt, adjustment_amt
                        )
                 VALUES (v_trans_id, i.cost_center, i.ins_tp_cd,
                         v_trans_date, v_opening_bal, v_invalid_amt,
                         v_closing_bal, p_user, SYSDATE, v_pro_sl_no,
                         i.received_amt, i.withdraw_amt, i.payment_amt,
                         i.deposit_amt, v_adjusted_amt
                        );

            INSERT INTO acc_cash_bal_dtl
                        (trans_id, glac_sl_no, trans_type, trans_amt, br_cd,
                         acc_tp, acc_no, i_usr, i_dt)
               (SELECT v_trans_id, glac_sl_no, trans_type, trans_amt, br_cd,
                       acc_tp, acc_no, p_user, SYSDATE
                  FROM TABLE
                          (pkg_office_cash_bal.fun_off_cash_bal (v_trans_date,
                                                                 p_office_cd
                                                                )
                          )
                 WHERE cost_center = i.cost_center AND ins_tp_cd = i.ins_tp_cd);

            IF v_office_count = 0
            THEN
               v_office_count := v_office_count + 1;
               v_office_cd := i.cost_center;
            ELSE
               IF v_office_cd <> i.cost_center
               THEN
                  v_office_count := v_office_count + 1;
                  v_office_cd := i.cost_center;
               END IF;
            END IF;

            v_trans_id := v_trans_id + 1;
            COMMIT;
         END LOOP;

         BEGIN
            FOR j IN (SELECT *
                        FROM acc_cash_bal_mst m
                       WHERE trans_date = v_trans_date - 1
                         AND m.cost_center = NVL (p_office_cd, m.cost_center)
                         AND NOT EXISTS (
                                SELECT 1
                                  FROM acc_cash_bal_mst
                                 WHERE trans_date = v_trans_date
                                   AND cost_center = m.cost_center
                                   AND ins_tp_cd = m.ins_tp_cd))
            LOOP
               INSERT INTO acc_cash_bal_mst
                           (trans_id, cost_center, ins_tp_cd,
                            trans_date, opening_bal, invalid_amt,
                            closing_amt, i_usr, i_dt, pro_sl_no,
                            received_amt, withdraw_amt, payment_amt,
                            deposit_amt
                           )
                    VALUES (v_trans_id, j.cost_center, j.ins_tp_cd,
                            v_trans_date, j.closing_amt, 0,
                            j.closing_amt, p_user, SYSDATE, v_pro_sl_no,
                            0, 0, 0,
                            0
                           );

               v_trans_id := v_trans_id + 1;
            END LOOP;

            COMMIT;
         END;

         p_output := NULL;
      EXCEPTION
         WHEN OTHERS
         THEN
            p_output := 'Process Not Completed Due to ' || SQLERRM || '!';
            ROLLBACK;
      END;

      IF p_office_cd IS NULL
      THEN
         INSERT INTO acc_cash_bal_pro_log
                     (process_date, pro_exe_status,
                      exe_user, no_of_office, pro_sl_no,
                      total_time_in_minutes, output_error
                     )
              VALUES (v_trans_date, CASE
                         WHEN p_output IS NULL
                            THEN '1'
                         ELSE '0'
                      END,
                      p_user, v_office_count, v_pro_sl_no,
                      (SYSDATE - v_process_st_time
                      ) * 24 * 60, p_output
                     );

         COMMIT;
      END IF;
   END;

   FUNCTION fun_off_cash_bal_rep (
      p_trans_date    DATE,
      p_cost_center   VARCHAR2,
      p_glac_sl_no    VARCHAR2
   )
      RETURN office_bal_tab PIPELINED
   AS
      l_tab             office_bal_row;
      v_opening_bal     NUMBER (15, 2);
      v_closing_bal     NUMBER (15, 2);
      v_trans_date_fr   DATE;
      v_trans_date_to   DATE           := p_trans_date;
   BEGIN
      v_trans_date_fr :=
         TO_DATE ('01-JAN-' || TO_CHAR (TO_DATE (p_trans_date), 'RRRR'),
                  'DD-MON-RRRR'
                 );

      FOR i IN (SELECT   cost_center, ins_tp_cd, glac_sl_no,
                         SUM (balance) balance
                    FROM (SELECT   m.cost_center, m.ins_tp_cd, d.glac_sl_no,
                                     SUM (DECODE (d.dr_cr,
                                                  'D', d.trans_amt,
                                                  0
                                                 )
                                         )
                                   - SUM (DECODE (d.dr_cr,
                                                  'C', d.trans_amt,
                                                  0
                                                 )
                                         ) balance
                              FROM acc_gl_trans_mst m, acc_gl_trans_dtl d
                             WHERE m.office_cd = d.office_cd
                               AND m.vouch_no = d.vouch_no
                               AND vouch_dt BETWEEN v_trans_date_fr
                                                AND v_trans_date_to
                               AND m.cost_center =
                                            NVL (p_cost_center, m.cost_center)
                               AND d.glac_sl_no IN ('101575', '101562')
                               AND d.glac_sl_no =
                                              NVL (p_glac_sl_no, d.glac_sl_no)
                          GROUP BY m.cost_center, m.ins_tp_cd, d.glac_sl_no
                          UNION ALL
                          SELECT   office_cd cost_center, ins_tp_cd,
                                   glac_sl_no,
                                     NVL (SUM (DECODE (o.dr_cr,
                                                       'D', o.trans_amt,
                                                       0
                                                      )
                                              ),
                                          0
                                         )
                                   - NVL (SUM (DECODE (o.dr_cr,
                                                       'C', o.trans_amt,
                                                       0
                                                      )
                                              ),
                                          0
                                         ) balance
                              FROM acc_opening_balance o
                             WHERE o.glac_sl_no IN ('101575', '101562')
                               AND o.office_cd =
                                              NVL (p_cost_center, o.office_cd)
                               AND o.opening_bal_dt = v_trans_date_fr
                               AND o.glac_sl_no =
                                              NVL (p_glac_sl_no, o.glac_sl_no)
                          GROUP BY office_cd, glac_sl_no, ins_tp_cd)
                GROUP BY cost_center, ins_tp_cd, glac_sl_no)
      LOOP
         /*SELECT SUM (fun_gl_head_opening (glac_sl_no,
                                          '07001',
                                          i.cost_center,
                                          '0',
                                          v_trans_date_fr,
                                          i.ins_tp_cd
                                         )
                    )
           INTO v_opening_bal
           FROM acc_gl_coa
          WHERE glac_sl_no = i.glac_sl_no; */         --IN ('101575', '101562');
         v_closing_bal := (NVL (v_opening_bal, 0) + i.balance);
         l_tab.cost_center := i.cost_center;
         l_tab.ins_tp_cd := i.ins_tp_cd;
         l_tab.glac_sl_no := i.glac_sl_no;
         l_tab.balance_amt := v_closing_bal;
         PIPE ROW (l_tab);
      END LOOP;

      RETURN;
   END fun_off_cash_bal_rep;
END;
/


--
-- PKG_OFFICE_CASH_BAL_RANGE  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_office_cash_bal_range
IS
   v_trans_date   DATE;

   FUNCTION fun_off_cash_bal (p_trans_date DATE, p_cost_center VARCHAR2)
      RETURN office_bal_dtl_row_tab PIPELINED
   AS
      l_tab   office_bal_dtl_row;
   BEGIN
      v_trans_date := p_trans_date;

      FOR r IN
         (                              --Recive part. Here 'R' Means Receive
          SELECT cost_center, glac_sl_no, ins_tp_cd, 'R' trans_type,
                 NULL br_cd, NULL acc_tp, NULL acc_no, trans_amt
            FROM (SELECT   cost_center, ins_tp_cd, a.glac_sl_no,
                           SUM (trans_amt) trans_amt
                      FROM (SELECT m.cost_center, vouch_cd, vouch_dt,
                                   NVL (dr.divert_to_glac_sl_no,
                                        d.glac_sl_no
                                       ) glac_sl_no,
                                   d.trans_amt, d.dr_cr, ins_tp_cd,
                                   m.vouch_no
                              FROM acc_gl_trans_mst m,
                                   acc_gl_trans_dtl d,
                                   acc_cash_book_divert dr
                             WHERE m.office_cd = d.office_cd
                               AND m.vouch_no = d.vouch_no
                               AND (   (    vouch_cd IN ('01', '03')
                                        AND d.dr_cr = 'C'
                                       )
                                    OR (    vouch_cd = '04'
                                        AND d.dr_cr = 'C'
                                        AND d.glac_sl_no LIKE '1%'
                                       )
                                   )
                               AND vouch_dt = v_trans_date
                               AND m.cost_center =
                                            NVL (p_cost_center, m.cost_center)
                               AND d.glac_sl_no = dr.glac_sl_no(+)
                            UNION ALL
                            SELECT m.cost_center, vouch_cd, vouch_dt,
                                   NVL (dr.divert_to_glac_sl_no,
                                        d.glac_sl_no
                                       ) glac_sl_no,
                                   d.trans_amt * (-1) trans_amt, d.dr_cr,
                                   ins_tp_cd, m.vouch_no
                              FROM acc_gl_trans_mst m,
                                   acc_gl_trans_dtl d,
                                   acc_cash_book_divert dr
                             WHERE m.office_cd = d.office_cd
                               AND m.vouch_no = d.vouch_no
                               AND vouch_cd = '05'
                               AND d.dr_cr = 'D'
                               AND narration LIKE 'Invalid%'
                               AND vouch_dt = v_trans_date
                               AND m.cost_center =
                                            NVL (p_cost_center, m.cost_center)
                               AND EXISTS (
                                      SELECT 1
                                        FROM acc_gl_trans_mst
                                       WHERE vouch_no = m.source_vouch_no
                                         AND office_cd = '07001'
                                         AND vouch_dt = v_trans_date
                                         AND (   (    vouch_cd IN
                                                                 ('01', '03')
                                                  AND d.dr_cr = 'D'
                                                 )
                                              OR (    vouch_cd = '04'
                                                  AND d.dr_cr = 'D'
                                                  AND d.glac_sl_no LIKE '1%'
                                                 )
                                             ))
                               AND d.glac_sl_no = dr.glac_sl_no(+)) a,
                           acc_gl_coa c
                     WHERE a.glac_sl_no = c.glac_sl_no
                  GROUP BY cost_center, ins_tp_cd, a.glac_sl_no) p
          UNION ALL                  --Withdrawal part. Here 'W' Means Receive
          SELECT   cost_center, glac_sl_no, ins_tp_cd, 'W' trans_type, br_cd,
                   acc_tp, acc_no, SUM (trans_amt) trans_amt
              FROM (SELECT cost_center, vouch_cd, vouch_dt, c.glac_sl_no,
                           trans_amt, br_cd, acc_tp, acc_no, m.ins_tp_cd,
                           account_type
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_gl_bank_acc_setup_mst c,
                           acc_gl_coa g
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND d.glac_sl_no = c.glac_sl_no
                       AND d.glac_sl_no = g.glac_sl_no
                       AND vouch_cd = '06'
                       AND account_type = 'D'
                       AND dr_cr = 'C'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                    UNION ALL
                    SELECT cost_center, vouch_cd, vouch_dt, c.glac_sl_no,
                           d.trans_amt * (-1) trans_amt, br_cd, acc_tp,
                           acc_no, m.ins_tp_cd, account_type
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_gl_bank_acc_setup_mst c,
                           acc_gl_coa g
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND d.glac_sl_no = c.glac_sl_no
                       AND d.glac_sl_no = g.glac_sl_no
                       AND vouch_cd = '05'
                       AND account_type = 'D'
                       AND dr_cr = 'D'
                       AND narration LIKE 'Invalid%'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                       AND EXISTS (
                              SELECT 1
                                FROM acc_gl_trans_mst
                               WHERE vouch_no = m.source_vouch_no
                                 AND office_cd = '07001'
                                 AND vouch_dt = v_trans_date
                                 AND vouch_cd = '06'
                                 AND d.dr_cr = 'C'))
          GROUP BY cost_center, ins_tp_cd, br_cd, acc_tp, acc_no, glac_sl_no
          UNION ALL                     --Payment part. Here 'P' Means Receive
          SELECT   cost_center, a.glac_sl_no, ins_tp_cd, 'P' trans_type,
                   NULL br_cd, NULL acc_tp, NULL acc_no,
                   SUM (trans_amt) trans_amt
              FROM (SELECT cost_center, vouch_cd, vouch_dt,
                           NVL (dr.divert_to_glac_sl_no,
                                d.glac_sl_no
                               ) glac_sl_no,
                           fun_voucher_payment_amt (m.vouch_no) trans_amt,
                           d.dr_cr, ins_tp_cd
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_cash_book_divert dr
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND vouch_cd IN ('02', '04')
                       AND d.dr_cr = 'D'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                       AND d.glac_sl_no = dr.glac_sl_no(+)
                    UNION ALL
                    SELECT cost_center, vouch_cd, vouch_dt,
                           NVL (dr.divert_to_glac_sl_no,
                                d.glac_sl_no
                               ) glac_sl_no,
                           d.trans_amt * (-1) trans_amt, d.dr_cr, ins_tp_cd
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_cash_book_divert dr
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND vouch_cd = '05'
                       AND d.dr_cr = 'C'
                       AND narration LIKE 'Invalid%'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                       AND EXISTS (
                              SELECT 1
                                FROM acc_gl_trans_mst
                               WHERE vouch_no = m.source_vouch_no
                                 AND office_cd = '07001'
                                 AND vouch_dt = v_trans_date
                                 AND vouch_cd IN ('02', '04'))
                       AND d.glac_sl_no = dr.glac_sl_no(+)) a,
                   acc_gl_coa c
             WHERE a.glac_sl_no = c.glac_sl_no
          GROUP BY cost_center, ins_tp_cd, a.glac_sl_no
          UNION ALL
          --Deposit part. Here 'D' Means Receive
          SELECT   cost_center, glac_sl_no, ins_tp_cd, 'D' trans_type, br_cd,
                   acc_tp, acc_no, SUM (trans_amt) trans_amt
              FROM (SELECT cost_center, vouch_cd, vouch_dt, c.glac_sl_no,
                           trans_amt, br_cd, acc_tp, acc_no, m.ins_tp_cd,
                           account_type
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_gl_bank_acc_setup_mst c,
                           acc_gl_coa g
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND d.glac_sl_no = c.glac_sl_no
                       AND d.glac_sl_no = g.glac_sl_no
                       AND vouch_cd = '06'
                       AND account_type = 'D'
                       AND dr_cr = 'D'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                    UNION ALL
                    SELECT cost_center, vouch_cd, vouch_dt, d.glac_sl_no,
                           d.trans_amt * (-1) trans_amt, br_cd, acc_tp,
                           acc_no, m.ins_tp_cd, account_type
                      FROM acc_gl_trans_mst m,
                           acc_gl_trans_dtl d,
                           acc_gl_bank_acc_setup_mst c,
                           acc_gl_coa g
                     WHERE m.office_cd = d.office_cd
                       AND m.vouch_no = d.vouch_no
                       AND d.glac_sl_no = c.glac_sl_no
                       AND d.glac_sl_no = g.glac_sl_no
                       AND vouch_cd = '05'
                       AND account_type = 'D'
                       AND dr_cr = 'C'
                       AND narration LIKE 'Invalid%'
                       AND vouch_dt = v_trans_date
                       AND m.cost_center = NVL (p_cost_center, m.cost_center)
                       AND EXISTS (
                              SELECT 1
                                FROM acc_gl_trans_mst
                               WHERE vouch_no = m.source_vouch_no
                                 AND office_cd = '07001'
                                 AND vouch_dt = v_trans_date
                                 AND vouch_cd = '06'
                                 AND d.dr_cr = 'D'))
          GROUP BY cost_center, ins_tp_cd, br_cd, acc_tp, acc_no, glac_sl_no)
      LOOP
         l_tab.cost_center := r.cost_center;
         l_tab.ins_tp_cd := r.ins_tp_cd;
         l_tab.glac_sl_no := r.glac_sl_no;
         l_tab.trans_type := r.trans_type;
         l_tab.trans_amt := r.trans_amt;
         l_tab.br_cd := r.br_cd;
         l_tab.acc_tp := r.acc_tp;
         l_tab.acc_no := r.acc_no;
         PIPE ROW (l_tab);
      END LOOP;

      RETURN;
   END fun_off_cash_bal;

   PROCEDURE pro_cash_bal_insert (
      p_trans_date         DATE,
      p_office_cd          VARCHAR2,
      p_user               VARCHAR2,
      p_output       OUT   VARCHAR2
   )
   AS
      v_trans_id          NUMBER;
      v_opening_bal       NUMBER (15, 2);
      v_invalid_amt       NUMBER (15, 2);
      v_closing_bal       NUMBER (15, 2);
      v_pro_sl_no         NUMBER (10);
      v_process_st_time   DATE;
      v_office_count      NUMBER         := 0;
      v_office_cd         VARCHAR2 (10)  := NULL;
   BEGIN
      BEGIN
                  /*SELECT TRUNC (SYSDATE) - 1, SYSDATE
         --Since this process will executed on after 12:00 PM. So v_trans_date is one day before
                  INTO   v_trans_date, v_process_st_time
                    FROM DUAL;*/
         SELECT MAX (process_date) + 1, SYSDATE
           INTO v_trans_date, v_process_st_time
           FROM acc_cash_bal_pro_log;

         IF p_trans_date IS NOT NULL
         THEN
            v_trans_date := p_trans_date;
         END IF;

         SELECT NVL (MAX (pro_sl_no), 0) + 1
           INTO v_pro_sl_no
           FROM acc_cash_bal_pro_log;

         SELECT NVL (MAX (trans_id), 0) + 1
           INTO v_trans_id
           FROM acc_cash_bal_mst;

         FOR i IN (
                   /*SELECT   cost_center, ins_tp_cd,
                            SUM (DECODE (trans_type, 'R', trans_amt, 0)
                                ) received_amt,
                            SUM (DECODE (trans_type, 'W', trans_amt, 0)
                                ) withdraw_amt,
                            SUM (DECODE (trans_type,
                                         'P', trans_amt,
                                         0
                                        )) payment_amt,
                            SUM (DECODE (trans_type,
                                         'D', trans_amt,
                                         0
                                        )) deposit_amt
                       FROM TABLE
                                (pkg_office_cash_bal_range.fun_off_cash_bal (v_trans_date,
                                                                       p_office_cd
                                                                      )
                                )
                   GROUP BY cost_center, ins_tp_cd*/
                   SELECT cost_center, ins_tp_cd, 0 received_amt,
                          0 withdraw_amt, 0 payment_amt, 0 deposit_amt
                     FROM acc_cash_bal_mst_bkp b
                    WHERE trans_date = TO_DATE ('31-dec-2020')
                      AND   received_amt
                          + withdraw_amt
                          + payment_amt
                          + deposit_amt
                          + invalid_amt = 0
                      AND NOT EXISTS (
                             SELECT 1
                               FROM acc_cash_bal_mst
                              WHERE cost_center = b.cost_center
                                AND trans_date = TO_DATE ('31-dec-2020')
                                AND ins_tp_cd = b.ins_tp_cd)
                      --AND cost_center IN (21323, '23678')
                      )
         LOOP
            SELECT SUM (fun_gl_head_opening (glac_sl_no,
                                             '07001',
                                             i.cost_center,
                                             '0',
                                             v_trans_date,
                                             i.ins_tp_cd
                                            )
                       )
              INTO v_opening_bal
              FROM acc_gl_coa
             WHERE glac_sl_no IN ('101575', '101562');

            SELECT NVL (SUM (trans_amt), 0)
              INTO v_invalid_amt
              FROM (SELECT DISTINCT a.source_vouch_no, a.trans_amt
                               FROM (SELECT m.source_vouch_no,
                                            d.trans_amt trans_amt
                                       FROM acc_gl_trans_mst m,
                                            acc_gl_trans_dtl d,
                                            acc_cash_book_divert dr
                                      WHERE m.office_cd = d.office_cd
                                        AND m.vouch_no = d.vouch_no
                                        AND vouch_cd = '05'
                                        AND d.dr_cr = 'C'
                                        AND narration LIKE 'Invalid%'
                                        AND d.glac_sl_no IN
                                                         ('101575', '101562')
                                        AND ins_tp_cd = i.ins_tp_cd
                                        AND vouch_dt = v_trans_date
                                        AND NVL (m.ledger_st, '1') = '1'
                                        AND NVL (m.payable_st, '0') = '0'
                                        AND m.cost_center = i.cost_center
                                        AND EXISTS (
                                               SELECT 1
                                                 FROM acc_gl_trans_mst
                                                WHERE vouch_no =
                                                             m.source_vouch_no
                                                  AND office_cd = '07001'
                                                  AND vouch_dt < v_trans_date)
                                        AND d.glac_sl_no = dr.glac_sl_no(+)
                                     UNION ALL
                                     SELECT m.source_vouch_no,
                                            d.trans_amt trans_amt
                                       FROM acc_gl_trans_mst m,
                                            acc_gl_trans_dtl d,
                                            acc_cash_book_divert dr
                                      WHERE m.office_cd = d.office_cd
                                        AND m.vouch_no = d.vouch_no
                                        AND vouch_cd = '05'
                                        AND d.dr_cr = 'C'
                                        AND narration LIKE 'Invalid%'
                                        AND d.glac_sl_no IN
                                                         ('101575', '101562')
                                        AND NVL (m.ledger_st, '1') = '1'
                                        AND NVL (m.payable_st, '0') = '0'
                                        AND ins_tp_cd = i.ins_tp_cd
                                        AND vouch_dt = v_trans_date
                                        AND m.cost_center = i.cost_center
                                        AND TO_NUMBER
                                                   (SUBSTR (m.source_vouch_no,
                                                            4,
                                                            4
                                                           )
                                                   ) <
                                               TO_NUMBER (TO_CHAR (SYSDATE,
                                                                   'rrrr'
                                                                  )
                                                         )
                                        AND d.glac_sl_no = dr.glac_sl_no(+)) a);

            v_closing_bal :=
                 (NVL (v_opening_bal, 0) + i.received_amt + i.withdraw_amt
                 )
               - (i.payment_amt + i.deposit_amt + NVL (v_invalid_amt, 0));

            INSERT INTO acc_cash_bal_mst
                        (trans_id, cost_center, ins_tp_cd,
                         trans_date, opening_bal, invalid_amt,
                         closing_amt, i_usr, i_dt, pro_sl_no,
                         received_amt, withdraw_amt, payment_amt,
                         deposit_amt
                        )
                 VALUES (v_trans_id, i.cost_center, i.ins_tp_cd,
                         v_trans_date, v_opening_bal, v_invalid_amt,
                         v_closing_bal, p_user, SYSDATE, v_pro_sl_no,
                         i.received_amt, i.withdraw_amt, i.payment_amt,
                         i.deposit_amt
                        );

            INSERT INTO acc_cash_bal_dtl
                        (trans_id, glac_sl_no, trans_type, trans_amt, br_cd,
                         acc_tp, acc_no, i_usr, i_dt)
               (SELECT v_trans_id, glac_sl_no, trans_type, trans_amt, br_cd,
                       acc_tp, acc_no, p_user, SYSDATE
                  FROM TABLE
                          (pkg_office_cash_bal.fun_off_cash_bal (v_trans_date,
                                                                 p_office_cd
                                                                )
                          )
                 WHERE cost_center = i.cost_center AND ins_tp_cd = i.ins_tp_cd);

            IF v_office_count = 0
            THEN
               v_office_count := v_office_count + 1;
               v_office_cd := i.cost_center;
            ELSE
               IF v_office_cd <> i.cost_center
               THEN
                  v_office_count := v_office_count + 1;
                  v_office_cd := i.cost_center;
               END IF;
            END IF;

            v_trans_id := v_trans_id + 1;
            COMMIT;
         END LOOP;

         BEGIN
            FOR j IN (SELECT *
                        FROM acc_cash_bal_mst m
                       WHERE trans_date = v_trans_date - 1
                         AND m.cost_center = NVL (p_office_cd, m.cost_center)
                         AND NOT EXISTS (
                                SELECT 1
                                  FROM acc_cash_bal_mst
                                 WHERE trans_date = v_trans_date
                                   AND cost_center = m.cost_center
                                   AND ins_tp_cd = m.ins_tp_cd))
            LOOP
               INSERT INTO acc_cash_bal_mst
                           (trans_id, cost_center, ins_tp_cd,
                            trans_date, opening_bal, invalid_amt,
                            closing_amt, i_usr, i_dt, pro_sl_no,
                            received_amt, withdraw_amt, payment_amt,
                            deposit_amt
                           )
                    VALUES (v_trans_id, j.cost_center, j.ins_tp_cd,
                            v_trans_date, j.closing_amt, 0,
                            j.closing_amt, p_user, SYSDATE, v_pro_sl_no,
                            0, 0, 0,
                            0
                           );

               v_trans_id := v_trans_id + 1;
            END LOOP;

            COMMIT;
         END;

         p_output := NULL;
      EXCEPTION
         WHEN OTHERS
         THEN
            p_output := 'Process Not Completed Due to ' || SQLERRM || '!';
            ROLLBACK;
      END;

      IF p_office_cd IS NULL
      THEN
         INSERT INTO acc_cash_bal_pro_log
                     (process_date, pro_exe_status,
                      exe_user, no_of_office, pro_sl_no,
                      total_time_in_minutes, output_error
                     )
              VALUES (v_trans_date, CASE
                         WHEN p_output IS NULL
                            THEN '1'
                         ELSE '0'
                      END,
                      p_user, v_office_count, v_pro_sl_no,
                      (SYSDATE - v_process_st_time
                      ) * 24 * 60, p_output
                     );

         COMMIT;
      END IF;
   END;
END;
/


--
-- PKG_PF_YEAR_CLOSING  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_pf_year_closing wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
b
8ca8 1457
jY0MbW1ZfRd744HMdK2CMh0/4swwg82QeccFV/HGuw0ilbthJ/I86bDHwPgnx0XF40Z+bCEm
Q9YLneY6epdf9sdSlzNodyvNByTIBh3OWfrcyYKENOPp01UR36t9YP4PlytUu5VYkUMxsc86
Ba782YCB/lXX1kVz9bUw/jqw+ht1prqaAxqkOmX5GmH2Q1o4T6EPk8ElI51Sclf0mJUAXC/F
ukbTjJWxTjTW9c0n0MBbIO0ZVAmTn7PuaJ1aIJabsCRGsbrWxbY+aIvDPL6lA8tE/hZoYDiD
agwiTJ4kuZIbuYJttTGdMkeomx1y0LWRCTtGtyLZ2ilvWoCjfwpt5rw6RqOZUZncft5CYXeq
H2E8DiQXJ67BtG1QH0gO2+lXwfXfbfjFuuLf7vtf2N9gp5bNLlTJoDPtmVYAExdKg7dxNqgf
TpsA2vVLDEYs/2NhRm2VYx+TwZeBVPx/A20Y2BUNTkGfhfJALBr1soL02o7fs2cQUbVBiei/
+h6JIDg+DOtIybKehK4LjdcTifBD3t5WKUAluxeRaNpO7RHZ/IOJXc0UELkMDI3NySCu1PAs
z7uEftsgXvHZ1lkPJPjZ03jAbkY/bHLfSJeFBSeknMaXQ8B6ILo0FaNAPEIDEEnfuUCHahNd
R/W36hN83/T8qSRTh1MzZrHf2iA8smhvvmNOD7VVMzQn3WscLSHa7A0mnS7ITeh3Y2Bes74r
sEI60KohvQtHoPqAezeKi1WRiS4AgUvrOtLdsw2kIDzU7ZvwzsVB/s/FVsaZkRMC9SfC2GrP
2ipiLeiyjOpcveskrZgTLKqDAOT0mIAimiRSErWdDyLNQZ8kwLX3sE+/zzS10in56s1f0vDQ
v8SYnXxiUrMYZds7IuzRrBJIqhlV+WKLL07VYFk5UxLk0LBPuyy/Pv6Vd8Oj5eZCAfp5UwjC
eK5HVevlpdaHDTaqMhq7D4o6kQpri2liror+BTI0rUL8z4zEBhUm4ng3bHYyzR9vt5LY0cSt
3fZgN9LV6FQXfjBHIgdCJvHqmeHtrwP+3W40QWM0DXvosetoUNGNPF/B6oCLXdcpKdhhJnlx
YvZTmvEJKJT2LvjYorqy2R6RlB5Z/MqpFdXHi+cMREozXIPrvmu7FobcHZyReD1/SjMPTuQD
i3rQsdBk7WAja5zDMxr0DDN6i8KzI/6GJAjpoJ3j5eSBBb7Xbhg4tyKLUPj9G5xpNLtD0/4+
UrN4dCS/8UB4QKQigIzW0jHcbxIl6gFVW7E10+bfPmH/TZPrKg08vVUMB7erVSnYVv9QPk0u
Z/AQwMTUh5pif4JqU/U1uDgztMb2ydiJX5GKBNR+K+ZBV2clBbM/pB58xnVFJmQF9aeiWb5M
R0qDlhByUiuSFuBXS9FPOHPPTqWOuxkGMzP5nHKu0EYoeE8sJLkctCJomrkcLFINSS3AruC1
woYpvK9SdAVuTuvcBiqYSnsQSZC81v8gSwv9gG4UWZw/kg7uz7dEOkDtWaNWs1dpWeXoBJL3
9pWLiZCZyQekdAaAhNe+b9Cwlr6qTorlHPRJVTLOq8n2JEVU3uW3tW5Y8REHn6NQdXMu7LGw
Axvs1OMAlE14cZZyXGUPydiHAYQqaXKHNH/yZBKDz3sevN9Oy7XfPhMBA63De82yFVehK4cO
zXGTeKzFONa99e3sIosiHj0hcyDkJ2GnXGQTqFEAhGHuFbLxO0jzmnFhXVNeVv5sZK6ubbAN
goxDTHF+FZsI2Rp4xDar/wKNvItD1Ycsx0YK4oFZFdJlDe5zL3tvT472NZas9bHsoLqf3iiq
N7LkTVXaWBp+rMIpQouTiSmVc2pK2fgP0jqlN/1zOou1SLkiVeRysKS/T05bKJiW/tC/rv4o
qiAidmHUslLDXYVdNiUs2tJGy0PGDcoOgjl9dPtZlo55/oIXk0KisAGWiR+FyMqOOI7bA2n0
3tnqHh5z1caTnQEcDpz4FBj0miE86i/+E7xBK5IUNc/TC9S7cRIRwJYFTW/KPFJ1UOzfJixa
2hLIKa1Y+pHfDyH1AasQ3EcpKUFXY7wMZS9SQJAsA3X1MHarW72XjSxZapLtAoyc6bvAIg4q
Md4M2fO8LdttZ1Yo3cljeTEa6AvWGgHQFFUburGhVTaudIEeeT8rx2c97fDojrDzNKDQTEhJ
WC9OaKXBO5DrlUytgGRkO0K8Qbre/cBDnBX0kd2hgUPB5wUrH0H9QVvoyYs0P4IeyNEZpMLw
DldOrpp9mOvr3piRzdwNwrTeo7suglIx8Y9qVLwxR+gAmCVNKby6ItucOV+/GQalVXBpMg1Y
OvEBYr7IG2/xBWNxl954CleYNRfRmCouJaHDH2zvHm9JjrsolEkuCnbF3PIrH8Z9d49vr0fY
DfUWnTKWnErcATf4rQ2f/PU0oDqHyy54KoDelbBKemlodLUjtQH+rVJkT7+dwrwSNO2z/mT2
4t+6yJbIiyxWQ/Pgy23noB/jc2DIWQG40QHOANsd1uWIc3/Whcnp1fLp4lQpyBbSw0VYq+sx
QWuho29s5EIr+sHDhusaiGzwV7zakDzh8SFBTWnBn/dAjnnQmGZt0tKNQwvHBxlubddVUINO
MXBAekmtcO4nOMm7tlQ3YWwQQbZKuGLNhwuwjUwNpxTykOW9/NKQGH/27xuVmoi1vJ2DnCO2
83us+8e0K76rRTxj9o1eu7pVWQxiQDh+0TKpb/04rqEmO70L38sOE1LbMGzn9FqoFAfnE8Q2
nWZ0tPrMcdzQa+yk5iGMlK5ODSqREJarg5a8r5ts2cWz/KkqVKgFKDJXVT9TYUXJmrhMHp0R
8JPD24/z9oigPTUap+f/PZdOGQpzpwk1cCph7ccvbGl3J7N0XxHeUiOidVPiXIDCDVh6LrLi
RQnWhCqzf1nVkdiN4D1Ab/2XyvTg6pmAGw3dyjNFZLacCrV2hQvV4rcRbDjARRfAe6QihJVI
T3C7GNm36hDZAMbY9PGGIDNMADRm6lvq57ByDIvLDSGLyLEuTYAkgc0hIZImezH+fbCrdmkk
xLPW9QnkAxLIhxvwErVfESUxMYojPRGX6RnTCuTPIMzqAQcBKizAm/tky1c2Lpunmpff8WXA
UfFOSS7/34kOxUpT9bNGykqusbvSKYNXVwkjgO0EH95RYGz60xDtgax8Qd04uoSUw7GAwzdG
XBeVfqN0pIc/tEbBbFgNZt/W6DW7GEjkJSMZYflgChWjw2M7WUJ5jJauw6iTgJPoddunklkT
xeymW1IF/Sehi7/oe+Xp9guBE2Nu5uKn7NywbAFkd0DHzcSNt8nDySQ4pMQxnut2FdiyBPZR
cFulPo1rQGcLCsB2HV/Njy3G+jMGopjSf0dkv0SEk1w7iWmqv3CRc0jMT6VomP8T/PuyAwOF
t0aw+HruL+Wjc0hQVLBq+EPgspCQrHC0aDR5fevSgdCJ+KPV2gW5C7XCeVLrzdrhhMVGjW8f
dNkCJuBFkhkth0p7WbCBZsOhle3SEGOwo/6n8sNjPZleHQtTME4gMrIgEz4FsgYByQMmuNkK
wVnALDU8g/yghCkPALHsSm/1Wu7E6VAkXzFFjZbxgQA+uPRjmLI8JNT6mpNuaDMN5bxwvpO9
pPP12jUzROKnFckpsp1g21XlrMAec1GTJG1/piwVhk9Wpni8y3hghtdz+VezMLuHf0BdDTMy
4BMiFd9kJVq4MMqqRqhfs+TurEqz5LHCzh97HcPaeA473vtx6zT7+OC2hWBTD0zoCiWcoNPn
Adag8Mhy6PsbLgkyEKG+Z8/5m0PGE7BzeCQznX+vZL/Q2vya4BkdZ7UNivc5
CzXwDy2I7g7v
dqCky4O6zsX9QqQAGL3KKrJq5zf4uGM9gfHVnazfzdanm4FQY3Y2fAHK1IkXFVlCiBo+gNYu
rdMglwzhXDA+ISiAFVxXLy0V7ktBH+p1gVU+imeJKIAdEFccHmqzuCxKNeSlz7jFchWwwHqi
jR+vBAh+dfOadN7bf3DvZTT3OmpGUgbkfDhfIfhrkmIN22gYVK4phvagAF/MYvh5WbVOIdit
B7zBTe+aUFoenXVa+Dz+EomyzWx84DQvUHUf3avrOXgiZ52A+7eISi6LvqWR1EvJdPbLw7QE
PCENZNM8dGYc1vGvogtpZV9OBImgwq2emP83pTLL5kuEeHRdL3aYrcAmxc89dLlNr3v8aTJg
0kf+RkG9FWb7mndzKDdPKV7mvvDn7N+tYDbX4w46c+8RQLlv70DoPD8gBOyGLq80khuPWN85
mnSO69RwNpjP9ksM72ECnzCZO/1d+8ofJ1cf8mmcOVLZDFLYzdANc/L99vj0b8sa/bePW9V+
Wax4DdQUzvmd1iMrG89y4Nib0L2Bp98bd9DeC40kSAuNtVDfOVcHxX50uCM+xqYX2P6/XyFA
SQswJZrUIyQL7SympqamBB5zpqbdg/7RS2H2MosW2ZnUI51DRGujvYBEwQlAtqampqampqam
3CsVzLEJzsc0gSMLoQExx/92OCbdzAvtDztGjFZykIZ5Y5hScnfyX4E/pqYwxEtoUL93WO9W
lFeXgYt+XC/Ful+BP6ampqampqbUI532oQFCuc/hpqampqamplT3uwx4w9XuTWk0F/rJLdNK
uGIm5gg/IvumpqampqamZpREIgxhxZ4aJE+mpqampqampvfChKc2sTdi5q37pqampqaPar7S
bBkj7S0awn6nfo3EhyBWJlYS4aampqampuexi0fzp552QyNWQsRXx0Zj4YC+GTampqampqYv
4tfyV/yjnk9sug0ZNqe4dw21n+GmpqamqfXhrfumpqampuNhYedsPJ87/3YBQjVNKxXMr76J
7jampqampqbnkeOUOrz1hA3TywzYhf5j/eWNBB5zE5XyVxUNGp6V+Do2pqampqampuPDjs5W
MeUWyPnP4aampqampqail8uT03FbYedDNqampqamqSjBJZwwHoHU8ZfCk8JcGSPtLRrCir2m
pqampqbKcROCgFTFuIkeLV1VBkfzp552QyO2pqampqamZ1Pf1e5N9j7Pp349I7ZUFcyx+QW9
pqampqYlDTqEPfhME9eSzTbI6qdoQP1ykKbdB8cpZhAP6eJUrQkCQRhhYedDNqYVxyncpqa0
xbt4OjuZKYMgtUO1+3xOj/k=
/


--
-- PKG_PMIS_REPORT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_pmis_report
IS
   FUNCTION FUN_EMP_AS_PER_DESIG (
      P_DESIG_CD           IN VARCHAR2,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_ACTIVITY_CD        IN HRM_EMPLOYEE.ACTIVITY_CD%TYPE
   )
      RETURN EMP_AS_PER_DESIG_TAB
      PIPELINED
   AS
      L_TAB   EMP_AS_PER_DESIG_ROW;
   BEGIN
      FOR I
      IN (  SELECT   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD) DESIG_NM,
                     E.EMP_ID,
                     E.EMP_FILE_NO,
                     E.BIRTH_DT,
                     F_OFFICE (E.OFFICE_CD) OFFICE_NM,
                     F_DIVDEPT (E.DIVDEPT_CD) DIVITION_NM,
                     FUN_EMP_EDU_QUALIFICATION_NAME (E.EMP_GID) DEGREE_NM,
                     E.JOIN_DT,
                     E.GROSS_EARNING,
                     E.JOIN_DT JOIN_P_OFFICE,
                     E.ACTIVITY_CD,
                     (SELECT   N.NATIONAL_ID_NO
                        FROM   HRM_EMPLOYEE_DETL N
                       WHERE   N.EMP_GID = E.EMP_GID)
                        NID,
                     (SELECT   A.ACTIVITY_NM
                        FROM   HRM_ACTIVITY_STAT A
                       WHERE   A.ACTIVITY_CD = E.ACTIVITY_CD)
                        ACTVITY_NM,
                     (SELECT   EMP_PHOTO
                        FROM   HRM_EMPLOYEE_PHOTO
                       WHERE   EMP_GID = E.EMP_GID)
                        EMP_PHOTO
              FROM   HRM_EMPLOYEE E
             WHERE   E.EMPLOYMENT_TP_CD =
                        NVL (P_EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                     AND E.EMP_ID = NVL (P_EMP_ID, E.EMP_ID)
                     AND E.ACTIVITY_CD = NVL (P_ACTIVITY_CD, E.ACTIVITY_CD)
                     AND (P_DESIG_CD IS NULL
                          OR (P_DESIG_CD IS NOT NULL
                              AND E.DESIG_CD IN
                                       (SELECT   DESIG_CD
                                          FROM   HRM_DESIG
                                         WHERE   DESIG_CD = P_DESIG_CD)))
                     AND ( (NVL (P_DESCENDANT_FLAG, 0) = 0
                            AND E.OFFICE_CD = NVL (P_OFFICE_CD, E.OFFICE_CD))
                          OR (NVL (P_DESCENDANT_FLAG, 0) = 1
                              AND E.OFFICE_CD IN
                                       (    SELECT   O.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP O
                                        START WITH   O.OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR O.OFFICE_CD =
                                                        O.CONTROL_OFFICE_CD)))
          GROUP BY   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD),
                     E.EMPLOYMENT_TP_CD,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD),
                     E.EMP_ID,
                     E.JOIN_DT,
                     F_DIVDEPT (E.DIVDEPT_CD),
                     E.GROSS_EARNING,
                     E.OFFICE_CD,
                     E.EMP_GID,
                     E.DESIG_CD,
                     E.EMP_FILE_NO,
                     E.BIRTH_DT,
                     E.ACTIVITY_CD
          ORDER BY   E.DESIG_CD, E.OFFICE_CD, E.EMP_ID)
      LOOP
         L_TAB.EMP_NM_ENG := I.EMP_NM_ENG;
         L_TAB.DESIG_NM := I.DESIG_NM;
         L_TAB.EMP_ID := I.EMP_ID;
         L_TAB.NID := I.NID;
         L_TAB.OFFICE_NM := I.OFFICE_NM;
         L_TAB.JOIN_DT := I.JOIN_DT;
         L_TAB.PRESENT_SAL := I.GROSS_EARNING;
         L_TAB.DIVITION_NM := I.DIVITION_NM;
         L_TAB.DEGREE_NM := I.DEGREE_NM;
         L_TAB.JOIN_P_OFFICE := I.JOIN_P_OFFICE;
         L_TAB.EMP_FILE_NO := I.EMP_FILE_NO;
         L_TAB.BIRTH_DT := I.BIRTH_DT;
         L_TAB.ACTIVITY_CD := I.ACTIVITY_CD;
         L_TAB.ACTVITY_NM := I.ACTVITY_NM;
         L_TAB.EMP_PHOTO := I.EMP_PHOTO;
         PIPE ROW (L_TAB);
      END LOOP;

      RETURN;
   END FUN_EMP_AS_PER_DESIG;


   FUNCTION FUN_EMP_AS_PER_PERMANENT_DT (
      P_START_DT           IN DATE,
      P_END_DT             IN DATE,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2
   )
      RETURN EMP_AS_PER_PERMANENT_DT_TAB
      PIPELINED
   AS
      L_PERM_DT   EMP_AS_PER_PERMANENT_DT_ROW;
   BEGIN
      FOR I
      IN (  SELECT   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD) DESIG_NM,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD) EMPLOYMENT_TP_NM,
                     E.EMP_ID,
                     O.OFFICE_NM,
                     E.CONFIRM_DT,
                     E.JOIN_DT,
                     REP_F_DIVDEPT (E.DIVDEPT_CD) DIVDEPT_NM
              FROM   HRM_EMPLOYEE E, HRM_OFFICE O
             WHERE       E.OFFICE_CD = O.OFFICE_CD
                     AND E.EMPLOYMENT_TP_CD = P_EMPLOYMENT_TP_CD
                     AND E.EMP_ID = NVL (P_EMP_ID, E.EMP_ID)
                     AND E.CONFIRM_DT BETWEEN NVL (P_START_DT, E.CONFIRM_DT)
                                          AND  NVL (P_END_DT, E.CONFIRM_DT)
                     AND ( (NVL (P_DESCENDANT_FLAG, 0) = 0
                            AND E.OFFICE_CD = NVL (P_OFFICE_CD, O.OFFICE_CD))
                          OR (NVL (P_DESCENDANT_FLAG, 0) = 1
                              AND E.OFFICE_CD IN
                                       (    SELECT   O.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP O
                                        START WITH   O.OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR O.OFFICE_CD =
                                                        O.CONTROL_OFFICE_CD)))
          ORDER BY   E.CONFIRM_DT)
      LOOP
         L_PERM_DT.EMP_NM_ENG := I.EMP_NM_ENG;
         L_PERM_DT.DESIG_NM := I.DESIG_NM;
         L_PERM_DT.EMPLOYMENT_TP_NM := I.EMPLOYMENT_TP_NM;
         L_PERM_DT.EMP_ID := I.EMP_ID;
         L_PERM_DT.OFFICE_NM := I.OFFICE_NM;
         L_PERM_DT.CONFIRM_DT := I.CONFIRM_DT;
         L_PERM_DT.JOIN_DT := I.JOIN_DT;
         L_PERM_DT.DIVDEPT_NM := I.DIVDEPT_NM;
         L_PERM_DT.DESIG_NM_AFP := I.DESIG_NM;
         PIPE ROW (L_PERM_DT);
      END LOOP;

      RETURN;
   END FUN_EMP_AS_PER_PERMANENT_DT;


   FUNCTION FUN_EMP_AS_PER_DEPT_SEC (
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_DIVDEPT_CD         IN VARCHAR2,
      P_SECTION_CD         IN VARCHAR2,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2
   )
      RETURN EMP_AS_PER_DEPT_SEC_TAB
      PIPELINED
   AS
      L_DEPT_SEC   EMP_AS_PER_DEPT_SEC_ROW;
   BEGIN
      FOR I
      IN (  SELECT   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD) DESIG_NM,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD) EMPLOYMENT_TP_NM,
                     E.EMP_ID,
                     E.EMP_FILE_NO,
                     O.OFFICE_NM,
                     F_DIVDEPT (E.DIVDEPT_CD) DIVDEPT_NM,
                     FUN_SECTION_NM (E.SECTION_CD) SECTION_NM,
                     NULL DIV_INCHARGE_NM,
                     E.JOIN_DT,
                     E.CURR_BASIC,
                     E.JOIN_DT JOIN_P_OFFICE,
                     FUN_EMP_EDU_QUALIFICATION_NAME (E.EMP_GID) DEGREE_NM
              FROM   HRM_EMPLOYEE E, HRM_OFFICE O
             WHERE   E.OFFICE_CD = O.OFFICE_CD
                     AND E.EMPLOYMENT_TP_CD =
                           NVL (P_EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                     AND E.EMP_ID = NVL (P_EMP_ID, E.EMP_ID)
                     AND E.DIVDEPT_CD = NVL (P_DIVDEPT_CD, E.DIVDEPT_CD)
                     AND ( (NVL (P_DESCENDANT_FLAG, 0) = 0
                            AND E.OFFICE_CD = NVL (P_OFFICE_CD, O.OFFICE_CD))
                          OR (NVL (P_DESCENDANT_FLAG, 0) = 1
                              AND E.OFFICE_CD IN
                                       (    SELECT   O.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP O
                                        START WITH   O.OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR O.OFFICE_CD =
                                                        O.CONTROL_OFFICE_CD)))
          ORDER BY   E.DIVDEPT_CD,
                     E.SECTION_CD,
                     O.OFFICE_CD,
                     E.DESIG_CD,
                     E.EMP_ID)
      LOOP
         L_DEPT_SEC.EMP_NM_ENG := I.EMP_NM_ENG;
         L_DEPT_SEC.DESIG_NM := I.DESIG_NM;
         L_DEPT_SEC.EMPLOYMENT_TP_NM := I.EMPLOYMENT_TP_NM;
         L_DEPT_SEC.EMP_ID := I.EMP_ID;
         L_DEPT_SEC.OFFICE_NM := I.OFFICE_NM;
         L_DEPT_SEC.DIVDEPT_NM := I.DIVDEPT_NM;
         L_DEPT_SEC.SECTION_NM := I.SECTION_NM;
         L_DEPT_SEC.DIV_INCHARGE_NM := I.DIV_INCHARGE_NM;
         L_DEPT_SEC.JOIN_DT := I.JOIN_DT;
         L_DEPT_SEC.EMP_FILE_NO := I.EMP_FILE_NO;
         L_DEPT_SEC.CURR_BASIC := I.CURR_BASIC;
         L_DEPT_SEC.JOIN_P_OFFICE := I.JOIN_P_OFFICE;
         L_DEPT_SEC.DEGREE_NM := I.DEGREE_NM;
         PIPE ROW (L_DEPT_SEC);
      END LOOP;

      RETURN;
   END FUN_EMP_AS_PER_DEPT_SEC;


   FUNCTION FUN_EMP_AS_PER_DIV_DIST (
      P_DIVISION_CD        IN VARCHAR2,
      P_DISTRICT_CD        IN VARCHAR2,
      P_THANA_CD           IN VARCHAR2,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_ACTIVITY_CD        IN HRM_EMPLOYEE.ACTIVITY_CD%TYPE
   )
      RETURN EMP_AS_PER_DIV_DIST_TAB
      PIPELINED
   AS
      L_DIV_DIST   EMP_AS_PER_DIV_DIST_ROW;
   BEGIN
      FOR I
      IN (  SELECT   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD) DESIG_NM,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD) EMPLOYMENT_TP_NM,
                     E.EMP_ID,
                     E.EMP_FILE_NO,
                     F_DIVDEPT (E.DIVDEPT_CD) DIVITION_NM,
                     E.JOIN_DT,
                     E.CURR_BASIC,
                     E.JOIN_DT JOIN_P_OFFICE,
                     F_DEGREE (MAX (T.DEGREE_CD)) DEGREE_NM,
                     O.OFFICE_NM,
                     D.PERM_DIVISION_CD DIVISION_CD,
                     D.PERM_DISTRICT_CD DISTRICT_CD,
                     D.PERM_THANA_CD THANA_CD,
                     F_DIVISION (D.PERM_DIVISION_CD) DIVISION_NM,
                     F_DISTRICT (D.PERM_DISTRICT_CD) DISTRICT_NM,
                     F_THANA (D.PERM_THANA_CD) THANA_NM,
                     E.ACTIVITY_CD,
                     (SELECT   A.ACTIVITY_NM
                        FROM   HRM_ACTIVITY_STAT A
                       WHERE   A.ACTIVITY_CD = E.ACTIVITY_CD)
                        ACTVITY_NM
              FROM   HRM_EMPLOYEE E,
                     HRM_OFFICE O,
                     HRM_EMPLOYEE_EDUCATION T,
                     HRM_EMPLOYEE_DETL D
             WHERE       E.OFFICE_CD = O.OFFICE_CD
                     AND E.EMP_GID(+) = T.EMP_GID
                     AND E.EMP_GID = D.EMP_GID
                     AND E.ACTIVITY_CD = NVL (P_ACTIVITY_CD, E.ACTIVITY_CD)
                     AND E.EMPLOYMENT_TP_CD =
                           NVL (P_EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                     AND E.EMP_ID = NVL (P_EMP_ID, E.EMP_ID)
                     AND ( (P_DIVISION_CD IS NULL AND 1 = 1)
                          OR (P_DIVISION_CD IS NOT NULL
                              AND D.PERM_DIVISION_CD = P_DIVISION_CD))
                     AND ( (P_DISTRICT_CD IS NULL AND 1 = 1)
                          OR (P_DISTRICT_CD IS NOT NULL
                              AND D.PERM_DISTRICT_CD = P_DISTRICT_CD))
                     AND ( (P_THANA_CD IS NULL AND 1 = 1)
                          OR (P_THANA_CD IS NOT NULL
                              AND D.PERM_THANA_CD = P_THANA_CD))
                     AND ( (NVL (P_DESCENDANT_FLAG, 0) = 0
                            AND E.OFFICE_CD = NVL (P_OFFICE_CD, O.OFFICE_CD))
                          OR (NVL (P_DESCENDANT_FLAG, 0) = 1
                              AND E.OFFICE_CD IN
                                       (    SELECT   O.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP O
                                        START WITH   O.OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR O.OFFICE_CD =
                                                        O.CONTROL_OFFICE_CD)))
          GROUP BY   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD),
                     E.EMPLOYMENT_TP_CD,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD),
                     E.EMP_ID,
                     O.OFFICE_NM,
                     E.JOIN_DT,
                     F_DIVDEPT (E.DIVDEPT_CD),
                     E.CURR_BASIC,
                     O.OFFICE_CD,
                     E.DESIG_CD,
                     E.EMP_FILE_NO,
                     D.PERM_DIVISION_CD,
                     D.PERM_DISTRICT_CD,
                     D.PERM_THANA_CD,
                     E.ACTIVITY_CD
          ORDER BY   D.PERM_DIVISION_CD,
                     D.PERM_DISTRICT_CD ASC,
                     D.PERM_THANA_CD ASC)
      LOOP
         L_DIV_DIST.EMP_NM_ENG := I.EMP_NM_ENG;
         L_DIV_DIST.DESIG_NM := I.DESIG_NM;
         L_DIV_DIST.EMPLOYMENT_TP_NM := I.EMPLOYMENT_TP_NM;
         L_DIV_DIST.EMP_ID := I.EMP_ID;
         L_DIV_DIST.OFFICE_NM := I.OFFICE_NM;
         L_DIV_DIST.DIVISION_CD := I.DIVISION_CD;
         L_DIV_DIST.DIVISION_NM := I.DIVISION_NM;
         L_DIV_DIST.DISTRICT_CD := I.DISTRICT_CD;
         L_DIV_DIST.DISTRICT_NM := I.DISTRICT_NM;
         L_DIV_DIST.THANA_CD := I.THANA_CD;
         L_DIV_DIST.THANA_NM := I.THANA_NM;
         L_DIV_DIST.EMP_FILE_NO := I.EMP_FILE_NO;
         L_DIV_DIST.DIVITION_NM := I.DIVITION_NM;
         L_DIV_DIST.JOIN_DT := I.JOIN_DT;
         L_DIV_DIST.CURR_BASIC := I.CURR_BASIC;
         L_DIV_DIST.JOIN_P_OFFICE := I.JOIN_P_OFFICE;
         L_DIV_DIST.DEGREE_NM := I.DEGREE_NM;
         L_DIV_DIST.ACTIVITY_CD := I.ACTIVITY_CD;
         L_DIV_DIST.ACTVITY_NM := I.ACTVITY_NM;
         PIPE ROW (L_DIV_DIST);
      END LOOP;

      RETURN;
   END FUN_EMP_AS_PER_DIV_DIST;


   FUNCTION FUN_EMP_AS_PER_SERVICE_SEN (
      P_START_DT           IN DATE,
      P_END_DT             IN DATE,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2
   )
      RETURN EMP_AS_PER_SERVICE_SEN_TAB
      PIPELINED
   AS
      L_SERV_SEN   EMP_AS_PER_SERVICE_SEN_ROW;
   BEGIN
      FOR I
      IN (  SELECT   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD) DESIG_NM,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD) EMPLOYMENT_TP_NM,
                     E.EMP_ID,
                     O.OFFICE_NM,
                     E.CONFIRM_DT,
                     E.CURR_BASIC
              FROM   HRM_EMPLOYEE E, HRM_OFFICE O
             WHERE       E.OFFICE_CD = O.OFFICE_CD
                     AND E.EMPLOYMENT_TP_CD = P_EMPLOYMENT_TP_CD
                     AND E.EMP_ID = NVL (P_EMP_ID, E.EMP_ID)
                     AND E.CONFIRM_DT BETWEEN NVL (P_START_DT, E.CONFIRM_DT)
                                          AND  NVL (P_END_DT, E.CONFIRM_DT)
                     AND ( (NVL (P_DESCENDANT_FLAG, 0) = 0
                            AND E.OFFICE_CD = NVL (P_OFFICE_CD, O.OFFICE_CD))
                          OR (NVL (P_DESCENDANT_FLAG, 0) = 1
                              AND E.OFFICE_CD IN
                                       (    SELECT   O.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP O
                                        START WITH   O.OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR O.OFFICE_CD =
                                                        O.CONTROL_OFFICE_CD)))
          ORDER BY   E.CONFIRM_DT,
                     O.OFFICE_CD,
                     E.DESIG_CD,
                     E.EMP_ID)
      LOOP
         L_SERV_SEN.EMP_NM_ENG := I.EMP_NM_ENG;
         L_SERV_SEN.DESIG_NM := I.DESIG_NM;
         L_SERV_SEN.EMPLOYMENT_TP_NM := I.EMPLOYMENT_TP_NM;
         L_SERV_SEN.EMP_ID := I.EMP_ID;
         L_SERV_SEN.OFFICE_NM := I.OFFICE_NM;
         L_SERV_SEN.CONFIRM_DT := I.CONFIRM_DT;
         L_SERV_SEN.PRESENT_SAL := I.CURR_BASIC;
         PIPE ROW (L_SERV_SEN);
      END LOOP;

      RETURN;
   END FUN_EMP_AS_PER_SERVICE_SEN;


   FUNCTION FUN_EMP_AS_PER_GENDER (
      P_SEX_CD             IN VARCHAR2,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_ACTIVITY_CD        IN HRM_EMPLOYEE.ACTIVITY_CD%TYPE
   )
      RETURN EMP_AS_PER_GENDER_TAB
      PIPELINED
   AS
      L_GENDER   EMP_AS_PER_GENDER_ROW;
   BEGIN
      FOR I
      IN (  SELECT   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD) DESIG_NM,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD) EMPLOYMENT_TP_NM,
                     F_DIVDEPT (E.DIVDEPT_CD) DIVITION_NM,
                     E.JOIN_DT,
                     E.GROSS_EARNING,
                     FUN_EMP_EDU_QUALIFICATION_NAME (E.EMP_GID) DEGREE_NM,
                     E.LAST_PROM_DT,
                     E.EMP_FILE_NO,
                     E.EMP_ID,
                     O.OFFICE_NM,
                     REP_FUN_INS_GENDER (E.SEX_CD) GENDER_NM,
                     E.ACTIVITY_CD,
                     (SELECT   A.ACTIVITY_NM
                        FROM   HRM_ACTIVITY_STAT A
                       WHERE   A.ACTIVITY_CD = E.ACTIVITY_CD)
                        ACTVITY_NM
              FROM   HRM_EMPLOYEE E, HRM_OFFICE O
             WHERE   E.OFFICE_CD = O.OFFICE_CD
                     AND E.EMPLOYMENT_TP_CD =
                           NVL (P_EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                     AND E.EMP_ID = NVL (P_EMP_ID, E.EMP_ID)
                     AND E.SEX_CD = NVL (P_SEX_CD, E.SEX_CD)
                     AND E.ACTIVITY_CD = NVL (P_ACTIVITY_CD, E.ACTIVITY_CD)
                     AND E.GROSS_EARNING > '0'
                     AND ( (NVL (P_DESCENDANT_FLAG, 0) = 0
                            AND E.OFFICE_CD = NVL (P_OFFICE_CD, O.OFFICE_CD))
                          OR (NVL (P_DESCENDANT_FLAG, 0) = 1
                              AND E.OFFICE_CD IN
                                       (    SELECT   O.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP O
                                        START WITH   O.OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR O.OFFICE_CD =
                                                        O.CONTROL_OFFICE_CD)))
          GROUP BY   E.EMP_NM_ENG,
                     E.DESIG_CD,
                     E.EMPLOYMENT_TP_CD,
                     E.DIVDEPT_CD,
                     E.JOIN_DT,
                     E.GROSS_EARNING,
                     E.LAST_PROM_DT,
                     E.EMP_FILE_NO,
                     E.EMP_ID,
                     O.OFFICE_NM,
                     E.SEX_CD,
                     O.OFFICE_CD,
                     E.ACTIVITY_CD,
                     E.EMP_GID
          ORDER BY   E.SEX_CD,
                     O.OFFICE_CD,
                     E.DESIG_CD,
                     E.EMP_ID)
      LOOP
         L_GENDER.EMP_NM_ENG := I.EMP_NM_ENG;
         L_GENDER.DESIG_NM := I.DESIG_NM;
         L_GENDER.EMPLOYMENT_TP_NM := I.EMPLOYMENT_TP_NM;
         L_GENDER.EMP_ID := I.EMP_ID;
         L_GENDER.OFFICE_NM := I.OFFICE_NM;
         L_GENDER.GENDER_NM := I.GENDER_NM;
         L_GENDER.DIVITION_NM := I.DIVITION_NM;
         L_GENDER.JOIN_DT := I.JOIN_DT;
         L_GENDER.CURR_BASIC := I.GROSS_EARNING;
         L_GENDER.DEGREE_NM := I.DEGREE_NM;
         L_GENDER.LAST_PROM_DT := I.LAST_PROM_DT;
         L_GENDER.EMP_FILE_NO := I.EMP_FILE_NO;
         L_GENDER.ACTIVITY_CD := I.ACTIVITY_CD;
         L_GENDER.ACTVITY_NM := I.ACTVITY_NM;
         PIPE ROW (L_GENDER);
      END LOOP;

      RETURN;
   END FUN_EMP_AS_PER_GENDER;


   FUNCTION FUN_EMP_AS_PER_JOINING_DT (
      P_START_DT           IN DATE,
      P_END_DT             IN DATE,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2
   )
      RETURN EMP_AS_PER_JOINING_DT_TAB
      PIPELINED
   AS
      L_JOINING_DT   EMP_AS_PER_JOINING_DT_ROW;
   BEGIN
      FOR I
      IN (  SELECT   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD) DESIG_NM,
                     E.EMPLOYMENT_TP_CD,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD) EMPLOYMENT_TP_NM,
                     E.EMP_ID,
                     E.EMP_FILE_NO,
                     O.OFFICE_NM,
                     E.JOIN_DT,
                     F_DIVDEPT (E.DIVDEPT_CD) DIVITION_NM,
                     E.CURR_BASIC GROSS_SL,
                     F_DEGREE (MAX (T.DEGREE_CD)) DEGREE_NM,
                     E.LAST_PROM_DT
              FROM   HRM_EMPLOYEE E, HRM_OFFICE O, HRM_EMPLOYEE_EDUCATION T
             WHERE   E.OFFICE_CD = O.OFFICE_CD AND E.EMP_GID(+) = T.EMP_GID
                     AND E.EMPLOYMENT_TP_CD =
                           NVL (P_EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                     AND E.EMP_ID = NVL (P_EMP_ID, E.EMP_ID)
                     AND E.JOIN_DT BETWEEN NVL (P_START_DT, E.JOIN_DT)
                                       AND  NVL (P_END_DT, E.JOIN_DT)
                     AND ( (NVL (P_DESCENDANT_FLAG, 0) = 0
                            AND E.OFFICE_CD = NVL (P_OFFICE_CD, O.OFFICE_CD))
                          OR (NVL (P_DESCENDANT_FLAG, 0) = 1
                              AND E.OFFICE_CD IN
                                       (    SELECT   O.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP O
                                        START WITH   O.OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR O.OFFICE_CD =
                                                        O.CONTROL_OFFICE_CD)))
          GROUP BY   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD),
                     E.EMPLOYMENT_TP_CD,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD),
                     E.EMP_ID,
                     O.OFFICE_NM,
                     E.JOIN_DT,
                     F_DIVDEPT (E.DIVDEPT_CD),
                     E.CURR_BASIC,
                     O.OFFICE_CD,
                     E.DESIG_CD,
                     E.EMP_FILE_NO,
                     E.LAST_PROM_DT
          ORDER BY   E.JOIN_DT,
                     O.OFFICE_CD,
                     E.DESIG_CD,
                     E.EMP_ID)
      LOOP
         L_JOINING_DT.EMP_NM_ENG := I.EMP_NM_ENG;
         L_JOINING_DT.DESIG_NM := I.DESIG_NM;
         L_JOINING_DT.EMP_ID := I.EMP_ID;
         L_JOINING_DT.OFFICE_NM := I.OFFICE_NM;
         L_JOINING_DT.JOIN_DT := I.JOIN_DT;
         L_JOINING_DT.EMPLOYMENT_TP_CD := I.EMPLOYMENT_TP_CD;
         L_JOINING_DT.EMPLOYMENT_TP_NM := I.EMPLOYMENT_TP_NM;
         L_JOINING_DT.EMP_FILE_NO := I.EMP_FILE_NO;
         L_JOINING_DT.DIVITION_NM := I.DIVITION_NM;
         L_JOINING_DT.GROSS_SL := I.GROSS_SL;
         L_JOINING_DT.DEGREE_NM := I.DEGREE_NM;
         L_JOINING_DT.LAST_PROM_DT := I.LAST_PROM_DT;
         PIPE ROW (L_JOINING_DT);
      END LOOP;

      RETURN;
   END FUN_EMP_AS_PER_JOINING_DT;


   FUNCTION FUN_EMP_AS_PER_SALARY (
      P_FROM_SAL           IN NUMBER,
      P_TO_SAL             IN NUMBER,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_ACTIVITY_CD        IN HRM_ACTIVITY_STAT.ACTIVITY_CD%TYPE
   )
      RETURN EMP_AS_PER_SALARY_TAB
      PIPELINED
   AS
      L_SAL   EMP_AS_PER_SALARY_ROW;
   BEGIN
      FOR I
      IN (  SELECT   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD) DESIG_NM,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD) EMPLOYMENT_TP_NM,
                     E.EMP_ID,
                     O.OFFICE_NM,
                     E.GROSS_EARNING
              FROM   HRM_EMPLOYEE E, HRM_OFFICE O
             WHERE       E.OFFICE_CD = O.OFFICE_CD
                     AND E.EMPLOYMENT_TP_CD = P_EMPLOYMENT_TP_CD
                     AND E.ACTIVITY_CD = NVL (P_ACTIVITY_CD, E.ACTIVITY_CD)
                     AND E.EMP_ID = NVL (P_EMP_ID, E.EMP_ID)
                     AND E.GROSS_EARNING BETWEEN NVL (P_FROM_SAL,
                                                      E.GROSS_EARNING)
                                             AND  NVL (P_TO_SAL,
                                                       E.GROSS_EARNING)
                     AND ( (NVL (P_DESCENDANT_FLAG, 0) = 0
                            AND E.OFFICE_CD = NVL (P_OFFICE_CD, O.OFFICE_CD))
                          OR (NVL (P_DESCENDANT_FLAG, 0) = 1
                              AND E.OFFICE_CD IN
                                       (    SELECT   O.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP O
                                        START WITH   O.OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR O.OFFICE_CD =
                                                        O.CONTROL_OFFICE_CD)))
          ORDER BY   E.DESIG_CD,
                     E.GROSS_EARNING,
                     O.OFFICE_CD,
                     E.EMP_ID)
      LOOP
         L_SAL.EMP_NM_ENG := I.EMP_NM_ENG;
         L_SAL.DESIG_NM := I.DESIG_NM;
         L_SAL.EMPLOYMENT_TP_NM := I.EMPLOYMENT_TP_NM;
         L_SAL.EMP_ID := I.EMP_ID;
         L_SAL.OFFICE_NM := I.OFFICE_NM;
         L_SAL.CURR_BASIC := I.GROSS_EARNING;
         PIPE ROW (L_SAL);
      END LOOP;

      RETURN;
   END FUN_EMP_AS_PER_SALARY;


   FUNCTION FUN_EMP_AS_PER_EDU_QUALI (
      P_DEGREE_CD          IN VARCHAR2,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_OFF_STATUS         IN HRM_OFFICE.OFFICE_STATUS%TYPE
   )
      RETURN EMP_AS_PER_EDU_QUALI_TAB
      PIPELINED
   AS
      L_EDU_QUALI   EMP_AS_PER_EDU_QUALI_ROW;
   BEGIN
      FOR I
      IN (  SELECT   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD) DESIG_NM,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD) EMPLOYMENT_TP_NM,
                     E.EMP_ID,
                     E.EMP_FILE_NO,
                     F_DIVDEPT (E.DIVDEPT_CD) DIVITION_NM,
                     E.JOIN_DT,
                     E.CURR_BASIC,
                     E.LAST_PROM_DT,
                     O.OFFICE_NM,
                     FUN_EMP_EDU_QUALIFICATION_NAME (E.EMP_GID) DEGREE_NM
              FROM   HRM_EMPLOYEE E, HRM_OFFICE O
             WHERE   E.OFFICE_CD = O.OFFICE_CD
                     AND E.EMPLOYMENT_TP_CD =
                           NVL (P_EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                     AND E.EMP_ID = NVL (P_EMP_ID, E.EMP_ID)
                     AND E.ACTIVITY_CD = NVL (P_OFF_STATUS, E.ACTIVITY_CD)
                     AND (P_DEGREE_CD IS NULL
                          OR (P_DEGREE_CD IS NOT NULL
                              AND E.EMP_GID IN (SELECT   EMP_GID
                                                  FROM   HRM_EMPLOYEE_EDUCATION
                                                 WHERE   FUN_EMP_DEGREE_CODE (
                                                            E.EMP_GID
                                                         ) = P_DEGREE_CD)))
                     AND ( (NVL (P_DESCENDANT_FLAG, 0) = 0
                            AND E.OFFICE_CD = NVL (P_OFFICE_CD, O.OFFICE_CD))
                          OR (NVL (P_DESCENDANT_FLAG, 0) = 1
                              AND E.OFFICE_CD IN
                                       (    SELECT   O.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP O
                                        START WITH   O.OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR O.OFFICE_CD =
                                                        O.CONTROL_OFFICE_CD)))
          GROUP BY   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD),
                     E.EMPLOYMENT_TP_CD,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD),
                     E.EMP_ID,
                     O.OFFICE_NM,
                     E.JOIN_DT,
                     F_DIVDEPT (E.DIVDEPT_CD),
                     E.CURR_BASIC,
                     O.OFFICE_CD,
                     E.DESIG_CD,
                     E.EMP_FILE_NO,
                     E.EMP_GID,
                     E.LAST_PROM_DT
          ORDER BY   O.OFFICE_CD, E.DESIG_CD, E.EMP_ID)
      LOOP
         L_EDU_QUALI.EMP_NM_ENG := I.EMP_NM_ENG;
         L_EDU_QUALI.EMPLOYMENT_TP_NM := I.EMPLOYMENT_TP_NM;
         L_EDU_QUALI.DESIG_NM := I.DESIG_NM;
         L_EDU_QUALI.EMP_ID := I.EMP_ID;
         L_EDU_QUALI.OFFICE_NM := I.OFFICE_NM;
         L_EDU_QUALI.DEGREE_NM := I.DEGREE_NM;
         L_EDU_QUALI.EMP_FILE_NO := I.EMP_FILE_NO;
         L_EDU_QUALI.DIVITION_NM := I.DIVITION_NM;
         L_EDU_QUALI.JOIN_DT := I.JOIN_DT;
         L_EDU_QUALI.CURR_BASIC := I.CURR_BASIC;
         L_EDU_QUALI.LAST_PROM_DT := I.LAST_PROM_DT;
         PIPE ROW (L_EDU_QUALI);
      END LOOP;

      RETURN;
   END FUN_EMP_AS_PER_EDU_QUALI;


   FUNCTION FUN_EMP_AS_PER_AGE_SERVICE (
      P_SERVICE_FROM       IN NUMBER,
      P_SERVICE_TO         IN NUMBER,
      P_EMPLOYMENT_TP_CD   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2
   )
      RETURN EMP_AS_PER_AGE_SERVICE_TAB
      PIPELINED
   AS
      L_SERV_SEN   EMP_AS_PER_AGE_SERVICE_ROW;
   BEGIN
      FOR I
      IN (  SELECT   E.EMP_NM_ENG,
                     REP_F_DESIG (E.DESIG_CD) DESIG_NM,
                     FUN_EMP_TYPE (E.EMPLOYMENT_TP_CD) EMPLOYMENT_TP_NM,
                     E.EMP_ID,
                     E.EMP_FILE_NO,
                     F_DIVDEPT (E.DIVDEPT_CD) DIVITION_NM,
                     E.JOIN_DT,
                     E.JOIN_DT JOIN_P_OFFICE,
                     FUN_EMP_EDU_QUALIFICATION_NAME (E.EMP_GID) DEGREE_NM,
                     O.OFFICE_NM,
                     E.CONFIRM_DT,
                     E.CURR_BASIC,
                     TO_NUMBER (
                        FLOOR ( (TRUNC (SYSDATE) - E.CONFIRM_DT) / 365)
                     )
                        YY,
                     TO_NUMBER(FLOOR(MOD ( (TRUNC (SYSDATE) - E.CONFIRM_DT),
                                          365)
                                     / 30))
                        MM,
                     TO_NUMBER (
                        MOD (MOD ( (TRUNC (SYSDATE) - E.CONFIRM_DT), 365), 30)
                     )
                        DD
              FROM   HRM_EMPLOYEE E, HRM_OFFICE O
             WHERE   E.OFFICE_CD = O.OFFICE_CD
                     AND E.EMPLOYMENT_TP_CD =
                           NVL (P_EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                     AND E.EMP_ID = NVL (P_EMP_ID, E.EMP_ID)
                     AND (P_SERVICE_FROM IS NULL
                          OR (P_SERVICE_FROM IS NOT NULL
                              AND TO_NUMBER(FLOOR( (TRUNC (SYSDATE)
                                                    - E.CONFIRM_DT)
                                                  / 365)) BETWEEN P_SERVICE_FROM
                                                              AND  P_SERVICE_TO))
                     AND ( (NVL (P_DESCENDANT_FLAG, 0) = 0
                            AND E.OFFICE_CD = NVL (P_OFFICE_CD, O.OFFICE_CD))
                          OR (NVL (P_DESCENDANT_FLAG, 0) = 1
                              AND E.OFFICE_CD IN
                                       (    SELECT   O.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP O
                                        START WITH   O.OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR O.OFFICE_CD =
                                                        O.CONTROL_OFFICE_CD)))
          ORDER BY   E.CONFIRM_DT,
                     O.OFFICE_CD,
                     E.DESIG_CD,
                     E.EMP_ID)
      LOOP
         L_SERV_SEN.EMP_NM_ENG := I.EMP_NM_ENG;
         L_SERV_SEN.DESIG_NM := I.DESIG_NM;
         L_SERV_SEN.EMPLOYMENT_TP_NM := I.EMPLOYMENT_TP_NM;
         L_SERV_SEN.EMP_ID := I.EMP_ID;
         L_SERV_SEN.OFFICE_NM := I.OFFICE_NM;
         L_SERV_SEN.CONFIRM_DT := I.CONFIRM_DT;
         L_SERV_SEN.CURR_BASIC := I.CURR_BASIC;
         L_SERV_SEN.YY := I.YY;
         L_SERV_SEN.MM := I.MM;
         L_SERV_SEN.DD := I.DD;
         L_SERV_SEN.EMP_FILE_NO := I.EMP_FILE_NO;
         L_SERV_SEN.DIVITION_NM := I.DIVITION_NM;
         L_SERV_SEN.JOIN_DT := I.JOIN_DT;

         L_SERV_SEN.JOIN_P_OFFICE := I.JOIN_P_OFFICE;
         L_SERV_SEN.DEGREE_NM := I.DEGREE_NM;
         PIPE ROW (L_SERV_SEN);
      END LOOP;

      RETURN;
   END FUN_EMP_AS_PER_AGE_SERVICE;


   FUNCTION FUN_LOAN_RECOVER_SUMMERY (
      P_EMP_GID           IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD         IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG   IN VARCHAR2
   )
      RETURN EMP_WELFARE_LOAN_SUMMERY_TAB
      PIPELINED
   IS
      L_BIZ              EMP_WELFARE_LOAN_SUMMERY_RAW;
      V_PRINCIPLE        NUMBER;
      V_SERVICE_CHARGE   NUMBER;
      V_INSTALLMENT      NUMBER;
      V_BALANCE          NUMBER;
      V_LOAN_DURATION    NUMBER;
      V_INTEREST_RATE    NUMBER;



      CURSOR LOAN_SUMMERY
      IS
         (SELECT   E.EMP_GID,
                   E.EMP_NM_ENG,
                   E.DESIG_CD,
                   F_DESIG (E.DESIG_CD) DESIG_NM,
                   E.OFFICE_CD,
                   F_OFFICE (E.OFFICE_CD) OFFICE_NM,
                   A.LOAN_AMT,
                   A.INSTL_AMOUNT,
                   A.LOAN_DURATION,
                   A.INTEREST_RATE
            FROM   PAY_LOAN_APPL_APPRVL A, HRM_EMPLOYEE E
           WHERE       E.EMP_GID = A.EMP_GID
                   AND A.EMP_GID = NVL (P_EMP_GID, A.EMP_GID)
                   AND A.LOAN_STATUS = 'P'
                   AND ( (NVL (P_DESCENDANT_FLAG, '0') = '0'
                          AND E.OFFICE_CD = NVL (P_OFFICE_CD, E.OFFICE_CD))
                        OR (NVL (P_DESCENDANT_FLAG, '0') = '1'
                            AND E.OFFICE_CD IN
                                     (    SELECT   OFFICE_CD
                                            FROM   HRM_OFFICE_SETUP
                                      START WITH   OFFICE_CD = P_OFFICE_CD
                                      CONNECT BY   PRIOR OFFICE_CD =
                                                      CONTROL_OFFICE_CD))));

      LOAN_SUMMERY_REC   LOAN_SUMMERY%ROWTYPE;
   BEGIN
      OPEN LOAN_SUMMERY;

      LOOP
         FETCH LOAN_SUMMERY INTO   LOAN_SUMMERY_REC;

         EXIT WHEN LOAN_SUMMERY%NOTFOUND;

         V_PRINCIPLE := LOAN_SUMMERY_REC.LOAN_AMT;

         FOR I IN 1 .. LOAN_SUMMERY_REC.LOAN_DURATION
         LOOP
            IF V_PRINCIPLE > 0
            THEN
               V_LOAN_DURATION :=
                  NVL (LOAN_SUMMERY_REC.LOAN_DURATION, 0) / 100;
               V_SERVICE_CHARGE :=
                  (V_LOAN_DURATION / LOAN_SUMMERY_REC.LOAN_DURATION)
                  * V_PRINCIPLE;

               V_BALANCE :=
                  ROUND (
                     ( (V_PRINCIPLE + V_SERVICE_CHARGE)
                      - LOAN_SUMMERY_REC.INSTL_AMOUNT),
                     2
                  );

               L_BIZ.EMP_GID := LOAN_SUMMERY_REC.EMP_GID;
               L_BIZ.EMP_NM_ENG := LOAN_SUMMERY_REC.EMP_NM_ENG;
               L_BIZ.DESIG_CD := LOAN_SUMMERY_REC.DESIG_CD;
               L_BIZ.DESIG_NM := LOAN_SUMMERY_REC.DESIG_NM;
               L_BIZ.OFFICE_CD := LOAN_SUMMERY_REC.OFFICE_CD;
               L_BIZ.OFFICE_NM := LOAN_SUMMERY_REC.OFFICE_NM;
               L_BIZ.PRIN_INSTALLMENT := V_PRINCIPLE;
               L_BIZ.INSTL_AMOUNT := LOAN_SUMMERY_REC.INSTL_AMOUNT;
               L_BIZ.SERVICE_CHARGE := V_SERVICE_CHARGE;
               L_BIZ.BALANCE := V_BALANCE;

               V_PRINCIPLE := V_BALANCE;
            END IF;

            PIPE ROW (L_BIZ);
         END LOOP;
      END LOOP;

      CLOSE LOAN_SUMMERY;

      RETURN;
   END FUN_LOAN_RECOVER_SUMMERY;



   FUNCTION FUN_EMP_ORGANOGRAM (
      P_EMP_TYPE_CD_FROM   IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_TYPE_CD_TO     IN HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE,
      P_EMP_ID             IN HRM_EMPLOYEE.EMP_ID%TYPE,
      P_OFFICE_CD          IN HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_FLAG    IN VARCHAR2,
      P_ACTIVITY_CD        IN HRM_ACTIVITY_STAT.ACTIVITY_CD%TYPE
   )
      RETURN EMP_ORGANOGRAM_TAB
      PIPELINED
   AS
      L_EMP_ORG        EMP_ORGANOGRAM_ROW;
      V_AGNT_OFFC_CD   HRM_AGENT.OFFICE_CD%TYPE;
      V_UM_OFFC_CD     HRM_AGENT.OFFICE_CD%TYPE;
      V_BM_OFFC_CD     HRM_AGENT.OFFICE_CD%TYPE;
      V_AGM_OFFC_CD    HRM_AGENT.OFFICE_CD%TYPE;
      V_DGM_OFFC_CD    HRM_AGENT.OFFICE_CD%TYPE;
      V_GM_OFFC_CD     HRM_AGENT.OFFICE_CD%TYPE;
      -- V_RC_OFFC_CD     HRM_AGENT.OFFICE_CD%TYPE;
      V_OFFC_CD        HRM_AGENT.OFFICE_CD%TYPE;
      V_UM_GID         HRM_EMPLOYEE.EMP_GID%TYPE;
      V_UM_ID          VARCHAR2 (50);
      V_BM_GID         HRM_EMPLOYEE.EMP_GID%TYPE;
      V_BM_ID          VARCHAR2 (50);
      V_AGM_GID        HRM_EMPLOYEE.EMP_GID%TYPE;
      V_AGM_ID         VARCHAR2 (50);
      V_DGM_GID        HRM_EMPLOYEE.EMP_GID%TYPE;
      V_DGM_ID         VARCHAR2 (50);
      V_GM_GID         HRM_EMPLOYEE.EMP_GID%TYPE;
      -- V_RC_GID         VARCHAR2 (50);
      V_ORG_SETUP      VARCHAR (100);
      V_ERROR          VARCHAR (2000);
      V_EMP_TP_CD      CHAR (100);
   BEGIN
      FOR I
      IN (  SELECT   OFFICE_CD,
                     EMP_TYPE_CD,
                     EMP_ID,
                     EMP_FILE_NO,
                     EMP_OR_AGNT_NM,
                     EMP_GID
              FROM   (SELECT   OFFICE_CD,
                               '05' EMP_TYPE_CD,
                               AGENT_ID EMP_ID,
                               FILE_NO EMP_FILE_NO,
                               AGENT_NM_ENG EMP_OR_AGNT_NM,
                               DEV_EMP_GID EMP_GID
                        FROM   HRM_AGENT
                       WHERE   ACTIVITY_CD = NVL (P_ACTIVITY_CD, ACTIVITY_CD)
                               AND AGENT_ID = NVL (P_EMP_ID, AGENT_ID)
                               AND P_EMP_TYPE_CD_FROM = '05'
                               AND ( (NVL (P_DESCENDANT_FLAG, '0') = '0'
                                      AND OFFICE_CD =
                                            NVL (P_OFFICE_CD, OFFICE_CD))
                                    OR (NVL (P_DESCENDANT_FLAG, '0') = '1'
                                        AND OFFICE_CD IN
                                                 (    SELECT   OFFICE_CD
                                                        FROM   HRM_OFFICE_SETUP
                                                  START WITH   OFFICE_CD =
                                                                  P_OFFICE_CD
                                                  CONNECT BY   PRIOR OFFICE_CD =
                                                                  CONTROL_OFFICE_CD)))
                      UNION
                      SELECT   OFFICE_CD,
                               EMP_TYPE_CD,
                               EMP_ID,
                               EMP_FILE_NO,
                               EMP_NM_ENG EMP_OR_AGNT_NM,
                               EMP_GID
                        FROM   HRM_EMPLOYEE E, HRM_EMPLOYMENT_TYPE T
                       WHERE   EMP_ID = NVL (P_EMP_ID, EMP_ID)
                               AND EMP_TYPE_CD =
                                     NVL (P_EMP_TYPE_CD_FROM, EMP_TYPE_CD)
                               AND ( (NVL (P_DESCENDANT_FLAG, '0') = '0'
                                      AND OFFICE_CD =
                                            NVL (P_OFFICE_CD, OFFICE_CD))
                                    OR (NVL (P_DESCENDANT_FLAG, '0') = '1'
                                        AND OFFICE_CD IN
                                                 (    SELECT   OFFICE_CD
                                                        FROM   HRM_OFFICE_SETUP
                                                  START WITH   OFFICE_CD =
                                                                  P_OFFICE_CD
                                                  CONNECT BY   PRIOR OFFICE_CD =
                                                                  CONTROL_OFFICE_CD)))
                               AND E.ACTIVITY_CD =
                                     NVL (P_ACTIVITY_CD, E.ACTIVITY_CD)
                               AND T.OFFICIAL_REL = '0'
                               AND E.EMPLOYMENT_TP_CD = T.EMPLOYMENT_TP_CD)
          ORDER BY   OFFICE_CD)
      LOOP
         L_EMP_ORG.OFFICE_CD := NULL;
         L_EMP_ORG.FA_ID := NULL;
         L_EMP_ORG.FA_EMP_NM := NULL;
         L_EMP_ORG.UM_ID := NULL;
         L_EMP_ORG.UM_EMP_NM := NULL;
         L_EMP_ORG.BM_ID := NULL;
         L_EMP_ORG.BM_EMP_NM := NULL;
         L_EMP_ORG.AGM_ID := NULL;
         L_EMP_ORG.AGM_EMP_NM := NULL;
         L_EMP_ORG.DGM_ID := NULL;
         L_EMP_ORG.DGM_EMP_NM := NULL;
         L_EMP_ORG.GM_ID := NULL;
         L_EMP_ORG.GM_EMP_NM := NULL;
         -- L_EMP_ORG.RC_ID := NULL;
         --  L_EMP_ORG.RC_EMP_NM := NULL;
         L_EMP_ORG.OFFICE_CD := I.OFFICE_CD;

         IF I.EMP_TYPE_CD = '05'
         THEN
            FOR J
            IN (SELECT   AGENT_ID EMP_ID,
                         AGENT_NM_ENG EMP_NM,
                         '05' EMP_TYPE_CD,
                         OFFICE_CD
                  FROM   HRM_AGENT
                 WHERE   AGENT_ID = I.EMP_ID
                UNION
                    SELECT   F_EMP_ID (EMPLOYEE_GID) EMP_ID,
                             REP_F_EMPLOYEE (EMPLOYEE_GID) EMP_NM,
                             F_EMP_TYPE_CD (EMPLOYEE_GID) EMP_TYPE_CD,
                             OFFICE_CODE OFFICE_CD
                      FROM   HRM_EMPLOYEE_SETUP S
                     WHERE   S.STATUS = '1'
                START WITH   EMPLOYEE_GID = (SELECT   DEV_EMP_GID
                                               FROM   HRM_AGENT
                                              WHERE   AGENT_ID = I.EMP_ID)
                CONNECT BY   PRIOR H_EMPLOYEE_GID = EMPLOYEE_GID)
            LOOP
               IF J.EMP_TYPE_CD = '05' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.FA_ID := J.EMP_ID;
                  L_EMP_ORG.FA_EMP_NM := J.EMP_NM;
               END IF;

               IF J.EMP_TYPE_CD = '06' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.UM_ID := J.EMP_ID;
                  L_EMP_ORG.UM_EMP_NM := J.EMP_NM;
               END IF;

               IF J.EMP_TYPE_CD = '07' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.BM_ID := J.EMP_ID;
                  L_EMP_ORG.BM_EMP_NM := J.EMP_NM;
               END IF;

               IF J.EMP_TYPE_CD = '14' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.AGM_ID := J.EMP_ID;
                  L_EMP_ORG.AGM_EMP_NM := J.EMP_NM;
               END IF;

               IF J.EMP_TYPE_CD = '15' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.DGM_ID := J.EMP_ID;
                  L_EMP_ORG.DGM_EMP_NM := J.EMP_NM;
               END IF;

               IF J.EMP_TYPE_CD = '16' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.GM_ID := J.EMP_ID;
                  L_EMP_ORG.GM_EMP_NM := J.EMP_NM;
               END IF;
            /* IF J.EMP_TYPE_CD = '11' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
             THEN
                L_EMP_ORG.RC_ID := J.EMP_ID;
                L_EMP_ORG.RC_EMP_NM := J.EMP_NM;
             END IF; */
            END LOOP;
         ELSE
            L_EMP_ORG.OFFICE_CD := I.OFFICE_CD;

            FOR J IN (    SELECT   F_EMP_ID (EMPLOYEE_GID) EMP_ID,
                                   REP_F_EMPLOYEE (EMPLOYEE_GID) EMP_NM,
                                   F_EMP_TYPE_CD (EMPLOYEE_GID) EMP_TYPE_CD,
                                   OFFICE_CODE OFFICE_CD
                            FROM   HRM_EMPLOYEE_SETUP S
                           WHERE   S.STATUS = '1'
                      START WITH   EMPLOYEE_GID = I.EMP_GID
                      CONNECT BY   PRIOR H_EMPLOYEE_GID = EMPLOYEE_GID)
            LOOP
               IF J.EMP_TYPE_CD = '05' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.FA_ID := J.EMP_ID;
                  L_EMP_ORG.FA_EMP_NM := J.EMP_NM;
               END IF;

               IF J.EMP_TYPE_CD = '06' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.UM_ID := J.EMP_ID;
                  L_EMP_ORG.UM_EMP_NM := J.EMP_NM;
               END IF;

               IF J.EMP_TYPE_CD = '07' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.BM_ID := J.EMP_ID;
                  L_EMP_ORG.BM_EMP_NM := J.EMP_NM;
               END IF;

               IF J.EMP_TYPE_CD = '14' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.AGM_ID := J.EMP_ID;
                  L_EMP_ORG.AGM_EMP_NM := J.EMP_NM;
               END IF;

               IF J.EMP_TYPE_CD = '15' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.DGM_ID := J.EMP_ID;
                  L_EMP_ORG.DGM_EMP_NM := J.EMP_NM;
               END IF;

               IF J.EMP_TYPE_CD = '16' AND J.EMP_TYPE_CD <= P_EMP_TYPE_CD_TO
               THEN
                  L_EMP_ORG.GM_ID := J.EMP_ID;
                  L_EMP_ORG.GM_EMP_NM := J.EMP_NM;
               END IF;
            /* IF J.EMP_TYPE_CD = '11'
             THEN
                L_EMP_ORG.RC_ID := J.EMP_ID;
                L_EMP_ORG.RC_EMP_NM := J.EMP_NM;
             END IF; */
            END LOOP;
         END IF;



         PIPE ROW (L_EMP_ORG);
      END LOOP;

      RETURN;
   END FUN_EMP_ORGANOGRAM;



   FUNCTION FUN_LICENSE_CERTIFICATE (P_REPORT_DATE IN DATE)
      RETURN LICENSE_CERTIFICATE_TAB
      PIPELINED
   AS
      L_LCNS_CRT               LICENSE_CERTIFICATE_ROW;
      V_SEND_TO_IDRA_DT        DATE;
      V_NEXT_SEND_TO_IDRA_DT   DATE;
      V_APPRV_DT               DATE;
      V_L_APPL_CNT             NUMBER;
      V_C_APPL_CNT             NUMBER;
      V_L_APPRV_CNT            NUMBER;
      V_C_APPRV_CNT            NUMBER;
      V_ERROR                  VARCHAR (2000);
   BEGIN
      FOR I
      IN (  SELECT   SEND_TO_IDRA_DT
              FROM   (SELECT   SEND_TO_IDRA_DT
                        FROM   HRM_AGENT_LICENSE
                       WHERE   SEND_TO_IDRA_DT BETWEEN TRUNC (
                                                          TO_DATE (
                                                             P_REPORT_DATE
                                                          ),
                                                          'YEAR'
                                                       )
                                                   AND  P_REPORT_DATE
                               AND LICENSE_TP = 'N'
                               AND SEND_TO_IDRA_ST = '1'
                      UNION
                      SELECT   SEND_TO_IDRA_DT
                        FROM   HRM_EMP_CERT_APPL
                       WHERE   SEND_TO_IDRA_DT BETWEEN TRUNC (
                                                          TO_DATE (
                                                             P_REPORT_DATE
                                                          ),
                                                          'YEAR'
                                                       )
                                                   AND  P_REPORT_DATE
                               AND CERTIFICATE_TP = 'N'
                               AND SEND_TO_IDRA_ST = '1')
          ORDER BY   SEND_TO_IDRA_DT)
      LOOP
         SELECT   NEXT_SEND_TO_IDRA_DT
           INTO   V_NEXT_SEND_TO_IDRA_DT
           FROM   (  SELECT   NEXT_SEND_TO_IDRA_DT
                       FROM   (SELECT   SEND_TO_IDRA_DT NEXT_SEND_TO_IDRA_DT
                                 FROM   HRM_AGENT_LICENSE
                                WHERE   LICENSE_TP = 'N'
                                        AND SEND_TO_IDRA_ST = '1'
                               UNION
                               SELECT   SEND_TO_IDRA_DT NEXT_SEND_TO_IDRA_DT
                                 FROM   HRM_EMP_CERT_APPL
                                WHERE   CERTIFICATE_TP = 'N'
                                        AND SEND_TO_IDRA_ST = '1')
                   ORDER BY   NEXT_SEND_TO_IDRA_DT)
          WHERE   NEXT_SEND_TO_IDRA_DT > I.SEND_TO_IDRA_DT AND ROWNUM = 1;



         BEGIN
              SELECT   SEND_TO_IDRA_DT, COUNT (AGENT_ID)
                INTO   L_LCNS_CRT.SEND_TO_IDRA_DT, L_LCNS_CRT.L_APPL_CNT
                FROM   HRM_AGENT_LICENSE
               WHERE       SEND_TO_IDRA_DT >= I.SEND_TO_IDRA_DT
                       AND SEND_TO_IDRA_DT < V_NEXT_SEND_TO_IDRA_DT
                       AND LICENSE_TP = 'N'
                       AND SEND_TO_IDRA_ST = '1'
            GROUP BY   SEND_TO_IDRA_DT;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;


         BEGIN
              SELECT   MAX (APPRV_DT), SUM (COUNT (AGENT_ID))
                INTO   L_LCNS_CRT.APPRV_DT, L_LCNS_CRT.L_APPRV_CNT
                FROM   HRM_AGENT_LICENSE
               WHERE       APPRV_DT >= I.SEND_TO_IDRA_DT
                       AND APPRV_DT < V_NEXT_SEND_TO_IDRA_DT
                       AND LICENSE_TP = 'N'
                       AND SEND_TO_IDRA_ST = '1'
            GROUP BY   APPRV_DT;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;


         BEGIN
              SELECT   SEND_TO_IDRA_DT, COUNT (EMP_GID)
                INTO   L_LCNS_CRT.SEND_TO_IDRA_DT, L_LCNS_CRT.C_APPL_CNT
                FROM   HRM_EMP_CERT_APPL
               WHERE       SEND_TO_IDRA_DT >= I.SEND_TO_IDRA_DT
                       AND SEND_TO_IDRA_DT < V_NEXT_SEND_TO_IDRA_DT
                       AND CERTIFICATE_TP = 'N'
                       AND SEND_TO_IDRA_ST = '1'
            GROUP BY   SEND_TO_IDRA_DT;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;


         BEGIN
              SELECT   MAX (APPRV_DT) APPRV_DT, SUM (COUNT (EMP_GID)) CNT
                INTO   L_LCNS_CRT.APPRV_DT, L_LCNS_CRT.C_APPRV_CNT
                FROM   HRM_EMP_CERT_APPL
               WHERE       APPRV_DT >= I.SEND_TO_IDRA_DT
                       AND APPRV_DT < V_NEXT_SEND_TO_IDRA_DT
                       AND CERTIFICATE_TP = 'N'
                       AND SEND_TO_IDRA_ST = '1'
            GROUP BY   APPRV_DT;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;

         PIPE ROW (L_LCNS_CRT);
      END LOOP;
   END;



   FUNCTION FUN_LICNS_CRTFCT_REQST (P_REPORT_DATE IN DATE)
      RETURN LICNS_CRTFCT_REQST_TAB
      PIPELINED
   AS
      L_LCNS_CRT       LICNS_CRTFCT_REQST_ROW;
      V_SEND_DT        DATE;
      V_NEXT_SEND_DT   DATE;
      V_L_APPL_CNT     NUMBER;
      V_C_APPL_CNT     NUMBER;
      V_L_SEND_CNT     NUMBER;
      V_C_SEND_CNT     NUMBER;
      V_ERROR          VARCHAR (2000);
   BEGIN
      FOR I
      IN (  SELECT   SEND_TO_IDRA_DT SEND_DT
              FROM   (SELECT   SEND_TO_IDRA_DT
                        FROM   HRM_AGENT_LICENSE
                       WHERE   SEND_TO_IDRA_DT BETWEEN TRUNC (
                                                          TO_DATE (
                                                             P_REPORT_DATE
                                                          ),
                                                          'YEAR'
                                                       )
                                                   AND  P_REPORT_DATE
                               AND LICENSE_TP = 'N'
                               AND SEND_TO_IDRA_ST = '1'
                      UNION
                      SELECT   SEND_TO_IDRA_DT
                        FROM   HRM_EMP_CERT_APPL
                       WHERE   SEND_TO_IDRA_DT BETWEEN TRUNC (
                                                          TO_DATE (
                                                             P_REPORT_DATE
                                                          ),
                                                          'YEAR'
                                                       )
                                                   AND  P_REPORT_DATE
                               AND CERTIFICATE_TP = 'N'
                               AND SEND_TO_IDRA_ST = '1')
          ORDER BY   SEND_TO_IDRA_DT)
      LOOP
         L_LCNS_CRT.SEND_DT := I.SEND_DT;


         BEGIN
            SELECT   MIN (APPL_DT) MIN_APPL_DT, MAX (APPL_DT) MAX_APPL_DT
              INTO   L_LCNS_CRT.MIN_APPL_DT, L_LCNS_CRT.MAX_APPL_DT
              FROM   (SELECT   APPL_DT
                        FROM   HRM_AGENT_LICENSE
                       WHERE   LICENSE_TP = 'N' AND SEND_TO_IDRA_ST = '1'
                      UNION
                      SELECT   APPL_DT
                        FROM   HRM_EMP_CERT_APPL
                       WHERE   CERTIFICATE_TP = 'N' AND SEND_TO_IDRA_ST = '1')
             WHERE   APPL_DT <= I.SEND_DT
                     AND APPL_DT >=
                           NVL (
                              V_SEND_DT + 1,
                              TO_DATE (
                                 '01/01/' || TO_CHAR (P_REPORT_DATE, 'rrrr'),
                                 'dd/mm/rrrr'
                              )
                           );

            V_SEND_DT := I.SEND_DT;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;


         BEGIN
            SELECT   COUNT (AGENT_ID)
              INTO   L_LCNS_CRT.L_APPL_CNT
              FROM   HRM_AGENT_LICENSE
             WHERE   APPL_DT BETWEEN L_LCNS_CRT.MIN_APPL_DT
                                 AND  L_LCNS_CRT.MAX_APPL_DT
                     AND LICENSE_TP = 'N'
                     AND SEND_TO_IDRA_ST = '1';
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;


         BEGIN
            SELECT   COUNT (EMP_GID)
              INTO   L_LCNS_CRT.C_APPL_CNT
              FROM   HRM_EMP_CERT_APPL
             WHERE   APPL_DT BETWEEN L_LCNS_CRT.MIN_APPL_DT
                                 AND  L_LCNS_CRT.MAX_APPL_DT
                     AND CERTIFICATE_TP = 'N'
                     AND SEND_TO_IDRA_ST = '1';
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;


         BEGIN
            SELECT   COUNT (AGENT_ID)
              INTO   L_LCNS_CRT.L_SEND_CNT
              FROM   HRM_AGENT_LICENSE
             WHERE       SEND_TO_IDRA_DT = I.SEND_DT
                     AND LICENSE_TP = 'N'
                     AND SEND_TO_IDRA_ST = '1';
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;


         BEGIN
            SELECT   COUNT (EMP_GID)
              INTO   L_LCNS_CRT.C_SEND_CNT
              FROM   HRM_EMP_CERT_APPL
             WHERE       SEND_TO_IDRA_DT = I.SEND_DT
                     AND CERTIFICATE_TP = 'N'
                     AND SEND_TO_IDRA_ST = '1';
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;

         PIPE ROW (L_LCNS_CRT);
      END LOOP;
   END;
END PKG_PMIS_REPORT;
/


--
-- PKG_PMIS_REPORT_OLD  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_pmis_report_OLD wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
b
e074 46d4
b/FxOwH+NdagPU6MxR1mtQ7j8UMwg4pVuiBdlyUbi/jklHLXrBTQ6Oix3zx2w5g5DoWR9GW3
WQNNow/NE1NldGp8ektztTgmurC5PVsyZACaOJ9JDgn3X+NfenxOEILW2IOgtQwDcuLBuV2d
c0+1EuTEtR61zqqGtTqa+QW1c7Xkqt5XFHrkgb9emMtO0qVswCazdlGLbEXPBDP/LKK5XnO4
dnnBbLK3CwOgeNebnNmAvhcIEgyGz8VCows7LHe5lSCnm7ONXtcTrmyqQlf4rRJ/NP/kthI6
7WsS93IKchAkoDrv/iw9JHExepnPh7W80nlBRYsZ+j9+M5rFEMcPY8Y4AO2XpV4gD/Q0cps1
/gaz3fGxmAGb3vbbg3EkAX93esteuRxKE2qGMQg1Bvm1LI6cOv7N1kcyGSjrjLgklkDSimit
B3qLnxBQqg+c6+3E6/kmfk8abLF9T3uhGXqBSpksvC5DmSOu19I92XN8i3WLloXS0HkzyLvH
A0ww5JKVbrvtpEpM4h4SqiTPc48IhNpomvsPzBA0KsC/H7UeTILL/q0qLMPsmxnQBwr47hAI
/gz/D9W1zXpZszsPNLwPi2qowANZah/2tTEY/rVPkv4fYw8yYZaFbiR4P05mAI1ymSTD+mWc
+KooTJKT5EvfCosMxZ2aXWyqfrX5ubQQilWVH4I0H5I0rmR6QkW+XdIx2LVXtLQQf2opV3u1
hmefOojVD6VFWEXB+T8PUB/WKHO1OpfqjSTi5YCZZLpOLj3+cB7kPS8idlm/hs6VUcck38/l
fGSaCSNS+OlSkkDkxyMpqa6XID3kUyg0sT+Y/F6xMDMw/ifimFPOowJ7qn7QrhsHDLvRudc0
DJrisJzeKb5ST65MvLw/Ugjw1JLl1Z28JrOHbjpKKxLOMEi+OpXUvyEZSbLOEQa4JFsrThPN
aCgi2fz+OO06tPf+spJzSA1OIQCO/JL1qmmc7rxKJGWSkEMSoU6LGdJFRws0J2ixOxIk+Zof
5BC8quAc+YPkkggwM0KvsD67++x63LgsKEIke52qEJL4JRRzSRfZnBP89oe7nQYzXpX5vWib
s1pz8pGHRTR6Ks7HIixCcwf64G7BkuAGALkSPepxzXRkSsRPGCI3oCisroAFcpM0T0VBO7JV
LKJBzLFbJsFqJOci+6f+4NBbqi/lDCJ69S2Egj8v5E1CtVRfH10zVPGctk8+Tu9lEsXShu7B
ABCrgoc6+PX8Az3StNKWMoEwBigVZBfS/hVk3M/czvPSetkiHJ3TEI/hufO8Tv7yH66cucE3
/nORExyuzw6Uu5Ykcfh27vjK+KX+bIcwtersKWv3uf1OAhy8LD8s3O0aEgmzKh4XTWh3EFbO
lLOqFG86w04PyTdkHvmykaU15IQuqvrUnRyHztc61MYXP4lw/xMgCNvkfDX+avjl+K+Tii3T
vFp4mqqq/fe+zz3tIumErrSB1gxk83J4N7SCKjpGshCLQfhANyzB35Y9z5q1PJrHQUFHerIb
nCyhELLhqtEHF7AZ0HggwoFy1h7BT1P5LC+xqjZO+bS2JOn10Nb+usxVt879yFXV2SyyTXIz
JHv4bD1k+2pJLXg3aknu6mqvEimchnIYqrauIrGFTjD4X/Ms0J2jN7PSgW2NzqvAAMX5Fooj
ACyq/RDt/uTIBeqFHg+IYCNY/IcKqlJj5LxWu/v4/ZW1Y/O0XnOd+xAAeI1yq87G1ocg7oWa
QBcg3VwPPsFev5gsdLk9D3uaApzVD2mqVOTPhRRAKWsDirV3ZqoSxFZSVXZAM7vCFbXv/Y5P
VJI40jq/5kFPnD/YkqqyDAhkOWEXHZbB0STxzr2WnUH/LCI/Fdm7Wppblg+B2XLBziOK+Dxp
aPn6XLOWZKMiLkAgRL5ymyBnvmR5qpZHc4VkZI9oF754+1Ufu5pAWk9DDy6ju0MPSp0RtYEU
gW76HrdPseQbTflNyRmgizrYCGVDAAb4wYZkzps8AbTqAIYTCjRkr/i3GdCW7D9Qqh3AnWS1
SFc0h4IQVDsiz3Q/nUAQLKCca0yaFrwZIV5OgnDBD8VwwS2+muaOQSNAcqvOoY4iHtnQgE7k
ToxOznx0rZbXJK0PT2BjBz7kE/uEmsmiVYtq09sKs109/iA+7V8+ZLyqTClCkUKSmw3fI7sH
TiR7QggGQ+r6GVuwh5MwM5sGlUNkVDC7XQOSt9kf0P+qY5zkakQuEGuJZD6P6qJBinrIUChd
65JvCNFk/jR7EGG0LKsGxs5DHVUAtb8oeskQe8/W1O0w/m8InQ9wPJ01Zc/5hRBPxhPGqcL+
H6oQcEqaBpCqw6oSMDEX1JhVxhH8BgW8nXQSJF34xvwkj/htN1XGULkTvCTQvCSPzoBFms2B
AzO5lDQ0zr48CIH1+aUIxzuG2iUkn+NoumaO+f819ZrbmKrEDQ5k1pIkSoogYGQghNgkHFj+
SXGYwSPN/fuB7V0fsZccOo8TsZdBXZrCKzOXM79kje0zHvb2Aa7AILrVEjP5PVa1dgb+MAb9
q2TW4ShPupYSszDeCoDwwbaaUDD6hjrbwSpBE87tzuuzsZFPWSSkEL48mmHL/kU/GY4hOtgI
zVyvSfrE4ggQkTrX9s+WAJKy925yJSDLU887CBDMnK7sJDQYzk21zVzbhIdKLOj5KRelQyS7
PLUK5apqURnW0vgrm2z9JAuWJBePsi2cltaXSdMkHRaqOWk/aO4/wry1CB0WtUNhZE/UzsTm
mxc6eGebsWGdH/GqXbHqyjoDaBPKOgPS/R0qT0O1pWlyF8zu9nqBGpKMMPw9Ifh5Wg2deLia
ZIdrJuSuLCAT+WhXcxdoV3NQdiBnVNDNi4KXtR3mCrXi+JAgQuObu5LLRi2t2My7sGFkQoGn
ScW1FBnPmtj+RP3oak5XpS+rga67CjMteHNoZuSIL5KtQ8ZCBpM6aghDTo1kxbUA/igkRRBz
6he7/7xW+baQ+PT/nSRzkP6RGUDtmsKZTuhwsZ1y2r/5DUejrh1HT3AimkFTmxdRyiLgcKqD
ByT6vCJH/yBDh9AlIHCHlp+dnL/tm33V2B7M/C5uHswziON6vI7uKaUDbM8em/mM5Hgf/ixD
IkyDtZsTiEEKkrIK0tDCZLvYKAZkcs8m8ZqguwgWtYtMqR86uwUdzg7+jF+B1jPE+vyEHVWx
/nK/ljQJtcGT+aomOni46+rXXZlg+Y3t8bu706WlZPw1ryzw8TC2jD8qqz8E5yiGnAM6CI+a
0H/GSWUgyhGcD19H5LQ8eCYFT70K5MTUHkHJ22SKJnoYNEKEQ06YPg/Em7fYAOhOB9BPkc3a
JXKmRapQpkWW/x8sf8RkH/lPN0Xt3Q7EJcTqqyAOuE+0tZ6IEmw6G+Yz8vkT2ykLliJBRCSE
GwW5eYMgUVFPd90TdSUeez/V9M9jTkbWh+tqas5DK88d2s9stclAzuy37X21FpYSLaVAtNjJ
fqfr1YczfO40moHPof5NP0XVsUI6HSSTwa6inRvkx3IIThJKLHlYz5+GCO671X+HuxOlYu5M
uxP80Owk1kUiF4+MDVGuRvmyOXlzkE9zklLomwjUcknPQ97SOuYKz4IQ4PkG+Ec0yXosQGEs
gYbwSuQaDNAp5O6GSUySStKQuys6bzMQ2ckl5NTqCapsztiImna/n5aSp8gDKG+d2oOKs/dk
ROxVbTRi1IqHpTv9sixEXyqGKMYY7U9TnfC5QYaHIpIubsZjNJzJ+Ig+M6EpmsFOHNBVpLxB
cltYeGYNwYswHVQS3ntPeAhOlP1PgUMPzpT9ILRIqmoe4aq8iLsPi4Anh7mS
xK/u0kN2/w/Q
oCC1zeyxq06/5DDX6xPKHLmSnBL59rqkDy5PKSKW/X+aILsmxwAyirDA/0w/QVg/VkPX0B+b
f0zPMBOv2cuxrkv5gfX5pQi22KqAkr7ECCiYxAhXenP07dA6hpp3QnML2g8XunKl7jtuHu8C
u2PDlpcgDnksmDOUbzNmzhvRM4P0eNg9qorUE992h0OlPHNAH40gSJ0047wIJtIfAiyDfjAr
tcwbkn6PBZGgMcGwB24iI7gpaguu0LevhJKbbxW3pXsknIvBP2r9C6+HXLUoJJ75g9Su+TqT
D/n4CHIgEXO/EsGST3U9nR6vzpbj2MfPU6+dFY6S+PMe+UVOMr4sz7mIUCmlLxwj7pqq5OTE
tY+q+dCdEPsrqoh5T9yam83k7VvBAbkZj5X+fsXPMVWu6xCzGRACf4mbSfz+EL4ZVFP+0Q8i
V07tPWgQGHeq0eB0ms4yaNDJcsTiZeQ1Kc2Zsk+fziT1ByC0zs+S/iTk1Aew0u68vDAZ3ORT
yCRdd8ZEtefP5HGozmB7qs7OvuampqampqlPlvFaptRXXUMEB3p5wCa11A8Us7zwxqSbwF+E
Qd+wtwqQOMd7ebapf8tCrdSorhMJcc10Ewlhvd0EBzR2hsiwLrG+g4jfTMQuptRXXUMEB3p5
wCYIG1EShdl/y0Ij2nIAXUMEB3p5SJ3cx7apf8tCrdSorhMFQnVR1Gj+hBNMzXQTBUJ1UdRo
/oQTxL3dBAc0dobIsNe/+cAVqJbGV+TO2nvsEEqEh0qEE8Q+bNK/XpjL0JG/bhM+p2j/xjTb
7uKJNG5uSQ5g0Sw8ffsEG3gM9HH8zh3kUnVoVmyLvCyDNFj4PxHHoFWWHiaL2TYUDmD+W5JX
NPQA+UHGvJPAX8eCle7iieRDVAPuyKl/4ged+6a+d84A0BADXQTByRhqTD5CrZUl5Lwu3X/8
ZVnNacZ0euSpXL4/MNR0V9SolsZr17MZeuQb5+iYwJCceeFKf1kHDYjG8bCUdbmXModhvVfU
MoLfXhP7dbmXModhvVfUV3he9b8MA8tONutMvv/Z3/vGBOgqljpL1CXYiOiYwJCcefJn8j5j
iQnyPvvNVcB1H4ZoWVJT1WyWsDZ0BzaP5MjGaOKFE3Enige5ZfumyiDAJn+Nhev5ZfumyiBF
zwQzs5+cvaamEPU6fIqQwS6cKGoig7n9dtogi7wsg3Z5v1implDGaP6EE5DB12j+hBOMzdFH
ECSgrejAWKamUH7UvlhRPh4B4aZnA4joantgXouY3u1ZpqYR34ZoWbNVYtd7R+sB4aZnA4jo
KpY6S9Ql2K37Z51HRA2tlVd4XiENSrN3RXaA12MTY6LRMm6urdm9qa4VOsAmLSx72tcbnKv4
awymphHo3AP6Y9Q/fYqHHflzUEwn3753tChV6eGmZ4Iy7NdXeF52PMnt2rStChe9pqbXd62/
IqSAwSpFzxFOdyrrq3O0ipaQ7dqYS8czuVb7pqZQWZA0WPg/EcegkJApV3tkf/5zUIsRmAxC
gv5zUIsRmG1tNqamfJb/sIZ9NGCcKHlBRcmjjCwTc2MDvxcfn/8/AAympqZQWZA0WPg/Eceg
kMThs8dXXX/E1Yu8LIN2eZympqampg4Pi6wTY9to/oQThsixmOympqamqWqDVgqaB4E5x5oo
eUphA14Lufhr17OfvaampqYRwd6XzfySRkV0TuC5+GvXs5+fvaampqamphHB3kyLf4u8LIN2
eb9SUlItLr0EwckYakw+Qq2V8bpfx4KV7uKJNG4/k4uasV7XBUYeNCzoNkcqrtS+WAa46vKH
3AWJqVJB9uFQwQ3tf//XjgeYCZvAZVkeX1JI6FdojfGcXla+Veg2yrXrS5JzG67UvlgGuOry
h9ydWU6Dcr9exC693X/8ZVnNacaKJxduEz7Lv2NdQ44MSHiGaFmziTIT06k/h3RA+mTf/YZo
WVJT1WyWsFTAmIjByRi5SN48OEHTqVJB9uGpa79fRXRe2nd/+GQZbKZUIJuJpqY++6ZKf//X
jlVVJdhqer6DWEqMTlJI6FdojfGcXla+VV/Hgum/xCEefK6cGUzOKD8Q/kgTpqbGV11DV6Ct
gxPJMRfqmDam3Tp/1L5YUZi67DJ1SbWvV3hedrny+tk+p2hI1L5YUZi67DJ1sJm1twt3AXWD
a0pCE6amvaa4Xx7JfujfmINspqanOkj8bkmmpri55AQyiOifTQszu3aGyJyGUIsRIOwBT5bT
pqZ6VmVfx4KV7uKJNG7g+s3JdcseBC5Yu+iBBmX7pqmdFKam0WE++6bUUxz5Yfpj1D99cc1f
x4KV7uKJNG7g+s0bnKv4awUbpt0EsWqa3753dfJd3rsnF24TPsu/Y11DjgxIeL53dfJd3p0u
pql/4gedeUXPBDOzn+Kf1L5YBrjq8ofcLV2f60NqS9BhBRum3QSxaprfTCJ0+HUYCpBSSOhX
aI3xnF5WvlX1OnyKC8UFNqYEhiPOBcm5+GvXs5/in9S+WAa46vKH3C1dn4L+c1CLEZh54aZf
UgDkeYL+c1CLdRgKkFJI6FdojfGcXla+VUcQJKCt6MIupql/4gedefxlWX9ZBw2IxvGwPT3/
f/xlWc1pxjQupql/4gedeUApS0qziTpIo0zNX8eCle7iiTRu4PrNyXXLHgQuWLvoMhOmpgtx
KKoFdpvAdoN2zS4DigMKkAt2m8B2g3bNLgOKTt/7ptRTHPlhvkjUyScDCpALcXgLgg1CE9Om
jwQyiOifTQufDcdfHsl+6N8gtqZdJoLSBYmmDssquouakNBSAOTN4BOmXSaC/8dVG8qukFJB
Ht9sDqTBhN//144HmAmbwIPoNlZC7broeeZBe3NVjoZoWS1dnyKLbMu/Y11DoC69PmudE4My
dUlzVY6+d3WcEILX+GM+/7Zp75yrHiaLEZh9nL5wdWhWbMAmhs/FQqMLAD00+mNKTiZd3vAN
YAVzwkEnvFln8HEn2LDsjM3gkK98vpPyXQnGOsOboNQj5UK3DKTBXvrrq/bwYfgBAD3PWKk2
d4Vj1FD7qTjAA4mFY0pOPsEu0SpAuZyBw04B4dNpC7n4a9ezn6Z0txNj22j+hBN4x5ooeUph
+AEAPc9YqTZ3fZtr116xWfbSCwMHOMB+pzPok/nAWKk2dxGDMlfLHj6Dy3B1aFZs7J+kSmoj
GGqD2BPoTAeGS0FRzT+TripJcRRw+h5VZfpj1DSKE94Zli70Db7cZ6QnHAc+v73XqPsLXQkL
hzOmvnd1nBCC1/hjPi1HnSC2uF/JJDt//hD9eQcTY6IDcutFWPg/EcegVZYeJot54UpS6uC5
+N+Dy2hWbOwQQTzXaP6EE4zNP5OuKiC2uF8e08eaxLOfj8k+s4pOoEiLvCyDdnn+2SPlQhOp
C3HEf/4Q/XlbSKfT1yKuHsm5+GvXs5+d2LDsxL1XYLHUaP55oKRTk/Ih+Ho7E767B9+ABXPC
QScZG48ETNrbaP55oKRoVmzsEEE812j+hBOMzT+TriogtrhfY/C+uwUR2rgDiREzQqN4x5oo
eUph+AEAPTQu3X+LvCCMzaZIp9PXIq4eybn4a9ezn53YsOzEvVfUTPRzUPtTk/JdCcY6iU4b
nKv4a/gBAD00Lt1/ufJ0pKbGyd4g7EOW/6oSvy0u3X/iDIoHy93XCWace/+wbni+d7QoVZYe
Jot54UpSTOB9plffDBLrVqpS+QWYbXnhSlJV1D99pmhWbMAmhs+XQrcM8HNQc8JBJxkbjwSx
eXSkpsbJ3iDsQ5b/qhK/LS7df0XfM4Rbj8k+9wykwV7/E3Enige5nIHDTt/7xn2DBHumStcl
GSHZD261M7ngE6kL9c0v+GsdV98MEutWqlL5BZhteeFKLaAtLHumxsneIOxDlv+qEr8tLt1/
iwEsBzQZXI+0Vs0uA1e1gVWYbXnhSvecAYemV98MEutW/
7WbuVWYbXnhSvcM8A1gBfvNLgNX
tYFVmG15FTIZKF7hkkJ/FHB1bseFC0jqRxAkoK2DuWX7pqlxJ9iw7IzN0bampoVj1FBMG6am
yAzwPwTHWU4B4aamvnd1nBEz66tevlmmpsqcq/hrDKZnnUdEwQd6i5+VaP6EE4zN0bampqaP
ilUgF8AmLUEnSmGYWaampqnJT7AqQNzRKkC5ZfumpqaSOEd/18AmsygLSt68WaampqnJT7Aq
6NNCg9lj1DSiA088dZcB4aampvU6BL53tCiQcSeKB9H7pqbS2XG4A4kRM0Kjtqamj/4TNJEh
zXt2B4GOeRcXe0r/9iHNe3YHgY55vybese5X2LARmG02pqamEejcA3Lrq4QXF3tK//ZdCQt9
0Sr4ejt/9R+9pqamUFmQq753VK4qgAXpnUeV/zGYmv/TpqamDlh7wf+whn00YJwoeUFFyaOM
LBNzYwO/Fx+f/xmQbKampqYOWHvHmih5SmEDDKampqamfKSAwSqLvCyDdnm/3rn4a9eznx8f
vaampqaLlTr1dpCxfZtr116xWfbSCwOd9TO5ihX/MWQXvaampqYOWHvHmih5SmGCWb2mpqam
pt2tdpt1BZTHmih5SmEMpqampqampnNlH2hWbIu8LIN2BzQZPTampqampt04eac9u2oj1r67
B9+ABTFspqampqampqYnRxAkoK2D0fumpqamplD/64kFPYG9MoiLlWj+hBOMzYrTpqampqam
pqbNejvZetRo/oQTjM3R0dHTpqa4eLJOiaamqYQcx5jgufhr17OfnL2mpqbIDPCBw8egVQHh
pqamXQkLfdG2pqamypyrc3yLdYvZNqampoVj1MNmrhK+d3WcETPrq16+WaampqlxJ4oH0fum
ptLZcbgDiYVjSk4+Fzol1wlmnHv/sPGwKjxe1zw2pqbOcxuWiL53BHva61L1h++cq4S/Ppyr
hL/3pqamptd3+mPUI+Wtg//R+6ampqkpV3tk9wzwgcPHoEzS2XHRQwkLAD12eb/3pqamptd3
rb8ipIDBKkXPEU53Kuurc7SKlpDt2phLxzO5Vvumpqam13dY+D8Rx6CQTOGmpqamqSlXe2R/
/nNQixGYDMeaKHlKYZhTWqampqZ8lv+whn00YJwoeUFFyaOMLBNzYwO/Fx+f/z8ADKampqam
13dY+D8Rx6CQOPKmpqampqb/7sjGaOJ1+D8Rx6BM4aampqampn2cvo/JPn/+c1CLV12B4hum
pqampqbL9gPYPyw8/UcQJKCtg//R+6ampqampqZpC7n4a9ezn72mpqampqmfQeho4uKuTdl8
lou8LIN2eRecpqampqampqYRwd5Mi3+LvCyDdnm/UlL3pqamptd3+hPoTAeGS0FRzYrTpqam
pnVKjE6rLpjLxjgA6QVMlxPoTAeGS0FRzdHTpqamDlh7Hsm5+Guk7H+neoOtEr+npqamptd3
+hNx/FdP8kE8VPagkJAytwykwV7666v28GGYWqZHDJwfsUlHECSgrYPRY4kJ8j5jiQnyPmOJ
CfI+Y4kJ8j5jiQnhuPepUkH24Xxg0SqLAZ1Y+D8Rx6CQCpApSHbEvd0Evnd1nHPoIOB9cc1Z
v4ZTLqbUhWPUNIp4ELa+d3UYCpApSHbEvd0Evnd1nHOL4ttQvoNYudRSE6Zf9wzwQjEgufJd
CQvF4p/omFJoG6YLXQkLhzMTHtOEwScXRf3GeeF8YNEqiwGdvtH3DPAmU4NYudRSE6Zf9wzw
QjEg4gUEe+ra61VXSLapf8Amf5b41zL9vnd1GAqQKUh2xL3dBL53dZxz6PYLfXHNWb+GUy6m
1IVj1DSKeEz9vnd1GAqQKUh2xL3dBL53dZxz6PYHBHvq2utVV0i2qX/AJn+W+C6xy/cM8CZT
g1i51FITpl/3DPBCMSCn30D/Pf/1eEoFNnBfcSdH2T8DoPcM8CZTg1i51FITpl/3DPBCMSCL
vCyDdnnBJxe0RxAkoK2DSBPTqWt4fsAmLUEnSmEDxzO5xAM2cO36XuGpP4doG6YEG8EHeouf
6QNy66uESZyrhL9YpqamIfh6O3+NheuH0SrowFimpqZu7fjNWdEqPF7Xs5+cvaam3Wj+hBOM
zdOmpnNlH2hWbOwQQTw2po/+EzSRIfh6O3/1n0Au0SpA0fumaC5qemymplddf8TVkoVj1FCt
cmNKTj7BtChVAnEndFUB4aampgzis4DRMm6urdpyY0pOPsG0KFUCcSdZQ2X7pqapIsAmLUEn
SmHHQQykwV7/LSxFmb53VK4qgAVMG6ampnz+c1CLEcHRE/g/EcegTOGmppIB0VOT8l0JxjqJ
x3abI+qk06amznMblogH1zh5PJjWkAMPctOmZ+GmV9jXwpIQVCDIDKTBXv8tLHvawQd6i5/p
nND3DPBzUGympqampmedR0R4DPTJT7Aq+6ampqamnZpdbIwxwd7wawOCfsAmf/UfvaYOkLA+
xAoetvxlR20ThWNKTj7BtCiQkHH8V0/ASnNQTBSmBMG+G6bdUJhVXQkLAD12eRfBilUgF+wm
x5j6Y9Qj5a2D/w+/J10JCwA9dnkfHm6mph4uQdOmpgtdCQuHMxO89GvHDceY+mPUUHm2pqYL
XQkLhzMTvPRxJ1mVPf/NG5yrXjEbpmdBe4SdLr2mfNJIeL53VK4qgAUxrRL+LHIhXsGftwzw
gcPHoJCduXeFY9Qj5a2D0Tyt+6Y8E3pspqbUhWPUNIp4v2xA/z3/zRucq4TELqamX/cM8EIx
ILnyXQkLxeKfSHi+d3WX3/umm3eIknnypqlrv5j6Y9Qj5a2D//8xmLX16Fh7xBNxJ9iw7IzN
5DKwYNEqPF7Xs58t/72mSxldPvumfGDRKosBnb7Rf/Xin0h4vncERXnhpnBfcSdH2T/HTGac
q15SDceY+mPUw2G9psiw/1AgXuGmdO0FLtEqPF7Xs5+f/xlzwYLXd75VXQkLAD12ecFk2irA
Ji1BJ0phbTLcpqmBG669pql/wCZ/lvjXMv2EwSfBn7cM8GsFG6am1IVj1DSKeLF5XQkLxeKf
SHi+d3WX3/umm3eIknnypqlrv5j6Y9Qj5a2D//8xmLXA6Fh7xBNxJ9iw7IzN5DKwYNEqPF7X
s58t/72mSxldPvumfGDRKosBnSmDBHvq2sQTcSd0Vd/7pnxg0SqLAZ0pg4Vj1MNxzWhIwCZ/
jXnhpl0mgtIFiaamhLuftwzwgcPHoJCQAw+akN7o/80bnKseJosR2qpVJvcM8IHDx6BM2Mfh
pth4QvKmpl/3DPBCMSBFn+Nrxw3HmPpj1FB5tqamC10JC4czE+KkZpyrXlINx5j6Y9TDYb2m
yLD/UCBe4aZ07QUu0So8Xtezn5//P3OBWYIySHi+d1SuKoAFOh7c8HEn2LDsjM3gkLamcO36
XuGmcF9xJ0fZPwOgf/Xin0h4vncERXnhpnBfcSdH2T8DoPcM8CZTg75VXQkLxQU2poVeF33E
vaabd4jBvki2qXocwOGpf8Amf5b412j+hBOMzXHNdBO+uwffgAV5XuGpP4doqxvBuIULSOrS
9wzwa8dBDKTBXv8tLEWZvncERdk2pqamqWyxfe+ce/+wbpDBCcY6iceKB7nm0SrowFimpqam
UIDRKjxe17Of/8cmhs+XrTOEv6icqx4mixGY2TampqapvrsH34DavzFo/oQTjM3Tpqam0tlx
uAOJhWNKTj7BV12B4nsUpqam5D+3nF9qi0vfHlWv/zFkF72mplqmpt04eac9u2oj1nH8V0/A
SnNQMYjfvne0KEzhpqaDQuzAmEUia9FqNFP0cfxXT8BKc1Ax+mNKTj7BtChV6eGpUkH24aZ0
7QUu0So8Xtezn5//GXOf6Fh7xBNxJ9iw7IzN5DKwYNEqPF7Xs58t/72mSxldPvumfGDRKosB
nSkTBHvq2sQTcSd0Vd/7pnxg0SqLAZ
0pE4Vj1MNxzWhIwCZ/jXnhpl0mgtIFiaamhLuftwzw
gcPHoJCQA7+1CFmCMkh4vndUriqABToe3PBxJ9iw7IzN4JC2pnDt+l7hpnBfcSdH2T/H6uB9
cc1oSMAmf/UFNqbdBL53dZxzi+Ki0SroBifBn7cM8CZ+tqbKrpBrmug2pgQjxBNxJ9iw7IzN
im7t+K4X7CbHmPpj1CPlrYP/D78nXQkLAD12eR8ebqamHi5B06amC10JC4czEx7ThMEnwZ+3
DPBrBRumptSFY9Q0inixbMAmf5Tq2sQTcSdZAROmpkL8dHPfbKbdUJhVXQkLAD12eRfBilWq
IutZkAUu0So8Xtezn/lFXu+cqx4mixGYVME2plQgm4mmpgTvnKtOwppxxH/14p9IeL53BEV5
4aZwX3EnR9k/x1Vg0SroBifBn7cM8CZ+tqbKrpBrmug2pgQjxBNxJ9iw7IzNim7t+JYX7CbH
mPpj1CPlrYP/D78nXQkLAD12eR8ebqamHi5B06amC10JC4czE+Lwa8cNx5j6Y9RQebampgtd
CQuHMxPi8HEnWZU9/80bnKteMRumZ0F7hJ0uvaZ80kh4vndUriqABTGt+IFVWMn8aEjAJi1B
J0phTrGQq753VK4qgAWVe0mm3SO3sDam3QS+d3Wcc+j2BwR76trEE3EndFXf+6Z8YNEqiwGd
KYOowCZ/lOraxBNxJ1kBE6amQvx0c99spt1QmFVdCQsAPXZ5F8GKsQ9y06Zw7fpe4aZwX3En
R9k/A6B/9eKfSHi+dwRFeeGmcF9xJ0fZPwOg9wzwJlODvlVdCQvFBTamhV4XfcS9ppt3iMG+
SLapejJAPxPTqYkJ8j5jiQnyPmOJCfI+Y4kJ8j5jiQnyPmOJCfI+Y4kJ8j5jiQnyPmOJCfI+
Y4kJ8j5jiQnyPmOJCfI+Y4kJ8j5jiQnyPmOJCfI+Y4kJ8j5jiQnyPmOJCfI+Y4kJ8j5jiQny
PmOJCfI+bKYyTTFltbnPX3EnR9n54BOpejLUQuIFialsZL/ZoC6FXrCdE2acq07CIOhCnSEB
E9MJ5qp4DR58rpKYPtRr1+uogBOcMn0sh8zIkLFUwJCcKkXJ10Chsdit7mb7DIe7p/pXoEJ7
XRFOwstzUN/2Sg2+3GekJxwHPr+916j7C1/N9eOfk/umhlCLKciM19l70oQF2K2nOv554UpS
hV4fHnaExCGzO6ZMA4t54Up/Q6qjhsiw0TytQEjeUbqzKvYZG48ELjvZf0WUplAq9hkbjwQL
IQ1Ks9zVpnW5lzKHYb1XYP0uOwug656m6JjAkJx54Up/YF4ewF+fo/twRdWxQjEbjwR5IQ3R
xhGwlKbomMCQnHnhSvecAYemplffDBLrVv+1m7lVmG15FTIZKF7hkkJ/FHB1bseFC0jqdpt3
lXvGUGIu9fbhppIB0VckXX/E1ctC/OCQC32nG0Uq+6am0tlxuAOJETNCowt2g3qkwOGmpuQ/
t5xfhEFFVMEERWP0SDJzzks6hu+lvaampqampqkySuKTA042pqampqampidWvv/Zq0wDizam
pqampqbdlQHhpqampqamj4qJE0NW+6ampqamptHTpqampqam7CaM1PEeNNizKvbcpqbktVxV
LUhWvqfK3Q06lO6NRu1QHpiLw+odw/EJbN9tWNBC8gm6xoi/bmHBhltUIKoU4aZ3s34eJcYx
gst4nFI+pqamqXvsA9CnLcGDydeCaHE/D56mpqV2HiKepqa4MzuWNwPQpy3Bg8nXb0Smpo8L
uShowe/4hoVjcoUjdrr7pqbPmviKV/gRiBLieTx+7u3Gv7uER8FUNI6mpqampqam4HIrjBI+
pqampqampo+FMdAQYGGr7aampqampqalkgqmpqampqamuDqYsUI+pqampqamqbHhpqampqap
e6uA/z+KgsI9fUSmpqZpgAPSiB7GRXd9iAcT2VOOpqamZ6TXMYDZtMd5A4uISNGdlmREqRBh
Iu218APQpy3Bg8nXb2REtDNzFqaeqQMgEL1f+bZCM7NlM3EF2DFRpnCkLYbVgLX0evgRiBLi
eTx+zKalf/5bh1f4PJzdfST3FyxiC3IN1+xinqamjwu5KDRuEB4Mj4qMAYq+YZMDArOqZnIi
o9RB9hMquo6mpqamLMeqjyIskyT442g8Y9ADH6ampqm7Ek+kBUXSUjNfatcBcZ6mpqamZ6TX
MYDZtMd5A4uISNGdlkSmpqaldh4inqampo+Kug/hFyxiC3IN1+xiX/m2QjOzZTNxBdgxUaam
pqbOdfgd/jqF+VfAKYLCHMYrpqampry7EJ9WENSSLdEqI9Tui2XRRKampqYOSouKjAGKvmGT
TnR4nJqcseGmqRBhIu218LOqZnIio9RB9hMqujRvpry7EJ9f+bZCM7NlM3EF2DEVDzzEA9Cn
LcGDyddv/BGL+QBBKHidZGOmFmOJCfI+Y4kJ8vtppjT+cjKOpo+Kug/hFyxiC3IN1+xiP5Mz
weeWgQPQhQ3tb6apMttKYsQBbr5HMNr4EYgS4nk8fgjZpwVl/3HJNHmT0AvZAaL7ps51+B3+
OoWSMYBdYdEQbu2mpry7EJ/dMYDZtMd5A8mZqlXYIBcsYgtyDdfsYp6mpg5Ki4qMAYq+YZMD
AiQQQ30k9xcsYgtyDdfsYp6mpg5KybqcIv9BUlO+Xwz7pqZ3s24QoF8Asd/2Qe6Lm/gJps61
SzwD0KctwYPJ12+x4Q61VnPjMixEpry7EAQSYasqJDPBEUSmBhmA+6ZfwWFMmakigw2OpkTd
ErVxgPum/7yBbKW1q3Ijdk7VujT5wCIsh6dzrRUMc4rvwHlkZESmcKQtC9l5iBfRghn8Ukdk
fgjZpwVl/3HJNHmT0As/Q2VRpqbPR3M3+M+Rc4rvwLqcIv+Hpqaa/iLaDhzG5Jdv+UWTmv8i
o9RB9hMquo6mpmekLgBKOo1i5CnVgLX0evgRiBLieTx+zKampjIhBUXSUjNfatcBcZ6mpg5K
i4qMAYq+YZNOdHicmpzhpk/HqhwZtWAASjqNYuJEZ7WTkvMeIp6mz5r4fDN+Kic/inKznqbb
7dDhpgRyeZhvphCg9j6mnqn++b5K4aZuEB4Mj4qMAYq+YZMDlZbZ+XbuYyRK5HEF9vumVICK
tMC61FjZX8QD0KctwYPJ12+dfr5ihkcB1AXxgVdhcWCOpqnQviS4T9CK0O+cIu8eUn5EpqUQ
uwMd/yKj1EH2Eyq6zh7JENr4EYgS4nk8fsympqYyIRcsYgtyDdfsYuQp1YC19Hr4EYgS4nk8
fsympqYyIQxPLT/YDPBBUlO+Xwz7pqZ3s24QoF8Asd/2Qe6Lm/gJpo/HuXJq+JpX+BGIEuJ5
PH5SYqaSciXQVP7Mpo/4GQctFwrMTguqSiumyrkQjqbdMEgFDaZ9jEwM+2mmNP5yMo6mj4q6
D+HQkoZjHMbkl29k/FJHZH4I2TrPMJMzweeWc1JdwYOHD2Lvnqbde+DGpwVl/3HJND2GdQ8x
BpxixAFuvkcwusIcxuSXAaL7ps51+B3+OoX5V8ApgsIcxiumppr+ItoOHMbkl2/5RZOa/yKj
1EH2Eyq6jqamZ6QuAEo6jWLkKdWAtfR6+BGIEuJ5PH7MpqamMiEMTy0/2AzwQVJTvl8M+6am
d7NuEKBfALHf9kHui5v4CaaPx7lyaviaTcZ/ncKVDaZ9JAwk4FWA+6m7EizUQTtg19BzraP7
qVP+zKamhr55seEO0J9iRN0tHFVone1+vmKGRwHUHg2mECEFvCyxrCKDDY6JrNDBVOBVB9DB
hXlM1FjZX9BswDOqT+5DhTHQEGBhq1V7oKvtjw2mA8bHywVFX4KciCwMXYq1Iu+MvB+PVNC8
O4zErCNvcNl5iBfRgqYFRV+CnIgsDF2KtSLvwfkQYt3qQRCgfvtQJ9L2+7zA0k+FA9CnYlAn
0vb7vMDZI3a60e/
dMCIZ+DRvj9Wc2MYtQ2XhX8GG7XL2+7zA2QPQp9nnfEHQ/iJkRM6XbHIi
o9Hv3TAiGfg0b4/V+G74No8K/0OHsJy1TsYsqjSHmRn4wXuepS2u9vs87gIDIBC9bhCgXwCx
3/ZhuDOzwun7piKL+d3ZMcS8Nv8io9RB9hMquo6mpqnQviS4T9DYTxCiSB4lxjGZpqaP+BkX
xjGA2bTHeQPJmbsAvBIs4CLGBmOmpqampqamLxJhq1UM+6ampqampqaA/z+KgsI9fUSmpqam
pqapsQ9Epqampqamqdma7f8M+6ampqampjRvpqampqamd7NXwDMLT/c7YJampqape+x5TJJX
EtTui2XRRKampmmAxzOzZTNxBdhCQBPZuwz7pqZBC1WA+6am/7yBbLgzs2UzcQXYMVGmpqbP
R3M3+M+Rqna+0oiT0AvVpqapuxJPpBcsYgtyDdfsYjT+zrkQ4zp2bZzhpqampqamZ4oxJ/WW
RKampqampqZ2rfgtcoUrjB+mpqampqamh6qUpqampqamptGq/nuWRKampqampqWjpqampqam
aYCGhTHQEGBhq+2mpqam/BGnIgtzVJyrAIa4x4ic4aampk2MrfgRiBLieTx6atdD/kMNpkty
PLD+nVIzs2UzcQXYMQYNpgW8LERn+0tDYV+CnIggFyxius7QE4HNiowBbfY+pp6p/vm+SuGm
F5qS0zDYagwASmK6NCPY7x5SfjEGnIBzCAnQC9lvZByBSR5SfjFRpqYe46S6SNlXx1gIM1SA
PIa0wpWWukjZV8dYCDNNJJPQC9lvRKbOdfgdlheaktNNxi0BbeGmpqV//lu5TveBA9CFeUyS
VxL7pqbPmviKtDxj0AMXdkjRhlFKi4qMAYq+YZNOdHicmpzhpqZ6xkXQ4aambhAeDA4cxqdi
nqam3cZoLFNygDPG9wxP94FXYeGmps68/jEt0ogexkV3fYgHE9lTTYyt+BGIEuJ5PHpq10P+
Qw2mqbsST6SBV2F+7nITgc2KjAFt4aam/BH8Un4xFQ/E4aamqQgNQj6mpqbd6kEQoH7uqvhz
CqampqYtFwqz7Y6mpqamnCQ/tR7QmrVFzru1bxLR/nvtdq34LXKFK4y1wDrBT6r5vjT5xaam
pqbRtTpPtZJktZKxJLXkTnJjpqampmREpqamZLEJpo/VciKjYaUseB4FMYDZb7HhDrVWc+My
LESmvLsQBBJhqyokM8ERRKYGGYD7pl/BYUyZqSKDDY6mRN0StXGA+6kDIBC9VvjHRpySMYBd
g4eZpktKtC1DYV+CnIggujyGtMCIzKap0L4kuE/Q2E8QokgeJcYxmabOvP4xzNAL2W8ZEs/+
In6+YoZHAdQFC6ST0AvZb0SmpqZnpPBixAFuvkcwEndP2MYtAW3hpqb8EWEyKYaKiAcT2VOO
pqZpgMczs2UzcQXYQkAT2bvZDaZ9JAwk4FWA+6m7EizUQTtg19BzraP7qVP+zKamhr55seEO
0J9iRGf7pRkkscymj4q6D+HZ+XbuYyRK5HEF9vumPPPaYWinUotlhnn6I3a60e+epqV//lu5
TvdzUl0lF5EASjumqbsST6SBV2F+7u3Gv7tqpwVl/3HJNAA894FXYX7MpqampneztMC61FjZ
X8SAc/ojdrphFqamDkrJKYI80DIms4LLeJxSPqamDkqLiowBir5hk050eJyanPb7UKqnP9tF
0OGmmv4iXwC68Ows+Meg4aZSu4ymptTHBeJEZyzNo56p4Y/tquKMpt0xxLw2p3OtFQxziu/A
eWREplSAirTAutRY2V/EYnIio9Hvnqalf/5buU73gQPQhXlMklcS+6aa/iLaj4qMAYq+YZMD
AhOBzYqMAW3hpqb8EWEyKYaKiAcT2VOOpqZpgMczs2UzcQXYQkAT2bvZDaZ9JAwk4FWA+6m7
EizUQTtg19BzraP7qVP+zKamhr55seEO0J9iRGf7pRkkscymj4q6D+HZ+XbuYyRK5HEF9vum
PPPaYWinUotlhnn6A9Cn2ePhps9Hczf4z5Gqdr7SiJPQC9Wmj/gZF1tuEKBfALHf9mG4A7yQ
EKB+zKamZ6TXJRfYLB4JjBd2SNGGCaamZ6TXMYDZtMd5A4uISNGdlrHhDrVWc+MyLESmvLsQ
BBJhqyokM8ERRKYGGYD7pl/BYUyZqSKDDY6mxiP1x7UzwkNhX4KciGSx4dKzfvg/cZmSEbEl
gMfkmnJ6HB5YAyz4Xx61kiybuWl2
/


--
-- PKG_PROVIDENT_FUND  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_provident_fund wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
b
db98 4e22
8L+up31WBZwHFVTU7g14XcPVb4Mwg4pVusdDWsDKff7OlJoioJQxMhiX8iYN9kLbZR03Z2Uj
y+FpyrjCzo7o96OCwpDNHOsBT9KGnJEZWhtY+tjF3hoxngyLr5VV7u5SCAxGHQyxtZy5MvV/
KOr5wbVzmoO15MYkc521pb+qzoYkxJ21nCT5TH08qSiq0I0eHgxY+Fd+bBl2DQF+624e7uWB
sSQ7p9FkC1bcSGcgDgWyd1A9fYShOlWv10NVAN39o5wP4W7Gf4EtgWqwqZwBI7/4ih13IPw9
wFsS4/YsTlBVuBIQapAlD59DAI8tY2E7Q7nN0NCtn0M5M0NMj2sjds77Th+d0BAQiToHw2Q3
xEV+/n3/u66aHZrdQRnknDy/EXMrPL5TlEMymNgFlZj9LMri2asosX5xLF+6SAuXhNUIMuzH
v1P3T7cpjOTcEFdoWP8GoKCx3rRET4kpVsaDp7nlmFfbPC4yFwATBvXVff1ogezkaQVUi94X
V5hfVbiEgfMJVTE4ucDZTrL0HquNn7M7JpopZK7Bv3m/Ep9/sdnEkCA70Mwj0LjX/4AaqNGx
EA7XOjN+8jrsFTLtSPvZkDNFujx5wGVxjMu6D2TpMoQId+3r+FR4PfVeQx6d4nEN3jvogD6q
RojgAARB4UXzddnGuRn15B6nrUfqf6MsjWqBae2N3sRWQzBQAET1c7s7VwtVp/YIaB0Sx4hk
gPnGK+0p7Umaz7XX/3iWna0QZy3Z1s9zTR4Z9S7SBkXhu8EHE2Gb120g3JCa5EaAL7t6huTo
9+I+aG5x/pyAqShVo2QXWNVJv4v3Xh8tvPR/mrtCxOcs4nc688CcFxC/2mAgUxI6182BgN3c
4qog+Rkrm7cmQ0VAOnmyTnjQhZIdWNoLzavOpDsSC7mGVM+s/4yxZEk3F1K/gZO5BtDeOx4H
vXMmmzjmvrn+LDpz4SUFwAUWLBe5v6Qgz8u5BblXGbaP0orGZA3VPRPDlru3MG+xv9mwed8/
vtcZnB6vpyCiv1IyO8zrMoxzeoe5njOfi9VOa3May9Klg9brE/8IcHvS1h/Q5u0TKWS6wZtz
CO+4IFtDOzct4rHHtSrOpY8ljFS7wyUqzpL5zpm4VfiGtyC7d5syWMRD6KS59WvGgWjqPq+A
qblNlYChaFyJ0KZ6XjIiko/al9L3+P53Hob+naPuIstOzEQkP7VeY+TzSNFqDfBCVWlyS4e5
g1YsRMSqZMC5daGxopIoLqUImyCX5IvoHPi/BMb2SmFxLMJuxCkG7CZbQz2+HyzzmvZ9BYfO
vDTEXW7kD7D+ZwUToNQF/KpDghnv3CzIT20wBce54+4x4yno8LmPAJkt/4FFlQaY3/kn25iU
5MXbWw3PIgbWoz+yCrGQQoiqqwYeT6zOvEq7HPi2Lw+qbAba7jRkwbHvvD8iBlvrpUi+iOnc
vJ2C40pOPA+653jlXQs6Vxm8tVWktK4QOxJLlg80Ux00HLnrNAVXSZ3aEN0wGcsHumhtHpPF
ne/AtRc0PPj6BxOxQ11JRRGvsEPixxDrjEjQHAI0n8AcmM9qci/4QuOuaO0CU+Ruo5JpvEII
Br+x+RUf+lXx5PEiRa461ChCcPHPiClDrjWSTq73vEaGBcE9Otw9nRonqn+oaLeV6nw6QbOW
xeRywPh+H+QfQ/gdTk8NorxHcw2zdQdklc+1zpbsew/qPxJy3fgmw/lH/paH5KJd62QfBtm1
uObk20C1Jho/pxRqnYjkgjWdNjM6YT/50s4aXvyDZ1N/suB7GaDbkqa5Mfthwem0vC/gEmBf
zUI1YZaAMbzRRzPrhn4PHxH4Y+950AKDHB2tCANqfp3Dbs304pJO73kPtif4rS1hT7Z++Fiz
YbXK7mG1BAhhxtoljO/42X9hF1sxP+CJzTE4YRfUMSI5g0HugzTG2kdOm/fbEh+K1r+BCDyY
swif5oo/NJ8aSMquv4duhxOPmpoBOoNObpq3RRJzn8hoRyW/9XLwn74dTp9WaKS9Kdx4Rfdq
W4AeMxkHA5jY6DTUHqhS2dTBLL+wbmgp/iyQrbu6u5++s80GQ9dypRoItWfEuc9mQLDaiy3a
fggj6EVewVVV8rm5VuS5GWRjuRk7tyKVaXv4RmOAg4vLXr/pQv6lWIB4Iv67uzpoP5PEBV5B
/h8GnXhDO3jHA4/Odk+DW8SS+Bfdc0MqaE+qiLlDD3Fqc5XBr9wyEKr2IQ1FeumbPLhC1Jsp
/+9hm07wenINTs+zd05W9nLvOZpJuA8XlzqtPG4PGaJOVtXXlhdNOkN+Kk8IcD/7bdexiHk/
QVWLwVhIP2GBiyRf+8EkGLLBguIe77FP3kc6nhL/rt8pzwJcwTFAVUylwX1yEivrEHsPC+8i
rdmqk9ci0TFiDyShv1donc+1ipqVCVM9jpa73jEF9q49zvrO7cFGpRABhXOnmB8PRpK9qDPE
8zMXQPWq8tjksNT6nSI85OsdXZ1n9eSxUM6Ym/YR5LFQzpam/kTIcmg/fYp6+zpPmkSSdo/B
ahlBn5z5LnpjwQe8ECeJVXtort1z/KwQFp1FcCzZZNG0A0bkCpkzT3JEmGoVc1rtcge+ByMw
wnlP4/WaipQTml1UIguuEKWcSLhkWy5VPBdElWTZgLkZ1BT4OriCFzTZF0J7dnMwnBIsPrVz
VVo6u7tgl6q16UmBReT5irYopb44gbqKB1I8lkY8VWCxJHbG/Y2fVeW7lhB6qr84h0igg8YA
AyxIaLuZC9hzQ+9YoSDa+jK7MEv9/kiptSPxZHi2fe3B5BtyMjQt0Lt8+Ah9c9xV6sEsy52B
c+1EdQhqkE6YDISBkq3+FE5wu7kqlVvYvCxfKBqn1K4cv9BQD3OljmtyZU6vfkJG9/7+M/47
QR4XJEbkbmJO+oQsSQioCbiEXfiuIYELw8/xoaU13b+feiQJLRIQMLVsq+tbe5YiN/AHgQwy
QjrZPEOV6qX4MoE/YEz55JoNTByom+fWv2oq0P6QsDHPbusP8g6ul9Ko2ZaqvadPJ5j+LVFJ
AU4xFwA6U0kC0hTO70O3iMG3zhX5UsBPKQq/HvibHzu7767kLzySbvWd0t1yAE6wGDrfPIZd
Xa1lP8ltczNeQqp5jorV5ipybaBuuU82EjRtaPZLnLWq9ktPb1L4v3kNv+j/6hnPBv8LnE8i
QjTGaAN5+ZvZYdcDeQcXPv5bMcMPsNa8cWucqgid6Oa7Tk+8wiJPtK+xARhDMuR90xlpnTNl
B/Yj64E71U8w3QXsmx4oBcdBfOwAzSKdYsT7bjgey7AikxaYQUzcQNrLM1sX+LfuCDyyKeKQ
WFd6KsF+2aVddQ8LgSLNOxptzWBIsSjkXSXEKP3BgiIZ+GD5WrvetJZrP/hUuzo02eTRNnpV
VGD+3J0QfAS8ZxvtDUQZzEKqM81zy84REnGYrA8nt78347coOg4obLz4om9PugOTl3rovzc3
/oFVVQpz/5irz0pHkBgZ0MzOzrlfxKhfxosp/vtASWDbudVFUIw7P7bVMC0StONPD9LtsVRP
OcW5V0vEa19bGENJOoMHKiLKmwrQ5ArQ5ORF5PzvtfzvqqFarqwkCT+B953SWZ2ShU8Ckj2A
P0Xk/O+1/O+1/O+1/O+1/O+1/O+1/O+1XYF9mAfQdhDw2uShICM2Ov/JmAdvQ4YDTtYfolXi
hiRTM/qlmiTpi7l0tfoNgIBOF1rtEJDrHy5PB+ea+c+kv+rjlqrxL2oDVLzv7mROsiy8RfwK
RtKSCgLSdQbPU+596NG73ockQ6E/HJq40iH4rnL3robPZUIZkP9BovhH/1EHF
UVeB9oTriRq
s5Z81SJ7PiJ1JUHiBVXX2r/LJBLSQh2ln+ulBaKxugylSs4iiBTQVJO7sKU6zrZH2NCYyp11
Tk7ierWBcQ9+oGR/uTwHZ3jUVde7uCDW/JI6suUgePIzv/FVsdAXru96wsEImttGdv+5/YdP
nPwdpXLhqviogPj0h84Cb+RpGTJ3ctwjcmOBcRczgtIZGI/W8DpWN+3W+f7xsXnJkp0KNBys
EDsqc87cPCiCzQeckJrnx87mP7EQhjo+2c72io9kK4iuHl8HeCJO0YP+Q/8KZiIdgZn1QQ8n
DgCM6275E+pDnIgdJMTFKPXkKerRTXNDTrK02jdRck7kvRXED5irTjLibUmE5dC8bYHHiiQY
pc2WwrSBiMTu1cWlkvbVpZKww4/3UIuWlLuYtRyaF5gbu/P5nL9jmJYxc1b+0KjkW32hv5qB
+FzkteCkKX+qCBn6um2bOKOGhIN4YUN5p5raeO6L+JbBD3dBu6kH9p+aG6R6bDcF0thbUHgg
SyOe+ZlRvtAz37LNkMmf+Yn/P87YBcOYKMn4xHIoV1W2m0m+73M4h4aM+u/uh9Zorqmy/qMG
69Jy+IweefCuucELEEud3CBzla6i+Bmd2hLj3xAbDB4KwDJPT9j4X35VF+geIiQP/kK9mA+1
rIxPnMT4gfSYD5D3+Il6Il68bmr4RxSHrmtBzullEqr6dxly2PT/nVrAu7HJ/vlo0hlPE5r4
mRTO+cCIvE9hHrG3MBb6F2Ks/rXMZdZPuU+u3AxyDMv55YqPT/cc5Fw6r08uLyIQTcNkEFD2
DcdJuJ87FZzTsBKOnLWbkkCvC6sGgYXtkxIiEv7wnSuYbdrs+bTgPrFiEMR6+c1Guo+uJKz+
e4v+6l4cwQMoL52++CmUvyT8pfP4Gyozcz39pQMFt4D3ZNf69g4eGccLZminBw/wMNmPSU8E
z5vZrP6lGZcbEKKYPWtkmj5T/QuPigCFXoW/nY1XaJobn7flIzuV4hclHvLPlA++1WOYTGE/
YB5+9jSa8f6pu2oznKpV/JtXik+qniO1jIgsNar+5zFrGQIQyhiY3R5hGUjwmIv4kI+aqvSG
hwroeuR9NTqmzgZ3jEM9Oi4Vpe1vV3aDMD1IZUGaM2vBUM5Lk125H2c0c4WLjDKSV+aHkJpz
J122ZlOCG4dVdW+d+Isph6qZpde2VXOSi7b6+b+O+im3EJtiA7vuHCyr/jjkHp0ZurVTIhCc
WPl3tDAyP0ngzoVtqproxw/EEFPrOSnNEz8soBlM48Rk4L5BodSgM7GNvBhMvse1kMmdJyBV
jU5bI+7JuTsB2XMS+JtAvtCLQyoZ8DqTmryN7uWV7pJd96LS+BAeGYQc+uGdlom/0A9kPAUX
qp/utblfpSb9+deb+WpL1Ko6hpq+zhO1CHiq5AUkTbXOeKrksJ21aiSS65qdwJq4mHmVxs1u
Hrqazvgkc4y1wa6q5MG1P/D454sHM7WOTiD5MbbnT0dKxLaxzfz5eWnALLmZzrdDzhKRnXOR
Xt22xLs5wUGmvrb1OuHbLlSGB3LfThLtz8CCqpC86iyBg3NC2nG1cnKK+8+pmGhfd7/3B666
c11Om0IWjAUNknLmemaVF/KbvUtyJKU+ayQ+zgdpKGG0ei8Z2i6//sfcTx3t+EiblqnLgVJQ
ugIyEMEz/gUSI3306gxomn6bTpI9T7V3P4HI0LV5GpJIClByth4P5OHgEH6/Jaqjvhm6Hs5C
wnNVcqfNTMn5ePe7VUSpT0kZneQxBu1q2arJKT96I9s1vC1ZGROGeOBaOoHtSRAmcQXQgRtt
7hmVTiwZ6ovV1lfQELj57LSkW4YKvby/4vtXta8tpMHNkJnCmaampqamcELbPiS1ry1jcQve
TldhDbnhpqampqZUg+T0W6r51gsTxn+BLYFq0aampqamqUPzsfnkW8YrDJyxp0BMpqampqam
DApj2f7tc04sdrpiTIcFUBBVW6VLetN2V7WvLYFOo7osx3OKmeumpnBCFEi4+dYL2Uw+TC4P
c6OPQ/e0FTooSnm6CzFEpqampqZLoIY0gZwtoNA1Ak4sdgVSGZLZVIPBeJCmpnDeCLfKPDoo
SmKnZZympqampt0QXpu0GRCj0j2+C21jRwEsqTBOBsKmu+iKQgrZK2OBnxiepbhR3IwLHsFi
qvrTvgNKkwYXndUD1PxXIHMBVmJy/6QFUhmS2VSDaktdE9lUUT//LJ/4AEM0Qh6OcoZ1krSS
rzrvmbJOV+giYfnrfEicB8SWBce5tDyEmB8vzhRVEuMHVIbHImgdpYtlp01PxxOLcZaQuoMJ
i9/Xvoc5pqZ9m3AcxnfGPCj/Q4av+iWLUlkQfnNLgtAL/AseB+umpqZMHNgHpxfBSnkAoHq7
Hal1W/6BRyWLO9G6gfxoeB48/lJMnTFbyhw8BKZWeRn8wlxk/x2mps8D5IZP+TMotdKu+fia
5Le1kgck5LPOeLWlJPmlv7UHtZIHnXMTqjqwJM7rmh75MyC10paq5Be1pcaq+Wqq+MadOsGq
zussnTFbyos1q/77CMYi0SrXraYg0QvfsdlUPKZ32XUdqWPXukxh/D2+gWQoLYneLC9OSyj7
+wxY+Fd+bKOXaKdl0CZhJT20krlQIAfi6K3avd0li1JZEH5zpqmJrxesUZimVnla9u3wCKbK
Ad0t1XMB6oe54UugxiJXbmUOnYqX0aYMupdoxjLtH51ZiHz1KrnhS2hU6WJDP0Fmpj4dm3lx
Uh+pYz2+Yc6G006r+xp0hQX189nRpgwKx3lOK7GDQ+7JA2UadIUF9fPZ0aYM2S1hY0cL5aYa
dIUF9fPZ0abZBVCepsoB3S3VcwHqh7nhS6BjRwvlO/Uq4XXEnl15ReMBH6ljPb5hidBSO2JD
nwOj2TRcyiDr6VaYplZ5GfzCXKZwGcW4ivKqMY2c+7D73rLdJUCgPN/1KmEtR7amcH0nNqX8
aHiWvLW5/kz5uRPEUrCoOw1MleKKHUugqDsNskzwO/+mpkDiYKZk/xBOwZqqeNv5mCDkHp2j
g8g8g+Lg6jP7V2FqaEMr4CQsC96ERKZA4tQQpkpicr6NV0hCfdHLLaRlpl15ReNEpqnqwU8/
mHMEsXuVcfumQhPR4DFbj7QJItQN3H+xK+uO+6k0Lh8tih0vqQsKx3k+LIajupd5feKmyiDr
6VampjR7/uAsqaZ2upfGUzwr644FE8OWwTthY0cL5YUF9fOZpqZk/+20W8qmxt8agXmS6Xaj
eFymyiDr6VampjR7/uAsqQsKx83LYkMLcR6Ox0SmQhPR4Pumjz2+H/imdrrkUt4MWMbDBcg8
g0W8W8r5tMZj6K27Hbh+CMZjQ63EqDsNMhAopgbQEHEn7E4ipsZvqnGDUhmS2acXpqYIxiLR
KtdCLOFQIAGQbT/VeYgFjrBtVOHIPKZw8Ae06tgXUiOYwXimpmciHG7YF1KjoyTBoyWVK+tu
v4duOaapE85xIhxu2Bdzeg0//w0abTvorbs0V7Kmps/VLCjcPANjRwvlOxP8/21eUqOjl8ZT
PD6LRZmmpl2Gr/pDkyTBf40msjIX3oSj9v1FqwVUiynDJMF/jSayMh+mpoXG1rfZA9P2xS2y
MhfehKP2/UWrupCujVRe9HlN+6ZfAUHS2bQGoKBS2YS6xN5FoX+Tv9HZdwagdosKBEw5pjDH
iAygPOJICk6An7KfQrhCK+AubGFrku5oJUCgPN/1KmF7W6YO2daBVtwMEpA5wdFyBqCgsd7n
pmecW/5hg1Z5GF4K6gx0potl2wYGlyNvsGPt3GoiNg7bvIG63tm06FdM2+Gm0rre2bToV0zb
mxNlnSbqDGhbcduxPlvKQ4GHZbEJi3893xoNp/UtPSHBpqbd+sg8g+Lg6p/oV0zbJfw907+n
Zf5STAVQPVNewYMJucE+ueGmpvxxBTQ9DZ9CWjqB3JD2bS
TRf2RSScaDp2XQJmFI5Zimpqlj
RwvlO/UquXTeO3k+TnUn1Uzw2oSj9h7oQtkySXK+st47OxP80aamj1cgcwFWYnLaJnn2MaF5
TfumqeumqQu/tAb8kd6Eo/aYGEwxk4OOsCtkp1MDoGNHEHGx33eQYz2+YYn4QhiYpqapYz2+
YUIK9s2byJsekGM9vmHOhtNOq7+npwt5DFjGw7/7pqZC2nafm59Xil3NuLT6Be5LmaamhQXu
SwOgd2ENitjqHlA9BKamV1UHpkcMR5I7oAF+Xm7R4DEHpnaLQr2m1FT4DHMrg2VhPtwfLTam
CeID0/g8IGNiCxMG9fPZIjamCMbD7b5fk52NYV95GOvpVp36LBnypKY2ph8IMpf7pjww4xAy
fTyD8orBC1Z5TdpJB77ZOxPlu4m0csZUQDwuTqce3qamCeIDC9pHTEhsM05/p993kAvZx0hs
SrocRW2Efgd2pqktR7c/iAU4ucAep66/mLy+X2wY6yWHsK++0/g8IGNiCxMG9fPZk26nM3uy
RXpXR0xI9s38YXv+LvnJLKbbLPhTdyHBpqYg0Qunwd/1DfaGNEOopmftX62mppufV4odqXUH
EOem4ammyvDyirqdjWFfeRjr6VYXc27Gw+jfwyRUg8g8g0Di1N+nQp6m/AFH+6ZKYkMLcR6O
x3kqLrMKTqampqZLoKg7DbJM8Dv/vF7gmpI7oAF+Xm7R4K0ewXroZQ1ruR2pMFQLpqkhxS0g
cyuDZWE+3B8tbo1UXvR5TfmXJUCgPN/1KmF7W6ZNnH9bpt0tY89f9pDg4jvoPiMyHKampqZs
Mzua8rrU35UpZqcD0/bFLbI9v6ffGg1hawot8AFBM/umBjjw+6a4fj4shqOwdfYK3hiHkLqD
yDyDQOLUKxeak4PIPINA4tTfp0KDW6bjQsjUEKYvTsrw+C+mRqbKplqMC9nHSGxKuhxFbYR+
B4pobaYOh9R2po+0CSLUDdx/sSvrju17v34+LIajsHX2Ct4Y+KbKpuMHKjmmWowL2kdMSGwz
Tn+n38MfuzPLVnla9nmE6gsKA9Eop98aDWFrCi3wAUHhpnfZdR2myqamJU3bvIG63tm06FdM
28A8ckJZASeEgdZjst47eX0nfgtYsKamTZx/W6amSmJDC3Eejsd5Ki6zCk6mpqam8oq6nY1h
X3kY6+lWF3NuxsPo38OarWFqaEMr4CQsC96EVVumpkpiQwtx9greGM0u5ZxOKwUJi39cZP8d
pqampqan3xoNYWsKLT0xv0rNfL++jbRyxlSDaf77pi8o9nSmphrM9BAexCWnLS5SReND2Nvs
8n6Egeqn3xoNYWsKLT2tpqZplgvLpqaPtAki1A3cf7Er647teyimpqampkrNfL++jbRyxlSD
aRAX3oSj9v1FqwVUi94spqbdLWPPX/Z5Ki4t7aGBwBknupd66Pw9QqampqbyirqdjWFfeRjr
6VYXbDzD4P3lu3YFOLnA1S1P0C2ga7kdpqYIS9SmpqZKYkMLcR6Ox3kqLrMKTqampqamj7TL
x5y69HPPX2OyPb+n3xoNYWsKLfABQTP7pqZ2upfGUzwr644FE8OWwTthY0cL5YeQW6ampqam
Vnla9nmE6gsKA7t2BTi5wNUtT9AtoGu5HaamfyglUyimqXVb3mhbpuMHKjmm3S2V3t4+LIaj
sHUK6sH7pqZp4JqSO6ABfl5u0eCtbeslCSLUDdx/6pqtYXrBKwZTQ2uYV9ufhfimpn8oJVMo
puAcGlIs4akLDDoEsXuVcbouXtL8aC1jz1/2kODiO+g+kjz++C+mGrMtY89f9nkqLi3toYHA
GSe6l3ro/FuW4akjiMemqQsMOgSxgyfs4BK3/EM0PWGJQlk9CsfGp5t/4g09IZUzGz3ZQgp5
Pk515SAQnSim4BwaUizhqSF7YYnQUjteRw09IekkMPOmd9l1HaYaNNQJY3EXc2VhCrSNMxs7
LZXe3gxYxsMdpqbd+sg8g+Lg6p/oV0zbJfw9078GoKCx3rREpqamc2723lUhIL654aamqXHL
OxOLYrGQP/8NoOzoU5mmpqbAraA//w2g7OhTA4lCWQ0y6zRDRbeDYaeQd0Crpqam3B2mqQu/
tAb8kd6Eo/aYGEwxk4OOsCtkp1Ne4JqSO6ABfl5u0eCtbeslh7A4H6ampom0xD/VeYgFjrBt
VP8GoKCJ0FI7XkcyH6ampna6QcfVUmibUEx24NpdkAsMOgSxe5Vxui5eaESmpqbGp5t/4g09
IZUzGz3ZQgp5Pk51/NwZyweQY2NhOwEX7aMH4tSmpqa4RSj7pubn+6ZKO/8NY89f9nk+xGuY
m/x6pqZXYXuxp5t/4g1jaEC5xaamvDIJ4JqSO6ABfl5u0eCtbeslCSLUDdx/6p0yfj4shqOw
dfYK3hiw+6alYtzyirqdjWFfeRjr6VYXUqOjl8ZTPD6L/NrGp8Fo8nbEevUfB7TLOiGmps47
Cww6BLGDJ+zgErf8QzQ9YYlCWTIsptt6WoYiNqb73S1DrcTTxmIoVZWoYYQz/GhtEKa4fj4s
hqO6Ll5+IAntbsSDp2XQJiMyuZUipn8oy040ioSmkmo0YHMrg2VhPtwfLYqEpqdhiUJZDY3i
YGT/HaamlzRDr/r6JcDYeT5OdeWaGTQ8UCBzOg/5uXdPrWF7saebf+INY2hAuSfBQykipgwK
x3k+LIajupd5feI0e79+MuJiQwtx9gy+slU9IqYME8RFfj0Kx5rYuprGMnPJLC9OSyj7DFj4
V35so5dop2XQJmGoOw0abTvordq93SWLUlkQfnOmqYn7nAEnTlfoIkHXhnWStJLueIEn9Jim
Vnla9nnqLdWmWoi4ivKqMY2cmKZWeRheCuoMNqmJ+3MB6p/7VKNKDWIBHF5EygFnGehtVJ/7
VIPIPIOnZdAmYUjlygFnGehtVJ/7VKOQ9gw6BLGDCUiEvwKJ+0IT0eAxRHDeDFjGw7opJzbI
Zcog6+lWmKZWeVr2eQxYxsO6KSdGiftCE9HgMURw3iZ59vumGnRXn2OdipfZTKan3yAyMcWm
fCCUV59jnYqX2anrqaA5j7RAoDzx0WGrBzwulMjEKWZvpqaHkBItKPt9xML/6Z2NYV95Pk51
J6Ylq6bYCC/4GFdizTKrn5KtsSVF3hnAVfpDUEXeGcBVKcFxDAreGJimpmfRBzxyvqcr644d
pgTZeimcLUyV4qB43vBi3Ay6l3roq6aP1wFWs8g8g+Lg6m66g8g8g+Lg6vVCfJUpZqcrZKd9
aCXoVw0jDdumcNGEVtHi297eZOtLKPsWLSBzK4NlYWNHC+WpP9V5iAUJi389mok6Lu2jBiKm
xm+wY2IBHF55VcP7m99M2wZd+B/alq7++1dhhjSBnGJypt0t1XMB6od7Ovm/sBJnpkpi+VOg
Y0cL5Xla9nlMmu/5tMZj6K27Hbh+CMZjQ63EqDsNMhAo2yz4U3chwRCmSmL5U6CGNIGcYnKm
2yz4U3chwRDd6c+QwKaLbMlzK4NlYWNHC+X4L6lqepb73QT2qiaa8rrUYYlCWSqmyMCQjbTE
P9V5iAUJi389EOemBtAmI8eIAz/VeYgFCYt/PZpdvkpOpwcQ56bhqSHFLSBzK4NlYWNHC+UX
c2723iousyiHNqaBZYumpt7D4JqSO6ABfgxYxsNywK2gSOzEcZAS86YOh9R2pqbGb7BjYgEc
XnlVw+17KKamiULZ1re23BYtIHMrg2VhY0cL5RdzbvbeVSEgvjmmpqalumwzO5ryutRhiUJZ
gdhPx2I76D45pqampboM/SWjBQmLfz08Liqmpqbd3qampo9yVjv/DWPPX/Z5PsRrmJ6mpqbc
v/umpt3ZpqamuEUopi8o9nSmqQtt6yWnZdAmYUjlh5BbpqaXNEOvvUluaeCakjugAX4MWMbD
cpKtsSVF3hnAsqampqmaxS0gcyuDZWF
jRwvlF3Nu9t4qLn+mpqamP/behKP2upd66INFJjmm
pqaPIaampt1Pk6OQ9gw6BLGDCUiEv5Smpqa4q6amps8eRrbcFi0gcyuDZWFjRwvlF3Nu9t5V
ISC+Oaampqa8XuCakjugAX4MWMbDcsCtoEjsxHEdpqamqeumpqamzjvT+DwgY2ILupd66COn
2WuBx+JjPSGVpqamps47Y7LeO3k+TnUnHuirpqamqeumpqamqsneMuJiQwtx9gy+slVcpqam
3SnRpqamMIimpqbc/vum4BwaUizhpn7ZUD1ND9SflJglGRoqYVdieT5OdSemptgto5d66INF
3hnAMrm0BqCgY0cL5TsTJ6amINEL9AagoLHeuOLbvIG63tm0p2XQJkGV3t5k6y+mpkwcdN47
zcWflb5jst47zcWfbKamRXp1BvXzDArqDPVI3l5uo+2jBiI2prSnawrMnV9i3Az9xHqgMhPo
VOLhpnDwPQmLfz08Lj2+z3pXk5d66INFJrk0V4E7C23rJadl0CZhSOWYpqapO3n2UkjeJnn2
MUSmpn55Tf876h5QPQSm3RPZVFFXYs0yq27VLSBzK4NlYWNHC+UXUqODHiGKhKapC/0lowxF
tCd2o3hcZP+kBcg8oyWVK4ZQRSaSPC2V3t4MWMbDung9EKYvTsrw+KbbeldHTsIo+30oTquB
ut7ZtKdl0Ca5hKbhL6kv5ueoRi/m56hGL+bnqEYv5ueoRi/m56hGL+bnqEYv5ueoRi/m56hG
L+bnqEYv5ueoRi/m56hGL+bnqEYv5ueoRi/m56hGL+bnqEYv5udnpiUR3k4rnDvyCjSky/tN
nH9bpgVl9Sr8nC1iARxeeYSj9qEfui7Hy6ZL1Cda9nlVISC+e79+hKP2oR+68IQe6EWZpqZC
/3la9nlVw5C6o0oNYgEcXoGQC/0lowxFtCd2o3g9TKamVJd66IPy6ozHDLqXeuiD8uqG0aam
dN47eT5OdSfVTPD/Ynla9nkMWMbDuiknaESmqYY0gZwtoHrav37GQh6WukEdpiDRC/RAoDyf
lJgGaCVAoDyflJhR2dY+3B8toCMNosGn35UmPQpsuYSmS6BCCtkr7Xv+10WBEHGxIDP740LI
1BBn5C3QDC7Hy90T2XXXgWWnKqaBZYumcN5OK5w7IzJIcx6EVgGDW9t6ioTdCYsiy7r0p2XE
hjSBnC2gAYf2l2SQNnDeDZhXoqYJOXcrDJyxK5htTKan3w/kIjMNgR3IZY+0jfnC1Za/+1SD
UhmS2TwoqYn7xuLSnExCvpndJQniLaBCdgWj92UOnYqX0aYME8Z/gS2BHchlj8JZeRzGd8YD
QnZeLLok5OiHYlIfqWM9JUMNY/vIZY+0jfnC1Za/+1SjYkyHBVA95wk5dEzwmKZWO0+xg5J1
9lbIZY+0jfnC1Za/+1SjufIpJ+yCyGWPtI35wtWWv/tUg2HU4amJ+8bi0pxMQr6Z3SVKTjwP
1CWbdIs74cbi0pxMQr6Z3SXgPsf7cBnFuIryqjGNnPuw+1WrqQv9BunlOxPFpqZCE9HgUptz
u5+HQeGmh5ASLSjdLYFsyyZhSOWmppvfTNsGXfiazTR6RKY0e/7gLKkLEhB9kmEco0H7ptLZ
tIcsoyS/F2QoTJo8hNlOIPw90/77V2GjRTRhIw2ipqZzAepuz6pFKN0tgU6n9lampsjEKWZv
SZqdV0Smjz2+u/77V2GGNIGcLaB6HaZXn2OdipcMSZq1ufUsqaZWeRn8wlympriK8qoxjZzc
h7wwUp6mMDLRIAdqIqbGPHK64qamZxnobVRuz6qepqnqwYeKHbh+DFj4U+J5O6amSkwplpib
JfrZH5bc/vvjY6CxBysMugtVb6bK+bTGY+itux0vDN5kKDunPC5Op9Wm4yQzUibe//im2wmD
UhmS2VSDq7WrpuMkM1Im3v/4ptsJg3pKJtDNLqMLEhARTJpyuuLjJDNSJt7/+KbbCYOnmG2E
fjJIBWX1KuHjJDNSJt7/+KltzntDpl/H9xp+3g2YV9sDf40Ne9oDoINMdgYxa7r2pstONDam
Hwgyl/umPDDjEIGSUIF5AKB6u3clQw09Cmw5pspDe9phsQfiIB5rQ0LBtCcpm4P8PdMdpnyn
QiWWCxIQEQ2gKjx53uujLtpzZWGxBysMugtVp9931qimqXicLaLrMc8I+LSxPCj/Ynm8zhCK
9h4HpqZ9m3B72v+6qjGSr75jpME7nX5zL6amTBxZFz6xVIN6Snk7/2JiQ6sME8YtOyqmpkV6
BP8nKZuDCfBeHlvBpyuYbYT18dxyJymbgwnwXh4HpqZ9m3B7ugtVp6c5wUADKjx53t60B6am
3qCgg0x2Ubf1IzOSUIF5AKB6DAp66kLaduGmd9l1HaaPtIcsRbw7B6cXZP9iO58fB30UkEHt
IvUQuihicvimpn8oJVMo+6Y8MOMQPXK64ty8JLKmZ5cyn35zNEOrpqktR7c/iAUehB7B4i72
sqaP1wFWs3pKJtA7LG66g3pKJtA7LPVCpZJQgXkAoHrav35kKEyaPITZTiI2plqMCx7BYurB
hzamTZx/W6ZnKSWrlQmDekom0M0uowsSEBFMmnK64vimpuMk6EUopi9OyvD4L6bK8Eo7p9Fk
O4dis74gQCDhpnfZdR2mj7RAMPcnHuj8Pb4L/Qbp5TsT5SBiO58fB30UkEFiTqO6eNe64vim
pghL1KamV2G826g9PC49CsfGPJxXGoNFJpI8JSe/UuPcJSkxZWQNMus0Q0Uopi9OyvD4psr5
tMZj6K1bpjDHiAO+h9TCOaZNnH9bpmcpJauVCYMehApjOy1I2SKmpgbQJrkdqXUHEKbgHHaL
QjEHphqzLbIIZj08Lj0Pc4+0ktMHw7p4PaZ32XUdqSVjKhhjoLEHKwwe6ELZMiypMFQLpnz/
6fHCYz25Bi9y1MM8/IpHJSe/UuMXB0g7+904QZympvZ627wjEH2SYRyjQb+1D/2/yP2A8Wzn
9TyfGLFtOaHDjmslyabzjo8hxHAwYetHAUgc8jsid1jTxTcnJkle5gumHD/RfLvKcn1eVQvP
g/Lhpqd77PZ6ZF5KEPCD3OJ/ksP+BE9h8aapxyCWm59KwSpg0O1fC22cEDCt+gWtQbEEADNl
SmKLLey2ps4wPu0wviCunYl6ZnIcebNBPz5CokG2pnDlA5z49tqbbJuKs2+xn10MXa37puh7
Er4P/BYAgzp2+KURbWNKJYyQci3QNqZ1/H68LBDlElaMNKJBAIPgWa72UphoVdAiPQCnzIdm
cr2mfD0x2XOH1C2VZRIhmrsBdrpWToTypktueX/osA1TTLm5T7E+xrxgeadMeYQAPCr73VOJ
7KamsTCHsHb4qw1C/hFtfwA7lc3Av7U03K0zKicSWqZp/H6tJBo2ptkxKsDa/BZVjKoUpgSc
CbamcB5i4s2FnCWM38S6oE5C+mybdDDPIG2fIpa+okGuvaampkuVQjFOoKfOdzfG/mBtz1hF
BWJgT/wcTiGXPvumpqampqapExkSnaGmpqampqamuL/ypqamqWLizYWchYLdhhK6cQX3lvfB
XuGmpqZ+UopjHd2GErp2EimwNqamprQGg0rP9IOmHJqY1A2kOgkjd5/ypqamqWJhGcAx/rRb
pc4Zb80EBX/TpqamuP7I06bKY4kJ8j77pqcDYoN/YQtUnw2ygVSxNqYEnAm2pqYQozNR0hyx
n10MKS2cKCi9pqmbHmUc06YOdzHAP1q9pkt37dI4Joz6Ba1BsQQQ5RI0iu/7pqaPYZByDNH3
wbf22ptsJ9q+Ye8P4BywNqamprGfXQxdOpEs61czt7Am+YDS8brwEG5dYdCFY0olrr2mpqaD
65Zs0IVO+n1eVQtYrvx3+CGnK66nVzM/8qampkvbetOmpqa506amcbCBFpgFYoM6NF3TQiK+
1A2kOgkjd5/ClX1e
VQtBYK1spqamtAaDSs/0ek9o5IaLXYvX1/pvvs3vwCaM0l7hpqapYoPr
lmzQhU76b4yuMtABIjFR3O2uC96BkW0LlnOJpqamcLWgcusWvaampr8oPvumpwNi1NKgb8TZ
VXM8M/PrDNr8pRkTNqYEnAm2pqYMVQwsp3vsNJCGQvCzsEXGejw2pqamaGFOQvpsm8/AeYC8
onlJ+KsNkNOmpqaPQpDAivZ3n2X+hXOJpqampoyuMtApAW5d2QcEBT77pqamm0OEd5/xlizg
HLA2pqamVAa0+PrTTlqmpqbdTOGmpnGwgRaYBWKDOjRd00IivtQNpDoJI3efwPBoSnvyJGym
pqbdKkGxPsa8YHlJsQQQ5RJfrrqtbKampt1vCyOjbQVDuT/2+OMpY6Qybn5/6LANU0y5uU5D
hF/Niaampqa6XyneYkicmPjPOi8NkH5/6LANU0y5uU5DhEeGiaampqa6dhIpSfiwEEFgoaam
pt1VhPKmpnHvxIxKJe0S9fBoSnvy/ni1MFqmqQkX2Tqo+2eT/vGmptkxbwsjo20FQ7k/9vjj
KWOkMjC7LuGmXwwmvaapY7ljKAykLhn/CDTUfV5VCxz24aampkgFOjRd00IivmHvD1FhtxDw
g9y9pqampTTcrTMqJ9pYEl0/8qampqmzsEXG0mXcm0OEX82JpqampjqbqCfa+pwof9Be4aam
plZSinOR9EIUpqamj9H7pqbi6yOJVc1vzc+HwPR6T3GGg0rPPgAn2r5gSICkY0/Tpqamj6ty
HokLD4xht/ZfIj0A1LA7btOmpqZwbX8AO5XNwL+dDRDb0iVKe9xhBOvro2jRv/46m6jUn/Km
pqapYtTSoG/E2VUQvM/jg9xhBOvro2jRv/46m6iLUvKmpqapYkrt0rdz6yKujBSmpqaPuahs
pqbi9wXMgCkZAEVgSICkY/gTqnoUpmcmA0PkyKYOdzHAP1q9ptOmfu3p2k+ccWbEPkp5QWBS
mOnaT5xxZnKpxv5hEcFO8QxdOommpqamS5VOe0O0sU2yMM+7q3IeiQsPjGFe4aampt1vjK4y
0CkBphyaBeBZrvZSmGhVIHksf+2gjEpe4aampt1vx9Bo+6XOGSpgT/wchusr3L2mpqamum6c
AK72z/ypxv5gbc9YRQViYE/8HE4hlz77pqampqamplMp7f4TNqampqampqa4v/KmpqamtOAe
YpwQ0BCm0LtMCx5inBDQEBSmpqamuRwJ4alDiqu6IL6KEopqwgp5TcZFG6YEnAm2pg6u2YeJ
GYZN6+uj4KBXYUKrQ6j7ppdk2TBapmn8fq0kFKZj/zw8YQc2iXu6/yg++7pxBfeWY4B5GQBF
1A2kOgkjdzPIqWLyuzsS/k0cHpLIaT/XAf0MCr3OMD5cKQCDOjRd0yyc7dtOq17/zU3v+4YJ
J+FL6SntMrscVXpkIrUzBf5Pmj/OM3MHZJqqP/hVsbuqkghylryqc5LGIA/PtZK51B4KYoM6
NF3TQj9a3cYMJvK7CDTUfS2cUn69BJwJtqli8rs7Ev596OQ6wf4kEHP5TgW7IrWlNJIIwcEg
qjoe2dBPtc3+Tw/kzrnUHgpzaqMjqkJa3cYMJvK7CDTUfX/toIxKNl8MJr3db2P+PO0SWaa4
x/nkxp285LnGvyT55OTNZHKdc86G+HidteQGxr9OnLXkhgdymj+cteSb+Cwkz/lkuySdc6XG
D7wQte5kcrWBQ5pIHNOlCAnlJRJxBfeWY8aHIhRwcfIupmEW7cS5VYxig39hC3oUj4Zjw2P+
V/zSoKcEYkp5QWCh3VOJ7KZ+zCMgVZiAsbQj2QGaCywovWP/KD44HmKcOn2VPLpxBfeWY4B5
SLZL6dpPnHFmcqaPJQ9RkHIM0f7Nz4fA9Hq1+M6gjV7hYVeWEkE80097pnGwQZZeqhLy3W+x
n10MXYimU9wAD+j5M4mpYkrt9aYMRHGwQZZeqhLy3W+xn10MdzmDf6ked04B/CCuvbTgHmKc
ENAQDqQdU9wAD+j53+7RODG2uPDtz1fy12z8meJecpwmnTL4M9cT2rscPQtMLNO48BBZjDSJ
e90y/DplgcRImrxCx8FVjCPYHoTh4vcSWGD07c+pHndOAfwgVbwQTov/mICBVLEHNnGGg0rP
9BDwg2nQnLAlVfmG11WEFV5ChyfhM8KneqCwD/IczLCc8aane+z2ikNqzCfRzA/T3b7EH07r
js0pnPHGQaYslmMfzSmc8YBfrroIfcmWLEoJx76hpuh79q6diXpR3JaVReSAoaamU/oFreLN
hZwTNqalkvwbSNOm3R4KYuLNhZyFx+GmMBAytni9po+BPW/Nz4fA9HpJpqmx6nhSt6amhw95
UoczejtsIoEHian2igurQ2N37lWME5285B7ZICRoMBAy8O3PV/LXbPxtsep4/g3ke+Lr/B5P
mrXZuyQktR6LqGwO5KObfxhDQ2NH2SEY9ooLq0Njd/empkt3s3GGg0rP9BDwgxwJ4TPCp3qP
g0rP9HPTgWz7qbHqeKqdoaaPgT1vwQFy66MGXq6mj4E915og06YwEA1I64qfoIWcJpjt1A2k
OtP4qw1VkOS7txN4eL+9cCaMMQaDSs/0g9PdvsQfXv9SeYC8iRyG6yvTj4Zj0gaDSs/0ehKg
lQ2kOtNCP1q9tOAeYpwQ0BAw/k0cHpLIaT/XAf0MCr3OMD5ceX+uCxjH2vxuqVI+Kvu04B5i
nBDQEDD+daameLG7JKr4wZwkms0P+XJylpo/+FE/te4e/k+aP/6B+E94vaaHD3mz/8FsnIXH
4amx6njNEyy15AYeLKpzMzoPD+Salk+10nMKEzamZGRhV5YSQTzTT5KE4SKH8j3UY9IA+4YJ
J+FLlTy60fgc+KW5s/k4Yu2dehSJeyQaRjvEcYuMH7ogs//BbJyFeRgLE7DMaBtwbZ8ilr6i
QftT0pwRwU7x2RDaT5xxZnK1IiJ5Q4mpYkGxPsa8YHmm4l5ynCadAGxwbbOwRcbSZaZNxtle
KbA2fn/+haSmU9wAD+j5M4mpYv/ZQbAqIjKm4l5ynCadAGxwbTvEcTMAMzefdHGwQZZeqhO4
nHzNvRbtxsywsA3bEVJ+TiGel2S+fgvegajuJnqWKvvBPGKn/J+W9vodXfjBMpctZMwFobxP
wEiApH8ieWz7pqbBGYddzXZy9l3f+r2mcCxeLCLRhmaaJGReShDwg3qDBkKQwIr2d6empsAK
DV3uKbc7ljvZ/r5KvNROe0O0sU3XjM+1NNytMyonmAzdg4OnpnqNwWMbplT/YVeWEkE8zncA
q2KbAfxI/q74evDAwOsSu3i/vabUY3c2pldhQqvpGf8INGBIXjSK7/umS5yoLO2cewbeowAb
pqamQoMM4aamqdCcCXl//oVVjEM/l76kMtvOoI02pqamBJwJPR783yztnHsG3qOuGWg6E2Jg
T/wc69lapqamaTztTbE9eSIjljLb66BBNL5Ov7pfIj0A6Jz3pqamiXtJpqnQnCVtnyKWvqJB
AINRkHIM0fcXXpAAZF5KEPCDeqO5T7E+xrxgeSi9ppdFnDamV2FCq+kZ/wg0YEheNIrv0dki
06amEoibsxIm70HoPQvhpqbIsO0UpqamzjA+PW/H0GgAo7mwbgXMgF+uuqGmpqapUj5c7eJI
TrMSJu9B6IFd15CdMeDSJrl/7V82pqamAVVtI0xVi4z+CYB6Lh76E9qqxJV9XlULI4i9pqZn
Jsfhps4wPu0RwU7xDF0xjGKDOjRd00LcpqZZMjM03K0zKidOEb6qh7B2+KsNbKam6HsS7DzO
w+i5s2/BAXLrq0+ShOGpCRfZOqj7Fp2LwvBjPTamLJZjJ4YJkkGmcHHyLqapImISzCPQjNyu
9vSzBrSL3okHNqYWndGGqPsWMj9aZyYDDQ3NqGvk7Nnfpyu2pQgJ5SUSdjIjowxfb8bfrowU
c
HHyLqZhtCPZAZoLLBkAG6bd1wjNTqr5Hm0smnPku5oktc4GxiSdzvmBHiydEAgkquSB6fnB
wSSqzvk90gUgmqo/+Aicmqr5Kcb+qpihpqWSJ7VLpxkPHNPykCwJJk61SXSqzg+1KEJtyPk=
/


--
-- PKG_PROVIDENT_FUND_OLD  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_provident_fund_old
AS
   PROCEDURE PRO_PF_MONTLY_CONT_TRANSFER (
      P_PRO_DATE          IN     DATE,
      P_PRO_MONTH         IN     DATE,
      P_OFFICE_CD         IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_TYPE          CHAR,
      V_I_USR             IN     VARCHAR2,
      V_I_DT              IN     DATE,
      P_OBJECT_CD         IN     VARCHAR2,
      P_OUTPUT               OUT VARCHAR2
   )
   IS
      CURSOR MONTHLY_SUB
      IS
           SELECT   FUN_FIND_REGIONAL_OFF (M.OFFICE_CD) OFFICE_CD,
                    M.EMP_GID,
                    M.NET_PAYABLE_AMT,
                    S.MEM_TYPE,
                    M.SAL_DT_FROM,
                    D.HEAD_CD,
                    A.LOAN_NO,
                    S.CURR_BASIC,
                    CS.CONT_TYPE,
                    CS.BOTH_CONT_ST,
                    CS.CONT_AMT_TYPE,
                    CS.DEPEND_ON,
                    CS.MIN_COMP_CONT_RATE,
                    SUM (D.DEDUCTION_AMT) DEDUCTION_AMT
             FROM   SAL_SALARY_MST M,
                    SAL_SALARY_DETL D,
                    SAL_HEAD H,
                    HRM_EMPLOYEE S,
                    CPF_LOAN_APPRVL A,
                    CPF_PF_CONT_SETUP CS
            WHERE       S.MEM_TYPE IN ('1', '2')
                    AND NVL (M.PF_BAL_TRANSFER_ST, '0') = '0'
                    AND S.MEM_TYPE = CS.PF_TYPE_CD
                    AND LAST_DAY (P_PRO_MONTH) BETWEEN M.SAL_DT_FROM
                                                   AND  M.SAL_DT_TO
                    AND H.CAT_CD = '02'
                    AND ( (NVL (P_DESCENDANT_TYPE, 'N') = 'N'
                           AND M.OFFICE_CD = NVL (P_OFFICE_CD, M.OFFICE_CD))
                         OR (NVL (P_DESCENDANT_TYPE, 'N') = 'Y'
                             AND EXISTS
                                   (    SELECT   F.OFFICE_CD
                                          FROM   HRM_OFFICE_SETUP F
                                         WHERE   F.OFFICE_CD = M.OFFICE_CD
                                    START WITH   F.OFFICE_CD =
                                                    NVL (P_OFFICE_CD,
                                                         F.OFFICE_CD)
                                    CONNECT BY   PRIOR F.OFFICE_CD =
                                                    F.CONTROL_OFFICE_CD)))
                    AND D.DEDUCTION_AMT > 0
                    AND D.HEAD_CD = H.HEAD_CD
                    AND M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                    AND M.EMP_GID = S.EMP_GID
                    AND M.EMP_GID = A.EMP_GID(+)
         GROUP BY   M.OFFICE_CD,
                    M.EMP_GID,
                    M.NET_PAYABLE_AMT,
                    S.MEM_TYPE,
                    M.SAL_DT_FROM,
                    D.HEAD_CD,
                    A.LOAN_NO,
                    S.CURR_BASIC,
                    CS.CONT_TYPE,
                    CS.BOTH_CONT_ST,
                    CS.CONT_AMT_TYPE,
                    CS.DEPEND_ON,
                    CS.MIN_COMP_CONT_RATE
         ORDER BY   FUN_FIND_REGIONAL_OFF (M.OFFICE_CD), M.EMP_GID, D.HEAD_CD;

      MONTHLY_SUB_REC        MONTHLY_SUB%ROWTYPE;
      V_COUNT                NUMBER := 0;
      V_EMPLOYEE_GID         VARCHAR2 (8);
      V_EMP_WISE_CONT        NUMBER := 0;
      V_EMP_WISE_COM_CONT    NUMBER := 0;
      V_EMP_LOAN_REC         NUMBER := 0;
      V_EMP_INT_REC          NUMBER := 0;
      V_TOTAL_EMP_CONT       NUMBER := 0;
      V_TOTAL_COM_CONT       NUMBER := 0;
      V_TOTAL_LOAN_REC       NUMBER := 0;
      V_TOTAL_INT_REC        NUMBER := 0;
      V_TOTAL_CON_CPF        NUMBER := 0;
      V_TOTAL_CON_GPF        NUMBER := 0;
      V_TOTAL_LOAN_REC_CPF   NUMBER := 0;
      V_TOTAL_LOAN_REC_GPF   NUMBER := 0;
      V_TOTAL_INT_REC_CPF    NUMBER := 0;
      V_TOTAL_INT_REC_GPF    NUMBER := 0;
      V_MEM_TYPE             CHAR (1);
      V_VOUCHER_NO           VARCHAR2 (15);
      V_OUTPUT               VARCHAR2 (200);
      V_SL_NO                NUMBER (5) := NULL;
   BEGIN
      FOR I
      IN (  SELECT   FUN_FIND_REGIONAL_OFF (M.OFFICE_CD) OFFICE_CD,
                     P_PRO_MONTH CON_MONTH,
                     SUM(DECODE (
                            H.HEAD_CD,
                            '005',
                            DECODE (
                               CS.CONT_TYPE,
                               '1',
                               D.DEDUCTION_AMT,
                               '2',
                               D.DEDUCTION_AMT,
                               '3',
                               D.DEDUCTION_AMT
                               + DECODE (
                                    CS.BOTH_CONT_ST,
                                    '1',
                                    D.DEDUCTION_AMT,
                                    '2',
                                    DECODE (
                                       CS.CONT_AMT_TYPE,
                                       '1',
                                       CS.MIN_COMP_CONT_RATE,
                                       '2',
                                       DECODE (
                                          CS.DEPEND_ON,
                                          '1',
                                          ROUND(  CS.MIN_COMP_CONT_RATE
                                                * S.CURR_BASIC
                                                / 100),
                                          '2',
                                          ROUND(  CS.MIN_COMP_CONT_RATE
                                                * M.NET_PAYABLE_AMT
                                                / 100)
                                       )
                                    )
                                 )
                            ),
                            D.DEDUCTION_AMT
                         ))
                        TOT_RECEIVABLES
              FROM   SAL_SALARY_MST M,
                     SAL_SALARY_DETL D,
                     SAL_HEAD H,
                     HRM_EMPLOYEE S,
                     CPF_LOAN_APPRVL A,
                     CPF_PF_CONT_SETUP CS
             WHERE       S.MEM_TYPE IN ('1', '2')
                     AND NVL (M.PF_BAL_TRANSFER_ST, '0') = '0'
                     AND S.MEM_TYPE = CS.PF_TYPE_CD
                     AND LAST_DAY (P_PRO_MONTH) BETWEEN M.SAL_DT_FROM
                                                    AND  M.SAL_DT_TO
                     AND H.CAT_CD = '02'
                     AND ( (NVL (P_DESCENDANT_TYPE, 'N') = 'N'
                            AND M.OFFICE_CD = NVL (P_OFFICE_CD, M.OFFICE_CD))
                          OR (NVL (P_DESCENDANT_TYPE, 'N') = 'Y'
                              AND EXISTS
                                    (    SELECT   F.OFFICE_CD
                                           FROM   HRM_OFFICE_SETUP F
                                          WHERE   F.OFFICE_CD = M.OFFICE_CD
                                     START WITH   F.OFFICE_CD =
                                                     NVL (P_OFFICE_CD,
                                                          F.OFFICE_CD)
                                     CONNECT BY   PRIOR F.OFFICE_CD =
                                                     F.CONTROL_OFFICE_CD)))
                     AND D.DEDUCTION_AMT > 0
                     AND D.HEAD_CD = H.HEAD_CD
                     AND M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                     AND M.EMP_GID = S.EMP_GID
                     AND M.EMP_GID = A.EMP_GID(+)
          GROUP BY   FUN_FIND_REGIONAL_OFF (M.OFFICE_CD))
      LOOP
         V_SL_NO := NULL;

         SELECT   NVL (MAX (SL_NO), 0) + 1
           INTO   V_SL_NO
           FROM   CPF_RECEIVABLES_MST
          WHERE   OFFICE_CD = I.OFFICE_CD AND CON_MONTH = I.CON_MONTH;

         INSERT INTO CPF_RECEIVABLES_MST (OFFICE_CD,
                                          CON_MONTH,
                                          PROCESS_DATE,
                                          I_USR,
                                          I_DT,
                                          TOT_RECEIVABLES,
                                          SL_NO)
           VALUES   (I.OFFICE_CD,
                     I.CON_MONTH,
                     P_PRO_DATE,
                     V_I_USR,
                     V_I_DT,
                     I.TOT_RECEIVABLES,
                     V_SL_NO);



         FOR J
         IN (  SELECT   FUN_FIND_REGIONAL_OFF (M.OFFICE_CD) OFFICE_CD,
                        P_PRO_MONTH CON_MONTH,
                        S.MEM_TYPE,
                        DECODE (D.HEAD_CD,
                                '005',
                                1,
                                '006',
                                3,
                                '024',
                                4)
                           ACC_HEAD_TP,
                        '1',
                        SUM (D.DEDUCTION_AMT) DEDUCTION_AMT,
                        0
                 FROM   SAL_SALARY_MST M,
                        SAL_SALARY_DETL D,
                        SAL_HEAD H,
                        HRM_EMPLOYEE S,
                        CPF_LOAN_APPRVL A
                WHERE   S.MEM_TYPE IN ('1', '2')
                        AND NVL (M.PF_BAL_TRANSFER_ST, '0') = '0'
                        AND LAST_DAY (P_PRO_MONTH) BETWEEN M.SAL_DT_FROM
                                                       AND  M.SAL_DT_TO
                        AND H.CAT_CD = '02'
                        AND ( (NVL (P_DESCENDANT_TYPE, 'N') = 'N'
                               AND M.OFFICE_CD = NVL (P_OFFICE_CD, M.OFFICE_CD))
                             OR (NVL (P_DESCENDANT_TYPE, 'N') = 'Y'
                                 AND EXISTS
                                       (    SELECT   F.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP F
                                             WHERE   F.OFFICE_CD = M.OFFICE_CD
                                        START WITH   F.OFFICE_CD =
                                                        NVL (P_OFFICE_CD,
                                                             F.OFFICE_CD)
                                        CONNECT BY   PRIOR F.OFFICE_CD =
                                                        F.CONTROL_OFFICE_CD)))
                        AND D.DEDUCTION_AMT > 0
                        AND D.HEAD_CD = H.HEAD_CD
                        AND M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                        AND M.EMP_GID = S.EMP_GID
                        AND M.EMP_GID = A.EMP_GID(+)
                        AND FUN_FIND_REGIONAL_OFF (M.OFFICE_CD) = I.OFFICE_CD
             GROUP BY   FUN_FIND_REGIONAL_OFF (M.OFFICE_CD),
                        S.MEM_TYPE,
                        D.HEAD_CD
             UNION ALL
               SELECT   FUN_FIND_REGIONAL_OFF (M.OFFICE_CD) OFFICE_CD,
                        P_PRO_MONTH CON_MONTH,
                        '1',
                        2 ACC_HEAD_TP,
                        '1',
                        SUM(DECODE (
                               CS.CONT_TYPE,
                               '1',
                               0,
                               '2',
                               D.DEDUCTION_AMT,
                               '3',
                               DECODE (
                                  CS.BOTH_CONT_ST,
                                  '1',
                                  D.DEDUCTION_AMT,
                                  '2',
                                  DECODE (
                                     CS.CONT_AMT_TYPE,
                                     '1',
                                     CS.MIN_COMP_CONT_RATE,
                                     '2',
                                     DECODE (
                                        CS.DEPEND_ON,
                                        '1',
                                        ROUND(  CS.MIN_COMP_CONT_RATE
                                              * S.CURR_BASIC
                                              / 100),
                                        '2',
                                        ROUND(  CS.MIN_COMP_CONT_RATE
                                              * M.NET_PAYABLE_AMT
                                              / 100)
                                     )
                                  )
                               )
                            ))
                           DEDUCTION_AMT,
                        0
                 FROM   SAL_SALARY_MST M,
                        SAL_SALARY_DETL D,
                        SAL_HEAD H,
                        HRM_EMPLOYEE S,
                        CPF_LOAN_APPRVL A,
                        CPF_PF_CONT_SETUP CS
                WHERE       S.MEM_TYPE IN ('1')
                        AND NVL (M.PF_BAL_TRANSFER_ST, '0') = '0'
                        AND S.MEM_TYPE = CS.PF_TYPE_CD
                        AND D.HEAD_CD = '005'
                        AND LAST_DAY (P_PRO_MONTH) BETWEEN M.SAL_DT_FROM
                                                       AND  M.SAL_DT_TO
                        AND H.CAT_CD = '02'
                        AND ( (NVL (P_DESCENDANT_TYPE, 'N') = 'N'
                               AND M.OFFICE_CD = NVL (P_OFFICE_CD, M.OFFICE_CD))
                             OR (NVL (P_DESCENDANT_TYPE, 'N') = 'Y'
                                 AND EXISTS
                                       (    SELECT   F.OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP F
                                             WHERE   F.OFFICE_CD = M.OFFICE_CD
                                        START WITH   F.OFFICE_CD =
                                                        NVL (P_OFFICE_CD,
                                                             F.OFFICE_CD)
                                        CONNECT BY   PRIOR F.OFFICE_CD =
                                                        F.CONTROL_OFFICE_CD)))
                        AND D.DEDUCTION_AMT > 0
                        AND D.HEAD_CD = H.HEAD_CD
                        AND M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                        AND M.EMP_GID = S.EMP_GID
                        AND M.EMP_GID = A.EMP_GID(+)
                        AND FUN_FIND_REGIONAL_OFF (M.OFFICE_CD) = I.OFFICE_CD
             GROUP BY   FUN_FIND_REGIONAL_OFF (M.OFFICE_CD))
         LOOP
            INSERT INTO CPF_RECEIVABLES_DTL (OFFICE_CD,
                                             CON_MONTH,
                                             REC_OWNER,
                                             ACC_HEAD_CD,
                                             STATUS,
                                             I_USR,
                                             I_DT,
                                             RECEIVABLE_AMT,
                                             COLLECT_AMT,
                                             SL_NO)
              VALUES   (J.OFFICE_CD,
                        J.CON_MONTH,
                        J.MEM_TYPE,
                        J.ACC_HEAD_TP,
                        '1',
                        V_I_USR,
                        V_I_DT,
                        J.DEDUCTION_AMT,
                        0,
                        V_SL_NO);
         END LOOP;
      END LOOP;

      OPEN MONTHLY_SUB;

      LOOP
         FETCH MONTHLY_SUB INTO   MONTHLY_SUB_REC;

         EXIT WHEN MONTHLY_SUB%NOTFOUND;

         V_COUNT := V_COUNT + 1;

         IF V_COUNT = 1
         THEN
            V_EMPLOYEE_GID := MONTHLY_SUB_REC.EMP_GID;
         END IF;

         IF V_EMPLOYEE_GID <> MONTHLY_SUB_REC.EMP_GID
         THEN
            V_MEM_TYPE := MONTHLY_SUB_REC.MEM_TYPE;

            IF MONTHLY_SUB_REC.HEAD_CD = '005'
            THEN
               IF MONTHLY_SUB_REC.CONT_TYPE = '1'
               THEN
                  V_EMP_WISE_CONT := MONTHLY_SUB_REC.DEDUCTION_AMT;
                  V_EMP_WISE_COM_CONT := 0;
               ELSIF MONTHLY_SUB_REC.CONT_TYPE = '2'
               THEN
                  V_EMP_WISE_CONT := 0;
                  V_EMP_WISE_COM_CONT := MONTHLY_SUB_REC.DEDUCTION_AMT;
               ELSIF MONTHLY_SUB_REC.CONT_TYPE = '3'
               THEN
                  V_EMP_WISE_CONT := MONTHLY_SUB_REC.DEDUCTION_AMT;

                  IF MONTHLY_SUB_REC.BOTH_CONT_ST = '1'
                  THEN
                     V_EMP_WISE_COM_CONT := MONTHLY_SUB_REC.DEDUCTION_AMT;
                  ELSIF MONTHLY_SUB_REC.BOTH_CONT_ST = '2'
                  THEN
                     IF MONTHLY_SUB_REC.CONT_AMT_TYPE = '1'
                     THEN
                        V_EMP_WISE_COM_CONT :=
                           MONTHLY_SUB_REC.MIN_COMP_CONT_RATE;
                     ELSIF MONTHLY_SUB_REC.CONT_AMT_TYPE = '2'
                     THEN
                        IF MONTHLY_SUB_REC.DEPEND_ON = '1'
                        THEN
                           V_EMP_WISE_COM_CONT :=
                              ROUND( (  MONTHLY_SUB_REC.MIN_COMP_CONT_RATE
                                      * MONTHLY_SUB_REC.CURR_BASIC
                                      / 100));
                        ELSIF MONTHLY_SUB_REC.DEPEND_ON = '2'
                        THEN
                           V_EMP_WISE_COM_CONT :=
                              ROUND( (  MONTHLY_SUB_REC.MIN_COMP_CONT_RATE
                                      * MONTHLY_SUB_REC.NET_PAYABLE_AMT
                                      / 100));
                        END IF;
                     END IF;
                  END IF;
               END IF;
            ELSIF MONTHLY_SUB_REC.HEAD_CD = '006'
            THEN
               V_EMP_WISE_COM_CONT := 0;
               V_EMP_WISE_CONT := 0;
               V_EMP_LOAN_REC := MONTHLY_SUB_REC.DEDUCTION_AMT;
            ELSIF MONTHLY_SUB_REC.HEAD_CD = '024'
            THEN
               V_EMP_WISE_COM_CONT := 0;
               V_EMP_WISE_CONT := 0;
               V_EMP_INT_REC := MONTHLY_SUB_REC.DEDUCTION_AMT;
            END IF;

            MERGE INTO   CPF_EMP_FUND_SUMMERY D
                 USING   (SELECT   MONTHLY_SUB_REC.EMP_GID EMP_GID
                            FROM   DUAL) M
                    ON   (D.EMP_GID = M.EMP_GID)
            WHEN MATCHED
            THEN
               UPDATE SET
                  EMP_CONTRIBUTION = EMP_CONTRIBUTION + V_EMP_WISE_CONT,
                  COM_CONTRIBUTION = COM_CONTRIBUTION + V_EMP_WISE_COM_CONT,
                  REC_LOAN_AMT = REC_LOAN_AMT + V_EMP_LOAN_REC,
                  REC_INT_AMT = REC_INT_AMT + V_EMP_INT_REC
            WHEN NOT MATCHED
            THEN
               INSERT              (EMP_GID,
                                    EMP_CONTRIBUTION,
                                    COM_CONTRIBUTION,
                                    PROFIT_AMT,
                                    LOAN_AMT,
                                    REC_LOAN_AMT,
                                    INT_AMT,
                                    REC_INT_AMT,
                                    I_USR,
                                    I_DT,
                                    MEM_TYPE,
                                    STATUS)
                   VALUES   (MONTHLY_SUB_REC.EMP_GID,
                             V_EMP_WISE_CONT,
                             V_EMP_WISE_COM_CONT,
                             0,
                             0,
                             V_EMP_LOAN_REC,
                             0,
                             V_EMP_INT_REC,
                             V_I_USR,
                             V_I_DT,
                             V_MEM_TYPE,
                             '1');

            V_EMPLOYEE_GID := MONTHLY_SUB_REC.EMP_GID;
         ELSE
            V_MEM_TYPE := MONTHLY_SUB_REC.MEM_TYPE;

            IF MONTHLY_SUB_REC.HEAD_CD = '005'
            THEN
               IF MONTHLY_SUB_REC.CONT_TYPE = '1'
               THEN
                  V_EMP_WISE_CONT := MONTHLY_SUB_REC.DEDUCTION_AMT;
                  V_EMP_WISE_COM_CONT := 0;
               ELSIF MONTHLY_SUB_REC.CONT_TYPE = '2'
               THEN
                  V_EMP_WISE_CONT := 0;
                  V_EMP_WISE_COM_CONT := MONTHLY_SUB_REC.DEDUCTION_AMT;
               ELSIF MONTHLY_SUB_REC.CONT_TYPE = '3'
               THEN
                  V_EMP_WISE_CONT := MONTHLY_SUB_REC.DEDUCTION_AMT;

                  IF MONTHLY_SUB_REC.BOTH_CONT_ST = '1'
                  THEN
                     V_EMP_WISE_COM_CONT := MONTHLY_SUB_REC.DEDUCTION_AMT;
                  ELSIF MONTHLY_SUB_REC.BOTH_CONT_ST = '2'
                  THEN
                     IF MONTHLY_SUB_REC.CONT_AMT_TYPE = '1'
                     THEN
                        V_EMP_WISE_COM_CONT :=
                           MONTHLY_SUB_REC.MIN_COMP_CONT_RATE;
                     ELSIF MONTHLY_SUB_REC.CONT_AMT_TYPE = '2'
                     THEN
                        IF MONTHLY_SUB_REC.DEPEND_ON = '1'
                        THEN
                           V_EMP_WISE_COM_CONT :=
                              ROUND( (  MONTHLY_SUB_REC.MIN_COMP_CONT_RATE
                                      * MONTHLY_SUB_REC.CURR_BASIC
                                      / 100));
                        ELSIF MONTHLY_SUB_REC.DEPEND_ON = '2'
                        THEN
                           V_EMP_WISE_COM_CONT :=
                              ROUND( (  MONTHLY_SUB_REC.MIN_COMP_CONT_RATE
                                      * MONTHLY_SUB_REC.NET_PAYABLE_AMT
                                      / 100));
                        END IF;
                     END IF;
                  END IF;
               END IF;
            ELSIF MONTHLY_SUB_REC.HEAD_CD = '006'
            THEN
               V_EMP_WISE_COM_CONT := 0;
               V_EMP_WISE_CONT := 0;
               V_EMP_LOAN_REC := MONTHLY_SUB_REC.DEDUCTION_AMT;
            ELSIF MONTHLY_SUB_REC.HEAD_CD = '024'
            THEN
               V_EMP_WISE_COM_CONT := 0;
               V_EMP_WISE_CONT := 0;
               V_EMP_INT_REC := MONTHLY_SUB_REC.DEDUCTION_AMT;
            END IF;

            MERGE INTO   CPF_EMP_FUND_SUMMERY D
                 USING   (SELECT   MONTHLY_SUB_REC.EMP_GID EMP_GID
                            FROM   DUAL) M
                    ON   (D.EMP_GID = M.EMP_GID)
            WHEN MATCHED
            THEN
               UPDATE SET
                  EMP_CONTRIBUTION = EMP_CONTRIBUTION + V_EMP_WISE_CONT,
                  COM_CONTRIBUTION = COM_CONTRIBUTION + V_EMP_WISE_COM_CONT,
                  REC_LOAN_AMT = REC_LOAN_AMT + V_EMP_LOAN_REC,
                  REC_INT_AMT = REC_INT_AMT + V_EMP_INT_REC
            WHEN NOT MATCHED
            THEN
               INSERT              (EMP_GID,
                                    EMP_CONTRIBUTION,
                                    COM_CONTRIBUTION,
                                    PROFIT_AMT,
                                    LOAN_AMT,
                                    REC_LOAN_AMT,
                                    INT_AMT,
                                    REC_INT_AMT,
                                    I_USR,
                                    I_DT,
                                    MEM_TYPE,
                                    STATUS)
                   VALUES   (MONTHLY_SUB_REC.EMP_GID,
                             V_EMP_WISE_CONT,
                             V_EMP_WISE_COM_CONT,
                             0,
                             0,
                             V_EMP_LOAN_REC,
                             0,
                             V_EMP_INT_REC,
                             V_I_USR,
                             V_I_DT,
                             V_MEM_TYPE,
                             '1');

            V_EMPLOYEE_GID := MONTHLY_SUB_REC.EMP_GID;
         END IF;



         IF MONTHLY_SUB_REC.HEAD_CD = '005'
         THEN
            IF MONTHLY_SUB_REC.MEM_TYPE = '1'
            THEN
               V_TOTAL_EMP_CONT := V_TOTAL_EMP_CONT + V_EMP_WISE_CONT;
               V_TOTAL_COM_CONT := V_TOTAL_COM_CONT + V_EMP_WISE_COM_CONT;
               V_TOTAL_CON_CPF :=
                  V_TOTAL_CON_CPF + MONTHLY_SUB_REC.DEDUCTION_AMT;
            ELSIF MONTHLY_SUB_REC.MEM_TYPE = '2'
            THEN
               V_TOTAL_EMP_CONT :=
                  V_TOTAL_EMP_CONT + MONTHLY_SUB_REC.DEDUCTION_AMT;
               V_TOTAL_CON_GPF :=
                  V_TOTAL_CON_GPF + MONTHLY_SUB_REC.DEDUCTION_AMT;
            END IF;

            INSERT INTO CPF_EMP_MONTHLY_CON (OFFICE_CD,
                                             CON_MONTH,
                                             EMP_GID,
                                             EMP_CONTRIBUTION,
                                             COM_CONTRIBUTION,
                                             I_USR,
                                             I_DT)
              VALUES   (MONTHLY_SUB_REC.OFFICE_CD,
                        P_PRO_MONTH,
                        MONTHLY_SUB_REC.EMP_GID,
                        V_EMP_WISE_CONT,
                        V_EMP_WISE_COM_CONT,
                        V_I_USR,
                        V_I_DT);
         ELSIF MONTHLY_SUB_REC.HEAD_CD IN ('006', '024')
         THEN
            MERGE INTO   CPF_EMP_LOAN_RECOVERY D
                 USING   (SELECT   MONTHLY_SUB_REC.OFFICE_CD OFFICE_CD,
                                   P_PRO_MONTH CON_MONTH,
                                   MONTHLY_SUB_REC.EMP_GID EMP_GID
                            FROM   DUAL) S
                    ON   (    D.OFFICE_CD = S.OFFICE_CD
                          AND D.CON_MONTH = S.CON_MONTH
                          AND D.EMP_GID = S.EMP_GID)
            WHEN MATCHED
            THEN
               UPDATE SET
                  D.REC_LOAN_AMT =
                     D.REC_LOAN_AMT
                     + DECODE (MONTHLY_SUB_REC.HEAD_CD,
                               '006', MONTHLY_SUB_REC.DEDUCTION_AMT,
                               0),
                  D.REC_INT_AMT =
                     D.REC_INT_AMT
                     + DECODE (MONTHLY_SUB_REC.HEAD_CD,
                               '024', MONTHLY_SUB_REC.DEDUCTION_AMT,
                               0)
            WHEN NOT MATCHED
            THEN
               INSERT              (OFFICE_CD,
                                    CON_MONTH,
                                    EMP_GID,
                                    LOAN_NO,
                                    REC_DATE,
                                    REC_LOAN_AMT,
                                    REC_INT_AMT,
                                    I_USR,
                                    I_DT)
                   VALUES   (
                                MONTHLY_SUB_REC.OFFICE_CD,
                                P_PRO_MONTH,
                                MONTHLY_SUB_REC.EMP_GID,
                                MONTHLY_SUB_REC.LOAN_NO,
                                P_PRO_DATE,
                                DECODE (MONTHLY_SUB_REC.HEAD_CD,
                                        '006', MONTHLY_SUB_REC.DEDUCTION_AMT,
                                        0),
                                DECODE (MONTHLY_SUB_REC.HEAD_CD,
                                        '024', MONTHLY_SUB_REC.DEDUCTION_AMT,
                                        0),
                                V_I_USR,
                                V_I_DT
                            );

            IF MONTHLY_SUB_REC.HEAD_CD = '006'
            THEN
               V_TOTAL_LOAN_REC :=
                  V_TOTAL_LOAN_REC + MONTHLY_SUB_REC.DEDUCTION_AMT;

               IF MONTHLY_SUB_REC.MEM_TYPE = '1'
               THEN
                  V_TOTAL_LOAN_REC_CPF :=
                     V_TOTAL_LOAN_REC_CPF + MONTHLY_SUB_REC.DEDUCTION_AMT;
               ELSIF MONTHLY_SUB_REC.MEM_TYPE = '2'
               THEN
                  V_TOTAL_LOAN_REC_GPF :=
                     V_TOTAL_LOAN_REC_GPF + MONTHLY_SUB_REC.DEDUCTION_AMT;
               END IF;
            ELSIF MONTHLY_SUB_REC.HEAD_CD = '024'
            THEN
               V_TOTAL_INT_REC :=
                  V_TOTAL_INT_REC + MONTHLY_SUB_REC.DEDUCTION_AMT;

               IF MONTHLY_SUB_REC.MEM_TYPE = '1'
               THEN
                  V_TOTAL_INT_REC_CPF :=
                     V_TOTAL_INT_REC_CPF + MONTHLY_SUB_REC.DEDUCTION_AMT;
               ELSIF MONTHLY_SUB_REC.MEM_TYPE = '2'
               THEN
                  V_TOTAL_INT_REC_GPF :=
                     V_TOTAL_INT_REC_GPF + MONTHLY_SUB_REC.DEDUCTION_AMT;
               END IF;
            END IF;


            UPDATE   CPF_LOAN_APPRVL
               SET   LAST_RECOVER_DT = P_PRO_MONTH,
                     RECOVERD_AMOUNT =
                        NVL (RECOVERD_AMOUNT, 0)
                        + MONTHLY_SUB_REC.DEDUCTION_AMT
             WHERE   LOAN_NO = MONTHLY_SUB_REC.LOAN_NO
                     AND EMP_GID = +MONTHLY_SUB_REC.EMP_GID;
         END IF;
      END LOOP;

      CLOSE MONTHLY_SUB;


      UPDATE   SAL_SALARY_MST
         SET   PF_BAL_TRANSFER_ST = '1'
       WHERE   (SAL_PROCESS_NO, EMP_GID) IN
                     (SELECT   M.SAL_PROCESS_NO, M.EMP_GID
                        FROM   SAL_SALARY_MST M,
                               SAL_SALARY_DETL D,
                               SAL_HEAD H,
                               HRM_EMPLOYEE S,
                               CPF_LOAN_APPRVL A,
                               CPF_PF_CONT_SETUP CS
                       WHERE       S.MEM_TYPE IN ('1', '2')
                               AND NVL (M.PF_BAL_TRANSFER_ST, '0') = '0'
                               AND S.MEM_TYPE = CS.PF_TYPE_CD
                               AND LAST_DAY (P_PRO_MONTH) BETWEEN M.SAL_DT_FROM
                                                              AND  M.SAL_DT_TO
                               AND H.CAT_CD = '02'
                               AND ( (NVL (P_DESCENDANT_TYPE, 'N') = 'N'
                                      AND M.OFFICE_CD =
                                            NVL (P_OFFICE_CD, M.OFFICE_CD))
                                    OR (NVL (P_DESCENDANT_TYPE, 'N') = 'Y'
                                        AND EXISTS
                                              (    SELECT   F.OFFICE_CD
                                                     FROM   HRM_OFFICE_SETUP F
                                                    WHERE   F.OFFICE_CD =
                                                               M.OFFICE_CD
                                               START WITH   F.OFFICE_CD =
                                                               NVL (
                                                                  P_OFFICE_CD,
                                                                  F.OFFICE_CD
                                                               )
                                               CONNECT BY   PRIOR F.OFFICE_CD =
                                                               F.CONTROL_OFFICE_CD)))
                               AND D.DEDUCTION_AMT > 0
                               AND D.HEAD_CD = H.HEAD_CD
                               AND M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                               AND M.EMP_GID = S.EMP_GID
                               AND M.EMP_GID = A.EMP_GID(+));


      DECLARE
         RECPREM             PKG_PROVIDENT_FUND.T_TRANS_TAB;
         V_ERROR             VARCHAR2 (200);
         V_OBJECT_CD         GEN_OBJECT_INFO.OBJECT_CD%TYPE;
         V_VOUCHER_CD        ACC_VOUCHER_TYPE.VOUCH_CD%TYPE;
         V_INTER_OFF_ST      CHAR (1);
         V_OFFICE_CD         HRM_OFFICE.OFFICE_CD%TYPE;
         V_TRANS_ID          CPF_GL_TRANS_MST.TRANS_ID%TYPE;
         V_TRANS_DATE        DATE;
         V_COST_CENTER       HRM_OFFICE.OFFICE_CD%TYPE;
         V_NARRATION         VARCHAR2 (200);
         V_USER              VARCHAR2 (20);
         V_CHQ_TP            VARCHAR2 (3);
         V_CHQ_NO            VARCHAR2 (50);
         V_CHQ_DT            DATE;

         V_SUS_AMT_USED      NUMBER (1);
         INDX                NUMBER (10) := 1;
         V_COLL_FY_OPEN_ST   NUMBER (10) := 0;
      BEGIN
         V_OBJECT_CD := P_OBJECT_CD;

         V_VOUCHER_CD := '05';
         V_INTER_OFF_ST := '0';
         V_OFFICE_CD := FUN_FIND_REGIONAL_OFF (P_OFFICE_CD);
         V_COST_CENTER := P_OFFICE_CD;
         V_TRANS_ID := P_OFFICE_CD || P_PRO_MONTH || V_SL_NO;
         V_TRANS_DATE := P_PRO_DATE;

         SELECT   COUNT (1)
           INTO   V_COLL_FY_OPEN_ST
           FROM   ACC_FISCAL_YEAR
          WHERE   FY_CLOSE = 0
                  AND TRUNC (P_PRO_DATE) BETWEEN FY_ST_DT AND FY_ED_DT;

         IF V_COLL_FY_OPEN_ST = 0
         THEN
            V_TRANS_DATE := TRUNC (SYSDATE);
         END IF;

         V_NARRATION :=
               'Provident Fund Balance Transfer of: '
            || P_OFFICE_CD
            || ' for month of'
            || P_PRO_MONTH
            || ' at '
            || P_PRO_DATE;
         V_USER := V_I_USR;


         IF   V_TOTAL_CON_CPF
            + V_TOTAL_COM_CONT
            + V_TOTAL_LOAN_REC_CPF
            + V_TOTAL_INT_REC_CPF
            + V_TOTAL_INT_REC_GPF > 0
         THEN
            RECPREM (INDX).TRANS_ITEM_CD := 7;

            RECPREM (INDX).POST_AMOUNT :=
               (  V_TOTAL_CON_CPF
                + V_TOTAL_CON_GPF
                + V_TOTAL_COM_CONT
                + V_TOTAL_LOAN_REC_CPF
                + V_TOTAL_LOAN_REC_GPF
                + V_TOTAL_INT_REC_CPF
                + V_TOTAL_INT_REC_GPF);
            RECPREM (INDX).CHQ_TP := NULL;
            RECPREM (INDX).CHQ_NO := NULL;
            RECPREM (INDX).CHQ_DT := NULL;
            INDX := INDX + 1;
         END IF;

         IF V_TOTAL_CON_CPF > 0
         THEN
            RECPREM (INDX).TRANS_ITEM_CD := 3;

            RECPREM (INDX).POST_AMOUNT := V_TOTAL_CON_CPF;
            RECPREM (INDX).CHQ_TP := NULL;
            RECPREM (INDX).CHQ_NO := NULL;
            RECPREM (INDX).CHQ_DT := NULL;
            INDX := INDX + 1;
         END IF;

         IF V_TOTAL_COM_CONT > 0
         THEN
            RECPREM (INDX).TRANS_ITEM_CD := 4;

            RECPREM (INDX).POST_AMOUNT := V_TOTAL_COM_CONT;
            RECPREM (INDX).CHQ_TP := NULL;
            RECPREM (INDX).CHQ_NO := NULL;
            RECPREM (INDX).CHQ_DT := NULL;
            INDX := INDX + 1;
         END IF;

         IF V_TOTAL_LOAN_REC_CPF > 0
         THEN
            RECPREM (INDX).TRANS_ITEM_CD := 5;

            RECPREM (INDX).POST_AMOUNT := V_TOTAL_LOAN_REC_CPF;
            RECPREM (INDX).CHQ_TP := NULL;
            RECPREM (INDX).CHQ_NO := NULL;
            RECPREM (INDX).CHQ_DT := NULL;
            INDX := INDX + 1;
         END IF;

         IF V_TOTAL_INT_REC_CPF > 0
         THEN
            RECPREM (INDX).TRANS_ITEM_CD := 6;

            RECPREM (INDX).POST_AMOUNT := V_TOTAL_INT_REC_CPF;
            RECPREM (INDX).CHQ_TP := NULL;
            RECPREM (INDX).CHQ_NO := NULL;
            RECPREM (INDX).CHQ_DT := NULL;
            INDX := INDX + 1;
         END IF;


         PKG_PROVIDENT_FUND.PRO_VOUCHER_POSTING (
            P_TABLE          => RECPREM,
            P_OBJECT_CD      => V_OBJECT_CD,
            P_VOUCH_CD       => V_VOUCHER_CD,
            P_INTER_OFF_ST   => V_INTER_OFF_ST,
            P_OFFICE_CD      => V_OFFICE_CD,
            P_TRANS_ID       => V_TRANS_ID,
            P_TRANS_DATE     => V_TRANS_DATE,
            P_COST_CENTER    => V_COST_CENTER,
            P_NARRATION      => V_NARRATION,
            P_USER           => V_USER,
            P_VOUCHER_NO     => V_VOUCHER_NO,
            P_ERROR          => V_ERROR
         );
         V_OUTPUT := V_ERROR;
      END;

      IF V_OUTPUT IS NULL
      THEN
         IF V_COUNT > 0
         THEN
            UPDATE   CPF_RECEIVABLES_MST
               SET   VOUCHER_NO = V_VOUCHER_NO
             WHERE       CON_MONTH = P_PRO_MONTH
                     AND OFFICE_CD = NVL (P_OFFICE_CD, OFFICE_CD)
                     AND SL_NO = V_SL_NO;
         ELSE
            DELETE FROM   CPF_RECEIVABLES_MST
                  WHERE       CON_MONTH = P_PRO_MONTH
                          AND OFFICE_CD = NVL (P_OFFICE_CD, OFFICE_CD)
                          AND SL_NO = V_SL_NO;
         END IF;

         P_OUTPUT := 'SUCCESS';
      ELSE
         P_OUTPUT := 'Process has been Failed! because of Account integration';
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_OUTPUT := SQLERRM;
   END;


   PROCEDURE PRO_PROFIT_RATE_CALCULATION (
      P_OFFICE_CD           IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DIST_YEAR           IN     VARCHAR2,
      P_MEM_TYPE            IN     CHAR,
      P_PROCESS_DT          IN     DATE,
      P_TOT_INCOME          IN     NUMBER,
      P_TOT_EXPENSE         IN     NUMBER,
      P_TOT_OUTSTANDING     IN     NUMBER,
      P_NET_PROFIT          IN     NUMBER,
      P_I_USR               IN     VARCHAR2,
      P_PROFIT_RATE            OUT NUMBER,
      P_TOT_INVEST_IN_DAY      OUT NUMBER,
      P_OUTPUT                 OUT VARCHAR2
   )
   IS
      P_DIST_DATE_FROM               DATE := '01-JAN-' || P_DIST_YEAR;
      P_DIST_DATE_TO                 DATE := '31-DEC-' || P_DIST_YEAR;
      V_LOAN_RECOVER_DT              DATE;
      V_NON_REFUNDABLE_LN            NUMBER := 0;
      V_EMP_INVESTMENT               NUMBER;
      V_INVESTMENT_TIME              NUMBER;

      V_TOT_INVEST_IN_DAY            NUMBER := 0;

      V_INVEST_TIME_WITHOUT_PROFIT   NUMBER := 0;

      V_DISTRIBUTED_AMT              NUMBER := 0;
      V_TOTAL_INVESTMENT             NUMBER := 0;
      V_EXP_PROFIT_DIST_ACC EXCEPTION;
      V_EXP_NON_DIST_ACC EXCEPTION;
      V_EXP_VOUCH_NO EXCEPTION;

      CURSOR CUR_PF_MEMBER
      IS
           SELECT   S.EMP_GID,
                      NVL (S.EMP_CONTRIBUTION, 0)
                    + NVL (S.COM_CONTRIBUTION, 0)
                    + NVL (S.PROFIT_AMT, 0)
                       EMP_INVESTMENT,
                    NVL (H.CONFIRM_DT, P_DIST_DATE_FROM) CONFIRM_DT,
                    NVL (H.RETIRE_DT, P_DIST_DATE_TO) RETIRE_DT
             FROM   CPF_EMP_FUND_SUMMERY S, HRM_EMPLOYEE H
            WHERE       STATUS = '1'
                    AND H.RETIRE_DT >= P_DIST_DATE_TO
                    AND S.EMP_GID = H.EMP_GID
                    AND S.MEM_TYPE = P_MEM_TYPE
         ORDER BY   S.EMP_GID;

      REC_CUR_PF_MEMBER              CUR_PF_MEMBER%ROWTYPE;
   BEGIN
      INSERT INTO CPF_PROFIT_DISTRIBUTION (DIST_YEAR,
                                           MEMBER_TYPE,
                                           PROCESS_DATE,
                                           TOT_INCOME,
                                           TOT_OUTSTANDING,
                                           TOT_EXPENSE,
                                           NET_PROFIT_AMT,
                                           PROFIT_RATE,
                                           DIST_PROFIT_RATE,
                                           DIST_AMOUNT,
                                           NON_DIST_AMT,
                                           VOUCHER_NO,
                                           I_USR,
                                           I_DT)
        VALUES   (P_DIST_YEAR,
                  P_MEM_TYPE,
                  P_PROCESS_DT,
                  P_TOT_INCOME,
                  P_TOT_OUTSTANDING,
                  P_TOT_EXPENSE,
                  P_NET_PROFIT,
                  NULL,
                  NULL,
                  NULL,
                  NULL,
                  NULL,
                  P_I_USR,
                  SYSDATE);

      OPEN CUR_PF_MEMBER;

      LOOP
         FETCH CUR_PF_MEMBER INTO   REC_CUR_PF_MEMBER;

         EXIT WHEN CUR_PF_MEMBER%NOTFOUND;


         BEGIN
            SELECT   LAST_RECOVER_DT, (LOAN_AMT - RECOVERD_AMOUNT)
              INTO   V_LOAN_RECOVER_DT, V_NON_REFUNDABLE_LN
              FROM   CPF_LOAN_APPRVL
             WHERE   EMP_GID = REC_CUR_PF_MEMBER.EMP_GID
                     AND LOAN_STATUS = 'N';
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;



         IF REC_CUR_PF_MEMBER.CONFIRM_DT > P_DIST_DATE_FROM
         THEN
            V_INVESTMENT_TIME := P_DIST_DATE_TO - REC_CUR_PF_MEMBER.CONFIRM_DT;
         ELSE
            IF REC_CUR_PF_MEMBER.RETIRE_DT < P_DIST_DATE_TO
            THEN
               V_INVESTMENT_TIME :=
                  REC_CUR_PF_MEMBER.RETIRE_DT - P_DIST_DATE_FROM;
            ELSE
               V_INVESTMENT_TIME := P_DIST_DATE_TO - P_DIST_DATE_FROM;
            END IF;
         END IF;



         IF V_NON_REFUNDABLE_LN = 0
         THEN
            V_INVESTMENT_TIME := V_INVESTMENT_TIME;
         ELSE
            IF V_LOAN_RECOVER_DT BETWEEN P_DIST_DATE_TO AND P_DIST_DATE_FROM
            THEN
               IF REC_CUR_PF_MEMBER.CONFIRM_DT > P_DIST_DATE_FROM
               THEN
                  V_INVESTMENT_TIME :=
                     REC_CUR_PF_MEMBER.CONFIRM_DT - V_LOAN_RECOVER_DT;
                  V_INVEST_TIME_WITHOUT_PROFIT :=
                     P_DIST_DATE_TO - V_LOAN_RECOVER_DT;
               ELSE
                  IF REC_CUR_PF_MEMBER.RETIRE_DT < P_DIST_DATE_TO
                  THEN
                     V_INVESTMENT_TIME := V_LOAN_RECOVER_DT - P_DIST_DATE_FROM;
                     V_INVEST_TIME_WITHOUT_PROFIT :=
                        REC_CUR_PF_MEMBER.RETIRE_DT - V_LOAN_RECOVER_DT;
                  ELSE
                     V_INVESTMENT_TIME := V_LOAN_RECOVER_DT - P_DIST_DATE_FROM;
                     V_INVEST_TIME_WITHOUT_PROFIT :=
                        P_DIST_DATE_TO - V_LOAN_RECOVER_DT;
                  END IF;
               END IF;
            ELSE
               V_EMP_INVESTMENT :=
                  REC_CUR_PF_MEMBER.EMP_INVESTMENT - V_NON_REFUNDABLE_LN;
            END IF;
         END IF;

         V_INVESTMENT_TIME := V_INVESTMENT_TIME + 1;

         IF V_INVEST_TIME_WITHOUT_PROFIT > 0
         THEN
            V_INVEST_TIME_WITHOUT_PROFIT := V_INVEST_TIME_WITHOUT_PROFIT + 1;
         END IF;

         IF V_INVESTMENT_TIME > 0
         THEN
            INSERT INTO CPF_YEAR_WISE_EMP_PROFIT (DIST_YEAR,
                                                  MEMBER_TYPE,
                                                  EMP_GID,
                                                  CONTR_AMOUNT,
                                                  NRL_AMOUNT,
                                                  CONTR_TIME,
                                                  NRL_CONTR_TIME,
                                                  PROFIT_AMOUNT,
                                                  I_USR,
                                                  I_DT)
              VALUES   (P_DIST_YEAR,
                        P_MEM_TYPE,
                        REC_CUR_PF_MEMBER.EMP_GID,
                        REC_CUR_PF_MEMBER.EMP_INVESTMENT,
                        V_NON_REFUNDABLE_LN,
                        V_INVESTMENT_TIME,
                        V_INVEST_TIME_WITHOUT_PROFIT,
                        NULL,
                        P_I_USR,
                        SYSDATE);



            V_TOT_INVEST_IN_DAY :=
               V_TOT_INVEST_IN_DAY
               + (REC_CUR_PF_MEMBER.EMP_INVESTMENT * V_INVESTMENT_TIME)
               + (REC_CUR_PF_MEMBER.EMP_INVESTMENT - V_NON_REFUNDABLE_LN)
                 * V_INVEST_TIME_WITHOUT_PROFIT;
         END IF;


         V_NON_REFUNDABLE_LN := 0;
         V_INVEST_TIME_WITHOUT_PROFIT := 0;
      END LOOP;

      CLOSE CUR_PF_MEMBER;

      P_PROFIT_RATE :=
         ROUND ( (P_NET_PROFIT * 100 * 365) / V_TOT_INVEST_IN_DAY, 2);
      P_TOT_INVEST_IN_DAY := V_TOT_INVEST_IN_DAY;
      P_OUTPUT := 'SUCCESS';
   END;

   PROCEDURE PRO_PROFIT_DISTRIBUTION (
      P_OFFICE_CD           IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DIST_YEAR           IN     VARCHAR2,
      P_MEM_TYPE            IN     CHAR,
      P_NET_PROFIT          IN     NUMBER,
      P_DIST_PROFIT_AMT     IN     NUMBER,
      P_TOT_INVEST_IN_DAY   IN     NUMBER,
      P_PROFIT_RATE         IN     NUMBER,
      P_DIST_PROFIT_RATE    IN     NUMBER,
      P_I_USR               IN     VARCHAR2,
      P_OUTPUT                 OUT VARCHAR2
   )
   IS
      V_DISTRIBUTED_AMT   NUMBER := 0;

      CURSOR CUR_PF_PROFIT
      IS
           SELECT   EMP_GID,
                    CONTR_AMOUNT,
                    NRL_AMOUNT,
                    CONTR_TIME,
                    NRL_CONTR_TIME
             FROM   CPF_YEAR_WISE_EMP_PROFIT
            WHERE   DIST_YEAR = P_DIST_YEAR AND MEMBER_TYPE = P_MEM_TYPE
         ORDER BY   EMP_GID;

      REC_CUR_PF_PROFIT   CUR_PF_PROFIT%ROWTYPE;
      V_EMP_PROFIT_AMT    NUMBER (10, 2);
      V_VOUCH_NO          VARCHAR2 (15);
      V_EXP_PROFIT_DIST_ACC EXCEPTION;
      V_EXP_NON_DIST_ACC EXCEPTION;
      V_EXP_VOUCH_NO EXCEPTION;
   BEGIN
      OPEN CUR_PF_PROFIT;

      LOOP
         FETCH CUR_PF_PROFIT INTO   REC_CUR_PF_PROFIT;

         EXIT WHEN CUR_PF_PROFIT%NOTFOUND;


         IF REC_CUR_PF_PROFIT.CONTR_TIME > 0
         THEN
            IF REC_CUR_PF_PROFIT.NRL_AMOUNT = 0
            THEN
               V_EMP_PROFIT_AMT :=
                  ROUND (
                     ( (  REC_CUR_PF_PROFIT.CONTR_AMOUNT
                        * REC_CUR_PF_PROFIT.CONTR_TIME
                        * P_DIST_PROFIT_AMT)
                      / P_TOT_INVEST_IN_DAY),
                     2
                  );
            ELSE
               V_EMP_PROFIT_AMT :=
                  ROUND (
                     ( (  REC_CUR_PF_PROFIT.CONTR_AMOUNT
                        * REC_CUR_PF_PROFIT.CONTR_TIME
                        * P_DIST_PROFIT_AMT)
                      / P_TOT_INVEST_IN_DAY)
                     + ( ( (REC_CUR_PF_PROFIT.CONTR_AMOUNT
                            - REC_CUR_PF_PROFIT.NRL_AMOUNT)
                          * REC_CUR_PF_PROFIT.NRL_CONTR_TIME
                          * P_DIST_PROFIT_AMT)
                        / P_TOT_INVEST_IN_DAY),
                     2
                  );
            END IF;

            UPDATE   CPF_YEAR_WISE_EMP_PROFIT
               SET   PROFIT_AMOUNT = V_EMP_PROFIT_AMT
             WHERE       EMP_GID = REC_CUR_PF_PROFIT.EMP_GID
                     AND DIST_YEAR = P_DIST_YEAR
                     AND MEMBER_TYPE = P_MEM_TYPE;

            UPDATE   CPF_EMP_FUND_SUMMERY
               SET   PROFIT_AMT = NVL (PROFIT_AMT, 0) + V_EMP_PROFIT_AMT,
                     U_USR = P_I_USR,
                     U_DT = SYSDATE
             WHERE   EMP_GID = REC_CUR_PF_PROFIT.EMP_GID;

            V_DISTRIBUTED_AMT := V_DISTRIBUTED_AMT + V_EMP_PROFIT_AMT;
         END IF;
      END LOOP;

      CLOSE CUR_PF_PROFIT;



      IF P_OUTPUT IS NULL
      THEN
         UPDATE   CPF_PROFIT_DISTRIBUTION
            SET   DIST_AMOUNT = V_DISTRIBUTED_AMT,
                  NON_DIST_AMT = P_NET_PROFIT - V_DISTRIBUTED_AMT,
                  PROFIT_RATE = P_PROFIT_RATE,
                  DIST_PROFIT_RATE = P_DIST_PROFIT_RATE,
                  VOUCHER_NO = V_VOUCH_NO
          WHERE   DIST_YEAR = P_DIST_YEAR AND MEMBER_TYPE = P_MEM_TYPE;

         P_OUTPUT := 'SUCCESS';
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_OUTPUT := SQLERRM;
   END;

   PROCEDURE PRO_VOUCHER_POSTING (
      P_TABLE          IN     T_TRANS_TAB,
      P_OBJECT_CD      IN     VARCHAR2,
      P_VOUCH_CD       IN     VARCHAR2,
      P_INTER_OFF_ST   IN     CHAR,
      P_OFFICE_CD      IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_TRANS_ID       IN     VARCHAR2,
      P_TRANS_DATE     IN     DATE,
      P_COST_CENTER    IN     VARCHAR2,
      P_NARRATION      IN     VARCHAR2,
      P_USER           IN     VARCHAR2,
      P_VOUCHER_NO        OUT VARCHAR2,
      P_ERROR             OUT VARCHAR2
   )
   AS
      V_DEBIT_AMT    NUMBER (15, 2) := 0;
      V_CREDIT_AMT   NUMBER (15, 2) := 0;
      V_GLAC_SL_NO   CPF_GL_COA.GLAC_SL_NO%TYPE;
      V_TRANS_TYPE   CHAR (1);
      V_COUNTER      NUMBER (10) := 1;
      V_VOUCHER_NO   VARCHAR2 (15);

      P_OUTPUT       VARCHAR2 (200) := NULL;
      V_COUNT        NUMBER (1) := 0;
      V_PROCESS_ST   VARCHAR2 (200);
      ERR_GL_TR_SETUP EXCEPTION;
      ERR_GL_TR_AMOUNT EXCEPTION;
      ERR_VOUCHER_SEQ EXCEPTION;
      ERR_OFFICE_WISE_GL_ACCOUNT EXCEPTION;
      ERR_UNABLE_TO_UPDATE EXCEPTION;
   BEGIN
      FOR I IN P_TABLE.FIRST .. P_TABLE.LAST
      LOOP
         BEGIN
            SELECT   GLAC_SL_NO, TRANS_TYPE
              INTO   V_GLAC_SL_NO, V_TRANS_TYPE
              FROM   CPF_GL_TR_SETUP_MST M, CPF_GL_TR_SETUP_DTL D
             WHERE       M.OBJECT_CD = P_OBJECT_CD
                     AND M.VOUCH_CD = P_VOUCH_CD
                     AND M.INTER_OFF_ST = P_INTER_OFF_ST
                     AND D.TRANS_ITEM_CD = P_TABLE (I).TRANS_ITEM_CD
                     AND M.SETUP_ID = D.SETUP_ID;

            IF P_TABLE (I).GLAC_SL_NO IS NOT NULL
            THEN
               V_GLAC_SL_NO := P_TABLE (I).GLAC_SL_NO;
            END IF;

            SELECT   COUNT (1)
              INTO   V_COUNT
              FROM   CPF_GL_COA_MST
             WHERE   OFFICE_CD = P_OFFICE_CD AND GLAC_SL_NO = V_GLAC_SL_NO;

            IF V_COUNT = 0
            THEN
               RAISE ERR_OFFICE_WISE_GL_ACCOUNT;
               EXIT;
            END IF;

            IF V_TRANS_TYPE = 'D'
            THEN
               V_DEBIT_AMT := V_DEBIT_AMT + P_TABLE (I).POST_AMOUNT;
            ELSE
               V_CREDIT_AMT := V_CREDIT_AMT + P_TABLE (I).POST_AMOUNT;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               RAISE ERR_GL_TR_SETUP;
               EXIT;
         END;
      END LOOP;

      IF V_DEBIT_AMT <> V_CREDIT_AMT
      THEN
         RAISE ERR_GL_TR_AMOUNT;
      ELSE
         FOR I IN P_TABLE.FIRST .. P_TABLE.LAST
         LOOP
            SELECT   GLAC_SL_NO, TRANS_TYPE
              INTO   V_GLAC_SL_NO, V_TRANS_TYPE
              FROM   CPF_GL_TR_SETUP_MST M, CPF_GL_TR_SETUP_DTL D
             WHERE       M.OBJECT_CD = P_OBJECT_CD
                     AND M.VOUCH_CD = P_VOUCH_CD
                     AND M.INTER_OFF_ST = P_INTER_OFF_ST
                     AND D.TRANS_ITEM_CD = P_TABLE (I).TRANS_ITEM_CD
                     AND M.SETUP_ID = D.SETUP_ID;

            IF P_TABLE (I).GLAC_SL_NO IS NOT NULL
            THEN
               V_GLAC_SL_NO := P_TABLE (I).GLAC_SL_NO;
            END IF;

            IF V_COUNTER = 1
            THEN
               PRO_VOUCHER_NO (
                  P_OFFICE_CD    => P_OFFICE_CD,
                  P_FISCALE_YR   => TO_CHAR (P_TRANS_DATE, 'RRRR'),
                  P_VOUCH_CD     => P_VOUCH_CD,
                  P_USER         => P_USER,
                  P_VOUCH_NO     => V_VOUCHER_NO,
                  P_PROCESS_ST   => P_OUTPUT
               );



               IF P_OUTPUT IS NOT NULL
               THEN
                  RAISE ERR_VOUCHER_SEQ;
                  EXIT;
               END IF;

               INSERT INTO CPF_GL_TRANS_MST (OFFICE_CD,
                                             VOUCH_NO,
                                             VOUCH_DT,
                                             VOUCH_CD,
                                             STATUS,
                                             BANK_RECON_ST,
                                             COST_CENTER,
                                             OBJECT_CD,
                                             TRANS_ID,
                                             NARRATION,
                                             I_USR,
                                             I_DT)
                 VALUES   (P_OFFICE_CD,
                           V_VOUCHER_NO,
                           P_TRANS_DATE,
                           P_VOUCH_CD,
                           '1',
                           '0',
                           P_COST_CENTER,
                           P_OBJECT_CD,
                           P_TRANS_ID,
                           P_NARRATION,
                           P_USER,
                           SYSDATE);

               IF P_TABLE (I).POST_AMOUNT > 0
               THEN
                  INSERT INTO CPF_GL_TRANS_DTL (OFFICE_CD,
                                                VOUCH_NO,
                                                SL_NO,
                                                GLAC_SL_NO,
                                                DR_CR,
                                                TRANS_AMT,
                                                CHQ_TP,
                                                CHQ_NO,
                                                CHQ_DT,
                                                I_USR,
                                                I_DT)
                    VALUES   (P_OFFICE_CD,
                              V_VOUCHER_NO,
                              V_COUNTER,
                              V_GLAC_SL_NO,
                              V_TRANS_TYPE,
                              P_TABLE (I).POST_AMOUNT,
                              P_TABLE (I).CHQ_TP,
                              P_TABLE (I).CHQ_NO,
                              P_TABLE (I).CHQ_DT,
                              P_USER,
                              SYSDATE);

                  V_COUNTER := V_COUNTER + 1;
               END IF;
            ELSE
               IF P_TABLE (I).POST_AMOUNT > 0
               THEN
                  INSERT INTO CPF_GL_TRANS_DTL (OFFICE_CD,
                                                VOUCH_NO,
                                                SL_NO,
                                                GLAC_SL_NO,
                                                DR_CR,
                                                TRANS_AMT,
                                                CHQ_TP,
                                                CHQ_NO,
                                                CHQ_DT,
                                                I_USR,
                                                I_DT)
                    VALUES   (P_OFFICE_CD,
                              V_VOUCHER_NO,
                              V_COUNTER,
                              V_GLAC_SL_NO,
                              V_TRANS_TYPE,
                              P_TABLE (I).POST_AMOUNT,
                              P_TABLE (I).CHQ_TP,
                              P_TABLE (I).CHQ_NO,
                              P_TABLE (I).CHQ_DT,
                              P_USER,
                              SYSDATE);

                  V_COUNTER := V_COUNTER + 1;
               END IF;
            END IF;


            PRO_OFFICE_COA_UPDATE (
               P_OFFICE_CD    => P_OFFICE_CD,
               P_GLAC_SL_NO   => V_GLAC_SL_NO,
               P_TRANS_AMT    => P_TABLE (I).POST_AMOUNT,
               P_DR_CR        => V_TRANS_TYPE,
               P_FISCAL_YR    => TO_CHAR (P_TRANS_DATE, 'RRRR'),
               P_PROCESS_ST   => V_PROCESS_ST
            );

            IF V_PROCESS_ST IS NOT NULL
            THEN
               RAISE ERR_UNABLE_TO_UPDATE;
               EXIT;
            END IF;
         END LOOP;
      END IF;

      P_VOUCHER_NO := V_VOUCHER_NO;
      P_ERROR := NULL;
   EXCEPTION
      WHEN ERR_OFFICE_WISE_GL_ACCOUNT
      THEN
         P_ERROR := 'GL account not found for the office of:' || P_OFFICE_CD;
      WHEN ERR_GL_TR_SETUP
      THEN
         P_ERROR := 'Error found at GL trans setup due to ' || SQLERRM;
      WHEN ERR_GL_TR_AMOUNT
      THEN
         P_ERROR :=
            'Failed to transaction due to Debit and Credit amount is not same!';
      WHEN ERR_VOUCHER_SEQ
      THEN
         P_ERROR := P_OUTPUT;
      WHEN ERR_UNABLE_TO_UPDATE
      THEN
         P_ERROR := V_PROCESS_ST;
   END;

   PROCEDURE PRO_VOUCHER_NO (P_OFFICE_CD           HRM_OFFICE.OFFICE_CD%TYPE,
                             P_FISCALE_YR          VARCHAR2,
                             P_VOUCH_CD            VARCHAR2,
                             P_USER         IN     VARCHAR2,
                             P_VOUCH_NO        OUT VARCHAR2,
                             P_PROCESS_ST      OUT VARCHAR2)
   IS
      V_SEQUENCE_NM   VARCHAR2 (200) := NULL;
      V_STATEMENT     VARCHAR2 (200) := NULL;
      V_CREATE_SEQ    VARCHAR2 (200) := NULL;
      V_VOUCH_SL_NO   NUMBER (10);
   BEGIN
      SELECT   OBJECT_NAME
        INTO   V_SEQUENCE_NM
        FROM   DBA_OBJECTS
       WHERE   OBJECT_TYPE = 'SEQUENCE'
               AND OBJECT_NAME LIKE
                        'CPF_VOUCH'
                     || '_'
                     || P_VOUCH_CD
                     || '_'
                     || P_OFFICE_CD
                     || '_'
                     || P_FISCALE_YR;

      V_STATEMENT := 'select ' || V_SEQUENCE_NM || '.NEXTVAL from dual';

      EXECUTE IMMEDIATE V_STATEMENT INTO   V_VOUCH_SL_NO;

      SELECT      VOUCH_SH_NM
               || '-'
               || P_FISCALE_YR
               || '-'
               || LPAD (TO_CHAR (V_VOUCH_SL_NO), 7, '0')
        INTO   P_VOUCH_NO
        FROM   ACC_VOUCHER_TYPE
       WHERE   VOUCH_CD = P_VOUCH_CD;

      P_PROCESS_ST := NULL;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         P_PROCESS_ST :=
               'Voucher:Sequence Not found for'
            || P_OFFICE_CD
            || 'On the fiscale year of '
            || P_FISCALE_YR;
      WHEN OTHERS
      THEN
         P_PROCESS_ST := SQLERRM;
   END;

   PROCEDURE PRO_OFFICE_COA_UPDATE (
      P_OFFICE_CD        HRM_OFFICE.OFFICE_CD%TYPE,
      P_GLAC_SL_NO       VARCHAR2,
      P_TRANS_AMT        NUMBER,
      P_DR_CR            VARCHAR2,
      P_FISCAL_YR        VARCHAR2,
      P_PROCESS_ST   OUT VARCHAR2
   )
   AS
      ERR_UNABLE_TO_UPDATE EXCEPTION;
   BEGIN
      FOR I IN (    SELECT   C.GLAC_SL_NO, C.ACCOUNT_TYPE
                      FROM   CPF_GL_COA C
                START WITH   C.GLAC_SL_NO = P_GLAC_SL_NO
                CONNECT BY   PRIOR C.CNTRL_GLAC_SL_NO = C.GLAC_SL_NO)
      LOOP
         BEGIN
            IF P_FISCAL_YR = TO_CHAR (SYSDATE, 'RRRR')
            THEN
               UPDATE   CPF_GL_COA_MST
                  SET   CURRENT_BAL =
                           CASE
                              WHEN P_DR_CR = I.ACCOUNT_TYPE
                              THEN
                                 NVL (CURRENT_BAL, 0) + P_TRANS_AMT
                              ELSE
                                 NVL (CURRENT_BAL, 0) - P_TRANS_AMT
                           END
                WHERE   OFFICE_CD = P_OFFICE_CD AND GLAC_SL_NO = I.GLAC_SL_NO;
            ELSE
               UPDATE   CPF_GL_COA_MST_HIST
                  SET   CURRENT_BAL =
                           CASE
                              WHEN P_DR_CR = I.ACCOUNT_TYPE
                              THEN
                                 NVL (CURRENT_BAL, 0) + P_TRANS_AMT
                              ELSE
                                 NVL (CURRENT_BAL, 0) - P_TRANS_AMT
                           END
                WHERE       OFFICE_CD = P_OFFICE_CD
                        AND GLAC_SL_NO = I.GLAC_SL_NO
                        AND BAL_YEAR = P_FISCAL_YR;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               RAISE ERR_UNABLE_TO_UPDATE;
               EXIT;
         END;
      END LOOP;
   EXCEPTION
      WHEN ERR_UNABLE_TO_UPDATE
      THEN
         P_PROCESS_ST :=
            'Unable to update the office wise Chart of Accounts dur to!'
            || SQLERRM;
   END;
END PKG_PROVIDENT_FUND_old;
/


--
-- PKG_SALARY_PROCESS  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_salary_process
AS
   PROCEDURE PRO_SALARY_CALCULATION (
      P_OFFICE_CD      IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT     IN     VARCHAR2,
      P_EMP_GID        IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_EMP_TYPE       IN     HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE DEFAULT '01'
                                                                          ,
      P_PAYMENT_TYPE   IN     VARCHAR2 DEFAULT 'S' ,
      P_DIVDEPT_CD     IN     HRM_EMPLOYEE.DIVDEPT_CD%TYPE,
      P_HEAD_CD        IN     SAL_HEAD_SETUP.HEAD_CD%TYPE,
      P_SAL_DT_FROM    IN     DATE,
      P_SAL_DT_TO      IN     DATE,
      P_SALARY_DT      IN     DATE,
      P_OBJECT_CD      IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR           IN     VARCHAR2,
      P_PROCESS_CNT       OUT NUMBER,
      P_ERROR             OUT VARCHAR2
   )
   IS
      V_SAL_PROCESS_NO    SAL_SALARY_MST.SAL_PROCESS_NO%TYPE;
      V_ERROR             VARCHAR2 (2000);
      V_ERROR_ARREAR      VARCHAR2 (2000);
      V_ERROR_MISC        VARCHAR2 (2000);
      V_ERROR_EMP         VARCHAR2 (2000);
      V_ERROR_PFL         VARCHAR2 (2000);
      V_ERROR_HBL         VARCHAR2 (2000);
      V_ERROR_ADV         VARCHAR2 (2000);
      V_ERROR_ACC         VARCHAR2 (2000);
      V_NET_PAYABLE_AMT   SAL_SALARY_MST.NET_PAYABLE_AMT%TYPE := 0;
      V_PROCESS_CNT       NUMBER (10) := 0;
      V_DEV_ACHIVE_AMT    NUMBER (12, 2) := 0;
      V_COUNT_PREM_NO     NUMBER (12, 2) := 0;
      V_COLL_PREM_NO      NUMBER (12, 2) := 0;
      V_PREM_AMT          NUMBER (12, 2) := 0;
      V_COUNT_PREM_AMT    NUMBER (12, 2) := 0;
      V_DEV_TARGET_AMT    NUMBER (12, 2) := 0;
      V_SAL_TARGET_AMT    NUMBER (12, 2) := 0;
      V_ACHIVE_DT_TO      DATE;
      V_NO_OF_INSTL_YR    NUMBER (2) := 0;
      V_FY_CLOSE_DT       DATE;
      v_emp_id            VARCHAR2 (20);



      CURSOR CUR_EMP_LIST
      IS
           SELECT   E.EMP_GID,
                    E.EMP_TYPE_CD,
                    E.DESIG_CD,
                    E.EMPLOYMENT_TP_CD,
                    E.RELIGION_CD,
                    E.MUNILOC_CD,
                    E.SERVICE_CD,
                    E.EMPLOYMENT_ST_CD,
                    E.OFFICE_CD,
                    E.PREVIOUS_BASIC,
                    E.CURR_BASIC,
                    E.BANK_ACCOUNT_NO,
                    E.BANK_BR_CD,
                    E.PAYSC_ID,
                    E.GROSS_EARNING,
                    E.DIVDEPT_CD,
                    E.SAL_TRANSFER_TP,
                    e.emp_id
             FROM   HRM_EMPLOYEE E
            WHERE       E.ACTIVITY_CD = '01'
                    AND NVL (E.SAL_PAY_STAT, '00') = '01'
                    AND E.EMP_GID = NVL (P_EMP_GID, E.EMP_GID)
                    AND E.EMPLOYMENT_TP_CD =
                          NVL (P_EMP_TYPE, E.EMPLOYMENT_TP_CD)
                    AND E.DIVDEPT_CD = NVL (P_DIVDEPT_CD, E.DIVDEPT_CD)
                    AND (NVL (E.CURR_BASIC, 0) > 0
                         OR NVL (E.GROSS_EARNING, 0) > 0)
                    AND ( (NVL (P_DESCENDANT, 'N') = 'N'
                           AND E.OFFICE_CD = NVL (P_OFFICE_CD, E.OFFICE_CD))
                         OR (NVL (P_DESCENDANT, 'N') = 'Y'
                             AND E.OFFICE_CD IN
                                      (    SELECT   O.OFFICE_CD
                                             FROM   HRM_OFFICE_SETUP O
                                       START WITH   O.OFFICE_CD = P_OFFICE_CD
                                       CONNECT BY   PRIOR O.OFFICE_CD =
                                                       O.CONTROL_OFFICE_CD)))
                    AND NOT EXISTS
                          (SELECT   1
                             FROM   SAL_SALARY_MST M
                            WHERE       M.EMP_GID = E.EMP_GID
                                    AND M.SAL_DT_FROM = P_SAL_DT_FROM
                                    AND M.PAYMENT_TYPE = 'S'
                                    AND M.SAL_DT_TO = P_SAL_DT_TO)
         ORDER BY   E.EMP_GID;


      CURSOR CUR_DEV_ACH (
         V_EMP_GID                      HRM_EMPLOYEE.EMP_GID%TYPE,
         P_ACHIVE_DT_TO                 DATE
      )
      IS
         SELECT   R.PGID,
                  R.COLL_AMOUNT,
                  R.TOT_PREMIUM_AMT,
                  S.PAY_MODE_CD,
                  R.DUE_DT_FROM,
                  R.DUE_DT_TO,
                  R.INSTALLMENT_NO_FROM,
                  R.INSTALLMENT_NO_TO,
                  DECODE (R.COLLECTION_TYPE,
                          'OL', TRUNC (R.RECEIVE_DATE),
                          R.COLL_SLIP_REC_DT)
                     RECEIVE_DATE
           FROM   INS_P_SUMMERY S, ACC_RECEIVABLES R
          WHERE       S.PGID = R.PGID
                  AND R.REC_STATUS = '1'
                  AND (S.DM_GID = V_EMP_GID OR S.DO_GID = V_EMP_GID)
                  AND (R.INSTALLMENT_NO_FROM <= DECODE (S.PAY_MODE_CD,
                                                        '01',
                                                        1,
                                                        '02',
                                                        2,
                                                        '03',
                                                        4,
                                                        '04',
                                                        12))
                  AND R.DUE_DT_FROM <= P_ACHIVE_DT_TO
                  AND DECODE (R.COLLECTION_TYPE,
                              'OL', R.RECEIVE_DATE,
                              R.COLL_SLIP_REC_DT) BETWEEN TO_DATE (
                                                             '01'
                                                             || TO_CHAR (
                                                                   P_SAL_DT_FROM,
                                                                   'rrrrmm'
                                                                ),
                                                             'ddrrrrmm'
                                                          )
                                                      AND  P_ACHIVE_DT_TO;
   BEGIN
      FOR K IN CUR_EMP_LIST
      LOOP
         V_DEV_ACHIVE_AMT := 0;
         V_COUNT_PREM_NO := 0;
         V_COLL_PREM_NO := 0;
         V_PREM_AMT := 0;
         V_COUNT_PREM_AMT := 0;
         V_DEV_TARGET_AMT := 0;
         V_SAL_TARGET_AMT := 0;
         V_NO_OF_INSTL_YR := 0;

         v_emp_id := k.emp_id;


         IF NVL (P_EMP_TYPE, '01') = '02'
         THEN
            BEGIN
               SELECT   F.FY_CLOSE_DT
                 INTO   V_FY_CLOSE_DT
                 FROM   ACC_FISCAL_YEAR F
                WHERE   P_SAL_DT_FROM BETWEEN FY_ST_DT AND FY_ED_DT;
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_FY_CLOSE_DT := TRUNC (SYSDATE);
            END;

            V_ACHIVE_DT_TO := NVL (V_FY_CLOSE_DT, TRUNC (SYSDATE));

            FOR H IN CUR_DEV_ACH (K.EMP_GID, V_ACHIVE_DT_TO)
            LOOP
               IF H.INSTALLMENT_NO_FROM = H.INSTALLMENT_NO_TO
                  OR (H.INSTALLMENT_NO_TO <= V_NO_OF_INSTL_YR)
               THEN
                  V_DEV_ACHIVE_AMT := V_DEV_ACHIVE_AMT + H.COLL_AMOUNT;
               ELSE
                  IF H.PAY_MODE_CD = '01'
                  THEN
                     V_NO_OF_INSTL_YR := 1;
                  ELSIF H.PAY_MODE_CD = '02'
                  THEN
                     V_NO_OF_INSTL_YR := 2;
                  ELSIF H.PAY_MODE_CD = '03'
                  THEN
                     V_NO_OF_INSTL_YR := 4;
                  ELSIF H.PAY_MODE_CD = '04'
                  THEN
                     V_NO_OF_INSTL_YR := 12;
                  END IF;

                  V_COUNT_PREM_NO :=
                     (V_NO_OF_INSTL_YR - H.INSTALLMENT_NO_FROM) + 1;
                  V_COLL_PREM_NO :=
                     (H.INSTALLMENT_NO_TO - H.INSTALLMENT_NO_FROM) + 1;
                  V_PREM_AMT := H.TOT_PREMIUM_AMT / V_COLL_PREM_NO;
                  V_COUNT_PREM_AMT := V_PREM_AMT * V_COUNT_PREM_NO;

                  IF V_COUNT_PREM_AMT <= H.COLL_AMOUNT
                  THEN
                     V_DEV_ACHIVE_AMT := V_DEV_ACHIVE_AMT + V_COUNT_PREM_AMT;
                  ELSE
                     V_DEV_ACHIVE_AMT := V_DEV_ACHIVE_AMT + H.COLL_AMOUNT;
                  END IF;
               END IF;
            END LOOP;


            BEGIN
               SELECT   T.TOTAL_TARGET
                 INTO   V_DEV_TARGET_AMT
                 FROM   HRM_EMP_TARGET T
                WHERE   T.DESIG_CD = K.DESIG_CD
                        AND P_SAL_DT_FROM BETWEEN T.START_DT AND T.END_DT;
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_DEV_TARGET_AMT := 0;
            END;

            V_SAL_TARGET_AMT :=
               (V_DEV_TARGET_AMT / 12)
               * TO_NUMBER (TO_CHAR (P_SAL_DT_FROM, 'MM'));


            IF V_DEV_ACHIVE_AMT < V_SAL_TARGET_AMT
            THEN
               GOTO DEV_SAL_OMIT;
            END IF;
         END IF;



         SELECT   TO_NUMBER(TO_CHAR (SYSDATE, 'rrrrmm')
                            || LPAD (
                                  NVL (
                                     MAX(TO_NUMBER (
                                            SUBSTR (M.SAL_PROCESS_NO, 7)
                                         )),
                                     0
                                  )
                                  + 1,
                                  6,
                                  0
                               ))
           INTO   V_SAL_PROCESS_NO
           FROM   SAL_SALARY_MST M
          WHERE   SUBSTR (M.SAL_PROCESS_NO, 1, 6) =
                     TO_NUMBER (TO_CHAR (SYSDATE, 'rrrrmm'));


         IF P_PAYMENT_TYPE IN ('S', 'T')
         THEN
            INSERT INTO SAL_SALARY_MST (SAL_PROCESS_NO,
                                        EMP_GID,
                                        SALARY_DT,
                                        PROCESS_DT,
                                        SAL_DT_FROM,
                                        SAL_DT_TO,
                                        OLD_BASIC_AMT,
                                        CUR_BASIC_AMT,
                                        EMP_TYPE_CD,
                                        DESIG_CD,
                                        EMPLOYMENT_TP_CD,
                                        RELIGION_CD,
                                        MUNILOC_CD,
                                        SERVICE_CD,
                                        EMPLOYMENT_ST_CD,
                                        OFFICE_CD,
                                        NET_PAYABLE_AMT,
                                        PAYMENT_TYPE,
                                        ACCOUNT_NO,
                                        BANK_CD,
                                        BR_CD,
                                        I_USR,
                                        I_DT,
                                        DIVDEPT_CD,
                                        SAL_TRANSFER_TP)
              VALUES   (V_SAL_PROCESS_NO,
                        K.EMP_GID,
                        P_SALARY_DT,
                        TRUNC (SYSDATE),
                        P_SAL_DT_FROM,
                        P_SAL_DT_TO,
                        K.PREVIOUS_BASIC,
                        K.CURR_BASIC,
                        K.EMP_TYPE_CD,
                        K.DESIG_CD,
                        K.EMPLOYMENT_TP_CD,
                        K.RELIGION_CD,
                        K.MUNILOC_CD,
                        K.SERVICE_CD,
                        K.EMPLOYMENT_ST_CD,
                        K.OFFICE_CD,
                        0,
                        'S',
                        K.BANK_ACCOUNT_NO,
                        NULL,
                        K.BANK_BR_CD,
                        P_IUSR,
                        SYSDATE,
                        K.DIVDEPT_CD,
                        K.SAL_TRANSFER_TP);



            PRO_EARNING_DEDUCTION (V_SAL_PROCESS_NO,
                                   K.EMP_GID,
                                   K.PAYSC_ID,
                                   P_SAL_DT_FROM,
                                   P_SAL_DT_TO,
                                   P_SALARY_DT,
                                   P_IUSR,
                                   V_ERROR);

            IF V_ERROR IS NOT NULL
            THEN
               P_ERROR := 'Error from called procedure# ' || V_ERROR;
               ROLLBACK;
               EXIT;
            END IF;


            PRO_ARREAR (V_SAL_PROCESS_NO,
                        K.EMP_GID,
                        P_SAL_DT_FROM,
                        P_SAL_DT_TO,
                        P_SALARY_DT,
                        P_IUSR,
                        V_ERROR_ARREAR);

            IF V_ERROR_ARREAR IS NOT NULL
            THEN
               P_ERROR := 'Error from called procedure# ' || V_ERROR_ARREAR;
               ROLLBACK;
               EXIT;
            END IF;


            PRO_MISC_EAR_DED (V_SAL_PROCESS_NO,
                              K.EMP_GID,
                              P_OFFICE_CD,
                              P_DESCENDANT,
                              P_EMP_TYPE,
                              P_SAL_DT_FROM,
                              P_SAL_DT_TO,
                              P_SALARY_DT,
                              '1',
                              P_OBJECT_CD,
                              P_IUSR,
                              V_ERROR_MISC);

            IF V_ERROR_MISC IS NOT NULL
            THEN
               P_ERROR := 'Error from called procedure# ' || V_ERROR_MISC;
               ROLLBACK;
               EXIT;
            END IF;



            PRO_PFL_DED (P_SAL_PROCESS_NO   => V_SAL_PROCESS_NO,
                         P_EMP_GID          => K.EMP_GID,
                         P_SAL_DT_FROM      => P_SAL_DT_FROM,
                         P_SAL_DT_TO        => P_SAL_DT_TO,
                         P_SALARY_DT        => P_SALARY_DT,
                         P_IUSR             => P_IUSR,
                         P_ERROR            => V_ERROR_PFL);

            IF V_ERROR_PFL IS NOT NULL
            THEN
               P_ERROR :=
                     'Error from called procedure# '
                  || V_ERROR_PFL
                  || ' for employee id: '
                  || v_emp_id;
               ROLLBACK;
               EXIT;
            END IF;



            PRO_ADV_SAL_DED (P_SAL_PROCESS_NO   => V_SAL_PROCESS_NO,
                             P_EMP_GID          => K.EMP_GID,
                             P_SAL_DT_FROM      => P_SAL_DT_FROM,
                             P_SAL_DT_TO        => P_SAL_DT_TO,
                             P_SALARY_DT        => P_SALARY_DT,
                             P_IUSR             => P_IUSR,
                             P_ERROR            => V_ERROR_ADV);

            IF V_ERROR_ADV IS NOT NULL
            THEN
               P_ERROR :=
                     'Error from called procedure# '
                  || V_ERROR_ADV
                  || ' for employee id: '
                  || v_emp_id;
               ROLLBACK;
               EXIT;
            END IF;



            PRO_EMP_EAR_DED (P_SAL_PROCESS_NO   => V_SAL_PROCESS_NO,
                             P_EMP_GID          => K.EMP_GID,
                             P_SAL_DT_FROM      => P_SAL_DT_FROM,
                             P_SAL_DT_TO        => P_SAL_DT_TO,
                             P_SALARY_DT        => P_SALARY_DT,
                             P_IUSR             => P_IUSR,
                             P_ERROR            => V_ERROR_EMP);

            IF V_ERROR_EMP IS NOT NULL
            THEN
               P_ERROR :=
                     'Error from called procedure# '
                  || V_ERROR_EMP
                  || ' for employee id: '
                  || v_emp_id;
               ROLLBACK;
               EXIT;
            END IF;


            SELECT   NVL (
                        SUM (
                           NVL (D.EARNING_AMT, 0) - NVL (D.DEDUCTION_AMT, 0)
                        ),
                        0
                     )
              INTO   V_NET_PAYABLE_AMT
              FROM   SAL_SALARY_DETL D
             WHERE   D.SAL_PROCESS_NO = V_SAL_PROCESS_NO;


            UPDATE   SAL_SALARY_MST
               SET   NET_PAYABLE_AMT = ROUND (V_NET_PAYABLE_AMT)
             WHERE   SAL_PROCESS_NO = V_SAL_PROCESS_NO;



            IF V_ERROR_ACC IS NOT NULL
            THEN
               P_ERROR := 'Error from called procedure# ' || V_ERROR_EMP;
               ROLLBACK;
               EXIT;
            END IF;
         END IF;

         IF P_ERROR IS NULL
         THEN
            COMMIT;
            V_PROCESS_CNT := V_PROCESS_CNT + 1;
         ELSE
            ROLLBACK;
            EXIT;
         END IF;

        <<DEV_SAL_OMIT>>
         NULL;
      END LOOP;

      P_PROCESS_CNT := V_PROCESS_CNT;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR :=
               'pro_salary_calculation: '
            || SQLERRM
            || ' for employee id: '
            || v_emp_id;
   END PRO_SALARY_CALCULATION;



   PROCEDURE PRO_EARNING_DEDUCTION (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_PAYSC_ID         IN     HRM_EMPLOYEE.PAYSC_ID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_EFFECT_REST          NUMBER (1) := 0;


      V_INCREMENT_FLAG       NUMBER (1) := 0;

      V_PROMOTION_FALG       NUMBER (1) := 0;

      V_NOOF_DAY_SAL         NUMBER (3) := 0;

      V_NOOF_DAY_MONTH       NUMBER (3) := 0;

      V_OLD_BASIC_NOOF_DAY   NUMBER (3) := 0;

      V_NEW_BASIC_NOOF_DAY   NUMBER (3) := 0;

      V_OLD_BASIC_VALID      NUMBER (10, 2) := 0;

      V_NEW_BASIC_VALID      NUMBER (10, 2) := 0;

      V_BASIC_VALID          NUMBER (10, 2) := 0;

      V_BASE_BASIC           NUMBER (10, 2) := 0;

      V_MST_CNT              NUMBER (3) := 0;

      V_EARN_AMT             NUMBER (10, 2) := 0;

      V_DED_AMT              NUMBER (10, 2) := 0;

      V_PAYABLE_AMT          NUMBER (10, 2) := 0;

      V_PAYMENT_PCT          SAL_HEAD_SETUP_DETL.PAYMENT_PCT%TYPE := 0;

      V_FIXED_AMT            SAL_HEAD_SETUP_DETL.FIXED_AMT%TYPE := 0;

      V_CAL_REQ              NUMBER (1) := 1;

      V_CHILD_CNT            NUMBER (2) := 0;
      V_INCHARGE_CNT         NUMBER (2) := 0;
      V_PFL_CNT              NUMBER (2) := 0;
      V_HBL_CNT              NUMBER (2) := 0;
      V_INSTL_AMT            PAY_LOAN_APPL_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_OUTSTANDING_AMT      PAY_LOAN_APPL_APPRVL.OUTSTANDING_AMT%TYPE := 0;
      V_NO_DAYS_ABSENT       HR_UNAUTHORIZED_ABSENT.NO_DAYS_ABSENT%TYPE := 0;
      V_SWL_CNT              NUMBER (2) := 0;
      V_BASIC_ABSENT         NUMBER (12, 2) := 0;

      CURSOR CUR_GEN_EARN_DED
      IS
         SELECT   H.HEAD_CD,
                  L.HEAD_NM,
                  L.SHORT_NM,
                  H.HEAD_TYPE,
                  H.AMOUNT_TYPE,
                  H.BASED_ON,
                  H.BASIC_RANGE_FLAG,
                  H.MIN_MAX_FLAG,
                  D.HEAD_DETL_CD,
                  NVL (H.DEPENDENCY_FLAG, 'N') DEPENDENCY_FLAG,
                  H.DEPENDENCY_CD,
                  D.EMP_TYPE_CD,
                  D.DESIG_CD,
                  D.EMPLOYMENT_TP_CD,
                  D.RELIGION_CD,
                  D.MUNILOC_CD,
                  D.SERVICE_CD,
                  D.EMPLOYMENT_ST_CD,
                  D.BASIC_FROM,
                  D.BASIC_TO,
                  D.PAYMENT_PCT,
                  D.FIXED_AMT,
                  D.MIN_PAYABLE,
                  D.MAX_PAYABLE,
                  D.PAY_PERIOD,
                  H.CAT_CD,
                  E.CURR_BASIC,
                  E.PREVIOUS_BASIC,
                  E.LAST_INCRE_DT,
                  E.LAST_PROM_DT,
                  E.EFFECT_DT_ON_SALARY,
                  E.PFC_DED_STAT,
                  E.GROSS_EARNING,
                  E.JOIN_DT
           FROM   SAL_HEAD_SETUP H,
                  SAL_HEAD_SETUP_DETL D,
                  HRM_EMPLOYEE E,
                  SAL_HEAD L
          WHERE       H.HEAD_CD = D.HEAD_CD
                  AND H.HEAD_CD = L.HEAD_CD
                  AND NVL (L.STATUS, '0') = '1'
                  AND E.EMP_GID = P_EMP_GID
                  AND E.EMP_TYPE_CD = NVL (D.EMP_TYPE_CD, E.EMP_TYPE_CD)
                  AND E.DESIG_CD = NVL (D.DESIG_CD, E.DESIG_CD)
                  AND E.EMPLOYMENT_TP_CD =
                        NVL (D.EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                  AND NVL (E.RELIGION_CD, 'XX') =
                        NVL (D.RELIGION_CD, NVL (E.RELIGION_CD, 'XX'))
                  AND NVL (E.MUNILOC_CD, 'XX') =
                        NVL (D.MUNILOC_CD, NVL (E.MUNILOC_CD, 'XX'))
                  AND E.SERVICE_CD = NVL (D.SERVICE_CD, E.SERVICE_CD)
                  AND E.EMPLOYMENT_ST_CD =
                        NVL (D.EMPLOYMENT_ST_CD, E.EMPLOYMENT_ST_CD)
                  AND NVL (E.CURR_BASIC, 0) BETWEEN NVL (
                                                       D.BASIC_FROM,
                                                       NVL (E.CURR_BASIC, 0)
                                                    )
                                                AND  NVL (
                                                        D.BASIC_TO,
                                                        NVL (E.CURR_BASIC, 0)
                                                     );
   BEGIN
      V_NOOF_DAY_SAL := P_SAL_DT_TO - P_SAL_DT_FROM + 1;
      V_NOOF_DAY_MONTH := TO_NUMBER (TO_CHAR (LAST_DAY (P_SAL_DT_TO), 'dd'));
      V_OLD_BASIC_NOOF_DAY := 0;
      V_NEW_BASIC_NOOF_DAY := 0;
      V_OLD_BASIC_VALID := 0;
      V_NEW_BASIC_VALID := 0;
      V_BASIC_VALID := 0;
      V_BASIC_ABSENT := 0;


      FOR I IN CUR_GEN_EARN_DED
      LOOP
         V_PAYMENT_PCT := 0;
         V_FIXED_AMT := 0;
         V_PAYABLE_AMT := 0;
         V_EARN_AMT := 0;
         V_DED_AMT := 0;
         V_CAL_REQ := 1;
         V_CHILD_CNT := 0;
         V_INCHARGE_CNT := 0;
         V_PFL_CNT := 0;
         V_HBL_CNT := 0;
         V_INSTL_AMT := 0;
         V_OUTSTANDING_AMT := 0;
         V_NO_DAYS_ABSENT := 0;



         IF I.DEPENDENCY_FLAG = 'Y'
         THEN
            IF NVL (I.DEPENDENCY_CD, '000') = '001'
            THEN
               SELECT   COUNT (L.EMP_GID)
                 INTO   V_CHILD_CNT
                 FROM   HRM_EMP_CHILD L
                WHERE   L.EMP_GID = P_EMP_GID AND L.OCCUP_CD = '10';

               IF NVL (V_CHILD_CNT, 0) = 0
               THEN
                  V_CAL_REQ := 0;
               END IF;
            ELSIF NVL (I.DEPENDENCY_CD, '000') = '002'
            THEN
               SELECT   COUNT (M.EMP_GID)
                 INTO   V_INCHARGE_CNT
                 FROM   HRM_EMPLOYEE M
                WHERE   NVL (M.INCHARGE_ST, '0') = '1'
                        AND M.EMP_GID = P_EMP_GID;

               IF NVL (V_INCHARGE_CNT, 0) = 0
               THEN
                  V_CAL_REQ := 0;
               END IF;
            ELSIF NVL (I.DEPENDENCY_CD, '000') = '003'
            THEN
               SELECT   COUNT (P.EMP_GID)
                 INTO   V_PFL_CNT
                 FROM   CPF_LOAN_APPRVL P
                WHERE   NVL (P.DISBURSE_FLAG, 'N') = 'Y'
                        AND P.EMP_GID = P_EMP_GID;

               SELECT   COUNT (H.EMP_GID)
                 INTO   V_HBL_CNT
                 FROM   PAY_LOAN_APPL_APPRVL H
                WHERE   NVL (H.DISBURSE_FLAG, 'N') = 'Y'
                        AND H.EMP_GID = P_EMP_GID;


               SELECT   COUNT (W.EMP_GID)
                 INTO   V_SWL_CNT
                 FROM   PAY_LOAN_APPL_APPRVL W
                WHERE       NVL (W.DISBURSE_FLAG, 'N') = 'Y'
                        AND W.EMP_GID = P_EMP_GID
                        AND NVL (W.DED_FRM_SAL, 'N') = 'Y'
                        AND NVL (W.DED_SUSPEND, 'N') = 'N';

               IF     NVL (V_HBL_CNT, 0) = 0
                  AND NVL (V_PFL_CNT, 0) = 0
                  AND NVL (V_SWL_CNT, 0) = 0
               THEN
                  V_CAL_REQ := 0;
               END IF;
            ELSIF NVL (I.DEPENDENCY_CD, '000') = '004'
            THEN
               BEGIN
                  SELECT   NVL (L.NO_DAYS_ABSENT, 0)
                    INTO   V_NO_DAYS_ABSENT
                    FROM   HR_UNAUTHORIZED_ABSENT L
                   WHERE       L.EMP_GID = P_EMP_GID
                           AND L.SAL_DT_FROM = P_SAL_DT_FROM
                           AND L.SAL_DT_TO = P_SAL_DT_TO;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     V_NO_DAYS_ABSENT := 0;
               END;

               IF NVL (V_NO_DAYS_ABSENT, 0) = 0
               THEN
                  V_CAL_REQ := 0;
               END IF;
            END IF;
         END IF;


         IF I.SHORT_NM = 'PFC' AND NVL (I.PFC_DED_STAT, 0) = 0
         THEN
            V_CAL_REQ := 0;
         END IF;



         IF V_CAL_REQ = 1
         THEN
            IF V_MST_CNT = 0
            THEN
               V_BASIC_VALID := I.CURR_BASIC;


               IF I.JOIN_DT > P_SAL_DT_FROM
               THEN
                  V_OLD_BASIC_NOOF_DAY :=
                     TO_NUMBER (TO_CHAR (I.JOIN_DT, 'dd')) - 1;
                  V_NEW_BASIC_NOOF_DAY :=
                     V_NOOF_DAY_SAL - V_OLD_BASIC_NOOF_DAY;
                  V_BASIC_VALID :=
                     V_NEW_BASIC_NOOF_DAY * (I.CURR_BASIC / V_NOOF_DAY_MONTH);
               END IF;



               IF I.LAST_INCRE_DT BETWEEN P_SAL_DT_FROM AND P_SAL_DT_TO
               THEN
                  V_INCREMENT_FLAG := 1;
               ELSIF I.LAST_PROM_DT BETWEEN P_SAL_DT_FROM AND P_SAL_DT_TO
               THEN
                  V_PROMOTION_FALG := 1;
               END IF;


               IF V_INCREMENT_FLAG = 1 OR V_PROMOTION_FALG = 1
               THEN
                  IF V_INCREMENT_FLAG = 1
                  THEN
                     V_OLD_BASIC_NOOF_DAY :=
                        TO_NUMBER (TO_CHAR (I.LAST_INCRE_DT, 'dd')) - 1;
                     V_NEW_BASIC_NOOF_DAY :=
                        V_NOOF_DAY_SAL - V_OLD_BASIC_NOOF_DAY;
                  ELSIF V_PROMOTION_FALG = 1
                  THEN
                     V_OLD_BASIC_NOOF_DAY :=
                        TO_NUMBER (TO_CHAR (I.LAST_PROM_DT, 'dd')) - 1;
                     V_NEW_BASIC_NOOF_DAY :=
                        V_NOOF_DAY_SAL - V_OLD_BASIC_NOOF_DAY;
                  END IF;


                  V_OLD_BASIC_VALID :=
                     V_OLD_BASIC_NOOF_DAY
                     * (I.PREVIOUS_BASIC / V_NOOF_DAY_MONTH);
                  V_NEW_BASIC_VALID :=
                     V_NEW_BASIC_NOOF_DAY * (I.CURR_BASIC / V_NOOF_DAY_MONTH);
                  V_BASIC_VALID :=
                     NVL (V_OLD_BASIC_VALID, 0) + NVL (V_NEW_BASIC_VALID, 0);
               END IF;

               V_MST_CNT := 1;
            END IF;


            IF I.AMOUNT_TYPE = 'P'
            THEN
               V_PAYMENT_PCT := I.PAYMENT_PCT;

               BEGIN
                  SELECT   D.AMT_PCT
                    INTO   V_PAYMENT_PCT
                    FROM   SAL_EMP_EAR_DED D
                   WHERE       NVL (ALTERNATIV_FLAG, '0') = '1'
                           AND D.AMOUNT_TYPE = 'P'
                           AND D.HEAD_CD = I.HEAD_CD
                           AND D.EMP_GID = P_EMP_GID;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            ELSIF I.AMOUNT_TYPE = 'F'
            THEN
               V_FIXED_AMT := I.FIXED_AMT;

               BEGIN
                  SELECT   D.AMOUNT
                    INTO   V_FIXED_AMT
                    FROM   SAL_EMP_EAR_DED D
                   WHERE       NVL (ALTERNATIV_FLAG, '0') = '1'
                           AND D.AMOUNT_TYPE = 'F'
                           AND D.HEAD_CD = I.HEAD_CD
                           AND D.EMP_GID = P_EMP_GID;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            END IF;



            IF NVL (I.BASIC_RANGE_FLAG, 'N') = 'Y'
            THEN
               IF V_BASIC_VALID NOT BETWEEN I.BASIC_FROM AND I.BASIC_TO
               THEN
                  BEGIN
                     SELECT   D.PAYMENT_PCT, D.FIXED_AMT
                       INTO   V_PAYMENT_PCT, V_FIXED_AMT
                       FROM   SAL_HEAD_SETUP_DETL D
                      WHERE   D.HEAD_CD = I.HEAD_CD
                              AND V_BASIC_VALID BETWEEN D.BASIC_FROM
                                                    AND  D.BASIC_TO;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        NULL;
                  END;
               END IF;
            END IF;


            IF I.AMOUNT_TYPE = 'P'
            THEN
               IF I.BASED_ON = 'B'
               THEN
                  IF I.SHORT_NM = 'DUA'
                  THEN
                     V_BASIC_ABSENT :=
                        ROUND( (V_BASIC_VALID * V_NO_DAYS_ABSENT)
                              / TO_NUMBER (TO_CHAR (P_SAL_DT_TO, 'DD')));
                     V_PAYABLE_AMT :=
                        ROUND (V_BASIC_ABSENT * (V_PAYMENT_PCT / 100), 2);
                  ELSE
                     V_PAYABLE_AMT :=
                        ROUND (V_BASIC_VALID * (V_PAYMENT_PCT / 100), 2);
                  END IF;
               ELSIF I.BASED_ON = 'F'
               THEN
                  BEGIN
                     SELECT   INCRE_BASIC
                       INTO   V_BASE_BASIC
                       FROM   HRM_PAY_SCALE_DETL
                      WHERE   PAYSC_ID = P_PAYSC_ID
                              AND PAY_LEVEL =
                                    (SELECT   MIN (PAY_LEVEL)
                                       FROM   HRM_PAY_SCALE_DETL
                                      WHERE   PAYSC_ID = P_PAYSC_ID);

                     V_PAYABLE_AMT :=
                        ROUND (V_BASE_BASIC * (V_PAYMENT_PCT / 100), 2);
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        V_PAYABLE_AMT := 0;
                  END;
               ELSIF I.BASED_ON = 'I'
               THEN
                  IF I.CAT_CD = '04'
                  THEN
                     BEGIN
                        SELECT   MAX (H.INSTL_AMOUNT)
                          INTO   V_INSTL_AMT
                          FROM   PAY_LOAN_APPL_APPRVL H
                         WHERE   EMP_GID = P_EMP_GID
                                 AND NVL (LOAN_STATUS, 'X') <> 'R';
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           V_INSTL_AMT := 0;
                     END;

                     V_PAYABLE_AMT := V_INSTL_AMT * (V_PAYMENT_PCT / 100);
                  END IF;
               ELSIF I.BASED_ON = 'T'
               THEN
                  IF I.CAT_CD = '04'
                  THEN
                     BEGIN
                        SELECT   MAX (H.OUTSTANDING_AMT)
                          INTO   V_OUTSTANDING_AMT
                          FROM   PAY_LOAN_APPL_APPRVL H
                         WHERE   EMP_GID = P_EMP_GID
                                 AND NVL (LOAN_STATUS, 'X') <> 'R';
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           V_OUTSTANDING_AMT := 0;
                     END;

                     V_PAYABLE_AMT :=
                        ROUND (
                           (V_OUTSTANDING_AMT * (V_PAYMENT_PCT / 100)) / 12,
                           2
                        );
                  END IF;
               ELSIF I.BASED_ON = 'G'
               THEN
                  IF I.SHORT_NM = 'DUA'
                  THEN
                     V_BASIC_ABSENT :=
                        ROUND( (I.GROSS_EARNING * V_NO_DAYS_ABSENT)
                              / TO_NUMBER (TO_CHAR (P_SAL_DT_TO, 'DD')));
                     V_PAYABLE_AMT :=
                        ROUND (V_BASIC_ABSENT * (V_PAYMENT_PCT / 100), 2);
                  ELSE
                     V_PAYABLE_AMT :=
                        ROUND (I.GROSS_EARNING * (V_PAYMENT_PCT / 100), 2);
                  END IF;
               END IF;
            ELSIF I.AMOUNT_TYPE = 'F'
            THEN
               V_PAYABLE_AMT := V_FIXED_AMT;
            END IF;


            IF I.SHORT_NM = 'BF'
            THEN
               V_PAYABLE_AMT := ROUND (V_PAYABLE_AMT);
            END IF;

            IF NVL (V_PAYABLE_AMT, 0) > 0
            THEN
               IF NVL (I.DEPENDENCY_CD, '000') = '001'
                  AND NVL (V_CHILD_CNT, 0) > 0
               THEN
                  V_PAYABLE_AMT := V_PAYABLE_AMT * V_CHILD_CNT;
               END IF;


               IF NVL (I.MIN_MAX_FLAG, 'N') = 'Y'
               THEN
                  IF NVL (I.MIN_PAYABLE, 0) > 0
                     AND NVL (V_PAYABLE_AMT, 0) < I.MIN_PAYABLE
                  THEN
                     V_PAYABLE_AMT := I.MIN_PAYABLE;
                  END IF;

                  IF NVL (I.MAX_PAYABLE, 0) > 0
                     AND NVL (V_PAYABLE_AMT, 0) > I.MAX_PAYABLE
                  THEN
                     V_PAYABLE_AMT := I.MAX_PAYABLE;
                  END IF;
               END IF;


               IF I.HEAD_TYPE = 'E'
               THEN
                  V_EARN_AMT := ROUND (V_PAYABLE_AMT);
               ELSE
                  V_DED_AMT := ROUND (V_PAYABLE_AMT);
               END IF;


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           I.HEAD_CD,
                           P_SALARY_DT,
                           V_EARN_AMT,
                           V_DED_AMT,
                           P_IUSR,
                           SYSDATE);
            END IF;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_Earning_Deduction Error: ' || SQLERRM;
   END PRO_EARNING_DEDUCTION;



   PROCEDURE PRO_ARREAR (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_ADJ_BASIC         HRM_EMPLOYEE.CURR_BASIC%TYPE := 0;
      V_CURR_BASIC        HRM_EMPLOYEE.CURR_BASIC%TYPE := 0;
      V_PREVIOUS_BASIC    HRM_EMPLOYEE.PREVIOUS_BASIC%TYPE := 0;
      V_LAST_INCRE_DT     DATE;
      V_LAST_PROM_DT      DATE;
      V_PAYSC_EFFECT_DT   DATE;
      V_EARN_AMT          NUMBER (10, 2) := 0;

      V_DED_AMT           NUMBER (10, 2) := 0;

      V_PAYABLE_AMT       NUMBER (10, 2) := 0;

      V_PAYMENT_PCT       SAL_HEAD_SETUP_DETL.PAYMENT_PCT%TYPE := 0;

      V_NOOF_DAY_MONTH    NUMBER (3) := 0;

      V_NOOF_DAY_SAL      NUMBER (3) := 0;

      V_LOOP_CNT          NUMBER (3) := 0;
      V_BASE_BASIC        NUMBER (10, 2) := 0;



      CURSOR CUR_ARREAR_LIST
      IS
         SELECT   M.ARREAR_NO,
                  M.CIRCULAR_CAUSE,
                  M.ARREAR_FOR,
                  M.ARREAR_TYPE,
                  M.ARREAR_DT_FRM,
                  M.ARREAR_DT_TO,
                  M.PAYABLE_MM,
                  M.PAYABLE_YR,
                  M.AMOUNT_TYPE,
                  M.BASED_ON,
                  M.APPLICABLE_FOR,
                  M.EMP_GID,
                  C.HEAD_CD,
                  C.PAYMENT_TYPE,
                  C.AMOUNT_PCT,
                  C.AMOUNT_FIXED,
                  E.CURR_BASIC,
                  E.PREVIOUS_BASIC,
                  E.PAYSC_ID
           FROM   SAL_ARREAR_MST M, SAL_ARREAR_DETL C, HRM_EMPLOYEE E
          WHERE       M.ARREAR_NO = C.ARREAR_NO
                  AND E.EMP_GID = P_EMP_GID
                  --AND E.SERVICE_CD IN ('01', '02')
                  AND M.STATUS = 0
                  AND E.EMPLOYMENT_ST_CD = '00'
                  AND E.EMP_GID = NVL (M.EMP_GID, E.EMP_GID)
                  AND M.PAYABLE_YR || LPAD (M.PAYABLE_MM, 2, 0) <=
                        TO_CHAR (P_SAL_DT_TO, 'RRRRMM')
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_DETL D, SAL_SALARY_MST S
                          WHERE       S.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND D.ARREAR_NO = M.ARREAR_NO
                                  AND D.HEAD_CD = C.HEAD_CD
                                  AND S.EMP_GID = P_EMP_GID);
   BEGIN
      FOR I IN CUR_ARREAR_LIST
      LOOP
         V_ADJ_BASIC := 0;
         V_PAYMENT_PCT := 0;
         V_PAYABLE_AMT := 0;
         V_EARN_AMT := 0;
         V_DED_AMT := 0;
         V_NOOF_DAY_SAL := 0;
         V_LOOP_CNT := 0;
         V_NOOF_DAY_SAL := 0;


         IF NVL (I.AMOUNT_TYPE, 'X') = 'D'
         THEN
            V_ADJ_BASIC := NVL (I.CURR_BASIC, 0) - NVL (I.PREVIOUS_BASIC, 0);


            BEGIN
               SELECT   D.PAYMENT_PCT
                 INTO   V_PAYMENT_PCT
                 FROM   SAL_HEAD_SETUP_DETL D, HRM_EMPLOYEE E
                WHERE       D.HEAD_CD = I.HEAD_CD
                        AND D.BASED_ON = I.BASED_ON
                        AND E.EMP_GID = P_EMP_GID
                        AND E.EMP_TYPE_CD =
                              NVL (D.EMP_TYPE_CD, E.EMP_TYPE_CD)
                        AND E.DESIG_CD = NVL (D.DESIG_CD, E.DESIG_CD)
                        AND E.EMPLOYMENT_TP_CD =
                              NVL (D.EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                        AND NVL (E.RELIGION_CD, 'XX') =
                              NVL (D.RELIGION_CD, NVL (E.RELIGION_CD, 'XX'))
                        AND NVL (E.MUNILOC_CD, 'XX') =
                              NVL (D.MUNILOC_CD, NVL (E.MUNILOC_CD, 'XX'))
                        AND E.SERVICE_CD = NVL (D.SERVICE_CD, E.SERVICE_CD)
                        AND E.EMPLOYMENT_ST_CD =
                              NVL (D.EMPLOYMENT_ST_CD, E.EMPLOYMENT_ST_CD)
                        AND V_ADJ_BASIC BETWEEN NVL (D.BASIC_FROM,
                                                     V_ADJ_BASIC)
                                            AND  NVL (D.BASIC_TO,
                                                      V_ADJ_BASIC);
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;



            FOR J IN TO_NUMBER (TO_CHAR (I.ARREAR_DT_FRM, 'MM')) .. TO_NUMBER(TO_CHAR (
                                                                                 I.ARREAR_DT_TO,
                                                                                 'MM'
                                                                              ))
            LOOP
               V_NOOF_DAY_MONTH :=
                  TO_NUMBER(TO_CHAR (
                               LAST_DAY (
                                  ADD_MONTHS (I.ARREAR_DT_FRM, V_LOOP_CNT)
                               ),
                               'dd'
                            ));

               IF LAST_DAY (ADD_MONTHS (I.ARREAR_DT_FRM, V_LOOP_CNT)) <=
                     I.ARREAR_DT_TO
               THEN
                  V_NOOF_DAY_SAL :=
                     TO_NUMBER(TO_CHAR (
                                  LAST_DAY (
                                     ADD_MONTHS (I.ARREAR_DT_FRM, V_LOOP_CNT)
                                  ),
                                  'dd'
                               ));
               ELSE
                  V_NOOF_DAY_SAL := TO_NUMBER (TO_CHAR (I.ARREAR_DT_TO, 'dd'));
               END IF;

               V_PAYABLE_AMT :=
                  V_PAYABLE_AMT
                  + ROUND (
                       ( ( (V_ADJ_BASIC / V_NOOF_DAY_MONTH) * V_NOOF_DAY_SAL)
                        * V_PAYMENT_PCT)
                       / 100,
                       2
                    );
               V_LOOP_CNT := V_LOOP_CNT + 1;
            END LOOP;
         ELSIF NVL (I.AMOUNT_TYPE, 'X') = 'P'
         THEN
            IF NVL (I.BASED_ON, 'X') = 'B'
            THEN
               V_ADJ_BASIC := NVL (I.CURR_BASIC, 0);
               V_PAYABLE_AMT := ROUND ( (V_ADJ_BASIC * I.AMOUNT_PCT) / 100, 2);
            ELSIF I.BASED_ON = 'F'
            THEN
               BEGIN
                  SELECT   INCRE_BASIC
                    INTO   V_BASE_BASIC
                    FROM   HRM_PAY_SCALE_DETL
                   WHERE   PAYSC_ID = I.PAYSC_ID
                           AND PAY_LEVEL = (SELECT   MIN (PAY_LEVEL)
                                              FROM   HRM_PAY_SCALE_DETL
                                             WHERE   PAYSC_ID = I.PAYSC_ID);

                  V_ADJ_BASIC := NVL (V_BASE_BASIC, 0);
                  V_PAYABLE_AMT :=
                     ROUND ( (V_BASE_BASIC * I.AMOUNT_PCT) / 100, 2);
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     V_ADJ_BASIC := 0;
                     V_PAYABLE_AMT := 0;
               END;
            END IF;
         ELSIF NVL (I.AMOUNT_TYPE, 'X') = 'F'
         THEN
            V_PAYABLE_AMT := I.AMOUNT_FIXED;
         END IF;


         IF I.PAYMENT_TYPE = 'E'
         THEN
            V_EARN_AMT := ROUND (V_PAYABLE_AMT);
         ELSE
            V_DED_AMT := ROUND (V_PAYABLE_AMT);
         END IF;


         INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                      HEAD_CD,
                                      SALARY_DT,
                                      EARNING_AMT,
                                      DEDUCTION_AMT,
                                      ARREAR_NO,
                                      I_USR,
                                      I_DT)
           VALUES   (P_SAL_PROCESS_NO,
                     I.HEAD_CD,
                     P_SALARY_DT,
                     V_EARN_AMT,
                     V_DED_AMT,
                     I.ARREAR_NO,
                     P_IUSR,
                     SYSDATE);
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_Arrear: ' || SQLERRM;
   END PRO_ARREAR;



   PROCEDURE PRO_MISC_EAR_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_OFFICE_CD        IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT       IN     VARCHAR2,
      P_EMP_TYPE         IN     HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE DEFAULT '01'
                                                                            ,
      P_PAY_DT_FROM      IN     DATE,
      P_PAY_DT_TO        IN     DATE,
      P_PAYABLE_DT       IN     DATE,
      P_SALARY_PROCESS   IN     SAL_SPEC_EAR_DED_MST.SALARY_PROCESS%TYPE,
      P_OBJECT_CD        IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_SAL_PROCESS_NO       SAL_SALARY_MST.SAL_PROCESS_NO%TYPE;

      V_NOOF_DAY_MONTH       NUMBER (3) := 0;

      V_OLD_BASIC_NOOF_DAY   NUMBER (3) := 0;

      V_NEW_BASIC_NOOF_DAY   NUMBER (3) := 0;

      V_OLD_BASIC_VALID      NUMBER (10, 2) := 0;

      V_NEW_BASIC_VALID      NUMBER (10, 2) := 0;

      V_BASIC_VALID          NUMBER (10, 2) := 0;

      V_MST_CNT              NUMBER (3) := 0;

      V_EARN_AMT             NUMBER (10, 2) := 0;

      V_DED_AMT              NUMBER (10, 2) := 0;

      V_PAYABLE_AMT          NUMBER (10, 2) := 0;

      V_PAYMENT_PCT          SAL_HEAD_SETUP_DETL.PAYMENT_PCT%TYPE := 0;

      V_FIXED_AMT            SAL_HEAD_SETUP_DETL.FIXED_AMT%TYPE := 0;

      V_INCREMENT_FLAG       NUMBER (1) := 0;

      V_PROMOTION_FALG       NUMBER (1) := 0;

      V_PAYSC_FLAG           NUMBER (1) := 0;

      V_NET_PAYABLE_AMT      NUMBER (10, 2) := 0;
      V_ERROR_ACC            VARCHAR2 (2000);
      V_BASE_BASIC           NUMBER (10, 2) := 0;
      v_emp_gid              NUMBER;


      CURSOR CUR_EMP_LIST
      IS
         SELECT   E.EMP_GID,
                  E.EMP_TYPE_CD,
                  E.DESIG_CD,
                  E.EMPLOYMENT_TP_CD,
                  E.RELIGION_CD,
                  E.MUNILOC_CD,
                  E.SERVICE_CD,
                  E.EMPLOYMENT_ST_CD,
                  E.OFFICE_CD,
                  E.PREVIOUS_BASIC,
                  E.CURR_BASIC,
                  E.BANK_ACCOUNT_NO,
                  E.BANK_BR_CD,
                  E.PAYSC_ID,
                  E.DIVDEPT_CD,
                  E.SAL_TRANSFER_TP,
                  E.GROSS_EARNING
           FROM   HRM_EMPLOYEE E
          WHERE       E.ACTIVITY_CD = '01'
                  AND e.sal_pay_stat = '01'
                  AND E.EMP_GID = NVL (P_EMP_GID, E.EMP_GID)
                  AND E.EMPLOYMENT_TP_CD =
                        NVL (P_EMP_TYPE, E.EMPLOYMENT_TP_CD)
                  AND ( (NVL (P_DESCENDANT, 'N') = 'N'
                         AND E.OFFICE_CD = NVL (P_OFFICE_CD, E.OFFICE_CD))
                       OR (NVL (P_DESCENDANT, 'N') = 'Y'
                           AND E.OFFICE_CD IN
                                    (    SELECT   O.OFFICE_CD
                                           FROM   HRM_OFFICE_SETUP O
                                     START WITH   O.OFFICE_CD = P_OFFICE_CD
                                     CONNECT BY   PRIOR O.OFFICE_CD =
                                                     O.CONTROL_OFFICE_CD)))
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_MST M,
                                  SAL_SALARY_DETL D,
                                  SAL_SPEC_EAR_DED_DETL S,
                                  SAL_SPEC_EAR_DED_MST P
                          WHERE       M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND D.CIRCULAR_NO = S.CIRCULAR_NO
                                  AND S.CIRCULAR_NO = P.CIRCULAR_NO
                                  AND P.PAYABLE_DT BETWEEN P_PAY_DT_FROM
                                                       AND  P_PAY_DT_TO
                                  AND D.HEAD_CD = S.HEAD_CD
                                  AND M.EMP_GID = E.EMP_GID);

      CURSOR CUR_MISC_HEAD (
         V_EMP_GID                 HRM_EMPLOYEE.EMP_GID%TYPE
      )
      IS
         SELECT   D.HEAD_CD,
                  H.HEAD_NM,
                  H.SHORT_NM,
                  S.HEAD_TYPE,
                  D.AMOUNT_TYPE,
                  E.EMP_TYPE_CD,
                  E.DESIG_CD,
                  E.EMPLOYMENT_TP_CD,
                  E.RELIGION_CD,
                  E.MUNILOC_CD,
                  E.SERVICE_CD,
                  E.EMPLOYMENT_ST_CD,
                  D.BASIC_FROM,
                  D.BASIC_TO,
                  D.PAYMENT_PCT,
                  D.FIXED_AMT,
                  D.MIN_PAYABLE,
                  D.MAX_PAYABLE,
                  E.CURR_BASIC,
                  E.PREVIOUS_BASIC,
                  E.LAST_INCRE_DT,
                  E.LAST_PROM_DT,
                  E.EFFECT_DT_ON_SALARY,
                  E.BANK_ACCOUNT_NO,
                  E.BANK_BR_CD,
                  E.OFFICE_CD,
                  M.CIRCULAR_NO,
                  M.BASIC_RANGE_FLAG,
                  D.BASED_ON,
                  D.CAL_BASE,
                  D.NO_OF_DAYS,
                  NVL (M.SALARY_PROCESS, '0') SALARY_PROCESS,
                  M.MAX_MIN_FLAG,
                  E.PAYSC_ID,
                  E.DIVDEPT_CD,
                  E.GROSS_EARNING
           FROM   SAL_SPEC_EAR_DED_MST M,
                  SAL_SPEC_EAR_DED_DETL D,
                  SAL_HEAD H,
                  SAL_HEAD_SETUP S,
                  HRM_EMPLOYEE E
          WHERE       M.CIRCULAR_NO = D.CIRCULAR_NO
                  AND D.HEAD_CD = H.HEAD_CD
                  AND H.HEAD_CD = S.HEAD_CD
                  AND NVL (M.SALARY_PROCESS, '0') =
                        NVL (P_SALARY_PROCESS, '0')
                  AND E.EMP_GID = V_EMP_GID
                  AND E.EMP_TYPE_CD = NVL (D.EMP_TYPE_CD, E.EMP_TYPE_CD)
                  AND E.DESIG_CD = NVL (D.DESIG_CD, E.DESIG_CD)
                  AND E.EMPLOYMENT_TP_CD =
                        NVL (D.EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                  AND NVL (E.RELIGION_CD, 'XX') =
                        NVL (D.RELIGION_CD, NVL (E.RELIGION_CD, 'XX'))
                  AND NVL (E.MUNILOC_CD, 'XX') =
                        NVL (D.MUNILOC_CD, NVL (E.MUNILOC_CD, 'XX'))
                  AND E.SERVICE_CD = NVL (D.SERVICE_CD, E.SERVICE_CD)
                  AND E.EMPLOYMENT_ST_CD =
                        NVL (D.EMPLOYMENT_ST_CD, E.EMPLOYMENT_ST_CD)
                  AND NVL (E.CURR_BASIC, 0) BETWEEN NVL (
                                                       D.BASIC_FROM,
                                                       NVL (E.CURR_BASIC, 0)
                                                    )
                                                AND  NVL (
                                                        D.BASIC_TO,
                                                        NVL (E.CURR_BASIC, 0)
                                                     )
                  AND M.PAYABLE_DT BETWEEN P_PAY_DT_FROM AND P_PAY_DT_TO
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_DETL SD, SAL_SALARY_MST SM
                          WHERE       SM.SAL_PROCESS_NO = SD.SAL_PROCESS_NO
                                  AND SD.CIRCULAR_NO = M.CIRCULAR_NO
                                  AND SD.HEAD_CD = D.HEAD_CD
                                  AND SM.EMP_GID = V_EMP_GID);
   BEGIN
      V_NOOF_DAY_MONTH := TO_NUMBER (TO_CHAR (LAST_DAY (P_PAY_DT_TO), 'dd'));

      FOR K IN CUR_EMP_LIST
      LOOP
         V_MST_CNT := 0;
         V_OLD_BASIC_NOOF_DAY := 0;
         V_NEW_BASIC_NOOF_DAY := 0;
         V_OLD_BASIC_VALID := 0;
         V_NEW_BASIC_VALID := 0;
         V_BASIC_VALID := 0;
         v_emp_gid := K.EMP_GID;

         FOR I IN CUR_MISC_HEAD (K.EMP_GID)
         LOOP
            V_PAYMENT_PCT := 0;
            V_FIXED_AMT := 0;
            V_PAYABLE_AMT := 0;
            V_EARN_AMT := 0;
            V_DED_AMT := 0;



            V_BASIC_VALID := I.CURR_BASIC;


            IF I.LAST_INCRE_DT BETWEEN P_PAY_DT_FROM AND P_PAY_DT_TO
            THEN
               V_INCREMENT_FLAG := 1;
            ELSIF I.LAST_PROM_DT BETWEEN P_PAY_DT_FROM AND P_PAY_DT_TO
            THEN
               V_PROMOTION_FALG := 1;
            ELSIF I.EFFECT_DT_ON_SALARY BETWEEN P_PAY_DT_FROM AND P_PAY_DT_TO
            THEN
               V_PAYSC_FLAG := 1;
            END IF;


            IF    V_INCREMENT_FLAG = 1
               OR V_PROMOTION_FALG = 1
               OR V_PAYSC_FLAG = 1
            THEN
               IF V_INCREMENT_FLAG = 1
               THEN
                  V_OLD_BASIC_NOOF_DAY :=
                     TO_NUMBER (TO_CHAR (I.LAST_INCRE_DT, 'dd')) - 1;
                  V_NEW_BASIC_NOOF_DAY :=
                     V_NOOF_DAY_MONTH - V_OLD_BASIC_NOOF_DAY;
               ELSIF V_PROMOTION_FALG = 1
               THEN
                  V_OLD_BASIC_NOOF_DAY :=
                     TO_NUMBER (TO_CHAR (I.LAST_PROM_DT, 'dd')) - 1;
                  V_NEW_BASIC_NOOF_DAY :=
                     V_NOOF_DAY_MONTH - V_OLD_BASIC_NOOF_DAY;
               ELSIF V_PAYSC_FLAG = 1
               THEN
                  V_OLD_BASIC_NOOF_DAY :=
                     TO_NUMBER (TO_CHAR (I.EFFECT_DT_ON_SALARY, 'dd')) - 1;
                  V_NEW_BASIC_NOOF_DAY :=
                     V_NOOF_DAY_MONTH - V_OLD_BASIC_NOOF_DAY;
               END IF;


               V_OLD_BASIC_VALID :=
                  V_OLD_BASIC_NOOF_DAY
                  * (I.PREVIOUS_BASIC / V_NOOF_DAY_MONTH);
               V_NEW_BASIC_VALID :=
                  V_NEW_BASIC_NOOF_DAY
                  * (I.PREVIOUS_BASIC / V_NOOF_DAY_MONTH);
               V_BASIC_VALID := V_OLD_BASIC_VALID + V_NEW_BASIC_VALID;
            END IF;

            IF NVL (I.CAL_BASE, 'M') = 'D'
            THEN
               V_BASIC_VALID :=
                  (V_BASIC_VALID / V_NOOF_DAY_MONTH) * I.NO_OF_DAYS;
            END IF;

            IF V_MST_CNT = 0
            THEN
               V_SAL_PROCESS_NO := P_SAL_PROCESS_NO;


               IF NVL (P_SALARY_PROCESS, 0) = 0
               THEN
                  SELECT   TO_NUMBER(TO_CHAR (SYSDATE, 'rrrrmm')
                                     || LPAD (
                                           NVL (
                                              MAX(TO_NUMBER(SUBSTR (
                                                               M.SAL_PROCESS_NO,
                                                               7
                                                            ))),
                                              0
                                           )
                                           + 1,
                                           6,
                                           0
                                        ))
                    INTO   V_SAL_PROCESS_NO
                    FROM   SAL_SALARY_MST M
                   WHERE   SUBSTR (M.SAL_PROCESS_NO, 1, 6) =
                              TO_NUMBER (TO_CHAR (SYSDATE, 'rrrrmm'));


                  INSERT INTO SAL_SALARY_MST (SAL_PROCESS_NO,
                                              EMP_GID,
                                              SALARY_DT,
                                              PROCESS_DT,
                                              SAL_DT_FROM,
                                              SAL_DT_TO,
                                              OLD_BASIC_AMT,
                                              CUR_BASIC_AMT,
                                              EMP_TYPE_CD,
                                              DESIG_CD,
                                              EMPLOYMENT_TP_CD,
                                              RELIGION_CD,
                                              MUNILOC_CD,
                                              SERVICE_CD,
                                              EMPLOYMENT_ST_CD,
                                              OFFICE_CD,
                                              NET_PAYABLE_AMT,
                                              PAYMENT_TYPE,
                                              ACCOUNT_NO,
                                              BANK_CD,
                                              BR_CD,
                                              I_USR,
                                              I_DT,
                                              DIVDEPT_CD,
                                              SAL_TRANSFER_TP)
                    VALUES   (V_SAL_PROCESS_NO,
                              K.EMP_GID,
                              P_PAYABLE_DT,
                              TRUNC (SYSDATE),
                              P_PAY_DT_FROM,
                              P_PAY_DT_TO,
                              I.PREVIOUS_BASIC,
                              I.CURR_BASIC,
                              I.EMP_TYPE_CD,
                              I.DESIG_CD,
                              I.EMPLOYMENT_TP_CD,
                              I.RELIGION_CD,
                              I.MUNILOC_CD,
                              I.SERVICE_CD,
                              I.EMPLOYMENT_ST_CD,
                              I.OFFICE_CD,
                              0,
                              'B',
                              I.BANK_ACCOUNT_NO,
                              NULL,
                              I.BANK_BR_CD,
                              P_IUSR,
                              SYSDATE,
                              K.DIVDEPT_CD,
                              K.SAL_TRANSFER_TP);
               END IF;

               V_MST_CNT := 1;
            END IF;


            IF I.AMOUNT_TYPE = 'P'
            THEN
               V_PAYMENT_PCT := I.PAYMENT_PCT;
            ELSIF I.AMOUNT_TYPE = 'F'
            THEN
               V_FIXED_AMT := I.FIXED_AMT;
            END IF;



            IF NVL (I.BASIC_RANGE_FLAG, 'N') = 'Y'
            THEN
               IF V_BASIC_VALID NOT BETWEEN I.BASIC_FROM AND I.BASIC_TO
               THEN
                  BEGIN
                     SELECT   D.PAYMENT_PCT, D.FIXED_AMT
                       INTO   V_PAYMENT_PCT, V_FIXED_AMT
                       FROM   SAL_HEAD_SETUP_DETL D
                      WHERE   D.HEAD_CD = I.HEAD_CD
                              AND V_BASIC_VALID BETWEEN D.BASIC_FROM
                                                    AND  D.BASIC_TO;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        NULL;
                  END;
               END IF;
            END IF;


            IF I.AMOUNT_TYPE = 'P'
            THEN
               IF I.BASED_ON = 'B'
               THEN
                  V_PAYABLE_AMT :=
                     ROUND (V_BASIC_VALID * (V_PAYMENT_PCT / 100));
               ELSIF I.BASED_ON = 'G'
               THEN
                  V_PAYABLE_AMT :=
                     ROUND (I.GROSS_EARNING * (V_PAYMENT_PCT / 100));
               ELSIF I.BASED_ON = 'F'
               THEN
                  BEGIN
                     SELECT   INCRE_BASIC
                       INTO   V_BASE_BASIC
                       FROM   HRM_PAY_SCALE_DETL
                      WHERE   PAYSC_ID = I.PAYSC_ID
                              AND PAY_LEVEL =
                                    (SELECT   MIN (PAY_LEVEL)
                                       FROM   HRM_PAY_SCALE_DETL
                                      WHERE   PAYSC_ID = I.PAYSC_ID);

                     V_PAYABLE_AMT :=
                        ROUND (V_BASE_BASIC * (V_PAYMENT_PCT / 100));
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        V_PAYABLE_AMT := 0;
                  END;
               END IF;
            ELSIF I.AMOUNT_TYPE = 'F'
            THEN
               V_PAYABLE_AMT := V_FIXED_AMT;
            END IF;

            IF NVL (V_PAYABLE_AMT, 0) > 0
            THEN
               IF NVL (I.MAX_MIN_FLAG, 'N') = 'Y'
               THEN
                  IF NVL (I.MIN_PAYABLE, 0) > 0
                     AND NVL (V_PAYABLE_AMT, 0) < I.MIN_PAYABLE
                  THEN
                     V_PAYABLE_AMT := I.MIN_PAYABLE;
                  END IF;

                  IF NVL (I.MAX_PAYABLE, 0) > 0
                     AND NVL (V_PAYABLE_AMT, 0) > I.MAX_PAYABLE
                  THEN
                     V_PAYABLE_AMT := I.MAX_PAYABLE;
                  END IF;
               END IF;


               IF I.HEAD_TYPE = 'E'
               THEN
                  V_EARN_AMT := ROUND (V_PAYABLE_AMT);
               ELSE
                  V_DED_AMT := ROUND (V_PAYABLE_AMT);
               END IF;


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            CIRCULAR_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (V_SAL_PROCESS_NO,
                           I.HEAD_CD,
                           P_PAYABLE_DT,
                           V_EARN_AMT,
                           V_DED_AMT,
                           I.CIRCULAR_NO,
                           P_IUSR,
                           SYSDATE);
            END IF;
         END LOOP;

         IF NVL (P_SALARY_PROCESS, 0) = 0
         THEN
            SELECT   NVL (
                        SUM (
                           NVL (D.EARNING_AMT, 0) - NVL (D.DEDUCTION_AMT, 0)
                        ),
                        0
                     )
              INTO   V_NET_PAYABLE_AMT
              FROM   SAL_SALARY_DETL D
             WHERE   D.SAL_PROCESS_NO = V_SAL_PROCESS_NO;


            UPDATE   SAL_SALARY_MST
               SET   NET_PAYABLE_AMT = V_NET_PAYABLE_AMT
             WHERE   SAL_PROCESS_NO = V_SAL_PROCESS_NO;



            COMMIT;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR :=
               'Pro_Misc_Ear_Ded: for emp: '
            || v_emp_gid
            || ' error: '
            || SQLERRM;
   END PRO_MISC_EAR_DED;



   PROCEDURE PRO_PFL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_INSTL_AMT            CPF_LOAN_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_REC_INSTL            NUMBER (5) := 0;
      V_HEAD_CD              SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;
      V_SCHEDULE_CD          VARCHAR (5);

      V_HEAD_CD_PFLD         SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;
      V_HEAD_CD_PFLID        SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;
      V_INEREST_AMT          NUMBER (5) := 0;
      V_INSTL_AMT2           NUMBER (5) := 0;
      V_PRIN_AMT             NUMBER (5) := 0;
      V_ERROR                VARCHAR2 (200);
      V_INSTALLMENT_AMOUNT   NUMBER (10, 2);

      CURSOR CUR_PFL
      IS
         SELECT   L.LOAN_NO,
                  L.UD_LOAN_NO,
                  L.LOAN_AMT,
                  L.LOAN_DURATION,
                  L.NO_OF_INSTL,
                  L.INSTL_AMOUNT,
                  L.LAST_INSTL_AMOUNT,
                  L.INTEREST_AMOUNT,
                  CEIL (L.INTEREST_AMOUNT / L.INSTL_AMOUNT)
                     NO_OF_INTERST_INSTL,
                  L.LAST_INTRST_INSTL,
                  L.DED_START_DT,
                  (L.NO_OF_INSTL + CEIL (L.INTEREST_AMOUNT / L.INSTL_AMOUNT))
                     TOT_INSTL,
                  L.PRIN_INSTALLMENT,
                  L.INT_INSTALLMENT,
                  L.LAST_PAID_INSTL_NO
           FROM   CPF_LOAN_APPRVL L
          WHERE       NVL (L.DISBURSE_FLAG, 'N') = 'Y'
                  AND NVL (L.DED_FRM_SAL, 'N') = 'Y'
                  AND NVL (L.DED_SUSPEND, 'N') = 'N'
                  AND L.DED_START_DT <= P_SAL_DT_TO
                  AND NVL (L.LOAN_STATUS, 'X') <> 'R'
                  AND L.EMP_GID = P_EMP_GID
                  AND (L.NO_OF_INSTL
                       + CEIL (L.INTEREST_AMOUNT / L.INSTL_AMOUNT)) >
                        NVL ( (SELECT   COUNT (LOAN_NO)
                                 FROM   SAL_SALARY_DETL S
                                WHERE   S.LOAN_NO = L.LOAN_NO), 0)
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_MST M, SAL_SALARY_DETL D
                          WHERE       M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND M.EMP_GID = P_EMP_GID
                                  AND M.SAL_DT_FROM = P_SAL_DT_FROM
                                  AND M.SAL_DT_TO = P_SAL_DT_TO
                                  AND D.LOAN_NO = L.LOAN_NO);
   BEGIN
      FOR I IN CUR_PFL
      LOOP
         V_INSTL_AMT := 0;
         V_REC_INSTL := 0;


         SELECT   COUNT (LOAN_NO)
           INTO   V_REC_INSTL
           FROM   SAL_SALARY_DETL S
          WHERE   S.LOAN_NO = I.LOAN_NO;


         BEGIN
            SELECT   SCHEDULE_CD INTO V_SCHEDULE_CD FROM CPF_PF_LOAN_SETUP;
         EXCEPTION
            WHEN OTHERS
            THEN
               P_ERROR := '"Schedule Type" cannot generate';
         END;

         IF V_SCHEDULE_CD = '02'
         THEN
            IF I.NO_OF_INSTL = V_REC_INSTL + 1
            THEN
               V_INSTL_AMT := I.LAST_INSTL_AMOUNT;
            ELSIF I.TOT_INSTL = V_REC_INSTL + 1
            THEN
               V_INSTL_AMT := I.LAST_INTRST_INSTL;
            ELSE
               V_INSTL_AMT := I.INSTL_AMOUNT;
            END IF;


            IF V_REC_INSTL + 1 <= I.NO_OF_INSTL
            THEN
               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLD';
            ELSE
               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLID';


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD,
                           P_SALARY_DT,
                           0,
                           V_INSTL_AMT,
                           I.LOAN_NO,
                           P_IUSR,
                           SYSDATE);
            END IF;
         ELSIF V_SCHEDULE_CD = '04'
         THEN
            PRO_INTEREST_AMOUNT (P_LOAN_TYPE      => '00',
                                 P_EMP_GID        => P_EMP_GID,
                                 P_INTEREST_AMT   => V_INEREST_AMT,
                                 P_ERROR          => V_ERROR);

            IF V_ERROR IS NULL
            THEN
               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD_PFLD
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLD';

               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD_PFLID
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLID';


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD_PFLD,
                           P_SALARY_DT,
                           0,
                           I.PRIN_INSTALLMENT,
                           I.LOAN_NO,
                           P_IUSR,
                           SYSDATE);

               IF V_INEREST_AMT > 0
               THEN
                  INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                               HEAD_CD,
                                               SALARY_DT,
                                               EARNING_AMT,
                                               DEDUCTION_AMT,
                                               LOAN_NO,
                                               I_USR,
                                               I_DT)
                    VALUES   (P_SAL_PROCESS_NO,
                              V_HEAD_CD_PFLID,
                              P_SALARY_DT,
                              0,
                              V_INEREST_AMT,
                              I.LOAN_NO,
                              P_IUSR,
                              SYSDATE);
               END IF;
            ELSE
               P_ERROR := V_ERROR;
            END IF;
         ELSIF V_SCHEDULE_CD = '05'
         THEN
            PRO_INTEREST_AMOUNT (P_LOAN_TYPE      => '00',
                                 P_EMP_GID        => P_EMP_GID,
                                 P_INTEREST_AMT   => V_INEREST_AMT,
                                 P_ERROR          => V_ERROR);


            IF I.NO_OF_INSTL = NVL (I.LAST_PAID_INSTL_NO, 0) + 1
            THEN
               V_INSTALLMENT_AMOUNT := I.LAST_INSTL_AMOUNT;
            ELSE
               V_INSTALLMENT_AMOUNT := I.INSTL_AMOUNT;
            END IF;

            IF V_ERROR IS NULL
            THEN
               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD_PFLD
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLD';

               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD_PFLID
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLID';


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD_PFLD,
                           P_SALARY_DT,
                           0,
                           V_INSTALLMENT_AMOUNT - NVL (V_INEREST_AMT, 0),
                           I.LOAN_NO,
                           P_IUSR,
                           SYSDATE);

               IF V_INEREST_AMT > 0
               THEN
                  INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                               HEAD_CD,
                                               SALARY_DT,
                                               EARNING_AMT,
                                               DEDUCTION_AMT,
                                               LOAN_NO,
                                               I_USR,
                                               I_DT)
                    VALUES   (P_SAL_PROCESS_NO,
                              V_HEAD_CD_PFLID,
                              P_SALARY_DT,
                              0,
                              V_INEREST_AMT,
                              I.LOAN_NO,
                              P_IUSR,
                              SYSDATE);
               END IF;
            ELSE
               P_ERROR := V_ERROR;
            END IF;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_pfl_ded: ' || SQLERRM;
   END PRO_PFL_DED;



   PROCEDURE PRO_HBL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_LOAN_INSTL_AMT      CPF_LOAN_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_INTERST_INSTL_AMT   CPF_LOAN_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_REC_INSTL           NUMBER (5) := 0;
      V_REC_AMT             NUMBER (12, 2) := 0;
      V_HEAD_CD             SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;

      CURSOR CUR_HBL
      IS
         SELECT   L.LOAN_NO,
                  L.UD_LOAN_NO,
                  L.LOAN_AMT,
                  L.LOAN_DURATION,
                  L.NO_OF_INSTL,
                  L.INSTL_AMOUNT,
                  L.LAST_INSTL_AMOUNT,
                  L.TOT_INTEREST_AMT,
                  L.DED_START_DT
           FROM   PAY_LOAN_APPL_APPRVL L
          WHERE       NVL (L.DISBURSE_FLAG, 'N') = 'Y'
                  AND NVL (L.DED_FRM_SAL, 'N') = 'Y'
                  AND NVL (L.DED_SUSPEND, 'N') = 'N'
                  AND L.DED_START_DT <= P_SAL_DT_TO
                  AND NVL (L.LOAN_STATUS, 'X') <> 'R'
                  AND L.EMP_GID = P_EMP_GID
                  AND L.NO_OF_INSTL > (SELECT   COUNT (LOAN_NO)
                                         FROM   SAL_SALARY_DETL S
                                        WHERE   S.HBL_LOAN_NO = L.LOAN_NO)
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_MST M, SAL_SALARY_DETL D
                          WHERE       M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND M.EMP_GID = P_EMP_GID
                                  AND M.SAL_DT_FROM = P_SAL_DT_FROM
                                  AND M.SAL_DT_TO = P_SAL_DT_TO
                                  AND D.HBL_LOAN_NO = L.LOAN_NO);
   BEGIN
      FOR I IN CUR_HBL
      LOOP
         V_LOAN_INSTL_AMT := 0;
         V_INTERST_INSTL_AMT := 0;
         V_REC_INSTL := 0;
         V_REC_AMT := 0;
         V_HEAD_CD := NULL;


         SELECT   COUNT (LOAN_NO)
           INTO   V_REC_INSTL
           FROM   SAL_SALARY_DETL S
          WHERE   S.HBL_LOAN_NO = I.LOAN_NO;


         SELECT   SUM (S.DEDUCTION_AMT)
           INTO   V_REC_AMT
           FROM   SAL_SALARY_DETL S
          WHERE   S.HBL_LOAN_NO = I.LOAN_NO;


         IF I.NO_OF_INSTL = V_REC_INSTL + 1
         THEN
            V_LOAN_INSTL_AMT := 0;
            V_INTERST_INSTL_AMT := I.LAST_INSTL_AMOUNT;
            V_HEAD_CD := '027';
         ELSE
            IF NVL (V_REC_AMT, 0) >= I.LOAN_AMT
            THEN
               V_LOAN_INSTL_AMT := 0;
               V_INTERST_INSTL_AMT := I.INSTL_AMOUNT;
            ELSE
               IF NVL (V_REC_AMT, 0) + NVL (I.INSTL_AMOUNT, 0) <= I.LOAN_AMT
               THEN
                  V_LOAN_INSTL_AMT := I.INSTL_AMOUNT;
                  V_INTERST_INSTL_AMT := 0;
               ELSE
                  V_LOAN_INSTL_AMT := I.LOAN_AMT - NVL (V_REC_AMT, 0);
                  V_INTERST_INSTL_AMT :=
                     (NVL (V_REC_AMT, 0) + NVL (I.INSTL_AMOUNT, 0))
                     - I.LOAN_AMT;
               END IF;
            END IF;
         END IF;

         V_HEAD_CD := '026';


         IF NVL (V_LOAN_INSTL_AMT, 0) > 0
         THEN
            SELECT   H.HEAD_CD
              INTO   V_HEAD_CD
              FROM   SAL_HEAD_SETUP H
             WHERE   H.SHORT_NM = 'HBLD';
         END IF;


         IF NVL (V_LOAN_INSTL_AMT, 0) > 0
         THEN
            INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                         HEAD_CD,
                                         SALARY_DT,
                                         EARNING_AMT,
                                         DEDUCTION_AMT,
                                         HBL_LOAN_NO,
                                         I_USR,
                                         I_DT)
              VALUES   (P_SAL_PROCESS_NO,
                        V_HEAD_CD,
                        P_SALARY_DT,
                        0,
                        V_LOAN_INSTL_AMT,
                        I.LOAN_NO,
                        P_IUSR,
                        SYSDATE);
         END IF;


         IF NVL (V_INTERST_INSTL_AMT, 0) > 0
         THEN
            SELECT   H.HEAD_CD
              INTO   V_HEAD_CD
              FROM   SAL_HEAD_SETUP H
             WHERE   H.SHORT_NM = 'HBLID';
         END IF;

         IF NVL (V_INTERST_INSTL_AMT, 0) > 0
         THEN
            INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                         HEAD_CD,
                                         SALARY_DT,
                                         EARNING_AMT,
                                         DEDUCTION_AMT,
                                         HBL_LOAN_NO,
                                         I_USR,
                                         I_DT)
              VALUES   (P_SAL_PROCESS_NO,
                        V_HEAD_CD,
                        P_SALARY_DT,
                        0,
                        V_INTERST_INSTL_AMT,
                        I.LOAN_NO,
                        P_IUSR,
                        SYSDATE);
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_hbl_ded: ' || SQLERRM;
   END PRO_HBL_DED;



   PROCEDURE PRO_EMP_EAR_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_EAR_AMT   NUMBER (12, 2) := 0;
      V_DED_AMT   NUMBER (12, 2) := 0;

      CURSOR CUR_EMP_EAR_DED
      IS
         SELECT   S.HEAD_CD,
                  S.EMP_GID,
                  S.HEAD_TYPE,
                  S.AMOUNT
           FROM   SAL_EMP_EAR_DED S
          WHERE   S.EMP_GID = P_EMP_GID
                  AND NVL (S.ALTERNATIV_FLAG, '0') = '0'
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_MST M, SAL_SALARY_DETL D
                          WHERE       M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND M.EMP_GID = P_EMP_GID
                                  AND D.HEAD_CD = S.HEAD_CD
                                  AND M.SAL_DT_FROM = P_SAL_DT_FROM
                                  AND M.SAL_DT_TO = P_SAL_DT_TO
                                  AND D.ARREAR_NO IS NULL
                                  AND D.CIRCULAR_NO IS NULL);
   BEGIN
      FOR I IN CUR_EMP_EAR_DED
      LOOP
         V_EAR_AMT := 0;
         V_DED_AMT := 0;

         IF I.HEAD_TYPE = 'E'
         THEN
            V_EAR_AMT := I.AMOUNT;
            V_DED_AMT := 0;
         ELSIF I.HEAD_TYPE = 'D'
         THEN
            V_EAR_AMT := 0;
            V_DED_AMT := I.AMOUNT;
         END IF;


         IF V_EAR_AMT > 0 OR V_DED_AMT > 0
         THEN
            INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                         HEAD_CD,
                                         SALARY_DT,
                                         EARNING_AMT,
                                         DEDUCTION_AMT,
                                         I_USR,
                                         I_DT)
              VALUES   (P_SAL_PROCESS_NO,
                        I.HEAD_CD,
                        P_SALARY_DT,
                        V_EAR_AMT,
                        V_DED_AMT,
                        P_IUSR,
                        SYSDATE);
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_Emp_Ear_Ded: ' || SQLERRM;
   END PRO_EMP_EAR_DED;



   PROCEDURE PRO_ADV_SAL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_LOAN_INSTL_AMT      CPF_LOAN_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_INTERST_INSTL_AMT   CPF_LOAN_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_REC_INSTL           NUMBER (5) := 0;
      V_REC_AMT             NUMBER (12, 2) := 0;
      V_HEAD_CD             SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;
      V_COUNT               NUMBER;
      V_INTERST_AMT         NUMBER (5) := 0;
      V_PRIN_AMT            NUMBER (5) := 0;
      V_ERROR               VARCHAR2 (200);
      V_SCHEDULE_CD         NUMBER (5) := 0;
      V_HEAD_CD_PRIN        SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;
      V_HEAD_CD_INT         SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;

      CURSOR CUR_ADV_SAL
      IS
         SELECT   L.LOAN_NO,
                  L.LOAN_AMT,
                  L.LOAN_DURATION,
                  L.NO_OF_INSTL,
                  L.INSTL_AMOUNT,
                  L.LAST_INSTL_AMOUNT,
                  L.INTEREST_AMOUNT,
                  L.DED_START_DT,
                  L.LOAN_TYPE_CD,
                  L.PRIN_INSTALLMENT,
                  L.INT_INSTALLMENT
           FROM   PAY_LOAN_APPL_APPRVL L
          WHERE       L.EMP_GID = P_EMP_GID
                  AND NVL (L.DISBURSE_FLAG, 'N') = 'Y'
                  AND NVL (L.DED_FRM_SAL, 'N') = 'Y'
                  AND NVL (L.DED_SUSPEND, 'N') = 'N'
                  AND L.DED_START_DT <= P_SAL_DT_TO
                  AND NVL (L.LOAN_STATUS, 'X') NOT IN ('F', 'R')
                  AND L.NO_OF_INSTL > (SELECT   COUNT (LOAN_NO)
                                         FROM   SAL_SALARY_DETL S
                                        WHERE   S.PAY_LOAN_NO = L.LOAN_NO)
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_MST M, SAL_SALARY_DETL D
                          WHERE       M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND M.EMP_GID = P_EMP_GID
                                  AND M.SAL_DT_FROM = P_SAL_DT_FROM
                                  AND M.SAL_DT_TO = P_SAL_DT_TO
                                  AND D.PAY_LOAN_NO = L.LOAN_NO);
   BEGIN
      FOR Z IN CUR_ADV_SAL
      LOOP
         BEGIN
            SELECT   SCHEDULE_CD
              INTO   V_SCHEDULE_CD
              FROM   PAY_LOAN_SETUP
             WHERE   LOAN_TYPE_CD = Z.LOAN_TYPE_CD;
         EXCEPTION
            WHEN OTHERS
            THEN
               P_ERROR := '"Shedule Type" is not found';
         END;

         IF V_SCHEDULE_CD = '02'
         THEN
            IF NVL (Z.PRIN_INSTALLMENT, 0) > 0
            THEN
               IF Z.LOAN_TYPE_CD = '01'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'ADS';
               ELSIF Z.LOAN_TYPE_CD = '02'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'SWL';
               END IF;
            END IF;

            IF NVL (Z.PRIN_INSTALLMENT, 0) > 0
            THEN
               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            PAY_LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD,
                           P_SALARY_DT,
                           0,
                           Z.PRIN_INSTALLMENT,
                           Z.LOAN_NO,
                           P_IUSR,
                           SYSDATE);
            END IF;

            IF NVL (Z.INT_INSTALLMENT, 0) > 0
            THEN
               IF Z.LOAN_TYPE_CD = '01'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'ADSI';
               ELSIF Z.LOAN_TYPE_CD = '02'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'SWLI';
               END IF;
            END IF;


            IF NVL (Z.INT_INSTALLMENT, 0) > 0
            THEN
               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            PAY_LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD,
                           P_SALARY_DT,
                           0,
                           Z.INT_INSTALLMENT,
                           Z.LOAN_NO,
                           P_IUSR,
                           SYSDATE);
            END IF;
         ELSIF V_SCHEDULE_CD = '04'
         THEN
            PRO_INTEREST_AMOUNT (P_LOAN_TYPE      => Z.LOAN_TYPE_CD,
                                 P_EMP_GID        => P_EMP_GID,
                                 P_INTEREST_AMT   => V_INTERST_AMT,
                                 P_ERROR          => V_ERROR);

            IF V_ERROR IS NULL
            THEN
               IF Z.LOAN_TYPE_CD = '01'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD_PRIN
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'ADS';
               ELSIF Z.LOAN_TYPE_CD = '02'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD_PRIN
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'SWL';
               END IF;

               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            PAY_LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD_PRIN,
                           P_SALARY_DT,
                           0,
                           Z.PRIN_INSTALLMENT,
                           Z.LOAN_NO,
                           P_IUSR,
                           SYSDATE);

               IF V_INTERST_AMT > 0
               THEN
                  IF Z.LOAN_TYPE_CD = '01'
                  THEN
                     SELECT   H.HEAD_CD
                       INTO   V_HEAD_CD_INT
                       FROM   SAL_HEAD_SETUP H
                      WHERE   H.SHORT_NM = 'ADSI';
                  ELSIF Z.LOAN_TYPE_CD = '02'
                  THEN
                     SELECT   H.HEAD_CD
                       INTO   V_HEAD_CD_INT
                       FROM   SAL_HEAD_SETUP H
                      WHERE   H.SHORT_NM = 'SWLI';
                  END IF;
               END IF;


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            PAY_LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD_INT,
                           P_SALARY_DT,
                           0,
                           V_INTERST_AMT,
                           Z.LOAN_NO,
                           P_IUSR,
                           SYSDATE);
            END IF;
         ELSE
            P_ERROR := V_ERROR;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'pro_adv_sal_ded: ' || SQLERRM;
   END PRO_ADV_SAL_DED;


   PROCEDURE PRC_VOUCHER (
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_VOUCHER_SOURCE   IN     VARCHAR2,
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_PAYMENT_TYPE     IN     SAL_SALARY_MST.PAYMENT_TYPE%TYPE,
      P_OFFICE_CD        IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_OFF   IN     VARCHAR2,
      P_DIVDEPT_CD       IN     SAL_SALARY_MST.DIVDEPT_CD%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_APPRV_DATE       IN     DATE,
      P_OBJECT_CD        IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      RECPREM           PKG_GL_VOUCHER.T_TRANS_TAB;
      V_OBJECT_CD       GEN_OBJECT_INFO.OBJECT_CD%TYPE;
      V_VOUCHER_CD      ACC_VOUCHER_TYPE.VOUCH_CD%TYPE;
      V_INTER_OFF_ST    CHAR (1);
      V_OFFICE_CD       HRM_OFFICE.OFFICE_CD%TYPE;
      V_TRANS_ID        ACC_GL_TRANS_MST.TRANS_ID%TYPE;
      V_TRANS_DATE      DATE;
      V_COST_CENTER     HRM_OFFICE.OFFICE_CD%TYPE;
      V_NARRATION       VARCHAR2 (200);
      V_USER            VARCHAR2 (20);
      V_VOUCHER_NO      VARCHAR2 (15);
      V_NET_PAYABLE     SAL_SALARY_MST.NET_PAYABLE_AMT%TYPE;

      V_POST_AMOUNT     NUMBER (12, 2) := 0;
      V_ERROR           VARCHAR2 (3000);
      V_TRANS_ITEM_CD   ACC_GL_TRANS_ITEM_INFO.TRANS_ITEM_CD%TYPE;
      V_INDX            NUMBER (5) := 1;
      V_INS_TP_CD       NUMBER (1);
      V_PAYMENT_TYPE    SAL_SALARY_MST.PAYMENT_TYPE%TYPE;

      CURSOR CUR_SALDETL
      IS
           SELECT   M.SALARY_DT,
                    S.GLAC_SL_NO,
                    MIN (H.TRANS_ITEM_CD) TRANS_ITEM_CD,
                    M.PAYMENT_TYPE,
                    NVL (SUM (D.EARNING_AMT), 0) EARNING_AMT,
                    NVL (SUM (D.DEDUCTION_AMT), 0) DEDUCTION_AMT,
                    NVL (SUM (D.EARNING_AMT), 0)
                    - NVL (SUM (D.DEDUCTION_AMT), 0)
                       NET_PAYABLE_AMT
             FROM   SAL_SALARY_MST M,
                    SAL_SALARY_DETL D,
                    SAL_HEAD H,
                    (SELECT   D.TRANS_ITEM_CD, D.GLAC_SL_NO
                       FROM   ACC_GL_TR_SETUP_DTL D, ACC_GL_TR_SETUP_MST M
                      WHERE       M.SETUP_ID = D.SETUP_ID
                              AND M.OBJECT_CD = '05596'
                              AND M.VOUCH_CD = '05') S
            WHERE   M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                    AND M.SAL_PROCESS_NO =
                          NVL (P_SAL_PROCESS_NO, M.SAL_PROCESS_NO)
                    AND M.PAYMENT_TYPE = NVL (P_PAYMENT_TYPE, M.PAYMENT_TYPE)
                    AND D.HEAD_CD = H.HEAD_CD
                    AND H.TRANS_ITEM_CD = S.TRANS_ITEM_CD
                    AND M.EMP_GID = NVL (P_EMP_GID, M.EMP_GID)
                    AND M.SAL_DT_FROM = P_SAL_DT_FROM
                    AND M.SAL_DT_TO = P_SAL_DT_TO
                    AND NVL (M.APPRV_STATUS, 'N') = 'Y'
                    AND M.PAYABLE_VR IS NULL
                    AND M.APPRV_DATE = P_APPRV_DATE
                    AND M.APPRV_USR = P_IUSR
                    AND M.DIVDEPT_CD = NVL (P_DIVDEPT_CD, M.DIVDEPT_CD)
                    AND ( (NVL (P_DESCENDANT_OFF, 'N') = 'N'
                           AND NVL (M.PAYBLE_OFFICE, M.OFFICE_CD) =
                                 NVL (P_OFFICE_CD,
                                      NVL (M.PAYBLE_OFFICE, M.OFFICE_CD)))
                         OR (NVL (P_DESCENDANT_OFF, 'N') = 'Y'
                             AND NVL (M.PAYBLE_OFFICE, M.OFFICE_CD) IN
                                      (    SELECT   OFFICE_CD
                                             FROM   HRM_OFFICE_SETUP
                                       START WITH   OFFICE_CD = P_OFFICE_CD
                                       CONNECT BY   PRIOR OFFICE_CD =
                                                       CONTROL_OFFICE_CD)))
         GROUP BY   M.PAYMENT_TYPE, M.SALARY_DT, S.GLAC_SL_NO;
   BEGIN
      V_OBJECT_CD := P_OBJECT_CD;

      V_VOUCHER_CD := '05';
      V_INTER_OFF_ST := '0';
      V_OFFICE_CD := FUN_FIND_REGIONAL_OFF (P_OFFICE_CD);
      V_COST_CENTER := P_OFFICE_CD;


      FOR I IN CUR_SALDETL
      LOOP
         V_NET_PAYABLE := NVL (V_NET_PAYABLE, 0) + NVL (I.NET_PAYABLE_AMT, 0);
         V_TRANS_DATE := TRUNC (I.SALARY_DT);


         IF V_PAYMENT_TYPE = 'B'
         THEN
            V_NARRATION := 'Bonus Payable at ' || I.SALARY_DT;
         ELSE
            V_NARRATION := 'Salary Payable at ' || I.SALARY_DT;
         END IF;



         V_TRANS_ITEM_CD := I.TRANS_ITEM_CD;

         IF V_TRANS_ITEM_CD IS NOT NULL
         THEN
            IF NVL (I.EARNING_AMT, 0) > 0
            THEN
               V_POST_AMOUNT := I.EARNING_AMT;
            ELSIF NVL (I.DEDUCTION_AMT, 0) > 0
            THEN
               V_POST_AMOUNT := I.DEDUCTION_AMT;
            END IF;

            IF NVL (V_POST_AMOUNT, 0) > 0
            THEN
               RECPREM (V_INDX).TRANS_ITEM_CD := V_TRANS_ITEM_CD;
               RECPREM (V_INDX).POST_AMOUNT := V_POST_AMOUNT;
               RECPREM (V_INDX).CHQ_TP := NULL;
               RECPREM (V_INDX).CHQ_NO := NULL;
               RECPREM (V_INDX).CHQ_DT := NULL;
               V_INDX := V_INDX + 1;
            END IF;
         END IF;

         IF P_PAYMENT_TYPE IS NOT NULL
         THEN
            V_PAYMENT_TYPE := P_PAYMENT_TYPE;
         ELSE
            V_PAYMENT_TYPE := I.PAYMENT_TYPE;
         END IF;
      END LOOP;

      IF NVL (V_NET_PAYABLE, 0) > 0
      THEN
         IF V_PAYMENT_TYPE = 'B'
         THEN
            V_TRANS_ITEM_CD := 213;
         ELSE
            V_TRANS_ITEM_CD := 94;
         END IF;

         RECPREM (V_INDX).TRANS_ITEM_CD := V_TRANS_ITEM_CD;
         RECPREM (V_INDX).POST_AMOUNT := V_NET_PAYABLE;
         RECPREM (V_INDX).CHQ_TP := NULL;
         RECPREM (V_INDX).CHQ_NO := NULL;
         RECPREM (V_INDX).CHQ_DT := NULL;
         PKG_GL_VOUCHER.PRO_VOUCHER_POSTING (
            P_TABLE          => RECPREM,
            P_OBJECT_CD      => V_OBJECT_CD,
            P_VOUCH_CD       => V_VOUCHER_CD,
            P_INTER_OFF_ST   => V_INTER_OFF_ST,
            P_OFFICE_CD      => V_OFFICE_CD,
            P_TRANS_ID       => V_TRANS_ID,
            P_TRANS_DATE     => V_TRANS_DATE,
            P_COST_CENTER    => V_COST_CENTER,
            P_NARRATION      => V_NARRATION,
            P_USER           => P_IUSR,
            P_INS_TP_CD      => V_INS_TP_CD,
            P_VOUCHER_NO     => V_VOUCHER_NO,
            P_ERROR          => V_ERROR
         );


         IF V_ERROR IS NULL
         THEN
            UPDATE   SAL_SALARY_MST M
               SET   M.PAYABLE_VR = V_VOUCHER_NO
             WHERE   M.SAL_PROCESS_NO =
                        NVL (P_SAL_PROCESS_NO, M.SAL_PROCESS_NO)
                     AND M.EMP_GID = NVL (P_EMP_GID, M.EMP_GID)
                     AND M.SAL_DT_FROM = P_SAL_DT_FROM
                     AND M.SAL_DT_TO = P_SAL_DT_TO
                     AND M.PAYMENT_TYPE =
                           NVL (V_PAYMENT_TYPE, M.PAYMENT_TYPE)
                     AND NVL (M.APPRV_STATUS, 'N') = 'Y'
                     AND M.PAYABLE_VR IS NULL
                     AND M.APPRV_DATE = P_APPRV_DATE
                     AND M.APPRV_USR = P_IUSR
                     AND M.DIVDEPT_CD = NVL (P_DIVDEPT_CD, M.DIVDEPT_CD)
                     AND ( (NVL (P_DESCENDANT_OFF, 'N') = 'N'
                            AND NVL (M.PAYBLE_OFFICE, M.OFFICE_CD) =
                                  NVL (P_OFFICE_CD,
                                       NVL (M.PAYBLE_OFFICE, M.OFFICE_CD)))
                          OR (NVL (P_DESCENDANT_OFF, 'N') = 'Y'
                              AND NVL (M.PAYBLE_OFFICE, M.OFFICE_CD) IN
                                       (    SELECT   OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP
                                        START WITH   OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR OFFICE_CD =
                                                        CONTROL_OFFICE_CD)));
         ELSE
            P_ERROR := V_ERROR;
         END IF;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'prc_voucher ' || SQLERRM;
   END;



   PROCEDURE PRO_INTEREST_AMOUNT (
      P_LOAN_TYPE      IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID        IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_INTEREST_AMT      OUT NUMBER,
      P_ERROR             OUT VARCHAR2
   )
   IS
      V_INTEREST_AMOUNT   NUMBER (5) := 0;
   BEGIN
      IF P_LOAN_TYPE = '00'
      THEN
         SELECT   ROUND(NVL (OUTSTANDING_PRIN_AMT, LOAN_AMT)
                        * (NVL (INTEREST_RATE / 12, 0) / 100))
           INTO   V_INTEREST_AMOUNT
           FROM   CPF_LOAN_APPRVL
          WHERE   EMP_GID = P_EMP_GID AND LOAN_STATUS = 'P';
      ELSE
         SELECT   ROUND(NVL (OUTSTANDING_PRIN_AMT, LOAN_AMT)
                        * (NVL (INTEREST_RATE / 12, 0) / 100))
           INTO   V_INTEREST_AMOUNT
           FROM   PAY_LOAN_APPL_APPRVL
          WHERE       EMP_GID = P_EMP_GID
                  AND LOAN_TYPE_CD = P_LOAN_TYPE
                  AND LOAN_STATUS = 'P';
      END IF;

      P_INTEREST_AMT := V_INTEREST_AMOUNT;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         P_ERROR := '"Interest Amount" not found ' || SQLERRM;
      WHEN OTHERS
      THEN
         P_ERROR := '"Interest Amount" have some error ' || SQLERRM;
   END PRO_INTEREST_AMOUNT;

   PROCEDURE PRO_ARREAR_PF (P_EMP_GID       IN     HRM_EMPLOYEE.EMP_GID%TYPE,
                            P_OFFICE_CD     IN     HRM_OFFICE.OFFICE_CD%TYPE,
                            P_DESCENDANT    IN     VARCHAR2,
                            P_SAL_DT_FROM   IN     DATE,
                            P_SAL_DT_TO     IN     DATE,
                            P_SALARY_DT     IN     DATE,
                            P_IUSR          IN     VARCHAR2,
                            P_ERROR            OUT VARCHAR2)
   IS
      V_CURR_BASIC    HRM_EMPLOYEE.CURR_BASIC%TYPE := 0;
      V_AEARN_AMT     NUMBER (10, 2) := 0;

      V_ADED_AMT      NUMBER (10, 2) := 0;
      V_PF            NUMBER (10, 2) := 0;

      V_PAYABLE_AMT   NUMBER (10, 2) := 0;


      CURSOR CUR_ARREAR_LIST
      IS
         SELECT   D.ARREAR_NO,
                  S.EMP_GID,
                  D.EARNING_AMT,
                  S.SAL_PROCESS_NO,
                  ROUND (NVL ( (D.EARNING_AMT * 5) / 100, 0)) DEDUCT
           FROM   SAL_SALARY_DETL D, SAL_SALARY_MST S, HRM_EMPLOYEE E
          WHERE       S.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                  AND D.HEAD_CD = '011'
                  AND S.EMP_GID = E.EMP_GID
                  AND E.SERVICE_CD = '02'
                  AND S.SAL_DT_FROM = NVL (P_SAL_DT_FROM, S.SAL_DT_FROM)
                  AND S.SAL_DT_TO = NVL (P_SAL_DT_TO, S.SAL_DT_TO)
                  AND EXISTS
                        (SELECT   1
                           FROM   SAL_ARREAR_MST
                          WHERE       ARREAR_NO = D.ARREAR_NO
                                  AND STATUS = 0
                                  AND EMP_GID = NVL (P_EMP_GID, S.EMP_GID))
                  AND ( (NVL (P_DESCENDANT, 'N') = 'N'
                         AND E.OFFICE_CD = NVL (P_OFFICE_CD, E.OFFICE_CD))
                       OR (NVL (P_DESCENDANT, 'N') = 'Y'
                           AND E.OFFICE_CD IN
                                    (    SELECT   O.OFFICE_CD
                                           FROM   HRM_OFFICE_SETUP O
                                     START WITH   O.OFFICE_CD = P_OFFICE_CD
                                     CONNECT BY   PRIOR O.OFFICE_CD =
                                                     O.CONTROL_OFFICE_CD)));
   BEGIN
      FOR i IN CUR_ARREAR_LIST
      LOOP
         UPDATE   SAL_SALARY_DETL
            SET   DEDUCTION_AMT =
                     DEDUCTION_AMT
                     + ROUND (NVL ( (I.EARNING_AMT * 5) / 100, 0))
          WHERE   HEAD_CD = '005' AND SAL_PROCESS_NO = I.SAL_PROCESS_NO;

         /* AND EXISTS
               (SELECT   1
                  FROM   SAL_SALARY_DETL D, SAL_SALARY_MST S
                 WHERE       S.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                         AND D.HEAD_CD = '005'
                         AND S.EMP_GID = I.EMP_GID); */



         UPDATE   SAL_SALARY_MST
            SET   NET_PAYABLE_AMT = NET_PAYABLE_AMT - I.DEDUCT
          WHERE       EMP_GID = I.EMP_GID
                  AND SAL_PROCESS_NO = I.SAL_PROCESS_NO
                  AND SAL_DT_FROM = NVL (P_SAL_DT_FROM, SAL_DT_FROM)
                  AND SAL_DT_TO = NVL (P_SAL_DT_TO, SAL_DT_TO);

         UPDATE   SAL_ARREAR_MST
            SET   STATUS = 0
          WHERE   ARREAR_NO = I.ARREAR_NO AND EMP_GID = I.EMP_GID;

         COMMIT;
      END LOOP;
   /* BEGIN
       UPDATE   SAL_ARREAR_MST
          SET   STATUS = 2
        WHERE   ARREAR_NO IN
                      (SELECT   D.ARREAR_NO
                         FROM   SAL_SALARY_DETL D,
                                SAL_SALARY_MST S,
                                HRM_EMPLOYEE E
                        WHERE       S.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                AND D.HEAD_CD = '011'
                                AND S.EMP_GID = E.EMP_GID
                                AND E.SERVICE_CD <> '02'
                                AND S.SAL_DT_FROM =
                                      NVL (P_SAL_DT_FROM, S.SAL_DT_FROM)
                                AND S.SAL_DT_TO =
                                      NVL (P_SAL_DT_TO, S.SAL_DT_TO))
                AND STATUS = 0;

       COMMIT;
    END;   */
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_Arrear: ' || SQLERRM;
   END PRO_ARREAR_PF;
END PKG_SALARY_PROCESS;
/


--
-- PKG_SALARY_PROCESS_OLD  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_salary_process_old
AS
   PROCEDURE PRO_SALARY_CALCULATION (
      P_OFFICE_CD      IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT     IN     VARCHAR2,
      P_EMP_GID        IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_EMP_TYPE       IN     HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE DEFAULT '01'
                                                                          ,
      P_PAYMENT_TYPE   IN     VARCHAR2 DEFAULT 'S' ,
      P_DIVDEPT_CD     IN     HRM_EMPLOYEE.DIVDEPT_CD%TYPE,
      P_HEAD_CD        IN     SAL_HEAD_SETUP.HEAD_CD%TYPE,
      P_SAL_DT_FROM    IN     DATE,
      P_SAL_DT_TO      IN     DATE,
      P_SALARY_DT      IN     DATE,
      P_OBJECT_CD      IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR           IN     VARCHAR2,
      P_PROCESS_CNT       OUT NUMBER,
      P_ERROR             OUT VARCHAR2
   )
   IS
      V_SAL_PROCESS_NO    SAL_SALARY_MST.SAL_PROCESS_NO%TYPE;
      V_ERROR             VARCHAR2 (2000);
      V_ERROR_ARREAR      VARCHAR2 (2000);
      V_ERROR_MISC        VARCHAR2 (2000);
      V_ERROR_EMP         VARCHAR2 (2000);
      V_ERROR_PFL         VARCHAR2 (2000);
      V_ERROR_HBL         VARCHAR2 (2000);
      V_ERROR_ADV         VARCHAR2 (2000);
      V_ERROR_ACC         VARCHAR2 (2000);
      V_NET_PAYABLE_AMT   SAL_SALARY_MST.NET_PAYABLE_AMT%TYPE := 0;
      V_PROCESS_CNT       NUMBER (10) := 0;
      V_DEV_ACHIVE_AMT    NUMBER (12, 2) := 0;
      V_COUNT_PREM_NO     NUMBER (12, 2) := 0;
      V_COLL_PREM_NO      NUMBER (12, 2) := 0;
      V_PREM_AMT          NUMBER (12, 2) := 0;
      V_COUNT_PREM_AMT    NUMBER (12, 2) := 0;
      V_DEV_TARGET_AMT    NUMBER (12, 2) := 0;
      V_SAL_TARGET_AMT    NUMBER (12, 2) := 0;
      V_ACHIVE_DT_TO      DATE;
      V_NO_OF_INSTL_YR    NUMBER (2) := 0;
      V_FY_CLOSE_DT       DATE;
      v_emp_id            VARCHAR2 (20);



      CURSOR CUR_EMP_LIST
      IS
           SELECT   E.EMP_GID,
                    E.EMP_TYPE_CD,
                    E.DESIG_CD,
                    E.EMPLOYMENT_TP_CD,
                    E.RELIGION_CD,
                    E.MUNILOC_CD,
                    E.SERVICE_CD,
                    E.EMPLOYMENT_ST_CD,
                    E.OFFICE_CD,
                    E.PREVIOUS_BASIC,
                    E.CURR_BASIC,
                    E.BANK_ACCOUNT_NO,
                    E.BANK_BR_CD,
                    E.PAYSC_ID,
                    E.GROSS_EARNING,
                    E.DIVDEPT_CD,
                    E.SAL_TRANSFER_TP,
                    e.emp_id
             FROM   HRM_EMPLOYEE E
            WHERE       E.ACTIVITY_CD = '01'
                    AND NVL (E.SAL_PAY_STAT, '00') = '01'
                    AND E.EMP_GID = NVL (P_EMP_GID, E.EMP_GID)
                    AND E.EMPLOYMENT_TP_CD =
                          NVL (P_EMP_TYPE, E.EMPLOYMENT_TP_CD)
                    AND E.DIVDEPT_CD = NVL (P_DIVDEPT_CD, E.DIVDEPT_CD)
                    AND (NVL (E.CURR_BASIC, 0) > 0
                         OR NVL (E.GROSS_EARNING, 0) > 0)
                    AND ( (NVL (P_DESCENDANT, 'N') = 'N'
                           AND E.OFFICE_CD = NVL (P_OFFICE_CD, E.OFFICE_CD))
                         OR (NVL (P_DESCENDANT, 'N') = 'Y'
                             AND E.OFFICE_CD IN
                                      (    SELECT   O.OFFICE_CD
                                             FROM   HRM_OFFICE_SETUP O
                                       START WITH   O.OFFICE_CD = P_OFFICE_CD
                                       CONNECT BY   PRIOR O.OFFICE_CD =
                                                       O.CONTROL_OFFICE_CD)))
                    AND NOT EXISTS
                          (SELECT   1
                             FROM   SAL_SALARY_MST M
                            WHERE       M.EMP_GID = E.EMP_GID
                                    AND M.SAL_DT_FROM = P_SAL_DT_FROM
                                    AND M.PAYMENT_TYPE = 'S'
                                    AND M.SAL_DT_TO = P_SAL_DT_TO)
         ORDER BY   E.EMP_GID;


      CURSOR CUR_DEV_ACH (
         V_EMP_GID                      HRM_EMPLOYEE.EMP_GID%TYPE,
         P_ACHIVE_DT_TO                 DATE
      )
      IS
         SELECT   R.PGID,
                  R.COLL_AMOUNT,
                  R.TOT_PREMIUM_AMT,
                  S.PAY_MODE_CD,
                  R.DUE_DT_FROM,
                  R.DUE_DT_TO,
                  R.INSTALLMENT_NO_FROM,
                  R.INSTALLMENT_NO_TO,
                  DECODE (R.COLLECTION_TYPE,
                          'OL', TRUNC (R.RECEIVE_DATE),
                          R.COLL_SLIP_REC_DT)
                     RECEIVE_DATE
           FROM   INS_P_SUMMERY S, ACC_RECEIVABLES R
          WHERE       S.PGID = R.PGID
                  AND R.REC_STATUS = '1'
                  AND (S.DM_GID = V_EMP_GID OR S.DO_GID = V_EMP_GID)
                  AND (R.INSTALLMENT_NO_FROM <= DECODE (S.PAY_MODE_CD,
                                                        '01',
                                                        1,
                                                        '02',
                                                        2,
                                                        '03',
                                                        4,
                                                        '04',
                                                        12))
                  AND R.DUE_DT_FROM <= P_ACHIVE_DT_TO
                  AND DECODE (R.COLLECTION_TYPE,
                              'OL', R.RECEIVE_DATE,
                              R.COLL_SLIP_REC_DT) BETWEEN TO_DATE (
                                                             '01'
                                                             || TO_CHAR (
                                                                   P_SAL_DT_FROM,
                                                                   'rrrrmm'
                                                                ),
                                                             'ddrrrrmm'
                                                          )
                                                      AND  P_ACHIVE_DT_TO;
   BEGIN
      FOR K IN CUR_EMP_LIST
      LOOP
         V_DEV_ACHIVE_AMT := 0;
         V_COUNT_PREM_NO := 0;
         V_COLL_PREM_NO := 0;
         V_PREM_AMT := 0;
         V_COUNT_PREM_AMT := 0;
         V_DEV_TARGET_AMT := 0;
         V_SAL_TARGET_AMT := 0;
         V_NO_OF_INSTL_YR := 0;

         v_emp_id := k.emp_id;


         IF NVL (P_EMP_TYPE, '01') = '02'
         THEN
            BEGIN
               SELECT   F.FY_CLOSE_DT
                 INTO   V_FY_CLOSE_DT
                 FROM   ACC_FISCAL_YEAR F
                WHERE   P_SAL_DT_FROM BETWEEN FY_ST_DT AND FY_ED_DT;
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_FY_CLOSE_DT := TRUNC (SYSDATE);
            END;

            V_ACHIVE_DT_TO := NVL (V_FY_CLOSE_DT, TRUNC (SYSDATE));

            FOR H IN CUR_DEV_ACH (K.EMP_GID, V_ACHIVE_DT_TO)
            LOOP
               IF H.INSTALLMENT_NO_FROM = H.INSTALLMENT_NO_TO
                  OR (H.INSTALLMENT_NO_TO <= V_NO_OF_INSTL_YR)
               THEN
                  V_DEV_ACHIVE_AMT := V_DEV_ACHIVE_AMT + H.COLL_AMOUNT;
               ELSE
                  IF H.PAY_MODE_CD = '01'
                  THEN
                     V_NO_OF_INSTL_YR := 1;
                  ELSIF H.PAY_MODE_CD = '02'
                  THEN
                     V_NO_OF_INSTL_YR := 2;
                  ELSIF H.PAY_MODE_CD = '03'
                  THEN
                     V_NO_OF_INSTL_YR := 4;
                  ELSIF H.PAY_MODE_CD = '04'
                  THEN
                     V_NO_OF_INSTL_YR := 12;
                  END IF;

                  V_COUNT_PREM_NO :=
                     (V_NO_OF_INSTL_YR - H.INSTALLMENT_NO_FROM) + 1;
                  V_COLL_PREM_NO :=
                     (H.INSTALLMENT_NO_TO - H.INSTALLMENT_NO_FROM) + 1;
                  V_PREM_AMT := H.TOT_PREMIUM_AMT / V_COLL_PREM_NO;
                  V_COUNT_PREM_AMT := V_PREM_AMT * V_COUNT_PREM_NO;

                  IF V_COUNT_PREM_AMT <= H.COLL_AMOUNT
                  THEN
                     V_DEV_ACHIVE_AMT := V_DEV_ACHIVE_AMT + V_COUNT_PREM_AMT;
                  ELSE
                     V_DEV_ACHIVE_AMT := V_DEV_ACHIVE_AMT + H.COLL_AMOUNT;
                  END IF;
               END IF;
            END LOOP;


            BEGIN
               SELECT   T.TOTAL_TARGET
                 INTO   V_DEV_TARGET_AMT
                 FROM   HRM_EMP_TARGET T
                WHERE   T.DESIG_CD = K.DESIG_CD
                        AND P_SAL_DT_FROM BETWEEN T.START_DT AND T.END_DT;
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_DEV_TARGET_AMT := 0;
            END;

            V_SAL_TARGET_AMT :=
               (V_DEV_TARGET_AMT / 12)
               * TO_NUMBER (TO_CHAR (P_SAL_DT_FROM, 'MM'));


            IF V_DEV_ACHIVE_AMT < V_SAL_TARGET_AMT
            THEN
               GOTO DEV_SAL_OMIT;
            END IF;
         END IF;



         SELECT   TO_NUMBER(TO_CHAR (SYSDATE, 'rrrrmm')
                            || LPAD (
                                  NVL (
                                     MAX(TO_NUMBER (
                                            SUBSTR (M.SAL_PROCESS_NO, 7)
                                         )),
                                     0
                                  )
                                  + 1,
                                  6,
                                  0
                               ))
           INTO   V_SAL_PROCESS_NO
           FROM   SAL_SALARY_MST M
          WHERE   SUBSTR (M.SAL_PROCESS_NO, 1, 6) =
                     TO_NUMBER (TO_CHAR (SYSDATE, 'rrrrmm'));


         IF P_PAYMENT_TYPE IN ('S', 'T')
         THEN
            INSERT INTO SAL_SALARY_MST (SAL_PROCESS_NO,
                                        EMP_GID,
                                        SALARY_DT,
                                        PROCESS_DT,
                                        SAL_DT_FROM,
                                        SAL_DT_TO,
                                        OLD_BASIC_AMT,
                                        CUR_BASIC_AMT,
                                        EMP_TYPE_CD,
                                        DESIG_CD,
                                        EMPLOYMENT_TP_CD,
                                        RELIGION_CD,
                                        MUNILOC_CD,
                                        SERVICE_CD,
                                        EMPLOYMENT_ST_CD,
                                        OFFICE_CD,
                                        NET_PAYABLE_AMT,
                                        PAYMENT_TYPE,
                                        ACCOUNT_NO,
                                        BANK_CD,
                                        BR_CD,
                                        I_USR,
                                        I_DT,
                                        DIVDEPT_CD,
                                        SAL_TRANSFER_TP)
              VALUES   (V_SAL_PROCESS_NO,
                        K.EMP_GID,
                        P_SALARY_DT,
                        TRUNC (SYSDATE),
                        P_SAL_DT_FROM,
                        P_SAL_DT_TO,
                        K.PREVIOUS_BASIC,
                        K.CURR_BASIC,
                        K.EMP_TYPE_CD,
                        K.DESIG_CD,
                        K.EMPLOYMENT_TP_CD,
                        K.RELIGION_CD,
                        K.MUNILOC_CD,
                        K.SERVICE_CD,
                        K.EMPLOYMENT_ST_CD,
                        K.OFFICE_CD,
                        0,
                        'S',
                        K.BANK_ACCOUNT_NO,
                        NULL,
                        K.BANK_BR_CD,
                        P_IUSR,
                        SYSDATE,
                        K.DIVDEPT_CD,
                        K.SAL_TRANSFER_TP);



            PRO_EARNING_DEDUCTION (V_SAL_PROCESS_NO,
                                   K.EMP_GID,
                                   K.PAYSC_ID,
                                   P_SAL_DT_FROM,
                                   P_SAL_DT_TO,
                                   P_SALARY_DT,
                                   P_IUSR,
                                   V_ERROR);

            IF V_ERROR IS NOT NULL
            THEN
               P_ERROR := 'Error from called procedure# ' || V_ERROR;
               ROLLBACK;
               EXIT;
            END IF;


            PRO_ARREAR (V_SAL_PROCESS_NO,
                        K.EMP_GID,
                        P_SAL_DT_FROM,
                        P_SAL_DT_TO,
                        P_SALARY_DT,
                        P_IUSR,
                        V_ERROR_ARREAR);

            IF V_ERROR_ARREAR IS NOT NULL
            THEN
               P_ERROR := 'Error from called procedure# ' || V_ERROR_ARREAR;
               ROLLBACK;
               EXIT;
            END IF;


            PRO_MISC_EAR_DED (V_SAL_PROCESS_NO,
                              K.EMP_GID,
                              P_OFFICE_CD,
                              P_DESCENDANT,
                              P_EMP_TYPE,
                              P_SAL_DT_FROM,
                              P_SAL_DT_TO,
                              P_SALARY_DT,
                              '1',
                              P_OBJECT_CD,
                              P_IUSR,
                              V_ERROR_MISC);

            IF V_ERROR_MISC IS NOT NULL
            THEN
               P_ERROR := 'Error from called procedure# ' || V_ERROR_MISC;
               ROLLBACK;
               EXIT;
            END IF;



            PRO_PFL_DED (P_SAL_PROCESS_NO   => V_SAL_PROCESS_NO,
                         P_EMP_GID          => K.EMP_GID,
                         P_SAL_DT_FROM      => P_SAL_DT_FROM,
                         P_SAL_DT_TO        => P_SAL_DT_TO,
                         P_SALARY_DT        => P_SALARY_DT,
                         P_IUSR             => P_IUSR,
                         P_ERROR            => V_ERROR_PFL);

            IF V_ERROR_PFL IS NOT NULL
            THEN
               P_ERROR :=
                     'Error from called procedure# '
                  || V_ERROR_PFL
                  || ' for employee id: '
                  || v_emp_id;
               ROLLBACK;
               EXIT;
            END IF;



            PRO_ADV_SAL_DED (P_SAL_PROCESS_NO   => V_SAL_PROCESS_NO,
                             P_EMP_GID          => K.EMP_GID,
                             P_SAL_DT_FROM      => P_SAL_DT_FROM,
                             P_SAL_DT_TO        => P_SAL_DT_TO,
                             P_SALARY_DT        => P_SALARY_DT,
                             P_IUSR             => P_IUSR,
                             P_ERROR            => V_ERROR_ADV);

            IF V_ERROR_ADV IS NOT NULL
            THEN
               P_ERROR :=
                     'Error from called procedure# '
                  || V_ERROR_ADV
                  || ' for employee id: '
                  || v_emp_id;
               ROLLBACK;
               EXIT;
            END IF;



            PRO_EMP_EAR_DED (P_SAL_PROCESS_NO   => V_SAL_PROCESS_NO,
                             P_EMP_GID          => K.EMP_GID,
                             P_SAL_DT_FROM      => P_SAL_DT_FROM,
                             P_SAL_DT_TO        => P_SAL_DT_TO,
                             P_SALARY_DT        => P_SALARY_DT,
                             P_IUSR             => P_IUSR,
                             P_ERROR            => V_ERROR_EMP);

            IF V_ERROR_EMP IS NOT NULL
            THEN
               P_ERROR :=
                     'Error from called procedure# '
                  || V_ERROR_EMP
                  || ' for employee id: '
                  || v_emp_id;
               ROLLBACK;
               EXIT;
            END IF;


            SELECT   NVL (
                        SUM (
                           NVL (D.EARNING_AMT, 0) - NVL (D.DEDUCTION_AMT, 0)
                        ),
                        0
                     )
              INTO   V_NET_PAYABLE_AMT
              FROM   SAL_SALARY_DETL D
             WHERE   D.SAL_PROCESS_NO = V_SAL_PROCESS_NO;


            UPDATE   SAL_SALARY_MST
               SET   NET_PAYABLE_AMT = ROUND (V_NET_PAYABLE_AMT)
             WHERE   SAL_PROCESS_NO = V_SAL_PROCESS_NO;



            IF V_ERROR_ACC IS NOT NULL
            THEN
               P_ERROR := 'Error from called procedure# ' || V_ERROR_EMP;
               ROLLBACK;
               EXIT;
            END IF;
         END IF;

         IF P_ERROR IS NULL
         THEN
            COMMIT;
            V_PROCESS_CNT := V_PROCESS_CNT + 1;
         ELSE
            ROLLBACK;
            EXIT;
         END IF;

        <<DEV_SAL_OMIT>>
         NULL;
      END LOOP;

      P_PROCESS_CNT := V_PROCESS_CNT;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR :=
               'pro_salary_calculation: '
            || SQLERRM
            || ' for employee id: '
            || v_emp_id;
   END PRO_SALARY_CALCULATION;



   PROCEDURE PRO_EARNING_DEDUCTION (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_PAYSC_ID         IN     HRM_EMPLOYEE.PAYSC_ID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_EFFECT_REST          NUMBER (1) := 0;


      V_INCREMENT_FLAG       NUMBER (1) := 0;

      V_PROMOTION_FALG       NUMBER (1) := 0;

      V_NOOF_DAY_SAL         NUMBER (3) := 0;

      V_NOOF_DAY_MONTH       NUMBER (3) := 0;

      V_OLD_BASIC_NOOF_DAY   NUMBER (3) := 0;

      V_NEW_BASIC_NOOF_DAY   NUMBER (3) := 0;

      V_OLD_BASIC_VALID      NUMBER (10, 2) := 0;

      V_NEW_BASIC_VALID      NUMBER (10, 2) := 0;

      V_BASIC_VALID          NUMBER (10, 2) := 0;

      V_BASE_BASIC           NUMBER (10, 2) := 0;

      V_MST_CNT              NUMBER (3) := 0;

      V_EARN_AMT             NUMBER (10, 2) := 0;

      V_DED_AMT              NUMBER (10, 2) := 0;

      V_PAYABLE_AMT          NUMBER (10, 2) := 0;

      V_PAYMENT_PCT          SAL_HEAD_SETUP_DETL.PAYMENT_PCT%TYPE := 0;

      V_FIXED_AMT            SAL_HEAD_SETUP_DETL.FIXED_AMT%TYPE := 0;

      V_CAL_REQ              NUMBER (1) := 1;

      V_CHILD_CNT            NUMBER (2) := 0;
      V_INCHARGE_CNT         NUMBER (2) := 0;
      V_PFL_CNT              NUMBER (2) := 0;
      V_HBL_CNT              NUMBER (2) := 0;
      V_INSTL_AMT            PAY_LOAN_APPL_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_OUTSTANDING_AMT      PAY_LOAN_APPL_APPRVL.OUTSTANDING_AMT%TYPE := 0;
      V_NO_DAYS_ABSENT       HR_UNAUTHORIZED_ABSENT.NO_DAYS_ABSENT%TYPE := 0;
      V_SWL_CNT              NUMBER (2) := 0;
      V_BASIC_ABSENT         NUMBER (12, 2) := 0;

      CURSOR CUR_GEN_EARN_DED
      IS
         SELECT   H.HEAD_CD,
                  L.HEAD_NM,
                  L.SHORT_NM,
                  H.HEAD_TYPE,
                  H.AMOUNT_TYPE,
                  H.BASED_ON,
                  H.BASIC_RANGE_FLAG,
                  H.MIN_MAX_FLAG,
                  D.HEAD_DETL_CD,
                  NVL (H.DEPENDENCY_FLAG, 'N') DEPENDENCY_FLAG,
                  H.DEPENDENCY_CD,
                  D.EMP_TYPE_CD,
                  D.DESIG_CD,
                  D.EMPLOYMENT_TP_CD,
                  D.RELIGION_CD,
                  D.MUNILOC_CD,
                  D.SERVICE_CD,
                  D.EMPLOYMENT_ST_CD,
                  D.BASIC_FROM,
                  D.BASIC_TO,
                  D.PAYMENT_PCT,
                  D.FIXED_AMT,
                  D.MIN_PAYABLE,
                  D.MAX_PAYABLE,
                  D.PAY_PERIOD,
                  H.CAT_CD,
                  E.CURR_BASIC,
                  E.PREVIOUS_BASIC,
                  E.LAST_INCRE_DT,
                  E.LAST_PROM_DT,
                  E.EFFECT_DT_ON_SALARY,
                  E.PFC_DED_STAT,
                  E.GROSS_EARNING,
                  E.JOIN_DT
           FROM   SAL_HEAD_SETUP H,
                  SAL_HEAD_SETUP_DETL D,
                  HRM_EMPLOYEE E,
                  SAL_HEAD L
          WHERE       H.HEAD_CD = D.HEAD_CD
                  AND H.HEAD_CD = L.HEAD_CD
                  AND NVL (L.STATUS, '0') = '1'
                  AND E.EMP_GID = P_EMP_GID
                  AND E.EMP_TYPE_CD = NVL (D.EMP_TYPE_CD, E.EMP_TYPE_CD)
                  AND E.DESIG_CD = NVL (D.DESIG_CD, E.DESIG_CD)
                  AND E.EMPLOYMENT_TP_CD =
                        NVL (D.EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                  AND NVL (E.RELIGION_CD, 'XX') =
                        NVL (D.RELIGION_CD, NVL (E.RELIGION_CD, 'XX'))
                  AND NVL (E.MUNILOC_CD, 'XX') =
                        NVL (D.MUNILOC_CD, NVL (E.MUNILOC_CD, 'XX'))
                  AND E.SERVICE_CD = NVL (D.SERVICE_CD, E.SERVICE_CD)
                  AND E.EMPLOYMENT_ST_CD =
                        NVL (D.EMPLOYMENT_ST_CD, E.EMPLOYMENT_ST_CD)
                  AND NVL (E.CURR_BASIC, 0) BETWEEN NVL (
                                                       D.BASIC_FROM,
                                                       NVL (E.CURR_BASIC, 0)
                                                    )
                                                AND  NVL (
                                                        D.BASIC_TO,
                                                        NVL (E.CURR_BASIC, 0)
                                                     );
   BEGIN
      V_NOOF_DAY_SAL := P_SAL_DT_TO - P_SAL_DT_FROM + 1;
      V_NOOF_DAY_MONTH := TO_NUMBER (TO_CHAR (LAST_DAY (P_SAL_DT_TO), 'dd'));
      V_OLD_BASIC_NOOF_DAY := 0;
      V_NEW_BASIC_NOOF_DAY := 0;
      V_OLD_BASIC_VALID := 0;
      V_NEW_BASIC_VALID := 0;
      V_BASIC_VALID := 0;
      V_BASIC_ABSENT := 0;


      FOR I IN CUR_GEN_EARN_DED
      LOOP
         V_PAYMENT_PCT := 0;
         V_FIXED_AMT := 0;
         V_PAYABLE_AMT := 0;
         V_EARN_AMT := 0;
         V_DED_AMT := 0;
         V_CAL_REQ := 1;
         V_CHILD_CNT := 0;
         V_INCHARGE_CNT := 0;
         V_PFL_CNT := 0;
         V_HBL_CNT := 0;
         V_INSTL_AMT := 0;
         V_OUTSTANDING_AMT := 0;
         V_NO_DAYS_ABSENT := 0;



         IF I.DEPENDENCY_FLAG = 'Y'
         THEN
            IF NVL (I.DEPENDENCY_CD, '000') = '001'
            THEN
               SELECT   COUNT (L.EMP_GID)
                 INTO   V_CHILD_CNT
                 FROM   HRM_EMP_CHILD L
                WHERE   L.EMP_GID = P_EMP_GID AND L.OCCUP_CD = '10';

               IF NVL (V_CHILD_CNT, 0) = 0
               THEN
                  V_CAL_REQ := 0;
               END IF;
            ELSIF NVL (I.DEPENDENCY_CD, '000') = '002'
            THEN
               SELECT   COUNT (M.EMP_GID)
                 INTO   V_INCHARGE_CNT
                 FROM   HRM_EMPLOYEE M
                WHERE   NVL (M.INCHARGE_ST, '0') = '1'
                        AND M.EMP_GID = P_EMP_GID;

               IF NVL (V_INCHARGE_CNT, 0) = 0
               THEN
                  V_CAL_REQ := 0;
               END IF;
            ELSIF NVL (I.DEPENDENCY_CD, '000') = '003'
            THEN
               SELECT   COUNT (P.EMP_GID)
                 INTO   V_PFL_CNT
                 FROM   CPF_LOAN_APPRVL P
                WHERE   NVL (P.DISBURSE_FLAG, 'N') = 'Y'
                        AND P.EMP_GID = P_EMP_GID;

               SELECT   COUNT (H.EMP_GID)
                 INTO   V_HBL_CNT
                 FROM   PAY_LOAN_APPL_APPRVL H
                WHERE   NVL (H.DISBURSE_FLAG, 'N') = 'Y'
                        AND H.EMP_GID = P_EMP_GID;


               SELECT   COUNT (W.EMP_GID)
                 INTO   V_SWL_CNT
                 FROM   PAY_LOAN_APPL_APPRVL W
                WHERE       NVL (W.DISBURSE_FLAG, 'N') = 'Y'
                        AND W.EMP_GID = P_EMP_GID
                        AND NVL (W.DED_FRM_SAL, 'N') = 'Y'
                        AND NVL (W.DED_SUSPEND, 'N') = 'N';

               IF     NVL (V_HBL_CNT, 0) = 0
                  AND NVL (V_PFL_CNT, 0) = 0
                  AND NVL (V_SWL_CNT, 0) = 0
               THEN
                  V_CAL_REQ := 0;
               END IF;
            ELSIF NVL (I.DEPENDENCY_CD, '000') = '004'
            THEN
               BEGIN
                  SELECT   NVL (L.NO_DAYS_ABSENT, 0)
                    INTO   V_NO_DAYS_ABSENT
                    FROM   HR_UNAUTHORIZED_ABSENT L
                   WHERE       L.EMP_GID = P_EMP_GID
                           AND L.SAL_DT_FROM = P_SAL_DT_FROM
                           AND L.SAL_DT_TO = P_SAL_DT_TO;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     V_NO_DAYS_ABSENT := 0;
               END;

               IF NVL (V_NO_DAYS_ABSENT, 0) = 0
               THEN
                  V_CAL_REQ := 0;
               END IF;
            END IF;
         END IF;


         IF I.SHORT_NM = 'PFC' AND NVL (I.PFC_DED_STAT, 0) = 0
         THEN
            V_CAL_REQ := 0;
         END IF;



         IF V_CAL_REQ = 1
         THEN
            IF V_MST_CNT = 0
            THEN
               V_BASIC_VALID := I.CURR_BASIC;


               IF I.JOIN_DT > P_SAL_DT_FROM
               THEN
                  V_OLD_BASIC_NOOF_DAY :=
                     TO_NUMBER (TO_CHAR (I.JOIN_DT, 'dd')) - 1;
                  V_NEW_BASIC_NOOF_DAY :=
                     V_NOOF_DAY_SAL - V_OLD_BASIC_NOOF_DAY;
                  V_BASIC_VALID :=
                     V_NEW_BASIC_NOOF_DAY * (I.CURR_BASIC / V_NOOF_DAY_MONTH);
               END IF;



               IF I.LAST_INCRE_DT BETWEEN P_SAL_DT_FROM AND P_SAL_DT_TO
               THEN
                  V_INCREMENT_FLAG := 1;
               ELSIF I.LAST_PROM_DT BETWEEN P_SAL_DT_FROM AND P_SAL_DT_TO
               THEN
                  V_PROMOTION_FALG := 1;
               END IF;


               IF V_INCREMENT_FLAG = 1 OR V_PROMOTION_FALG = 1
               THEN
                  IF V_INCREMENT_FLAG = 1
                  THEN
                     V_OLD_BASIC_NOOF_DAY :=
                        TO_NUMBER (TO_CHAR (I.LAST_INCRE_DT, 'dd')) - 1;
                     V_NEW_BASIC_NOOF_DAY :=
                        V_NOOF_DAY_SAL - V_OLD_BASIC_NOOF_DAY;
                  ELSIF V_PROMOTION_FALG = 1
                  THEN
                     V_OLD_BASIC_NOOF_DAY :=
                        TO_NUMBER (TO_CHAR (I.LAST_PROM_DT, 'dd')) - 1;
                     V_NEW_BASIC_NOOF_DAY :=
                        V_NOOF_DAY_SAL - V_OLD_BASIC_NOOF_DAY;
                  END IF;


                  V_OLD_BASIC_VALID :=
                     V_OLD_BASIC_NOOF_DAY
                     * (I.PREVIOUS_BASIC / V_NOOF_DAY_MONTH);
                  V_NEW_BASIC_VALID :=
                     V_NEW_BASIC_NOOF_DAY * (I.CURR_BASIC / V_NOOF_DAY_MONTH);
                  V_BASIC_VALID :=
                     NVL (V_OLD_BASIC_VALID, 0) + NVL (V_NEW_BASIC_VALID, 0);
               END IF;

               V_MST_CNT := 1;
            END IF;


            IF I.AMOUNT_TYPE = 'P'
            THEN
               V_PAYMENT_PCT := I.PAYMENT_PCT;

               BEGIN
                  SELECT   D.AMT_PCT
                    INTO   V_PAYMENT_PCT
                    FROM   SAL_EMP_EAR_DED D
                   WHERE       NVL (ALTERNATIV_FLAG, '0') = '1'
                           AND D.AMOUNT_TYPE = 'P'
                           AND D.HEAD_CD = I.HEAD_CD
                           AND D.EMP_GID = P_EMP_GID;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            ELSIF I.AMOUNT_TYPE = 'F'
            THEN
               V_FIXED_AMT := I.FIXED_AMT;

               BEGIN
                  SELECT   D.AMOUNT
                    INTO   V_FIXED_AMT
                    FROM   SAL_EMP_EAR_DED D
                   WHERE       NVL (ALTERNATIV_FLAG, '0') = '1'
                           AND D.AMOUNT_TYPE = 'F'
                           AND D.HEAD_CD = I.HEAD_CD
                           AND D.EMP_GID = P_EMP_GID;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            END IF;



            IF NVL (I.BASIC_RANGE_FLAG, 'N') = 'Y'
            THEN
               IF V_BASIC_VALID NOT BETWEEN I.BASIC_FROM AND I.BASIC_TO
               THEN
                  BEGIN
                     SELECT   D.PAYMENT_PCT, D.FIXED_AMT
                       INTO   V_PAYMENT_PCT, V_FIXED_AMT
                       FROM   SAL_HEAD_SETUP_DETL D
                      WHERE   D.HEAD_CD = I.HEAD_CD
                              AND V_BASIC_VALID BETWEEN D.BASIC_FROM
                                                    AND  D.BASIC_TO;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        NULL;
                  END;
               END IF;
            END IF;


            IF I.AMOUNT_TYPE = 'P'
            THEN
               IF I.BASED_ON = 'B'
               THEN
                  IF I.SHORT_NM = 'DUA'
                  THEN
                     V_BASIC_ABSENT :=
                        ROUND( (V_BASIC_VALID * V_NO_DAYS_ABSENT)
                              / TO_NUMBER (TO_CHAR (P_SAL_DT_TO, 'DD')));
                     V_PAYABLE_AMT :=
                        ROUND (V_BASIC_ABSENT * (V_PAYMENT_PCT / 100), 2);
                  ELSE
                     V_PAYABLE_AMT :=
                        ROUND (V_BASIC_VALID * (V_PAYMENT_PCT / 100), 2);
                  END IF;
               ELSIF I.BASED_ON = 'F'
               THEN
                  BEGIN
                     SELECT   INCRE_BASIC
                       INTO   V_BASE_BASIC
                       FROM   HRM_PAY_SCALE_DETL
                      WHERE   PAYSC_ID = P_PAYSC_ID
                              AND PAY_LEVEL =
                                    (SELECT   MIN (PAY_LEVEL)
                                       FROM   HRM_PAY_SCALE_DETL
                                      WHERE   PAYSC_ID = P_PAYSC_ID);

                     V_PAYABLE_AMT :=
                        ROUND (V_BASE_BASIC * (V_PAYMENT_PCT / 100), 2);
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        V_PAYABLE_AMT := 0;
                  END;
               ELSIF I.BASED_ON = 'I'
               THEN
                  IF I.CAT_CD = '04'
                  THEN
                     BEGIN
                        SELECT   MAX (H.INSTL_AMOUNT)
                          INTO   V_INSTL_AMT
                          FROM   PAY_LOAN_APPL_APPRVL H
                         WHERE   EMP_GID = P_EMP_GID
                                 AND NVL (LOAN_STATUS, 'X') <> 'R';
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           V_INSTL_AMT := 0;
                     END;

                     V_PAYABLE_AMT := V_INSTL_AMT * (V_PAYMENT_PCT / 100);
                  END IF;
               ELSIF I.BASED_ON = 'T'
               THEN
                  IF I.CAT_CD = '04'
                  THEN
                     BEGIN
                        SELECT   MAX (H.OUTSTANDING_AMT)
                          INTO   V_OUTSTANDING_AMT
                          FROM   PAY_LOAN_APPL_APPRVL H
                         WHERE   EMP_GID = P_EMP_GID
                                 AND NVL (LOAN_STATUS, 'X') <> 'R';
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           V_OUTSTANDING_AMT := 0;
                     END;

                     V_PAYABLE_AMT :=
                        ROUND (
                           (V_OUTSTANDING_AMT * (V_PAYMENT_PCT / 100)) / 12,
                           2
                        );
                  END IF;
               ELSIF I.BASED_ON = 'G'
               THEN
                  IF I.SHORT_NM = 'DUA'
                  THEN
                     V_BASIC_ABSENT :=
                        ROUND( (I.GROSS_EARNING * V_NO_DAYS_ABSENT)
                              / TO_NUMBER (TO_CHAR (P_SAL_DT_TO, 'DD')));
                     V_PAYABLE_AMT :=
                        ROUND (V_BASIC_ABSENT * (V_PAYMENT_PCT / 100), 2);
                  ELSE
                     V_PAYABLE_AMT :=
                        ROUND (I.GROSS_EARNING * (V_PAYMENT_PCT / 100), 2);
                  END IF;
               END IF;
            ELSIF I.AMOUNT_TYPE = 'F'
            THEN
               V_PAYABLE_AMT := V_FIXED_AMT;
            END IF;


            IF I.SHORT_NM = 'BF'
            THEN
               V_PAYABLE_AMT := ROUND (V_PAYABLE_AMT);
            END IF;

            IF NVL (V_PAYABLE_AMT, 0) > 0
            THEN
               IF NVL (I.DEPENDENCY_CD, '000') = '001'
                  AND NVL (V_CHILD_CNT, 0) > 0
               THEN
                  V_PAYABLE_AMT := V_PAYABLE_AMT * V_CHILD_CNT;
               END IF;


               IF NVL (I.MIN_MAX_FLAG, 'N') = 'Y'
               THEN
                  IF NVL (I.MIN_PAYABLE, 0) > 0
                     AND NVL (V_PAYABLE_AMT, 0) < I.MIN_PAYABLE
                  THEN
                     V_PAYABLE_AMT := I.MIN_PAYABLE;
                  END IF;

                  IF NVL (I.MAX_PAYABLE, 0) > 0
                     AND NVL (V_PAYABLE_AMT, 0) > I.MAX_PAYABLE
                  THEN
                     V_PAYABLE_AMT := I.MAX_PAYABLE;
                  END IF;
               END IF;


               IF I.HEAD_TYPE = 'E'
               THEN
                  V_EARN_AMT := ROUND (V_PAYABLE_AMT);
               ELSE
                  V_DED_AMT := ROUND (V_PAYABLE_AMT);
               END IF;


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           I.HEAD_CD,
                           P_SALARY_DT,
                           V_EARN_AMT,
                           V_DED_AMT,
                           P_IUSR,
                           SYSDATE);
            END IF;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_Earning_Deduction Error: ' || SQLERRM;
   END PRO_EARNING_DEDUCTION;



   PROCEDURE PRO_ARREAR (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_ADJ_BASIC         HRM_EMPLOYEE.CURR_BASIC%TYPE := 0;
      V_CURR_BASIC        HRM_EMPLOYEE.CURR_BASIC%TYPE := 0;
      V_PREVIOUS_BASIC    HRM_EMPLOYEE.PREVIOUS_BASIC%TYPE := 0;
      V_LAST_INCRE_DT     DATE;
      V_LAST_PROM_DT      DATE;
      V_PAYSC_EFFECT_DT   DATE;
      V_EARN_AMT          NUMBER (10, 2) := 0;

      V_DED_AMT           NUMBER (10, 2) := 0;

      V_PAYABLE_AMT       NUMBER (10, 2) := 0;

      V_PAYMENT_PCT       SAL_HEAD_SETUP_DETL.PAYMENT_PCT%TYPE := 0;

      V_NOOF_DAY_MONTH    NUMBER (3) := 0;

      V_NOOF_DAY_SAL      NUMBER (3) := 0;

      V_LOOP_CNT          NUMBER (3) := 0;
      V_BASE_BASIC        NUMBER (10, 2) := 0;



      CURSOR CUR_ARREAR_LIST
      IS
         SELECT   M.ARREAR_NO,
                  M.CIRCULAR_CAUSE,
                  M.ARREAR_FOR,
                  M.ARREAR_TYPE,
                  M.ARREAR_DT_FRM,
                  M.ARREAR_DT_TO,
                  M.PAYABLE_MM,
                  M.PAYABLE_YR,
                  M.AMOUNT_TYPE,
                  M.BASED_ON,
                  M.APPLICABLE_FOR,
                  M.EMP_GID,
                  C.HEAD_CD,
                  C.PAYMENT_TYPE,
                  C.AMOUNT_PCT,
                  C.AMOUNT_FIXED,
                  E.CURR_BASIC,
                  E.PREVIOUS_BASIC,
                  E.PAYSC_ID
           FROM   SAL_ARREAR_MST M, SAL_ARREAR_DETL C, HRM_EMPLOYEE E
          WHERE       M.ARREAR_NO = C.ARREAR_NO
                  AND E.EMP_GID = P_EMP_GID
                  --AND E.SERVICE_CD IN ('01', '02')
                  AND M.STATUS = 0
                  AND E.EMPLOYMENT_ST_CD = '00'
                  AND E.EMP_GID = NVL (M.EMP_GID, E.EMP_GID)
                  AND M.PAYABLE_YR || LPAD (M.PAYABLE_MM, 2, 0) <=
                        TO_CHAR (P_SAL_DT_TO, 'RRRRMM')
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_DETL D, SAL_SALARY_MST S
                          WHERE       S.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND D.ARREAR_NO = M.ARREAR_NO
                                  AND S.APPRV_STATUS = 'Y'
                                  AND D.HEAD_CD = C.HEAD_CD
                                  AND S.EMP_GID = P_EMP_GID);
   BEGIN
      FOR I IN CUR_ARREAR_LIST
      LOOP
         V_ADJ_BASIC := 0;
         V_PAYMENT_PCT := 0;
         V_PAYABLE_AMT := 0;
         V_EARN_AMT := 0;
         V_DED_AMT := 0;
         V_NOOF_DAY_SAL := 0;
         V_LOOP_CNT := 0;
         V_NOOF_DAY_SAL := 0;


         IF NVL (I.AMOUNT_TYPE, 'X') = 'D'
         THEN
            V_ADJ_BASIC := NVL (I.CURR_BASIC, 0) - NVL (I.PREVIOUS_BASIC, 0);


            BEGIN
               SELECT   D.PAYMENT_PCT
                 INTO   V_PAYMENT_PCT
                 FROM   SAL_HEAD_SETUP_DETL D, HRM_EMPLOYEE E
                WHERE       D.HEAD_CD = I.HEAD_CD
                        AND D.BASED_ON = I.BASED_ON
                        AND E.EMP_GID = P_EMP_GID
                        AND E.EMP_TYPE_CD =
                              NVL (D.EMP_TYPE_CD, E.EMP_TYPE_CD)
                        AND E.DESIG_CD = NVL (D.DESIG_CD, E.DESIG_CD)
                        AND E.EMPLOYMENT_TP_CD =
                              NVL (D.EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                        AND NVL (E.RELIGION_CD, 'XX') =
                              NVL (D.RELIGION_CD, NVL (E.RELIGION_CD, 'XX'))
                        AND NVL (E.MUNILOC_CD, 'XX') =
                              NVL (D.MUNILOC_CD, NVL (E.MUNILOC_CD, 'XX'))
                        AND E.SERVICE_CD = NVL (D.SERVICE_CD, E.SERVICE_CD)
                        AND E.EMPLOYMENT_ST_CD =
                              NVL (D.EMPLOYMENT_ST_CD, E.EMPLOYMENT_ST_CD)
                        AND V_ADJ_BASIC BETWEEN NVL (D.BASIC_FROM,
                                                     V_ADJ_BASIC)
                                            AND  NVL (D.BASIC_TO,
                                                      V_ADJ_BASIC);
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;



            FOR J IN TO_NUMBER (TO_CHAR (I.ARREAR_DT_FRM, 'MM')) .. TO_NUMBER(TO_CHAR (
                                                                                 I.ARREAR_DT_TO,
                                                                                 'MM'
                                                                              ))
            LOOP
               V_NOOF_DAY_MONTH :=
                  TO_NUMBER(TO_CHAR (
                               LAST_DAY (
                                  ADD_MONTHS (I.ARREAR_DT_FRM, V_LOOP_CNT)
                               ),
                               'dd'
                            ));

               IF LAST_DAY (ADD_MONTHS (I.ARREAR_DT_FRM, V_LOOP_CNT)) <=
                     I.ARREAR_DT_TO
               THEN
                  V_NOOF_DAY_SAL :=
                     TO_NUMBER(TO_CHAR (
                                  LAST_DAY (
                                     ADD_MONTHS (I.ARREAR_DT_FRM, V_LOOP_CNT)
                                  ),
                                  'dd'
                               ));
               ELSE
                  V_NOOF_DAY_SAL := TO_NUMBER (TO_CHAR (I.ARREAR_DT_TO, 'dd'));
               END IF;

               V_PAYABLE_AMT :=
                  V_PAYABLE_AMT
                  + ROUND (
                       ( ( (V_ADJ_BASIC / V_NOOF_DAY_MONTH) * V_NOOF_DAY_SAL)
                        * V_PAYMENT_PCT)
                       / 100,
                       2
                    );
               V_LOOP_CNT := V_LOOP_CNT + 1;
            END LOOP;
         ELSIF NVL (I.AMOUNT_TYPE, 'X') = 'P'
         THEN
            IF NVL (I.BASED_ON, 'X') = 'B'
            THEN
               V_ADJ_BASIC := NVL (I.CURR_BASIC, 0);
               V_PAYABLE_AMT := ROUND ( (V_ADJ_BASIC * I.AMOUNT_PCT) / 100, 2);
            ELSIF I.BASED_ON = 'F'
            THEN
               BEGIN
                  SELECT   INCRE_BASIC
                    INTO   V_BASE_BASIC
                    FROM   HRM_PAY_SCALE_DETL
                   WHERE   PAYSC_ID = I.PAYSC_ID
                           AND PAY_LEVEL = (SELECT   MIN (PAY_LEVEL)
                                              FROM   HRM_PAY_SCALE_DETL
                                             WHERE   PAYSC_ID = I.PAYSC_ID);

                  V_ADJ_BASIC := NVL (V_BASE_BASIC, 0);
                  V_PAYABLE_AMT :=
                     ROUND ( (V_BASE_BASIC * I.AMOUNT_PCT) / 100, 2);
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     V_ADJ_BASIC := 0;
                     V_PAYABLE_AMT := 0;
               END;
            END IF;
         ELSIF NVL (I.AMOUNT_TYPE, 'X') = 'F'
         THEN
            V_PAYABLE_AMT := I.AMOUNT_FIXED;
         END IF;


         IF I.PAYMENT_TYPE = 'E'
         THEN
            V_EARN_AMT := ROUND (V_PAYABLE_AMT);
         ELSE
            V_DED_AMT := ROUND (V_PAYABLE_AMT);
         END IF;


         INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                      HEAD_CD,
                                      SALARY_DT,
                                      EARNING_AMT,
                                      DEDUCTION_AMT,
                                      ARREAR_NO,
                                      I_USR,
                                      I_DT)
           VALUES   (P_SAL_PROCESS_NO,
                     I.HEAD_CD,
                     P_SALARY_DT,
                     V_EARN_AMT,
                     V_DED_AMT,
                     I.ARREAR_NO,
                     P_IUSR,
                     SYSDATE);
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_Arrear: ' || SQLERRM;
   END PRO_ARREAR;



   PROCEDURE PRO_MISC_EAR_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_OFFICE_CD        IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT       IN     VARCHAR2,
      P_EMP_TYPE         IN     HRM_EMPLOYMENT_TYPE.EMPLOYMENT_TP_CD%TYPE DEFAULT '01'
                                                                            ,
      P_PAY_DT_FROM      IN     DATE,
      P_PAY_DT_TO        IN     DATE,
      P_PAYABLE_DT       IN     DATE,
      P_SALARY_PROCESS   IN     SAL_SPEC_EAR_DED_MST.SALARY_PROCESS%TYPE,
      P_OBJECT_CD        IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_SAL_PROCESS_NO       SAL_SALARY_MST.SAL_PROCESS_NO%TYPE;

      V_NOOF_DAY_MONTH       NUMBER (3) := 0;

      V_OLD_BASIC_NOOF_DAY   NUMBER (3) := 0;

      V_NEW_BASIC_NOOF_DAY   NUMBER (3) := 0;

      V_OLD_BASIC_VALID      NUMBER (10, 2) := 0;

      V_NEW_BASIC_VALID      NUMBER (10, 2) := 0;

      V_BASIC_VALID          NUMBER (10, 2) := 0;

      V_MST_CNT              NUMBER (3) := 0;

      V_EARN_AMT             NUMBER (10, 2) := 0;

      V_DED_AMT              NUMBER (10, 2) := 0;

      V_PAYABLE_AMT          NUMBER (10, 2) := 0;

      V_PAYMENT_PCT          SAL_HEAD_SETUP_DETL.PAYMENT_PCT%TYPE := 0;

      V_FIXED_AMT            SAL_HEAD_SETUP_DETL.FIXED_AMT%TYPE := 0;

      V_INCREMENT_FLAG       NUMBER (1) := 0;

      V_PROMOTION_FALG       NUMBER (1) := 0;

      V_PAYSC_FLAG           NUMBER (1) := 0;

      V_NET_PAYABLE_AMT      NUMBER (10, 2) := 0;
      V_ERROR_ACC            VARCHAR2 (2000);
      V_BASE_BASIC           NUMBER (10, 2) := 0;
      v_emp_gid              NUMBER;


      CURSOR CUR_EMP_LIST
      IS
         SELECT   E.EMP_GID,
                  E.EMP_TYPE_CD,
                  E.DESIG_CD,
                  E.EMPLOYMENT_TP_CD,
                  E.RELIGION_CD,
                  E.MUNILOC_CD,
                  E.SERVICE_CD,
                  E.EMPLOYMENT_ST_CD,
                  E.OFFICE_CD,
                  E.PREVIOUS_BASIC,
                  E.CURR_BASIC,
                  E.BANK_ACCOUNT_NO,
                  E.BANK_BR_CD,
                  E.PAYSC_ID,
                  E.DIVDEPT_CD,
                  E.SAL_TRANSFER_TP,
                  E.GROSS_EARNING
           FROM   HRM_EMPLOYEE E
          WHERE       E.ACTIVITY_CD = '01'
                  AND e.sal_pay_stat = '01'
                  AND E.EMP_GID = NVL (P_EMP_GID, E.EMP_GID)
                  AND E.EMPLOYMENT_TP_CD =
                        NVL (P_EMP_TYPE, E.EMPLOYMENT_TP_CD)
                  AND ( (NVL (P_DESCENDANT, 'N') = 'N'
                         AND E.OFFICE_CD = NVL (P_OFFICE_CD, E.OFFICE_CD))
                       OR (NVL (P_DESCENDANT, 'N') = 'Y'
                           AND E.OFFICE_CD IN
                                    (    SELECT   O.OFFICE_CD
                                           FROM   HRM_OFFICE_SETUP O
                                     START WITH   O.OFFICE_CD = P_OFFICE_CD
                                     CONNECT BY   PRIOR O.OFFICE_CD =
                                                     O.CONTROL_OFFICE_CD)))
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_MST M,
                                  SAL_SALARY_DETL D,
                                  SAL_SPEC_EAR_DED_DETL S,
                                  SAL_SPEC_EAR_DED_MST P
                          WHERE       M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND D.CIRCULAR_NO = S.CIRCULAR_NO
                                  AND S.CIRCULAR_NO = P.CIRCULAR_NO
                                  AND P.PAYABLE_DT BETWEEN P_PAY_DT_FROM
                                                       AND  P_PAY_DT_TO
                                  AND D.HEAD_CD = S.HEAD_CD
                                  AND M.EMP_GID = E.EMP_GID);

      CURSOR CUR_MISC_HEAD (
         V_EMP_GID                 HRM_EMPLOYEE.EMP_GID%TYPE
      )
      IS
         SELECT   D.HEAD_CD,
                  H.HEAD_NM,
                  H.SHORT_NM,
                  S.HEAD_TYPE,
                  D.AMOUNT_TYPE,
                  E.EMP_TYPE_CD,
                  E.DESIG_CD,
                  E.EMPLOYMENT_TP_CD,
                  E.RELIGION_CD,
                  E.MUNILOC_CD,
                  E.SERVICE_CD,
                  E.EMPLOYMENT_ST_CD,
                  D.BASIC_FROM,
                  D.BASIC_TO,
                  D.PAYMENT_PCT,
                  D.FIXED_AMT,
                  D.MIN_PAYABLE,
                  D.MAX_PAYABLE,
                  E.CURR_BASIC,
                  E.PREVIOUS_BASIC,
                  E.LAST_INCRE_DT,
                  E.LAST_PROM_DT,
                  E.EFFECT_DT_ON_SALARY,
                  E.BANK_ACCOUNT_NO,
                  E.BANK_BR_CD,
                  E.OFFICE_CD,
                  M.CIRCULAR_NO,
                  M.BASIC_RANGE_FLAG,
                  D.BASED_ON,
                  D.CAL_BASE,
                  D.NO_OF_DAYS,
                  NVL (M.SALARY_PROCESS, '0') SALARY_PROCESS,
                  M.MAX_MIN_FLAG,
                  E.PAYSC_ID,
                  E.DIVDEPT_CD,
                  E.GROSS_EARNING
           FROM   SAL_SPEC_EAR_DED_MST M,
                  SAL_SPEC_EAR_DED_DETL D,
                  SAL_HEAD H,
                  SAL_HEAD_SETUP S,
                  HRM_EMPLOYEE E
          WHERE       M.CIRCULAR_NO = D.CIRCULAR_NO
                  AND D.HEAD_CD = H.HEAD_CD
                  AND H.HEAD_CD = S.HEAD_CD
                  AND NVL (M.SALARY_PROCESS, '0') =
                        NVL (P_SALARY_PROCESS, '0')
                  AND E.EMP_GID = V_EMP_GID
                  AND E.EMP_TYPE_CD = NVL (D.EMP_TYPE_CD, E.EMP_TYPE_CD)
                  AND E.DESIG_CD = NVL (D.DESIG_CD, E.DESIG_CD)
                  AND E.EMPLOYMENT_TP_CD =
                        NVL (D.EMPLOYMENT_TP_CD, E.EMPLOYMENT_TP_CD)
                  AND NVL (E.RELIGION_CD, 'XX') =
                        NVL (D.RELIGION_CD, NVL (E.RELIGION_CD, 'XX'))
                  AND NVL (E.MUNILOC_CD, 'XX') =
                        NVL (D.MUNILOC_CD, NVL (E.MUNILOC_CD, 'XX'))
                  AND E.SERVICE_CD = NVL (D.SERVICE_CD, E.SERVICE_CD)
                  AND E.EMPLOYMENT_ST_CD =
                        NVL (D.EMPLOYMENT_ST_CD, E.EMPLOYMENT_ST_CD)
                  AND NVL (E.CURR_BASIC, 0) BETWEEN NVL (
                                                       D.BASIC_FROM,
                                                       NVL (E.CURR_BASIC, 0)
                                                    )
                                                AND  NVL (
                                                        D.BASIC_TO,
                                                        NVL (E.CURR_BASIC, 0)
                                                     )
                  AND M.PAYABLE_DT BETWEEN P_PAY_DT_FROM AND P_PAY_DT_TO
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_DETL SD, SAL_SALARY_MST SM
                          WHERE       SM.SAL_PROCESS_NO = SD.SAL_PROCESS_NO
                                  AND SD.CIRCULAR_NO = M.CIRCULAR_NO
                                  AND SD.HEAD_CD = D.HEAD_CD
                                  AND SM.EMP_GID = V_EMP_GID);
   BEGIN
      V_NOOF_DAY_MONTH := TO_NUMBER (TO_CHAR (LAST_DAY (P_PAY_DT_TO), 'dd'));

      FOR K IN CUR_EMP_LIST
      LOOP
         V_MST_CNT := 0;
         V_OLD_BASIC_NOOF_DAY := 0;
         V_NEW_BASIC_NOOF_DAY := 0;
         V_OLD_BASIC_VALID := 0;
         V_NEW_BASIC_VALID := 0;
         V_BASIC_VALID := 0;
         v_emp_gid := K.EMP_GID;

         FOR I IN CUR_MISC_HEAD (K.EMP_GID)
         LOOP
            V_PAYMENT_PCT := 0;
            V_FIXED_AMT := 0;
            V_PAYABLE_AMT := 0;
            V_EARN_AMT := 0;
            V_DED_AMT := 0;



            V_BASIC_VALID := I.CURR_BASIC;


            IF I.LAST_INCRE_DT BETWEEN P_PAY_DT_FROM AND P_PAY_DT_TO
            THEN
               V_INCREMENT_FLAG := 1;
            ELSIF I.LAST_PROM_DT BETWEEN P_PAY_DT_FROM AND P_PAY_DT_TO
            THEN
               V_PROMOTION_FALG := 1;
            ELSIF I.EFFECT_DT_ON_SALARY BETWEEN P_PAY_DT_FROM AND P_PAY_DT_TO
            THEN
               V_PAYSC_FLAG := 1;
            END IF;


            IF    V_INCREMENT_FLAG = 1
               OR V_PROMOTION_FALG = 1
               OR V_PAYSC_FLAG = 1
            THEN
               IF V_INCREMENT_FLAG = 1
               THEN
                  V_OLD_BASIC_NOOF_DAY :=
                     TO_NUMBER (TO_CHAR (I.LAST_INCRE_DT, 'dd')) - 1;
                  V_NEW_BASIC_NOOF_DAY :=
                     V_NOOF_DAY_MONTH - V_OLD_BASIC_NOOF_DAY;
               ELSIF V_PROMOTION_FALG = 1
               THEN
                  V_OLD_BASIC_NOOF_DAY :=
                     TO_NUMBER (TO_CHAR (I.LAST_PROM_DT, 'dd')) - 1;
                  V_NEW_BASIC_NOOF_DAY :=
                     V_NOOF_DAY_MONTH - V_OLD_BASIC_NOOF_DAY;
               ELSIF V_PAYSC_FLAG = 1
               THEN
                  V_OLD_BASIC_NOOF_DAY :=
                     TO_NUMBER (TO_CHAR (I.EFFECT_DT_ON_SALARY, 'dd')) - 1;
                  V_NEW_BASIC_NOOF_DAY :=
                     V_NOOF_DAY_MONTH - V_OLD_BASIC_NOOF_DAY;
               END IF;


               V_OLD_BASIC_VALID :=
                  V_OLD_BASIC_NOOF_DAY
                  * (I.PREVIOUS_BASIC / V_NOOF_DAY_MONTH);
               V_NEW_BASIC_VALID :=
                  V_NEW_BASIC_NOOF_DAY
                  * (I.PREVIOUS_BASIC / V_NOOF_DAY_MONTH);
               V_BASIC_VALID := V_OLD_BASIC_VALID + V_NEW_BASIC_VALID;
            END IF;

            IF NVL (I.CAL_BASE, 'M') = 'D'
            THEN
               V_BASIC_VALID :=
                  (V_BASIC_VALID / V_NOOF_DAY_MONTH) * I.NO_OF_DAYS;
            END IF;

            IF V_MST_CNT = 0
            THEN
               V_SAL_PROCESS_NO := P_SAL_PROCESS_NO;


               IF NVL (P_SALARY_PROCESS, 0) = 0
               THEN
                  SELECT   TO_NUMBER(TO_CHAR (SYSDATE, 'rrrrmm')
                                     || LPAD (
                                           NVL (
                                              MAX(TO_NUMBER(SUBSTR (
                                                               M.SAL_PROCESS_NO,
                                                               7
                                                            ))),
                                              0
                                           )
                                           + 1,
                                           6,
                                           0
                                        ))
                    INTO   V_SAL_PROCESS_NO
                    FROM   SAL_SALARY_MST M
                   WHERE   SUBSTR (M.SAL_PROCESS_NO, 1, 6) =
                              TO_NUMBER (TO_CHAR (SYSDATE, 'rrrrmm'));


                  INSERT INTO SAL_SALARY_MST (SAL_PROCESS_NO,
                                              EMP_GID,
                                              SALARY_DT,
                                              PROCESS_DT,
                                              SAL_DT_FROM,
                                              SAL_DT_TO,
                                              OLD_BASIC_AMT,
                                              CUR_BASIC_AMT,
                                              EMP_TYPE_CD,
                                              DESIG_CD,
                                              EMPLOYMENT_TP_CD,
                                              RELIGION_CD,
                                              MUNILOC_CD,
                                              SERVICE_CD,
                                              EMPLOYMENT_ST_CD,
                                              OFFICE_CD,
                                              NET_PAYABLE_AMT,
                                              PAYMENT_TYPE,
                                              ACCOUNT_NO,
                                              BANK_CD,
                                              BR_CD,
                                              I_USR,
                                              I_DT,
                                              DIVDEPT_CD,
                                              SAL_TRANSFER_TP)
                    VALUES   (V_SAL_PROCESS_NO,
                              K.EMP_GID,
                              P_PAYABLE_DT,
                              TRUNC (SYSDATE),
                              P_PAY_DT_FROM,
                              P_PAY_DT_TO,
                              I.PREVIOUS_BASIC,
                              I.CURR_BASIC,
                              I.EMP_TYPE_CD,
                              I.DESIG_CD,
                              I.EMPLOYMENT_TP_CD,
                              I.RELIGION_CD,
                              I.MUNILOC_CD,
                              I.SERVICE_CD,
                              I.EMPLOYMENT_ST_CD,
                              I.OFFICE_CD,
                              0,
                              'B',
                              I.BANK_ACCOUNT_NO,
                              NULL,
                              I.BANK_BR_CD,
                              P_IUSR,
                              SYSDATE,
                              K.DIVDEPT_CD,
                              K.SAL_TRANSFER_TP);
               END IF;

               V_MST_CNT := 1;
            END IF;


            IF I.AMOUNT_TYPE = 'P'
            THEN
               V_PAYMENT_PCT := I.PAYMENT_PCT;
            ELSIF I.AMOUNT_TYPE = 'F'
            THEN
               V_FIXED_AMT := I.FIXED_AMT;
            END IF;



            IF NVL (I.BASIC_RANGE_FLAG, 'N') = 'Y'
            THEN
               IF V_BASIC_VALID NOT BETWEEN I.BASIC_FROM AND I.BASIC_TO
               THEN
                  BEGIN
                     SELECT   D.PAYMENT_PCT, D.FIXED_AMT
                       INTO   V_PAYMENT_PCT, V_FIXED_AMT
                       FROM   SAL_HEAD_SETUP_DETL D
                      WHERE   D.HEAD_CD = I.HEAD_CD
                              AND V_BASIC_VALID BETWEEN D.BASIC_FROM
                                                    AND  D.BASIC_TO;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        NULL;
                  END;
               END IF;
            END IF;


            IF I.AMOUNT_TYPE = 'P'
            THEN
               IF I.BASED_ON = 'B'
               THEN
                  V_PAYABLE_AMT :=
                     ROUND (V_BASIC_VALID * (V_PAYMENT_PCT / 100));
               ELSIF I.BASED_ON = 'G'
               THEN
                  V_PAYABLE_AMT :=
                     ROUND (I.GROSS_EARNING * (V_PAYMENT_PCT / 100));
               ELSIF I.BASED_ON = 'F'
               THEN
                  BEGIN
                     SELECT   INCRE_BASIC
                       INTO   V_BASE_BASIC
                       FROM   HRM_PAY_SCALE_DETL
                      WHERE   PAYSC_ID = I.PAYSC_ID
                              AND PAY_LEVEL =
                                    (SELECT   MIN (PAY_LEVEL)
                                       FROM   HRM_PAY_SCALE_DETL
                                      WHERE   PAYSC_ID = I.PAYSC_ID);

                     V_PAYABLE_AMT :=
                        ROUND (V_BASE_BASIC * (V_PAYMENT_PCT / 100));
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        V_PAYABLE_AMT := 0;
                  END;
               END IF;
            ELSIF I.AMOUNT_TYPE = 'F'
            THEN
               V_PAYABLE_AMT := V_FIXED_AMT;
            END IF;

            IF NVL (V_PAYABLE_AMT, 0) > 0
            THEN
               IF NVL (I.MAX_MIN_FLAG, 'N') = 'Y'
               THEN
                  IF NVL (I.MIN_PAYABLE, 0) > 0
                     AND NVL (V_PAYABLE_AMT, 0) < I.MIN_PAYABLE
                  THEN
                     V_PAYABLE_AMT := I.MIN_PAYABLE;
                  END IF;

                  IF NVL (I.MAX_PAYABLE, 0) > 0
                     AND NVL (V_PAYABLE_AMT, 0) > I.MAX_PAYABLE
                  THEN
                     V_PAYABLE_AMT := I.MAX_PAYABLE;
                  END IF;
               END IF;


               IF I.HEAD_TYPE = 'E'
               THEN
                  V_EARN_AMT := ROUND (V_PAYABLE_AMT);
               ELSE
                  V_DED_AMT := ROUND (V_PAYABLE_AMT);
               END IF;


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            CIRCULAR_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (V_SAL_PROCESS_NO,
                           I.HEAD_CD,
                           P_PAYABLE_DT,
                           V_EARN_AMT,
                           V_DED_AMT,
                           I.CIRCULAR_NO,
                           P_IUSR,
                           SYSDATE);
            END IF;
         END LOOP;

         IF NVL (P_SALARY_PROCESS, 0) = 0
         THEN
            SELECT   NVL (
                        SUM (
                           NVL (D.EARNING_AMT, 0) - NVL (D.DEDUCTION_AMT, 0)
                        ),
                        0
                     )
              INTO   V_NET_PAYABLE_AMT
              FROM   SAL_SALARY_DETL D
             WHERE   D.SAL_PROCESS_NO = V_SAL_PROCESS_NO;


            UPDATE   SAL_SALARY_MST
               SET   NET_PAYABLE_AMT = V_NET_PAYABLE_AMT
             WHERE   SAL_PROCESS_NO = V_SAL_PROCESS_NO;



            COMMIT;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR :=
               'Pro_Misc_Ear_Ded: for emp: '
            || v_emp_gid
            || ' error: '
            || SQLERRM;
   END PRO_MISC_EAR_DED;



   PROCEDURE PRO_PFL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_INSTL_AMT            CPF_LOAN_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_REC_INSTL            NUMBER (5) := 0;
      V_HEAD_CD              SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;
      V_SCHEDULE_CD          VARCHAR (5);

      V_HEAD_CD_PFLD         SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;
      V_HEAD_CD_PFLID        SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;
      V_INEREST_AMT          NUMBER (5) := 0;
      V_INSTL_AMT2           NUMBER (5) := 0;
      V_PRIN_AMT             NUMBER (5) := 0;
      V_ERROR                VARCHAR2 (200);
      V_INSTALLMENT_AMOUNT   NUMBER (10, 2);

      CURSOR CUR_PFL
      IS
         SELECT   L.LOAN_NO,
                  L.UD_LOAN_NO,
                  L.LOAN_AMT,
                  L.LOAN_DURATION,
                  L.NO_OF_INSTL,
                  L.INSTL_AMOUNT,
                  L.LAST_INSTL_AMOUNT,
                  L.INTEREST_AMOUNT,
                  CEIL (L.INTEREST_AMOUNT / L.INSTL_AMOUNT)
                     NO_OF_INTERST_INSTL,
                  L.LAST_INTRST_INSTL,
                  L.DED_START_DT,
                  (L.NO_OF_INSTL + CEIL (L.INTEREST_AMOUNT / L.INSTL_AMOUNT))
                     TOT_INSTL,
                  L.PRIN_INSTALLMENT,
                  L.INT_INSTALLMENT,
                  L.LAST_PAID_INSTL_NO
           FROM   CPF_LOAN_APPRVL L
          WHERE       NVL (L.DISBURSE_FLAG, 'N') = 'Y'
                  AND NVL (L.DED_FRM_SAL, 'N') = 'Y'
                  AND NVL (L.DED_SUSPEND, 'N') = 'N'
                  AND L.DED_START_DT <= P_SAL_DT_TO
                  AND NVL (L.LOAN_STATUS, 'X') <> 'R'
                  AND L.EMP_GID = P_EMP_GID
                  AND (L.NO_OF_INSTL
                       + CEIL (L.INTEREST_AMOUNT / L.INSTL_AMOUNT)) >
                        NVL ( (SELECT   COUNT (LOAN_NO)
                                 FROM   SAL_SALARY_DETL S
                                WHERE   S.LOAN_NO = L.LOAN_NO), 0)
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_MST M, SAL_SALARY_DETL D
                          WHERE       M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND M.EMP_GID = P_EMP_GID
                                  AND M.SAL_DT_FROM = P_SAL_DT_FROM
                                  AND M.SAL_DT_TO = P_SAL_DT_TO
                                  AND D.LOAN_NO = L.LOAN_NO);
   BEGIN
      FOR I IN CUR_PFL
      LOOP
         V_INSTL_AMT := 0;
         V_REC_INSTL := 0;


         SELECT   COUNT (LOAN_NO)
           INTO   V_REC_INSTL
           FROM   SAL_SALARY_DETL S
          WHERE   S.LOAN_NO = I.LOAN_NO;


         BEGIN
            SELECT   SCHEDULE_CD INTO V_SCHEDULE_CD FROM CPF_PF_LOAN_SETUP;
         EXCEPTION
            WHEN OTHERS
            THEN
               P_ERROR := '"Schedule Type" cannot generate';
         END;

         IF V_SCHEDULE_CD = '02'
         THEN
            IF I.NO_OF_INSTL = V_REC_INSTL + 1
            THEN
               V_INSTL_AMT := I.LAST_INSTL_AMOUNT;
            ELSIF I.TOT_INSTL = V_REC_INSTL + 1
            THEN
               V_INSTL_AMT := I.LAST_INTRST_INSTL;
            ELSE
               V_INSTL_AMT := I.INSTL_AMOUNT;
            END IF;


            IF V_REC_INSTL + 1 <= I.NO_OF_INSTL
            THEN
               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLD';
            ELSE
               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLID';


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD,
                           P_SALARY_DT,
                           0,
                           V_INSTL_AMT,
                           I.LOAN_NO,
                           P_IUSR,
                           SYSDATE);
            END IF;
         ELSIF V_SCHEDULE_CD = '04'
         THEN
            PRO_INTEREST_AMOUNT (P_LOAN_TYPE      => '00',
                                 P_EMP_GID        => P_EMP_GID,
                                 P_INTEREST_AMT   => V_INEREST_AMT,
                                 P_ERROR          => V_ERROR);

            IF V_ERROR IS NULL
            THEN
               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD_PFLD
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLD';

               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD_PFLID
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLID';


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD_PFLD,
                           P_SALARY_DT,
                           0,
                           I.PRIN_INSTALLMENT,
                           I.LOAN_NO,
                           P_IUSR,
                           SYSDATE);

               IF V_INEREST_AMT > 0
               THEN
                  INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                               HEAD_CD,
                                               SALARY_DT,
                                               EARNING_AMT,
                                               DEDUCTION_AMT,
                                               LOAN_NO,
                                               I_USR,
                                               I_DT)
                    VALUES   (P_SAL_PROCESS_NO,
                              V_HEAD_CD_PFLID,
                              P_SALARY_DT,
                              0,
                              V_INEREST_AMT,
                              I.LOAN_NO,
                              P_IUSR,
                              SYSDATE);
               END IF;
            ELSE
               P_ERROR := V_ERROR;
            END IF;
         ELSIF V_SCHEDULE_CD = '05'
         THEN
            PRO_INTEREST_AMOUNT (P_LOAN_TYPE      => '00',
                                 P_EMP_GID        => P_EMP_GID,
                                 P_INTEREST_AMT   => V_INEREST_AMT,
                                 P_ERROR          => V_ERROR);


            IF I.NO_OF_INSTL = NVL (I.LAST_PAID_INSTL_NO, 0) + 1
            THEN
               V_INSTALLMENT_AMOUNT := I.LAST_INSTL_AMOUNT;
            ELSE
               V_INSTALLMENT_AMOUNT := I.INSTL_AMOUNT;
            END IF;

            IF V_ERROR IS NULL
            THEN
               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD_PFLD
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLD';

               SELECT   H.HEAD_CD
                 INTO   V_HEAD_CD_PFLID
                 FROM   SAL_HEAD_SETUP H
                WHERE   H.SHORT_NM = 'PFLID';


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD_PFLD,
                           P_SALARY_DT,
                           0,
                           V_INSTALLMENT_AMOUNT - NVL (V_INEREST_AMT, 0),
                           I.LOAN_NO,
                           P_IUSR,
                           SYSDATE);

               IF V_INEREST_AMT > 0
               THEN
                  INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                               HEAD_CD,
                                               SALARY_DT,
                                               EARNING_AMT,
                                               DEDUCTION_AMT,
                                               LOAN_NO,
                                               I_USR,
                                               I_DT)
                    VALUES   (P_SAL_PROCESS_NO,
                              V_HEAD_CD_PFLID,
                              P_SALARY_DT,
                              0,
                              V_INEREST_AMT,
                              I.LOAN_NO,
                              P_IUSR,
                              SYSDATE);
               END IF;
            ELSE
               P_ERROR := V_ERROR;
            END IF;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_pfl_ded: ' || SQLERRM;
   END PRO_PFL_DED;



   PROCEDURE PRO_HBL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_LOAN_INSTL_AMT      CPF_LOAN_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_INTERST_INSTL_AMT   CPF_LOAN_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_REC_INSTL           NUMBER (5) := 0;
      V_REC_AMT             NUMBER (12, 2) := 0;
      V_HEAD_CD             SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;

      CURSOR CUR_HBL
      IS
         SELECT   L.LOAN_NO,
                  L.UD_LOAN_NO,
                  L.LOAN_AMT,
                  L.LOAN_DURATION,
                  L.NO_OF_INSTL,
                  L.INSTL_AMOUNT,
                  L.LAST_INSTL_AMOUNT,
                  L.TOT_INTEREST_AMT,
                  L.DED_START_DT
           FROM   PAY_LOAN_APPL_APPRVL L
          WHERE       NVL (L.DISBURSE_FLAG, 'N') = 'Y'
                  AND NVL (L.DED_FRM_SAL, 'N') = 'Y'
                  AND NVL (L.DED_SUSPEND, 'N') = 'N'
                  AND L.DED_START_DT <= P_SAL_DT_TO
                  AND NVL (L.LOAN_STATUS, 'X') <> 'R'
                  AND L.EMP_GID = P_EMP_GID
                  AND L.NO_OF_INSTL > (SELECT   COUNT (LOAN_NO)
                                         FROM   SAL_SALARY_DETL S
                                        WHERE   S.HBL_LOAN_NO = L.LOAN_NO)
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_MST M, SAL_SALARY_DETL D
                          WHERE       M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND M.EMP_GID = P_EMP_GID
                                  AND M.SAL_DT_FROM = P_SAL_DT_FROM
                                  AND M.SAL_DT_TO = P_SAL_DT_TO
                                  AND D.HBL_LOAN_NO = L.LOAN_NO);
   BEGIN
      FOR I IN CUR_HBL
      LOOP
         V_LOAN_INSTL_AMT := 0;
         V_INTERST_INSTL_AMT := 0;
         V_REC_INSTL := 0;
         V_REC_AMT := 0;
         V_HEAD_CD := NULL;


         SELECT   COUNT (LOAN_NO)
           INTO   V_REC_INSTL
           FROM   SAL_SALARY_DETL S
          WHERE   S.HBL_LOAN_NO = I.LOAN_NO;


         SELECT   SUM (S.DEDUCTION_AMT)
           INTO   V_REC_AMT
           FROM   SAL_SALARY_DETL S
          WHERE   S.HBL_LOAN_NO = I.LOAN_NO;


         IF I.NO_OF_INSTL = V_REC_INSTL + 1
         THEN
            V_LOAN_INSTL_AMT := 0;
            V_INTERST_INSTL_AMT := I.LAST_INSTL_AMOUNT;
            V_HEAD_CD := '027';
         ELSE
            IF NVL (V_REC_AMT, 0) >= I.LOAN_AMT
            THEN
               V_LOAN_INSTL_AMT := 0;
               V_INTERST_INSTL_AMT := I.INSTL_AMOUNT;
            ELSE
               IF NVL (V_REC_AMT, 0) + NVL (I.INSTL_AMOUNT, 0) <= I.LOAN_AMT
               THEN
                  V_LOAN_INSTL_AMT := I.INSTL_AMOUNT;
                  V_INTERST_INSTL_AMT := 0;
               ELSE
                  V_LOAN_INSTL_AMT := I.LOAN_AMT - NVL (V_REC_AMT, 0);
                  V_INTERST_INSTL_AMT :=
                     (NVL (V_REC_AMT, 0) + NVL (I.INSTL_AMOUNT, 0))
                     - I.LOAN_AMT;
               END IF;
            END IF;
         END IF;

         V_HEAD_CD := '026';


         IF NVL (V_LOAN_INSTL_AMT, 0) > 0
         THEN
            SELECT   H.HEAD_CD
              INTO   V_HEAD_CD
              FROM   SAL_HEAD_SETUP H
             WHERE   H.SHORT_NM = 'HBLD';
         END IF;


         IF NVL (V_LOAN_INSTL_AMT, 0) > 0
         THEN
            INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                         HEAD_CD,
                                         SALARY_DT,
                                         EARNING_AMT,
                                         DEDUCTION_AMT,
                                         HBL_LOAN_NO,
                                         I_USR,
                                         I_DT)
              VALUES   (P_SAL_PROCESS_NO,
                        V_HEAD_CD,
                        P_SALARY_DT,
                        0,
                        V_LOAN_INSTL_AMT,
                        I.LOAN_NO,
                        P_IUSR,
                        SYSDATE);
         END IF;


         IF NVL (V_INTERST_INSTL_AMT, 0) > 0
         THEN
            SELECT   H.HEAD_CD
              INTO   V_HEAD_CD
              FROM   SAL_HEAD_SETUP H
             WHERE   H.SHORT_NM = 'HBLID';
         END IF;

         IF NVL (V_INTERST_INSTL_AMT, 0) > 0
         THEN
            INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                         HEAD_CD,
                                         SALARY_DT,
                                         EARNING_AMT,
                                         DEDUCTION_AMT,
                                         HBL_LOAN_NO,
                                         I_USR,
                                         I_DT)
              VALUES   (P_SAL_PROCESS_NO,
                        V_HEAD_CD,
                        P_SALARY_DT,
                        0,
                        V_INTERST_INSTL_AMT,
                        I.LOAN_NO,
                        P_IUSR,
                        SYSDATE);
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_hbl_ded: ' || SQLERRM;
   END PRO_HBL_DED;



   PROCEDURE PRO_EMP_EAR_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_EAR_AMT   NUMBER (12, 2) := 0;
      V_DED_AMT   NUMBER (12, 2) := 0;

      CURSOR CUR_EMP_EAR_DED
      IS
         SELECT   S.HEAD_CD,
                  S.EMP_GID,
                  S.HEAD_TYPE,
                  S.AMOUNT
           FROM   SAL_EMP_EAR_DED S
          WHERE   S.EMP_GID = P_EMP_GID
                  AND NVL (S.ALTERNATIV_FLAG, '0') = '0'
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_MST M, SAL_SALARY_DETL D
                          WHERE       M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND M.EMP_GID = P_EMP_GID
                                  AND D.HEAD_CD = S.HEAD_CD
                                  AND M.SAL_DT_FROM = P_SAL_DT_FROM
                                  AND M.SAL_DT_TO = P_SAL_DT_TO
                                  AND D.ARREAR_NO IS NULL
                                  AND D.CIRCULAR_NO IS NULL);
   BEGIN
      FOR I IN CUR_EMP_EAR_DED
      LOOP
         V_EAR_AMT := 0;
         V_DED_AMT := 0;

         IF I.HEAD_TYPE = 'E'
         THEN
            V_EAR_AMT := I.AMOUNT;
            V_DED_AMT := 0;
         ELSIF I.HEAD_TYPE = 'D'
         THEN
            V_EAR_AMT := 0;
            V_DED_AMT := I.AMOUNT;
         END IF;


         IF V_EAR_AMT > 0 OR V_DED_AMT > 0
         THEN
            INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                         HEAD_CD,
                                         SALARY_DT,
                                         EARNING_AMT,
                                         DEDUCTION_AMT,
                                         I_USR,
                                         I_DT)
              VALUES   (P_SAL_PROCESS_NO,
                        I.HEAD_CD,
                        P_SALARY_DT,
                        V_EAR_AMT,
                        V_DED_AMT,
                        P_IUSR,
                        SYSDATE);
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_Emp_Ear_Ded: ' || SQLERRM;
   END PRO_EMP_EAR_DED;



   PROCEDURE PRO_ADV_SAL_DED (
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_SALARY_DT        IN     DATE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      V_LOAN_INSTL_AMT      CPF_LOAN_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_INTERST_INSTL_AMT   CPF_LOAN_APPRVL.INSTL_AMOUNT%TYPE := 0;
      V_REC_INSTL           NUMBER (5) := 0;
      V_REC_AMT             NUMBER (12, 2) := 0;
      V_HEAD_CD             SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;
      V_COUNT               NUMBER;
      V_INTERST_AMT         NUMBER (5) := 0;
      V_PRIN_AMT            NUMBER (5) := 0;
      V_ERROR               VARCHAR2 (200);
      V_SCHEDULE_CD         NUMBER (5) := 0;
      V_HEAD_CD_PRIN        SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;
      V_HEAD_CD_INT         SAL_HEAD_SETUP.HEAD_CD%TYPE := NULL;

      CURSOR CUR_ADV_SAL
      IS
         SELECT   L.LOAN_NO,
                  L.LOAN_AMT,
                  L.LOAN_DURATION,
                  L.NO_OF_INSTL,
                  L.INSTL_AMOUNT,
                  L.LAST_INSTL_AMOUNT,
                  L.INTEREST_AMOUNT,
                  L.DED_START_DT,
                  L.LOAN_TYPE_CD,
                  L.PRIN_INSTALLMENT,
                  L.INT_INSTALLMENT
           FROM   PAY_LOAN_APPL_APPRVL L
          WHERE       L.EMP_GID = P_EMP_GID
                  AND NVL (L.DISBURSE_FLAG, 'N') = 'Y'
                  AND NVL (L.DED_FRM_SAL, 'N') = 'Y'
                  AND NVL (L.DED_SUSPEND, 'N') = 'N'
                  AND L.DED_START_DT <= P_SAL_DT_TO
                  AND NVL (L.LOAN_STATUS, 'X') NOT IN ('F', 'R')
                  AND L.NO_OF_INSTL > (SELECT   COUNT (LOAN_NO)
                                         FROM   SAL_SALARY_DETL S
                                        WHERE   S.PAY_LOAN_NO = L.LOAN_NO)
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   SAL_SALARY_MST M, SAL_SALARY_DETL D
                          WHERE       M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND M.EMP_GID = P_EMP_GID
                                  AND M.SAL_DT_FROM = P_SAL_DT_FROM
                                  AND M.SAL_DT_TO = P_SAL_DT_TO
                                  AND D.PAY_LOAN_NO = L.LOAN_NO);
   BEGIN
      FOR Z IN CUR_ADV_SAL
      LOOP
         BEGIN
            SELECT   SCHEDULE_CD
              INTO   V_SCHEDULE_CD
              FROM   PAY_LOAN_SETUP
             WHERE   LOAN_TYPE_CD = Z.LOAN_TYPE_CD;
         EXCEPTION
            WHEN OTHERS
            THEN
               P_ERROR := '"Shedule Type" is not found';
         END;

         IF V_SCHEDULE_CD = '02'
         THEN
            IF NVL (Z.PRIN_INSTALLMENT, 0) > 0
            THEN
               IF Z.LOAN_TYPE_CD = '01'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'ADS';
               ELSIF Z.LOAN_TYPE_CD = '02'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'SWL';
               END IF;
            END IF;

            IF NVL (Z.PRIN_INSTALLMENT, 0) > 0
            THEN
               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            PAY_LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD,
                           P_SALARY_DT,
                           0,
                           Z.PRIN_INSTALLMENT,
                           Z.LOAN_NO,
                           P_IUSR,
                           SYSDATE);
            END IF;

            IF NVL (Z.INT_INSTALLMENT, 0) > 0
            THEN
               IF Z.LOAN_TYPE_CD = '01'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'ADSI';
               ELSIF Z.LOAN_TYPE_CD = '02'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'SWLI';
               END IF;
            END IF;


            IF NVL (Z.INT_INSTALLMENT, 0) > 0
            THEN
               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            PAY_LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD,
                           P_SALARY_DT,
                           0,
                           Z.INT_INSTALLMENT,
                           Z.LOAN_NO,
                           P_IUSR,
                           SYSDATE);
            END IF;
         ELSIF V_SCHEDULE_CD = '04'
         THEN
            PRO_INTEREST_AMOUNT (P_LOAN_TYPE      => Z.LOAN_TYPE_CD,
                                 P_EMP_GID        => P_EMP_GID,
                                 P_INTEREST_AMT   => V_INTERST_AMT,
                                 P_ERROR          => V_ERROR);

            IF V_ERROR IS NULL
            THEN
               IF Z.LOAN_TYPE_CD = '01'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD_PRIN
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'ADS';
               ELSIF Z.LOAN_TYPE_CD = '02'
               THEN
                  SELECT   H.HEAD_CD
                    INTO   V_HEAD_CD_PRIN
                    FROM   SAL_HEAD_SETUP H
                   WHERE   H.SHORT_NM = 'SWL';
               END IF;

               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            PAY_LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD_PRIN,
                           P_SALARY_DT,
                           0,
                           Z.PRIN_INSTALLMENT,
                           Z.LOAN_NO,
                           P_IUSR,
                           SYSDATE);

               IF V_INTERST_AMT > 0
               THEN
                  IF Z.LOAN_TYPE_CD = '01'
                  THEN
                     SELECT   H.HEAD_CD
                       INTO   V_HEAD_CD_INT
                       FROM   SAL_HEAD_SETUP H
                      WHERE   H.SHORT_NM = 'ADSI';
                  ELSIF Z.LOAN_TYPE_CD = '02'
                  THEN
                     SELECT   H.HEAD_CD
                       INTO   V_HEAD_CD_INT
                       FROM   SAL_HEAD_SETUP H
                      WHERE   H.SHORT_NM = 'SWLI';
                  END IF;
               END IF;


               INSERT INTO SAL_SALARY_DETL (SAL_PROCESS_NO,
                                            HEAD_CD,
                                            SALARY_DT,
                                            EARNING_AMT,
                                            DEDUCTION_AMT,
                                            PAY_LOAN_NO,
                                            I_USR,
                                            I_DT)
                 VALUES   (P_SAL_PROCESS_NO,
                           V_HEAD_CD_INT,
                           P_SALARY_DT,
                           0,
                           V_INTERST_AMT,
                           Z.LOAN_NO,
                           P_IUSR,
                           SYSDATE);
            END IF;
         ELSE
            P_ERROR := V_ERROR;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'pro_adv_sal_ded: ' || SQLERRM;
   END PRO_ADV_SAL_DED;


   PROCEDURE PRC_VOUCHER (
      P_EMP_GID          IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_VOUCHER_SOURCE   IN     VARCHAR2,
      P_SAL_PROCESS_NO   IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_PAYMENT_TYPE     IN     SAL_SALARY_MST.PAYMENT_TYPE%TYPE,
      P_OFFICE_CD        IN     HRM_OFFICE.OFFICE_CD%TYPE,
      P_DESCENDANT_OFF   IN     VARCHAR2,
      P_DIVDEPT_CD       IN     SAL_SALARY_MST.DIVDEPT_CD%TYPE,
      P_SAL_DT_FROM      IN     DATE,
      P_SAL_DT_TO        IN     DATE,
      P_APPRV_DATE       IN     DATE,
      P_OBJECT_CD        IN     GEN_OBJECT_INFO.OBJECT_CD%TYPE,
      P_IUSR             IN     VARCHAR2,
      P_ERROR               OUT VARCHAR2
   )
   IS
      RECPREM           PKG_GL_VOUCHER.T_TRANS_TAB;
      V_OBJECT_CD       GEN_OBJECT_INFO.OBJECT_CD%TYPE;
      V_VOUCHER_CD      ACC_VOUCHER_TYPE.VOUCH_CD%TYPE;
      V_INTER_OFF_ST    CHAR (1);
      V_OFFICE_CD       HRM_OFFICE.OFFICE_CD%TYPE;
      V_TRANS_ID        ACC_GL_TRANS_MST.TRANS_ID%TYPE;
      V_TRANS_DATE      DATE;
      V_COST_CENTER     HRM_OFFICE.OFFICE_CD%TYPE;
      V_NARRATION       VARCHAR2 (200);
      V_USER            VARCHAR2 (20);
      V_VOUCHER_NO      VARCHAR2 (15);
      V_NET_PAYABLE     SAL_SALARY_MST.NET_PAYABLE_AMT%TYPE;

      V_POST_AMOUNT     NUMBER (12, 2) := 0;
      V_ERROR           VARCHAR2 (3000);
      V_TRANS_ITEM_CD   ACC_GL_TRANS_ITEM_INFO.TRANS_ITEM_CD%TYPE;
      V_INDX            NUMBER (5) := 1;
      V_INS_TP_CD       NUMBER (1);
      V_PAYMENT_TYPE    SAL_SALARY_MST.PAYMENT_TYPE%TYPE;

      CURSOR CUR_SALDETL
      IS
           SELECT   M.SALARY_DT,
                    S.GLAC_SL_NO,
                    MIN (H.TRANS_ITEM_CD) TRANS_ITEM_CD,
                    M.PAYMENT_TYPE,
                    NVL (SUM (D.EARNING_AMT), 0) EARNING_AMT,
                    NVL (SUM (D.DEDUCTION_AMT), 0) DEDUCTION_AMT,
                    NVL (SUM (D.EARNING_AMT), 0)
                    - NVL (SUM (D.DEDUCTION_AMT), 0)
                       NET_PAYABLE_AMT
             FROM   SAL_SALARY_MST M,
                    SAL_SALARY_DETL D,
                    SAL_HEAD H,
                    (SELECT   D.TRANS_ITEM_CD, D.GLAC_SL_NO
                       FROM   ACC_GL_TR_SETUP_DTL D, ACC_GL_TR_SETUP_MST M
                      WHERE       M.SETUP_ID = D.SETUP_ID
                              AND M.OBJECT_CD = '05596'
                              AND M.VOUCH_CD = '05') S
            WHERE   M.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                    AND M.SAL_PROCESS_NO =
                          NVL (P_SAL_PROCESS_NO, M.SAL_PROCESS_NO)
                    AND M.PAYMENT_TYPE = NVL (P_PAYMENT_TYPE, M.PAYMENT_TYPE)
                    AND D.HEAD_CD = H.HEAD_CD
                    AND H.TRANS_ITEM_CD = S.TRANS_ITEM_CD
                    AND M.EMP_GID = NVL (P_EMP_GID, M.EMP_GID)
                    AND M.SAL_DT_FROM = P_SAL_DT_FROM
                    AND M.SAL_DT_TO = P_SAL_DT_TO
                    AND NVL (M.APPRV_STATUS, 'N') = 'Y'
                    AND M.PAYABLE_VR IS NULL
                    AND M.APPRV_DATE = P_APPRV_DATE
                    AND M.APPRV_USR = P_IUSR
                    AND M.DIVDEPT_CD = NVL (P_DIVDEPT_CD, M.DIVDEPT_CD)
                    AND ( (NVL (P_DESCENDANT_OFF, 'N') = 'N'
                           AND NVL (M.PAYBLE_OFFICE, M.OFFICE_CD) =
                                 NVL (P_OFFICE_CD,
                                      NVL (M.PAYBLE_OFFICE, M.OFFICE_CD)))
                         OR (NVL (P_DESCENDANT_OFF, 'N') = 'Y'
                             AND NVL (M.PAYBLE_OFFICE, M.OFFICE_CD) IN
                                      (    SELECT   OFFICE_CD
                                             FROM   HRM_OFFICE_SETUP
                                       START WITH   OFFICE_CD = P_OFFICE_CD
                                       CONNECT BY   PRIOR OFFICE_CD =
                                                       CONTROL_OFFICE_CD)))
         GROUP BY   M.PAYMENT_TYPE, M.SALARY_DT, S.GLAC_SL_NO;
   BEGIN
      V_OBJECT_CD := P_OBJECT_CD;

      V_VOUCHER_CD := '05';
      V_INTER_OFF_ST := '0';
      V_OFFICE_CD := FUN_FIND_REGIONAL_OFF (P_OFFICE_CD);
      V_COST_CENTER := P_OFFICE_CD;


      FOR I IN CUR_SALDETL
      LOOP
         V_NET_PAYABLE := NVL (V_NET_PAYABLE, 0) + NVL (I.NET_PAYABLE_AMT, 0);
         V_TRANS_DATE := TRUNC (I.SALARY_DT);


         IF V_PAYMENT_TYPE = 'B'
         THEN
            V_NARRATION := 'Bonus Payable at ' || I.SALARY_DT;
         ELSE
            V_NARRATION := 'Salary Payable at ' || I.SALARY_DT;
         END IF;



         V_TRANS_ITEM_CD := I.TRANS_ITEM_CD;

         IF V_TRANS_ITEM_CD IS NOT NULL
         THEN
            IF NVL (I.EARNING_AMT, 0) > 0
            THEN
               V_POST_AMOUNT := I.EARNING_AMT;
            ELSIF NVL (I.DEDUCTION_AMT, 0) > 0
            THEN
               V_POST_AMOUNT := I.DEDUCTION_AMT;
            END IF;

            IF NVL (V_POST_AMOUNT, 0) > 0
            THEN
               RECPREM (V_INDX).TRANS_ITEM_CD := V_TRANS_ITEM_CD;
               RECPREM (V_INDX).POST_AMOUNT := V_POST_AMOUNT;
               RECPREM (V_INDX).CHQ_TP := NULL;
               RECPREM (V_INDX).CHQ_NO := NULL;
               RECPREM (V_INDX).CHQ_DT := NULL;
               V_INDX := V_INDX + 1;
            END IF;
         END IF;

         IF P_PAYMENT_TYPE IS NOT NULL
         THEN
            V_PAYMENT_TYPE := P_PAYMENT_TYPE;
         ELSE
            V_PAYMENT_TYPE := I.PAYMENT_TYPE;
         END IF;
      END LOOP;

      IF NVL (V_NET_PAYABLE, 0) > 0
      THEN
         IF V_PAYMENT_TYPE = 'B'
         THEN
            V_TRANS_ITEM_CD := 213;
         ELSE
            V_TRANS_ITEM_CD := 94;
         END IF;

         RECPREM (V_INDX).TRANS_ITEM_CD := V_TRANS_ITEM_CD;
         RECPREM (V_INDX).POST_AMOUNT := V_NET_PAYABLE;
         RECPREM (V_INDX).CHQ_TP := NULL;
         RECPREM (V_INDX).CHQ_NO := NULL;
         RECPREM (V_INDX).CHQ_DT := NULL;
         PKG_GL_VOUCHER.PRO_VOUCHER_POSTING (
            P_TABLE          => RECPREM,
            P_OBJECT_CD      => V_OBJECT_CD,
            P_VOUCH_CD       => V_VOUCHER_CD,
            P_INTER_OFF_ST   => V_INTER_OFF_ST,
            P_OFFICE_CD      => V_OFFICE_CD,
            P_TRANS_ID       => V_TRANS_ID,
            P_TRANS_DATE     => V_TRANS_DATE,
            P_COST_CENTER    => V_COST_CENTER,
            P_NARRATION      => V_NARRATION,
            P_USER           => P_IUSR,
            P_INS_TP_CD      => V_INS_TP_CD,
            P_VOUCHER_NO     => V_VOUCHER_NO,
            P_ERROR          => V_ERROR
         );


         IF V_ERROR IS NULL
         THEN
            UPDATE   SAL_SALARY_MST M
               SET   M.PAYABLE_VR = V_VOUCHER_NO
             WHERE   M.SAL_PROCESS_NO =
                        NVL (P_SAL_PROCESS_NO, M.SAL_PROCESS_NO)
                     AND M.EMP_GID = NVL (P_EMP_GID, M.EMP_GID)
                     AND M.SAL_DT_FROM = P_SAL_DT_FROM
                     AND M.SAL_DT_TO = P_SAL_DT_TO
                     AND M.PAYMENT_TYPE =
                           NVL (V_PAYMENT_TYPE, M.PAYMENT_TYPE)
                     AND NVL (M.APPRV_STATUS, 'N') = 'Y'
                     AND M.PAYABLE_VR IS NULL
                     AND M.APPRV_DATE = P_APPRV_DATE
                     AND M.APPRV_USR = P_IUSR
                     AND M.DIVDEPT_CD = NVL (P_DIVDEPT_CD, M.DIVDEPT_CD)
                     AND ( (NVL (P_DESCENDANT_OFF, 'N') = 'N'
                            AND NVL (M.PAYBLE_OFFICE, M.OFFICE_CD) =
                                  NVL (P_OFFICE_CD,
                                       NVL (M.PAYBLE_OFFICE, M.OFFICE_CD)))
                          OR (NVL (P_DESCENDANT_OFF, 'N') = 'Y'
                              AND NVL (M.PAYBLE_OFFICE, M.OFFICE_CD) IN
                                       (    SELECT   OFFICE_CD
                                              FROM   HRM_OFFICE_SETUP
                                        START WITH   OFFICE_CD = P_OFFICE_CD
                                        CONNECT BY   PRIOR OFFICE_CD =
                                                        CONTROL_OFFICE_CD)));
         ELSE
            P_ERROR := V_ERROR;
         END IF;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'prc_voucher ' || SQLERRM;
   END;



   PROCEDURE PRO_INTEREST_AMOUNT (
      P_LOAN_TYPE      IN     SAL_SALARY_MST.SAL_PROCESS_NO%TYPE,
      P_EMP_GID        IN     HRM_EMPLOYEE.EMP_GID%TYPE,
      P_INTEREST_AMT      OUT NUMBER,
      P_ERROR             OUT VARCHAR2
   )
   IS
      V_INTEREST_AMOUNT   NUMBER (5) := 0;
   BEGIN
      IF P_LOAN_TYPE = '00'
      THEN
         SELECT   ROUND(NVL (OUTSTANDING_PRIN_AMT, LOAN_AMT)
                        * (NVL (INTEREST_RATE / 12, 0) / 100))
           INTO   V_INTEREST_AMOUNT
           FROM   CPF_LOAN_APPRVL
          WHERE   EMP_GID = P_EMP_GID AND LOAN_STATUS = 'P';
      ELSE
         SELECT   ROUND(NVL (OUTSTANDING_PRIN_AMT, LOAN_AMT)
                        * (NVL (INTEREST_RATE / 12, 0) / 100))
           INTO   V_INTEREST_AMOUNT
           FROM   PAY_LOAN_APPL_APPRVL
          WHERE       EMP_GID = P_EMP_GID
                  AND LOAN_TYPE_CD = P_LOAN_TYPE
                  AND LOAN_STATUS = 'P';
      END IF;

      P_INTEREST_AMT := V_INTEREST_AMOUNT;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         P_ERROR := '"Interest Amount" not found ' || SQLERRM;
      WHEN OTHERS
      THEN
         P_ERROR := '"Interest Amount" have some error ' || SQLERRM;
   END PRO_INTEREST_AMOUNT;

   PROCEDURE PRO_ARREAR_PF (P_EMP_GID       IN     HRM_EMPLOYEE.EMP_GID%TYPE,
                            P_OFFICE_CD     IN     HRM_OFFICE.OFFICE_CD%TYPE,
                            P_DESCENDANT    IN     VARCHAR2,
                            P_SAL_DT_FROM   IN     DATE,
                            P_SAL_DT_TO     IN     DATE,
                            P_SALARY_DT     IN     DATE,
                            P_IUSR          IN     VARCHAR2,
                            P_ERROR            OUT VARCHAR2)
   IS
      V_CURR_BASIC    HRM_EMPLOYEE.CURR_BASIC%TYPE := 0;
      V_AEARN_AMT     NUMBER (10, 2) := 0;

      V_ADED_AMT      NUMBER (10, 2) := 0;
      V_PF            NUMBER (10, 2) := 0;

      V_PAYABLE_AMT   NUMBER (10, 2) := 0;


      CURSOR CUR_ARREAR_LIST
      IS
         SELECT   D.ARREAR_NO,
                  S.EMP_GID,
                  D.EARNING_AMT,
                  S.SAL_PROCESS_NO,
                  ROUND (NVL ( (D.EARNING_AMT * 5) / 100, 0)) DEDUCT
           FROM   SAL_SALARY_DETL D, SAL_SALARY_MST S, HRM_EMPLOYEE E
          WHERE       S.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                  AND D.HEAD_CD = '011'
                  AND S.EMP_GID = E.EMP_GID
                  AND E.SERVICE_CD = '02'
                  AND S.SAL_DT_FROM = NVL (P_SAL_DT_FROM, S.SAL_DT_FROM)
                  AND S.SAL_DT_TO = NVL (P_SAL_DT_TO, S.SAL_DT_TO)
                  AND EXISTS
                        (SELECT   1
                           FROM   SAL_ARREAR_MST
                          WHERE       ARREAR_NO = D.ARREAR_NO
                                  AND STATUS = 0
                                  AND EMP_GID = NVL (P_EMP_GID, S.EMP_GID))
                  AND ( (NVL (P_DESCENDANT, 'N') = 'N'
                         AND E.OFFICE_CD = NVL (P_OFFICE_CD, E.OFFICE_CD))
                       OR (NVL (P_DESCENDANT, 'N') = 'Y'
                           AND E.OFFICE_CD IN
                                    (    SELECT   O.OFFICE_CD
                                           FROM   HRM_OFFICE_SETUP O
                                     START WITH   O.OFFICE_CD = P_OFFICE_CD
                                     CONNECT BY   PRIOR O.OFFICE_CD =
                                                     O.CONTROL_OFFICE_CD)));
   BEGIN
      FOR i IN CUR_ARREAR_LIST
      LOOP
         UPDATE   SAL_SALARY_DETL
            SET   DEDUCTION_AMT =
                     DEDUCTION_AMT
                     + ROUND (NVL ( (I.EARNING_AMT * 5) / 100, 0))
          WHERE   HEAD_CD = '005' AND SAL_PROCESS_NO = I.SAL_PROCESS_NO;

         /* AND EXISTS
               (SELECT   1
                  FROM   SAL_SALARY_DETL D, SAL_SALARY_MST S
                 WHERE       S.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                         AND D.HEAD_CD = '005'
                         AND S.EMP_GID = I.EMP_GID); */



         UPDATE   SAL_SALARY_MST
            SET   NET_PAYABLE_AMT = NET_PAYABLE_AMT - I.DEDUCT
          WHERE       EMP_GID = I.EMP_GID
                  AND SAL_PROCESS_NO = I.SAL_PROCESS_NO
                  AND SAL_DT_FROM = NVL (P_SAL_DT_FROM, SAL_DT_FROM)
                  AND SAL_DT_TO = NVL (P_SAL_DT_TO, SAL_DT_TO);

         UPDATE   SAL_ARREAR_MST
            SET   STATUS = 0
          WHERE   ARREAR_NO = I.ARREAR_NO AND EMP_GID = I.EMP_GID;

         COMMIT;
      END LOOP;

     /* BEGIN
         UPDATE   SAL_ARREAR_MST
            SET   STATUS = 2
          WHERE   ARREAR_NO IN
                        (SELECT   D.ARREAR_NO
                           FROM   SAL_SALARY_DETL D,
                                  SAL_SALARY_MST S,
                                  HRM_EMPLOYEE E
                          WHERE       S.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                                  AND D.HEAD_CD = '011'
                                  AND S.EMP_GID = E.EMP_GID
                                  AND E.SERVICE_CD <> '02'
                                  AND S.SAL_DT_FROM =
                                        NVL (P_SAL_DT_FROM, S.SAL_DT_FROM)
                                  AND S.SAL_DT_TO =
                                        NVL (P_SAL_DT_TO, S.SAL_DT_TO))
                  AND STATUS = 0;

         COMMIT;
      END;   */
   EXCEPTION
      WHEN OTHERS
      THEN
         P_ERROR := 'Pro_Arrear: ' || SQLERRM;
   END PRO_ARREAR_PF;
END PKG_SALARY_PROCESS_old;
/


--
-- PKG_TRANS_REPORT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_trans_report
IS
   FUNCTION fun_cheque_print (p_office_cd        hrm_office.office_cd%TYPE,
                              p_descendant       VARCHAR2,
                              p_cheque_dt_frm    DATE,
                              p_cheque_dt_to     DATE,
                              --,p_pgid                              ins_p_summery.pgid%TYPE,
                              p_trns_tp          VARCHAR2 /*p_trns_tp = 01 For claim;
                                                               01A For claim deduction amount;
                                                               01B for claim due prem adj
                                                               02 For pension commutation claim
                                                               03 For Fund requisition;
                                                               04 For Miscellaneous payment
                                                               050 For Suspense Return for Policy No
                                                               051 For Suspense Return for Proposal No
                                                               06 For Policy Loan
                                                               07 For Surrender
                                                               07A For Surrender deduction amount
                                                               08 For FA Commission
                                                               09 Employeer of FA Commission
                                                               10 Employeer of FA Release/Bonus
                                                               16 Claim Ex Gratia Cheque
                                                               17 Group Insurance
                                                               18 Others Payment
                                                               11. Claim tax summery
                                                               19   Provident Fund
                                                               20   Provident Fund Deduction
                                                               21  Utility Bill Payment
                                                               22  Gratuity Settlemet
                                                               23  Staff welfare loan
                                                               24   Advance Loan
                                                               25  Gratuity Settlemet Deduction
                                                            */
                                                         ,
                              p_whrcls           VARCHAR2 DEFAULT '1=1' ,
                              p_report_option    VARCHAR2 DEFAULT '0' )
      RETURN tp_cheque_info_tab
      PIPELINED
   IS
      v_payment_desc         VARCHAR2 (100);
      v_cheque_info          tp_cheque_info_rec;
      v_cheque_dt            VARCHAR2 (50);
      v_bank_nm              acc_bank.bank_nm%TYPE;
      v_br_nm                acc_branch.br_nm%TYPE;
      v_acc_no               VARCHAR2 (30);
      v_acc_no_2nd           VARCHAR2 (30);

      TYPE cur_tp IS REF CURSOR;

      v_cur                  cur_tp;
      v_query_str            VARCHAR2 (4000);
      v_dep_bank_info        VARCHAR2 (200);
      ----
      v_due_prem_late_fee    NUMBER (12, 2);
      v_paid_prem_late_fee   NUMBER (12, 2);
      v_approved_dt          DATE;
      v_config_act_for       NUMBER (3);
      v_lock_count           NUMBER (3);
      v_acc_info             VARCHAR2 (200);

      --Claim payment--
      CURSOR cur_clm
      IS
           SELECT   g.pgid,
                    fun_ins_pgid_to_policy_no (g.pgid) policy_no,
                    g.cheque_dt,
                    g.ben_party_cd,
                    (SELECT   party_name
                       FROM   ins_p_personal
                      WHERE   pgid = g.pgid AND party_cd = g.ben_party_cd)
                       ben_party_nm,
                    SUM (g.net_payable_amt) tot_payable_amt,
                    f_in_word (SUM (g.net_payable_amt)) in_word,
                    (SELECT   b.bank_nm
                       FROM   acc_bank b
                      WHERE   b.bank_cd = g.bank_cd)
                       bank_nm,
                    (SELECT   b.br_nm
                       FROM   acc_branch b
                      WHERE   b.bank_cd = g.bank_cd AND b.br_cd = g.branch_cd)
                       br_nm,
                    g.bank_acc_no
             FROM   clm_claim_payable_gen g, ins_p_summery s
            WHERE       NVL (g.approved_flag, 'N') = 'Y'
                    AND g.cheque_dt IS NOT NULL
                    AND g.pay_order_no IS NULL
                    AND NVL (g.payment_status, 'N') = 'N'
                    --AND g.pgid = NVL (p_pgid, g.pgid)
                    AND ( (NVL (p_descendant, 'N') = 'N'
                           AND g.control_office_cd =
                                 NVL (p_office_cd, g.control_office_cd))
                         OR (NVL (p_descendant, 'N') = 'Y'
                             AND EXISTS
                                   (    SELECT   f.office_cd
                                          FROM   hrm_office_setup f
                                         WHERE   f.office_cd = g.control_office_cd
                                    START WITH   f.office_cd =
                                                    NVL (p_office_cd,
                                                         f.office_cd)
                                    CONNECT BY   PRIOR f.office_cd =
                                                    f.control_office_cd)))
                    AND g.cheque_dt BETWEEN NVL (p_cheque_dt_frm, g.cheque_dt)
                                        AND  NVL (p_cheque_dt_to, g.cheque_dt)
                    AND g.pgid = s.pgid
         GROUP BY   g.pgid,
                    g.bank_cd,
                    g.branch_cd,
                    g.bank_acc_no,
                    g.ben_party_cd,
                    g.cheque_dt;

      --Fund Requisition--
      CURSOR cur_fund_req
      IS
         SELECT   r.to_office_cd,
                  (SELECT   office_nm
                     FROM   hrm_office
                    WHERE   office_cd = r.to_office_cd)
                     pay_to,
                  (SELECT   NVL (short_nm, office_nm)
                     FROM   hrm_office
                    WHERE   office_cd = r.to_office_cd)
                     client_nm,
                  r.approved_amt,
                  f_in_word (r.approved_amt) in_word,
                  r.transfer_dt,
                  r.cheque_no,
                  r.to_acc_no,
                  r.to_bank_cd,
                  (SELECT   bank_nm
                     FROM   acc_bank
                    WHERE   bank_cd = r.to_bank_cd)
                     bank_nm,
                  r.to_br_cd,
                  (SELECT   br_nm
                     FROM   acc_branch
                    WHERE   bank_cd = r.to_bank_cd AND br_cd = r.to_br_cd)
                     br_nm
           FROM   acc_fund_requisition r;
   --Miscellaneous Payment--
   BEGIN
      ----------ADDED BY PARAMA BISWAS ON 25/07/2016----------
      ---------TO CHECK CONFIG STATUS FOR 2ND CHEQUE-------
      BEGIN
         SELECT   applicable_on
           INTO   v_config_act_for
           FROM   ins_system_config
          WHERE   config_id = '10';
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      -----------------------------------------------------------
      /*IF p_trns_tp = '01'
                  THEN
                     FOR rec_clm IN cur_clm
                     LOOP
                        BEGIN
                           SELECT clm_detl_nm
                             INTO v_payment_desc
                             FROM clm_claim_cause_detl c
                            WHERE (c.clm_cause_cd, c.clm_detl_cd) IN (
                                     SELECT p.clm_cause_cd, p.clm_detl_cd
                                       FROM clm_claim_payable_gen p
                                      WHERE p.cheque_dt = rec_clm.cheque_dt
                                        AND p.pgid = rec_clm.pgid
                                        AND p.payable_no = (SELECT MAX (payable_no)
                                                              FROM clm_claim_payable_gen
                                                             WHERE pgid = rec_clm.pgid));
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payment_desc := 'Claim';
                        END;

                        BEGIN
                           SELECT    SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             1,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             2,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             3,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             4,
                                             1
                                            )
                                  || '     '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             5,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             6,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             7,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             8,
                                             1
                                            )
                             INTO v_cheque_dt
                             FROM DUAL;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_cheque_dt := rec_clm.cheque_dt;
                        END;

                        v_cheque_info.policy_no := rec_clm.policy_no;
                        v_cheque_info.cheque_dt1 := rec_clm.cheque_dt;
                        v_cheque_info.cheque_dt2 := v_cheque_dt;
                        v_cheque_info.client_nm := rec_clm.ben_party_nm;
                        v_cheque_info.cheque_pay_to :=
                              rec_clm.ben_party_nm
                           || ' ('
                           || rec_clm.bank_nm
                           || ', '
                           || rec_clm.br_nm
                           || ', A/C-'
                           || rec_clm.bank_acc_no
                           || ')';
                        v_cheque_info.payable_amt1 := rec_clm.tot_payable_amt;
                        v_cheque_info.payable_amt2 := rec_clm.tot_payable_amt;
                        v_cheque_info.payment_desc := v_payment_desc;
                        v_cheque_info.amt_inwords := rec_clm.in_word;
                        PIPE ROW (v_cheque_info);
                     END LOOP;
            --===========================================================================--
                  ELS*/
      IF p_trns_tp = '01'
      THEN
         v_payment_desc := 'Claim';
         v_query_str :=
            'SELECT   fun_ins_pgid_to_policy_no (g.pgid) policy_no,
                  NVL (q.cheque_date, g.cheque_dt) cheque_dt,
             NVL (q.client_name, fun_party_name (g.pgid, g.ben_party_cd)) ben_party_nm,
             NVL (SUM (q.client_amt),
                  SUM (g.net_payable_amt - NVL (g.off_manual_ded_amt, 0) - NVL (g.prem_due_late_fee, 0))
                 ) tot_payable_amt,
             f_in_word (NVL (SUM (q.client_amt),
                             SUM (  g.net_payable_amt - NVL (g.off_manual_ded_amt, 0) - NVL (g.prem_due_late_fee, 0))
                       )) in_word,
             rep_f_bank (NVL (q.bank_cd, g.bank_cd)) bank_nm,
             rep_f_branch (NVL (q.branch_cd, g.branch_cd)) br_nm,
             NVL (q.account_no, g.bank_acc_no) bank_acc_no,                  
             (SELECT clm_detl_nm
              FROM clm_claim_cause_detl
             WHERE clm_cause_cd = g.clm_cause_cd AND clm_detl_cd = g.clm_detl_cd) clm_detl_nm
             FROM clm_claim_payable_gen g, ins_p_summery s, acc_auth_per_cheque_info q
            WHERE NVL (g.approved_flag, ''N'') = ''Y''
              AND g.cheque_dt IS NOT NULL
              AND g.pay_order_no IS NULL
              AND (g.net_payable_amt - NVL(g.off_manual_ded_amt, 0)  - NVL(g.prem_due_late_fee, 0)) > 0              
              AND fun_locked_policy_auth (g.pgid)=''1''
              AND
                      '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                           AND g.control_office_cd =
                                                NVL ('''
            || p_office_cd
            || ''', g.control_office_cd)
                          )
                       OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                           AND EXISTS (
                                  SELECT     f.office_cd
                                        FROM hrm_office_setup f
                                       WHERE f.office_cd = g.control_office_cd
                                  START WITH f.office_cd =
                                                    NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                  CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                          )
                      )
                  AND g.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', g.cheque_dt)
                                      AND NVL ('''
            || p_cheque_dt_to
            || ''', g.cheque_dt)
                  AND g.pgid = s.pgid
                  AND g.pgid = q.pgid(+)
              AND g.payable_no = q.payable_no(+)
                  AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                     SELECT 1
                                       FROM acc_cheque_print_info p
                                      WHERE p.pgid = g.pgid AND p.pk_ref = g.payable_no
                                        AND NVL(p.print_doc_slno, ''1'') = ''1''
                                        AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd AND p.auth_cat_cd = ''17'' AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
             GROUP BY g.pgid, g.bank_cd, g.branch_cd, g.bank_acc_no, g.ben_party_cd, g.clm_cause_cd, g.clm_detl_cd,
              g.cheque_dt, q.cheque_date, q.client_name, q.bank_cd, q.branch_cd, q.account_no';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no, v_cheque_info.payment_desc;

            EXIT WHEN v_cur%NOTFOUND;

            --Add by Musha on 30.10.2016 Polciy no not show for lock policy
            SELECT   COUNT (1)
              INTO   v_lock_count
              FROM   ser_lock_policy
             WHERE   pgid =
                        fun_ins_policy_no_to_pgid (v_cheque_info.policy_no)
                     AND status = '1';

            IF v_lock_count > 0
            THEN
               v_cheque_info.policy_no := NULL;
            END IF;

            ---Musha on 11.05.2016---
            ---only for claim which are approved before May, 2016
            /*
            BEGIN
                SELECT NVL(SUM (a.due_prem_amt + NVL (a.due_prem_late_fee, 0)), 0),
                       NVL(SUM (a.paid_prem_late_fee_after_disc), 0),
                       MAX(p.approved_dt)
                  INTO v_due_prem_late_fee,
                       v_paid_prem_late_fee,
                       v_approved_dt
                  FROM clm_claim_payable_gen p, clm_claim_appl a
                 WHERE p.pgid = fun_ins_policy_no_to_pgid (v_cheque_info.policy_no)
                   AND p.cheque_dt = v_cheque_info.cheque_dt1
                   AND NVL (p.prem_due_late_fee, 0) > 0
                   AND p.pgid = a.pgid
                   AND p.clm_cause_cd = a.clm_cause_cd
                   AND p.clm_detl_cd = a.clm_detl_cd
                   AND p.payment_dt BETWEEN a.payable_dt AND NVL (a.payable_dt_to,
                                                                  a.payable_dt
                                                                 );

                IF v_approved_dt < TO_DATE ('01/05/2016', 'DD/MM/RRRR') THEN
                    v_cheque_info.payable_amt1  := v_cheque_info.payable_amt1 + v_paid_prem_late_fee + v_due_prem_late_fee;
                    v_cheque_info.amt_inwords   := f_in_word (v_cheque_info.payable_amt1 + v_paid_prem_late_fee + v_due_prem_late_fee);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;*/
            --------------End of 11.05.2016--------------
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            --v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '01A'
      THEN
         v_payment_desc := 'Deduction From Claim';
         v_query_str :=
            'SELECT   fun_ins_pgid_to_policy_no (g.pgid) policy_no,
                  g.CHEQUE_DATE_2ND cheque_dt,
                  (SELECT party_name
                     FROM ins_p_personal
                    WHERE pgid = g.pgid
                      AND party_cd = g.ben_party_cd and SL_NO=1) ben_party_nm,
                  SUM (g.off_manual_ded_amt) tot_payable_amt,
                  f_in_word (SUM (g.off_manual_ded_amt)) in_word,
                  rep_f_bank (g.bank_cd) bank_nm,
                  rep_f_branch (g.branch_cd) br_nm,
                  g.bank_acc_no,g.bank_acc_no_2nd
             FROM clm_claim_payable_gen g, ins_p_summery s
            WHERE NVL (g.approved_flag, ''N'') = ''Y''
              AND g.cheque_date_2nd IS NOT NULL
              AND g.cheque_no_2nd IS NULL
              AND NVL(g.OFF_MANUAL_DED_AMT, ''0'') > ''0''              
              AND fun_locked_policy_auth (g.pgid)=''1''
              AND
                      '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                           AND g.control_office_cd =
                                                NVL ('''
            || p_office_cd
            || ''', g.control_office_cd)
                          )
                       OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                           AND EXISTS (
                                  SELECT     f.office_cd
                                        FROM hrm_office_setup f
                                       WHERE f.office_cd = g.control_office_cd
                                  START WITH f.office_cd =
                                                    NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                  CONNECT BY PRIOR f.office_cd =
                                                               f.control_office_cd)
                          )
                      )
                  AND g.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', g.cheque_dt)
                                      AND NVL ('''
            || p_cheque_dt_to
            || ''', g.cheque_dt)
                  AND g.pgid = s.pgid
                  AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pgid = g.pgid
                                                    AND p.pk_ref = g.payable_no
                                                    AND NVL(p.print_doc_slno, ''1'') = ''2''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
             GROUP BY g.pgid,
                      g.bank_cd,
                      g.branch_cd,
                      g.bank_acc_no,
                      g.bank_acc_no_2nd,
                      g.ben_party_cd,
                      g.cheque_dt,
                      g.CHEQUE_DATE_2ND';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no, v_acc_no_2nd;

            EXIT WHEN v_cur%NOTFOUND;

            /*BEGIN
               SELECT    SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 1,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 2,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 3,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 4,
                                 1
                                )
                      || '     '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 5,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 6,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 7,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 8,
                                 1
                                )
                 INTO v_cheque_dt
                 FROM DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;*/
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || ' '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;

            ---------------------MODIFIED BY PARAMA BISWAS ON 24/07/2016---------
            IF v_config_act_for = '1'
            THEN
               BEGIN
                  SELECT      ' ('
                           || b.bank_nm
                           || ', '
                           || r.br_nm
                           || ', '
                           || m.acc_no
                           || ')'
                    INTO   v_dep_bank_info
                    FROM   acc_gl_bank_acc_setup_mst m,
                           acc_bank b,
                           acc_branch r
                   WHERE       one_stop_dep_acc_st = '1'
                           AND m.br_cd = r.br_cd
                           AND r.bank_cd = b.bank_cd;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_dep_bank_info := NULL;
               END;

               BEGIN
                  SELECT   com_nm || v_dep_bank_info
                    INTO   v_cheque_info.cheque_pay_to
                    FROM   insurance_company;

                  v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            ELSIF v_config_act_for = '2'
            THEN
               v_cheque_info.cheque_pay_to :=
                     v_cheque_info.client_nm
                  || ' ('
                  || v_bank_nm
                  || ', '
                  || v_br_nm
                  || ', A/C-'
                  || v_acc_no
                  || ')';
            END IF;

            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      -------------------------
      ELSIF p_trns_tp = '01B'
      THEN
         v_payment_desc := 'Due Prem. From Claim';
         v_query_str :=
            'SELECT   fun_ins_pgid_to_policy_no (g.pgid) policy_no,
              g.cheque_dt_prem cheque_dt,
              (SELECT party_name
                 FROM ins_p_personal
                WHERE pgid = g.pgid
                  AND party_cd = g.ben_party_cd and SL_NO=1) ben_party_nm,
              SUM (g.prem_due_late_fee) tot_payable_amt,
              f_in_word (SUM (g.prem_due_late_fee)) in_word,
              rep_f_bank (g.bank_cd_prem) bank_nm,
              rep_f_branch (g.br_cd_prem) br_nm,
              g.bank_acc_no_prem bank_acc_no
         FROM clm_claim_payable_gen g, ins_p_summery s
        WHERE NVL (g.approved_flag, ''N'') = ''Y''
          AND g.cheque_dt_prem IS NOT NULL
          AND g.cheque_no_prem IS NULL                      
          AND NVL(g.prem_due_late_fee, ''0'') > ''0''          
          AND fun_locked_policy_auth (g.pgid)=''1''
          AND
                      '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                           AND g.control_office_cd =
                                                NVL ('''
            || p_office_cd
            || ''', g.control_office_cd)
                          )
                       OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                           AND EXISTS (
                                  SELECT     f.office_cd
                                        FROM hrm_office_setup f
                                       WHERE f.office_cd = g.control_office_cd
                                  START WITH f.office_cd =
                                                    NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                  CONNECT BY PRIOR f.office_cd =
                                                               f.control_office_cd)
                          )
                      )
                  AND g.cheque_dt_prem BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', g.cheque_dt_prem)
                                      AND NVL ('''
            || p_cheque_dt_to
            || ''', g.cheque_dt_prem)
                  AND g.pgid = s.pgid
                  AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pgid = g.pgid
                                                    AND p.pk_ref = g.payable_no
                                                    AND NVL(p.print_doc_slno, ''1'') = ''3''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
             GROUP BY g.pgid,
                      g.bank_cd_prem,
                      g.br_cd_prem,
                      g.bank_acc_no_prem,
                      g.ben_party_cd,
                      g.cheque_dt_prem';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            --v_acc_no_2nd;
            EXIT WHEN v_cur%NOTFOUND;

            /*BEGIN
               SELECT    SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 1,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 2,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 3,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 4,
                                 1
                                )
                      || '     '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 5,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 6,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 7,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 8,
                                 1
                                )
                 INTO v_cheque_dt
                 FROM DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;*/
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || ' '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;

            BEGIN
               SELECT      ' ('
                        || b.bank_nm
                        || ', '
                        || r.br_nm
                        || ', '
                        || m.acc_no
                        || ')'
                 INTO   v_dep_bank_info
                 FROM   acc_gl_bank_acc_setup_mst m, acc_bank b, acc_branch r
                WHERE       one_stop_dep_acc_st = '1'
                        AND m.br_cd = r.br_cd
                        AND r.bank_cd = b.bank_cd;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_dep_bank_info := NULL;
            END;

            BEGIN
               SELECT   com_nm || v_dep_bank_info
                 INTO   v_cheque_info.cheque_pay_to
                 FROM   insurance_company;

               v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      -------------------------
      ELSIF p_trns_tp = '02'
      THEN
         v_payment_desc := 'Claim Commutation';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (m.pgid), m.CHEQUE_DT,
                       (  m.commutation_amt + NVL(m.suspense_amt, 0)
                        - NVL (m.loan_ded_amt, 0)
                        - NVL (m.loan_interest, 0)
                        - NVL (m.anf_premium_amt, 0)
                        - NVL (m.anf_late_fee, 0)
                       ) net_payable_amt,
                       (SELECT party_name
                          FROM ins_p_personal
                         WHERE pgid = m.pgid AND party_cd = ''03''
                           AND SL_NO = 1
                        ) ben_party_nm,
                       m.bank_acc_no,
                       (SELECT bank_nm
                          FROM acc_bank
                         WHERE bank_cd = m.bank_cd) bank_nm,
                       (SELECT br_nm
                          FROM acc_branch
                         WHERE bank_cd = m.bank_cd AND br_cd = m.branch_cd) br_nm
                  FROM clm_commutation_info m
                             WHERE '
            || NVL (p_whrcls, '1=1');

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || ' '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '03'
      THEN
         v_payment_desc := 'Fund Transfer';
         v_query_str :=
            'SELECT (SELECT office_nm
                          FROM hrm_office
                         WHERE office_cd = r.to_office_cd) pay_to,
                        (SELECT NVL (short_nm, office_nm)
                           FROM hrm_office
                          WHERE office_cd = r.to_office_cd) client_nm, r.approved_amt,
                        f_in_word (r.approved_amt), r.cheque_dt,
                        r.to_acc_no,
                        (SELECT bank_nm
                           FROM acc_bank
                          WHERE bank_cd = r.to_bank_cd) bank_nm,
                        (SELECT br_nm
                           FROM acc_branch
                          WHERE bank_cd = r.to_bank_cd AND br_cd = r.to_br_cd) br_nm
                   FROM acc_fund_requisition r
                             WHERE '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                                   AND r.to_office_cd =
                                                        NVL ('''
            || p_office_cd
            || ''', r.to_office_cd)
                                  )
                               OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                                   AND EXISTS (
                                          SELECT     f.office_cd
                                                FROM hrm_office_setup f
                                               WHERE f.office_cd = r.to_office_cd
                                          START WITH f.office_cd =
                                                            NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                          CONNECT BY PRIOR f.office_cd =
                                                                       f.control_office_cd)
                                  )
                              )
                          AND r.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_dt)
                                              AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_dt)
             AND r.cheque_dt IS NOT NULL
             AND r.cheque_no IS NULL
             order BY r.to_office_cd,
                     r.cheque_dt';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.cheque_pay_to, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_cheque_info.cheque_dt1, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.cheque_pay_to
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '04'
      THEN
         v_payment_desc := 'Miscellaneous';
         v_query_str :=
            'SELECT p.pay_to, p.chq_dt, p.trns_amt
                  FROM acc_misc_payment p
                 WHERE '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                                       AND p.office_cd =
                                                            NVL ('''
            || p_office_cd
            || ''', p.office_cd)
                                      )
                                   OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                                       AND EXISTS (
                                              SELECT     f.office_cd
                                                    FROM hrm_office_setup f
                                                   WHERE f.office_cd = p.office_cd
                                              START WITH f.office_cd =
                                                                NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                              CONNECT BY PRIOR f.office_cd =
                                                                           f.control_office_cd)
                                      )
                                  )
                              AND p.trns_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', p.trns_dt)
                                                  AND NVL ('''
            || p_cheque_dt_to
            || ''', p.trns_dt)                          
                        order BY p.office_cd,
                                 p.trns_dt';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.cheque_pay_to, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '050'
      THEN
         v_payment_desc := 'Suspense Return';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (r.pgid) policy_no,
                        r.cheque_dt, rep_f_party_name (r.party_id, r.pgid) ben_party_nm,
                        SUM (r.TOT_RETURN_AMT-NVL(r.NEW_POLICY_AMT,0)) tot_payable_amt,
                        f_in_word (SUM (r.TOT_RETURN_AMT-NVL(r.NEW_POLICY_AMT,0))) in_word,
                        (SELECT b.bank_nm
                           FROM acc_bank b
                          WHERE b.bank_cd = r.party_bank_cd) bank_nm,
                        (SELECT b.br_nm
                           FROM acc_branch b
                          WHERE b.bank_cd = r.party_bank_cd
                            AND b.br_cd = r.party_br_cd) br_nm,
                        r.PARTY_ACC_NO
                   FROM acc_sus_return r, ins_p_summery s
                  WHERE r.cheque_no IS NULL
                    AND r.cheque_dt IS NOT NULL
                    AND '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                                   AND R.PAYABLE_OFF_CD =
                                                        NVL ('''
            || p_office_cd
            || ''', R.PAYABLE_OFF_CD)
                                  )
                               OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                                   AND EXISTS (
                                          SELECT     f.office_cd
                                                FROM hrm_office_setup f
                                               WHERE f.office_cd = R.PAYABLE_OFF_CD
                                          START WITH f.office_cd =
                                                            NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                          CONNECT BY PRIOR f.office_cd =
                                                                       f.control_office_cd)
                                  )
                              )
                          AND r.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_dt)
                                              AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_dt)
                  AND r.pgid = s.pgid(+)
                  AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pgid = r.pgid
                                                    AND p.pk_ref = r.appl_no
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
                    GROUP BY r.pgid,
                             r.party_bank_cd,
                             r.party_br_cd,
                             r.party_acc_no,
                             r.party_id,
                             r.cheque_dt,
                             r.PROPOSAL_NO';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '051'
      THEN
         v_payment_desc := 'Suspense Return(2nd Cheque)';
         v_query_str :=
            'SELECT NVL(fun_ins_pgid_to_policy_no (r.pgid),PROPOSAL_NO) policy_no,
                        r.cheque_dt, rep_f_party_name (r.party_id, r.pgid) ben_party_nm,
                        SUM (NVL(r.NEW_POLICY_AMT,0)) tot_payable_amt,
                        f_in_word (SUM (NVL(r.NEW_POLICY_AMT,0))) in_word,
                        (SELECT b.bank_nm
                           FROM acc_bank b
                          WHERE b.bank_cd = r.party_bank_cd) bank_nm,
                        (SELECT b.br_nm
                           FROM acc_branch b
                          WHERE b.bank_cd = r.party_bank_cd
                            AND b.br_cd = r.party_br_cd) br_nm,
                        r.PARTY_ACC_NO
                   FROM acc_sus_return r, ins_p_summery s
                  WHERE r.cheque_no IS NULL
                    AND r.cheque_dt IS NOT NULL
                    AND NVL(R.NEW_POLICY_AMT, ''0'') > ''0''
                    AND '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                                   AND R.PAYABLE_OFF_CD =
                                                        NVL ('''
            || p_office_cd
            || ''', R.PAYABLE_OFF_CD)
                                  )
                               OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                                   AND EXISTS (
                                          SELECT     f.office_cd
                                                FROM hrm_office_setup f
                                               WHERE f.office_cd = R.PAYABLE_OFF_CD
                                          START WITH f.office_cd =
                                                            NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                          CONNECT BY PRIOR f.office_cd =
                                                                       f.control_office_cd)
                                  )
                              )
                          AND r.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_dt)
                                              AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_dt)
                  AND r.pgid = s.pgid(+)
                  AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pgid = r.pgid
                                                    AND p.pk_ref = r.appl_no
                                                    AND NVL(p.print_doc_slno, ''1'') = ''2''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
                    GROUP BY r.pgid,
                             r.party_bank_cd,
                             r.party_br_cd,
                             r.party_acc_no,
                             r.party_id,
                             r.cheque_dt,
                             r.PROPOSAL_NO';
         DBMS_OUTPUT.put_line (v_query_str);

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;

            /*v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';*/
            ---------------------MODIFIED BY PARAMA BISWAS ON 24/07/2016---------
            IF v_config_act_for = '1'
            THEN
               BEGIN
                  SELECT   com_nm
                    INTO   v_cheque_info.cheque_pay_to
                    FROM   insurance_company;

                  v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            ELSIF v_config_act_for = '2'
            THEN
               v_cheque_info.cheque_pay_to :=
                     v_cheque_info.client_nm
                  || ' ('
                  || v_bank_nm
                  || ', '
                  || v_br_nm
                  || ', A/C-'
                  || v_acc_no
                  || ')';
            END IF;

            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '06'
      THEN
         v_payment_desc := 'Policy Loan';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (r.pgid) policy_no, r.cheque_date cheque_dt,
                       rep_f_party_name (p.party_id, r.pgid) ben_party_nm,
                       r.net_payable_amount tot_payable_amt,
                       f_in_word (r.net_payable_amount) in_word, f_bank (c.bank_cd) bank_nm,
                       f_branch (c.br_cd) br_nm, c.account_no party_acc_no
                  FROM pol_loan_summary r,
                       pol_loan_application a,
                       ins_p_personal p,
                       clm_client_account c
                 WHERE NVL (r.cheque_issue_st, ''0'') = ''0''
                   AND r.cheque_date IS NOT NULL
                   AND r.pgid = a.pgid
                   AND r.sl_no = a.sl_no
                   AND a.pgid = p.pgid
                   AND a.party_cd = p.party_cd
                   AND p.sl_no = 1
                   AND a.pgid = c.pgid
                   AND a.party_cd = c.party_cd
                   AND a.party_id = c.party_id
                   AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pgid = r.pgid
                                                AND p.pk_ref = TO_CHAR(r.sl_no)
                                                AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.servicing_off = NVL ('''
            || p_office_cd
            || ''', a.servicing_off)
           )
        OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
            AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = a.servicing_off
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
   AND r.cheque_date BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_date)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_date)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            /*BEGIN
               SELECT    SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 1,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 2,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 3,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 4,
                                 1
                                )
                      || '     '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 5,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 6,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 7,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 8,
                                 1
                                )
                 INTO v_cheque_dt
                 FROM DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;*/
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '07'
      THEN
         v_payment_desc := 'Surrender';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (r.pgid) policy_no,
               r.pay_order_date cheque_dt,
               rep_f_party_name (p.party_id, r.pgid) ben_party_nm,
               r.party_apprv_amt tot_payable_amt,
               f_in_word (r.party_apprv_amt) in_word, f_bank (r.bank_cd) bank_nm,
               f_branch (r.branch_cd) br_nm, r.account_no party_acc_no
          FROM sur_disburs_mst r, sur_sur_application a, ins_p_personal p
         WHERE nvl(r.check_issue_st,''0'') = ''0''
           AND r.appl_sl_no = a.appl_sl_no
           AND a.pgid = p.pgid
           AND a.party_cd = p.party_cd
           AND p.sl_no = 1
           AND ('
            || p_report_option
            || '= ''0''
                OR (    '
            || p_report_option
            || '= ''1''
                    AND (   NOT EXISTS (
                                     SELECT 1
                                       FROM acc_cheque_print_info p
                                      WHERE p.pgid = r.pgid
                                        AND p.pk_ref = r.appl_sl_no
                                        AND NVL(p.print_doc_slno, ''1'') = ''1''
                                        AND NVL(p.print_doc_tp, ''2'') = ''2'')
                         OR EXISTS (
                               SELECT 1
                                 FROM clm_privilege_emp e, clm_privilege p
                                WHERE e.prv_cd = p.prv_cd
                                  AND p.auth_cat_cd = ''17''
                                  AND UPPER (e.db_user) = UPPER (USER))
                        )
                   )
               )
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND r.control_office_cd = NVL ('''
            || p_office_cd
            || ''', r.control_office_cd)
                    )
            OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                AND EXISTS (
                          SELECT     f.office_cd
                                FROM hrm_office_setup f
                               WHERE f.office_cd = r.control_office_cd
                          START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                          CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                   )
               )
            AND r.pay_order_date BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.pay_order_date)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', r.pay_order_date)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            /*BEGIN
               SELECT    SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 1,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 2,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 3,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 4,
                                 1
                                )
                      || '     '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 5,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 6,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 7,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 8,
                                 1
                                )
                 INTO v_cheque_dt
                 FROM DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;*/
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '07A'
      THEN
         v_payment_desc := 'Deduction From Surrender';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (r.pgid) policy_no,
               r.cheque_date_2nd cheque_dt,
               rep_f_party_name (p.party_id, r.pgid) ben_party_nm,
               r.off_manual_ded_amt tot_payable_amt,
               f_in_word (r.off_manual_ded_amt) in_word, f_bank (r.bank_cd_2nd) bank_nm,
               f_branch (r.branch_cd_2nd) br_nm, r.account_no_2nd party_acc_no
          FROM sur_disburs_mst r, sur_sur_application a, ins_p_personal p
         WHERE nvl(r.check_issue_st,''0'') = ''0''
           AND r.appl_sl_no = a.appl_sl_no
           AND a.pgid = p.pgid
           AND a.party_cd = p.party_cd
           AND NVL(r.off_manual_ded_amt, 0) > 0
           AND p.sl_no = 1
           AND ('
            || p_report_option
            || '= ''0''
                OR (    '
            || p_report_option
            || '= ''1''
                    AND (   NOT EXISTS (
                                     SELECT 1
                                       FROM acc_cheque_print_info p
                                      WHERE p.pgid = r.pgid
                                        AND p.pk_ref = r.appl_sl_no
                                        AND NVL(p.print_doc_slno, ''1'') = ''2''
                                        AND NVL(p.print_doc_tp, ''2'') = ''2'')
                         OR EXISTS (
                               SELECT 1
                                 FROM clm_privilege_emp e, clm_privilege p
                                WHERE e.prv_cd = p.prv_cd
                                  AND p.auth_cat_cd = ''17''
                                  AND UPPER (e.db_user) = UPPER (USER))
                        )
                   )
               )
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND r.control_office_cd = NVL ('''
            || p_office_cd
            || ''', r.control_office_cd)
                    )
            OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                AND EXISTS (
                          SELECT     f.office_cd
                                FROM hrm_office_setup f
                               WHERE f.office_cd = r.control_office_cd
                          START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                          CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                   )
               )
            AND r.cheque_date_2nd BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_date_2nd)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_date_2nd)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            /*BEGIN
               SELECT    SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 1,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 2,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 3,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 4,
                                 1
                                )
                      || '     '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 5,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 6,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 7,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 8,
                                 1
                                )
                 INTO v_cheque_dt
                 FROM DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;*/
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;

            ---------------------MODIFIED BY PARAMA BISWAS ON 24/07/2016---------
            IF v_config_act_for = '1'
            THEN
               BEGIN
                  SELECT      ' ('
                           || b.bank_nm
                           || ', '
                           || r.br_nm
                           || ', '
                           || m.acc_no
                           || ')'
                    INTO   v_dep_bank_info
                    FROM   acc_gl_bank_acc_setup_mst m,
                           acc_bank b,
                           acc_branch r
                   WHERE       one_stop_dep_acc_st = '1'
                           AND m.br_cd = r.br_cd
                           AND r.bank_cd = b.bank_cd;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_dep_bank_info := NULL;
               END;

               BEGIN
                  SELECT   com_nm || v_dep_bank_info
                    INTO   v_cheque_info.cheque_pay_to
                    FROM   insurance_company;

                  v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            ELSIF v_config_act_for = '2'
            THEN
               v_cheque_info.cheque_pay_to :=
                     v_cheque_info.client_nm
                  || ' ('
                  || v_bank_nm
                  || ', '
                  || v_br_nm
                  || ', A/C-'
                  || v_acc_no
                  || ')';
            END IF;

            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '08'
      THEN
         v_payment_desc := 'Agent Commission';
         v_query_str :=
            'SELECT   r.agent_id policy_no,
                     r.cheque_dt cheque_dt,
                     p.agent_nm_eng ben_party_nm,
                     SUM(r.gross_payable_amt - r.tax_ded_amt -NVL(r.tot_ded_amount, 0) + NVL(r.tot_paid_ded_amount,0) + NVL(r.tot_paid_interest_amt, 0)) tot_payable_amt,
                     f_in_word (SUM(r.gross_payable_amt - r.tax_ded_amt -NVL(r.tot_ded_amount, 0) + NVL(r.tot_paid_ded_amount,0) + NVL(r.tot_paid_interest_amt, 0))) in_word,
                     rep_f_bank (r.agent_acc_bank_cd) bank_nm,
                     rep_f_branch (r.agent_acc_br_cd) br_nm,
                     r.agent_acc_no party_acc_no
              FROM   com_agent_com_bill_mst r, hrm_agent p
             WHERE NVL(r.disburse_status,''0'') = ''0''
               AND r.agent_id = p.agent_id
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                   AND r.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''', r.OFFICE_CD)
                        )
                OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                    AND EXISTS (
                              SELECT     f.office_cd
                                    FROM hrm_office_setup f
                                   WHERE f.office_cd = r.OFFICE_CD
                              START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                              CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                       )
                   )
                AND r.CHEQUE_DT BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.CHEQUE_DT)
                                AND NVL ('''
            || p_cheque_dt_to
            || ''', r.CHEQUE_DT)
            GROUP BY   r.agent_id,
                       r.cheque_dt,
                       p.agent_nm_eng,
                       r.agent_acc_bank_cd,
                       r.agent_acc_br_cd,
                       r.agent_acc_no';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '09'
      THEN
         v_payment_desc := 'Employeer of FA Commission';
         v_query_str :=
            'SELECT   f_emp_id(r.emp_gid) policy_no,
                     r.cheque_dt cheque_dt,
                     p.emp_nm_eng ben_party_nm,
                     SUM(r.gross_payable_amt - r.tax_ded_amt -NVL(r.tot_ded_amount, 0) + NVL(r.tot_paid_ded_amount,0) + NVL(r.tot_paid_interest_amt, 0)) tot_payable_amt,
                     f_in_word (SUM(r.gross_payable_amt - r.tax_ded_amt -NVL(r.tot_ded_amount, 0) + NVL(r.tot_paid_ded_amount,0) + NVL(r.tot_paid_interest_amt, 0))) in_word,
                     rep_f_bank (r.emp_acc_bank_cd) bank_nm,
                     rep_f_branch (r.emp_acc_br_cd) br_nm,
                     r.emp_acc_no party_acc_no
              FROM   com_emp_com_bill_mst r, hrm_employee p
             WHERE NVL(r.disburse_status,''0'') = ''0''
               AND r.emp_gid = p.emp_gid
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                   AND r.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''', r.OFFICE_CD)
                        )
                OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                    AND EXISTS (
                              SELECT     f.office_cd
                                    FROM hrm_office_setup f
                                   WHERE f.office_cd = r.OFFICE_CD
                              START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                              CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                       )
                   )
                AND r.CHEQUE_DT BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.CHEQUE_DT)
                                AND NVL ('''
            || p_cheque_dt_to
            || ''', r.CHEQUE_DT)
            GROUP BY   r.emp_gid,
                   r.cheque_dt,
                   p.emp_nm_eng,
                   r.emp_acc_bank_cd,
                   r.emp_acc_br_cd,
                   r.emp_acc_no';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '10'
      THEN
         v_payment_desc := 'Employeer of FA Release/Bonus';
         v_query_str :=
            'SELECT   f_emp_id(r.emp_gid) policy_no,
                     r.cheque_dt cheque_dt,
                     p.emp_nm_eng ben_party_nm,
                    SUM (r.gross_payable_amt - r.tax_ded_amt) tot_payable_amt,
                     f_in_word (SUM(r.gross_payable_amt - r.tax_ded_amt)) in_word,
                     rep_f_bank (r.emp_acc_bank_cd) bank_nm,
                     rep_f_branch (r.emp_acc_br_cd) br_nm,
                     r.emp_acc_no party_acc_no
              FROM   com_emp_bon_com_bil_mst r, hrm_employee p
             WHERE NVL(r.disburse_status,''0'') = ''0''
               AND r.emp_gid = p.emp_gid
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                   AND r.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''', r.OFFICE_CD)
                        )
                OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                    AND EXISTS (
                              SELECT     f.office_cd
                                    FROM hrm_office_setup f
                                   WHERE f.office_cd = r.OFFICE_CD
                              START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                              CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                       )
                   )
                AND r.CHEQUE_DT BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.CHEQUE_DT)
                                AND NVL ('''
            || p_cheque_dt_to
            || ''', r.CHEQUE_DT)
            GROUP BY   r.emp_gid,
                       r.cheque_dt,
                       p.emp_nm_eng,
                       r.emp_acc_bank_cd,
                       r.emp_acc_br_cd,
                       r.emp_acc_no';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '16'
      THEN
         v_payment_desc := 'Claim Ex Gratia Cheque';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (m.pgid), m.cheque_dt,
                   NVL (m.net_pay_amt, 0) net_payable_amt,
                   (SELECT party_name
                      FROM ins_p_personal
                     WHERE pgid = m.pgid
                       AND party_cd = t.ben_party_cd
                       AND sl_no = 1) ben_party_nm,
                   m.CLIENT_ACC_NO, (SELECT bank_nm
                                     FROM acc_bank
                                    WHERE bank_cd = m.CLIENT_BANK_CD) bank_nm,
                   (SELECT br_nm
                      FROM acc_branch
                     WHERE bank_cd = m.CLIENT_BANK_CD AND br_cd = m.CLIENT_BR_CD) br_nm
              FROM clm_exgratia_claim m, clm_claim_mst t
                             WHERE m.pgid = t.pgid 
                               AND m.intimation_no = t.intimation_no
                               AND '
            || NVL (p_whrcls, '1=1');

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '17'
      THEN
         v_payment_desc := 'Group Insurance';
         v_query_str :=
            'SELECT p.policy_no, m.cheque_dt, NVL (m.claim_amt, 0) net_payable_amt
       ,am.CLAIMANT_NM ben_party_nm,
       t.account_no, f_bank (t.bank_cd) bank_nm, f_branch (t.branch_cd) br_nm
  FROM grp_claim_detl m,
       grp_ins_claim_appl_dtl t,
       grp_group_ins_summery p,
       grp_ins_claim_appl_mst am
 WHERE m.pgid = t.pgid
   AND m.sl_no = t.sl_no
   AND p.pgid = t.pgid
   AND m.clm_id = t.clm_id
   AND t.clm_id = am.clm_id
                               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                   AND p.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''', p.OFFICE_CD)
                        )
                OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                    AND EXISTS (
                              SELECT     f.office_cd
                                    FROM hrm_office_setup f
                                   WHERE f.office_cd = p.OFFICE_CD
                              START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                              CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                       )
                   )
                AND m.CHEQUE_DT BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', m.CHEQUE_DT)
                                AND NVL ('''
            || p_cheque_dt_to
            || ''', m.CHEQUE_DT)
            ';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            IF v_acc_no IS NOT NULL
            THEN
               v_acc_info :=
                     ' ('
                  || v_bank_nm
                  || ', '
                  || v_br_nm
                  || ', A/C-'
                  || v_acc_no
                  || ')';
            ELSE
               v_acc_info := NULL;
            END IF;

            v_cheque_info.cheque_pay_to :=
               v_cheque_info.client_nm || v_acc_info;
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '18'
      THEN
         v_payment_desc := 'Others Payment';
         v_query_str :=
            'SELECT NVL (m.supplier_id, m.emp_gid), m.chq_dt cheque_dt,
                       NVL (m.trns_amt, 0) net_payable_amt,
                       (SELECT supplier_nm
                          FROM acc_coll_media_supplier
                         WHERE supplier_id = m.supplier_id) ben_party_nm, NULL bank_acc_no,
                       NULL bank_nm,
                       NULL br_nm
                  FROM acc_oth_pay_mst m
                 WHERE NVL (m.approved_st, ''0'') = ''0'' 
                   AND m.chq_dt IS NOT NULL '
            || NVL (p_whrcls, '1=1');

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ----------ADDED BY PARAMA BISWAS ON 22/08/2016----------------
      ELSIF p_trns_tp = '21'
      THEN
         v_payment_desc := 'Utility Bill Payment';
         v_query_str :=
            'SELECT   M.BILL_ID,
                 m.CHQ_DT,
                 M.NET_PAYABLE_AMT,
                 (CASE
                     WHEN M.BUILD_ID IS NOT NULL
                     THEN
                        (SELECT   BUILD_NM
                           FROM   UTS_BUILDING_MST S
                          WHERE   S.BUILD_ID = M.BUILD_ID)
                     WHEN M.AGREE_ID IS NOT NULL
                     THEN
                        (SELECT   R.HOUSE_OWNER_NAME
                           FROM   UTS_OFF_RENT_AGRMNT_MST R
                          WHERE   R.AGREE_ID = M.AGREE_ID)
                  END)
                    ben_party_nm,
                 b.PAYMNT_BANK_ACC ACCOUNT_NO,
                 f_bank (b.PAYMNT_BANK_CD) bank_nm,
                 f_branch (b.PAYMNT_BRANCH_CD) br_nm
          FROM   UTS_OFF_BILL_DTL m, UTS_OFF_BILL_MST t, uts_off_rent_agrmnt_mst b
         WHERE       m.BILL_ID = t.BILL_ID
                 AND m.agree_id = b.agree_id
                 AND b.agree_status = ''A''
                AND m.CHQ_DT IS NOT NULL
                AND M.CHQ_NO IS NULL
                               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND m.CHQ_DT = NVL ('''
            || p_cheque_dt_frm
            || ''', m.CHQ_DT)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --------------------------
      ----------Add By Sharmin Sultana Prite 02-10-2016 for gratuity
      ELSIF p_trns_tp = '22'
      THEN
         v_payment_desc := 'Gratuity';
         v_query_str :=
            'SELECT TO_CHAR (f_emp_id (r.emp_gid)) policy_no, d.cheque_date cheque_dt,
       d.disburs_amt tot_payable_amt, a.applicant_name ben_party_nm,
       d.account_no party_acc_no, f_bank (d.bank_cd) bank_nm,
       f_branch (d.branch_cd) br_nm
  FROM gra_gratuity_settlement r,
       gra_gratuity_settlement_dtl d,
       gra_settle_appl_dtl a
 WHERE d.cheque_no IS NOT NULL
   AND d.cheque_date IS NOT NULL
   AND r.appl_no = d.appl_no
   AND d.appl_no = a.appl_no
   AND d.sl_no = a.sl_no
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND r.office_cd = NVL ('''
            || p_office_cd
            || ''',  r.office_cd
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  r.office_cd
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       ))
        AND d.cheque_date BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', d.cheque_date)
                                      AND NVL ('''
            || p_cheque_dt_to
            || ''', d.cheque_date)
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = d.CHEQUE_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===================== end of gratuity-====================
      ---------*************************************------------------------
      /*
      Add by :Sharmin Sultana Prite
      Date:22-March-2017
      Puupose:Loan Application Approval/Loan Recovery
      */
      ELSIF p_trns_tp IN ('23', '24')
      THEN
         IF p_trns_tp = '23'
         THEN
            v_payment_desc := 'Welfare Loan Approval';
         ELSIF p_trns_tp = '24'
         THEN
            v_payment_desc := 'Advance Loan Approval';
         END IF;

         v_query_str :=
            'SELECT   to_char(f_emp_id (r.emp_gid)) policy_no, r.cheque_dt cheque_dt, r.loan_amt tot_payable_amt,
                       f_emp_nm (r.emp_gid) ben_party_nm,
                       r.account_no party_acc_no, f_bank (r.bank_cd) bank_nm,
                       f_branch (r.br_cd) br_nm
           FROM   PAY_LOAN_APPL_APPRVL r
         WHERE r.CHEQUE_NO IS  NULL
         AND r.CHEQUE_DT IS NOT NULL
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (r.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (r.emp_gid)
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  F_EMP_OFFICE_CD (r.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )) 
             AND r.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_dt)
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = r.CHEQUE_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '19'
      THEN
         v_payment_desc := 'PF';
         v_query_str :=
            'SELECT f_emp_id (a.emp_gid) policy_no, d.pay_order_date cheque_dt,
               m.tot_disburs_amount tot_payable_amt, l.applicant_name emp_nm,
               d.account_no party_acc_no, f_bank (d.bank_cd) bank_nm,
               f_branch (d.branch_cd) br_nm
          FROM cpf_final_settle_disburs_dtl d,
               cpf_final_settl_appl_mst a,
               cpf_final_settl_appl_dtl l,
               cpf_final_settle_disburs_mst m
         WHERE a.appl_no = m.appl_no
           AND d.appl_no = m.appl_no
           AND a.appl_no = l.appl_no
           AND d.sl_no = l.sl_no
           AND d.pay_order_no IS NOT NULL
           AND d.pay_order_date IS NOT NULL
           AND m.payment_type = 2
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''',  a.OFFICE_CD
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  a.OFFICE_CD
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       ))
        AND d.PAY_ORDER_DATE =NVL('''
            || p_cheque_dt_frm
            || ''',d.PAY_ORDER_DATE) 
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = d.PAY_ORDER_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '20'
      THEN
         v_payment_desc := 'PF_DED';
         v_query_str :=
            'SELECT   NULL emp_id,
         s.cheque_date cheque_dt,
         s.ded_amount tot_payable_amt,
         f_emp_nm (a.emp_gid) emp_nm,
         s.DED_ACC_NO  party_acc_no,
         f_bank (s.ded_bank_cd) bank_nm,
         f_branch (s.ded_branch_cd) br_nm
  FROM   cpf_final_settl_appl_mst a,
         CPF_FINAL_SETTL_APPRV_DED s
 WHERE      S.APPL_NO=a.APPL_NO
         AND s.APPL_NO IS NOT NULL
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''',  a.OFFICE_CD
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  a.OFFICE_CD
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.CHEQUE_DATE =NVL('''
            || p_cheque_dt_frm
            || ''',s.CHEQUE_DATE) 
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = s.CHEQUE_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            /* v_cheque_info.cheque_pay_to :=
                   v_cheque_info.client_nm
                || ' ('
                || v_bank_nm
                || ', '
                || v_br_nm
                || ', A/C-'
                || v_acc_no
                || ')';*/
            BEGIN
               SELECT   com_nm || v_dep_bank_info
                 INTO   v_cheque_info.cheque_pay_to
                 FROM   insurance_company;

               v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '25'
      THEN
         v_payment_desc := 'GRA_DED';
         v_query_str :=
            'SELECT NULL emp_id, s.cheque_date cheque_dt, s.ded_amount tot_payable_amt,
       f_emp_nm (a.emp_gid) emp_nm, s.ded_acc_no party_acc_no,
       f_bank (s.ded_bank_cd) bank_nm, f_branch (s.ded_branch_cd) br_nm
  FROM gra_gratuity_settlement a, gra_gratuity_settlement_ded s
 WHERE s.appl_no = a.appl_no 
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''',  a.OFFICE_CD
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  a.OFFICE_CD
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.CHEQUE_DATE =NVL('''
            || p_cheque_dt_frm
            || ''',s.CHEQUE_DATE) 
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = s.CHEQUE_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            /* v_cheque_info.cheque_pay_to :=
                   v_cheque_info.client_nm
                || ' ('
                || v_bank_nm
                || ', '
                || v_br_nm
                || ', A/C-'
                || v_acc_no
                || ')';*/
            BEGIN
               SELECT   com_nm || v_dep_bank_info
                 INTO   v_cheque_info.cheque_pay_to
                 FROM   insurance_company;

               v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --========================================================
      ELSIF p_trns_tp = '26'
      THEN
         v_payment_desc := 'Employee Collection Incentive';
         v_query_str :=
            'SELECT   f_emp_id(r.emp_gid) policy_no,
                     r.cheque_dt cheque_dt,
                     p.emp_nm_eng ben_party_nm,
                     SUM(bill_amount) tot_payable_amt,
                     f_in_word (SUM(bill_amount)) in_word,
                     rep_f_bank (r.emp_acc_bank_cd) bank_nm,
                     rep_f_branch (r.emp_acc_br_cd) br_nm,
                     r.emp_acc_no party_acc_no
              FROM   com_emp_coll_inc_bill_mst r, hrm_employee p
             WHERE NVL(r.disburse_status,''0'') = ''0''
               AND r.emp_gid = p.emp_gid
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                   AND r.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''', r.OFFICE_CD)
                        )
                OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                    AND EXISTS (
                              SELECT     f.office_cd
                                    FROM hrm_office_setup f
                                   WHERE f.office_cd = r.OFFICE_CD
                              START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                              CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                       )
                   )
                AND r.CHEQUE_DT BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.CHEQUE_DT)
                                AND NVL ('''
            || p_cheque_dt_to
            || ''', r.CHEQUE_DT)
            GROUP BY   r.emp_gid,
                   r.cheque_dt,
                   p.emp_nm_eng,
                   r.emp_acc_bank_cd,
                   r.emp_acc_br_cd,
                   r.emp_acc_no';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      END IF;

      RETURN;
   /*EXCEPTION
         WHEN OTHERS
         THEN
            NULL;*/
   END fun_cheque_print;

   FUNCTION fun_payroll_cheque_print (
      p_office_cd        hrm_office.office_cd%TYPE,
      p_descendant       VARCHAR2,
      p_cheque_dt_frm    DATE,
      p_cheque_dt_to     DATE,
      p_trns_tp          VARCHAR2, /*p_trns_tp = 11 For cpf;
                                    p_trans_tp=19 for PF*/
      p_whrcls           VARCHAR2 DEFAULT '1=1' ,
      p_report_option    VARCHAR2 DEFAULT '0'
   )
      RETURN tp_payroll_cheque_tab
      PIPELINED
   IS
      v_payment_desc    VARCHAR2 (50);
      v_cheque_info     tp_payroll_cheque_rec;
      v_cheque_dt       VARCHAR2 (50);
      v_bank_nm         acc_bank.bank_nm%TYPE;
      v_br_nm           acc_branch.br_nm%TYPE;
      v_acc_no          VARCHAR2 (30);

      TYPE cur_tp IS REF CURSOR;

      v_cur             cur_tp;
      v_query_str       VARCHAR2 (4000);
      v_cheque_pay_to   VARCHAR2 (100);
   BEGIN
      IF p_trns_tp = '11'                                         ----'11'=CPF
      THEN
         v_payment_desc := 'CPF';
         v_query_str :=
            'SELECT f_emp_id (r.emp_gid) emp_id, r.cheque_dt cheque_dt,
                       f_emp_nm (r.emp_gid) emp_nm, r.loan_amt loan_amt,
                       f_in_word (r.loan_amt) in_word, f_bank (r.bank_cd) bank_nm,
                       f_branch (r.br_cd) br_nm, r.account_no party_acc_no
               FROM cpf_loan_apprvl r
               WHERE NVL (r.disburse_flag, ''N'') = ''N''
                     AND r.cheque_dt IS NOT NULL
                     AND r.cheque_no IS NULL
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (r.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (r.emp_gid))
           )
        OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
            AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = F_EMP_OFFICE_CD (r.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
   AND r.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_dt)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ----------------------------end CPF----------------------------------------
      ELSIF p_trns_tp = '12'                                   ----'12'=Salary
      THEN
         v_payment_desc := 'Salary';
         v_query_str :=
            'SELECT f_emp_id (s.emp_gid) emp_id, s.cheque_dt cheque_dt,
                       f_emp_nm (s.emp_gid) emp_nm, s.net_payable_amt tot_payable_amt,
                       f_in_word (s.net_payable_amt) in_word, f_bank (s.bank_cd) bank_nm,
                       f_branch (s.br_cd) br_nm, s.account_no party_acc_no
                FROM sal_salary_mst s
                WHERE NVL (s.disburse_flag, ''N'') = ''N''
                      AND s.cheque_dt IS NOT NULL
                      AND s.cheque_no IS NULL
                      AND s.payment_type=''S''
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (s.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (s.emp_gid))
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = F_EMP_OFFICE_CD (s.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', s.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', s.cheque_dt)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      -------------------------------end salary-------------------------------------------
      ELSIF p_trns_tp = '15'                                    ----'15'=Bonus
      THEN
         v_payment_desc := 'Bonus';
         v_query_str :=
            'SELECT f_emp_id (s.emp_gid) emp_id, s.cheque_dt cheque_dt,
                       f_emp_nm (s.emp_gid) emp_nm, s.net_payable_amt tot_payable_amt,
                       f_in_word (s.net_payable_amt) in_word, f_bank (s.bank_cd) bank_nm,
                       f_branch (s.br_cd) br_nm, s.account_no party_acc_no
                FROM sal_salary_mst s
                WHERE NVL (s.disburse_flag, ''N'') = ''N''
                      AND s.cheque_dt IS NOT NULL
                      AND s.cheque_no IS NULL
                      AND s.payment_type=''B''
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (s.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (s.emp_gid))
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = F_EMP_OFFICE_CD (s.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', s.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', s.cheque_dt)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ----------------------------------------------end bonus---------------------
      ELSIF p_trns_tp = '13'                                  ----'13'=Pension
      THEN
         v_payment_desc := 'Pension';
         v_query_str :=
            'SELECT f_emp_id (p.emp_gid) emp_id, p.cheque_dt cheque_dt,
       f_emp_nm (p.emp_gid) emp_nm, p.net_payable_amt tot_payable_amt,
       f_in_word (p.net_payable_amt) in_word, f_bank (p.emp_bank_cd) bank_nm,
       f_branch (p.emp_br_cd) br_nm, p.emp_account_no party_acc_no
  FROM pen_pension_mst p
 WHERE NVL (p.disburse_flag, ''N'') = ''N''
   AND p.cheque_dt IS NOT NULL
   AND p.cheque_no IS NULL
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (p.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (p.emp_gid))
           )
        OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
            AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = F_EMP_OFFICE_CD (p.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
   AND p.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', p.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', p.cheque_dt)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      -------------------------------------------------------------------------------
      ELSIF p_trns_tp = '15'                                    ----'15'=Bonus
      THEN
         v_payment_desc := 'Bonus';
         v_query_str :=
            'SELECT f_emp_id (s.emp_gid) emp_id, s.cheque_dt cheque_dt,
                       f_emp_nm (s.emp_gid) emp_nm, s.net_payable_amt tot_payable_amt,
                       f_in_word (s.net_payable_amt) in_word, f_bank (s.bank_cd) bank_nm,
                       f_branch (s.br_cd) br_nm, s.account_no party_acc_no
                FROM sal_salary_mst s
                WHERE NVL (s.disburse_flag, ''N'') = ''N''
                      AND s.cheque_dt IS NOT NULL
                      AND s.cheque_no IS NULL
                      AND s.payment_type=''B''
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (s.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (s.emp_gid))
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = F_EMP_OFFICE_CD (s.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', s.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', s.cheque_dt)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ------------    Add By Sharmin Sultana Prite 16-August-2016 for PF settlemet
      ELSIF p_trns_tp = '19'
      THEN
         v_payment_desc := 'PF';
         v_query_str :=
            'SELECT   f_emp_id (a.emp_gid) emp_id,
         d.PAY_ORDER_DATE cheque_dt,
         f_emp_nm (a.emp_gid) emp_nm,
         m.tot_disburs_amount tot_payable_amt,
         f_in_word (m.tot_disburs_amount) in_word,
         f_bank (d.BANK_CD) bank_nm,
         f_branch (d.BRANCH_CD) br_nm,
         d.ACCOUNT_NO party_acc_no
           FROM   cpf_final_settle_disburs_dtl d,
         cpf_final_settl_appl_mst a,
         cpf_final_settle_disburs_mst m
         WHERE       a.APPL_NO = m.APPL_NO
         AND D.APPL_NO = M.APPL_NO
         AND d.PAY_ORDER_NO IS NOT NULL
         AND d.PAY_ORDER_DATE IS NOT NULL
         AND m.payment_type = 2
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''',  a.OFFICE_CD
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  a.OFFICE_CD
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       ))
        AND d.PAY_ORDER_DATE =NVL('''
            || p_cheque_dt_frm
            || ''',d.PAY_ORDER_DATE) 
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = d.PAY_ORDER_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ---For PF Deduction
      ELSIF p_trns_tp = '20'
      THEN
         v_payment_desc := 'PF_DED';
         v_query_str :=
            'SELECT   NULL emp_id,
         s.cheque_date cheque_dt,
         f_emp_nm (a.emp_gid) emp_nm,
         s.ded_amount tot_payable_amt,
         f_in_word (s.ded_amount) in_word,
         f_bank (s.ded_bank_cd) bank_nm,
         f_branch (s.ded_branch_cd) br_nm,
         s.DED_ACC_NO  party_acc_no
  FROM   cpf_final_settl_appl_mst a,
         CPF_FINAL_SETTL_APPRV_DED s
 WHERE      S.APPL_NO=a.APPL_NO
         AND s.APPL_NO IS NOT NULL
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''',  a.OFFICE_CD
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  a.OFFICE_CD
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.CHEQUE_DATE =NVL('''
            || p_cheque_dt_frm
            || ''',s.CHEQUE_DATE) 
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = s.CHEQUE_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;

            /*v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';*/
            BEGIN
               SELECT   com_nm INTO v_cheque_pay_to FROM insurance_company;

               v_cheque_info.cheque_pay_to := v_cheque_pay_to;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            v_cheque_info.emp_nm := v_cheque_pay_to || v_cheque_info.emp_nm;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      END IF;
   END fun_payroll_cheque_print;

   /************Add by Musha on 28-02-2015************/
   FUNCTION fun_policy_ledger_info (p_pgid         ins_p_proposal.pgid%TYPE,
                                    p_office_cd    hrm_office.office_cd%TYPE,
                                    p_check        VARCHAR2)
      RETURN tp_policy_ledger_tab
      PIPELINED
   AS
      v_ledger_info            tp_policy_ledger_rec;
      v_adjusted_by            VARCHAR2 (150);
      v_adjustment_date        DATE;
      v_receipt_date           DATE;
      v_req_amount             NUMBER;
      v_coll_amount            NUMBER;
      v_adv_status             VARCHAR2 (2);
      v_adjusted_method        VARCHAR2 (50);
      v_receipt_no             VARCHAR2 (500);
      v_partial_receipt_no     VARCHAR2 (100);
      v_all_coll_amount        VARCHAR2 (500);
      v_all_par_coll_amount    VARCHAR2 (500);
      v_all_par_receipt_date   VARCHAR2 (300);
      v_all_receipt_date       VARCHAR2 (500);
      v_adj_slip_no            VARCHAR2 (30);
      v_no_of_instl            NUMBER (3);
      v_tot_premium_amt        acc_receivables.tot_premium_amt%TYPE;
      v_adj_prem_amt           acc_receivables.tot_premium_amt%TYPE;
      v_unadj_prem_amt         acc_receivables.tot_premium_amt%TYPE;
      v_return_prem_amt        acc_receivables.tot_premium_amt%TYPE;
   BEGIN
      FOR i
      IN (  SELECT   pgid,
                     policy_no,
                     payor_nm,
                     assured_nm,
                     address,
                     comm_date,
                     risk_date,
                     product_cd,
                     term,
                     sum_assured,
                     pay_mode,
                     option_nm,
                     installment_premium,
                     maturity_date,
                     last_paid_date,
                     policy_status,
                     installment_no,
                     next_due_dt,
                     payment_date,
                     proposer_pk,
                     fp_receive_id,
                     coll_pay_mode,
                     suspense_amt,
                     due_instl_prem,
                     due_tp,
                     return_st,
                     age,
                     proposed_status,
                     alt_st
              FROM   (SELECT   s.pgid,
                               fun_ins_pgid_to_policy_no (s.pgid) policy_no,
                               (SELECT   party_name
                                  FROM   ins_p_personal
                                 WHERE   pgid = s.pgid
                                         AND party_cd =
                                               DECODE (l.assurance_type,
                                                       '3', '02',
                                                       '03')
                                         AND sl_no = 1)
                                  payor_nm,
                               (SELECT   party_name
                                  FROM   ins_p_personal
                                 WHERE       pgid = s.pgid
                                         AND party_cd = '03'
                                         AND sl_no = 1)
                                  assured_nm,
                               (SELECT   n.father_name || ',' || a.t_address
                                  FROM   ins_p_address a, ins_p_personal n
                                 WHERE       a.pgid = s.pgid
                                         AND a.pgid = n.pgid
                                         AND a.party_cd = '03'
                                         AND n.party_cd = '03'
                                         AND a.party_id = n.party_id
                                         AND n.sl_no = 1)
                                  address,
                               s.comm_date,
                               s.risk_date,
                               s.product_cd,
                               s.term,
                               s.sum_assured,
                               DECODE (s.pay_mode_cd,
                                       '01',
                                       'Yearly',
                                       '02',
                                       'Half-yearly',
                                       '03',
                                       'Quarterly',
                                       '04',
                                       'Monthly',
                                       '05',
                                       'Single')
                                  pay_mode,
                               DECODE (s.option_cd,
                                       '1',
                                       'A',
                                       '2',
                                       'B',
                                       '3',
                                       'C')
                                  option_nm,
                               s.installment_premium,
                               s.maturity_date,
                               s.last_paid_date,
                               s.policy_status,
                               -- p.installment_no,
                               CASE
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '01'
                                       AND pay_mode = 'HLY'
                                  THEN
                                     CEIL (p.installment_no / 2)
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '01'
                                       AND pay_mode = 'QLY'
                                  THEN
                                     CEIL (p.installment_no / 4)
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '01'
                                       AND pay_mode = 'MLY'
                                  THEN
                                     CEIL (p.installment_no / 12)
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '02'
                                       AND pay_mode = 'QLY'
                                  THEN
                                     CEIL (installment_no / 2)
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '02'
                                       AND pay_mode = 'MLY'
                                  THEN
                                     CEIL (p.installment_no / 6)
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '03'
                                       AND pay_mode = 'MLY'
                                  THEN
                                     CEIL (p.installment_no / 4)
                                  ELSE
                                     p.installment_no
                               END
                                  installment_no,
                               p.next_due_dt,
                               p.payment_date,
                               p.proposer_pk,
                               p.fp_receive_id,
                               p.pay_mode coll_pay_mode,
                               s.suspense_amt,
                               p.installment_premium due_instl_prem,
                               1 due_tp,
                               return_st,
                               s.age,
                               p.proposed_status,
                               DECODE (TO_CHAR (alt_serail_no), '0', '0', '1')
                                  alt_st
                        FROM   ins_p_summery s,
                               ins_prem_acc_receivable p,
                               ins_p_proposal l
                       WHERE       s.pgid = p_pgid
                               AND p.pgid = p_pgid
                               AND l.pgid = p_pgid
                               AND s.pgid = p.pgid
                               AND s.pgid = l.pgid
                               AND p.proposed_status IN ('1', '7', '4')
                               AND fun_locked_policy_auth (p.pgid) = '1'
                               AND (p.proposer_pk IS NOT NULL
                                    OR p.fp_receive_id IS NOT NULL)
                               AND ( (p_pgid IS NULL
                                      AND s.office_cd IN
                                               (SELECT   DISTINCT
                                                         DECODE (p_check,
                                                                 0,
                                                                 x.office_cd,
                                                                 y.office_cd)
                                                  FROM   (SELECT   p_office_cd
                                                                      office_cd
                                                            FROM   DUAL) x,
                                                         (    SELECT   office_cd
                                                                FROM   hrm_office_setup
                                                          CONNECT BY   PRIOR office_cd =
                                                                          control_office_cd
                                                          START WITH   office_cd =
                                                                          NVL (
                                                                             p_office_cd,
                                                                             office_cd
                                                                          )
                                                          UNION ALL
                                                          SELECT   p_office_cd
                                                                      office_cd
                                                            FROM   DUAL) y))
                                    OR (p_pgid IS NOT NULL AND 1 = 1)))
          ORDER BY   due_tp, next_due_dt)
      LOOP
         v_adjusted_by := NULL;
         v_adjustment_date := NULL;
         v_req_amount := NULL;
         v_coll_amount := NULL;
         v_adv_status := NULL;
         v_adjusted_method := NULL;
         v_receipt_no := NULL;
         v_partial_receipt_no := NULL;
         v_ledger_info.policy_no := i.policy_no;
         v_ledger_info.payor_nm := i.payor_nm;
         v_ledger_info.assured_nm := i.assured_nm;
         v_ledger_info.address := i.address;
         v_ledger_info.comm_date := i.comm_date;
         v_ledger_info.risk_date := i.risk_date;
         v_ledger_info.product_cd := i.product_cd;
         v_ledger_info.term := i.term;
         v_ledger_info.sum_assured := i.sum_assured;
         v_ledger_info.pay_mode := i.pay_mode;
         v_ledger_info.option_nm := i.option_nm;
         v_ledger_info.installment_premium := i.installment_premium;
         v_ledger_info.maturity_date := i.maturity_date;
         v_ledger_info.last_paid_date := i.last_paid_date;
         v_ledger_info.policy_status := i.policy_status;
         v_ledger_info.inst_no := i.installment_no;
         v_ledger_info.due_date := i.next_due_dt;
         v_ledger_info.coll_pay_mode := i.coll_pay_mode;
         v_ledger_info.suspense_amt := i.suspense_amt;
         v_ledger_info.entry_age := i.age;

         IF     i.installment_no = 1
            AND i.fp_receive_id IS NOT NULL
            AND i.alt_st = '0'
         THEN
            FOR j
            IN (SELECT   a.adjusted_by,
                         DECODE (a.i_usr, 'SLICL', 'Manual','Nazmul','Adjusted', 'System')
                            adjusted_method,
                         fun_prem_coll_receipt_no (a.partner_code,
                                                   a.partner_transid,
                                                   a.active_office_cd,
                                                   a.receive_date,
                                                   a.coll_slip_no,
                                                   a.coll_sl_no)
                            receipt_no,
                         NVL (a.coll_slip_rec_dt, a.receive_date) receipt_dt,
                         TRUNC (a.adjustment_date) adjustment_date,
                         a.coll_amount
                  FROM   acc_advance_receivables a
                 WHERE   a.proposal_no = fun_ins_pgid_to_proposal_no (i.pgid)
                         AND a.receive_id = i.fp_receive_id
                         AND a.rec_status = '1')
            LOOP
               v_ledger_info.adjustment_date :=
                  NVL (i.payment_date, j.adjustment_date);
               v_ledger_info.adjusted_by := j.adjusted_by;
               v_ledger_info.adjusted_method := j.adjusted_method;
               v_ledger_info.receipt_no :=
                  v_ledger_info.receipt_no || j.receipt_no || ', ';
               v_ledger_info.coll_amount :=
                  v_ledger_info.coll_amount || j.coll_amount || ', ';
               v_ledger_info.inst_coll_amount :=
                  NVL (v_ledger_info.inst_coll_amount, 0) + j.coll_amount;
               v_ledger_info.adj_slip_no := NULL;
               ---Add by Musha on 17-11-2014
               v_ledger_info.receipt_dt :=
                     v_ledger_info.receipt_dt
                  || TO_CHAR (j.receipt_dt, 'DD/MM/RRRR')
                  || ', ';                       ---Add by Musha on 18-11-2014
               v_ledger_info.coll_tot_prem_amt := i.due_instl_prem;
               ---Add by Musha on 27-11-2014
               v_ledger_info.adjusted_amt := i.due_instl_prem;
            END LOOP;

            v_ledger_info.receipt_no := RTRIM (v_ledger_info.receipt_no, ', ');
            v_ledger_info.coll_amount :=
               RTRIM (v_ledger_info.coll_amount, ', ');
            v_ledger_info.receipt_dt := RTRIM (v_ledger_info.receipt_dt, ', ');
         ELSIF i.installment_no = 1 AND i.fp_receive_id IS NOT NULL AND i.alt_st = '1'
         THEN
            FOR j
            IN (SELECT   a.adjusted_by,
                         DECODE (a.i_usr, 'SLICL', 'Manual','Nazmul','Adjusted', 'System')
                            adjusted_method,
                         fun_prem_coll_receipt_no (a.partner_code,
                                                   a.partner_transid,
                                                   a.active_office_cd,
                                                   a.receive_date,
                                                   a.coll_slip_no,
                                                   a.coll_sl_no)
                            receipt_no,
                         NVL (a.coll_slip_rec_dt, a.receive_date) receipt_dt,
                         TRUNC (a.adjustment_date) adjustment_date,
                         a.coll_amount
                  FROM   acc_advance_receivables a
                 WHERE   a.proposal_no = fun_ins_pgid_to_proposal_no (i.pgid)
                         AND a.receive_id = i.fp_receive_id)
            LOOP
               v_ledger_info.adjustment_date :=
                  NVL (i.payment_date, j.adjustment_date);
               v_ledger_info.adjusted_by := j.adjusted_by;
               v_ledger_info.adjusted_method := j.adjusted_method;
               v_ledger_info.receipt_no :=
                  v_ledger_info.receipt_no || j.receipt_no || ', ';
               v_ledger_info.coll_amount :=
                  v_ledger_info.coll_amount || j.coll_amount || ', ';
               v_ledger_info.inst_coll_amount :=
                  NVL (v_ledger_info.inst_coll_amount, 0) + j.coll_amount;
               v_ledger_info.adj_slip_no := NULL;
               ---Add by Musha on 17-11-2014
               v_ledger_info.receipt_dt :=
                     v_ledger_info.receipt_dt
                  || TO_CHAR (j.receipt_dt, 'DD/MM/RRRR')
                  || ', ';                       ---Add by Musha on 18-11-2014
               v_ledger_info.coll_tot_prem_amt := i.due_instl_prem;
               ---Add by Musha on 27-11-2014
               v_ledger_info.adjusted_amt := i.due_instl_prem;
            END LOOP;

            v_ledger_info.receipt_no := RTRIM (v_ledger_info.receipt_no, ', ');
            v_ledger_info.coll_amount :=
               RTRIM (v_ledger_info.coll_amount, ', ');
            v_ledger_info.receipt_dt := RTRIM (v_ledger_info.receipt_dt, ', ');
         ELSIF i.installment_no != 1 AND i.alt_st = '0'
         THEN
            BEGIN
               SELECT   r.adjusted_by,
                        TRUNC (r.adjustment_date) adjustment_date,
                        (r.late_fee - r.latefee_waiver + r.tot_premium_amt)
                           req_amount,
                        r.coll_amount,
                        r.adv_status,
                        DECODE (
                           NVL (i.return_st, '0'),
                           --Musha on 10.08.2017 NVL (r.return_st, '0')
                           '1',
                           DECODE (NVL (r.return_st, '0'),
                                   '1', 'Return',
                                   'System'),
                           DECODE (
                              r.status,
                              '1',
                              DECODE (NVL (r.man_adjusted, '0'),
                                      '1', 'Manual','2', 'Adjusted',
                                      'System'),
                              'Un-Adjusted'
                           )
                        )
                           adjusted_method,
                        fun_prem_coll_receipt_no (r.partner_code,
                                                  r.partner_transid,
                                                  r.active_office_cd,
                                                  r.receive_date,
                                                  r.coll_slip_no,
                                                  r.coll_sl_no)
                           receipt_no,
                        NVL (r.coll_slip_rec_dt, r.receive_date) receipt_dt,
                        r.adj_slip_no,
                        (r.installment_no_to - installment_no_from + 1)
                           no_of_instl,
                        r.tot_premium_amt,
                        (CASE
                            WHEN     NVL (r.status, '0') = '1'
                                 AND NVL (r.return_st, '0') = '0'
                                 AND NVL (i.return_st, '0') = '0'
                            ---Add by Musha on 10.08.2017
                         THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           adj_prem,
                        (CASE
                            WHEN NVL (r.status, '0') = '0'
                                 AND NVL (r.return_st, '0') = '0'
                            THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           unadj_prem,
                        /*DECODE (NVL (r.return_st, '0'),
                                '1', i.due_instl_prem,
                                0
                               )*/
                        ---Musha on 10.08.2017 and the bellow part
                        (CASE
                            WHEN NVL (r.return_st, '0') = '1'
                            THEN
                               i.due_instl_prem
                            WHEN NVL (r.return_st, '0') = '0'
                                 AND i.return_st = '1'
                            THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           return_prem
                 INTO   v_adjusted_by,
                        v_adjustment_date,
                        v_req_amount,
                        v_coll_amount,
                        v_adv_status,
                        v_adjusted_method,
                        v_receipt_no,
                        v_receipt_date,
                        v_adj_slip_no,
                        v_no_of_instl,
                        v_tot_premium_amt,
                        v_adj_prem_amt,
                        v_unadj_prem_amt,
                        v_return_prem_amt
                 FROM   acc_receivables r
                WHERE   r.pgid = i.pgid --AND r.status = '1'   ---Musha on 17-11-2014 due to show all collection record
                                       AND r.receive_id = i.proposer_pk;

               IF v_no_of_instl > 0
               THEN
                  v_coll_amount := ROUND (v_coll_amount / v_no_of_instl, 2);
                  v_tot_premium_amt :=
                     ROUND (v_tot_premium_amt / v_no_of_instl, 2);
               END IF;

               --IF v_req_amount > v_coll_amount THEN   -----Musha on 17-11-2014 due to show all collection record
               /*FOR k
                              IN (SELECT      ap.active_office_cd
                                           || '-'
                                           || TO_CHAR (ap.receive_date, 'RR')
                                           || '-'
                                           || NVL(ap.media_no, ap.coll_sl_no)      --ap.coll_sl_no
                                              partial_receipt_no,
                                           NVL(ap.media_dt, ap.receive_date) partial_receipt_dt,
                                           ap.COLL_AMOUNT par_coll_amount
                                    FROM   acc_partial_receivables ap,
                                           acc_partial_receivables_ref rf
                                   WHERE       ap.pgid = i.pgid
                                           AND ap.receive_id = rf.receive_id
                                           AND rf.receive_id_ref = i.proposer_pk)
                              LOOP
                                 v_partial_receipt_no :=
                                    v_partial_receipt_no || k.partial_receipt_no || ', ';

                                 v_all_par_coll_amount := v_all_par_coll_amount ||k.par_coll_amount || ', ';     ---Add by Musha on 17-11-2014
                                 v_all_par_receipt_date    := v_all_par_receipt_date ||TO_CHAR(k.partial_receipt_dt, 'DD/MM/RRRR') || ', ';     ---Add by Musha on 18-11-2014
                              END LOOP;*/
               ---Musha on 25-11-2014
               v_partial_receipt_no := RTRIM (v_partial_receipt_no, ', ');
               v_all_par_coll_amount := RTRIM (v_all_par_coll_amount, ', ');
               v_receipt_no := v_receipt_no || ', ' || v_partial_receipt_no;
               v_receipt_no := RTRIM (v_receipt_no, ', ');
               v_all_coll_amount :=
                  v_coll_amount || ', ' || v_all_par_coll_amount;
               ---Add by Musha on 17-11-2014
               v_all_coll_amount := RTRIM (v_all_coll_amount, ', ');
               ---Add by Musha on 17-11-2014
               v_all_receipt_date :=
                     TO_CHAR (v_receipt_date, 'DD/MM/RRRR')
                  || ', '
                  || v_all_par_receipt_date;     ---Add by Musha on 18-11-2014
               v_all_receipt_date := RTRIM (v_all_receipt_date, ', ');

               ---Add by Musha on 18-11-2014

               --END IF;
               /*  IF v_adv_status = '1' AND i.proposed_status = '1'
                 THEN
                    v_ledger_info.adjustment_date := i.next_due_dt;
                 --v_receipt_date ;
                 ELSIF v_adv_status = '1' AND i.proposed_status = '7'
                 THEN
                    v_ledger_info.adjustment_date := NULL;
                 ELSE
                    v_ledger_info.adjustment_date := v_adjustment_date;
                 END IF;*/
               IF v_adv_status = '1' AND i.proposed_status = '7'
               THEN
                  v_ledger_info.adjustment_date := NULL;
               ELSE
                  v_ledger_info.adjustment_date := v_adjustment_date;
               END IF;

               v_ledger_info.adjusted_by := v_adjusted_by;
               v_ledger_info.adjusted_method := v_adjusted_method;
               v_ledger_info.receipt_no := v_receipt_no;
               v_ledger_info.coll_amount := v_all_coll_amount;
               v_ledger_info.inst_coll_amount := v_all_coll_amount;
               ---Add by Musha on 17-11-2014
               v_ledger_info.adj_slip_no := v_adj_slip_no;
               ---Add by Musha on 18-11-2014
               v_ledger_info.receipt_dt := v_all_receipt_date;
               ---Add by Musha on 18-11-2014
               ---v_ledger_info.coll_tot_prem_amt  := v_tot_premium_amt; ---Add by Musha on 27-11-2014
               v_ledger_info.coll_tot_prem_amt := i.due_instl_prem;
               ---Add by Musha on 27-11-2014

               /*Add this by Musha on 09-08-2015*/
               v_ledger_info.adjusted_amt := v_adj_prem_amt;
               v_ledger_info.unadj_prem_amt := v_unadj_prem_amt;
               v_ledger_info.return_prem_amt := v_return_prem_amt;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_ledger_info.adjusted_by := NULL;
                  v_ledger_info.adjusted_method := NULL;
                  v_ledger_info.receipt_no := NULL;
            END;
         ELSIF i.alt_st = '1' AND i.next_due_dt > i.comm_date
         THEN
            BEGIN
               SELECT   r.adjusted_by,
                        TRUNC (r.adjustment_date) adjustment_date,
                        (r.late_fee - r.latefee_waiver + r.tot_premium_amt)
                           req_amount,
                        r.coll_amount,
                        r.adv_status,
                        DECODE (
                           NVL (i.return_st, '0'),
                           --Musha on 10.08.2017 NVL (r.return_st, '0')
                           '1',
                           DECODE (NVL (r.return_st, '0'),
                                   '1', 'Return',
                                   'System'),
                           DECODE (
                              r.status,
                              '1',
                              DECODE (NVL (r.man_adjusted, '0'),
                                      '1', 'Manual','2', 'Adjusted',
                                      'System'),
                              'Un-Adjusted'
                           )
                        )
                           adjusted_method,
                        fun_prem_coll_receipt_no (r.partner_code,
                                                  r.partner_transid,
                                                  r.active_office_cd,
                                                  r.receive_date,
                                                  r.coll_slip_no,
                                                  r.coll_sl_no)
                           receipt_no,
                        NVL (r.coll_slip_rec_dt, r.receive_date) receipt_dt,
                        r.adj_slip_no,
                        (r.installment_no_to - installment_no_from + 1)
                           no_of_instl,
                        r.tot_premium_amt,
                        (CASE
                            WHEN     NVL (r.status, '0') = '1'
                                 AND NVL (r.return_st, '0') = '0'
                                 AND NVL (i.return_st, '0') = '0'
                            ---Add by Musha on 10.08.2017
                         THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           adj_prem,
                        (CASE
                            WHEN NVL (r.status, '0') = '0'
                                 AND NVL (r.return_st, '0') = '0'
                            THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           unadj_prem,
                        (CASE
                            WHEN NVL (r.return_st, '0') = '1'
                            THEN
                               i.due_instl_prem
                            WHEN NVL (r.return_st, '0') = '0'
                                 AND i.return_st = '1'
                            THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           return_prem
                 INTO   v_adjusted_by,
                        v_adjustment_date,
                        v_req_amount,
                        v_coll_amount,
                        v_adv_status,
                        v_adjusted_method,
                        v_receipt_no,
                        v_receipt_date,
                        v_adj_slip_no,
                        v_no_of_instl,
                        v_tot_premium_amt,
                        v_adj_prem_amt,
                        v_unadj_prem_amt,
                        v_return_prem_amt
                 FROM   acc_receivables r
                WHERE   r.pgid = i.pgid AND r.receive_id = i.proposer_pk;

               IF v_no_of_instl > 0
               THEN
                  v_coll_amount := ROUND (v_coll_amount / v_no_of_instl, 2);
                  v_tot_premium_amt :=
                     ROUND (v_tot_premium_amt / v_no_of_instl, 2);
               END IF;

               v_partial_receipt_no := RTRIM (v_partial_receipt_no, ', ');
               v_all_par_coll_amount := RTRIM (v_all_par_coll_amount, ', ');
               v_receipt_no := v_receipt_no || ', ' || v_partial_receipt_no;
               v_receipt_no := RTRIM (v_receipt_no, ', ');
               v_all_coll_amount :=
                  v_coll_amount || ', ' || v_all_par_coll_amount;
               v_all_coll_amount := RTRIM (v_all_coll_amount, ', ');
               v_all_receipt_date :=
                     TO_CHAR (v_receipt_date, 'DD/MM/RRRR')
                  || ', '
                  || v_all_par_receipt_date;
               v_all_receipt_date := RTRIM (v_all_receipt_date, ', ');

               /* IF v_adv_status = '1' AND i.proposed_status = '1'
                THEN
                   v_ledger_info.adjustment_date := i.next_due_dt;
                ELSIF v_adv_status = '1' AND i.proposed_status = '7'
                THEN
                   v_ledger_info.adjustment_date := NULL;
                ELSE
                   v_ledger_info.adjustment_date := v_adjustment_date;
                END IF;*/
               IF v_adv_status = '1' AND i.proposed_status = '7'
               THEN
                  v_ledger_info.adjustment_date := NULL;
               ELSE
                  v_ledger_info.adjustment_date := v_adjustment_date;
               END IF;

               v_ledger_info.adjusted_by := v_adjusted_by;
               v_ledger_info.adjusted_method := v_adjusted_method;
               v_ledger_info.receipt_no := v_receipt_no;
               v_ledger_info.coll_amount := v_all_coll_amount;
               v_ledger_info.inst_coll_amount := v_all_coll_amount;
               v_ledger_info.adj_slip_no := v_adj_slip_no;
               v_ledger_info.receipt_dt := v_all_receipt_date;
               v_ledger_info.coll_tot_prem_amt := i.due_instl_prem;
               v_ledger_info.adjusted_amt := v_adj_prem_amt;
               v_ledger_info.unadj_prem_amt := v_unadj_prem_amt;
               v_ledger_info.return_prem_amt := v_return_prem_amt;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_ledger_info.adjusted_by := NULL;
                  v_ledger_info.adjusted_method := NULL;
                  v_ledger_info.receipt_no := NULL;
            END;
         END IF;

         PIPE ROW (v_ledger_info);
      END LOOP;

      RETURN;
   END fun_policy_ledger_info;

   /************Musha on 28-02-2015************/
   FUNCTION fun_policy_prem_coll_info (
      p_pgid               ins_p_proposal.pgid%TYPE,
      p_office_cd          hrm_office.office_cd%TYPE,
      p_descendant_flag    VARCHAR2
   )
      RETURN tp_policy_prem_coll_tab
      PIPELINED
   AS
      v_policy_prem_coll   tp_policy_prem_coll_rec;
   BEGIN
      FOR i
      IN (SELECT   fun_ins_pgid_to_policy_no (s.pgid) policy_no,
                   (SELECT   party_name
                      FROM   ins_p_personal
                     WHERE   pgid = s.pgid AND party_cd = '02' AND sl_no = 1)
                      payor_nm,
                   (SELECT   party_name
                      FROM   ins_p_personal
                     WHERE   pgid = s.pgid AND party_cd = '03' AND sl_no = 1)
                      assured_nm,
                   (SELECT   t_address
                      FROM   ins_p_address a, ins_p_personal n
                     WHERE       a.pgid = s.pgid
                             AND a.pgid = n.pgid
                             AND a.party_cd = '02'
                             AND n.party_cd = '02'
                             AND a.party_id = n.party_id
                             AND n.sl_no = 1)
                      address,
                   s.comm_date,
                   s.risk_date,
                   s.product_cd,
                   s.term,
                   s.sum_assured,
                   DECODE (s.pay_mode_cd,
                           '01',
                           'Yearly',
                           '02',
                           'Half-yearly',
                           '03',
                           'Quarterly',
                           '04',
                           'Monthly',
                           '05',
                           'Single')
                      pay_mode,
                   DECODE (s.option_cd,
                           '1',
                           'A',
                           '2',
                           'B',
                           '3',
                           'C')
                      option_nm,
                   s.installment_premium,
                   s.maturity_date,
                   s.last_paid_date,
                   s.policy_status,
                   y.due_cat,
                   y.receive_date,
                   TO_CHAR (y.received_by) received_by,
                   y.collection_type,
                   y.mode_tp,
                   y.receive_mode,
                   y.coll_slip_no,
                   y.coll_amount,
                   y.coll_slip_rec_dt,
                   y.status,
                   y.due_dt_from,
                   y.due_dt_to,
                   y.tot_premium_amt,
                   y.late_fee,
                   y.tot_required_amt,
                   y.i_usr,
                   y.receipt_no
            FROM   ins_p_summery s,
                   (SELECT   'Proposal' due_cat,
                             a.receive_date,
                             a.received_by,
                             a.collection_type,
                             (CASE
                                 WHEN a.mode_tp = '1' THEN 'On-Line'
                                 WHEN a.mode_tp = '2' THEN 'Off-Line'
                                 ELSE NULL
                              END)
                                mode_tp,
                             (CASE
                                 WHEN a.receive_mode = '1' THEN 'Cash'
                                 WHEN a.receive_mode = '2' THEN 'Cheque'
                                 ELSE 'Others'
                              END)
                                receive_mode,
                             a.coll_slip_no,
                             a.coll_amount,
                             s.pgid,
                             a.coll_slip_rec_dt,
                             DECODE (a.status, '1', 'Adjusted', 'Unadjusted')
                                status,
                             s.comm_date due_dt_from,
                             s.comm_date due_dt_to,
                             s.installment_premium tot_premium_amt,
                             0 late_fee,
                             s.installment_premium tot_required_amt,
                             a.i_usr,
                                a.active_office_cd
                             || '-'
                             || TO_CHAR (a.receive_date, 'RR')
                             || '-'
                             || a.coll_sl_no
                                receipt_no
                      FROM   acc_advance_receivables a, ins_p_summery s
                     WHERE   (p_pgid IS NULL
                              OR (p_pgid IS NOT NULL
                                  AND a.proposal_no =
                                        fun_ins_pgid_to_proposal_no (p_pgid)))
                             AND a.rec_status = '1'
                             AND a.proposal_no =
                                   fun_ins_pgid_to_proposal_no (s.pgid)
                             AND ( (NVL (p_descendant_flag, '0') = '0'
                                    AND a.office_code =
                                          NVL (p_office_cd, a.office_code))
                                  OR (NVL (p_descendant_flag, '0') = '1'
                                      AND a.office_code IN
                                               (    SELECT   o.office_cd
                                                      FROM   hrm_office_setup o
                                                START WITH   o.office_cd =
                                                                p_office_cd
                                                CONNECT BY   PRIOR o.office_cd =
                                                                o.control_office_cd)))
                    UNION ALL
                    SELECT   'Full' due_cat,
                             r.receive_date,
                             r.received_by,
                             r.collection_type,
                             (CASE
                                 WHEN r.mode_tp = '1' THEN 'On-Line'
                                 WHEN r.mode_tp = '2' THEN 'Off-Line'
                                 ELSE NULL
                              END)
                                mode_tp,
                             (CASE
                                 WHEN r.receive_mode = '1' THEN 'Cash'
                                 WHEN r.receive_mode = '2' THEN 'Cheque'
                                 ELSE 'Others'
                              END)
                                receive_mode,
                             r.coll_slip_no,
                             r.coll_amount,
                             r.pgid,
                             r.coll_slip_rec_dt,
                             DECODE (r.status, '1', 'Adjusted', 'Unadjusted')
                                status,
                             r.due_dt_from,
                             r.due_dt_to,
                             r.tot_premium_amt,
                             (NVL (r.late_fee, 0) - NVL (r.latefee_waiver, 0))
                                late_fee,
                             (r.tot_premium_amt
                              + (NVL (r.late_fee, 0)
                                 - NVL (r.latefee_waiver, 0)))
                                tot_required_amt,
                             r.i_usr,
                                r.active_office_cd
                             || '-'
                             || TO_CHAR (r.receive_date, 'RR')
                             || '-'
                             || r.coll_sl_no
                                receipt_no
                      FROM   acc_receivables r
                     WHERE   r.pgid = NVL (p_pgid, r.pgid)
                             AND r.rec_status = '1'
                             AND ( (NVL (p_descendant_flag, '0') = '0'
                                    AND r.office_code =
                                          NVL (p_office_cd, r.office_code))
                                  OR (NVL (p_descendant_flag, '0') = '1'
                                      AND r.office_code IN
                                               (    SELECT   o.office_cd
                                                      FROM   hrm_office_setup o
                                                START WITH   o.office_cd =
                                                                p_office_cd
                                                CONNECT BY   PRIOR o.office_cd =
                                                                o.control_office_cd)))
                    UNION ALL
                    SELECT   'Partial' due_cat,
                             p.receive_date,
                             p.received_by,
                             p.coll_media,
                             (CASE
                                 WHEN p.mode_tp = '1' THEN 'On-Line'
                                 WHEN p.mode_tp = '2' THEN 'Off-Line'
                                 ELSE NULL
                              END)
                                mode_tp,
                             (CASE
                                 WHEN p.coll_type = '1' THEN 'Cash'
                                 WHEN p.coll_type = '2' THEN 'Cheque'
                                 ELSE 'Others'
                              END)
                                receive_mode,
                             p.media_no coll_slip_no,
                             p.coll_amount,
                             p.pgid,
                             p.media_dt coll_slip_rec_dt,
                             DECODE (p.status, '1', 'Adjusted', 'Unadjusted')
                                status,
                             p.due_date_from,
                             p.due_date_to,
                             p.req_premium_amt,
                             (NVL (p.late_fee, 0) - NVL (p.latefee_waiver, 0))
                                late_fee,
                             p.tot_required_amt,
                             p.i_usr,
                                p.active_office_cd
                             || '-'
                             || TO_CHAR (p.receive_date, 'RR')
                             || '-'
                             || p.coll_sl_no
                                receipt_no
                      FROM   acc_partial_receivables p
                     WHERE   p.pgid = NVL (p_pgid, p.pgid)
                             AND p.rec_status = '1'
                             AND ( (NVL (p_descendant_flag, '0') = '0'
                                    AND p.office_code =
                                          NVL (p_office_cd, p.office_code))
                                  OR (NVL (p_descendant_flag, '0') = '1'
                                      AND p.office_code IN
                                               (    SELECT   o.office_cd
                                                      FROM   hrm_office_setup o
                                                START WITH   o.office_cd =
                                                                p_office_cd
                                                CONNECT BY   PRIOR o.office_cd =
                                                                o.control_office_cd))))
                   y
           WHERE   s.pgid = y.pgid)
      LOOP
         v_policy_prem_coll.payor_nm := i.payor_nm;
         v_policy_prem_coll.assured_nm := i.assured_nm;
         v_policy_prem_coll.address := i.address;
         v_policy_prem_coll.comm_date := i.comm_date;
         v_policy_prem_coll.risk_date := i.risk_date;
         v_policy_prem_coll.product_cd := i.product_cd;
         v_policy_prem_coll.term := i.term;
         v_policy_prem_coll.sum_assured := i.sum_assured;
         v_policy_prem_coll.pay_mode := i.pay_mode;
         v_policy_prem_coll.option_nm := i.option_nm;
         v_policy_prem_coll.installment_premium := i.installment_premium;
         v_policy_prem_coll.maturity_date := i.maturity_date;
         v_policy_prem_coll.last_paid_date := i.last_paid_date;
         v_policy_prem_coll.policy_status := i.policy_status;
         v_policy_prem_coll.due_cat := i.due_cat;
         v_policy_prem_coll.receive_date := i.receive_date;
         v_policy_prem_coll.received_by := i.received_by;
         v_policy_prem_coll.collection_type := i.collection_type;
         v_policy_prem_coll.mode_tp := i.mode_tp;
         v_policy_prem_coll.receive_mode := i.receive_mode;
         v_policy_prem_coll.coll_slip_no := i.coll_slip_no;
         v_policy_prem_coll.coll_amount := i.coll_amount;
         v_policy_prem_coll.coll_slip_rec_dt := i.coll_slip_rec_dt;
         v_policy_prem_coll.status := i.status;
         v_policy_prem_coll.due_dt_from := i.due_dt_from;
         v_policy_prem_coll.due_dt_to := i.due_dt_to;
         v_policy_prem_coll.tot_premium_amt := i.tot_premium_amt;
         v_policy_prem_coll.late_fee := i.late_fee;
         v_policy_prem_coll.tot_required_amt := i.tot_required_amt;
         v_policy_prem_coll.i_usr := i.i_usr;
         v_policy_prem_coll.receipt_no := i.receipt_no;
         PIPE ROW (v_policy_prem_coll);
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         RAISE;
   END;

   FUNCTION fun_unadj_policy_info (
      p_office_cd          hrm_office.office_cd%TYPE,
      p_descendant_flag    VARCHAR2,
      p_mode_tp            acc_receivables.mode_tp%TYPE,
      p_unadj_cause        VARCHAR2,
      p_start_dt           DATE,
      p_end_dt             DATE
   )
      RETURN tp_unadj_policy_tab
      PIPELINED
   AS
      v_unadj_policy   tp_unadj_policy_rec;
   BEGIN
      FOR i
      IN (SELECT      r.active_office_cd
                   || '-'
                   || TO_CHAR (r.receive_date, 'RR')
                   || '-'
                   || r.coll_sl_no
                      receipt_no,
                   r.receive_date,
                   fun_ins_pgid_to_policy_no (r.pgid) policy_no,
                   r.collection_type,
                   r.coll_slip_no,
                   r.coll_slip_rec_dt,
                   (CASE
                       WHEN r.receive_mode = '1' THEN 'Cash'
                       WHEN r.receive_mode = '2' THEN 'Cheque'
                       ELSE 'Others'
                    END)
                      receive_mode,
                   r.due_dt_from,
                   r.due_dt_to,
                   r.tot_premium_amt,
                   (NVL (r.late_fee, 0) - NVL (r.latefee_waiver, 0)) late_fee,
                   (r.tot_premium_amt
                    + (NVL (r.late_fee, 0) - NVL (r.latefee_waiver, 0)))
                      tot_required_amt,
                   r.coll_amount,
                   (r.tot_premium_amt
                    + (NVL (r.late_fee, 0) - NVL (r.latefee_waiver, 0)))
                   - r.coll_amount
                      adv_due_amount
            FROM   acc_receivables r
           WHERE       r.rec_status = '1'
                   AND r.status = '0'
                   AND r.receipt_status = '0'
                   AND r.mode_tp = NVL (p_mode_tp, r.mode_tp)
                   AND r.receive_date BETWEEN p_start_dt AND p_end_dt
                   AND ( (NVL (p_descendant_flag, '0') = '0'
                          AND r.active_office_cd =
                                NVL (p_office_cd, r.active_office_cd))
                        OR (NVL (p_descendant_flag, '0') = '1'
                            AND r.active_office_cd IN
                                     (    SELECT   o.office_cd
                                            FROM   hrm_office_setup o
                                      START WITH   o.office_cd = p_office_cd
                                      CONNECT BY   PRIOR o.office_cd =
                                                      o.control_office_cd))))
      LOOP
         v_unadj_policy.receipt_no := i.receipt_no;
         v_unadj_policy.receive_date := i.receive_date;
         v_unadj_policy.policy_no := i.policy_no;
         v_unadj_policy.collection_type := i.collection_type;
         v_unadj_policy.coll_slip_no := i.coll_slip_no;
         v_unadj_policy.coll_slip_rec_dt := i.coll_slip_rec_dt;
         v_unadj_policy.receive_mode := i.receive_mode;
         v_unadj_policy.due_dt_from := i.due_dt_from;
         v_unadj_policy.due_dt_to := i.due_dt_to;
         v_unadj_policy.tot_premium_amt := i.tot_premium_amt;
         v_unadj_policy.late_fee := i.late_fee;
         v_unadj_policy.tot_required_amt := i.tot_required_amt;
         v_unadj_policy.coll_amount := i.coll_amount;
         v_unadj_policy.adv_due_amount := i.adv_due_amount;
      END LOOP;
   END fun_unadj_policy_info;

   FUNCTION fun_payment_receipt (
      p_pgid             ins_p_proposal.pgid%TYPE,
      p_clm_cause_cd     clm_claim_cause.clm_cause_cd%TYPE,
      p_start_dt         DATE,
      p_end_dt           DATE,
      p_descendant       VARCHAR2,
      p_office_cd        hrm_office.office_cd%TYPE,
      p_payment_type     clm_payment_type.pay_type_cd%TYPE,
      p_policy_tp_cd     ins_policy_type.policy_tp_cd%TYPE,
      p_report_tp        VARCHAR2,
      /*p_report_tp = 01 Claim Payment Receipt
                                                 02 Policy Loan Payment Receipt
                                                 03 Surrender Payment Receipt
                                                 04 Pension commutation
                                              */
      p_appl_sl_no       VARCHAR2,
      p_whrcls           VARCHAR2 DEFAULT '1=1' ,
      p_report_option    VARCHAR2 DEFAULT 0
   )
      RETURN payment_receipt_tab
      PIPELINED
   /******************************************************************************
      NAME:       fun_payment_receipt
      PURPOSE:    Payment Receipt For Claim Payment, Policy Loan and Surrender Module

      REVISIONS:
      Ver         Date           Created By                   Description
      ---------  ------------   -----------------------      ------------------------------------
        1.0      28-MAY-2015     MD. Zahid Hasan              p_report_tp = 01 For claim;
                                                                            02 For pension commutation claim
                                                                            03 For Fund requisition
      Change History :
      Ver         Date           Changed By                   Description
      ---------  ------------    ----------------            -------------------------------------
      1.1

   *******************************************************************************/
   IS
      v_payment_receipt      payment_receipt_rec;
      v_sb_instlno           VARCHAR2 (3);

      TYPE cur_tp IS REF CURSOR;

      v_cur                  cur_tp;
      ---------------------------
      v_due_prem_amt         NUMBER (12, 2) := 0;
      v_due_prem_late_fee    NUMBER (12, 2) := 0;
      v_paid_prem_late_fee   NUMBER (12, 2) := 0;

      CURSOR cur_claim
      IS
         SELECT   p.payable_no,
                  p.cheque_issued_dt,
                  (SELECT   party_name
                     FROM   ins_p_personal
                    WHERE       pgid = p.pgid
                            AND party_cd = p.ben_party_cd
                            AND sl_no = 1)
                     party_name,
                  p.pgid,
                  fun_ins_pgid_to_policy_no (p.pgid) policy_no,
                  s.risk_date,
                  p.product_cd || '-' || s.term product_term,
                  s.last_paid_date,
                  s.next_due_date,
                  s.sum_assured,
                  s.total_yearly_premium,
                  s.installment_premium * s.last_paid_inst_no
                     total_deposit_prem,
                    NVL (p.other_ded_amt, 0)
                  + NVL (p.loan_ded_amt, 0)
                  + NVL (p.loan_interest, 0)
                  + NVL (p.source_tax, 0)
                     cf_total_due,
                    NVL (p.net_payable_amt, 0)
                  - NVL (p.other_ded_amt, 0)
                  + NVL (p.loan_ded_amt, 0)
                  + NVL (p.loan_interest, 0)
                  + NVL (p.source_tax, 0)
                     cf_total_payable_amt,
                  f_in_word(  NVL (p.other_ded_amt, 0)
                            + NVL (p.loan_ded_amt, 0)
                            + NVL (p.loan_interest, 0)
                            + NVL (p.source_tax, 0))
                     cf_in_word_due,
                  f_in_word (p.net_payable_amt) cf_in_word,
                  (SELECT   product_nm
                     FROM   ins_product
                    WHERE   product_cd = p.product_cd)
                     product_nm,
                  p.net_payable_amt net_payable_amt,
                  p.suspense_amt,
                  p.anf_premium_amt,
                  (CASE
                      WHEN p.clm_cause_cd = '02' AND p.clm_detl_cd = '02'
                      THEN
                         0
                      ELSE
                         NVL (p.prem_due_late_fee, 0)
                   END)
                     prem_due_late_fee,
                  p.anf_late_fee,
                  TRUNC (p.i_dt) issue_dt,
                  s.servicing_off office_code,
                  p.i_usr prepared_by,
                  (NVL (p.other_ded_amt, 0) + NVL (p.alt_due_amount, 0))
                     other_ded_amt,
                  p.source_tax,
                  p.gross_payable_amt,
                  p.bonus_payable,
                  p.payment_dt,
                  s.installment_premium,
                  (SELECT   p_address_1 || ' ,' || p_address_2
                     FROM   ins_p_address
                    WHERE   pgid = p.pgid AND party_cd = p.ben_party_cd)
                     address,
                  p.clm_cause_cd,
                  p.clm_detl_cd,
                  rep_f_bank (p.bank_cd) bank_nm,
                  rep_f_branch (p.branch_cd) branch_nm,
                  p.bank_acc_no,
                  p.bank_address,
                  (NVL (p.gross_payable_amt, 0)
                   - (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0)))
                     gross_without_anf,
                  (  NVL (p.gross_payable_amt, 0)
                   + NVL (p.bonus_payable, 0)
                   + NVL (p.suspense_amt, 0)
                   + NVL (p.unadj_coll_amt, 0)
                   - (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0)))
                     tot_payable,
                  p.loan_ded_amt,
                  p.loan_interest,
                  (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0))
                     tot_anf_loan,
                  s.maturity_date
           FROM   clm_claim_payable_gen p,
                  ins_p_summery s,
                  (  SELECT   n.pgid,
                              n.payable_no,
                              SUM (n.loan_amt) loan_amt,
                              SUM (n.interest_amt) loan_interest_amt
                       FROM   clm_adjust_loan n
                   GROUP BY   n.pgid, n.payable_no) l
          WHERE       p.pgid = NVL (p_pgid, p.pgid)
                  AND p.pgid = s.pgid
                  AND p.pgid = l.pgid(+)
                  AND p.payable_no = l.payable_no(+)
                  AND p.clm_cause_cd = NVL (p_clm_cause_cd, p.clm_cause_cd)
                  AND fun_ins_policy_type_cd (s.product_cd) <> '02'
                  --Musha on 09-11-2015 due to for pension policy query is below
                  AND p.payment_dt BETWEEN NVL (p_start_dt, p.payment_dt)
                                       AND  NVL (p_end_dt, p.payment_dt)
                  AND ( (NVL (p_descendant, 'N') = 'N'
                         AND s.servicing_off =
                               NVL (p_office_cd, s.servicing_off))
                       OR (NVL (p_descendant, 'N') = 'Y'
                           AND EXISTS
                                 (    SELECT   f.office_cd
                                        FROM   hrm_office_setup f
                                       WHERE   f.office_cd = s.servicing_off
                                  START WITH   f.office_cd =
                                                  NVL (p_office_cd,
                                                       f.office_cd)
                                  CONNECT BY   PRIOR f.office_cd =
                                                  f.control_office_cd)))
                  AND (NVL (p_payment_type, '00') = '00'
                       OR EXISTS
                            (SELECT   1
                               FROM   clm_payable_calc_detl d
                              WHERE   d.pay_type_cd = p_payment_type
                                      AND d.payable_no = p.payable_no))
                  AND NVL (p.payment_status, 'N') = 'N'
                  AND NVL (p.approved_flag, 'N') = 'N'
                  AND fun_clm_appl_req (p.pgid,
                                        p.product_cd,
                                        p.clm_cause_cd,
                                        p.clm_detl_cd,
                                        p.ben_party_cd) IN (0, 2, 4)
                  /* AND p.product_cd IN (
                              SELECT product_cd
                                FROM ins_product
                               WHERE policy_tp_cd =
                                                   NVL (p_policy_tp_cd, policy_tp_cd))*/
                  AND fun_locked_policy_auth (p.pgid) = '1'
         /*AND (p_report_option = '0'
                 OR (    p_report_option = '1'
                     AND (   NOT EXISTS (
                                      SELECT 1
                                        FROM acc_cheque_print_info t
                                       WHERE t.pgid = p.pgid
                                             AND t.pk_ref = p.payable_no
                                             AND t.print_doc_tp = '1')
                          OR EXISTS (
                                SELECT 1
                                  FROM clm_privilege_emp e, clm_privilege p
                                 WHERE e.prv_cd = p.prv_cd
                                   AND p.auth_cat_cd = '17'
                                   AND UPPER (e.db_user) = UPPER (USER))
                         )
                    )
                )*/
         --ORDER BY p.payable_no
         UNION ALL                    --Musha on 09-11-2015 for pension policy
           SELECT   MAX (p.payable_no) payable_no,
                    MAX (p.cheque_issued_dt) cheque_issued_dt,
                    (SELECT   party_name
                       FROM   ins_p_personal
                      WHERE       pgid = p.pgid
                              AND party_cd = p.ben_party_cd
                              AND sl_no = 1)
                       party_name,
                    p.pgid,
                    fun_ins_pgid_to_policy_no (p.pgid) policy_no,
                    s.risk_date,
                    p.product_cd || '-' || s.term product_term,
                    s.last_paid_date,
                    s.next_due_date,
                    s.sum_assured,
                    s.total_yearly_premium,
                    s.installment_premium * s.last_paid_inst_no
                       total_deposit_prem,
                    SUM(  NVL (p.other_ded_amt, 0)
                        + NVL (p.loan_ded_amt, 0)
                        + NVL (p.loan_interest, 0)
                        + NVL (p.source_tax, 0))
                       cf_total_due,
                    SUM(  NVL (p.net_payable_amt, 0)
                        - NVL (p.other_ded_amt, 0)
                        + NVL (p.loan_ded_amt, 0)
                        + NVL (p.loan_interest, 0)
                        + NVL (p.source_tax, 0))
                       cf_total_payable_amt,
                    f_in_word(SUM(  NVL (p.other_ded_amt, 0)
                                  + NVL (p.loan_ded_amt, 0)
                                  + NVL (p.loan_interest, 0)
                                  + NVL (p.source_tax, 0)))
                       cf_in_word_due,
                    f_in_word (SUM (p.net_payable_amt)) cf_in_word,
                    (SELECT   product_nm
                       FROM   ins_product
                      WHERE   product_cd = p.product_cd)
                       product_nm,
                    SUM (p.net_payable_amt) net_payable_amt,
                    SUM (p.suspense_amt) suspense_amt,
                    SUM (p.anf_premium_amt) anf_premium_amt,
                    SUM( (CASE
                             WHEN p.clm_cause_cd = '02'
                                  AND p.clm_detl_cd = '02'
                             THEN
                                0
                             ELSE
                                NVL (p.prem_due_late_fee, 0)
                          END))
                       prem_due_late_fee,
                    SUM (p.anf_late_fee) anf_late_fee,
                    MAX (TRUNC (p.i_dt)) issue_dt,
                    s.servicing_off office_code,
                    MAX (p.i_usr) prepared_by,
                    SUM (p.other_ded_amt) other_ded_amt,
                    SUM (p.source_tax) source_tax,
                    SUM (p.gross_payable_amt) gross_payable_amt,
                    SUM (p.bonus_payable) bonus_payable,
                    MAX (p.payment_dt) payment_dt,
                    s.installment_premium,
                    (SELECT   p_address_1 || ' ,' || p_address_2
                       FROM   ins_p_address
                      WHERE   pgid = p.pgid AND party_cd = p.ben_party_cd)
                       address,
                    p.clm_cause_cd,
                    p.clm_detl_cd,
                    rep_f_bank (p.bank_cd) bank_nm,
                    rep_f_branch (p.branch_cd) branch_nm,
                    p.bank_acc_no,
                    p.bank_address,
                    SUM( (NVL (p.gross_payable_amt, 0)
                          - (NVL (p.anf_premium_amt, 0)
                             + NVL (p.anf_late_fee, 0))))
                       gross_without_anf,
                    SUM( (  NVL (p.gross_payable_amt, 0)
                          + NVL (p.bonus_payable, 0)
                          + NVL (p.suspense_amt, 0)
                          + NVL (p.unadj_coll_amt, 0)
                          - (NVL (p.anf_premium_amt, 0)
                             + NVL (p.anf_late_fee, 0))))
                       tot_payable,
                    SUM (p.loan_ded_amt) loan_ded_amt,
                    SUM (p.loan_interest) loan_interest,
                    SUM (
                       (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0))
                    )
                       tot_anf_loan,
                    s.maturity_date
             FROM   clm_claim_payable_gen p,
                    ins_p_summery s,
                    (  SELECT   n.pgid,
                                n.payable_no,
                                SUM (n.loan_amt) loan_amt,
                                SUM (n.interest_amt) loan_interest_amt
                         FROM   clm_adjust_loan n
                     GROUP BY   n.pgid, n.payable_no) l
            WHERE       p.pgid = NVL (p_pgid, p.pgid)
                    AND p.pgid = s.pgid
                    AND p.pgid = l.pgid(+)
                    AND p.payable_no = l.payable_no(+)
                    AND p.clm_cause_cd = NVL (p_clm_cause_cd, p.clm_cause_cd)
                    AND (fun_ins_policy_type_cd (s.product_cd) = '02'
                         OR (p.clm_cause_cd = '01'
                             AND fun_ins_policy_type_cd (s.product_cd) = '03'))
                    AND p.payment_dt BETWEEN NVL (p_start_dt, p.payment_dt)
                                         AND  NVL (p_end_dt, p.payment_dt)
                    AND ( (NVL (p_descendant, 'N') = 'N'
                           AND s.servicing_off =
                                 NVL (p_office_cd, s.servicing_off))
                         OR (NVL (p_descendant, 'N') = 'Y'
                             AND EXISTS
                                   (    SELECT   f.office_cd
                                          FROM   hrm_office_setup f
                                         WHERE   f.office_cd = s.servicing_off
                                    START WITH   f.office_cd =
                                                    NVL (p_office_cd,
                                                         f.office_cd)
                                    CONNECT BY   PRIOR f.office_cd =
                                                    f.control_office_cd)))
                    AND (NVL (p_payment_type, '00') = '00'
                         OR EXISTS
                              (SELECT   1
                                 FROM   clm_payable_calc_detl d
                                WHERE   d.pay_type_cd = p_payment_type
                                        AND d.payable_no = p.payable_no))
                    AND NVL (p.payment_status, 'N') = 'N'
                    AND NVL (p.approved_flag, 'N') = 'N'
                    AND fun_clm_appl_req (p.pgid,
                                          p.product_cd,
                                          p.clm_cause_cd,
                                          p.clm_detl_cd,
                                          '02') IN (0, 2, 4)
                    AND p.product_cd IN
                             (SELECT   product_cd
                                FROM   ins_product
                               WHERE   policy_tp_cd =
                                          NVL (p_policy_tp_cd, policy_tp_cd))
                    AND fun_locked_policy_auth (p.pgid) = '1'
         GROUP BY   p.pgid,
                    p.ben_party_cd,
                    s.risk_date,
                    p.product_cd,
                    s.term,
                    s.last_paid_date,
                    s.next_due_date,
                    s.sum_assured,
                    s.total_yearly_premium,
                    s.installment_premium,
                    s.last_paid_inst_no,
                    p.product_cd,
                    s.servicing_off,
                    s.installment_premium,
                    p.clm_cause_cd,
                    p.clm_detl_cd,
                    p.bank_cd,
                    p.branch_cd,
                    p.bank_acc_no,
                    p.bank_address,
                    s.maturity_date /*UNION ALL
                                                                  SELECT   NULL payable_no,
                                                                           NULL cheque_issued_dt,
                                                                           (SELECT   party_name
                                                                              FROM   ins_p_personal
                                                                             WHERE   pgid = c.pgid AND party_cd = '04' AND sl_no = 1)
                                                                              party_name,
                                                                           c.pgid,
                                                                           fun_ins_pgid_to_policy_no (c.pgid) policy_no,
                                                                           s.risk_date,
                                                                           s.product_cd || '-' || s.term product_term,
                                                                           s.last_paid_date,
                                                                           s.next_due_date,
                                                                           s.sum_assured,
                                                                           s.total_yearly_premium,
                                                                           s.installment_premium * s.last_paid_inst_no
                                                                              total_deposit_prem,
                                                                           0 cf_total_due,
                                                                           c.net_pay_amt cf_total_payable_amt,
                                                                           f_in_word (c.net_pay_amt) cf_in_word_due,
                                                                           f_in_word (c.net_pay_amt) cf_in_word,
                                                                           (SELECT   product_nm
                                                                              FROM   ins_product
                                                                             WHERE   product_cd = s.product_cd)
                                                                              product_nm,
                                                                           c.net_pay_amt net_payable_amt,
                                                                           s.suspense_amt,
                                                                           0 anf_premium_amt,
                                                                           0 prem_due_late_fee,
                                                                           0 anf_late_fee,
                                                                           TRUNC (c.i_dt) issue_dt,
                                                                           s.servicing_off office_code,
                                                                           c.i_usr prepared_by,
                                                                           0 other_ded_amt,
                                                                           0 source_tax,
                                                                           c.net_pay_amt gross_payable_amt,
                                                                           NVL (c.pay_bonus, 0) bonus_payable,
                                                                           NULL payment_dt,
                                                                           s.installment_premium,
                                                                           (SELECT   p_address_1 || ' ,' || p_address_2
                                                                              FROM   ins_p_address
                                                                             WHERE   pgid = c.pgid AND party_cd = '04')
                                                                              address,
                                                                           '02' clm_cause_cd,
                                                                           '01' clm_detl_cd,
                                                                           rep_f_bank (c.client_bank_cd) bank_nm,
                                                                           rep_f_branch (c.client_br_cd) branch_nm,
                                                                           c.client_acc_no bank_acc_no,
                                                                           NULL bank_address,
                                                                           c.net_pay_amt gross_without_anf,
                                                                           c.net_pay_amt tot_payable,
                                                                           0 loan_ded_amt,
                                                                           0 loan_interest,
                                                                           0 tot_anf_loan,
                                                                           s.maturity_date
                                                                    FROM   clm_exgratia_claim c, ins_p_summery s
                                                                   WHERE   c.pgid = NVL (p_pgid, c.pgid) AND c.pgid = s.pgid*/
                                   /*AND (p_report_option = '0'
                                                                                                       OR (    p_report_option = '1'
                                                                                                           AND (   NOT EXISTS (
                                                                                                                            SELECT 1
                                                                                                                              FROM acc_cheque_print_info t
                                                                                                                             WHERE t.pgid = c.pgid
                                                                                                                                   AND t.pk_ref = c.intimation_no
                                                                                                                                   AND t.print_doc_tp = '1')
                                                                                                                OR EXISTS (
                                                                                                                      SELECT 1
                                                                                                                        FROM clm_privilege_emp e, clm_privilege p
                                                                                                                       WHERE e.prv_cd = p.prv_cd
                                                                                                                         AND p.auth_cat_cd = '17'
                                                                                                                         AND UPPER (e.db_user) = UPPER (USER))
                                                                                                               )
                                                                                                          )
                                                                                                      )*/
                                   /*AND c.approved_dt BETWEEN NVL (p_start_dt, c.approved_dt)
                                                         AND NVL (p_end_dt, c.approved_dt)
                                   AND (   (    NVL (p_descendant, 'N') = 'N'
                                            AND s.servicing_off = NVL (p_office_cd, s.servicing_off)
                                           )
                                        OR (    NVL (p_descendant, 'N') = 'Y'
                                            AND EXISTS (
                                                       SELECT     f.office_cd
                                                             FROM hrm_office_setup f
                                                            WHERE f.office_cd = s.servicing_off
                                                       START WITH f.office_cd = NVL (p_office_cd, f.office_cd)
                                                       CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                                           )
                                       )*/
   ;

      CURSOR cur_commut
      IS
         SELECT   p.app_sl,
                  p.cheque_dt,
                  (SELECT   party_name
                     FROM   ins_p_personal
                    WHERE   pgid = p.pgid AND party_cd = '03' AND sl_no = 1)
                     party_name,
                  p.pgid,
                  fun_ins_pgid_to_policy_no (p.pgid) policy_no,
                  s.risk_date,
                  p.product_cd || '-' || s.term product_term,
                  s.last_paid_date,
                  s.next_due_date,
                  s.sum_assured,
                  s.total_yearly_premium,
                  s.installment_premium * s.last_paid_inst_no
                     total_deposit_prem,
                    NVL (p.loan_ded_amt, 0)
                  + NVL (p.loan_interest, 0)
                  + NVL (p.anf_premium_amt, 0)
                  + NVL (anf_late_fee, 0)
                     cf_total_due,
                  ( (NVL (p.commutation_amt, 0) + NVL (p.suspense_amt, 0))
                   - (  NVL (p.loan_ded_amt, 0)
                      + NVL (p.loan_interest, 0)
                      + NVL (p.anf_premium_amt, 0)
                      + NVL (anf_late_fee, 0)))
                     cf_total_payable_amt,
                  f_in_word (
                     NVL (p.loan_ded_amt, 0) + NVL (p.loan_interest, 0)
                  )
                     cf_in_word_due,
                  f_in_word (p.commutation_amt) cf_in_word,
                  (SELECT   product_nm
                     FROM   ins_product
                    WHERE   product_cd = p.product_cd)
                     product_nm,
                  p.commutation_amt net_payable_amt,
                  p.suspense_amt,
                  p.anf_premium_amt,
                  NULL prem_due_late_fee,
                  p.anf_late_fee,
                  TRUNC (p.i_dt) issue_dt,
                  s.servicing_off office_code,
                  p.i_usr prepared_by,
                  NULL other_ded_amt,
                  NULL source_tax,
                  NULL gross_payable_amt,
                  NULL bonus_payable,
                  NULL payment_dt,
                  s.installment_premium,
                  (SELECT   p_address_1 || ' ,' || p_address_2
                     FROM   ins_p_address
                    WHERE   pgid = p.pgid AND party_cd = '03')
                     address,
                  NULL clm_cause_cd,
                  NULL clm_detl_cd,
                  rep_f_bank (p.bank_cd) bank_nm,
                  rep_f_branch (p.branch_cd) branch_nm,
                  p.bank_acc_no,
                  NULL bank_address,
                  (NVL (p.commutation_amt, 0)
                   - (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0)))
                     gross_without_anf,
                  (  NVL (p.commutation_amt, 0)
                   + NVL (p.suspense_amt, 0)
                   - (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0)))
                     tot_payable,
                  p.loan_ded_amt,
                  p.loan_interest,
                  (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0))
                     tot_anf_loan,
                  s.maturity_date
           FROM   clm_commutation_info p, ins_p_summery s
          WHERE   p.pgid = NVL (p_pgid, p.pgid) AND p.pgid = s.pgid
                  AND p.commutation_dt BETWEEN NVL (p_start_dt,
                                                    p.commutation_dt)
                                           AND  NVL (p_end_dt,
                                                     p.commutation_dt)
                  AND ( (NVL (p_descendant, 'N') = 'N'
                         AND s.servicing_off =
                               NVL (p_office_cd, s.servicing_off))
                       OR (NVL (p_descendant, 'N') = 'Y'
                           AND EXISTS
                                 (    SELECT   f.office_cd
                                        FROM   hrm_office_setup f
                                       WHERE   f.office_cd = s.servicing_off
                                  START WITH   f.office_cd =
                                                  NVL (p_office_cd,
                                                       f.office_cd)
                                  CONNECT BY   PRIOR f.office_cd =
                                                  f.control_office_cd)))
                  AND NVL (p.payment_status, 'N') = 'N'
                  AND NVL (approve_flag, 'N') = 'N'
                  AND fun_locked_policy_auth (p.pgid) = '1';

      CURSOR cur_loan
      IS
           SELECT   a.pgid,
                    a.sl_no,
                    fun_ins_pgid_to_policy_no (a.pgid) policy_no,
                    a.servicing_off,
                    a.party_id,
                    a.sum_assured,
                    c.i_usr prepared_by,
                    c.checked_by,
                    c.approved_amount,
                    a.party_cd,
                    f_party_name (a.party_id, a.party_cd) party_name,
                    (SELECT   p_address_1 || ' ,' || p_address_2
                       FROM   ins_p_address
                      WHERE       pgid = a.pgid
                              AND party_cd = a.party_cd
                              AND party_id = a.party_id)
                       address,
                    s.risk_date,
                    c.product_cd || '-' || c.policy_term product_term,
                    c.last_paid_date,
                    s.installment_premium,
                    s.maturity_date,
                    s.last_paid_inst_no,
                    (s.installment_premium * s.last_paid_inst_no)
                       tot_paid_premium,
                    s.suspense_amt,
                    a.appl_dt,
                    f_in_word (c.approved_amount) amount_in_word,
                    s.installment_premium * s.last_paid_inst_no
                       total_deposit_prem,
                    c.approved_amount - NVL (c.service_charge, 0)
                       net_payble_amount,
                    c.service_charge,
                    rep_f_bank (ca.bank_cd) bank_nm,
                    rep_f_branch (ca.br_cd) branch_nm,
                    ca.account_no,
                    ca.address cl_address
             FROM   pol_loan_application a,
                    pol_loan_calculation c,
                    ins_p_summery s,
                    clm_client_account ca
            WHERE   a.appl_sl_no = NVL (p_appl_sl_no, a.appl_sl_no)
                    AND c.approved_st = '1'
                    AND ( (NVL (p_descendant, 'N') = 'N'
                           AND a.servicing_off =
                                 NVL (p_office_cd, a.servicing_off))
                         OR (NVL (p_descendant, 'N') = 'Y'
                             AND EXISTS
                                   (    SELECT   f.office_cd
                                          FROM   hrm_office_setup f
                                         WHERE   f.office_cd = a.servicing_off
                                    START WITH   f.office_cd =
                                                    NVL (p_office_cd,
                                                         f.office_cd)
                                    CONNECT BY   PRIOR f.office_cd =
                                                    f.control_office_cd)))
                    AND a.appl_dt BETWEEN NVL (p_start_dt, a.appl_dt)
                                      AND  NVL (p_end_dt, a.appl_dt)
                    AND a.pgid = c.pgid
                    AND a.sl_no = c.sl_no
                    AND a.pgid(+) = s.pgid
                    AND c.pgid(+) = a.pgid
                    AND a.pgid = ca.pgid(+)
                    AND a.party_id = ca.party_id(+)
                    AND a.party_cd = ca.party_cd(+)
         /*AND (p_report_option = '0'
               OR (    p_report_option = '1'
                   AND (   NOT EXISTS (
                                    SELECT 1
                                      FROM acc_cheque_print_info t
                                     WHERE t.pgid = c.pgid
                                           AND t.pk_ref = c.sl_no
                                           AND t.print_doc_tp = '1')
                        OR EXISTS (
                              SELECT 1
                                FROM clm_privilege_emp e, clm_privilege p
                               WHERE e.prv_cd = p.prv_cd
                                 AND p.auth_cat_cd = '17'
                                 AND UPPER (e.db_user) = UPPER (USER))
                       )
                  )
              )*/
         ORDER BY   a.appl_sl_no;

      CURSOR cur_sur
      IS
           SELECT   fun_ins_pgid_to_policy_no (c.pgid) policy_no,
                    c.pgid,
                    r.p_address_1,
                    c.application_dt,
                    c.i_usr prepared_by,
                    c.product_cd || '-' || c.policy_term product_term,
                    c.last_paid_date,
                    s.maturity_date,
                    c.sum_assured,
                    s.last_paid_inst_no,
                    s.installment_premium,
                    c.surrender_value,
                    (s.last_paid_inst_no * s.installment_premium)
                       paidup_primium,
                    c.paid_up_value,
                    s.suspense_amt,
                    c.pay_bonus_amt,
                    p.party_name,
                    (c.surrender_value + s.suspense_amt + c.pay_bonus_amt)
                       total,
                    l.loan_amount,
                    l.int_amount,
                    (l.loan_amount + l.int_amount) total_loan,
                    c.approved_by,
                    a.party_cd,
                    s.risk_date,
                    (SELECT   p_address_1 || ' ,' || p_address_2
                       FROM   ins_p_address
                      WHERE       pgid = a.pgid
                              AND party_cd = a.party_cd
                              AND party_id = a.party_id)
                       address,
                    s.installment_premium * s.last_paid_inst_no
                       total_deposit_prem,
                    c.approved_amount,
                    f_in_word (c.approved_amount) amount_in_word,
                    c.tax_deduction,
                    rep_f_bank (ca.bank_cd) bank_nm,
                    rep_f_branch (ca.br_cd) branch_nm,
                    ca.account_no,
                    ca.address cl_address,
                    a.appl_sl_no,
                    c.i_dt issue_dt
             FROM   sur_sur_calculation c,
                    sur_sur_application a,
                    sur_loan_cal_prev_loan l,
                    ins_p_summery s,
                    ins_p_personal p,
                    ins_p_address r,
                    clm_client_account ca
            WHERE       a.appl_sl_no = NVL (p_appl_sl_no, a.appl_sl_no)
                    AND a.pgid = NVL (p_pgid, c.pgid)
                    AND c.pgid = a.pgid
                    AND c.appl_sl_no = a.appl_sl_no
                    AND c.pgid = l.pgid(+)
                    AND c.appl_sl_no = l.appl_sl_no(+)
                    AND c.pgid = s.pgid
                    AND a.pgid = p.pgid
                    AND a.party_cd = p.party_cd
                    AND a.party_id = p.party_id
                    AND a.pgid = r.pgid(+)
                    AND a.party_cd = r.party_cd(+)
                    AND a.party_id = r.party_id(+)
                    AND ( (NVL (p_descendant, 'N') = 'N'
                           AND a.servicing_off =
                                 NVL (p_office_cd, a.servicing_off))
                         OR (NVL (p_descendant, 'N') = 'Y'
                             AND EXISTS
                                   (    SELECT   f.office_cd
                                          FROM   hrm_office_setup f
                                         WHERE   f.office_cd = a.servicing_off
                                    START WITH   f.office_cd =
                                                    NVL (p_office_cd,
                                                         f.office_cd)
                                    CONNECT BY   PRIOR f.office_cd =
                                                    f.control_office_cd)))
                    AND a.appl_dt BETWEEN NVL (p_start_dt, a.appl_dt)
                                      AND  NVL (p_end_dt, a.appl_dt)
                    AND a.pgid = ca.pgid(+)
                    AND a.party_id = ca.party_id(+)
                    AND a.party_cd = ca.party_cd(+)
         /*AND (p_report_option = '0'
               OR (    p_report_option = '1'
                   AND (   NOT EXISTS (
                                    SELECT 1
                                      FROM acc_cheque_print_info t
                                     WHERE t.pgid = c.pgid
                                           AND t.pk_ref = c.appl_sl_no
                                           AND t.print_doc_tp = '1')
                        OR EXISTS (
                              SELECT 1
                                FROM clm_privilege_emp e, clm_privilege p
                               WHERE e.prv_cd = p.prv_cd
                                 AND p.auth_cat_cd = '17'
                                 AND UPPER (e.db_user) = UPPER (USER))
                       )
                  )
              )*/
         ORDER BY   a.appl_sl_no;

      rec_cur_claim          cur_claim%ROWTYPE;
      rec_cur_loan           cur_loan%ROWTYPE;
      rec_cur_sur            cur_sur%ROWTYPE;
      rec_cur_commut         cur_commut%ROWTYPE;
   BEGIN
      IF p_report_tp = '01'
      THEN
         OPEN cur_claim;

         LOOP
            FETCH cur_claim INTO   rec_cur_claim;

            EXIT WHEN cur_claim%NOTFOUND;
            v_payment_receipt.party_name := rec_cur_claim.party_name;
            v_payment_receipt.pgid := rec_cur_claim.pgid;
            v_payment_receipt.policy_no := rec_cur_claim.policy_no;
            v_payment_receipt.risk_date := rec_cur_claim.risk_date;
            v_payment_receipt.product_term := rec_cur_claim.product_term;
            v_payment_receipt.last_paid_date := rec_cur_claim.last_paid_date;
            v_payment_receipt.next_due_date := rec_cur_claim.next_due_date;
            v_payment_receipt.sum_assured := rec_cur_claim.sum_assured;
            v_payment_receipt.total_yearly_premium :=
               rec_cur_claim.total_yearly_premium;
            v_payment_receipt.total_deposit_prem :=
               rec_cur_claim.total_deposit_prem;
            v_payment_receipt.product_nm := rec_cur_claim.product_nm;
            v_payment_receipt.net_payable_amt := rec_cur_claim.net_payable_amt;
            v_payment_receipt.anf_premium_amt := rec_cur_claim.anf_premium_amt;
            v_payment_receipt.anf_late_fee := rec_cur_claim.anf_late_fee;
            v_payment_receipt.issue_dt := rec_cur_claim.issue_dt;
            v_payment_receipt.office_code := rec_cur_claim.office_code;
            v_payment_receipt.prepared_by := rec_cur_claim.prepared_by;
            v_payment_receipt.source_tax := rec_cur_claim.source_tax;
            v_payment_receipt.gross_payable_amt :=
               rec_cur_claim.gross_payable_amt;
            v_payment_receipt.bonus_payable := rec_cur_claim.bonus_payable;
            v_payment_receipt.payment_dt := rec_cur_claim.payment_dt;
            v_payment_receipt.installment_premium :=
               rec_cur_claim.installment_premium;
            v_payment_receipt.address := rec_cur_claim.address;
            v_payment_receipt.clm_cause_cd := rec_cur_claim.clm_cause_cd;
            v_payment_receipt.clm_detl_cd := rec_cur_claim.clm_detl_cd;
            v_payment_receipt.bank_nm := rec_cur_claim.bank_nm;
            v_payment_receipt.branch_nm := rec_cur_claim.branch_nm;
            v_payment_receipt.bank_acc_no := rec_cur_claim.bank_acc_no;
            v_payment_receipt.bank_address := rec_cur_claim.bank_address;
            v_payment_receipt.gross_without_anf :=
               rec_cur_claim.gross_without_anf;
            v_payment_receipt.tot_payable := rec_cur_claim.tot_payable;
            v_payment_receipt.loan_ded_amt := rec_cur_claim.loan_ded_amt;
            v_payment_receipt.loan_interest := rec_cur_claim.loan_interest;
            v_payment_receipt.tot_anf_loan := rec_cur_claim.tot_anf_loan;
            v_payment_receipt.total_due := rec_cur_claim.cf_total_due;
            v_payment_receipt.in_word_total_due :=
               rec_cur_claim.cf_in_word_due;
            v_payment_receipt.total_payable_amt :=
               rec_cur_claim.cf_total_payable_amt;
            v_payment_receipt.in_word_total_payable_amt :=
               rec_cur_claim.cf_in_word;

            BEGIN
               SELECT   LTRIM (
                           TO_CHAR (
                              TO_DATE (
                                 LPAD (instlno, 2, 0)
                                 || TO_CHAR (SYSDATE, 'MMRRRR'),
                                 'DDMMRRRR'
                              ),
                              'DDTH'
                           ),
                           0
                        )
                 INTO   v_sb_instlno
                 FROM   (SELECT   sb_dt, ROWNUM instlno
                           FROM   (  SELECT   DISTINCT
                                              ADD_MONTHS (s.comm_date,
                                                          c.payment_year * 12)
                                                 sb_dt
                                       FROM   ins_p_summery s,
                                              clm_product_claim_detl c
                                      WHERE   s.pgid = rec_cur_claim.pgid
                                              AND s.product_cd = c.product_cd
                                              AND c.clm_cause_cd =
                                                    rec_cur_claim.clm_cause_cd
                                              AND c.clm_cause_cd = '02'
                                              AND c.clm_detl_cd =
                                                    rec_cur_claim.clm_detl_cd
                                              AND c.clm_detl_cd = '02'
                                              AND c.payment_type = '02'
                                              AND s.term BETWEEN c.policy_term_fr
                                                             AND  c.policy_term_to
                                   ORDER BY   sb_dt))
                WHERE   sb_dt = rec_cur_claim.payment_dt;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_sb_instlno := NULL;
            END;

            BEGIN
               SELECT   NVL (c.unadj_coll_amt, 0)
                        + rec_cur_claim.suspense_amt,
                        c.due_prem_amt,
                        c.due_prem_late_fee,
                        c.paid_prem_late_fee_after_disc
                 INTO   v_payment_receipt.suspense_amt,
                        v_due_prem_amt,
                        v_due_prem_late_fee,
                        v_paid_prem_late_fee
                 FROM   clm_claim_appl c
                WHERE       c.pgid = rec_cur_claim.pgid
                        AND c.clm_cause_cd = rec_cur_claim.clm_cause_cd
                        AND c.clm_detl_cd = rec_cur_claim.clm_detl_cd
                        AND c.payable_dt = rec_cur_claim.payment_dt;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_payment_receipt.suspense_amt := rec_cur_claim.suspense_amt;
                  v_due_prem_amt := 0;
                  v_due_prem_late_fee := 0;
            END;

            v_payment_receipt.sb_instlno := v_sb_instlno;
            v_payment_receipt.maturity_date := rec_cur_claim.maturity_date;
            -----------
            v_payment_receipt.prem_due_late_fee :=
               NVL (v_due_prem_late_fee, 0) + NVL (v_paid_prem_late_fee, 0);
            v_payment_receipt.other_ded_amt :=
               NVL (rec_cur_claim.other_ded_amt, 0) + NVL (v_due_prem_amt, 0);

            ---Cheque for no of print--
            ---Add this by Musha on 08.10.2015--
            BEGIN
               SELECT   DECODE (print_cnt, '1', 'Duplicate', NULL)
                 INTO   v_payment_receipt.cheque_print_st
                 FROM   (SELECT   DECODE (
                                     p_report_option,
                                     '0',
                                     '0',
                                     DECODE (
                                        (SELECT   COUNT ( * )
                                           FROM   acc_cheque_print_info t
                                          WHERE   t.pgid = rec_cur_claim.pgid
                                                  AND t.pk_ref =
                                                        rec_cur_claim.payable_no
                                                  AND t.print_doc_tp = '1'),
                                        0,
                                        '0',
                                        DECODE (
                                           (SELECT   COUNT ( * )
                                              FROM   clm_privilege_emp e,
                                                     clm_privilege p
                                             WHERE   e.prv_cd = p.prv_cd
                                                     AND p.auth_cat_cd = '17'
                                                     AND UPPER (e.db_user) =
                                                           UPPER (USER)),
                                           0,
                                           '1',
                                           '0'
                                        )
                                     )
                                  )
                                     print_cnt
                           FROM   DUAL);
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_payment_receipt.cheque_print_st := NULL;
            END;

            PIPE ROW (v_payment_receipt);
         END LOOP;

         CLOSE cur_claim;
      ELSIF p_report_tp = '02'
      THEN
         OPEN cur_loan;

         LOOP
            FETCH cur_loan INTO   rec_cur_loan;

            EXIT WHEN cur_loan%NOTFOUND;
            v_payment_receipt.party_name := rec_cur_loan.party_name;
            v_payment_receipt.pgid := rec_cur_loan.pgid;
            v_payment_receipt.policy_no := rec_cur_loan.policy_no;
            v_payment_receipt.risk_date := rec_cur_loan.risk_date;
            v_payment_receipt.product_term := rec_cur_loan.product_term;
            v_payment_receipt.last_paid_date := rec_cur_loan.last_paid_date;
            v_payment_receipt.next_due_date := NULL;
            v_payment_receipt.sum_assured := rec_cur_loan.sum_assured;
            v_payment_receipt.total_yearly_premium := NULL;
            v_payment_receipt.total_deposit_prem :=
               rec_cur_loan.total_deposit_prem;
            v_payment_receipt.product_nm := NULL;
            v_payment_receipt.net_payable_amt :=
               rec_cur_loan.net_payble_amount;
            v_payment_receipt.suspense_amt := rec_cur_loan.suspense_amt;
            v_payment_receipt.anf_premium_amt := NULL;
            v_payment_receipt.prem_due_late_fee := NULL;
            v_payment_receipt.anf_late_fee := NULL;
            v_payment_receipt.issue_dt := NULL;
            v_payment_receipt.office_code := NULL;
            v_payment_receipt.prepared_by := rec_cur_loan.prepared_by;
            v_payment_receipt.other_ded_amt := NULL;
            v_payment_receipt.source_tax := NULL;
            v_payment_receipt.gross_payable_amt := NULL;
            v_payment_receipt.bonus_payable := NULL;
            v_payment_receipt.payment_dt := rec_cur_loan.appl_dt;
            v_payment_receipt.installment_premium :=
               rec_cur_loan.installment_premium;
            v_payment_receipt.address := rec_cur_loan.address;
            v_payment_receipt.clm_cause_cd := NULL;
            v_payment_receipt.clm_detl_cd := NULL;
            v_payment_receipt.bank_nm := rec_cur_loan.bank_nm;
            v_payment_receipt.branch_nm := rec_cur_loan.branch_nm;
            v_payment_receipt.bank_acc_no := rec_cur_loan.account_no;
            v_payment_receipt.bank_address := rec_cur_loan.cl_address;
            v_payment_receipt.gross_without_anf :=
               rec_cur_loan.approved_amount;
            v_payment_receipt.tot_payable := NULL;
            v_payment_receipt.loan_ded_amt := NULL;
            v_payment_receipt.loan_interest := rec_cur_loan.service_charge;
            v_payment_receipt.tot_anf_loan := NULL;
            v_payment_receipt.total_due := NULL;
            v_payment_receipt.in_word_total_due := NULL;
            v_payment_receipt.total_payable_amt :=
               rec_cur_loan.approved_amount;
            v_payment_receipt.in_word_total_payable_amt :=
               rec_cur_loan.amount_in_word;
            v_payment_receipt.maturity_date := rec_cur_loan.maturity_date;

            ---Cheque for no of print--
            ---Add this by Musha on 08.10.2015--
            BEGIN
               SELECT   DECODE (print_cnt, '1', 'Duplicate', NULL)
                 INTO   v_payment_receipt.cheque_print_st
                 FROM   (SELECT   DECODE (
                                     p_report_option,
                                     '0',
                                     '0',
                                     DECODE (
                                        (SELECT   COUNT ( * )
                                           FROM   acc_cheque_print_info t
                                          WHERE   t.pgid = rec_cur_loan.pgid
                                                  AND t.pk_ref =
                                                        rec_cur_loan.sl_no
                                                  AND t.print_doc_tp = '1'),
                                        0,
                                        '0',
                                        DECODE (
                                           (SELECT   COUNT ( * )
                                              FROM   clm_privilege_emp e,
                                                     clm_privilege p
                                             WHERE   e.prv_cd = p.prv_cd
                                                     AND p.auth_cat_cd = '17'
                                                     AND UPPER (e.db_user) =
                                                           UPPER (USER)),
                                           0,
                                           '1',
                                           '0'
                                        )
                                     )
                                  )
                                     print_cnt
                           FROM   DUAL);
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_payment_receipt.cheque_print_st := NULL;
            END;

            PIPE ROW (v_payment_receipt);
         END LOOP;

         CLOSE cur_loan;
      ELSIF p_report_tp = '03'
      THEN
         OPEN cur_sur;

         LOOP
            FETCH cur_sur INTO   rec_cur_sur;

            EXIT WHEN cur_sur%NOTFOUND;
            v_payment_receipt.party_name := rec_cur_sur.party_name;
            v_payment_receipt.pgid := rec_cur_sur.pgid;
            v_payment_receipt.policy_no := rec_cur_sur.policy_no;
            v_payment_receipt.risk_date := rec_cur_sur.risk_date;
            v_payment_receipt.product_term := rec_cur_sur.product_term;
            v_payment_receipt.last_paid_date := rec_cur_sur.last_paid_date;
            v_payment_receipt.next_due_date := NULL;
            v_payment_receipt.sum_assured := rec_cur_sur.sum_assured;
            v_payment_receipt.total_yearly_premium := NULL;
            v_payment_receipt.total_deposit_prem :=
               rec_cur_sur.total_deposit_prem;
            v_payment_receipt.product_nm := NULL;
            v_payment_receipt.net_payable_amt := rec_cur_sur.approved_amount;
            v_payment_receipt.suspense_amt := rec_cur_sur.suspense_amt;
            v_payment_receipt.anf_premium_amt := NULL;
            v_payment_receipt.prem_due_late_fee := NULL;
            v_payment_receipt.anf_late_fee := NULL;
            v_payment_receipt.issue_dt := rec_cur_sur.issue_dt;
            v_payment_receipt.office_code := NULL;
            v_payment_receipt.prepared_by := rec_cur_sur.prepared_by;
            v_payment_receipt.other_ded_amt := NULL;
            v_payment_receipt.source_tax := rec_cur_sur.tax_deduction;
            v_payment_receipt.gross_payable_amt := NULL;
            v_payment_receipt.bonus_payable := rec_cur_sur.pay_bonus_amt;
            v_payment_receipt.payment_dt := rec_cur_sur.application_dt;
            v_payment_receipt.installment_premium :=
               rec_cur_sur.installment_premium;
            v_payment_receipt.address := rec_cur_sur.address;
            v_payment_receipt.clm_cause_cd := NULL;
            v_payment_receipt.clm_detl_cd := NULL;
            v_payment_receipt.bank_nm := rec_cur_sur.bank_nm;
            v_payment_receipt.branch_nm := rec_cur_sur.branch_nm;
            v_payment_receipt.bank_acc_no := rec_cur_sur.account_no;
            v_payment_receipt.bank_address := rec_cur_sur.cl_address;
            v_payment_receipt.gross_without_anf := rec_cur_sur.surrender_value;
            v_payment_receipt.tot_payable := NULL;
            v_payment_receipt.loan_ded_amt := NULL;
            v_payment_receipt.loan_interest := NULL;
            v_payment_receipt.tot_anf_loan := NULL;
            v_payment_receipt.total_due := NULL;
            v_payment_receipt.in_word_total_due := NULL;
            v_payment_receipt.total_payable_amt := rec_cur_sur.approved_amount;
            v_payment_receipt.in_word_total_payable_amt :=
               rec_cur_sur.amount_in_word;
            v_payment_receipt.maturity_date := rec_cur_sur.maturity_date;

            ---Cheque for no of print--
            ---Add this by Musha on 08.10.2015--
            BEGIN
               SELECT   DECODE (print_cnt, '1', 'Duplicate', NULL)
                 INTO   v_payment_receipt.cheque_print_st
                 FROM   (SELECT   DECODE (
                                     p_report_option,
                                     '0',
                                     '0',
                                     DECODE (
                                        (SELECT   COUNT ( * )
                                           FROM   acc_cheque_print_info t
                                          WHERE   t.pgid = rec_cur_sur.pgid
                                                  AND t.pk_ref =
                                                        rec_cur_sur.appl_sl_no
                                                  AND t.print_doc_tp = '1'),
                                        0,
                                        '0',
                                        DECODE (
                                           (SELECT   COUNT ( * )
                                              FROM   clm_privilege_emp e,
                                                     clm_privilege p
                                             WHERE   e.prv_cd = p.prv_cd
                                                     AND p.auth_cat_cd = '17'
                                                     AND UPPER (e.db_user) =
                                                           UPPER (USER)),
                                           0,
                                           '1',
                                           '0'
                                        )
                                     )
                                  )
                                     print_cnt
                           FROM   DUAL);
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_payment_receipt.cheque_print_st := NULL;
            END;

            PIPE ROW (v_payment_receipt);
         END LOOP;

         CLOSE cur_sur;
      ELSIF p_report_tp = '04'
      THEN
         OPEN cur_commut;

         LOOP
            FETCH cur_commut INTO   rec_cur_commut;

            EXIT WHEN cur_commut%NOTFOUND;
            v_payment_receipt.party_name := rec_cur_commut.party_name;
            v_payment_receipt.pgid := rec_cur_commut.pgid;
            v_payment_receipt.policy_no := rec_cur_commut.policy_no;
            v_payment_receipt.risk_date := rec_cur_commut.risk_date;
            v_payment_receipt.product_term := rec_cur_commut.product_term;
            v_payment_receipt.last_paid_date := rec_cur_commut.last_paid_date;
            v_payment_receipt.next_due_date := rec_cur_commut.next_due_date;
            v_payment_receipt.sum_assured := rec_cur_commut.sum_assured;
            v_payment_receipt.total_yearly_premium :=
               rec_cur_commut.total_yearly_premium;
            v_payment_receipt.total_deposit_prem :=
               rec_cur_commut.total_deposit_prem;
            v_payment_receipt.product_nm := rec_cur_commut.product_nm;
            v_payment_receipt.net_payable_amt :=
               rec_cur_commut.net_payable_amt;
            v_payment_receipt.anf_premium_amt :=
               rec_cur_commut.anf_premium_amt;
            v_payment_receipt.anf_late_fee := rec_cur_commut.anf_late_fee;
            v_payment_receipt.issue_dt := rec_cur_commut.issue_dt;
            v_payment_receipt.office_code := rec_cur_commut.office_code;
            v_payment_receipt.prepared_by := rec_cur_commut.prepared_by;
            v_payment_receipt.source_tax := rec_cur_commut.source_tax;
            v_payment_receipt.gross_payable_amt :=
               rec_cur_commut.gross_payable_amt;
            v_payment_receipt.bonus_payable := rec_cur_commut.bonus_payable;
            v_payment_receipt.payment_dt := rec_cur_commut.payment_dt;
            v_payment_receipt.installment_premium :=
               rec_cur_commut.installment_premium;
            v_payment_receipt.address := rec_cur_commut.address;
            v_payment_receipt.clm_cause_cd := rec_cur_commut.clm_cause_cd;
            v_payment_receipt.clm_detl_cd := rec_cur_commut.clm_detl_cd;
            v_payment_receipt.bank_nm := rec_cur_commut.bank_nm;
            v_payment_receipt.branch_nm := rec_cur_commut.branch_nm;
            v_payment_receipt.bank_acc_no := rec_cur_commut.bank_acc_no;
            v_payment_receipt.bank_address := rec_cur_commut.bank_address;
            v_payment_receipt.gross_without_anf :=
               rec_cur_commut.gross_without_anf;
            v_payment_receipt.tot_payable := rec_cur_commut.tot_payable;
            v_payment_receipt.loan_ded_amt := rec_cur_commut.loan_ded_amt;
            v_payment_receipt.loan_interest := rec_cur_commut.loan_interest;
            v_payment_receipt.tot_anf_loan := rec_cur_commut.tot_anf_loan;
            v_payment_receipt.total_due := rec_cur_commut.cf_total_due;
            v_payment_receipt.in_word_total_due :=
               rec_cur_commut.cf_in_word_due;
            v_payment_receipt.total_payable_amt :=
               rec_cur_commut.cf_total_payable_amt;
            v_payment_receipt.in_word_total_payable_amt :=
               rec_cur_commut.cf_in_word;
            v_payment_receipt.maturity_date := rec_cur_commut.maturity_date;

            ---Cheque for no of print--
            ---Add this by Musha on 08.10.2015--
            BEGIN
               SELECT   DECODE (print_cnt, '1', 'Duplicate', NULL)
                 INTO   v_payment_receipt.cheque_print_st
                 FROM   (SELECT   DECODE (
                                     p_report_option,
                                     '0',
                                     '0',
                                     DECODE (
                                        (SELECT   COUNT ( * )
                                           FROM   acc_cheque_print_info t
                                          WHERE   t.pgid =
                                                     rec_cur_commut.pgid
                                                  AND t.pk_ref =
                                                        rec_cur_commut.app_sl
                                                  AND t.print_doc_tp = '1'),
                                        0,
                                        '0',
                                        DECODE (
                                           (SELECT   COUNT ( * )
                                              FROM   clm_privilege_emp e,
                                                     clm_privilege p
                                             WHERE   e.prv_cd = p.prv_cd
                                                     AND p.auth_cat_cd = '17'
                                                     AND UPPER (e.db_user) =
                                                           UPPER (USER)),
                                           0,
                                           '1',
                                           '0'
                                        )
                                     )
                                  )
                                     print_cnt
                           FROM   DUAL);
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_payment_receipt.cheque_print_st := NULL;
            END;

            PIPE ROW (v_payment_receipt);
         END LOOP;

         CLOSE cur_commut;
      END IF;

      RETURN;
   END fun_payment_receipt;

   --Project wise collection reeport
   FUNCTION fun_proj_wise_coll (p_office_cat      VARCHAR2,
                                p_office_cd       VARCHAR2,
                                p_check           CHAR,
                                p_ins_tp_cd       NUMBER,
                                p_project_cd      NUMBER,
                                p_coll_dt_fr      DATE,
                                p_coll_dt_to      DATE,
                                p_pr_date_from    DATE,
                                p_pr_date_to      DATE)
      RETURN tp_proj_wise_coll_tab
      PIPELINED
   AS
      v_unadj_policy        tp_proj_wise_coll;
      v_partial_coll        NUMBER (12, 2);
      v_total_coll          NUMBER (12, 2);
      v_no_of_inst          NUMBER;
      v_first_prem_amount   NUMBER (12, 2) := 0;
      v_def_prem_amount     NUMBER (12, 2) := 0;
      v_sec_prem_amount     NUMBER (12, 2) := 0;
      v_ren_prem_amount     NUMBER (12, 2) := 0;

      CURSOR c_fpr_coll
      IS
           SELECT   ar.active_office_cd,
                    ap.project_cd,
                    SUM (ar.coll_amount) coll_amount
             FROM   acc_advance_receivables ar, ins_p_proposal ap
            WHERE   ar.active_office_cd IN
                          (SELECT   DISTINCT
                                    DECODE (p_check,
                                            0, x.office_cd,
                                            y.office_cd)
                             FROM   (SELECT   p_office_cd office_cd FROM DUAL)
                                    x,
                                    (    SELECT   office_cd
                                           FROM   hrm_office_setup
                                     CONNECT BY   PRIOR office_cd =
                                                     control_office_cd
                                     START WITH   office_cd =
                                                     NVL (p_office_cd,
                                                          office_cd)
                                     UNION ALL
                                     SELECT   p_office_cd office_cd FROM DUAL)
                                    y)
                    AND ( (p_coll_dt_fr IS NOT NULL
                           AND p_coll_dt_to IS NOT NULL
                           AND ar.receive_date BETWEEN p_coll_dt_fr
                                                   AND  p_coll_dt_to)
                         OR (    p_coll_dt_fr IS NULL
                             AND p_coll_dt_to IS NULL
                             AND 1 = 1))
                    AND ( (p_pr_date_from IS NOT NULL
                           AND p_pr_date_to IS NOT NULL
                           AND ar.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                       AND  p_pr_date_to)
                         OR (    p_pr_date_from IS NULL
                             AND p_pr_date_to IS NULL
                             AND 1 = 1))
                    AND ar.rec_status = '1'
                    AND ar.pgid = ap.pgid
                    AND ( (p_ins_tp_cd IS NOT NULL
                           AND ap.ins_tp_cd = p_ins_tp_cd)
                         OR (p_ins_tp_cd IS NULL AND 1 = 1))
                    AND ( (p_project_cd IS NOT NULL
                           AND ap.project_cd = p_project_cd)
                         OR (p_project_cd IS NULL AND 1 = 1))
         GROUP BY   ar.active_office_cd, ap.project_cd, ar.pgid;

      CURSOR c_oth_coll
      IS
         SELECT   r.pgid,
                  r.receive_id,
                  r.active_office_cd,
                  NVL (r.coll_amount, 0) coll_amount,
                  r.installment_no_from,
                  r.installment_no_to,
                  r.due_dt_from,
                  r.due_dt_to,
                  s.installment_premium,
                  s.pay_mode_cd,
                  s.ins_tp_cd,
                  j.project_cd
           FROM   ins.acc_receivables r,
                  ins_p_summery s,
                  ins_project_setup t,
                  ins_project j
          WHERE   r.pgid = s.pgid
                  AND r.active_office_cd IN
                           (SELECT   DISTINCT
                                     DECODE (p_check,
                                             0, x.office_cd,
                                             y.office_cd)
                              FROM   (SELECT   p_office_cd office_cd
                                        FROM   DUAL) x,
                                     (    SELECT   office_cd
                                            FROM   hrm_office_setup
                                      CONNECT BY   PRIOR office_cd =
                                                      control_office_cd
                                      START WITH   office_cd =
                                                      NVL (p_office_cd,
                                                           office_cd)
                                      UNION ALL
                                      SELECT   p_office_cd office_cd
                                        FROM   DUAL) y)
                  AND ( (p_coll_dt_fr IS NOT NULL
                         AND p_coll_dt_to IS NOT NULL
                         AND r.receive_date BETWEEN p_coll_dt_fr
                                                AND  p_coll_dt_to)
                       OR (    p_coll_dt_fr IS NULL
                           AND p_coll_dt_to IS NULL
                           AND 1 = 1))
                  AND ( (p_pr_date_from IS NOT NULL
                         AND p_pr_date_to IS NOT NULL
                         AND r.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                    AND  p_pr_date_to)
                       OR (    p_pr_date_from IS NULL
                           AND p_pr_date_to IS NULL
                           AND 1 = 1))
                  AND r.rec_status = '1'
                  AND ( (p_ins_tp_cd IS NOT NULL
                         AND s.ins_tp_cd = p_ins_tp_cd)
                       OR (p_ins_tp_cd IS NULL AND 1 = 1))
                  AND ( (p_project_cd IS NOT NULL
                         AND j.project_cd = p_project_cd)
                       OR (p_project_cd IS NULL AND 1 = 1))
                  AND s.pps_cd = t.pps_cd
                  AND t.project_cd = j.project_cd;

      rec_c_fpr_coll        c_fpr_coll%ROWTYPE;
      rec_c_oth_coll        c_oth_coll%ROWTYPE;
   BEGIN
      OPEN c_fpr_coll;

      LOOP
         FETCH c_fpr_coll INTO   rec_c_fpr_coll;

         EXIT WHEN c_fpr_coll%NOTFOUND;
         v_unadj_policy.office_cd := rec_c_fpr_coll.active_office_cd;
         v_unadj_policy.project_cd := rec_c_fpr_coll.project_cd;
         v_unadj_policy.first_prem_amt := rec_c_fpr_coll.coll_amount;
         v_unadj_policy.deffered_amt := 0;
         v_unadj_policy.second_yr_amt := 0;
         v_unadj_policy.renewal_amt := 0;
         PIPE ROW (v_unadj_policy);
      END LOOP;

      CLOSE c_fpr_coll;

      OPEN c_oth_coll;

      LOOP
         FETCH c_oth_coll INTO   rec_c_oth_coll;

         EXIT WHEN c_oth_coll%NOTFOUND;

         BEGIN
              SELECT   SUM (coll_amount)
                INTO   v_partial_coll
                FROM   acc_partial_receivables p, acc_partial_receivables_ref r
               WHERE       pgid = rec_c_oth_coll.pgid
                       AND r.receive_id_ref = rec_c_oth_coll.receive_id
                       AND p.receive_id = r.receive_id
                       AND p.rec_status = '1'
            GROUP BY   r.receive_id_ref;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_partial_coll := 0;
         END;

         v_total_coll := 0;
         v_total_coll := rec_c_oth_coll.coll_amount + v_partial_coll;
         v_no_of_inst :=
            (rec_c_oth_coll.installment_no_to
             - rec_c_oth_coll.installment_no_from)
            + 1;

         FOR i IN rec_c_oth_coll.installment_no_from .. rec_c_oth_coll.installment_no_to
         LOOP
            v_first_prem_amount := 0;
            v_def_prem_amount := 0;
            v_sec_prem_amount := 0;
            v_ren_prem_amount := 0;

            IF rec_c_oth_coll.pay_mode_cd = '01'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
                  v_def_prem_amount := 0;
               ELSIF i = 2
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '02'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i = 2
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i IN (3, 4)
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '03'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 4
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 5 AND i <= 8
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '04'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 12
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 13 AND i <= 24
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '05'
            THEN
               v_first_prem_amount :=
                  ROUND ( (v_total_coll / v_no_of_inst), 2);
               v_def_prem_amount := 0;
               v_sec_prem_amount := 0;
               v_ren_prem_amount := 0;
            END IF;

            v_unadj_policy.office_cd := rec_c_oth_coll.active_office_cd;
            v_unadj_policy.project_cd := rec_c_oth_coll.project_cd;
            v_unadj_policy.first_prem_amt := v_first_prem_amount;
            v_unadj_policy.deffered_amt := v_def_prem_amount;
            v_unadj_policy.second_yr_amt := v_sec_prem_amount;
            v_unadj_policy.renewal_amt := v_ren_prem_amount;
            PIPE ROW (v_unadj_policy);
         END LOOP;
      END LOOP;

      CLOSE c_oth_coll;

      RETURN;
   END fun_proj_wise_coll;

   --service wise collection reeport
   FUNCTION fun_service_wise_coll (p_office_cat      VARCHAR2,
                                   p_office_cd       VARCHAR2,
                                   p_check           CHAR,
                                   p_ins_tp_cd       NUMBER,
                                   p_coll_dt_fr      DATE,
                                   p_coll_dt_to      DATE,
                                   p_pr_date_from    DATE,
                                   p_pr_date_to      DATE)
      RETURN tp_service_wise_coll_tab
      PIPELINED
   AS
      v_unadj_policy        tp_service_wise_coll;
      v_partial_coll        NUMBER (12, 2);
      v_total_coll          NUMBER (12, 2);
      v_no_of_inst          NUMBER;
      v_first_prem_amount   NUMBER (12, 2) := 0;
      v_def_prem_amount     NUMBER (12, 2) := 0;
      v_sec_prem_amount     NUMBER (12, 2) := 0;
      v_ren_prem_amount     NUMBER (12, 2) := 0;

      CURSOR c_fpr_coll
      IS
           SELECT   fun_find_service_off (ar.active_office_cd) active_office_cd,
                    SUM (ar.coll_amount) coll_amount
             FROM   acc_advance_receivables ar, ins_p_proposal ap
            WHERE   ar.active_office_cd IN
                          (SELECT   DISTINCT
                                    DECODE (p_check,
                                            0, x.office_cd,
                                            y.office_cd)
                             FROM   (SELECT   p_office_cd office_cd FROM DUAL)
                                    x,
                                    (    SELECT   office_cd
                                           FROM   hrm_office_setup
                                     CONNECT BY   PRIOR office_cd =
                                                     control_office_cd
                                     START WITH   office_cd =
                                                     NVL (p_office_cd,
                                                          office_cd)
                                     UNION ALL
                                     SELECT   p_office_cd office_cd FROM DUAL)
                                    y)
                    AND ( (p_coll_dt_fr IS NOT NULL
                           AND p_coll_dt_to IS NOT NULL
                           AND ar.receive_date BETWEEN p_coll_dt_fr
                                                   AND  p_coll_dt_to)
                         OR (    p_coll_dt_fr IS NULL
                             AND p_coll_dt_to IS NULL
                             AND 1 = 1))
                    AND ( (p_pr_date_from IS NOT NULL
                           AND p_pr_date_to IS NOT NULL
                           AND ar.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                       AND  p_pr_date_to)
                         OR (    p_pr_date_from IS NULL
                             AND p_pr_date_to IS NULL
                             AND 1 = 1))
                    AND ar.rec_status = '1'
                    AND ar.pgid = ap.pgid
                    AND ( (p_ins_tp_cd IS NOT NULL
                           AND ap.ins_tp_cd = p_ins_tp_cd)
                         OR (p_ins_tp_cd IS NULL AND 1 = 1))
         GROUP BY   active_office_cd, ar.pgid;

      CURSOR c_oth_coll
      IS
         SELECT   r.pgid,
                  r.receive_id,
                  fun_find_service_off (r.active_office_cd) active_office_cd,
                  NVL (r.coll_amount, 0) coll_amount,
                  r.installment_no_from,
                  r.installment_no_to,
                  r.due_dt_from,
                  r.due_dt_to,
                  s.installment_premium,
                  s.pay_mode_cd,
                  s.ins_tp_cd
           FROM   acc_receivables r, ins_p_summery s
          WHERE   r.pgid = s.pgid
                  AND r.active_office_cd IN
                           (SELECT   DISTINCT
                                     DECODE (p_check,
                                             0, x.office_cd,
                                             y.office_cd)
                              FROM   (SELECT   p_office_cd office_cd
                                        FROM   DUAL) x,
                                     (    SELECT   office_cd
                                            FROM   hrm_office_setup
                                      CONNECT BY   PRIOR office_cd =
                                                      control_office_cd
                                      START WITH   office_cd =
                                                      NVL (p_office_cd,
                                                           office_cd)
                                      UNION ALL
                                      SELECT   p_office_cd office_cd
                                        FROM   DUAL) y)
                  AND ( (p_coll_dt_fr IS NOT NULL
                         AND p_coll_dt_to IS NOT NULL
                         AND r.receive_date BETWEEN p_coll_dt_fr
                                                AND  p_coll_dt_to)
                       OR (    p_coll_dt_fr IS NULL
                           AND p_coll_dt_to IS NULL
                           AND 1 = 1))
                  AND ( (p_pr_date_from IS NOT NULL
                         AND p_pr_date_to IS NOT NULL
                         AND r.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                    AND  p_pr_date_to)
                       OR (    p_pr_date_from IS NULL
                           AND p_pr_date_to IS NULL
                           AND 1 = 1))
                  AND r.rec_status = '1'
                  AND ( (p_ins_tp_cd IS NOT NULL
                         AND s.ins_tp_cd = p_ins_tp_cd)
                       OR (p_ins_tp_cd IS NULL AND 1 = 1));

      rec_c_fpr_coll        c_fpr_coll%ROWTYPE;
      rec_c_oth_coll        c_oth_coll%ROWTYPE;
   BEGIN
      OPEN c_fpr_coll;

      LOOP
         FETCH c_fpr_coll INTO   rec_c_fpr_coll;

         EXIT WHEN c_fpr_coll%NOTFOUND;
         v_unadj_policy.office_cd := rec_c_fpr_coll.active_office_cd;
         v_unadj_policy.first_prem_amt := rec_c_fpr_coll.coll_amount;
         v_unadj_policy.deffered_amt := 0;
         v_unadj_policy.second_yr_amt := 0;
         v_unadj_policy.renewal_amt := 0;
         PIPE ROW (v_unadj_policy);
      END LOOP;

      CLOSE c_fpr_coll;

      OPEN c_oth_coll;

      LOOP
         FETCH c_oth_coll INTO   rec_c_oth_coll;

         EXIT WHEN c_oth_coll%NOTFOUND;

         BEGIN
              SELECT   SUM (coll_amount)
                INTO   v_partial_coll
                FROM   acc_partial_receivables p, acc_partial_receivables_ref r
               WHERE       pgid = rec_c_oth_coll.pgid
                       AND r.receive_id_ref = rec_c_oth_coll.receive_id
                       AND p.receive_id = r.receive_id
                       AND p.rec_status = '1'
            GROUP BY   r.receive_id_ref;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_partial_coll := 0;
         END;

         v_total_coll := 0;
         v_total_coll := rec_c_oth_coll.coll_amount + v_partial_coll;
         v_no_of_inst :=
            (rec_c_oth_coll.installment_no_to
             - rec_c_oth_coll.installment_no_from)
            + 1;

         FOR i IN rec_c_oth_coll.installment_no_from .. rec_c_oth_coll.installment_no_to
         LOOP
            v_first_prem_amount := 0;
            v_def_prem_amount := 0;
            v_sec_prem_amount := 0;
            v_ren_prem_amount := 0;

            IF rec_c_oth_coll.pay_mode_cd = '01'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
                  v_def_prem_amount := 0;
               ELSIF i = 2
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '02'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i = 2
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i IN (3, 4)
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '03'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 4
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 5 AND i <= 8
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '04'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 12
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 13 AND i <= 24
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '05'
            THEN
               v_first_prem_amount :=
                  ROUND ( (v_total_coll / v_no_of_inst), 2);
               v_def_prem_amount := 0;
               v_sec_prem_amount := 0;
               v_ren_prem_amount := 0;
            END IF;

            v_unadj_policy.office_cd := rec_c_oth_coll.active_office_cd;
            v_unadj_policy.first_prem_amt := v_first_prem_amount;
            v_unadj_policy.deffered_amt := v_def_prem_amount;
            v_unadj_policy.second_yr_amt := v_sec_prem_amount;
            v_unadj_policy.renewal_amt := v_ren_prem_amount;
            PIPE ROW (v_unadj_policy);
         END LOOP;
      END LOOP;

      CLOSE c_oth_coll;

      RETURN;
   END fun_service_wise_coll;

   --Month wise collection reeport
   FUNCTION fun_month_wise_coll (p_office_cat      VARCHAR2,
                                 p_office_cd       VARCHAR2,
                                 p_check           CHAR,
                                 p_ins_tp_cd       NUMBER,
                                 p_coll_dt_fr      DATE,
                                 p_coll_dt_to      DATE,
                                 p_pr_date_from    DATE,
                                 p_pr_date_to      DATE)
      RETURN tp_month_wise_coll_tab
      PIPELINED
   AS
      v_unadj_policy        tp_month_wise_coll;
      v_partial_coll        NUMBER (12, 2);
      v_total_coll          NUMBER (12, 2);
      v_no_of_inst          NUMBER;
      v_first_prem_amount   NUMBER (12, 2) := 0;
      v_def_prem_amount     NUMBER (12, 2) := 0;
      v_sec_prem_amount     NUMBER (12, 2) := 0;
      v_ren_prem_amount     NUMBER (12, 2) := 0;

      CURSOR c_fpr_coll
      IS
           SELECT   ar.active_office_cd,
                    ar.receive_date,
                    SUM (ar.coll_amount) coll_amount
             FROM   acc_advance_receivables ar, ins_p_proposal ap
            WHERE   ar.active_office_cd IN
                          (SELECT   DISTINCT
                                    DECODE (p_check,
                                            0, x.office_cd,
                                            y.office_cd)
                             FROM   (SELECT   p_office_cd office_cd FROM DUAL)
                                    x,
                                    (    SELECT   office_cd
                                           FROM   hrm_office_setup
                                     CONNECT BY   PRIOR office_cd =
                                                     control_office_cd
                                     START WITH   office_cd =
                                                     NVL (p_office_cd,
                                                          office_cd)
                                     UNION ALL
                                     SELECT   p_office_cd office_cd FROM DUAL)
                                    y)
                    AND ( (p_coll_dt_fr IS NOT NULL
                           AND p_coll_dt_to IS NOT NULL
                           AND ar.receive_date BETWEEN p_coll_dt_fr
                                                   AND  p_coll_dt_to)
                         OR (    p_coll_dt_fr IS NULL
                             AND p_coll_dt_to IS NULL
                             AND 1 = 1))
                    AND ( (p_pr_date_from IS NOT NULL
                           AND p_pr_date_to IS NOT NULL
                           AND ar.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                       AND  p_pr_date_to)
                         OR (    p_pr_date_from IS NULL
                             AND p_pr_date_to IS NULL
                             AND 1 = 1))
                    AND ar.rec_status = '1'
                    AND ar.pgid = ap.pgid
                    AND ( (p_ins_tp_cd IS NOT NULL
                           AND ap.ins_tp_cd = p_ins_tp_cd)
                         OR (p_ins_tp_cd IS NULL AND 1 = 1))
         GROUP BY   ar.active_office_cd, ar.receive_date, ar.pgid;

      CURSOR c_oth_coll
      IS
         SELECT   r.pgid,
                  r.receive_id,
                  r.active_office_cd,
                  r.receive_date,
                  NVL (r.coll_amount, 0) coll_amount,
                  r.installment_no_from,
                  r.installment_no_to,
                  r.due_dt_from,
                  r.due_dt_to,
                  s.installment_premium,
                  s.pay_mode_cd,
                  s.ins_tp_cd
           FROM   acc_receivables r, ins_p_summery s
          WHERE   r.pgid = s.pgid
                  AND r.active_office_cd IN
                           (SELECT   DISTINCT
                                     DECODE (p_check,
                                             0, x.office_cd,
                                             y.office_cd)
                              FROM   (SELECT   p_office_cd office_cd
                                        FROM   DUAL) x,
                                     (    SELECT   office_cd
                                            FROM   hrm_office_setup
                                      CONNECT BY   PRIOR office_cd =
                                                      control_office_cd
                                      START WITH   office_cd =
                                                      NVL (p_office_cd,
                                                           office_cd)
                                      UNION ALL
                                      SELECT   p_office_cd office_cd
                                        FROM   DUAL) y)
                  AND ( (p_coll_dt_fr IS NOT NULL
                         AND p_coll_dt_to IS NOT NULL
                         AND r.receive_date BETWEEN p_coll_dt_fr
                                                AND  p_coll_dt_to)
                       OR (    p_coll_dt_fr IS NULL
                           AND p_coll_dt_to IS NULL
                           AND 1 = 1))
                  AND ( (p_pr_date_from IS NOT NULL
                         AND p_pr_date_to IS NOT NULL
                         AND r.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                    AND  p_pr_date_to)
                       OR (    p_pr_date_from IS NULL
                           AND p_pr_date_to IS NULL
                           AND 1 = 1))
                  AND r.rec_status = '1'
                  AND ( (p_ins_tp_cd IS NOT NULL
                         AND s.ins_tp_cd = p_ins_tp_cd)
                       OR (p_ins_tp_cd IS NULL AND 1 = 1));

      rec_c_fpr_coll        c_fpr_coll%ROWTYPE;
      rec_c_oth_coll        c_oth_coll%ROWTYPE;
   BEGIN
      OPEN c_fpr_coll;

      LOOP
         FETCH c_fpr_coll INTO   rec_c_fpr_coll;

         EXIT WHEN c_fpr_coll%NOTFOUND;
         v_unadj_policy.office_cd := rec_c_fpr_coll.active_office_cd;
         v_unadj_policy.coll_date := rec_c_fpr_coll.receive_date;
         v_unadj_policy.first_prem_amt := rec_c_fpr_coll.coll_amount;
         v_unadj_policy.deffered_amt := 0;
         v_unadj_policy.second_yr_amt := 0;
         v_unadj_policy.renewal_amt := 0;
         PIPE ROW (v_unadj_policy);
      END LOOP;

      CLOSE c_fpr_coll;

      OPEN c_oth_coll;

      LOOP
         FETCH c_oth_coll INTO   rec_c_oth_coll;

         EXIT WHEN c_oth_coll%NOTFOUND;

         BEGIN
              SELECT   SUM (coll_amount)
                INTO   v_partial_coll
                FROM   acc_partial_receivables p, acc_partial_receivables_ref r
               WHERE       pgid = rec_c_oth_coll.pgid
                       AND r.receive_id_ref = rec_c_oth_coll.receive_id
                       AND p.receive_id = r.receive_id
                       AND p.rec_status = '1'
            GROUP BY   r.receive_id_ref;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_partial_coll := 0;
         END;

         v_total_coll := 0;
         v_total_coll := rec_c_oth_coll.coll_amount + v_partial_coll;
         v_no_of_inst :=
            (rec_c_oth_coll.installment_no_to
             - rec_c_oth_coll.installment_no_from)
            + 1;

         FOR i IN rec_c_oth_coll.installment_no_from .. rec_c_oth_coll.installment_no_to
         LOOP
            v_first_prem_amount := 0;
            v_def_prem_amount := 0;
            v_sec_prem_amount := 0;
            v_ren_prem_amount := 0;

            IF rec_c_oth_coll.pay_mode_cd = '01'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
                  v_def_prem_amount := 0;
               ELSIF i = 2
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '02'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i = 2
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i IN (3, 4)
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '03'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 4
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 5 AND i <= 8
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '04'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 12
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 13 AND i <= 24
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '05'
            THEN
               v_first_prem_amount :=
                  ROUND ( (v_total_coll / v_no_of_inst), 2);
               v_def_prem_amount := 0;
               v_sec_prem_amount := 0;
               v_ren_prem_amount := 0;
            END IF;

            v_unadj_policy.office_cd := rec_c_oth_coll.active_office_cd;
            v_unadj_policy.coll_date := rec_c_fpr_coll.receive_date;
            v_unadj_policy.first_prem_amt := v_first_prem_amount;
            v_unadj_policy.deffered_amt := v_def_prem_amount;
            v_unadj_policy.second_yr_amt := v_sec_prem_amount;
            v_unadj_policy.renewal_amt := v_ren_prem_amount;
            PIPE ROW (v_unadj_policy);
         END LOOP;
      END LOOP;

      CLOSE c_oth_coll;

      RETURN;
   END fun_month_wise_coll;

   FUNCTION fun_return_premium (p_pgid VARCHAR2)
      RETURN tp_return_premium_tab
      PIPELINED
   AS
      v_return_premium          tp_return_premium;
      v_rec_count               NUMBER := 1;
      v_return_amount           NUMBER (15, 2);
      v_installment_no_from     NUMBER (3);
      v_installment_no_to       NUMBER (3);
      v_due_dt_from             DATE;
      v_due_dt_to               DATE;
      v_due_installment         NUMBER (5, 2) := 0;
      v_tot_coll_amount         NUMBER (15, 2) := 0;
      v_tot_premium_amt         NUMBER (15, 2) := 0;
      v_f_installment_no_from   NUMBER (3);
      v_f_installment_no_to     NUMBER (3);
      v_f_due_dt_from           DATE;
      v_f_due_dt_to             DATE;
   BEGIN
      FOR i
      IN (  SELECT   r.pgid,
                     r.coll_amount,
                     r.installment_no_from,
                     r.installment_no_to,
                     r.due_dt_from,
                     r.due_dt_to,
                     r.tot_premium_amt,
                     s.installment_premium,
                     s.pay_mode_cd,
                     s.comm_date
              FROM   acc_receivables r, ins_p_summery s
             WHERE   r.pgid = p_pgid AND r.rec_status = '1'
                     AND NVL (r.coll_slip_rec_dt, r.receive_date) >=
                           ADD_MONTHS (s.maturity_date, -12)
                     --add by Musha on 04.10.2015
                     /*AND NVL (r.coll_slip_rec_dt, r.receive_date) >=
                            ADD_MONTHS (s.comm_date,
                                          (s.policy_installment - 1
                                          )
                                        * DECODE (s.pay_mode_cd,
                                                  '01', 12,
                                                  '02', 6,
                                                  '03', 3,
                                                  '04', 1,
                                                  12
                                                 )
                                       )*/
                     --Musha on 04.10.2015
                     AND r.installment_no_from <= s.policy_installment
                     /*AND NVL (r.coll_slip_rec_dt, r.receive_date) >
                            ADD_MONTHS (s.maturity_date,
                                        DECODE (s.pay_mode_cd,
                                                '01', -12,
                                                '02', -6,
                                                '03', -3,
                                                '04', -1,
                                                0
                                               )
                                       )*/
                     --Musha on 04.10.2015
                     AND NVL (r.coll_slip_rec_dt, r.receive_date) <
                           s.maturity_date
                     AND r.pgid = s.pgid
          ORDER BY   r.installment_no_from)
      LOOP
         --v_due_installment :=
         --                  (i.installment_no_to - i.installment_no_from) + 1;
         SELECT   ROUND (
                     ( (i.installment_no_to - i.installment_no_from) + 1)
                     / DECODE (i.pay_mode_cd,
                               '01', 1,
                               '02', 2,
                               '03', 4,
                               '04', 12,
                               1),
                     2
                  )
                  + v_due_installment
           INTO   v_due_installment
           FROM   DUAL;

         v_tot_coll_amount := v_tot_coll_amount + i.coll_amount;
         v_tot_premium_amt := v_tot_premium_amt + i.tot_premium_amt;

         IF v_rec_count = 1
         THEN
            v_f_installment_no_from := i.installment_no_from;
            v_f_installment_no_to := i.installment_no_to;
            v_f_due_dt_from := i.due_dt_from;
            v_f_due_dt_to := i.due_dt_to;

            IF v_due_installment < 2
            THEN
               v_return_amount := 0;
               v_installment_no_from := 0;
               v_installment_no_to := 0;
               v_due_dt_from := NULL;
               v_due_dt_to := NULL;
            ELSE
               IF i.coll_amount >= i.tot_premium_amt
               THEN
                  /*v_return_amount :=
                       (i.installment_no_to - i.installment_no_from
                       )
                     * i.installment_premium;*/
                  SELECT   ( (i.installment_no_to - i.installment_no_from)
                            - DECODE (i.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1))
                           * i.installment_premium
                    INTO   v_return_amount
                    FROM   DUAL;
               ELSE
                  v_return_amount := i.coll_amount - i.installment_premium;
               END IF;

               --v_installment_no_from := i.installment_no_from + 1;
               SELECT   i.installment_no_from
                        + DECODE (i.pay_mode_cd,
                                  '01', 1,
                                  '02', 2,
                                  '03', 4,
                                  '04', 12,
                                  1)
                        + 1
                 INTO   v_installment_no_from
                 FROM   DUAL;

               v_installment_no_to := i.installment_no_to;

               /*SELECT CASE
                         WHEN TO_NUMBER
                                 (TO_CHAR (ADD_MONTHS (i.due_dt_from,
                                                       DECODE (i.pay_mode_cd,
                                                               '01', 12,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1,
                                                               12
                                                              )
                                                      ),
                                           'dd'
                                          )
                                 ) = TO_NUMBER (TO_CHAR (i.comm_date, 'dd'))
                            THEN ADD_MONTHS (i.due_dt_from,
                                             DECODE (i.pay_mode_cd,
                                                     '01', 12,
                                                     '02', 6,
                                                     '03', 3,
                                                     '04', 1,
                                                     12
                                                    )
                                            )
                         ELSE TO_DATE
                                (   TO_CHAR
                                          (ADD_MONTHS (i.due_dt_from,
                                                       DECODE (i.pay_mode_cd,
                                                               '01', 12,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1,
                                                               12
                                                              )
                                                      ),
                                           'rrrrmm'
                                          )
                                 || TO_CHAR (i.comm_date, 'dd'),
                                 'rrrrmmdd'
                                )
                      END
                 INTO v_due_dt_from
                 FROM DUAL;*/
               SELECT   CASE
                           WHEN TO_NUMBER(TO_CHAR (
                                             ADD_MONTHS (i.due_dt_from, 12),
                                             'dd'
                                          )) =
                                   TO_NUMBER (TO_CHAR (i.comm_date, 'dd'))
                           THEN
                              ADD_MONTHS (i.due_dt_from, 12)
                           ELSE
                              TO_DATE (
                                 TO_CHAR (ADD_MONTHS (i.due_dt_from, 12),
                                          'rrrrmm')
                                 || TO_CHAR (i.comm_date, 'dd'),
                                 'rrrrmmdd'
                              )
                        END
                 INTO   v_due_dt_from
                 FROM   DUAL;

               v_due_dt_to := i.due_dt_to;
            END IF;
         ELSE
            IF v_installment_no_from = 0
            THEN
               IF v_due_installment < 2
               THEN
                  v_return_amount := 0;
                  v_installment_no_from := 0;
                  v_installment_no_to := 0;
                  v_due_dt_from := NULL;
                  v_due_dt_to := NULL;
               ELSE
                  IF v_tot_coll_amount >= v_tot_premium_amt
                  THEN
                     SELECT   ( (i.installment_no_to
                                 - v_f_installment_no_from) /*- DECODE (i.pay_mode_cd,
                                                                                                                                                                                  '01', 1,
                                                                                                                                                                                  '02', 2,
                                                                                                                                                                                  '03', 4,
                                                                                                                                                                                  '04', 12,
                                                                                                                                                                                  1
                                                                                                                                                                                 )*/
                                                           )
                              * i.installment_premium
                       INTO   v_return_amount
                       FROM   DUAL;
                  ELSE
                     v_return_amount := i.coll_amount - i.installment_premium;
                  END IF;

                  SELECT   v_f_installment_no_from
                           + DECODE (i.pay_mode_cd,
                                     '01', 1,
                                     '02', 2,
                                     '03', 4,
                                     '04', 12,
                                     1)
                    /*+ 1*/
                    INTO   v_installment_no_from
                    FROM   DUAL;

                  v_installment_no_to := i.installment_no_to;

                  SELECT   CASE
                              WHEN TO_NUMBER(TO_CHAR (
                                                ADD_MONTHS (v_f_due_dt_from,
                                                            12),
                                                'dd'
                                             )) =
                                      TO_NUMBER (TO_CHAR (i.comm_date, 'dd'))
                              THEN
                                 ADD_MONTHS (v_f_due_dt_from, 12)
                              ELSE
                                 TO_DATE (
                                    TO_CHAR (
                                       ADD_MONTHS (v_f_due_dt_from, 12),
                                       'rrrrmm'
                                    )
                                    || TO_CHAR (i.comm_date, 'dd'),
                                    'rrrrmmdd'
                                 )
                           END
                    INTO   v_due_dt_from
                    FROM   DUAL;

                  v_due_dt_to := i.due_dt_to;
               /*v_return_amount := v_return_amount + i.coll_amount;
               v_installment_no_from := i.installment_no_from;
               v_installment_no_to := i.installment_no_to;
               v_due_dt_from := i.due_dt_from;
               v_due_dt_to := i.due_dt_to;*/
               END IF;
            ELSE
               v_return_amount := v_return_amount + i.coll_amount;
               v_installment_no_to := i.installment_no_to;
               v_due_dt_to := i.due_dt_to;
            END IF;
         END IF;

         v_rec_count := v_rec_count + 1;
      END LOOP;

      v_return_premium.return_amount := v_return_amount;
      v_return_premium.installment_no_from := v_installment_no_from;
      v_return_premium.installment_no_to := v_installment_no_to;
      v_return_premium.due_dt_from := v_due_dt_from;
      v_return_premium.due_dt_to := v_due_dt_to;
      PIPE ROW (v_return_premium);
      RETURN;
   END fun_return_premium;

   -- 11.
   FUNCTION fun_claim_tax_sum (p_office_cd    hrm_office.office_cd%TYPE,
                               p_date_fr      DATE,
                               p_date_to      DATE)
      RETURN tp_claim_tax_sum_tab
      PIPELINED
   AS
      v_claim_tax_sum   tp_claim_tax_sum_rec;
   BEGIN
      FOR rec_c_claim_tax_sum
      IN (SELECT   a.pgid,
                   fun_ins_pgid_to_policy_no (a.pgid) policy_no,
                   a.payment_dt,
                   a.payable_amt,
                   a.bonus,
                   (a.payable_amt + a.bonus) total_payable_amt,
                   /*(s.installment_premium * s.last_paid_inst_no
                   )
                 + anf_loan deposited_premium,*/
                   (a.payable_amt + a.bonus) - (a.tax_amount / .05)
                      deposited_premium,
                   a.tax_amount,
                   ROUND (
                      (  (a.payable_amt + a.bonus)
                       - (s.installment_premium * s.last_paid_inst_no)
                       + anf_loan)
                      * .05,
                      0
                   )
                      cal_tax,
                   vouch_no,
                   control_office_cd
            FROM   ins_p_summery s,
                   (SELECT   pgid,
                             vouch_dt payment_dt,
                             gross_payable_amt
                             + NVL (
                                  (  SELECT   SUM (gross_payable_amt)
                                       FROM   clm_claim_payable_gen
                                      WHERE   pgid = g.pgid
                                              AND payable_no <> g.payable_no
                                   --AND payment_status = 'Y'
                                   GROUP BY   pgid),
                                  0
                               )
                                payable_amt,
                             NVL (bonus_payable, 0) bonus,
                             source_tax tax_amount,
                             NVL (vouch_no, vouch_no_2nd) vouch_no,
                             NVL ( (SELECT   NVL (SUM (d.ded_amt), 0)
                                      FROM   clm_adjust_other_ded d
                                     WHERE   d.pgid = g.pgid), 0)
                                anf_loan,
                             g.control_office_cd
                      FROM   clm_claim_payable_gen g
                     WHERE   NVL (source_tax, 0) > 0
                             --AND NVL (approved_flag, 'N') = 'Y'
                             AND vouch_dt BETWEEN NVL (p_date_fr, vouch_dt)
                                              AND  NVL (p_date_to, vouch_dt)
                    UNION ALL
                    SELECT   c.pgid,
                             d.disbursment_date payment_dt,
                             DECODE (TO_CHAR (paid_up_value),
                                     '0', sum_assured,
                                     paid_up_value)
                                payable_amt,
                             NVL (c.pay_bonus_amt, 0) bonus,
                             c.tax_deduction tax_amount,
                             NVL (dis_voucher, dis_voucher_2nd) vouch_no,
                             NVL ( (SELECT   NVL (SUM (d.loan_amount), 0)
                                      FROM   sur_loan_cal_prev_loan d
                                     WHERE   d.appl_sl_no = c.appl_sl_no), 0)
                                anf_loan,
                             c.control_office_cd
                      FROM   sur_sur_calculation c, sur_disburs_mst d
                     WHERE       c.appl_sl_no = d.appl_sl_no
                             AND NVL (c.tax_deduction, 0) > 0
                             AND approved_st = '3'
                             AND d.disbursment_date BETWEEN NVL (
                                                               p_date_fr,
                                                               d.disbursment_date
                                                            )
                                                        AND  NVL (
                                                                p_date_to,
                                                                d.disbursment_date
                                                             )) a
           WHERE   s.pgid = a.pgid
                   AND control_office_cd =
                         NVL (p_office_cd, control_office_cd))
      LOOP
         v_claim_tax_sum.pgid := rec_c_claim_tax_sum.pgid;
         v_claim_tax_sum.policy_no := rec_c_claim_tax_sum.policy_no;
         v_claim_tax_sum.payment_dt := rec_c_claim_tax_sum.payment_dt;
         v_claim_tax_sum.payable_amt := rec_c_claim_tax_sum.payable_amt;
         v_claim_tax_sum.bonus := rec_c_claim_tax_sum.bonus;
         v_claim_tax_sum.total_payable_amt :=
            rec_c_claim_tax_sum.total_payable_amt;
         v_claim_tax_sum.deposited_premium :=
            rec_c_claim_tax_sum.deposited_premium;
         v_claim_tax_sum.tax_amount := rec_c_claim_tax_sum.tax_amount;
         v_claim_tax_sum.cal_tax := rec_c_claim_tax_sum.cal_tax;
         v_claim_tax_sum.vouch_no := rec_c_claim_tax_sum.vouch_no;
         v_claim_tax_sum.control_office_cd :=
            rec_c_claim_tax_sum.control_office_cd;
         PIPE ROW (v_claim_tax_sum);
      END LOOP;
   END fun_claim_tax_sum;

   ---12 Premium Collection Receipt
   FUNCTION fun_premium_receipt (p_coll_type    CHAR,
                                 --Here '1'=Advance Collection,'2'=Renewal Collection,'3'Partial Collection
                                 p_pgid         VARCHAR2,
                                 p_rec_id       NUMBER,
                                 p_slno         NUMBER)
      RETURN tp_coll_rec_tab
      PIPELINED
   AS
      v_coll_rec      tp_coll_rec;
      v_proposal_no   ins_p_proposal.proposal_no%TYPE;
   BEGIN
      IF p_coll_type = '1'                --For Advance Collection Information
      THEN
         FOR i
         IN (SELECT   l.proposal_no,
                      DECODE (r.collection_type,
                              '05', r.receive_date,
                              r.coll_slip_rec_dt)
                         receive_date,
                      r.i_usr,
                      TRUNC (r.i_dt) i_dt,
                      r.active_office_cd,
                      r.receive_id,
                      r.received_by,
                      r.mode_tp,
                      fun_coll_media_type (r.collection_type) collection_type,
                      r.office_code,
                      '0' receipt_status,
                      f_agent_nm (l.agent_id) agent_nm,
                      l.agent_id,
                      fun_agent_org_setup (l.agent_id) office_nm,
                      NULL policy_status,
                      NULL pol_stat,
                      fun_ins_receive_mode (r.receive_mode) receive_mode,
                      r.coll_amount,
                      f_in_word (r.coll_amount) in_word,
                      0 avl_sus_amt,
                      fun_prem_coll_receipt_no (r.partner_code,
                                                r.partner_transid,
                                                r.active_office_cd,
                                                r.receive_date,
                                                r.coll_slip_no,
                                                r.coll_sl_no)
                         collection_no,
                      r.vouch_ref,
                      NVL (r.coll_slip_no, r.coll_sl_no) coll_slip_no,
                      NVL (r.coll_slip_rec_dt, r.receive_date)
                         coll_slip_rec_dt,
                      rep_f_emp_nm (r.received_by) collecter,
                      1 installment_no_from,
                      1 installment_no_to,
                      0 adv_due,
                      0 late_fee,
                      NVL (l.comm_dt, l.proposal_dt) comm_date,
                      NVL (l.comm_dt, l.proposal_dt) due_dt_to,
                      NVL (r.party_nm, l.pro_party_name) party_nm,
                      r.pgid,
                      0 latefee_waiver,
                      0 adv_status,
                      b.INSTALLMENT_PREMIUM installment_premium,
                      b.PRODUCT_CD || '-' || b.term tab_term,
                      REP_FUN_INS_PAY_MODE_SH_NM (b.PAY_MODE_CD) pay_mode_nm,
                      b.INSTALLMENT_PREMIUM tot_due_amt,
                      NVL (l.comm_dt, l.proposal_dt) due_dt_from,
                      b.INSTALLMENT_PREMIUM tot_premium_amt,
                      NULL other_amt,
                      NULL policy_group
               FROM   acc_advance_receivables r,
                      ins_p_proposal l,
                      ins_p_basic b
              WHERE       r.receive_id = NVL (p_rec_id, r.receive_id)
                      AND r.slno = p_slno
                      AND l.pgid = p_pgid
                      AND r.proposal_no = l.proposal_no
                      AND r.rec_status = '1'
                      AND l.pgid = b.pgid(+))
         LOOP
            BEGIN
               SELECT   SUBSTR (i.proposal_no,
                                (16 - (q.use_code_len + 4) + 1),
                                q.use_code_len)
                        || '-'
                        || LTRIM (
                              SUBSTR (i.proposal_no,
                                      1,
                                      (16 - (q.use_code_len + 4))),
                              '0'
                           )
                        || '-'
                        || SUBSTR (i.proposal_no, -4)
                           proposal_no
                 INTO   v_proposal_no
                 FROM   gen_code_no_convention q
                WHERE   q.code_id = 1;
            END;

            v_coll_rec.policy_no := v_proposal_no;
            v_coll_rec.receive_date := i.receive_date;
            v_coll_rec.i_usr := i.i_usr;
            v_coll_rec.i_dt := i.i_dt;
            v_coll_rec.active_office_cd := i.active_office_cd;
            v_coll_rec.receive_id := i.receive_id;
            v_coll_rec.received_by := i.received_by;
            v_coll_rec.mode_tp := i.mode_tp;
            v_coll_rec.collection_type := i.collection_type;
            v_coll_rec.office_code := i.office_code;
            v_coll_rec.receipt_status := i.receipt_status;
            v_coll_rec.agent_id := i.agent_id;
            v_coll_rec.agent_nm := i.agent_nm;
            v_coll_rec.office_nm := i.office_nm;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.receive_mode := i.receive_mode;
            v_coll_rec.coll_amount := i.coll_amount;
            v_coll_rec.in_word := i.in_word;
            v_coll_rec.avl_sus_amt := i.avl_sus_amt;
            v_coll_rec.collection_no := i.collection_no;
            v_coll_rec.vouch_ref := i.vouch_ref;
            v_coll_rec.coll_slip_no := i.coll_slip_no;
            v_coll_rec.coll_slip_rec_dt := i.coll_slip_rec_dt;
            v_coll_rec.collecter := i.collecter;
            v_coll_rec.installment_no_from := i.installment_no_from;
            v_coll_rec.installment_no_to := i.installment_no_to;
            v_coll_rec.adv_due := i.adv_due;
            v_coll_rec.late_fee := i.late_fee;
            v_coll_rec.due_dt_from := i.due_dt_from;
            v_coll_rec.due_dt_to := i.due_dt_to;
            v_coll_rec.party_nm := i.party_nm;
            v_coll_rec.comm_date := i.comm_date;
            v_coll_rec.pgid := i.pgid;
            v_coll_rec.latefee_waiver := i.latefee_waiver;
            v_coll_rec.adv_status := i.adv_status;
            v_coll_rec.tot_premium_amt := i.tot_premium_amt;
            v_coll_rec.tot_due_amt := i.tot_due_amt;
            v_coll_rec.other_amt := i.other_amt;
            v_coll_rec.pay_mode_nm := i.pay_mode_nm;
            v_coll_rec.tab_term := i.tab_term;
            v_coll_rec.installment_premium := i.installment_premium;
            v_coll_rec.policy_group := i.policy_group;
            PIPE ROW (v_coll_rec);
         END LOOP;
      ELSIF p_coll_type = '2'             --For renewal Collection Information
      THEN
         FOR i
         IN (SELECT   fun_ins_pgid_to_policy_no (l.pgid) policy_no,
                      NVL (r.coll_slip_rec_dt, r.receive_date) receive_date,
                      r.i_usr,
                      TRUNC (r.i_dt) i_dt,
                      r.active_office_cd,
                      r.receive_id,
                      r.received_by,
                      r.mode_tp,
                      r.collection_type,
                      r.office_code,
                      r.receipt_status,
                      l.agent_id,
                      f_agent_nm (l.agent_id) agent_nm,
                      fun_agent_org_setup (l.agent_id) office_nm,
                      NULL policy_status,
                      NULL pol_stat,
                      fun_ins_receive_mode (r.receive_mode) receive_mode,
                      r.coll_amount,
                      f_in_word (r.coll_amount) in_word,
                      0 avl_sus_amt,
                      fun_prem_coll_receipt_no (r.partner_code,
                                                r.partner_transid,
                                                r.active_office_cd,
                                                r.receive_date,
                                                r.coll_slip_no,
                                                r.coll_sl_no)
                         collection_no,
                      r.vouch_ref,
                      NVL (r.coll_slip_no, r.coll_sl_no) coll_slip_no,
                      NVL (r.coll_slip_rec_dt, r.receive_date)
                         coll_slip_rec_dt,
                      rep_f_emp_nm (r.received_by) collecter,
                      installment_no_from,
                      installment_no_to,
                      ( (  r.tot_premium_amt
                         + NVL (r.late_fee, 0)
                         - NVL (r.latefee_waiver, 0))
                       - r.coll_amount)
                         adv_due,
                      r.late_fee,
                      r.due_dt_from,
                      r.due_dt_to,
                      fun_party_name (r.pgid) party_nm,
                      l.comm_date comm_date,
                      r.pgid,
                      r.latefee_waiver,
                      0 adv_status,
                      r.tot_premium_amt,
                      (  r.tot_premium_amt
                       + NVL (r.late_fee, 0)
                       - NVL (r.latefee_waiver, 0))
                         tot_due_amt,
                      0 other_amt,
                      (SELECT   pay_mode_sh_nm
                         FROM   ins_pay_mode
                        WHERE   pay_mode_cd = l.pay_mode_cd)
                         pay_mode_nm,
                      l.product_cd || '-' || l.term tab_term,
                      l.installment_premium,
                      rep_fun_ins_policy_group (l.product_cd) policy_group
               FROM   acc_receivables r, ins_p_summery l, acc_receive_mode m
              WHERE       r.receive_id = p_rec_id
                      AND r.pgid = l.pgid
                      AND r.receive_mode = m.receive_mode_cd
                      AND r.rec_status = '1')
         LOOP
            v_coll_rec.policy_no := i.policy_no;
            v_coll_rec.receive_date := i.receive_date;
            v_coll_rec.i_usr := i.i_usr;
            v_coll_rec.i_dt := i.i_dt;
            v_coll_rec.active_office_cd := i.active_office_cd;
            v_coll_rec.receive_id := i.receive_id;
            v_coll_rec.received_by := i.received_by;
            v_coll_rec.mode_tp := i.mode_tp;
            v_coll_rec.collection_type := i.collection_type;
            v_coll_rec.office_code := i.office_code;
            v_coll_rec.receipt_status := i.receipt_status;
            v_coll_rec.agent_id := i.agent_id;
            v_coll_rec.agent_nm := i.agent_nm;
            v_coll_rec.office_nm := i.office_nm;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.receive_mode := i.receive_mode;
            v_coll_rec.coll_amount := i.coll_amount;
            v_coll_rec.in_word := i.in_word;
            v_coll_rec.avl_sus_amt := i.avl_sus_amt;
            v_coll_rec.collection_no := i.collection_no;
            v_coll_rec.vouch_ref := i.vouch_ref;
            v_coll_rec.coll_slip_no := i.coll_slip_no;
            v_coll_rec.coll_slip_rec_dt := i.coll_slip_rec_dt;
            v_coll_rec.collecter := i.collecter;
            v_coll_rec.installment_no_from := i.installment_no_from;
            v_coll_rec.installment_no_to := i.installment_no_to;
            v_coll_rec.adv_due := i.adv_due;
            v_coll_rec.late_fee := i.late_fee;
            v_coll_rec.due_dt_from := i.due_dt_from;
            v_coll_rec.due_dt_to := i.due_dt_to;
            v_coll_rec.party_nm := i.party_nm;
            v_coll_rec.comm_date := i.comm_date;
            v_coll_rec.pgid := i.pgid;
            v_coll_rec.latefee_waiver := i.latefee_waiver;
            v_coll_rec.adv_status := i.adv_status;
            v_coll_rec.tot_premium_amt := i.tot_premium_amt;
            v_coll_rec.tot_due_amt := i.tot_due_amt;
            v_coll_rec.other_amt := i.other_amt;
            v_coll_rec.pay_mode_nm := i.pay_mode_nm;
            v_coll_rec.tab_term := i.tab_term;
            v_coll_rec.installment_premium := i.installment_premium;
            v_coll_rec.policy_group := i.policy_group;
            PIPE ROW (v_coll_rec);
         END LOOP;
      ELSIF p_coll_type = '3'
      --For for Collection Information
      THEN
         FOR i
         IN (SELECT   fun_ins_pgid_to_policy_no (l.pgid) policy_no,
                      DECODE (r.coll_media, '05', r.receive_date, r.media_dt)
                         receive_date,
                      r.i_usr,
                      TRUNC (r.i_dt) i_dt,
                      r.active_office_cd,
                      r.receive_id,
                      r.received_by,
                      r.mode_tp,
                      r.coll_media collection_type,
                      r.office_code,
                      r.rec_status receipt_status,
                      f_agent_nm (l.agent_id) agent_nm,
                      l.agent_id,
                      fun_agent_org_setup (l.agent_id) office_nm,
                      NULL policy_status,
                      NULL pol_stat,
                      fun_ins_receive_mode (r.coll_type) receive_mode,
                      r.coll_amount,
                      f_in_word (r.coll_amount) in_word,
                      0 avl_sus_amt,
                      DECODE (
                         r.coll_media,
                         '05',
                            r.active_office_cd
                         || '-'
                         || TO_CHAR (r.receive_date, 'RR')
                         || '-'
                         || r.coll_sl_no,
                         r.media_no
                      )
                         collection_no,
                      r.vouch_ref,
                      r.media_no coll_slip_no,
                      r.media_dt coll_slip_rec_dt,
                      rep_f_emp_nm (r.received_by) collecter,
                      NULL installment_no_from,
                      NULL installment_no_to,
                      ( (  r.req_premium_amt
                         + NVL (r.late_fee, 0)
                         - NVL (r.latefee_waiver, 0))
                       - r.coll_amount)
                         adv_due,
                      r.late_fee,
                      r.due_date_from due_dt_from,
                      r.due_date_to due_dt_to,
                      f_party_name_concat (r.pgid) party_nm,
                      l.comm_date comm_date,
                      r.pgid,
                      r.latefee_waiver,
                      0 adv_status,
                      r.req_premium_amt installment_premium,
                      (  r.req_premium_amt
                       + NVL (r.late_fee, 0)
                       - NVL (r.latefee_waiver, 0))
                         tot_due_amt,
                      0 other_amt,
                      (SELECT   pay_mode_sh_nm
                         FROM   ins_pay_mode
                        WHERE   pay_mode_cd = l.pay_mode_cd)
                         pay_mode_nm,
                      l.product_cd || '-' || l.term tab_term,
                      rep_fun_ins_policy_group (l.product_cd) policy_group,
                      NULL tot_premium_amt
               FROM   acc_partial_receivables r, ins_p_summery l
              WHERE   r.receive_id = p_rec_id AND r.pgid = l.pgid)
         LOOP
            v_coll_rec.policy_no := i.policy_no;
            v_coll_rec.receive_date := i.receive_date;
            v_coll_rec.i_usr := i.i_usr;
            v_coll_rec.i_dt := i.i_dt;
            v_coll_rec.active_office_cd := i.active_office_cd;
            v_coll_rec.receive_id := i.receive_id;
            v_coll_rec.received_by := i.received_by;
            v_coll_rec.mode_tp := i.mode_tp;
            v_coll_rec.collection_type := i.collection_type;
            v_coll_rec.office_code := i.office_code;
            v_coll_rec.receipt_status := i.receipt_status;
            v_coll_rec.agent_id := i.agent_id;
            v_coll_rec.agent_nm := i.agent_nm;
            v_coll_rec.office_nm := i.office_nm;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.receive_mode := i.receive_mode;
            v_coll_rec.coll_amount := i.coll_amount;
            v_coll_rec.in_word := i.in_word;
            v_coll_rec.avl_sus_amt := i.avl_sus_amt;
            v_coll_rec.collection_no := i.collection_no;
            v_coll_rec.vouch_ref := i.vouch_ref;
            v_coll_rec.coll_slip_no := i.coll_slip_no;
            v_coll_rec.coll_slip_rec_dt := i.coll_slip_rec_dt;
            v_coll_rec.collecter := i.collecter;
            v_coll_rec.installment_no_from := i.installment_no_from;
            v_coll_rec.installment_no_to := i.installment_no_to;
            v_coll_rec.adv_due := i.adv_due;
            v_coll_rec.late_fee := i.late_fee;
            v_coll_rec.due_dt_from := i.due_dt_from;
            v_coll_rec.due_dt_to := i.due_dt_to;
            v_coll_rec.party_nm := i.party_nm;
            v_coll_rec.comm_date := i.comm_date;
            v_coll_rec.pgid := i.pgid;
            v_coll_rec.latefee_waiver := i.latefee_waiver;
            v_coll_rec.adv_status := i.adv_status;
            v_coll_rec.tot_premium_amt := i.tot_premium_amt;
            v_coll_rec.tot_due_amt := i.tot_due_amt;
            v_coll_rec.other_amt := i.other_amt;
            v_coll_rec.pay_mode_nm := i.pay_mode_nm;
            v_coll_rec.tab_term := i.tab_term;
            v_coll_rec.installment_premium := i.installment_premium;
            v_coll_rec.policy_group := i.policy_group;
            PIPE ROW (v_coll_rec);
         END LOOP;
      ELSIF p_coll_type = '4'          --For Alteration Collection Information
      THEN
         FOR i
         IN (SELECT   fun_ins_pgid_to_policy_no (s.pgid) policy_no,
                      NVL (r.coll_slip_rec_dt, r.receive_date) receive_date,
                      r.i_usr,
                      TRUNC (r.i_dt) i_dt,
                      r.active_office_cd,
                      r.receive_id,
                      r.received_by,
                      r.mode_tp,
                      r.collection_type,
                      r.office_code,
                      r.receipt_status,
                      s.agent_id,
                      f_agent_nm (s.agent_id) agent_nm,
                      fun_agent_org_setup (s.agent_id) office_nm,
                      s.policy_status,
                      fun_ins_policy_status (s.policy_status) pol_stat,
                      fun_ins_receive_mode (r.receive_mode) receive_mode,
                      r.coll_amount,
                      f_in_word (r.coll_amount) in_word,
                      r.avl_sus_amt,
                      NVL (
                         r.coll_slip_no,
                            r.active_office_cd
                         || '-'
                         || TO_CHAR (r.receive_date, 'RR')
                         || '-'
                         || r.coll_sl_no
                      )
                         collection_no,
                      r.vouch_ref,
                      NVL (r.coll_slip_no, r.coll_sl_no) coll_slip_no,
                      NVL (r.coll_slip_rec_dt, r.receive_date)
                         coll_slip_rec_dt,
                      rep_f_emp_nm (r.received_by) collecter,
                      NVL (r.par_instl_no_from, r.due_instl_no_from)
                         installment_no_from,
                      NVL (r.due_instl_no_to, r.par_instl_no_to)
                         installment_no_to,
                      (NVL (
                          r.tot_premium_amt,
                            0
                          + NVL (r.par_prem_due_amt, 0)
                          + NVL (r.late_fee, 0)
                          - NVL (r.latefee_waiver, 0)
                       )
                       - r.coll_amount)
                         adv_due,
                      r.late_fee,
                      NVL (r.par_due_dt_from, r.due_dt_from) due_dt_from,
                      NVL (r.due_dt_to, r.par_due_dt_to) due_dt_to,
                      fun_party_name (r.pgid) party_nm,
                      s.comm_date comm_date,
                      r.pgid,
                      r.latefee_waiver,
                      0 adv_status,
                      NVL (par_prem_due_amt, 0) + NVL (r.tot_premium_amt, 0)
                         tot_premium_amt,
                      (  NVL (par_prem_due_amt, 0)
                       + NVL (r.tot_premium_amt, 0)
                       + NVL (r.late_fee, 0)
                       - NVL (r.latefee_waiver, 0))
                         tot_due_amt,
                      0 other_amt,
                      (SELECT   pay_mode_sh_nm
                         FROM   ins_pay_mode
                        WHERE   pay_mode_cd = s.pay_mode_cd)
                         pay_mode_nm,
                      s.product_cd || '-' || s.term tab_term,
                      s.installment_premium,
                      rep_fun_ins_policy_group (s.product_cd) policy_group
               FROM   acc_alt_receivables r, ins_p_summery s
              WHERE       r.receive_id = NVL (p_rec_id, r.receive_id)
                      AND r.pgid = s.pgid
                      AND r.rec_status = '1')
         LOOP
            v_coll_rec.policy_no := i.policy_no;
            v_coll_rec.receive_date := i.receive_date;
            v_coll_rec.i_usr := i.i_usr;
            v_coll_rec.i_dt := i.i_dt;
            v_coll_rec.active_office_cd := i.active_office_cd;
            v_coll_rec.receive_id := i.receive_id;
            v_coll_rec.received_by := i.received_by;
            v_coll_rec.mode_tp := i.mode_tp;
            v_coll_rec.collection_type := i.collection_type;
            v_coll_rec.office_code := i.office_code;
            v_coll_rec.receipt_status := i.receipt_status;
            v_coll_rec.agent_id := i.agent_id;
            v_coll_rec.agent_nm := i.agent_nm;
            v_coll_rec.office_nm := i.office_nm;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.receive_mode := i.receive_mode;
            v_coll_rec.coll_amount := i.coll_amount;
            v_coll_rec.in_word := i.in_word;
            v_coll_rec.avl_sus_amt := i.avl_sus_amt;
            v_coll_rec.collection_no := i.collection_no;
            v_coll_rec.vouch_ref := i.vouch_ref;
            v_coll_rec.coll_slip_no := i.coll_slip_no;
            v_coll_rec.coll_slip_rec_dt := i.coll_slip_rec_dt;
            v_coll_rec.collecter := i.collecter;
            v_coll_rec.installment_no_from := i.installment_no_from;
            v_coll_rec.installment_no_to := i.installment_no_to;
            v_coll_rec.adv_due := i.adv_due;
            v_coll_rec.late_fee := i.late_fee;
            v_coll_rec.due_dt_from := i.due_dt_from;
            v_coll_rec.due_dt_to := i.due_dt_to;
            v_coll_rec.party_nm := i.party_nm;
            v_coll_rec.comm_date := i.comm_date;
            v_coll_rec.pgid := i.pgid;
            v_coll_rec.latefee_waiver := i.latefee_waiver;
            v_coll_rec.adv_status := i.adv_status;
            v_coll_rec.tot_premium_amt := i.tot_premium_amt;
            v_coll_rec.tot_due_amt := i.tot_due_amt;
            v_coll_rec.other_amt := i.other_amt;
            v_coll_rec.pay_mode_nm := i.pay_mode_nm;
            v_coll_rec.tab_term := i.tab_term;
            v_coll_rec.installment_premium := i.installment_premium;
            v_coll_rec.policy_group := i.policy_group;
            PIPE ROW (v_coll_rec);
         END LOOP;
      END IF;
   END fun_premium_receipt;
END pkg_trans_report;
/


--
-- PKG_TRANS_REPORT_NEW  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_trans_report_new
IS
   FUNCTION fun_cheque_print (p_office_cd        hrm_office.office_cd%TYPE,
                              p_descendant       VARCHAR2,
                              p_cheque_dt_frm    DATE,
                              p_cheque_dt_to     DATE,
                              --,p_pgid                              ins_p_summery.pgid%TYPE,
                              p_trns_tp          VARCHAR2 /*p_trns_tp = 01 For claim;
                                                               01A For claim deduction amount;
                                                               01B for claim due prem adj
                                                               02 For pension commutation claim
                                                               03 For Fund requisition;
                                                               04 For Miscellaneous payment
                                                               050 For Suspense Return for Policy No
                                                               051 For Suspense Return for Proposal No
                                                               06 For Policy Loan
                                                               07 For Surrender
                                                               07A For Surrender deduction amount
                                                               08 For FA Commission
                                                               09 Employeer of FA Commission
                                                               10 Employeer of FA Release/Bonus
                                                               16 Claim Ex Gratia Cheque
                                                               17 Group Insurance
                                                               18 Others Payment
                                                               11. Claim tax summery
                                                               19   Provident Fund
                                                               20   Provident Fund Deduction
                                                               21  Utility Bill Payment
                                                               22  Gratuity Settlemet
                                                               23  Staff welfare loan
                                                               24   Advance Loan
                                                               25  Gratuity Settlemet Deduction
                                                            */
                                                         ,
                              p_whrcls           VARCHAR2 DEFAULT '1=1' ,
                              p_report_option    VARCHAR2 DEFAULT '0' )
      RETURN tp_cheque_info_tab
      PIPELINED
   IS
      v_payment_desc         VARCHAR2 (100);
      v_cheque_info          tp_cheque_info_rec;
      v_cheque_dt            VARCHAR2 (50);
      v_bank_nm              acc_bank.bank_nm%TYPE;
      v_br_nm                acc_branch.br_nm%TYPE;
      v_acc_no               VARCHAR2 (30);
      v_acc_no_2nd           VARCHAR2 (30);

      TYPE cur_tp IS REF CURSOR;

      v_cur                  cur_tp;
      v_query_str            VARCHAR2 (4000);
      v_dep_bank_info        VARCHAR2 (200);
      ----
      v_due_prem_late_fee    NUMBER (12, 2);
      v_paid_prem_late_fee   NUMBER (12, 2);
      v_approved_dt          DATE;
      v_config_act_for       NUMBER (3);
      v_lock_count           NUMBER (3);
      v_acc_info             VARCHAR2 (200);

      --Claim payment--
      CURSOR cur_clm
      IS
           SELECT   g.pgid,
                    fun_ins_pgid_to_policy_no (g.pgid) policy_no,
                    g.cheque_dt,
                    g.ben_party_cd,
                    (SELECT   party_name
                       FROM   ins_p_personal
                      WHERE   pgid = g.pgid AND party_cd = g.ben_party_cd)
                       ben_party_nm,
                    SUM (g.net_payable_amt) tot_payable_amt,
                    f_in_word (SUM (g.net_payable_amt)) in_word,
                    (SELECT   b.bank_nm
                       FROM   acc_bank b
                      WHERE   b.bank_cd = g.bank_cd)
                       bank_nm,
                    (SELECT   b.br_nm
                       FROM   acc_branch b
                      WHERE   b.bank_cd = g.bank_cd AND b.br_cd = g.branch_cd)
                       br_nm,
                    g.bank_acc_no
             FROM   clm_claim_payable_gen g, ins_p_summery s
            WHERE       NVL (g.approved_flag, 'N') = 'Y'
                    AND g.cheque_dt IS NOT NULL
                    AND g.pay_order_no IS NULL
                    AND NVL (g.payment_status, 'N') = 'N'
                    --AND g.pgid = NVL (p_pgid, g.pgid)
                    AND ( (NVL (p_descendant, 'N') = 'N'
                           AND g.control_office_cd =
                                 NVL (p_office_cd, g.control_office_cd))
                         OR (NVL (p_descendant, 'N') = 'Y'
                             AND EXISTS
                                   (    SELECT   f.office_cd
                                          FROM   hrm_office_setup f
                                         WHERE   f.office_cd = g.control_office_cd
                                    START WITH   f.office_cd =
                                                    NVL (p_office_cd,
                                                         f.office_cd)
                                    CONNECT BY   PRIOR f.office_cd =
                                                    f.control_office_cd)))
                    AND g.cheque_dt BETWEEN NVL (p_cheque_dt_frm, g.cheque_dt)
                                        AND  NVL (p_cheque_dt_to, g.cheque_dt)
                    AND g.pgid = s.pgid
         GROUP BY   g.pgid,
                    g.bank_cd,
                    g.branch_cd,
                    g.bank_acc_no,
                    g.ben_party_cd,
                    g.cheque_dt;

      --Fund Requisition--
      CURSOR cur_fund_req
      IS
         SELECT   r.to_office_cd,
                  (SELECT   office_nm
                     FROM   hrm_office
                    WHERE   office_cd = r.to_office_cd)
                     pay_to,
                  (SELECT   NVL (short_nm, office_nm)
                     FROM   hrm_office
                    WHERE   office_cd = r.to_office_cd)
                     client_nm,
                  r.approved_amt,
                  f_in_word (r.approved_amt) in_word,
                  r.transfer_dt,
                  r.cheque_no,
                  r.to_acc_no,
                  r.to_bank_cd,
                  (SELECT   bank_nm
                     FROM   acc_bank
                    WHERE   bank_cd = r.to_bank_cd)
                     bank_nm,
                  r.to_br_cd,
                  (SELECT   br_nm
                     FROM   acc_branch
                    WHERE   bank_cd = r.to_bank_cd AND br_cd = r.to_br_cd)
                     br_nm
           FROM   acc_fund_requisition r;
   --Miscellaneous Payment--
   BEGIN
      ----------ADDED BY PARAMA BISWAS ON 25/07/2016----------
      ---------TO CHECK CONFIG STATUS FOR 2ND CHEQUE-------
      BEGIN
         SELECT   applicable_on
           INTO   v_config_act_for
           FROM   ins_system_config
          WHERE   config_id = '10';
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      -----------------------------------------------------------
      /*IF p_trns_tp = '01'
                  THEN
                     FOR rec_clm IN cur_clm
                     LOOP
                        BEGIN
                           SELECT clm_detl_nm
                             INTO v_payment_desc
                             FROM clm_claim_cause_detl c
                            WHERE (c.clm_cause_cd, c.clm_detl_cd) IN (
                                     SELECT p.clm_cause_cd, p.clm_detl_cd
                                       FROM clm_claim_payable_gen p
                                      WHERE p.cheque_dt = rec_clm.cheque_dt
                                        AND p.pgid = rec_clm.pgid
                                        AND p.payable_no = (SELECT MAX (payable_no)
                                                              FROM clm_claim_payable_gen
                                                             WHERE pgid = rec_clm.pgid));
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payment_desc := 'Claim';
                        END;

                        BEGIN
                           SELECT    SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             1,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             2,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             3,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             4,
                                             1
                                            )
                                  || '     '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             5,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             6,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             7,
                                             1
                                            )
                                  || '    '
                                  || SUBSTR (TO_CHAR (TRUNC (rec_clm.cheque_dt),
                                                      'DDMMRRRR'
                                                     ),
                                             8,
                                             1
                                            )
                             INTO v_cheque_dt
                             FROM DUAL;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_cheque_dt := rec_clm.cheque_dt;
                        END;

                        v_cheque_info.policy_no := rec_clm.policy_no;
                        v_cheque_info.cheque_dt1 := rec_clm.cheque_dt;
                        v_cheque_info.cheque_dt2 := v_cheque_dt;
                        v_cheque_info.client_nm := rec_clm.ben_party_nm;
                        v_cheque_info.cheque_pay_to :=
                              rec_clm.ben_party_nm
                           || ' ('
                           || rec_clm.bank_nm
                           || ', '
                           || rec_clm.br_nm
                           || ', A/C-'
                           || rec_clm.bank_acc_no
                           || ')';
                        v_cheque_info.payable_amt1 := rec_clm.tot_payable_amt;
                        v_cheque_info.payable_amt2 := rec_clm.tot_payable_amt;
                        v_cheque_info.payment_desc := v_payment_desc;
                        v_cheque_info.amt_inwords := rec_clm.in_word;
                        PIPE ROW (v_cheque_info);
                     END LOOP;
            --===========================================================================--
                  ELS*/
      IF p_trns_tp = '01'
      THEN
         v_payment_desc := 'Claim';
         v_query_str :=
            'SELECT   fun_ins_pgid_to_policy_no (g.pgid) policy_no,
                  NVL (q.cheque_date, g.cheque_dt) cheque_dt,
             NVL (q.client_name, fun_party_name (g.pgid, g.ben_party_cd)) ben_party_nm,
             NVL (SUM (q.client_amt),
                  SUM (g.net_payable_amt - NVL (g.off_manual_ded_amt, 0) - NVL (g.prem_due_late_fee, 0))
                 ) tot_payable_amt,
             f_in_word (NVL (SUM (q.client_amt),
                             SUM (  g.net_payable_amt - NVL (g.off_manual_ded_amt, 0) - NVL (g.prem_due_late_fee, 0))
                       )) in_word,
             rep_f_bank (NVL (q.bank_cd, g.bank_cd)) bank_nm,
             rep_f_branch (NVL (q.branch_cd, g.branch_cd)) br_nm,
             NVL (q.account_no, g.bank_acc_no) bank_acc_no,                  
             (SELECT clm_detl_nm
              FROM clm_claim_cause_detl
             WHERE clm_cause_cd = g.clm_cause_cd AND clm_detl_cd = g.clm_detl_cd) clm_detl_nm
             FROM clm_claim_payable_gen g, ins_p_summery s, acc_auth_per_cheque_info q
            WHERE NVL (g.approved_flag, ''N'') = ''Y''
              AND g.cheque_dt IS NOT NULL
              AND g.pay_order_no IS NULL
              AND (g.net_payable_amt - NVL(g.off_manual_ded_amt, 0)  - NVL(g.prem_due_late_fee, 0)) > 0              
              AND fun_locked_policy_auth (g.pgid)=''1''
              AND
                      '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                           AND g.control_office_cd =
                                                NVL ('''
            || p_office_cd
            || ''', g.control_office_cd)
                          )
                       OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                           AND EXISTS (
                                  SELECT     f.office_cd
                                        FROM hrm_office_setup f
                                       WHERE f.office_cd = g.control_office_cd
                                  START WITH f.office_cd =
                                                    NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                  CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                          )
                      )
                  AND g.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', g.cheque_dt)
                                      AND NVL ('''
            || p_cheque_dt_to
            || ''', g.cheque_dt)
                  AND g.pgid = s.pgid
                  AND g.pgid = q.pgid(+)
              AND g.payable_no = q.payable_no(+)
                  AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                     SELECT 1
                                       FROM acc_cheque_print_info p
                                      WHERE p.pgid = g.pgid AND p.pk_ref = g.payable_no
                                        AND NVL(p.print_doc_slno, ''1'') = ''1''
                                        AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd AND p.auth_cat_cd = ''17'' AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
             GROUP BY g.pgid, g.bank_cd, g.branch_cd, g.bank_acc_no, g.ben_party_cd, g.clm_cause_cd, g.clm_detl_cd,
              g.cheque_dt, q.cheque_date, q.client_name, q.bank_cd, q.branch_cd, q.account_no';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no, v_cheque_info.payment_desc;

            EXIT WHEN v_cur%NOTFOUND;

            --Add by Musha on 30.10.2016 Polciy no not show for lock policy
            SELECT   COUNT (1)
              INTO   v_lock_count
              FROM   ser_lock_policy
             WHERE   pgid =
                        fun_ins_policy_no_to_pgid (v_cheque_info.policy_no)
                     AND status = '1';

            IF v_lock_count > 0
            THEN
               v_cheque_info.policy_no := NULL;
            END IF;

            ---Musha on 11.05.2016---
            ---only for claim which are approved before May, 2016
            /*
            BEGIN
                SELECT NVL(SUM (a.due_prem_amt + NVL (a.due_prem_late_fee, 0)), 0),
                       NVL(SUM (a.paid_prem_late_fee_after_disc), 0),
                       MAX(p.approved_dt)
                  INTO v_due_prem_late_fee,
                       v_paid_prem_late_fee,
                       v_approved_dt
                  FROM clm_claim_payable_gen p, clm_claim_appl a
                 WHERE p.pgid = fun_ins_policy_no_to_pgid (v_cheque_info.policy_no)
                   AND p.cheque_dt = v_cheque_info.cheque_dt1
                   AND NVL (p.prem_due_late_fee, 0) > 0
                   AND p.pgid = a.pgid
                   AND p.clm_cause_cd = a.clm_cause_cd
                   AND p.clm_detl_cd = a.clm_detl_cd
                   AND p.payment_dt BETWEEN a.payable_dt AND NVL (a.payable_dt_to,
                                                                  a.payable_dt
                                                                 );

                IF v_approved_dt < TO_DATE ('01/05/2016', 'DD/MM/RRRR') THEN
                    v_cheque_info.payable_amt1  := v_cheque_info.payable_amt1 + v_paid_prem_late_fee + v_due_prem_late_fee;
                    v_cheque_info.amt_inwords   := f_in_word (v_cheque_info.payable_amt1 + v_paid_prem_late_fee + v_due_prem_late_fee);
                END IF;
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;*/
            --------------End of 11.05.2016--------------
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            --v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '01A'
      THEN
         v_payment_desc := 'Deduction From Claim';
         v_query_str :=
            'SELECT   fun_ins_pgid_to_policy_no (g.pgid) policy_no,
                  g.CHEQUE_DATE_2ND cheque_dt,
                  (SELECT party_name
                     FROM ins_p_personal
                    WHERE pgid = g.pgid
                      AND party_cd = g.ben_party_cd and SL_NO=1) ben_party_nm,
                  SUM (g.off_manual_ded_amt) tot_payable_amt,
                  f_in_word (SUM (g.off_manual_ded_amt)) in_word,
                  rep_f_bank (g.bank_cd) bank_nm,
                  rep_f_branch (g.branch_cd) br_nm,
                  g.bank_acc_no,g.bank_acc_no_2nd
             FROM clm_claim_payable_gen g, ins_p_summery s
            WHERE NVL (g.approved_flag, ''N'') = ''Y''
              AND g.cheque_date_2nd IS NOT NULL
              AND g.cheque_no_2nd IS NULL
              AND NVL(g.OFF_MANUAL_DED_AMT, ''0'') > ''0''              
              AND fun_locked_policy_auth (g.pgid)=''1''
              AND
                      '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                           AND g.control_office_cd =
                                                NVL ('''
            || p_office_cd
            || ''', g.control_office_cd)
                          )
                       OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                           AND EXISTS (
                                  SELECT     f.office_cd
                                        FROM hrm_office_setup f
                                       WHERE f.office_cd = g.control_office_cd
                                  START WITH f.office_cd =
                                                    NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                  CONNECT BY PRIOR f.office_cd =
                                                               f.control_office_cd)
                          )
                      )
                  AND g.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', g.cheque_dt)
                                      AND NVL ('''
            || p_cheque_dt_to
            || ''', g.cheque_dt)
                  AND g.pgid = s.pgid
                  AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pgid = g.pgid
                                                    AND p.pk_ref = g.payable_no
                                                    AND NVL(p.print_doc_slno, ''1'') = ''2''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
             GROUP BY g.pgid,
                      g.bank_cd,
                      g.branch_cd,
                      g.bank_acc_no,
                      g.bank_acc_no_2nd,
                      g.ben_party_cd,
                      g.cheque_dt,
                      g.CHEQUE_DATE_2ND';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no, v_acc_no_2nd;

            EXIT WHEN v_cur%NOTFOUND;

            /*BEGIN
               SELECT    SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 1,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 2,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 3,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 4,
                                 1
                                )
                      || '     '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 5,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 6,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 7,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 8,
                                 1
                                )
                 INTO v_cheque_dt
                 FROM DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;*/
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || ' '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;

            ---------------------MODIFIED BY PARAMA BISWAS ON 24/07/2016---------
            IF v_config_act_for = '1'
            THEN
               BEGIN
                  SELECT      ' ('
                           || b.bank_nm
                           || ', '
                           || r.br_nm
                           || ', '
                           || m.acc_no
                           || ')'
                    INTO   v_dep_bank_info
                    FROM   acc_gl_bank_acc_setup_mst m,
                           acc_bank b,
                           acc_branch r
                   WHERE       one_stop_dep_acc_st = '1'
                           AND m.br_cd = r.br_cd
                           AND r.bank_cd = b.bank_cd;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_dep_bank_info := NULL;
               END;

               BEGIN
                  SELECT   com_nm || v_dep_bank_info
                    INTO   v_cheque_info.cheque_pay_to
                    FROM   insurance_company;

                  v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            ELSIF v_config_act_for = '2'
            THEN
               v_cheque_info.cheque_pay_to :=
                     v_cheque_info.client_nm
                  || ' ('
                  || v_bank_nm
                  || ', '
                  || v_br_nm
                  || ', A/C-'
                  || v_acc_no
                  || ')';
            END IF;

            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      -------------------------
      ELSIF p_trns_tp = '01B'
      THEN
         v_payment_desc := 'Due Prem. From Claim';
         v_query_str :=
            'SELECT   fun_ins_pgid_to_policy_no (g.pgid) policy_no,
              g.cheque_dt_prem cheque_dt,
              (SELECT party_name
                 FROM ins_p_personal
                WHERE pgid = g.pgid
                  AND party_cd = g.ben_party_cd and SL_NO=1) ben_party_nm,
              SUM (g.prem_due_late_fee) tot_payable_amt,
              f_in_word (SUM (g.prem_due_late_fee)) in_word,
              rep_f_bank (g.bank_cd_prem) bank_nm,
              rep_f_branch (g.br_cd_prem) br_nm,
              g.bank_acc_no_prem bank_acc_no
         FROM clm_claim_payable_gen g, ins_p_summery s
        WHERE NVL (g.approved_flag, ''N'') = ''Y''
          AND g.cheque_dt_prem IS NOT NULL
          AND g.cheque_no_prem IS NULL                      
          AND NVL(g.prem_due_late_fee, ''0'') > ''0''          
          AND fun_locked_policy_auth (g.pgid)=''1''
          AND
                      '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                           AND g.control_office_cd =
                                                NVL ('''
            || p_office_cd
            || ''', g.control_office_cd)
                          )
                       OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                           AND EXISTS (
                                  SELECT     f.office_cd
                                        FROM hrm_office_setup f
                                       WHERE f.office_cd = g.control_office_cd
                                  START WITH f.office_cd =
                                                    NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                  CONNECT BY PRIOR f.office_cd =
                                                               f.control_office_cd)
                          )
                      )
                  AND g.cheque_dt_prem BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', g.cheque_dt_prem)
                                      AND NVL ('''
            || p_cheque_dt_to
            || ''', g.cheque_dt_prem)
                  AND g.pgid = s.pgid
                  AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pgid = g.pgid
                                                    AND p.pk_ref = g.payable_no
                                                    AND NVL(p.print_doc_slno, ''1'') = ''3''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
             GROUP BY g.pgid,
                      g.bank_cd_prem,
                      g.br_cd_prem,
                      g.bank_acc_no_prem,
                      g.ben_party_cd,
                      g.cheque_dt_prem';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            --v_acc_no_2nd;
            EXIT WHEN v_cur%NOTFOUND;

            /*BEGIN
               SELECT    SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 1,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 2,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 3,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 4,
                                 1
                                )
                      || '     '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 5,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 6,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 7,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 8,
                                 1
                                )
                 INTO v_cheque_dt
                 FROM DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;*/
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || ' '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;

            BEGIN
               SELECT      ' ('
                        || b.bank_nm
                        || ', '
                        || r.br_nm
                        || ', '
                        || m.acc_no
                        || ')'
                 INTO   v_dep_bank_info
                 FROM   acc_gl_bank_acc_setup_mst m, acc_bank b, acc_branch r
                WHERE       one_stop_dep_acc_st = '1'
                        AND m.br_cd = r.br_cd
                        AND r.bank_cd = b.bank_cd;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_dep_bank_info := NULL;
            END;

            BEGIN
               SELECT   com_nm || v_dep_bank_info
                 INTO   v_cheque_info.cheque_pay_to
                 FROM   insurance_company;

               v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      -------------------------
      ELSIF p_trns_tp = '02'
      THEN
         v_payment_desc := 'Claim Commutation';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (m.pgid), m.CHEQUE_DT,
                       (  m.commutation_amt + NVL(m.suspense_amt, 0)
                        - NVL (m.loan_ded_amt, 0)
                        - NVL (m.loan_interest, 0)
                        - NVL (m.anf_premium_amt, 0)
                        - NVL (m.anf_late_fee, 0)
                       ) net_payable_amt,
                       (SELECT party_name
                          FROM ins_p_personal
                         WHERE pgid = m.pgid AND party_cd = ''03''
                           AND SL_NO = 1
                        ) ben_party_nm,
                       m.bank_acc_no,
                       (SELECT bank_nm
                          FROM acc_bank
                         WHERE bank_cd = m.bank_cd) bank_nm,
                       (SELECT br_nm
                          FROM acc_branch
                         WHERE bank_cd = m.bank_cd AND br_cd = m.branch_cd) br_nm
                  FROM clm_commutation_info m
                             WHERE '
            || NVL (p_whrcls, '1=1');

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || ' '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '03'
      THEN
         v_payment_desc := 'Fund Transfer';
         v_query_str :=
            'SELECT (SELECT office_nm
                          FROM hrm_office
                         WHERE office_cd = r.to_office_cd) pay_to,
                        (SELECT NVL (short_nm, office_nm)
                           FROM hrm_office
                          WHERE office_cd = r.to_office_cd) client_nm, r.approved_amt,
                        f_in_word (r.approved_amt), r.cheque_dt,
                        r.to_acc_no,
                        (SELECT bank_nm
                           FROM acc_bank
                          WHERE bank_cd = r.to_bank_cd) bank_nm,
                        (SELECT br_nm
                           FROM acc_branch
                          WHERE bank_cd = r.to_bank_cd AND br_cd = r.to_br_cd) br_nm
                   FROM acc_fund_requisition r
                             WHERE '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                                   AND r.to_office_cd =
                                                        NVL ('''
            || p_office_cd
            || ''', r.to_office_cd)
                                  )
                               OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                                   AND EXISTS (
                                          SELECT     f.office_cd
                                                FROM hrm_office_setup f
                                               WHERE f.office_cd = r.to_office_cd
                                          START WITH f.office_cd =
                                                            NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                          CONNECT BY PRIOR f.office_cd =
                                                                       f.control_office_cd)
                                  )
                              )
                          AND r.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_dt)
                                              AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_dt)
             AND r.cheque_dt IS NOT NULL
             AND r.cheque_no IS NULL
             order BY r.to_office_cd,
                     r.cheque_dt';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.cheque_pay_to, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_cheque_info.cheque_dt1, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.cheque_pay_to
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '04'
      THEN
         v_payment_desc := 'Miscellaneous';
         v_query_str :=
            'SELECT p.pay_to, p.chq_dt, p.trns_amt
                  FROM acc_misc_payment p
                 WHERE '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                                       AND p.office_cd =
                                                            NVL ('''
            || p_office_cd
            || ''', p.office_cd)
                                      )
                                   OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                                       AND EXISTS (
                                              SELECT     f.office_cd
                                                    FROM hrm_office_setup f
                                                   WHERE f.office_cd = p.office_cd
                                              START WITH f.office_cd =
                                                                NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                              CONNECT BY PRIOR f.office_cd =
                                                                           f.control_office_cd)
                                      )
                                  )
                              AND p.trns_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', p.trns_dt)
                                                  AND NVL ('''
            || p_cheque_dt_to
            || ''', p.trns_dt)                          
                        order BY p.office_cd,
                                 p.trns_dt';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.cheque_pay_to, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '050'
      THEN
         v_payment_desc := 'Suspense Return';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (r.pgid) policy_no,
                        r.cheque_dt, rep_f_party_name (r.party_id, r.pgid) ben_party_nm,
                        SUM (r.TOT_RETURN_AMT-NVL(r.NEW_POLICY_AMT,0)) tot_payable_amt,
                        f_in_word (SUM (r.TOT_RETURN_AMT-NVL(r.NEW_POLICY_AMT,0))) in_word,
                        (SELECT b.bank_nm
                           FROM acc_bank b
                          WHERE b.bank_cd = r.party_bank_cd) bank_nm,
                        (SELECT b.br_nm
                           FROM acc_branch b
                          WHERE b.bank_cd = r.party_bank_cd
                            AND b.br_cd = r.party_br_cd) br_nm,
                        r.PARTY_ACC_NO
                   FROM acc_sus_return r, ins_p_summery s
                  WHERE r.cheque_no IS NULL
                    AND r.cheque_dt IS NOT NULL
                    AND '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                                   AND R.PAYABLE_OFF_CD =
                                                        NVL ('''
            || p_office_cd
            || ''', R.PAYABLE_OFF_CD)
                                  )
                               OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                                   AND EXISTS (
                                          SELECT     f.office_cd
                                                FROM hrm_office_setup f
                                               WHERE f.office_cd = R.PAYABLE_OFF_CD
                                          START WITH f.office_cd =
                                                            NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                          CONNECT BY PRIOR f.office_cd =
                                                                       f.control_office_cd)
                                  )
                              )
                          AND r.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_dt)
                                              AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_dt)
                  AND r.pgid = s.pgid(+)
                  AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pgid = r.pgid
                                                    AND p.pk_ref = r.appl_no
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
                    GROUP BY r.pgid,
                             r.party_bank_cd,
                             r.party_br_cd,
                             r.party_acc_no,
                             r.party_id,
                             r.cheque_dt,
                             r.PROPOSAL_NO';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '051'
      THEN
         v_payment_desc := 'Suspense Return(2nd Cheque)';
         v_query_str :=
            'SELECT NVL(fun_ins_pgid_to_policy_no (r.pgid),PROPOSAL_NO) policy_no,
                        r.cheque_dt, rep_f_party_name (r.party_id, r.pgid) ben_party_nm,
                        SUM (NVL(r.NEW_POLICY_AMT,0)) tot_payable_amt,
                        f_in_word (SUM (NVL(r.NEW_POLICY_AMT,0))) in_word,
                        (SELECT b.bank_nm
                           FROM acc_bank b
                          WHERE b.bank_cd = r.party_bank_cd) bank_nm,
                        (SELECT b.br_nm
                           FROM acc_branch b
                          WHERE b.bank_cd = r.party_bank_cd
                            AND b.br_cd = r.party_br_cd) br_nm,
                        r.PARTY_ACC_NO
                   FROM acc_sus_return r, ins_p_summery s
                  WHERE r.cheque_no IS NULL
                    AND r.cheque_dt IS NOT NULL
                    AND NVL(R.NEW_POLICY_AMT, ''0'') > ''0''
                    AND '
            || NVL (p_whrcls, '1=1')
            || ' AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                                   AND R.PAYABLE_OFF_CD =
                                                        NVL ('''
            || p_office_cd
            || ''', R.PAYABLE_OFF_CD)
                                  )
                               OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                                   AND EXISTS (
                                          SELECT     f.office_cd
                                                FROM hrm_office_setup f
                                               WHERE f.office_cd = R.PAYABLE_OFF_CD
                                          START WITH f.office_cd =
                                                            NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                                          CONNECT BY PRIOR f.office_cd =
                                                                       f.control_office_cd)
                                  )
                              )
                          AND r.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_dt)
                                              AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_dt)
                  AND r.pgid = s.pgid(+)
                  AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pgid = r.pgid
                                                    AND p.pk_ref = r.appl_no
                                                    AND NVL(p.print_doc_slno, ''1'') = ''2''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
                    GROUP BY r.pgid,
                             r.party_bank_cd,
                             r.party_br_cd,
                             r.party_acc_no,
                             r.party_id,
                             r.cheque_dt,
                             r.PROPOSAL_NO';
         DBMS_OUTPUT.put_line (v_query_str);

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;

            /*v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';*/
            ---------------------MODIFIED BY PARAMA BISWAS ON 24/07/2016---------
            IF v_config_act_for = '1'
            THEN
               BEGIN
                  SELECT   com_nm
                    INTO   v_cheque_info.cheque_pay_to
                    FROM   insurance_company;

                  v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            ELSIF v_config_act_for = '2'
            THEN
               v_cheque_info.cheque_pay_to :=
                     v_cheque_info.client_nm
                  || ' ('
                  || v_bank_nm
                  || ', '
                  || v_br_nm
                  || ', A/C-'
                  || v_acc_no
                  || ')';
            END IF;

            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '06'
      THEN
         v_payment_desc := 'Policy Loan';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (r.pgid) policy_no, r.cheque_date cheque_dt,
                       rep_f_party_name (p.party_id, r.pgid) ben_party_nm,
                       r.net_payable_amount tot_payable_amt,
                       f_in_word (r.net_payable_amount) in_word, f_bank (c.bank_cd) bank_nm,
                       f_branch (c.br_cd) br_nm, c.account_no party_acc_no
                  FROM pol_loan_summary r,
                       pol_loan_application a,
                       ins_p_personal p,
                       clm_client_account c
                 WHERE NVL (r.cheque_issue_st, ''0'') = ''0''
                   AND r.cheque_date IS NOT NULL
                   AND r.pgid = a.pgid
                   AND r.sl_no = a.sl_no
                   AND a.pgid = p.pgid
                   AND a.party_cd = p.party_cd
                   AND p.sl_no = 1
                   AND a.pgid = c.pgid
                   AND a.party_cd = c.party_cd
                   AND a.party_id = c.party_id
                   AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pgid = r.pgid
                                                AND p.pk_ref = TO_CHAR(r.sl_no)
                                                AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.servicing_off = NVL ('''
            || p_office_cd
            || ''', a.servicing_off)
           )
        OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
            AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = a.servicing_off
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
   AND r.cheque_date BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_date)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_date)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            /*BEGIN
               SELECT    SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 1,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 2,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 3,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 4,
                                 1
                                )
                      || '     '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 5,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 6,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 7,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 8,
                                 1
                                )
                 INTO v_cheque_dt
                 FROM DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;*/
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '07'
      THEN
         v_payment_desc := 'Surrender';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (r.pgid) policy_no,
               r.pay_order_date cheque_dt,
               rep_f_party_name (p.party_id, r.pgid) ben_party_nm,
               r.party_apprv_amt tot_payable_amt,
               f_in_word (r.party_apprv_amt) in_word, f_bank (r.bank_cd) bank_nm,
               f_branch (r.branch_cd) br_nm, r.account_no party_acc_no
          FROM sur_disburs_mst r, sur_sur_application a, ins_p_personal p
         WHERE nvl(r.check_issue_st,''0'') = ''0''
           AND r.appl_sl_no = a.appl_sl_no
           AND a.pgid = p.pgid
           AND a.party_cd = p.party_cd
           AND p.sl_no = 1
           AND ('
            || p_report_option
            || '= ''0''
                OR (    '
            || p_report_option
            || '= ''1''
                    AND (   NOT EXISTS (
                                     SELECT 1
                                       FROM acc_cheque_print_info p
                                      WHERE p.pgid = r.pgid
                                        AND p.pk_ref = r.appl_sl_no
                                        AND NVL(p.print_doc_slno, ''1'') = ''1''
                                        AND NVL(p.print_doc_tp, ''2'') = ''2'')
                         OR EXISTS (
                               SELECT 1
                                 FROM clm_privilege_emp e, clm_privilege p
                                WHERE e.prv_cd = p.prv_cd
                                  AND p.auth_cat_cd = ''17''
                                  AND UPPER (e.db_user) = UPPER (USER))
                        )
                   )
               )
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND r.control_office_cd = NVL ('''
            || p_office_cd
            || ''', r.control_office_cd)
                    )
            OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                AND EXISTS (
                          SELECT     f.office_cd
                                FROM hrm_office_setup f
                               WHERE f.office_cd = r.control_office_cd
                          START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                          CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                   )
               )
            AND r.pay_order_date BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.pay_order_date)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', r.pay_order_date)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            /*BEGIN
               SELECT    SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 1,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 2,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 3,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 4,
                                 1
                                )
                      || '     '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 5,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 6,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 7,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 8,
                                 1
                                )
                 INTO v_cheque_dt
                 FROM DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;*/
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '07A'
      THEN
         v_payment_desc := 'Deduction From Surrender';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (r.pgid) policy_no,
               r.cheque_date_2nd cheque_dt,
               rep_f_party_name (p.party_id, r.pgid) ben_party_nm,
               r.off_manual_ded_amt tot_payable_amt,
               f_in_word (r.off_manual_ded_amt) in_word, f_bank (r.bank_cd_2nd) bank_nm,
               f_branch (r.branch_cd_2nd) br_nm, r.account_no_2nd party_acc_no
          FROM sur_disburs_mst r, sur_sur_application a, ins_p_personal p
         WHERE nvl(r.check_issue_st,''0'') = ''0''
           AND r.appl_sl_no = a.appl_sl_no
           AND a.pgid = p.pgid
           AND a.party_cd = p.party_cd
           AND NVL(r.off_manual_ded_amt, 0) > 0
           AND p.sl_no = 1
           AND ('
            || p_report_option
            || '= ''0''
                OR (    '
            || p_report_option
            || '= ''1''
                    AND (   NOT EXISTS (
                                     SELECT 1
                                       FROM acc_cheque_print_info p
                                      WHERE p.pgid = r.pgid
                                        AND p.pk_ref = r.appl_sl_no
                                        AND NVL(p.print_doc_slno, ''1'') = ''2''
                                        AND NVL(p.print_doc_tp, ''2'') = ''2'')
                         OR EXISTS (
                               SELECT 1
                                 FROM clm_privilege_emp e, clm_privilege p
                                WHERE e.prv_cd = p.prv_cd
                                  AND p.auth_cat_cd = ''17''
                                  AND UPPER (e.db_user) = UPPER (USER))
                        )
                   )
               )
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND r.control_office_cd = NVL ('''
            || p_office_cd
            || ''', r.control_office_cd)
                    )
            OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                AND EXISTS (
                          SELECT     f.office_cd
                                FROM hrm_office_setup f
                               WHERE f.office_cd = r.control_office_cd
                          START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                          CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                   )
               )
            AND r.cheque_date_2nd BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_date_2nd)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_date_2nd)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            /*BEGIN
               SELECT    SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 1,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 2,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 3,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 4,
                                 1
                                )
                      || '     '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 5,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 6,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 7,
                                 1
                                )
                      || '    '
                      || SUBSTR (TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                          'DDMMRRRR'
                                         ),
                                 8,
                                 1
                                )
                 INTO v_cheque_dt
                 FROM DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;*/
            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;

            ---------------------MODIFIED BY PARAMA BISWAS ON 24/07/2016---------
            IF v_config_act_for = '1'
            THEN
               BEGIN
                  SELECT      ' ('
                           || b.bank_nm
                           || ', '
                           || r.br_nm
                           || ', '
                           || m.acc_no
                           || ')'
                    INTO   v_dep_bank_info
                    FROM   acc_gl_bank_acc_setup_mst m,
                           acc_bank b,
                           acc_branch r
                   WHERE       one_stop_dep_acc_st = '1'
                           AND m.br_cd = r.br_cd
                           AND r.bank_cd = b.bank_cd;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_dep_bank_info := NULL;
               END;

               BEGIN
                  SELECT   com_nm || v_dep_bank_info
                    INTO   v_cheque_info.cheque_pay_to
                    FROM   insurance_company;

                  v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            ELSIF v_config_act_for = '2'
            THEN
               v_cheque_info.cheque_pay_to :=
                     v_cheque_info.client_nm
                  || ' ('
                  || v_bank_nm
                  || ', '
                  || v_br_nm
                  || ', A/C-'
                  || v_acc_no
                  || ')';
            END IF;

            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===========================================================================--
      ELSIF p_trns_tp = '08'
      THEN
         v_payment_desc := 'Agent Commission';
         v_query_str :=
            'SELECT   r.agent_id policy_no,
                     r.cheque_dt cheque_dt,
                     p.agent_nm_eng ben_party_nm,
                     SUM(r.gross_payable_amt - r.tax_ded_amt -NVL(r.tot_ded_amount, 0) + NVL(r.tot_paid_ded_amount,0) + NVL(r.tot_paid_interest_amt, 0)) tot_payable_amt,
                     f_in_word (SUM(r.gross_payable_amt - r.tax_ded_amt -NVL(r.tot_ded_amount, 0) + NVL(r.tot_paid_ded_amount,0) + NVL(r.tot_paid_interest_amt, 0))) in_word,
                     rep_f_bank (r.agent_acc_bank_cd) bank_nm,
                     rep_f_branch (r.agent_acc_br_cd) br_nm,
                     r.agent_acc_no party_acc_no
              FROM   com_agent_com_bill_mst r, hrm_agent p
             WHERE NVL(r.disburse_status,''0'') = ''0''
               AND r.agent_id = p.agent_id
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                   AND r.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''', r.OFFICE_CD)
                        )
                OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                    AND EXISTS (
                              SELECT     f.office_cd
                                    FROM hrm_office_setup f
                                   WHERE f.office_cd = r.OFFICE_CD
                              START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                              CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                       )
                   )
                AND r.CHEQUE_DT BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.CHEQUE_DT)
                                AND NVL ('''
            || p_cheque_dt_to
            || ''', r.CHEQUE_DT)
            GROUP BY   r.agent_id,
                       r.cheque_dt,
                       p.agent_nm_eng,
                       r.agent_acc_bank_cd,
                       r.agent_acc_br_cd,
                       r.agent_acc_no';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '09'
      THEN
         v_payment_desc := 'Employeer of FA Commission';
         v_query_str :=
            'SELECT   f_emp_id(r.emp_gid) policy_no,
                     r.cheque_dt cheque_dt,
                     p.emp_nm_eng ben_party_nm,
                     SUM(r.gross_payable_amt - r.tax_ded_amt -NVL(r.tot_ded_amount, 0) + NVL(r.tot_paid_ded_amount,0) + NVL(r.tot_paid_interest_amt, 0)) tot_payable_amt,
                     f_in_word (SUM(r.gross_payable_amt - r.tax_ded_amt -NVL(r.tot_ded_amount, 0) + NVL(r.tot_paid_ded_amount,0) + NVL(r.tot_paid_interest_amt, 0))) in_word,
                     rep_f_bank (r.emp_acc_bank_cd) bank_nm,
                     rep_f_branch (r.emp_acc_br_cd) br_nm,
                     r.emp_acc_no party_acc_no
              FROM   com_emp_com_bill_mst r, hrm_employee p
             WHERE NVL(r.disburse_status,''0'') = ''0''
               AND r.emp_gid = p.emp_gid
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                   AND r.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''', r.OFFICE_CD)
                        )
                OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                    AND EXISTS (
                              SELECT     f.office_cd
                                    FROM hrm_office_setup f
                                   WHERE f.office_cd = r.OFFICE_CD
                              START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                              CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                       )
                   )
                AND r.CHEQUE_DT BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.CHEQUE_DT)
                                AND NVL ('''
            || p_cheque_dt_to
            || ''', r.CHEQUE_DT)
            GROUP BY   r.emp_gid,
                   r.cheque_dt,
                   p.emp_nm_eng,
                   r.emp_acc_bank_cd,
                   r.emp_acc_br_cd,
                   r.emp_acc_no';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '10'
      THEN
         v_payment_desc := 'Employeer of FA Release/Bonus';
         v_query_str :=
            'SELECT   f_emp_id(r.emp_gid) policy_no,
                     r.cheque_dt cheque_dt,
                     p.emp_nm_eng ben_party_nm,
                    SUM (r.gross_payable_amt - r.tax_ded_amt) tot_payable_amt,
                     f_in_word (SUM(r.gross_payable_amt - r.tax_ded_amt)) in_word,
                     rep_f_bank (r.emp_acc_bank_cd) bank_nm,
                     rep_f_branch (r.emp_acc_br_cd) br_nm,
                     r.emp_acc_no party_acc_no
              FROM   com_emp_bon_com_bil_mst r, hrm_employee p
             WHERE NVL(r.disburse_status,''0'') = ''0''
               AND r.emp_gid = p.emp_gid
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                   AND r.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''', r.OFFICE_CD)
                        )
                OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                    AND EXISTS (
                              SELECT     f.office_cd
                                    FROM hrm_office_setup f
                                   WHERE f.office_cd = r.OFFICE_CD
                              START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                              CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                       )
                   )
                AND r.CHEQUE_DT BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.CHEQUE_DT)
                                AND NVL ('''
            || p_cheque_dt_to
            || ''', r.CHEQUE_DT)
            GROUP BY   r.emp_gid,
                       r.cheque_dt,
                       p.emp_nm_eng,
                       r.emp_acc_bank_cd,
                       r.emp_acc_br_cd,
                       r.emp_acc_no';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '16'
      THEN
         v_payment_desc := 'Claim Ex Gratia Cheque';
         v_query_str :=
            'SELECT fun_ins_pgid_to_policy_no (m.pgid), m.cheque_dt,
                   NVL (m.net_pay_amt, 0) net_payable_amt,
                   (SELECT party_name
                      FROM ins_p_personal
                     WHERE pgid = m.pgid
                       AND party_cd = t.ben_party_cd
                       AND sl_no = 1) ben_party_nm,
                   m.CLIENT_ACC_NO, (SELECT bank_nm
                                     FROM acc_bank
                                    WHERE bank_cd = m.CLIENT_BANK_CD) bank_nm,
                   (SELECT br_nm
                      FROM acc_branch
                     WHERE bank_cd = m.CLIENT_BANK_CD AND br_cd = m.CLIENT_BR_CD) br_nm
              FROM clm_exgratia_claim m, clm_claim_mst t
                             WHERE m.pgid = t.pgid 
                               AND m.intimation_no = t.intimation_no
                               AND '
            || NVL (p_whrcls, '1=1');

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '17'
      THEN
         v_payment_desc := 'Group Insurance';
         v_query_str :=
            'SELECT p.policy_no, m.cheque_dt, NVL (m.claim_amt, 0) net_payable_amt
       ,am.CLAIMANT_NM ben_party_nm,
       t.account_no, f_bank (t.bank_cd) bank_nm, f_branch (t.branch_cd) br_nm
  FROM grp_claim_detl m,
       grp_ins_claim_appl_dtl t,
       grp_group_ins_summery p,
       grp_ins_claim_appl_mst am
 WHERE m.pgid = t.pgid
   AND m.sl_no = t.sl_no
   AND p.pgid = t.pgid
   AND m.clm_id = t.clm_id
   AND t.clm_id = am.clm_id
                               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                   AND p.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''', p.OFFICE_CD)
                        )
                OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                    AND EXISTS (
                              SELECT     f.office_cd
                                    FROM hrm_office_setup f
                                   WHERE f.office_cd = p.OFFICE_CD
                              START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                              CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                       )
                   )
                AND m.CHEQUE_DT BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', m.CHEQUE_DT)
                                AND NVL ('''
            || p_cheque_dt_to
            || ''', m.CHEQUE_DT)
            ';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            IF v_acc_no IS NOT NULL
            THEN
               v_acc_info :=
                     ' ('
                  || v_bank_nm
                  || ', '
                  || v_br_nm
                  || ', A/C-'
                  || v_acc_no
                  || ')';
            ELSE
               v_acc_info := NULL;
            END IF;

            v_cheque_info.cheque_pay_to :=
               v_cheque_info.client_nm || v_acc_info;
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '18'
      THEN
         v_payment_desc := 'Others Payment';
         v_query_str :=
            'SELECT NVL (m.supplier_id, m.emp_gid), m.chq_dt cheque_dt,
                       NVL (m.trns_amt, 0) net_payable_amt,
                       (SELECT supplier_nm
                          FROM acc_coll_media_supplier
                         WHERE supplier_id = m.supplier_id) ben_party_nm, NULL bank_acc_no,
                       NULL bank_nm,
                       NULL br_nm
                  FROM acc_oth_pay_mst m
                 WHERE NVL (m.approved_st, ''0'') = ''0'' 
                   AND m.chq_dt IS NOT NULL '
            || NVL (p_whrcls, '1=1');

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ----------ADDED BY PARAMA BISWAS ON 22/08/2016----------------
      ELSIF p_trns_tp = '21'
      THEN
         v_payment_desc := 'Utility Bill Payment';
         v_query_str :=
            'SELECT   M.BILL_ID,
                 m.CHQ_DT,
                 M.NET_PAYABLE_AMT,
                 (CASE
                     WHEN M.BUILD_ID IS NOT NULL
                     THEN
                        (SELECT   BUILD_NM
                           FROM   UTS_BUILDING_MST S
                          WHERE   S.BUILD_ID = M.BUILD_ID)
                     WHEN M.AGREE_ID IS NOT NULL
                     THEN
                        (SELECT   R.HOUSE_OWNER_NAME
                           FROM   UTS_OFF_RENT_AGRMNT_MST R
                          WHERE   R.AGREE_ID = M.AGREE_ID)
                  END)
                    ben_party_nm,
                 b.PAYMNT_BANK_ACC ACCOUNT_NO,
                 f_bank (b.PAYMNT_BANK_CD) bank_nm,
                 f_branch (b.PAYMNT_BRANCH_CD) br_nm
          FROM   UTS_OFF_BILL_DTL m, UTS_OFF_BILL_MST t, uts_off_rent_agrmnt_mst b
         WHERE       m.BILL_ID = t.BILL_ID
                 AND m.agree_id = b.agree_id
                 AND b.agree_status = ''A''
                AND m.CHQ_DT IS NOT NULL
                AND M.CHQ_NO IS NULL
                               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND m.CHQ_DT = NVL ('''
            || p_office_cd
            || ''', m.bill_for_office_cd)'
            || 'AND m.CHQ_DT = NVL ('''
            || p_cheque_dt_frm
            || ''', m.CHQ_DT)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --------------------------
      ----------Add By Sharmin Sultana Prite 02-10-2016 for gratuity
      ELSIF p_trns_tp = '22'
      THEN
         v_payment_desc := 'Gratuity';
         v_query_str :=
            'SELECT TO_CHAR (f_emp_id (r.emp_gid)) policy_no, d.cheque_date cheque_dt,
       d.disburs_amt tot_payable_amt, a.applicant_name ben_party_nm,
       d.account_no party_acc_no, f_bank (d.bank_cd) bank_nm,
       f_branch (d.branch_cd) br_nm
  FROM gra_gratuity_settlement r,
       gra_gratuity_settlement_dtl d,
       gra_settle_appl_dtl a
 WHERE d.cheque_no IS NOT NULL
   AND d.cheque_date IS NOT NULL
   AND r.appl_no = d.appl_no
   AND d.appl_no = a.appl_no
   AND d.sl_no = a.sl_no
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND r.office_cd = NVL ('''
            || p_office_cd
            || ''',  r.office_cd
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  r.office_cd
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       ))
        AND d.cheque_date BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', d.cheque_date)
                                      AND NVL ('''
            || p_cheque_dt_to
            || ''', d.cheque_date)
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = d.CHEQUE_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --===================== end of gratuity-====================
      ---------*************************************------------------------
      /*
      Add by :Sharmin Sultana Prite
      Date:22-March-2017
      Puupose:Loan Application Approval/Loan Recovery
      */
      ELSIF p_trns_tp IN ('23', '24')
      THEN
         IF p_trns_tp = '23'
         THEN
            v_payment_desc := 'Welfare Loan Approval';
         ELSIF p_trns_tp = '24'
         THEN
            v_payment_desc := 'Advance Loan Approval';
         END IF;

         v_query_str :=
            'SELECT   to_char(f_emp_id (r.emp_gid)) policy_no, r.cheque_dt cheque_dt, r.loan_amt tot_payable_amt,
                       f_emp_nm (r.emp_gid) ben_party_nm,
                       r.account_no party_acc_no, f_bank (r.bank_cd) bank_nm,
                       f_branch (r.br_cd) br_nm
           FROM   PAY_LOAN_APPL_APPRVL r
         WHERE r.CHEQUE_NO IS  NULL
         AND r.CHEQUE_DT IS NOT NULL
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (r.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (r.emp_gid)
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  F_EMP_OFFICE_CD (r.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )) 
             AND r.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_dt)
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = r.CHEQUE_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '19'
      THEN
         v_payment_desc := 'PF';
         v_query_str :=
            'SELECT f_emp_id (a.emp_gid) policy_no, d.pay_order_date cheque_dt,
               m.tot_disburs_amount tot_payable_amt, l.applicant_name emp_nm,
               d.account_no party_acc_no, f_bank (d.bank_cd) bank_nm,
               f_branch (d.branch_cd) br_nm
          FROM cpf_final_settle_disburs_dtl d,
               cpf_final_settl_appl_mst a,
               cpf_final_settl_appl_dtl l,
               cpf_final_settle_disburs_mst m
         WHERE a.appl_no = m.appl_no
           AND d.appl_no = m.appl_no
           AND a.appl_no = l.appl_no
           AND d.sl_no = l.sl_no
           AND d.pay_order_no IS NOT NULL
           AND d.pay_order_date IS NOT NULL
           AND m.payment_type = 2
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''',  a.OFFICE_CD
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  a.OFFICE_CD
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       ))
        AND d.PAY_ORDER_DATE =NVL('''
            || p_cheque_dt_frm
            || ''',d.PAY_ORDER_DATE) 
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = d.PAY_ORDER_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '20'
      THEN
         v_payment_desc := 'PF_DED';
         v_query_str :=
            'SELECT   NULL emp_id,
         s.cheque_date cheque_dt,
         s.ded_amount tot_payable_amt,
         f_emp_nm (a.emp_gid) emp_nm,
         s.DED_ACC_NO  party_acc_no,
         f_bank (s.ded_bank_cd) bank_nm,
         f_branch (s.ded_branch_cd) br_nm
  FROM   cpf_final_settl_appl_mst a,
         CPF_FINAL_SETTL_APPRV_DED s
 WHERE      S.APPL_NO=a.APPL_NO
         AND s.APPL_NO IS NOT NULL
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''',  a.OFFICE_CD
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  a.OFFICE_CD
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.CHEQUE_DATE =NVL('''
            || p_cheque_dt_frm
            || ''',s.CHEQUE_DATE) 
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = s.CHEQUE_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            /* v_cheque_info.cheque_pay_to :=
                   v_cheque_info.client_nm
                || ' ('
                || v_bank_nm
                || ', '
                || v_br_nm
                || ', A/C-'
                || v_acc_no
                || ')';*/
            BEGIN
               SELECT   com_nm || v_dep_bank_info
                 INTO   v_cheque_info.cheque_pay_to
                 FROM   insurance_company;

               v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ELSIF p_trns_tp = '25'
      THEN
         v_payment_desc := 'GRA_DED';
         v_query_str :=
            'SELECT NULL emp_id, s.cheque_date cheque_dt, s.ded_amount tot_payable_amt,
       f_emp_nm (a.emp_gid) emp_nm, s.ded_acc_no party_acc_no,
       f_bank (s.ded_bank_cd) bank_nm, f_branch (s.ded_branch_cd) br_nm
  FROM gra_gratuity_settlement a, gra_gratuity_settlement_ded s
 WHERE s.appl_no = a.appl_no 
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''',  a.OFFICE_CD
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  a.OFFICE_CD
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.CHEQUE_DATE =NVL('''
            || p_cheque_dt_frm
            || ''',s.CHEQUE_DATE) 
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = s.CHEQUE_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.payable_amt1, v_cheque_info.client_nm, v_acc_no, v_bank_nm, v_br_nm;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            /* v_cheque_info.cheque_pay_to :=
                   v_cheque_info.client_nm
                || ' ('
                || v_bank_nm
                || ', '
                || v_br_nm
                || ', A/C-'
                || v_acc_no
                || ')';*/
            BEGIN
               SELECT   com_nm || v_dep_bank_info
                 INTO   v_cheque_info.cheque_pay_to
                 FROM   insurance_company;

               v_cheque_info.client_nm := v_cheque_info.cheque_pay_to;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            v_cheque_info.amt_inwords :=
               f_in_word (v_cheque_info.payable_amt1);
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      --========================================================
      ELSIF p_trns_tp = '26'
      THEN
         v_payment_desc := 'Employee Collection Incentive';
         v_query_str :=
            'SELECT   f_emp_id(r.emp_gid) policy_no,
                     r.cheque_dt cheque_dt,
                     p.emp_nm_eng ben_party_nm,
                     SUM(bill_amount) tot_payable_amt,
                     f_in_word (SUM(bill_amount)) in_word,
                     rep_f_bank (r.emp_acc_bank_cd) bank_nm,
                     rep_f_branch (r.emp_acc_br_cd) br_nm,
                     r.emp_acc_no party_acc_no
              FROM   com_emp_coll_inc_bill_mst r, hrm_employee p
             WHERE NVL(r.disburse_status,''0'') = ''0''
               AND r.emp_gid = p.emp_gid
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
                   AND r.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''', r.OFFICE_CD)
                        )
                OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
                    AND EXISTS (
                              SELECT     f.office_cd
                                    FROM hrm_office_setup f
                                   WHERE f.office_cd = r.OFFICE_CD
                              START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                              CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                       )
                   )
                AND r.CHEQUE_DT BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.CHEQUE_DT)
                                AND NVL ('''
            || p_cheque_dt_to
            || ''', r.CHEQUE_DT)
            GROUP BY   r.emp_gid,
                   r.cheque_dt,
                   p.emp_nm_eng,
                   r.emp_acc_bank_cd,
                   r.emp_acc_br_cd,
                   r.emp_acc_no';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.policy_no, v_cheque_info.cheque_dt1, v_cheque_info.client_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.client_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      END IF;

      RETURN;
   /*EXCEPTION
         WHEN OTHERS
         THEN
            NULL;*/
   END fun_cheque_print;

   FUNCTION fun_payroll_cheque_print (
      p_office_cd        hrm_office.office_cd%TYPE,
      p_descendant       VARCHAR2,
      p_cheque_dt_frm    DATE,
      p_cheque_dt_to     DATE,
      p_trns_tp          VARCHAR2, /*p_trns_tp = 11 For cpf;
                                    p_trans_tp=19 for PF*/
      p_whrcls           VARCHAR2 DEFAULT '1=1' ,
      p_report_option    VARCHAR2 DEFAULT '0'
   )
      RETURN tp_payroll_cheque_tab
      PIPELINED
   IS
      v_payment_desc    VARCHAR2 (50);
      v_cheque_info     tp_payroll_cheque_rec;
      v_cheque_dt       VARCHAR2 (50);
      v_bank_nm         acc_bank.bank_nm%TYPE;
      v_br_nm           acc_branch.br_nm%TYPE;
      v_acc_no          VARCHAR2 (30);

      TYPE cur_tp IS REF CURSOR;

      v_cur             cur_tp;
      v_query_str       VARCHAR2 (4000);
      v_cheque_pay_to   VARCHAR2 (100);
   BEGIN
      IF p_trns_tp = '11'                                         ----'11'=CPF
      THEN
         v_payment_desc := 'CPF';
         v_query_str :=
            'SELECT f_emp_id (r.emp_gid) emp_id, r.cheque_dt cheque_dt,
                       f_emp_nm (r.emp_gid) emp_nm, r.loan_amt loan_amt,
                       f_in_word (r.loan_amt) in_word, f_bank (r.bank_cd) bank_nm,
                       f_branch (r.br_cd) br_nm, r.account_no party_acc_no
               FROM cpf_loan_apprvl r
               WHERE NVL (r.disburse_flag, ''N'') = ''N''
                     AND r.cheque_dt IS NOT NULL
                     AND r.cheque_no IS NULL
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (r.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (r.emp_gid))
           )
        OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
            AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = F_EMP_OFFICE_CD (r.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
   AND r.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', r.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', r.cheque_dt)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ----------------------------end CPF----------------------------------------
      ELSIF p_trns_tp = '12'                                   ----'12'=Salary
      THEN
         v_payment_desc := 'Salary';
         v_query_str :=
            'SELECT f_emp_id (s.emp_gid) emp_id, s.cheque_dt cheque_dt,
                       f_emp_nm (s.emp_gid) emp_nm, s.net_payable_amt tot_payable_amt,
                       f_in_word (s.net_payable_amt) in_word, f_bank (s.bank_cd) bank_nm,
                       f_branch (s.br_cd) br_nm, s.account_no party_acc_no
                FROM sal_salary_mst s
                WHERE NVL (s.disburse_flag, ''N'') = ''N''
                      AND s.cheque_dt IS NOT NULL
                      AND s.cheque_no IS NULL
                      AND s.payment_type=''S''
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (s.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (s.emp_gid))
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = F_EMP_OFFICE_CD (s.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', s.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', s.cheque_dt)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      -------------------------------end salary-------------------------------------------
      ELSIF p_trns_tp = '15'                                    ----'15'=Bonus
      THEN
         v_payment_desc := 'Bonus';
         v_query_str :=
            'SELECT f_emp_id (s.emp_gid) emp_id, s.cheque_dt cheque_dt,
                       f_emp_nm (s.emp_gid) emp_nm, s.net_payable_amt tot_payable_amt,
                       f_in_word (s.net_payable_amt) in_word, f_bank (s.bank_cd) bank_nm,
                       f_branch (s.br_cd) br_nm, s.account_no party_acc_no
                FROM sal_salary_mst s
                WHERE NVL (s.disburse_flag, ''N'') = ''N''
                      AND s.cheque_dt IS NOT NULL
                      AND s.cheque_no IS NULL
                      AND s.payment_type=''B''
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (s.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (s.emp_gid))
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = F_EMP_OFFICE_CD (s.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', s.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', s.cheque_dt)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ----------------------------------------------end bonus---------------------
      ELSIF p_trns_tp = '13'                                  ----'13'=Pension
      THEN
         v_payment_desc := 'Pension';
         v_query_str :=
            'SELECT f_emp_id (p.emp_gid) emp_id, p.cheque_dt cheque_dt,
       f_emp_nm (p.emp_gid) emp_nm, p.net_payable_amt tot_payable_amt,
       f_in_word (p.net_payable_amt) in_word, f_bank (p.emp_bank_cd) bank_nm,
       f_branch (p.emp_br_cd) br_nm, p.emp_account_no party_acc_no
  FROM pen_pension_mst p
 WHERE NVL (p.disburse_flag, ''N'') = ''N''
   AND p.cheque_dt IS NOT NULL
   AND p.cheque_no IS NULL
           AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (p.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (p.emp_gid))
           )
        OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
            AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = F_EMP_OFFICE_CD (p.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
   AND p.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', p.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', p.cheque_dt)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      -------------------------------------------------------------------------------
      ELSIF p_trns_tp = '15'                                    ----'15'=Bonus
      THEN
         v_payment_desc := 'Bonus';
         v_query_str :=
            'SELECT f_emp_id (s.emp_gid) emp_id, s.cheque_dt cheque_dt,
                       f_emp_nm (s.emp_gid) emp_nm, s.net_payable_amt tot_payable_amt,
                       f_in_word (s.net_payable_amt) in_word, f_bank (s.bank_cd) bank_nm,
                       f_branch (s.br_cd) br_nm, s.account_no party_acc_no
                FROM sal_salary_mst s
                WHERE NVL (s.disburse_flag, ''N'') = ''N''
                      AND s.cheque_dt IS NOT NULL
                      AND s.cheque_no IS NULL
                      AND s.payment_type=''B''
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND F_EMP_OFFICE_CD (s.emp_gid) = NVL ('''
            || p_office_cd
            || ''', F_EMP_OFFICE_CD (s.emp_gid))
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd = F_EMP_OFFICE_CD (s.emp_gid)
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.cheque_dt BETWEEN NVL ('''
            || p_cheque_dt_frm
            || ''', s.cheque_dt)
                            AND NVL ('''
            || p_cheque_dt_to
            || ''', s.cheque_dt)';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ------------    Add By Sharmin Sultana Prite 16-August-2016 for PF settlemet
      ELSIF p_trns_tp = '19'
      THEN
         v_payment_desc := 'PF';
         v_query_str :=
            'SELECT   f_emp_id (a.emp_gid) emp_id,
         d.PAY_ORDER_DATE cheque_dt,
         f_emp_nm (a.emp_gid) emp_nm,
         m.tot_disburs_amount tot_payable_amt,
         f_in_word (m.tot_disburs_amount) in_word,
         f_bank (d.BANK_CD) bank_nm,
         f_branch (d.BRANCH_CD) br_nm,
         d.ACCOUNT_NO party_acc_no
           FROM   cpf_final_settle_disburs_dtl d,
         cpf_final_settl_appl_mst a,
         cpf_final_settle_disburs_mst m
         WHERE       a.APPL_NO = m.APPL_NO
         AND D.APPL_NO = M.APPL_NO
         AND d.PAY_ORDER_NO IS NOT NULL
         AND d.PAY_ORDER_DATE IS NOT NULL
         AND m.payment_type = 2
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND (   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''',  a.OFFICE_CD
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  a.OFFICE_CD
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       ))
        AND d.PAY_ORDER_DATE =NVL('''
            || p_cheque_dt_frm
            || ''',d.PAY_ORDER_DATE) 
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = d.PAY_ORDER_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '   '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;
            v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      ---For PF Deduction
      ELSIF p_trns_tp = '20'
      THEN
         v_payment_desc := 'PF_DED';
         v_query_str :=
            'SELECT   NULL emp_id,
         s.cheque_date cheque_dt,
         f_emp_nm (a.emp_gid) emp_nm,
         s.ded_amount tot_payable_amt,
         f_in_word (s.ded_amount) in_word,
         f_bank (s.ded_bank_cd) bank_nm,
         f_branch (s.ded_branch_cd) br_nm,
         s.DED_ACC_NO  party_acc_no
  FROM   cpf_final_settl_appl_mst a,
         CPF_FINAL_SETTL_APPRV_DED s
 WHERE      S.APPL_NO=a.APPL_NO
         AND s.APPL_NO IS NOT NULL
               AND '
            || NVL (p_whrcls, '1=1')
            || 'AND   (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''N''
               AND a.OFFICE_CD = NVL ('''
            || p_office_cd
            || ''',  a.OFFICE_CD
              )
           OR (    NVL ('''
            || p_descendant
            || ''', ''N'') = ''Y''
              AND EXISTS (
                      SELECT     f.office_cd
                            FROM hrm_office_setup f
                           WHERE f.office_cd =  a.OFFICE_CD
                      START WITH f.office_cd = NVL ('''
            || p_office_cd
            || ''', f.office_cd)
                      CONNECT BY PRIOR f.office_cd = f.control_office_cd)
           )
       )
        AND s.CHEQUE_DATE =NVL('''
            || p_cheque_dt_frm
            || ''',s.CHEQUE_DATE) 
            AND ('
            || p_report_option
            || '= ''0''
                        OR (    '
            || p_report_option
            || '= ''1''
                            AND (   NOT EXISTS (
                                             SELECT 1
                                               FROM acc_cheque_print_info p
                                              WHERE p.pk_ref = s.CHEQUE_NO
                                                    AND NVL(p.print_doc_slno, ''1'') = ''1''
                                                    AND NVL(p.print_doc_tp, ''2'') = ''2'')
                                 OR EXISTS (
                                       SELECT 1
                                         FROM clm_privilege_emp e, clm_privilege p
                                        WHERE e.prv_cd = p.prv_cd
                                          AND p.auth_cat_cd = ''17''
                                          AND UPPER (e.db_user) = UPPER (USER))
                                )
                           )
                       )';

         OPEN v_cur FOR v_query_str;

         LOOP
            FETCH v_cur
               INTO
                         v_cheque_info.emp_id, v_cheque_info.cheque_dt1, v_cheque_info.emp_nm, v_cheque_info.payable_amt1, v_cheque_info.amt_inwords, v_bank_nm, v_br_nm, v_acc_no;

            EXIT WHEN v_cur%NOTFOUND;

            BEGIN
               SELECT   SUBSTR (
                           TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                    'DDMMRRRR'),
                           1,
                           1
                        )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              2,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              3,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              4,
                              1
                           )
                        || '     '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              5,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              6,
                              1
                           )
                        || '    '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              7,
                              1
                           )
                        || '  '
                        || SUBSTR (
                              TO_CHAR (TRUNC (v_cheque_info.cheque_dt1),
                                       'DDMMRRRR'),
                              8,
                              1
                           )
                 INTO   v_cheque_dt
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_cheque_dt := v_cheque_info.cheque_dt1;
            END;

            v_cheque_info.cheque_dt2 := v_cheque_dt;

            /*v_cheque_info.cheque_pay_to :=
                  v_cheque_info.emp_nm
               || ' ('
               || v_bank_nm
               || ', '
               || v_br_nm
               || ', A/C-'
               || v_acc_no
               || ')';*/
            BEGIN
               SELECT   com_nm INTO v_cheque_pay_to FROM insurance_company;

               v_cheque_info.cheque_pay_to := v_cheque_pay_to;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            v_cheque_info.emp_nm := v_cheque_pay_to || v_cheque_info.emp_nm;
            v_cheque_info.payable_amt2 := v_cheque_info.payable_amt1;
            v_cheque_info.payment_desc := v_payment_desc;
            PIPE ROW (v_cheque_info);
         END LOOP;

         CLOSE v_cur;
      END IF;
   END fun_payroll_cheque_print;

   /************Add by Musha on 28-02-2015************/
   FUNCTION fun_policy_ledger_info (p_pgid         ins_p_proposal.pgid%TYPE,
                                    p_office_cd    hrm_office.office_cd%TYPE,
                                    p_check        VARCHAR2)
      RETURN tp_policy_ledger_tab
      PIPELINED
   AS
      v_ledger_info            tp_policy_ledger_rec;
      v_adjusted_by            VARCHAR2 (150);
      v_adjustment_date        DATE;
      v_receipt_date           DATE;
      v_req_amount             NUMBER;
      v_coll_amount            NUMBER;
      v_adv_status             VARCHAR2 (2);
      v_adjusted_method        VARCHAR2 (50);
      v_receipt_no             VARCHAR2 (500);
      v_partial_receipt_no     VARCHAR2 (100);
      v_all_coll_amount        VARCHAR2 (500);
      v_all_par_coll_amount    VARCHAR2 (500);
      v_all_par_receipt_date   VARCHAR2 (300);
      v_all_receipt_date       VARCHAR2 (500);
      v_adj_slip_no            VARCHAR2 (30);
      v_no_of_instl            NUMBER (3);
      v_tot_premium_amt        acc_receivables.tot_premium_amt%TYPE;
      v_adj_prem_amt           acc_receivables.tot_premium_amt%TYPE;
      v_unadj_prem_amt         acc_receivables.tot_premium_amt%TYPE;
      v_return_prem_amt        acc_receivables.tot_premium_amt%TYPE;
   BEGIN
      FOR i
      IN (  SELECT   pgid,
                     policy_no,
                     payor_nm,
                     assured_nm,
                     address,
                     comm_date,
                     risk_date,
                     product_cd,
                     term,
                     sum_assured,
                     pay_mode,
                     option_nm,
                     installment_premium,
                     maturity_date,
                     last_paid_date,
                     policy_status,
                     installment_no,
                     next_due_dt,
                     payment_date,
                     proposer_pk,
                     fp_receive_id,
                     coll_pay_mode,
                     suspense_amt,
                     due_instl_prem,
                     due_tp,
                     return_st,
                     age,
                     proposed_status,
                     alt_st
              FROM   (SELECT   s.pgid,
                               fun_ins_pgid_to_policy_no (s.pgid) policy_no,
                               (SELECT   party_name
                                  FROM   ins_p_personal
                                 WHERE   pgid = s.pgid
                                         AND party_cd =
                                               DECODE (l.assurance_type,
                                                       '3', '02',
                                                       '03')
                                         AND sl_no = 1)
                                  payor_nm,
                               (SELECT   party_name
                                  FROM   ins_p_personal
                                 WHERE       pgid = s.pgid
                                         AND party_cd = '03'
                                         AND sl_no = 1)
                                  assured_nm,
                               (SELECT   n.father_name || ',' || a.t_address
                                  FROM   ins_p_address a, ins_p_personal n
                                 WHERE       a.pgid = s.pgid
                                         AND a.pgid = n.pgid
                                         AND a.party_cd = '03'
                                         AND n.party_cd = '03'
                                         AND a.party_id = n.party_id
                                         AND n.sl_no = 1)
                                  address,
                               s.comm_date,
                               s.risk_date,
                               s.product_cd,
                               s.term,
                               s.sum_assured,
                               DECODE (s.pay_mode_cd,
                                       '01',
                                       'Yearly',
                                       '02',
                                       'Half-yearly',
                                       '03',
                                       'Quarterly',
                                       '04',
                                       'Monthly',
                                       '05',
                                       'Single')
                                  pay_mode,
                               DECODE (s.option_cd,
                                       '1',
                                       'A',
                                       '2',
                                       'B',
                                       '3',
                                       'C')
                                  option_nm,
                               s.installment_premium,
                               s.maturity_date,
                               s.last_paid_date,
                               s.policy_status,
                               -- p.installment_no,
                               CASE
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '01'
                                       AND pay_mode = 'HLY'
                                  THEN
                                     CEIL (p.installment_no / 2)
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '01'
                                       AND pay_mode = 'QLY'
                                  THEN
                                     CEIL (p.installment_no / 4)
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '01'
                                       AND pay_mode = 'MLY'
                                  THEN
                                     CEIL (p.installment_no / 12)
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '02'
                                       AND pay_mode = 'QLY'
                                  THEN
                                     CEIL (installment_no / 2)
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '02'
                                       AND pay_mode = 'MLY'
                                  THEN
                                     CEIL (p.installment_no / 6)
                                  WHEN     p.alt_serail_no <> '0'
                                       AND s.pay_mode_cd = '03'
                                       AND pay_mode = 'MLY'
                                  THEN
                                     CEIL (p.installment_no / 4)
                                  ELSE
                                     p.installment_no
                               END
                                  installment_no,
                               p.next_due_dt,
                               p.payment_date,
                               p.proposer_pk,
                               p.fp_receive_id,
                               p.pay_mode coll_pay_mode,
                               s.suspense_amt,
                               p.installment_premium due_instl_prem,
                               1 due_tp,
                               return_st,
                               s.age,
                               p.proposed_status,
                               DECODE (TO_CHAR (alt_serail_no), '0', '0', '1')
                                  alt_st
                        FROM   ins_p_summery s,
                               ins_prem_acc_receivable p,
                               ins_p_proposal l
                       WHERE       s.pgid = p_pgid
                               AND p.pgid = p_pgid
                               AND l.pgid = p_pgid
                               AND s.pgid = p.pgid
                               AND s.pgid = l.pgid
                               AND p.proposed_status IN ('1', '7', '4')
                               AND (p.proposer_pk IS NOT NULL
                                    OR p.fp_receive_id IS NOT NULL)
                               AND ( (p_pgid IS NULL
                                      AND s.office_cd IN
                                               (SELECT   DISTINCT
                                                         DECODE (p_check,
                                                                 0,
                                                                 x.office_cd,
                                                                 y.office_cd)
                                                  FROM   (SELECT   p_office_cd
                                                                      office_cd
                                                            FROM   DUAL) x,
                                                         (    SELECT   office_cd
                                                                FROM   hrm_office_setup
                                                          CONNECT BY   PRIOR office_cd =
                                                                          control_office_cd
                                                          START WITH   office_cd =
                                                                          NVL (
                                                                             p_office_cd,
                                                                             office_cd
                                                                          )
                                                          UNION ALL
                                                          SELECT   p_office_cd
                                                                      office_cd
                                                            FROM   DUAL) y))
                                    OR (p_pgid IS NOT NULL AND 1 = 1)))
          ORDER BY   due_tp, next_due_dt)
      LOOP
         v_adjusted_by := NULL;
         v_adjustment_date := NULL;
         v_req_amount := NULL;
         v_coll_amount := NULL;
         v_adv_status := NULL;
         v_adjusted_method := NULL;
         v_receipt_no := NULL;
         v_partial_receipt_no := NULL;
         v_ledger_info.policy_no := i.policy_no;
         v_ledger_info.payor_nm := i.payor_nm;
         v_ledger_info.assured_nm := i.assured_nm;
         v_ledger_info.address := i.address;
         v_ledger_info.comm_date := i.comm_date;
         v_ledger_info.risk_date := i.risk_date;
         v_ledger_info.product_cd := i.product_cd;
         v_ledger_info.term := i.term;
         v_ledger_info.sum_assured := i.sum_assured;
         v_ledger_info.pay_mode := i.pay_mode;
         v_ledger_info.option_nm := i.option_nm;
         v_ledger_info.installment_premium := i.installment_premium;
         v_ledger_info.maturity_date := i.maturity_date;
         v_ledger_info.last_paid_date := i.last_paid_date;
         v_ledger_info.policy_status := i.policy_status;
         v_ledger_info.inst_no := i.installment_no;
         v_ledger_info.due_date := i.next_due_dt;
         v_ledger_info.coll_pay_mode := i.coll_pay_mode;
         v_ledger_info.suspense_amt := i.suspense_amt;
         v_ledger_info.entry_age := i.age;

         IF     i.installment_no = 1
            AND i.fp_receive_id IS NOT NULL
            AND i.alt_st = '0'
         THEN
            FOR j
            IN (SELECT   a.adjusted_by,
                         DECODE (a.i_usr, 'SLICL', 'Manual', 'System')
                            adjusted_method,
                         fun_prem_coll_receipt_no (a.partner_code,
                                                   a.partner_transid,
                                                   a.active_office_cd,
                                                   a.receive_date,
                                                   a.coll_slip_no,
                                                   a.coll_sl_no)
                            receipt_no,
                         NVL (a.coll_slip_rec_dt, a.receive_date) receipt_dt,
                         TRUNC (a.adjustment_date) adjustment_date,
                         a.coll_amount
                  FROM   acc_advance_receivables a
                 WHERE   a.proposal_no = fun_ins_pgid_to_proposal_no (i.pgid)
                         AND a.receive_id = i.fp_receive_id
                         AND a.rec_status = '1')
            LOOP
               v_ledger_info.adjustment_date :=
                  NVL (i.payment_date, j.adjustment_date);
               v_ledger_info.adjusted_by := j.adjusted_by;
               v_ledger_info.adjusted_method := j.adjusted_method;
               v_ledger_info.receipt_no :=
                  v_ledger_info.receipt_no || j.receipt_no || ', ';
               v_ledger_info.coll_amount :=
                  v_ledger_info.coll_amount || j.coll_amount || ', ';
               v_ledger_info.inst_coll_amount :=
                  NVL (v_ledger_info.inst_coll_amount, 0) + j.coll_amount;
               v_ledger_info.adj_slip_no := NULL;
               ---Add by Musha on 17-11-2014
               v_ledger_info.receipt_dt :=
                     v_ledger_info.receipt_dt
                  || TO_CHAR (j.receipt_dt, 'DD/MM/RRRR')
                  || ', ';                       ---Add by Musha on 18-11-2014
               v_ledger_info.coll_tot_prem_amt := i.due_instl_prem;
               ---Add by Musha on 27-11-2014
               v_ledger_info.adjusted_amt := i.due_instl_prem;
            END LOOP;

            v_ledger_info.receipt_no := RTRIM (v_ledger_info.receipt_no, ', ');
            v_ledger_info.coll_amount :=
               RTRIM (v_ledger_info.coll_amount, ', ');
            v_ledger_info.receipt_dt := RTRIM (v_ledger_info.receipt_dt, ', ');
         ELSIF i.installment_no = 1 AND i.fp_receive_id IS NOT NULL AND i.alt_st = '1'
         THEN
            FOR j
            IN (SELECT   a.adjusted_by,
                         DECODE (a.i_usr, 'SLICL', 'Manual', 'System')
                            adjusted_method,
                         fun_prem_coll_receipt_no (a.partner_code,
                                                   a.partner_transid,
                                                   a.active_office_cd,
                                                   a.receive_date,
                                                   a.coll_slip_no,
                                                   a.coll_sl_no)
                            receipt_no,
                         NVL (a.coll_slip_rec_dt, a.receive_date) receipt_dt,
                         TRUNC (a.adjustment_date) adjustment_date,
                         a.coll_amount
                  FROM   acc_advance_receivables a
                 WHERE   a.proposal_no = fun_ins_pgid_to_proposal_no (i.pgid)
                         AND a.receive_id = i.fp_receive_id)
            LOOP
               v_ledger_info.adjustment_date :=
                  NVL (i.payment_date, j.adjustment_date);
               v_ledger_info.adjusted_by := j.adjusted_by;
               v_ledger_info.adjusted_method := j.adjusted_method;
               v_ledger_info.receipt_no :=
                  v_ledger_info.receipt_no || j.receipt_no || ', ';
               v_ledger_info.coll_amount :=
                  v_ledger_info.coll_amount || j.coll_amount || ', ';
               v_ledger_info.inst_coll_amount :=
                  NVL (v_ledger_info.inst_coll_amount, 0) + j.coll_amount;
               v_ledger_info.adj_slip_no := NULL;
               ---Add by Musha on 17-11-2014
               v_ledger_info.receipt_dt :=
                     v_ledger_info.receipt_dt
                  || TO_CHAR (j.receipt_dt, 'DD/MM/RRRR')
                  || ', ';                       ---Add by Musha on 18-11-2014
               v_ledger_info.coll_tot_prem_amt := i.due_instl_prem;
               ---Add by Musha on 27-11-2014
               v_ledger_info.adjusted_amt := i.due_instl_prem;
            END LOOP;

            v_ledger_info.receipt_no := RTRIM (v_ledger_info.receipt_no, ', ');
            v_ledger_info.coll_amount :=
               RTRIM (v_ledger_info.coll_amount, ', ');
            v_ledger_info.receipt_dt := RTRIM (v_ledger_info.receipt_dt, ', ');
         ELSIF i.installment_no != 1 AND i.alt_st = '0'
         THEN
            BEGIN
               SELECT   r.adjusted_by,
                        TRUNC (r.adjustment_date) adjustment_date,
                        (r.late_fee - r.latefee_waiver + r.tot_premium_amt)
                           req_amount,
                        r.coll_amount,
                        r.adv_status,
                        DECODE (
                           NVL (i.return_st, '0'),
                           --Musha on 10.08.2017 NVL (r.return_st, '0')
                           '1',
                           DECODE (NVL (r.return_st, '0'),
                                   '1', 'Return',
                                   'System'),
                           DECODE (
                              r.status,
                              '1',
                              DECODE (NVL (r.man_adjusted, '0'),
                                      '1', 'Manual',
                                      'System'),
                              'Un-Adjusted'
                           )
                        )
                           adjusted_method,
                        fun_prem_coll_receipt_no (r.partner_code,
                                                  r.partner_transid,
                                                  r.active_office_cd,
                                                  r.receive_date,
                                                  r.coll_slip_no,
                                                  r.coll_sl_no)
                           receipt_no,
                        NVL (r.coll_slip_rec_dt, r.receive_date) receipt_dt,
                        r.adj_slip_no,
                        (r.installment_no_to - installment_no_from + 1)
                           no_of_instl,
                        r.tot_premium_amt,
                        (CASE
                            WHEN     NVL (r.status, '0') = '1'
                                 AND NVL (r.return_st, '0') = '0'
                                 AND NVL (i.return_st, '0') = '0'
                            ---Add by Musha on 10.08.2017
                         THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           adj_prem,
                        (CASE
                            WHEN NVL (r.status, '0') = '0'
                                 AND NVL (r.return_st, '0') = '0'
                            THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           unadj_prem,
                        /*DECODE (NVL (r.return_st, '0'),
                                '1', i.due_instl_prem,
                                0
                               )*/
                        ---Musha on 10.08.2017 and the bellow part
                        (CASE
                            WHEN NVL (r.return_st, '0') = '1'
                            THEN
                               i.due_instl_prem
                            WHEN NVL (r.return_st, '0') = '0'
                                 AND i.return_st = '1'
                            THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           return_prem
                 INTO   v_adjusted_by,
                        v_adjustment_date,
                        v_req_amount,
                        v_coll_amount,
                        v_adv_status,
                        v_adjusted_method,
                        v_receipt_no,
                        v_receipt_date,
                        v_adj_slip_no,
                        v_no_of_instl,
                        v_tot_premium_amt,
                        v_adj_prem_amt,
                        v_unadj_prem_amt,
                        v_return_prem_amt
                 FROM   acc_receivables r
                WHERE   r.pgid = i.pgid --AND r.status = '1'   ---Musha on 17-11-2014 due to show all collection record
                                       AND r.receive_id = i.proposer_pk;

               IF v_no_of_instl > 0
               THEN
                  v_coll_amount := ROUND (v_coll_amount / v_no_of_instl, 2);
                  v_tot_premium_amt :=
                     ROUND (v_tot_premium_amt / v_no_of_instl, 2);
               END IF;

               --IF v_req_amount > v_coll_amount THEN   -----Musha on 17-11-2014 due to show all collection record
               /*FOR k
                              IN (SELECT      ap.active_office_cd
                                           || '-'
                                           || TO_CHAR (ap.receive_date, 'RR')
                                           || '-'
                                           || NVL(ap.media_no, ap.coll_sl_no)      --ap.coll_sl_no
                                              partial_receipt_no,
                                           NVL(ap.media_dt, ap.receive_date) partial_receipt_dt,
                                           ap.COLL_AMOUNT par_coll_amount
                                    FROM   acc_partial_receivables ap,
                                           acc_partial_receivables_ref rf
                                   WHERE       ap.pgid = i.pgid
                                           AND ap.receive_id = rf.receive_id
                                           AND rf.receive_id_ref = i.proposer_pk)
                              LOOP
                                 v_partial_receipt_no :=
                                    v_partial_receipt_no || k.partial_receipt_no || ', ';

                                 v_all_par_coll_amount := v_all_par_coll_amount ||k.par_coll_amount || ', ';     ---Add by Musha on 17-11-2014
                                 v_all_par_receipt_date    := v_all_par_receipt_date ||TO_CHAR(k.partial_receipt_dt, 'DD/MM/RRRR') || ', ';     ---Add by Musha on 18-11-2014
                              END LOOP;*/
               ---Musha on 25-11-2014
               v_partial_receipt_no := RTRIM (v_partial_receipt_no, ', ');
               v_all_par_coll_amount := RTRIM (v_all_par_coll_amount, ', ');
               v_receipt_no := v_receipt_no || ', ' || v_partial_receipt_no;
               v_receipt_no := RTRIM (v_receipt_no, ', ');
               v_all_coll_amount :=
                  v_coll_amount || ', ' || v_all_par_coll_amount;
               ---Add by Musha on 17-11-2014
               v_all_coll_amount := RTRIM (v_all_coll_amount, ', ');
               ---Add by Musha on 17-11-2014
               v_all_receipt_date :=
                     TO_CHAR (v_receipt_date, 'DD/MM/RRRR')
                  || ', '
                  || v_all_par_receipt_date;     ---Add by Musha on 18-11-2014
               v_all_receipt_date := RTRIM (v_all_receipt_date, ', ');

               ---Add by Musha on 18-11-2014

               --END IF;
               /*  IF v_adv_status = '1' AND i.proposed_status = '1'
                 THEN
                    v_ledger_info.adjustment_date := i.next_due_dt;
                 --v_receipt_date ;
                 ELSIF v_adv_status = '1' AND i.proposed_status = '7'
                 THEN
                    v_ledger_info.adjustment_date := NULL;
                 ELSE
                    v_ledger_info.adjustment_date := v_adjustment_date;
                 END IF;*/
               IF v_adv_status = '1' AND i.proposed_status = '7'
               THEN
                  v_ledger_info.adjustment_date := NULL;
               ELSE
                  v_ledger_info.adjustment_date := v_adjustment_date;
               END IF;

               v_ledger_info.adjusted_by := v_adjusted_by;
               v_ledger_info.adjusted_method := v_adjusted_method;
               v_ledger_info.receipt_no := v_receipt_no;
               v_ledger_info.coll_amount := v_all_coll_amount;
               v_ledger_info.inst_coll_amount := v_all_coll_amount;
               ---Add by Musha on 17-11-2014
               v_ledger_info.adj_slip_no := v_adj_slip_no;
               ---Add by Musha on 18-11-2014
               v_ledger_info.receipt_dt := v_all_receipt_date;
               ---Add by Musha on 18-11-2014
               ---v_ledger_info.coll_tot_prem_amt  := v_tot_premium_amt; ---Add by Musha on 27-11-2014
               v_ledger_info.coll_tot_prem_amt := i.due_instl_prem;
               ---Add by Musha on 27-11-2014

               /*Add this by Musha on 09-08-2015*/
               v_ledger_info.adjusted_amt := v_adj_prem_amt;
               v_ledger_info.unadj_prem_amt := v_unadj_prem_amt;
               v_ledger_info.return_prem_amt := v_return_prem_amt;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_ledger_info.adjusted_by := NULL;
                  v_ledger_info.adjusted_method := NULL;
                  v_ledger_info.receipt_no := NULL;
            END;
         ELSIF i.alt_st = '1' AND i.next_due_dt > i.comm_date
         THEN
            BEGIN
               SELECT   r.adjusted_by,
                        TRUNC (r.adjustment_date) adjustment_date,
                        (r.late_fee - r.latefee_waiver + r.tot_premium_amt)
                           req_amount,
                        r.coll_amount,
                        r.adv_status,
                        DECODE (
                           NVL (i.return_st, '0'),
                           --Musha on 10.08.2017 NVL (r.return_st, '0')
                           '1',
                           DECODE (NVL (r.return_st, '0'),
                                   '1', 'Return',
                                   'System'),
                           DECODE (
                              r.status,
                              '1',
                              DECODE (NVL (r.man_adjusted, '0'),
                                      '1', 'Manual',
                                      'System'),
                              'Un-Adjusted'
                           )
                        )
                           adjusted_method,
                        fun_prem_coll_receipt_no (r.partner_code,
                                                  r.partner_transid,
                                                  r.active_office_cd,
                                                  r.receive_date,
                                                  r.coll_slip_no,
                                                  r.coll_sl_no)
                           receipt_no,
                        NVL (r.coll_slip_rec_dt, r.receive_date) receipt_dt,
                        r.adj_slip_no,
                        (r.installment_no_to - installment_no_from + 1)
                           no_of_instl,
                        r.tot_premium_amt,
                        (CASE
                            WHEN     NVL (r.status, '0') = '1'
                                 AND NVL (r.return_st, '0') = '0'
                                 AND NVL (i.return_st, '0') = '0'
                            ---Add by Musha on 10.08.2017
                         THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           adj_prem,
                        (CASE
                            WHEN NVL (r.status, '0') = '0'
                                 AND NVL (r.return_st, '0') = '0'
                            THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           unadj_prem,
                        (CASE
                            WHEN NVL (r.return_st, '0') = '1'
                            THEN
                               i.due_instl_prem
                            WHEN NVL (r.return_st, '0') = '0'
                                 AND i.return_st = '1'
                            THEN
                               i.due_instl_prem
                            ELSE
                               0
                         END)
                           return_prem
                 INTO   v_adjusted_by,
                        v_adjustment_date,
                        v_req_amount,
                        v_coll_amount,
                        v_adv_status,
                        v_adjusted_method,
                        v_receipt_no,
                        v_receipt_date,
                        v_adj_slip_no,
                        v_no_of_instl,
                        v_tot_premium_amt,
                        v_adj_prem_amt,
                        v_unadj_prem_amt,
                        v_return_prem_amt
                 FROM   acc_receivables r
                WHERE   r.pgid = i.pgid AND r.receive_id = i.proposer_pk;

               IF v_no_of_instl > 0
               THEN
                  v_coll_amount := ROUND (v_coll_amount / v_no_of_instl, 2);
                  v_tot_premium_amt :=
                     ROUND (v_tot_premium_amt / v_no_of_instl, 2);
               END IF;

               v_partial_receipt_no := RTRIM (v_partial_receipt_no, ', ');
               v_all_par_coll_amount := RTRIM (v_all_par_coll_amount, ', ');
               v_receipt_no := v_receipt_no || ', ' || v_partial_receipt_no;
               v_receipt_no := RTRIM (v_receipt_no, ', ');
               v_all_coll_amount :=
                  v_coll_amount || ', ' || v_all_par_coll_amount;
               v_all_coll_amount := RTRIM (v_all_coll_amount, ', ');
               v_all_receipt_date :=
                     TO_CHAR (v_receipt_date, 'DD/MM/RRRR')
                  || ', '
                  || v_all_par_receipt_date;
               v_all_receipt_date := RTRIM (v_all_receipt_date, ', ');

               /* IF v_adv_status = '1' AND i.proposed_status = '1'
                THEN
                   v_ledger_info.adjustment_date := i.next_due_dt;
                ELSIF v_adv_status = '1' AND i.proposed_status = '7'
                THEN
                   v_ledger_info.adjustment_date := NULL;
                ELSE
                   v_ledger_info.adjustment_date := v_adjustment_date;
                END IF;*/
               IF v_adv_status = '1' AND i.proposed_status = '7'
               THEN
                  v_ledger_info.adjustment_date := NULL;
               ELSE
                  v_ledger_info.adjustment_date := v_adjustment_date;
               END IF;

               v_ledger_info.adjusted_by := v_adjusted_by;
               v_ledger_info.adjusted_method := v_adjusted_method;
               v_ledger_info.receipt_no := v_receipt_no;
               v_ledger_info.coll_amount := v_all_coll_amount;
               v_ledger_info.inst_coll_amount := v_all_coll_amount;
               v_ledger_info.adj_slip_no := v_adj_slip_no;
               v_ledger_info.receipt_dt := v_all_receipt_date;
               v_ledger_info.coll_tot_prem_amt := i.due_instl_prem;
               v_ledger_info.adjusted_amt := v_adj_prem_amt;
               v_ledger_info.unadj_prem_amt := v_unadj_prem_amt;
               v_ledger_info.return_prem_amt := v_return_prem_amt;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_ledger_info.adjusted_by := NULL;
                  v_ledger_info.adjusted_method := NULL;
                  v_ledger_info.receipt_no := NULL;
            END;
         END IF;

         PIPE ROW (v_ledger_info);
      END LOOP;

      RETURN;
   END fun_policy_ledger_info;

   /************Musha on 28-02-2015************/
   FUNCTION fun_policy_prem_coll_info (
      p_pgid               ins_p_proposal.pgid%TYPE,
      p_office_cd          hrm_office.office_cd%TYPE,
      p_descendant_flag    VARCHAR2
   )
      RETURN tp_policy_prem_coll_tab
      PIPELINED
   AS
      v_policy_prem_coll   tp_policy_prem_coll_rec;
   BEGIN
      FOR i
      IN (SELECT   fun_ins_pgid_to_policy_no (s.pgid) policy_no,
                   (SELECT   party_name
                      FROM   ins_p_personal
                     WHERE   pgid = s.pgid AND party_cd = '02' AND sl_no = 1)
                      payor_nm,
                   (SELECT   party_name
                      FROM   ins_p_personal
                     WHERE   pgid = s.pgid AND party_cd = '03' AND sl_no = 1)
                      assured_nm,
                   (SELECT   t_address
                      FROM   ins_p_address a, ins_p_personal n
                     WHERE       a.pgid = s.pgid
                             AND a.pgid = n.pgid
                             AND a.party_cd = '02'
                             AND n.party_cd = '02'
                             AND a.party_id = n.party_id
                             AND n.sl_no = 1)
                      address,
                   s.comm_date,
                   s.risk_date,
                   s.product_cd,
                   s.term,
                   s.sum_assured,
                   DECODE (s.pay_mode_cd,
                           '01',
                           'Yearly',
                           '02',
                           'Half-yearly',
                           '03',
                           'Quarterly',
                           '04',
                           'Monthly',
                           '05',
                           'Single')
                      pay_mode,
                   DECODE (s.option_cd,
                           '1',
                           'A',
                           '2',
                           'B',
                           '3',
                           'C')
                      option_nm,
                   s.installment_premium,
                   s.maturity_date,
                   s.last_paid_date,
                   s.policy_status,
                   y.due_cat,
                   y.receive_date,
                   TO_CHAR (y.received_by) received_by,
                   y.collection_type,
                   y.mode_tp,
                   y.receive_mode,
                   y.coll_slip_no,
                   y.coll_amount,
                   y.coll_slip_rec_dt,
                   y.status,
                   y.due_dt_from,
                   y.due_dt_to,
                   y.tot_premium_amt,
                   y.late_fee,
                   y.tot_required_amt,
                   y.i_usr,
                   y.receipt_no
            FROM   ins_p_summery s,
                   (SELECT   'Proposal' due_cat,
                             a.receive_date,
                             a.received_by,
                             a.collection_type,
                             (CASE
                                 WHEN a.mode_tp = '1' THEN 'On-Line'
                                 WHEN a.mode_tp = '2' THEN 'Off-Line'
                                 ELSE NULL
                              END)
                                mode_tp,
                             (CASE
                                 WHEN a.receive_mode = '1' THEN 'Cash'
                                 WHEN a.receive_mode = '2' THEN 'Cheque'
                                 ELSE 'Others'
                              END)
                                receive_mode,
                             a.coll_slip_no,
                             a.coll_amount,
                             s.pgid,
                             a.coll_slip_rec_dt,
                             DECODE (a.status, '1', 'Adjusted', 'Unadjusted')
                                status,
                             s.comm_date due_dt_from,
                             s.comm_date due_dt_to,
                             s.installment_premium tot_premium_amt,
                             0 late_fee,
                             s.installment_premium tot_required_amt,
                             a.i_usr,
                                a.active_office_cd
                             || '-'
                             || TO_CHAR (a.receive_date, 'RR')
                             || '-'
                             || a.coll_sl_no
                                receipt_no
                      FROM   acc_advance_receivables a, ins_p_summery s
                     WHERE   (p_pgid IS NULL
                              OR (p_pgid IS NOT NULL
                                  AND a.proposal_no =
                                        fun_ins_pgid_to_proposal_no (p_pgid)))
                             AND a.rec_status = '1'
                             AND a.proposal_no =
                                   fun_ins_pgid_to_proposal_no (s.pgid)
                             AND ( (NVL (p_descendant_flag, '0') = '0'
                                    AND a.office_code =
                                          NVL (p_office_cd, a.office_code))
                                  OR (NVL (p_descendant_flag, '0') = '1'
                                      AND a.office_code IN
                                               (    SELECT   o.office_cd
                                                      FROM   hrm_office_setup o
                                                START WITH   o.office_cd =
                                                                p_office_cd
                                                CONNECT BY   PRIOR o.office_cd =
                                                                o.control_office_cd)))
                    UNION ALL
                    SELECT   'Full' due_cat,
                             r.receive_date,
                             r.received_by,
                             r.collection_type,
                             (CASE
                                 WHEN r.mode_tp = '1' THEN 'On-Line'
                                 WHEN r.mode_tp = '2' THEN 'Off-Line'
                                 ELSE NULL
                              END)
                                mode_tp,
                             (CASE
                                 WHEN r.receive_mode = '1' THEN 'Cash'
                                 WHEN r.receive_mode = '2' THEN 'Cheque'
                                 ELSE 'Others'
                              END)
                                receive_mode,
                             r.coll_slip_no,
                             r.coll_amount,
                             r.pgid,
                             r.coll_slip_rec_dt,
                             DECODE (r.status, '1', 'Adjusted', 'Unadjusted')
                                status,
                             r.due_dt_from,
                             r.due_dt_to,
                             r.tot_premium_amt,
                             (NVL (r.late_fee, 0) - NVL (r.latefee_waiver, 0))
                                late_fee,
                             (r.tot_premium_amt
                              + (NVL (r.late_fee, 0)
                                 - NVL (r.latefee_waiver, 0)))
                                tot_required_amt,
                             r.i_usr,
                                r.active_office_cd
                             || '-'
                             || TO_CHAR (r.receive_date, 'RR')
                             || '-'
                             || r.coll_sl_no
                                receipt_no
                      FROM   acc_receivables r
                     WHERE   r.pgid = NVL (p_pgid, r.pgid)
                             AND r.rec_status = '1'
                             AND ( (NVL (p_descendant_flag, '0') = '0'
                                    AND r.office_code =
                                          NVL (p_office_cd, r.office_code))
                                  OR (NVL (p_descendant_flag, '0') = '1'
                                      AND r.office_code IN
                                               (    SELECT   o.office_cd
                                                      FROM   hrm_office_setup o
                                                START WITH   o.office_cd =
                                                                p_office_cd
                                                CONNECT BY   PRIOR o.office_cd =
                                                                o.control_office_cd)))
                    UNION ALL
                    SELECT   'Partial' due_cat,
                             p.receive_date,
                             p.received_by,
                             p.coll_media,
                             (CASE
                                 WHEN p.mode_tp = '1' THEN 'On-Line'
                                 WHEN p.mode_tp = '2' THEN 'Off-Line'
                                 ELSE NULL
                              END)
                                mode_tp,
                             (CASE
                                 WHEN p.coll_type = '1' THEN 'Cash'
                                 WHEN p.coll_type = '2' THEN 'Cheque'
                                 ELSE 'Others'
                              END)
                                receive_mode,
                             p.media_no coll_slip_no,
                             p.coll_amount,
                             p.pgid,
                             p.media_dt coll_slip_rec_dt,
                             DECODE (p.status, '1', 'Adjusted', 'Unadjusted')
                                status,
                             p.due_date_from,
                             p.due_date_to,
                             p.req_premium_amt,
                             (NVL (p.late_fee, 0) - NVL (p.latefee_waiver, 0))
                                late_fee,
                             p.tot_required_amt,
                             p.i_usr,
                                p.active_office_cd
                             || '-'
                             || TO_CHAR (p.receive_date, 'RR')
                             || '-'
                             || p.coll_sl_no
                                receipt_no
                      FROM   acc_partial_receivables p
                     WHERE   p.pgid = NVL (p_pgid, p.pgid)
                             AND p.rec_status = '1'
                             AND ( (NVL (p_descendant_flag, '0') = '0'
                                    AND p.office_code =
                                          NVL (p_office_cd, p.office_code))
                                  OR (NVL (p_descendant_flag, '0') = '1'
                                      AND p.office_code IN
                                               (    SELECT   o.office_cd
                                                      FROM   hrm_office_setup o
                                                START WITH   o.office_cd =
                                                                p_office_cd
                                                CONNECT BY   PRIOR o.office_cd =
                                                                o.control_office_cd))))
                   y
           WHERE   s.pgid = y.pgid)
      LOOP
         v_policy_prem_coll.payor_nm := i.payor_nm;
         v_policy_prem_coll.assured_nm := i.assured_nm;
         v_policy_prem_coll.address := i.address;
         v_policy_prem_coll.comm_date := i.comm_date;
         v_policy_prem_coll.risk_date := i.risk_date;
         v_policy_prem_coll.product_cd := i.product_cd;
         v_policy_prem_coll.term := i.term;
         v_policy_prem_coll.sum_assured := i.sum_assured;
         v_policy_prem_coll.pay_mode := i.pay_mode;
         v_policy_prem_coll.option_nm := i.option_nm;
         v_policy_prem_coll.installment_premium := i.installment_premium;
         v_policy_prem_coll.maturity_date := i.maturity_date;
         v_policy_prem_coll.last_paid_date := i.last_paid_date;
         v_policy_prem_coll.policy_status := i.policy_status;
         v_policy_prem_coll.due_cat := i.due_cat;
         v_policy_prem_coll.receive_date := i.receive_date;
         v_policy_prem_coll.received_by := i.received_by;
         v_policy_prem_coll.collection_type := i.collection_type;
         v_policy_prem_coll.mode_tp := i.mode_tp;
         v_policy_prem_coll.receive_mode := i.receive_mode;
         v_policy_prem_coll.coll_slip_no := i.coll_slip_no;
         v_policy_prem_coll.coll_amount := i.coll_amount;
         v_policy_prem_coll.coll_slip_rec_dt := i.coll_slip_rec_dt;
         v_policy_prem_coll.status := i.status;
         v_policy_prem_coll.due_dt_from := i.due_dt_from;
         v_policy_prem_coll.due_dt_to := i.due_dt_to;
         v_policy_prem_coll.tot_premium_amt := i.tot_premium_amt;
         v_policy_prem_coll.late_fee := i.late_fee;
         v_policy_prem_coll.tot_required_amt := i.tot_required_amt;
         v_policy_prem_coll.i_usr := i.i_usr;
         v_policy_prem_coll.receipt_no := i.receipt_no;
         PIPE ROW (v_policy_prem_coll);
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         RAISE;
   END;

   FUNCTION fun_unadj_policy_info (
      p_office_cd          hrm_office.office_cd%TYPE,
      p_descendant_flag    VARCHAR2,
      p_mode_tp            acc_receivables.mode_tp%TYPE,
      p_unadj_cause        VARCHAR2,
      p_start_dt           DATE,
      p_end_dt             DATE
   )
      RETURN tp_unadj_policy_tab
      PIPELINED
   AS
      v_unadj_policy   tp_unadj_policy_rec;
   BEGIN
      FOR i
      IN (SELECT      r.active_office_cd
                   || '-'
                   || TO_CHAR (r.receive_date, 'RR')
                   || '-'
                   || r.coll_sl_no
                      receipt_no,
                   r.receive_date,
                   fun_ins_pgid_to_policy_no (r.pgid) policy_no,
                   r.collection_type,
                   r.coll_slip_no,
                   r.coll_slip_rec_dt,
                   (CASE
                       WHEN r.receive_mode = '1' THEN 'Cash'
                       WHEN r.receive_mode = '2' THEN 'Cheque'
                       ELSE 'Others'
                    END)
                      receive_mode,
                   r.due_dt_from,
                   r.due_dt_to,
                   r.tot_premium_amt,
                   (NVL (r.late_fee, 0) - NVL (r.latefee_waiver, 0)) late_fee,
                   (r.tot_premium_amt
                    + (NVL (r.late_fee, 0) - NVL (r.latefee_waiver, 0)))
                      tot_required_amt,
                   r.coll_amount,
                   (r.tot_premium_amt
                    + (NVL (r.late_fee, 0) - NVL (r.latefee_waiver, 0)))
                   - r.coll_amount
                      adv_due_amount
            FROM   acc_receivables r
           WHERE       r.rec_status = '1'
                   AND r.status = '0'
                   AND r.receipt_status = '0'
                   AND r.mode_tp = NVL (p_mode_tp, r.mode_tp)
                   AND r.receive_date BETWEEN p_start_dt AND p_end_dt
                   AND ( (NVL (p_descendant_flag, '0') = '0'
                          AND r.active_office_cd =
                                NVL (p_office_cd, r.active_office_cd))
                        OR (NVL (p_descendant_flag, '0') = '1'
                            AND r.active_office_cd IN
                                     (    SELECT   o.office_cd
                                            FROM   hrm_office_setup o
                                      START WITH   o.office_cd = p_office_cd
                                      CONNECT BY   PRIOR o.office_cd =
                                                      o.control_office_cd))))
      LOOP
         v_unadj_policy.receipt_no := i.receipt_no;
         v_unadj_policy.receive_date := i.receive_date;
         v_unadj_policy.policy_no := i.policy_no;
         v_unadj_policy.collection_type := i.collection_type;
         v_unadj_policy.coll_slip_no := i.coll_slip_no;
         v_unadj_policy.coll_slip_rec_dt := i.coll_slip_rec_dt;
         v_unadj_policy.receive_mode := i.receive_mode;
         v_unadj_policy.due_dt_from := i.due_dt_from;
         v_unadj_policy.due_dt_to := i.due_dt_to;
         v_unadj_policy.tot_premium_amt := i.tot_premium_amt;
         v_unadj_policy.late_fee := i.late_fee;
         v_unadj_policy.tot_required_amt := i.tot_required_amt;
         v_unadj_policy.coll_amount := i.coll_amount;
         v_unadj_policy.adv_due_amount := i.adv_due_amount;
      END LOOP;
   END fun_unadj_policy_info;

   FUNCTION fun_payment_receipt (
      p_pgid             ins_p_proposal.pgid%TYPE,
      p_clm_cause_cd     clm_claim_cause.clm_cause_cd%TYPE,
      p_start_dt         DATE,
      p_end_dt           DATE,
      p_descendant       VARCHAR2,
      p_office_cd        hrm_office.office_cd%TYPE,
      p_payment_type     clm_payment_type.pay_type_cd%TYPE,
      p_policy_tp_cd     ins_policy_type.policy_tp_cd%TYPE,
      p_report_tp        VARCHAR2,
      /*p_report_tp = 01 Claim Payment Receipt
                                                 02 Policy Loan Payment Receipt
                                                 03 Surrender Payment Receipt
                                                 04 Pension commutation
                                              */
      p_appl_sl_no       VARCHAR2,
      p_whrcls           VARCHAR2 DEFAULT '1=1' ,
      p_report_option    VARCHAR2 DEFAULT 0
   )
      RETURN payment_receipt_tab
      PIPELINED
   /******************************************************************************
      NAME:       fun_payment_receipt
      PURPOSE:    Payment Receipt For Claim Payment, Policy Loan and Surrender Module

      REVISIONS:
      Ver         Date           Created By                   Description
      ---------  ------------   -----------------------      ------------------------------------
        1.0      28-MAY-2015     MD. Zahid Hasan              p_report_tp = 01 For claim;
                                                                            02 For pension commutation claim
                                                                            03 For Fund requisition
      Change History :
      Ver         Date           Changed By                   Description
      ---------  ------------    ----------------            -------------------------------------
      1.1

   *******************************************************************************/
   IS
      v_payment_receipt      payment_receipt_rec;
      v_sb_instlno           VARCHAR2 (3);

      TYPE cur_tp IS REF CURSOR;

      v_cur                  cur_tp;
      ---------------------------
      v_due_prem_amt         NUMBER (12, 2) := 0;
      v_due_prem_late_fee    NUMBER (12, 2) := 0;
      v_paid_prem_late_fee   NUMBER (12, 2) := 0;

      CURSOR cur_claim
      IS
         SELECT   p.payable_no,
                  p.cheque_issued_dt,
                  (SELECT   party_name
                     FROM   ins_p_personal
                    WHERE       pgid = p.pgid
                            AND party_cd = p.ben_party_cd
                            AND sl_no = 1)
                     party_name,
                  p.pgid,
                  fun_ins_pgid_to_policy_no (p.pgid) policy_no,
                  s.risk_date,
                  p.product_cd || '-' || s.term product_term,
                  s.last_paid_date,
                  s.next_due_date,
                  s.sum_assured,
                  s.total_yearly_premium,
                  s.installment_premium * s.last_paid_inst_no
                     total_deposit_prem,
                    NVL (p.other_ded_amt, 0)
                  + NVL (p.loan_ded_amt, 0)
                  + NVL (p.loan_interest, 0)
                  + NVL (p.source_tax, 0)
                     cf_total_due,
                    NVL (p.net_payable_amt, 0)
                  - NVL (p.other_ded_amt, 0)
                  + NVL (p.loan_ded_amt, 0)
                  + NVL (p.loan_interest, 0)
                  + NVL (p.source_tax, 0)
                     cf_total_payable_amt,
                  f_in_word(  NVL (p.other_ded_amt, 0)
                            + NVL (p.loan_ded_amt, 0)
                            + NVL (p.loan_interest, 0)
                            + NVL (p.source_tax, 0))
                     cf_in_word_due,
                  f_in_word (p.net_payable_amt) cf_in_word,
                  (SELECT   product_nm
                     FROM   ins_product
                    WHERE   product_cd = p.product_cd)
                     product_nm,
                  p.net_payable_amt net_payable_amt,
                  p.suspense_amt,
                  p.anf_premium_amt,
                  (CASE
                      WHEN p.clm_cause_cd = '02' AND p.clm_detl_cd = '02'
                      THEN
                         0
                      ELSE
                         NVL (p.prem_due_late_fee, 0)
                   END)
                     prem_due_late_fee,
                  p.anf_late_fee,
                  TRUNC (p.i_dt) issue_dt,
                  s.servicing_off office_code,
                  p.i_usr prepared_by,
                  (NVL (p.other_ded_amt, 0) + NVL (p.alt_due_amount, 0))
                     other_ded_amt,
                  p.source_tax,
                  p.gross_payable_amt,
                  p.bonus_payable,
                  p.payment_dt,
                  s.installment_premium,
                  (SELECT   p_address_1 || ' ,' || p_address_2
                     FROM   ins_p_address
                    WHERE   pgid = p.pgid AND party_cd = p.ben_party_cd)
                     address,
                  p.clm_cause_cd,
                  p.clm_detl_cd,
                  rep_f_bank (p.bank_cd) bank_nm,
                  rep_f_branch (p.branch_cd) branch_nm,
                  p.bank_acc_no,
                  p.bank_address,
                  (NVL (p.gross_payable_amt, 0)
                   - (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0)))
                     gross_without_anf,
                  (  NVL (p.gross_payable_amt, 0)
                   + NVL (p.bonus_payable, 0)
                   + NVL (p.suspense_amt, 0)
                   + NVL (p.unadj_coll_amt, 0)
                   - (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0)))
                     tot_payable,
                  p.loan_ded_amt,
                  p.loan_interest,
                  (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0))
                     tot_anf_loan,
                  s.maturity_date
           FROM   clm_claim_payable_gen p,
                  ins_p_summery s,
                  (  SELECT   n.pgid,
                              n.payable_no,
                              SUM (n.loan_amt) loan_amt,
                              SUM (n.interest_amt) loan_interest_amt
                       FROM   clm_adjust_loan n
                   GROUP BY   n.pgid, n.payable_no) l
          WHERE       p.pgid = NVL (p_pgid, p.pgid)
                  AND p.pgid = s.pgid
                  AND p.pgid = l.pgid(+)
                  AND p.payable_no = l.payable_no(+)
                  AND p.clm_cause_cd = NVL (p_clm_cause_cd, p.clm_cause_cd)
                  AND fun_ins_policy_type_cd (s.product_cd) <> '02'
                  --Musha on 09-11-2015 due to for pension policy query is below
                  AND p.payment_dt BETWEEN NVL (p_start_dt, p.payment_dt)
                                       AND  NVL (p_end_dt, p.payment_dt)
                  AND ( (NVL (p_descendant, 'N') = 'N'
                         AND s.servicing_off =
                               NVL (p_office_cd, s.servicing_off))
                       OR (NVL (p_descendant, 'N') = 'Y'
                           AND EXISTS
                                 (    SELECT   f.office_cd
                                        FROM   hrm_office_setup f
                                       WHERE   f.office_cd = s.servicing_off
                                  START WITH   f.office_cd =
                                                  NVL (p_office_cd,
                                                       f.office_cd)
                                  CONNECT BY   PRIOR f.office_cd =
                                                  f.control_office_cd)))
                  AND (NVL (p_payment_type, '00') = '00'
                       OR EXISTS
                            (SELECT   1
                               FROM   clm_payable_calc_detl d
                              WHERE   d.pay_type_cd = p_payment_type
                                      AND d.payable_no = p.payable_no))
                  AND NVL (p.payment_status, 'N') = 'N'
                  AND NVL (p.approved_flag, 'N') = 'N'
                  AND fun_clm_appl_req (p.pgid,
                                        p.product_cd,
                                        p.clm_cause_cd,
                                        p.clm_detl_cd,
                                        p.ben_party_cd) IN (0, 2, 4)
                  /* AND p.product_cd IN (
                              SELECT product_cd
                                FROM ins_product
                               WHERE policy_tp_cd =
                                                   NVL (p_policy_tp_cd, policy_tp_cd))*/
                  AND fun_locked_policy_auth (p.pgid) = '1'
         /*AND (p_report_option = '0'
                 OR (    p_report_option = '1'
                     AND (   NOT EXISTS (
                                      SELECT 1
                                        FROM acc_cheque_print_info t
                                       WHERE t.pgid = p.pgid
                                             AND t.pk_ref = p.payable_no
                                             AND t.print_doc_tp = '1')
                          OR EXISTS (
                                SELECT 1
                                  FROM clm_privilege_emp e, clm_privilege p
                                 WHERE e.prv_cd = p.prv_cd
                                   AND p.auth_cat_cd = '17'
                                   AND UPPER (e.db_user) = UPPER (USER))
                         )
                    )
                )*/
         --ORDER BY p.payable_no
         UNION ALL                    --Musha on 09-11-2015 for pension policy
           SELECT   MAX (p.payable_no) payable_no,
                    MAX (p.cheque_issued_dt) cheque_issued_dt,
                    (SELECT   party_name
                       FROM   ins_p_personal
                      WHERE       pgid = p.pgid
                              AND party_cd = p.ben_party_cd
                              AND sl_no = 1)
                       party_name,
                    p.pgid,
                    fun_ins_pgid_to_policy_no (p.pgid) policy_no,
                    s.risk_date,
                    p.product_cd || '-' || s.term product_term,
                    s.last_paid_date,
                    s.next_due_date,
                    s.sum_assured,
                    s.total_yearly_premium,
                    s.installment_premium * s.last_paid_inst_no
                       total_deposit_prem,
                    SUM(  NVL (p.other_ded_amt, 0)
                        + NVL (p.loan_ded_amt, 0)
                        + NVL (p.loan_interest, 0)
                        + NVL (p.source_tax, 0))
                       cf_total_due,
                    SUM(  NVL (p.net_payable_amt, 0)
                        - NVL (p.other_ded_amt, 0)
                        + NVL (p.loan_ded_amt, 0)
                        + NVL (p.loan_interest, 0)
                        + NVL (p.source_tax, 0))
                       cf_total_payable_amt,
                    f_in_word(SUM(  NVL (p.other_ded_amt, 0)
                                  + NVL (p.loan_ded_amt, 0)
                                  + NVL (p.loan_interest, 0)
                                  + NVL (p.source_tax, 0)))
                       cf_in_word_due,
                    f_in_word (SUM (p.net_payable_amt)) cf_in_word,
                    (SELECT   product_nm
                       FROM   ins_product
                      WHERE   product_cd = p.product_cd)
                       product_nm,
                    SUM (p.net_payable_amt) net_payable_amt,
                    SUM (p.suspense_amt) suspense_amt,
                    SUM (p.anf_premium_amt) anf_premium_amt,
                    SUM( (CASE
                             WHEN p.clm_cause_cd = '02'
                                  AND p.clm_detl_cd = '02'
                             THEN
                                0
                             ELSE
                                NVL (p.prem_due_late_fee, 0)
                          END))
                       prem_due_late_fee,
                    SUM (p.anf_late_fee) anf_late_fee,
                    MAX (TRUNC (p.i_dt)) issue_dt,
                    s.servicing_off office_code,
                    MAX (p.i_usr) prepared_by,
                    SUM (p.other_ded_amt) other_ded_amt,
                    SUM (p.source_tax) source_tax,
                    SUM (p.gross_payable_amt) gross_payable_amt,
                    SUM (p.bonus_payable) bonus_payable,
                    MAX (p.payment_dt) payment_dt,
                    s.installment_premium,
                    (SELECT   p_address_1 || ' ,' || p_address_2
                       FROM   ins_p_address
                      WHERE   pgid = p.pgid AND party_cd = p.ben_party_cd)
                       address,
                    p.clm_cause_cd,
                    p.clm_detl_cd,
                    rep_f_bank (p.bank_cd) bank_nm,
                    rep_f_branch (p.branch_cd) branch_nm,
                    p.bank_acc_no,
                    p.bank_address,
                    SUM( (NVL (p.gross_payable_amt, 0)
                          - (NVL (p.anf_premium_amt, 0)
                             + NVL (p.anf_late_fee, 0))))
                       gross_without_anf,
                    SUM( (  NVL (p.gross_payable_amt, 0)
                          + NVL (p.bonus_payable, 0)
                          + NVL (p.suspense_amt, 0)
                          + NVL (p.unadj_coll_amt, 0)
                          - (NVL (p.anf_premium_amt, 0)
                             + NVL (p.anf_late_fee, 0))))
                       tot_payable,
                    SUM (p.loan_ded_amt) loan_ded_amt,
                    SUM (p.loan_interest) loan_interest,
                    SUM (
                       (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0))
                    )
                       tot_anf_loan,
                    s.maturity_date
             FROM   clm_claim_payable_gen p,
                    ins_p_summery s,
                    (  SELECT   n.pgid,
                                n.payable_no,
                                SUM (n.loan_amt) loan_amt,
                                SUM (n.interest_amt) loan_interest_amt
                         FROM   clm_adjust_loan n
                     GROUP BY   n.pgid, n.payable_no) l
            WHERE       p.pgid = NVL (p_pgid, p.pgid)
                    AND p.pgid = s.pgid
                    AND p.pgid = l.pgid(+)
                    AND p.payable_no = l.payable_no(+)
                    AND p.clm_cause_cd = NVL (p_clm_cause_cd, p.clm_cause_cd)
                    AND (fun_ins_policy_type_cd (s.product_cd) = '02'
                         OR (p.clm_cause_cd = '01'
                             AND fun_ins_policy_type_cd (s.product_cd) = '03'))
                    AND p.payment_dt BETWEEN NVL (p_start_dt, p.payment_dt)
                                         AND  NVL (p_end_dt, p.payment_dt)
                    AND ( (NVL (p_descendant, 'N') = 'N'
                           AND s.servicing_off =
                                 NVL (p_office_cd, s.servicing_off))
                         OR (NVL (p_descendant, 'N') = 'Y'
                             AND EXISTS
                                   (    SELECT   f.office_cd
                                          FROM   hrm_office_setup f
                                         WHERE   f.office_cd = s.servicing_off
                                    START WITH   f.office_cd =
                                                    NVL (p_office_cd,
                                                         f.office_cd)
                                    CONNECT BY   PRIOR f.office_cd =
                                                    f.control_office_cd)))
                    AND (NVL (p_payment_type, '00') = '00'
                         OR EXISTS
                              (SELECT   1
                                 FROM   clm_payable_calc_detl d
                                WHERE   d.pay_type_cd = p_payment_type
                                        AND d.payable_no = p.payable_no))
                    AND NVL (p.payment_status, 'N') = 'N'
                    AND NVL (p.approved_flag, 'N') = 'N'
                    AND fun_clm_appl_req (p.pgid,
                                          p.product_cd,
                                          p.clm_cause_cd,
                                          p.clm_detl_cd,
                                          '02') IN (0, 2, 4)
                    AND p.product_cd IN
                             (SELECT   product_cd
                                FROM   ins_product
                               WHERE   policy_tp_cd =
                                          NVL (p_policy_tp_cd, policy_tp_cd))
                    AND fun_locked_policy_auth (p.pgid) = '1'
         GROUP BY   p.pgid,
                    p.ben_party_cd,
                    s.risk_date,
                    p.product_cd,
                    s.term,
                    s.last_paid_date,
                    s.next_due_date,
                    s.sum_assured,
                    s.total_yearly_premium,
                    s.installment_premium,
                    s.last_paid_inst_no,
                    p.product_cd,
                    s.servicing_off,
                    s.installment_premium,
                    p.clm_cause_cd,
                    p.clm_detl_cd,
                    p.bank_cd,
                    p.branch_cd,
                    p.bank_acc_no,
                    p.bank_address,
                    s.maturity_date /*UNION ALL
                                                                  SELECT   NULL payable_no,
                                                                           NULL cheque_issued_dt,
                                                                           (SELECT   party_name
                                                                              FROM   ins_p_personal
                                                                             WHERE   pgid = c.pgid AND party_cd = '04' AND sl_no = 1)
                                                                              party_name,
                                                                           c.pgid,
                                                                           fun_ins_pgid_to_policy_no (c.pgid) policy_no,
                                                                           s.risk_date,
                                                                           s.product_cd || '-' || s.term product_term,
                                                                           s.last_paid_date,
                                                                           s.next_due_date,
                                                                           s.sum_assured,
                                                                           s.total_yearly_premium,
                                                                           s.installment_premium * s.last_paid_inst_no
                                                                              total_deposit_prem,
                                                                           0 cf_total_due,
                                                                           c.net_pay_amt cf_total_payable_amt,
                                                                           f_in_word (c.net_pay_amt) cf_in_word_due,
                                                                           f_in_word (c.net_pay_amt) cf_in_word,
                                                                           (SELECT   product_nm
                                                                              FROM   ins_product
                                                                             WHERE   product_cd = s.product_cd)
                                                                              product_nm,
                                                                           c.net_pay_amt net_payable_amt,
                                                                           s.suspense_amt,
                                                                           0 anf_premium_amt,
                                                                           0 prem_due_late_fee,
                                                                           0 anf_late_fee,
                                                                           TRUNC (c.i_dt) issue_dt,
                                                                           s.servicing_off office_code,
                                                                           c.i_usr prepared_by,
                                                                           0 other_ded_amt,
                                                                           0 source_tax,
                                                                           c.net_pay_amt gross_payable_amt,
                                                                           NVL (c.pay_bonus, 0) bonus_payable,
                                                                           NULL payment_dt,
                                                                           s.installment_premium,
                                                                           (SELECT   p_address_1 || ' ,' || p_address_2
                                                                              FROM   ins_p_address
                                                                             WHERE   pgid = c.pgid AND party_cd = '04')
                                                                              address,
                                                                           '02' clm_cause_cd,
                                                                           '01' clm_detl_cd,
                                                                           rep_f_bank (c.client_bank_cd) bank_nm,
                                                                           rep_f_branch (c.client_br_cd) branch_nm,
                                                                           c.client_acc_no bank_acc_no,
                                                                           NULL bank_address,
                                                                           c.net_pay_amt gross_without_anf,
                                                                           c.net_pay_amt tot_payable,
                                                                           0 loan_ded_amt,
                                                                           0 loan_interest,
                                                                           0 tot_anf_loan,
                                                                           s.maturity_date
                                                                    FROM   clm_exgratia_claim c, ins_p_summery s
                                                                   WHERE   c.pgid = NVL (p_pgid, c.pgid) AND c.pgid = s.pgid*/
                                   /*AND (p_report_option = '0'
                                                                                                       OR (    p_report_option = '1'
                                                                                                           AND (   NOT EXISTS (
                                                                                                                            SELECT 1
                                                                                                                              FROM acc_cheque_print_info t
                                                                                                                             WHERE t.pgid = c.pgid
                                                                                                                                   AND t.pk_ref = c.intimation_no
                                                                                                                                   AND t.print_doc_tp = '1')
                                                                                                                OR EXISTS (
                                                                                                                      SELECT 1
                                                                                                                        FROM clm_privilege_emp e, clm_privilege p
                                                                                                                       WHERE e.prv_cd = p.prv_cd
                                                                                                                         AND p.auth_cat_cd = '17'
                                                                                                                         AND UPPER (e.db_user) = UPPER (USER))
                                                                                                               )
                                                                                                          )
                                                                                                      )*/
                                   /*AND c.approved_dt BETWEEN NVL (p_start_dt, c.approved_dt)
                                                         AND NVL (p_end_dt, c.approved_dt)
                                   AND (   (    NVL (p_descendant, 'N') = 'N'
                                            AND s.servicing_off = NVL (p_office_cd, s.servicing_off)
                                           )
                                        OR (    NVL (p_descendant, 'N') = 'Y'
                                            AND EXISTS (
                                                       SELECT     f.office_cd
                                                             FROM hrm_office_setup f
                                                            WHERE f.office_cd = s.servicing_off
                                                       START WITH f.office_cd = NVL (p_office_cd, f.office_cd)
                                                       CONNECT BY PRIOR f.office_cd = f.control_office_cd)
                                           )
                                       )*/
   ;

      CURSOR cur_commut
      IS
         SELECT   p.app_sl,
                  p.cheque_dt,
                  (SELECT   party_name
                     FROM   ins_p_personal
                    WHERE   pgid = p.pgid AND party_cd = '03' AND sl_no = 1)
                     party_name,
                  p.pgid,
                  fun_ins_pgid_to_policy_no (p.pgid) policy_no,
                  s.risk_date,
                  p.product_cd || '-' || s.term product_term,
                  s.last_paid_date,
                  s.next_due_date,
                  s.sum_assured,
                  s.total_yearly_premium,
                  s.installment_premium * s.last_paid_inst_no
                     total_deposit_prem,
                    NVL (p.loan_ded_amt, 0)
                  + NVL (p.loan_interest, 0)
                  + NVL (p.anf_premium_amt, 0)
                  + NVL (anf_late_fee, 0)
                     cf_total_due,
                  ( (NVL (p.commutation_amt, 0) + NVL (p.suspense_amt, 0))
                   - (  NVL (p.loan_ded_amt, 0)
                      + NVL (p.loan_interest, 0)
                      + NVL (p.anf_premium_amt, 0)
                      + NVL (anf_late_fee, 0)))
                     cf_total_payable_amt,
                  f_in_word (
                     NVL (p.loan_ded_amt, 0) + NVL (p.loan_interest, 0)
                  )
                     cf_in_word_due,
                  f_in_word (p.commutation_amt) cf_in_word,
                  (SELECT   product_nm
                     FROM   ins_product
                    WHERE   product_cd = p.product_cd)
                     product_nm,
                  p.commutation_amt net_payable_amt,
                  p.suspense_amt,
                  p.anf_premium_amt,
                  NULL prem_due_late_fee,
                  p.anf_late_fee,
                  TRUNC (p.i_dt) issue_dt,
                  s.servicing_off office_code,
                  p.i_usr prepared_by,
                  NULL other_ded_amt,
                  NULL source_tax,
                  NULL gross_payable_amt,
                  NULL bonus_payable,
                  NULL payment_dt,
                  s.installment_premium,
                  (SELECT   p_address_1 || ' ,' || p_address_2
                     FROM   ins_p_address
                    WHERE   pgid = p.pgid AND party_cd = '03')
                     address,
                  NULL clm_cause_cd,
                  NULL clm_detl_cd,
                  rep_f_bank (p.bank_cd) bank_nm,
                  rep_f_branch (p.branch_cd) branch_nm,
                  p.bank_acc_no,
                  NULL bank_address,
                  (NVL (p.commutation_amt, 0)
                   - (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0)))
                     gross_without_anf,
                  (  NVL (p.commutation_amt, 0)
                   + NVL (p.suspense_amt, 0)
                   - (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0)))
                     tot_payable,
                  p.loan_ded_amt,
                  p.loan_interest,
                  (NVL (p.anf_premium_amt, 0) + NVL (p.anf_late_fee, 0))
                     tot_anf_loan,
                  s.maturity_date
           FROM   clm_commutation_info p, ins_p_summery s
          WHERE   p.pgid = NVL (p_pgid, p.pgid) AND p.pgid = s.pgid
                  AND p.commutation_dt BETWEEN NVL (p_start_dt,
                                                    p.commutation_dt)
                                           AND  NVL (p_end_dt,
                                                     p.commutation_dt)
                  AND ( (NVL (p_descendant, 'N') = 'N'
                         AND s.servicing_off =
                               NVL (p_office_cd, s.servicing_off))
                       OR (NVL (p_descendant, 'N') = 'Y'
                           AND EXISTS
                                 (    SELECT   f.office_cd
                                        FROM   hrm_office_setup f
                                       WHERE   f.office_cd = s.servicing_off
                                  START WITH   f.office_cd =
                                                  NVL (p_office_cd,
                                                       f.office_cd)
                                  CONNECT BY   PRIOR f.office_cd =
                                                  f.control_office_cd)))
                  AND NVL (p.payment_status, 'N') = 'N'
                  AND NVL (approve_flag, 'N') = 'N'
                  AND fun_locked_policy_auth (p.pgid) = '1';

      CURSOR cur_loan
      IS
           SELECT   a.pgid,
                    a.sl_no,
                    fun_ins_pgid_to_policy_no (a.pgid) policy_no,
                    a.servicing_off,
                    a.party_id,
                    a.sum_assured,
                    c.i_usr prepared_by,
                    c.checked_by,
                    c.approved_amount,
                    a.party_cd,
                    f_party_name (a.party_id, a.party_cd) party_name,
                    (SELECT   p_address_1 || ' ,' || p_address_2
                       FROM   ins_p_address
                      WHERE       pgid = a.pgid
                              AND party_cd = a.party_cd
                              AND party_id = a.party_id)
                       address,
                    s.risk_date,
                    c.product_cd || '-' || c.policy_term product_term,
                    c.last_paid_date,
                    s.installment_premium,
                    s.maturity_date,
                    s.last_paid_inst_no,
                    (s.installment_premium * s.last_paid_inst_no)
                       tot_paid_premium,
                    s.suspense_amt,
                    a.appl_dt,
                    f_in_word (c.approved_amount) amount_in_word,
                    s.installment_premium * s.last_paid_inst_no
                       total_deposit_prem,
                    c.approved_amount - NVL (c.service_charge, 0)
                       net_payble_amount,
                    c.service_charge,
                    rep_f_bank (ca.bank_cd) bank_nm,
                    rep_f_branch (ca.br_cd) branch_nm,
                    ca.account_no,
                    ca.address cl_address
             FROM   pol_loan_application a,
                    pol_loan_calculation c,
                    ins_p_summery s,
                    clm_client_account ca
            WHERE   a.appl_sl_no = NVL (p_appl_sl_no, a.appl_sl_no)
                    AND c.approved_st = '1'
                    AND ( (NVL (p_descendant, 'N') = 'N'
                           AND a.servicing_off =
                                 NVL (p_office_cd, a.servicing_off))
                         OR (NVL (p_descendant, 'N') = 'Y'
                             AND EXISTS
                                   (    SELECT   f.office_cd
                                          FROM   hrm_office_setup f
                                         WHERE   f.office_cd = a.servicing_off
                                    START WITH   f.office_cd =
                                                    NVL (p_office_cd,
                                                         f.office_cd)
                                    CONNECT BY   PRIOR f.office_cd =
                                                    f.control_office_cd)))
                    AND a.appl_dt BETWEEN NVL (p_start_dt, a.appl_dt)
                                      AND  NVL (p_end_dt, a.appl_dt)
                    AND a.pgid = c.pgid
                    AND a.sl_no = c.sl_no
                    AND a.pgid(+) = s.pgid
                    AND c.pgid(+) = a.pgid
                    AND a.pgid = ca.pgid(+)
                    AND a.party_id = ca.party_id(+)
                    AND a.party_cd = ca.party_cd(+)
         /*AND (p_report_option = '0'
               OR (    p_report_option = '1'
                   AND (   NOT EXISTS (
                                    SELECT 1
                                      FROM acc_cheque_print_info t
                                     WHERE t.pgid = c.pgid
                                           AND t.pk_ref = c.sl_no
                                           AND t.print_doc_tp = '1')
                        OR EXISTS (
                              SELECT 1
                                FROM clm_privilege_emp e, clm_privilege p
                               WHERE e.prv_cd = p.prv_cd
                                 AND p.auth_cat_cd = '17'
                                 AND UPPER (e.db_user) = UPPER (USER))
                       )
                  )
              )*/
         ORDER BY   a.appl_sl_no;

      CURSOR cur_sur
      IS
           SELECT   fun_ins_pgid_to_policy_no (c.pgid) policy_no,
                    c.pgid,
                    r.p_address_1,
                    c.application_dt,
                    c.i_usr prepared_by,
                    c.product_cd || '-' || c.policy_term product_term,
                    c.last_paid_date,
                    s.maturity_date,
                    c.sum_assured,
                    s.last_paid_inst_no,
                    s.installment_premium,
                    c.surrender_value,
                    (s.last_paid_inst_no * s.installment_premium)
                       paidup_primium,
                    c.paid_up_value,
                    s.suspense_amt,
                    c.pay_bonus_amt,
                    p.party_name,
                    (c.surrender_value + s.suspense_amt + c.pay_bonus_amt)
                       total,
                    l.loan_amount,
                    l.int_amount,
                    (l.loan_amount + l.int_amount) total_loan,
                    c.approved_by,
                    a.party_cd,
                    s.risk_date,
                    (SELECT   p_address_1 || ' ,' || p_address_2
                       FROM   ins_p_address
                      WHERE       pgid = a.pgid
                              AND party_cd = a.party_cd
                              AND party_id = a.party_id)
                       address,
                    s.installment_premium * s.last_paid_inst_no
                       total_deposit_prem,
                    c.approved_amount,
                    f_in_word (c.approved_amount) amount_in_word,
                    c.tax_deduction,
                    rep_f_bank (ca.bank_cd) bank_nm,
                    rep_f_branch (ca.br_cd) branch_nm,
                    ca.account_no,
                    ca.address cl_address,
                    a.appl_sl_no,
                    c.i_dt issue_dt
             FROM   sur_sur_calculation c,
                    sur_sur_application a,
                    sur_loan_cal_prev_loan l,
                    ins_p_summery s,
                    ins_p_personal p,
                    ins_p_address r,
                    clm_client_account ca
            WHERE       a.appl_sl_no = NVL (p_appl_sl_no, a.appl_sl_no)
                    AND a.pgid = NVL (p_pgid, c.pgid)
                    AND c.pgid = a.pgid
                    AND c.appl_sl_no = a.appl_sl_no
                    AND c.pgid = l.pgid(+)
                    AND c.appl_sl_no = l.appl_sl_no(+)
                    AND c.pgid = s.pgid
                    AND a.pgid = p.pgid
                    AND a.party_cd = p.party_cd
                    AND a.party_id = p.party_id
                    AND a.pgid = r.pgid(+)
                    AND a.party_cd = r.party_cd(+)
                    AND a.party_id = r.party_id(+)
                    AND ( (NVL (p_descendant, 'N') = 'N'
                           AND a.servicing_off =
                                 NVL (p_office_cd, a.servicing_off))
                         OR (NVL (p_descendant, 'N') = 'Y'
                             AND EXISTS
                                   (    SELECT   f.office_cd
                                          FROM   hrm_office_setup f
                                         WHERE   f.office_cd = a.servicing_off
                                    START WITH   f.office_cd =
                                                    NVL (p_office_cd,
                                                         f.office_cd)
                                    CONNECT BY   PRIOR f.office_cd =
                                                    f.control_office_cd)))
                    AND a.appl_dt BETWEEN NVL (p_start_dt, a.appl_dt)
                                      AND  NVL (p_end_dt, a.appl_dt)
                    AND a.pgid = ca.pgid(+)
                    AND a.party_id = ca.party_id(+)
                    AND a.party_cd = ca.party_cd(+)
         /*AND (p_report_option = '0'
               OR (    p_report_option = '1'
                   AND (   NOT EXISTS (
                                    SELECT 1
                                      FROM acc_cheque_print_info t
                                     WHERE t.pgid = c.pgid
                                           AND t.pk_ref = c.appl_sl_no
                                           AND t.print_doc_tp = '1')
                        OR EXISTS (
                              SELECT 1
                                FROM clm_privilege_emp e, clm_privilege p
                               WHERE e.prv_cd = p.prv_cd
                                 AND p.auth_cat_cd = '17'
                                 AND UPPER (e.db_user) = UPPER (USER))
                       )
                  )
              )*/
         ORDER BY   a.appl_sl_no;

      rec_cur_claim          cur_claim%ROWTYPE;
      rec_cur_loan           cur_loan%ROWTYPE;
      rec_cur_sur            cur_sur%ROWTYPE;
      rec_cur_commut         cur_commut%ROWTYPE;
   BEGIN
      IF p_report_tp = '01'
      THEN
         OPEN cur_claim;

         LOOP
            FETCH cur_claim INTO   rec_cur_claim;

            EXIT WHEN cur_claim%NOTFOUND;
            v_payment_receipt.party_name := rec_cur_claim.party_name;
            v_payment_receipt.pgid := rec_cur_claim.pgid;
            v_payment_receipt.policy_no := rec_cur_claim.policy_no;
            v_payment_receipt.risk_date := rec_cur_claim.risk_date;
            v_payment_receipt.product_term := rec_cur_claim.product_term;
            v_payment_receipt.last_paid_date := rec_cur_claim.last_paid_date;
            v_payment_receipt.next_due_date := rec_cur_claim.next_due_date;
            v_payment_receipt.sum_assured := rec_cur_claim.sum_assured;
            v_payment_receipt.total_yearly_premium :=
               rec_cur_claim.total_yearly_premium;
            v_payment_receipt.total_deposit_prem :=
               rec_cur_claim.total_deposit_prem;
            v_payment_receipt.product_nm := rec_cur_claim.product_nm;
            v_payment_receipt.net_payable_amt := rec_cur_claim.net_payable_amt;
            v_payment_receipt.anf_premium_amt := rec_cur_claim.anf_premium_amt;
            v_payment_receipt.anf_late_fee := rec_cur_claim.anf_late_fee;
            v_payment_receipt.issue_dt := rec_cur_claim.issue_dt;
            v_payment_receipt.office_code := rec_cur_claim.office_code;
            v_payment_receipt.prepared_by := rec_cur_claim.prepared_by;
            v_payment_receipt.source_tax := rec_cur_claim.source_tax;
            v_payment_receipt.gross_payable_amt :=
               rec_cur_claim.gross_payable_amt;
            v_payment_receipt.bonus_payable := rec_cur_claim.bonus_payable;
            v_payment_receipt.payment_dt := rec_cur_claim.payment_dt;
            v_payment_receipt.installment_premium :=
               rec_cur_claim.installment_premium;
            v_payment_receipt.address := rec_cur_claim.address;
            v_payment_receipt.clm_cause_cd := rec_cur_claim.clm_cause_cd;
            v_payment_receipt.clm_detl_cd := rec_cur_claim.clm_detl_cd;
            v_payment_receipt.bank_nm := rec_cur_claim.bank_nm;
            v_payment_receipt.branch_nm := rec_cur_claim.branch_nm;
            v_payment_receipt.bank_acc_no := rec_cur_claim.bank_acc_no;
            v_payment_receipt.bank_address := rec_cur_claim.bank_address;
            v_payment_receipt.gross_without_anf :=
               rec_cur_claim.gross_without_anf;
            v_payment_receipt.tot_payable := rec_cur_claim.tot_payable;
            v_payment_receipt.loan_ded_amt := rec_cur_claim.loan_ded_amt;
            v_payment_receipt.loan_interest := rec_cur_claim.loan_interest;
            v_payment_receipt.tot_anf_loan := rec_cur_claim.tot_anf_loan;
            v_payment_receipt.total_due := rec_cur_claim.cf_total_due;
            v_payment_receipt.in_word_total_due :=
               rec_cur_claim.cf_in_word_due;
            v_payment_receipt.total_payable_amt :=
               rec_cur_claim.cf_total_payable_amt;
            v_payment_receipt.in_word_total_payable_amt :=
               rec_cur_claim.cf_in_word;

            BEGIN
               SELECT   LTRIM (
                           TO_CHAR (
                              TO_DATE (
                                 LPAD (instlno, 2, 0)
                                 || TO_CHAR (SYSDATE, 'MMRRRR'),
                                 'DDMMRRRR'
                              ),
                              'DDTH'
                           ),
                           0
                        )
                 INTO   v_sb_instlno
                 FROM   (SELECT   sb_dt, ROWNUM instlno
                           FROM   (  SELECT   DISTINCT
                                              ADD_MONTHS (s.comm_date,
                                                          c.payment_year * 12)
                                                 sb_dt
                                       FROM   ins_p_summery s,
                                              clm_product_claim_detl c
                                      WHERE   s.pgid = rec_cur_claim.pgid
                                              AND s.product_cd = c.product_cd
                                              AND c.clm_cause_cd =
                                                    rec_cur_claim.clm_cause_cd
                                              AND c.clm_cause_cd = '02'
                                              AND c.clm_detl_cd =
                                                    rec_cur_claim.clm_detl_cd
                                              AND c.clm_detl_cd = '02'
                                              AND c.payment_type = '02'
                                              AND s.term BETWEEN c.policy_term_fr
                                                             AND  c.policy_term_to
                                   ORDER BY   sb_dt))
                WHERE   sb_dt = rec_cur_claim.payment_dt;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_sb_instlno := NULL;
            END;

            BEGIN
               SELECT   NVL (c.unadj_coll_amt, 0)
                        + rec_cur_claim.suspense_amt,
                        c.due_prem_amt,
                        c.due_prem_late_fee,
                        c.paid_prem_late_fee_after_disc
                 INTO   v_payment_receipt.suspense_amt,
                        v_due_prem_amt,
                        v_due_prem_late_fee,
                        v_paid_prem_late_fee
                 FROM   clm_claim_appl c
                WHERE       c.pgid = rec_cur_claim.pgid
                        AND c.clm_cause_cd = rec_cur_claim.clm_cause_cd
                        AND c.clm_detl_cd = rec_cur_claim.clm_detl_cd
                        AND c.payable_dt = rec_cur_claim.payment_dt;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_payment_receipt.suspense_amt := rec_cur_claim.suspense_amt;
                  v_due_prem_amt := 0;
                  v_due_prem_late_fee := 0;
            END;

            v_payment_receipt.sb_instlno := v_sb_instlno;
            v_payment_receipt.maturity_date := rec_cur_claim.maturity_date;
            -----------
            v_payment_receipt.prem_due_late_fee :=
               NVL (v_due_prem_late_fee, 0) + NVL (v_paid_prem_late_fee, 0);
            v_payment_receipt.other_ded_amt :=
               NVL (rec_cur_claim.other_ded_amt, 0) + NVL (v_due_prem_amt, 0);

            ---Cheque for no of print--
            ---Add this by Musha on 08.10.2015--
            BEGIN
               SELECT   DECODE (print_cnt, '1', 'Duplicate', NULL)
                 INTO   v_payment_receipt.cheque_print_st
                 FROM   (SELECT   DECODE (
                                     p_report_option,
                                     '0',
                                     '0',
                                     DECODE (
                                        (SELECT   COUNT ( * )
                                           FROM   acc_cheque_print_info t
                                          WHERE   t.pgid = rec_cur_claim.pgid
                                                  AND t.pk_ref =
                                                        rec_cur_claim.payable_no
                                                  AND t.print_doc_tp = '1'),
                                        0,
                                        '0',
                                        DECODE (
                                           (SELECT   COUNT ( * )
                                              FROM   clm_privilege_emp e,
                                                     clm_privilege p
                                             WHERE   e.prv_cd = p.prv_cd
                                                     AND p.auth_cat_cd = '17'
                                                     AND UPPER (e.db_user) =
                                                           UPPER (USER)),
                                           0,
                                           '1',
                                           '0'
                                        )
                                     )
                                  )
                                     print_cnt
                           FROM   DUAL);
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_payment_receipt.cheque_print_st := NULL;
            END;

            PIPE ROW (v_payment_receipt);
         END LOOP;

         CLOSE cur_claim;
      ELSIF p_report_tp = '02'
      THEN
         OPEN cur_loan;

         LOOP
            FETCH cur_loan INTO   rec_cur_loan;

            EXIT WHEN cur_loan%NOTFOUND;
            v_payment_receipt.party_name := rec_cur_loan.party_name;
            v_payment_receipt.pgid := rec_cur_loan.pgid;
            v_payment_receipt.policy_no := rec_cur_loan.policy_no;
            v_payment_receipt.risk_date := rec_cur_loan.risk_date;
            v_payment_receipt.product_term := rec_cur_loan.product_term;
            v_payment_receipt.last_paid_date := rec_cur_loan.last_paid_date;
            v_payment_receipt.next_due_date := NULL;
            v_payment_receipt.sum_assured := rec_cur_loan.sum_assured;
            v_payment_receipt.total_yearly_premium := NULL;
            v_payment_receipt.total_deposit_prem :=
               rec_cur_loan.total_deposit_prem;
            v_payment_receipt.product_nm := NULL;
            v_payment_receipt.net_payable_amt :=
               rec_cur_loan.net_payble_amount;
            v_payment_receipt.suspense_amt := rec_cur_loan.suspense_amt;
            v_payment_receipt.anf_premium_amt := NULL;
            v_payment_receipt.prem_due_late_fee := NULL;
            v_payment_receipt.anf_late_fee := NULL;
            v_payment_receipt.issue_dt := NULL;
            v_payment_receipt.office_code := NULL;
            v_payment_receipt.prepared_by := rec_cur_loan.prepared_by;
            v_payment_receipt.other_ded_amt := NULL;
            v_payment_receipt.source_tax := NULL;
            v_payment_receipt.gross_payable_amt := NULL;
            v_payment_receipt.bonus_payable := NULL;
            v_payment_receipt.payment_dt := rec_cur_loan.appl_dt;
            v_payment_receipt.installment_premium :=
               rec_cur_loan.installment_premium;
            v_payment_receipt.address := rec_cur_loan.address;
            v_payment_receipt.clm_cause_cd := NULL;
            v_payment_receipt.clm_detl_cd := NULL;
            v_payment_receipt.bank_nm := rec_cur_loan.bank_nm;
            v_payment_receipt.branch_nm := rec_cur_loan.branch_nm;
            v_payment_receipt.bank_acc_no := rec_cur_loan.account_no;
            v_payment_receipt.bank_address := rec_cur_loan.cl_address;
            v_payment_receipt.gross_without_anf :=
               rec_cur_loan.approved_amount;
            v_payment_receipt.tot_payable := NULL;
            v_payment_receipt.loan_ded_amt := NULL;
            v_payment_receipt.loan_interest := rec_cur_loan.service_charge;
            v_payment_receipt.tot_anf_loan := NULL;
            v_payment_receipt.total_due := NULL;
            v_payment_receipt.in_word_total_due := NULL;
            v_payment_receipt.total_payable_amt :=
               rec_cur_loan.approved_amount;
            v_payment_receipt.in_word_total_payable_amt :=
               rec_cur_loan.amount_in_word;
            v_payment_receipt.maturity_date := rec_cur_loan.maturity_date;

            ---Cheque for no of print--
            ---Add this by Musha on 08.10.2015--
            BEGIN
               SELECT   DECODE (print_cnt, '1', 'Duplicate', NULL)
                 INTO   v_payment_receipt.cheque_print_st
                 FROM   (SELECT   DECODE (
                                     p_report_option,
                                     '0',
                                     '0',
                                     DECODE (
                                        (SELECT   COUNT ( * )
                                           FROM   acc_cheque_print_info t
                                          WHERE   t.pgid = rec_cur_loan.pgid
                                                  AND t.pk_ref =
                                                        rec_cur_loan.sl_no
                                                  AND t.print_doc_tp = '1'),
                                        0,
                                        '0',
                                        DECODE (
                                           (SELECT   COUNT ( * )
                                              FROM   clm_privilege_emp e,
                                                     clm_privilege p
                                             WHERE   e.prv_cd = p.prv_cd
                                                     AND p.auth_cat_cd = '17'
                                                     AND UPPER (e.db_user) =
                                                           UPPER (USER)),
                                           0,
                                           '1',
                                           '0'
                                        )
                                     )
                                  )
                                     print_cnt
                           FROM   DUAL);
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_payment_receipt.cheque_print_st := NULL;
            END;

            PIPE ROW (v_payment_receipt);
         END LOOP;

         CLOSE cur_loan;
      ELSIF p_report_tp = '03'
      THEN
         OPEN cur_sur;

         LOOP
            FETCH cur_sur INTO   rec_cur_sur;

            EXIT WHEN cur_sur%NOTFOUND;
            v_payment_receipt.party_name := rec_cur_sur.party_name;
            v_payment_receipt.pgid := rec_cur_sur.pgid;
            v_payment_receipt.policy_no := rec_cur_sur.policy_no;
            v_payment_receipt.risk_date := rec_cur_sur.risk_date;
            v_payment_receipt.product_term := rec_cur_sur.product_term;
            v_payment_receipt.last_paid_date := rec_cur_sur.last_paid_date;
            v_payment_receipt.next_due_date := NULL;
            v_payment_receipt.sum_assured := rec_cur_sur.sum_assured;
            v_payment_receipt.total_yearly_premium := NULL;
            v_payment_receipt.total_deposit_prem :=
               rec_cur_sur.total_deposit_prem;
            v_payment_receipt.product_nm := NULL;
            v_payment_receipt.net_payable_amt := rec_cur_sur.approved_amount;
            v_payment_receipt.suspense_amt := rec_cur_sur.suspense_amt;
            v_payment_receipt.anf_premium_amt := NULL;
            v_payment_receipt.prem_due_late_fee := NULL;
            v_payment_receipt.anf_late_fee := NULL;
            v_payment_receipt.issue_dt := rec_cur_sur.issue_dt;
            v_payment_receipt.office_code := NULL;
            v_payment_receipt.prepared_by := rec_cur_sur.prepared_by;
            v_payment_receipt.other_ded_amt := NULL;
            v_payment_receipt.source_tax := rec_cur_sur.tax_deduction;
            v_payment_receipt.gross_payable_amt := NULL;
            v_payment_receipt.bonus_payable := rec_cur_sur.pay_bonus_amt;
            v_payment_receipt.payment_dt := rec_cur_sur.application_dt;
            v_payment_receipt.installment_premium :=
               rec_cur_sur.installment_premium;
            v_payment_receipt.address := rec_cur_sur.address;
            v_payment_receipt.clm_cause_cd := NULL;
            v_payment_receipt.clm_detl_cd := NULL;
            v_payment_receipt.bank_nm := rec_cur_sur.bank_nm;
            v_payment_receipt.branch_nm := rec_cur_sur.branch_nm;
            v_payment_receipt.bank_acc_no := rec_cur_sur.account_no;
            v_payment_receipt.bank_address := rec_cur_sur.cl_address;
            v_payment_receipt.gross_without_anf := rec_cur_sur.surrender_value;
            v_payment_receipt.tot_payable := NULL;
            v_payment_receipt.loan_ded_amt := NULL;
            v_payment_receipt.loan_interest := NULL;
            v_payment_receipt.tot_anf_loan := NULL;
            v_payment_receipt.total_due := NULL;
            v_payment_receipt.in_word_total_due := NULL;
            v_payment_receipt.total_payable_amt := rec_cur_sur.approved_amount;
            v_payment_receipt.in_word_total_payable_amt :=
               rec_cur_sur.amount_in_word;
            v_payment_receipt.maturity_date := rec_cur_sur.maturity_date;

            ---Cheque for no of print--
            ---Add this by Musha on 08.10.2015--
            BEGIN
               SELECT   DECODE (print_cnt, '1', 'Duplicate', NULL)
                 INTO   v_payment_receipt.cheque_print_st
                 FROM   (SELECT   DECODE (
                                     p_report_option,
                                     '0',
                                     '0',
                                     DECODE (
                                        (SELECT   COUNT ( * )
                                           FROM   acc_cheque_print_info t
                                          WHERE   t.pgid = rec_cur_sur.pgid
                                                  AND t.pk_ref =
                                                        rec_cur_sur.appl_sl_no
                                                  AND t.print_doc_tp = '1'),
                                        0,
                                        '0',
                                        DECODE (
                                           (SELECT   COUNT ( * )
                                              FROM   clm_privilege_emp e,
                                                     clm_privilege p
                                             WHERE   e.prv_cd = p.prv_cd
                                                     AND p.auth_cat_cd = '17'
                                                     AND UPPER (e.db_user) =
                                                           UPPER (USER)),
                                           0,
                                           '1',
                                           '0'
                                        )
                                     )
                                  )
                                     print_cnt
                           FROM   DUAL);
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_payment_receipt.cheque_print_st := NULL;
            END;

            PIPE ROW (v_payment_receipt);
         END LOOP;

         CLOSE cur_sur;
      ELSIF p_report_tp = '04'
      THEN
         OPEN cur_commut;

         LOOP
            FETCH cur_commut INTO   rec_cur_commut;

            EXIT WHEN cur_commut%NOTFOUND;
            v_payment_receipt.party_name := rec_cur_commut.party_name;
            v_payment_receipt.pgid := rec_cur_commut.pgid;
            v_payment_receipt.policy_no := rec_cur_commut.policy_no;
            v_payment_receipt.risk_date := rec_cur_commut.risk_date;
            v_payment_receipt.product_term := rec_cur_commut.product_term;
            v_payment_receipt.last_paid_date := rec_cur_commut.last_paid_date;
            v_payment_receipt.next_due_date := rec_cur_commut.next_due_date;
            v_payment_receipt.sum_assured := rec_cur_commut.sum_assured;
            v_payment_receipt.total_yearly_premium :=
               rec_cur_commut.total_yearly_premium;
            v_payment_receipt.total_deposit_prem :=
               rec_cur_commut.total_deposit_prem;
            v_payment_receipt.product_nm := rec_cur_commut.product_nm;
            v_payment_receipt.net_payable_amt :=
               rec_cur_commut.net_payable_amt;
            v_payment_receipt.anf_premium_amt :=
               rec_cur_commut.anf_premium_amt;
            v_payment_receipt.anf_late_fee := rec_cur_commut.anf_late_fee;
            v_payment_receipt.issue_dt := rec_cur_commut.issue_dt;
            v_payment_receipt.office_code := rec_cur_commut.office_code;
            v_payment_receipt.prepared_by := rec_cur_commut.prepared_by;
            v_payment_receipt.source_tax := rec_cur_commut.source_tax;
            v_payment_receipt.gross_payable_amt :=
               rec_cur_commut.gross_payable_amt;
            v_payment_receipt.bonus_payable := rec_cur_commut.bonus_payable;
            v_payment_receipt.payment_dt := rec_cur_commut.payment_dt;
            v_payment_receipt.installment_premium :=
               rec_cur_commut.installment_premium;
            v_payment_receipt.address := rec_cur_commut.address;
            v_payment_receipt.clm_cause_cd := rec_cur_commut.clm_cause_cd;
            v_payment_receipt.clm_detl_cd := rec_cur_commut.clm_detl_cd;
            v_payment_receipt.bank_nm := rec_cur_commut.bank_nm;
            v_payment_receipt.branch_nm := rec_cur_commut.branch_nm;
            v_payment_receipt.bank_acc_no := rec_cur_commut.bank_acc_no;
            v_payment_receipt.bank_address := rec_cur_commut.bank_address;
            v_payment_receipt.gross_without_anf :=
               rec_cur_commut.gross_without_anf;
            v_payment_receipt.tot_payable := rec_cur_commut.tot_payable;
            v_payment_receipt.loan_ded_amt := rec_cur_commut.loan_ded_amt;
            v_payment_receipt.loan_interest := rec_cur_commut.loan_interest;
            v_payment_receipt.tot_anf_loan := rec_cur_commut.tot_anf_loan;
            v_payment_receipt.total_due := rec_cur_commut.cf_total_due;
            v_payment_receipt.in_word_total_due :=
               rec_cur_commut.cf_in_word_due;
            v_payment_receipt.total_payable_amt :=
               rec_cur_commut.cf_total_payable_amt;
            v_payment_receipt.in_word_total_payable_amt :=
               rec_cur_commut.cf_in_word;
            v_payment_receipt.maturity_date := rec_cur_commut.maturity_date;

            ---Cheque for no of print--
            ---Add this by Musha on 08.10.2015--
            BEGIN
               SELECT   DECODE (print_cnt, '1', 'Duplicate', NULL)
                 INTO   v_payment_receipt.cheque_print_st
                 FROM   (SELECT   DECODE (
                                     p_report_option,
                                     '0',
                                     '0',
                                     DECODE (
                                        (SELECT   COUNT ( * )
                                           FROM   acc_cheque_print_info t
                                          WHERE   t.pgid =
                                                     rec_cur_commut.pgid
                                                  AND t.pk_ref =
                                                        rec_cur_commut.app_sl
                                                  AND t.print_doc_tp = '1'),
                                        0,
                                        '0',
                                        DECODE (
                                           (SELECT   COUNT ( * )
                                              FROM   clm_privilege_emp e,
                                                     clm_privilege p
                                             WHERE   e.prv_cd = p.prv_cd
                                                     AND p.auth_cat_cd = '17'
                                                     AND UPPER (e.db_user) =
                                                           UPPER (USER)),
                                           0,
                                           '1',
                                           '0'
                                        )
                                     )
                                  )
                                     print_cnt
                           FROM   DUAL);
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_payment_receipt.cheque_print_st := NULL;
            END;

            PIPE ROW (v_payment_receipt);
         END LOOP;

         CLOSE cur_commut;
      END IF;

      RETURN;
   END fun_payment_receipt;

   --Project wise collection reeport
   FUNCTION fun_proj_wise_coll (p_office_cat      VARCHAR2,
                                p_office_cd       VARCHAR2,
                                p_check           CHAR,
                                p_ins_tp_cd       NUMBER,
                                p_project_cd      NUMBER,
                                p_coll_dt_fr      DATE,
                                p_coll_dt_to      DATE,
                                p_pr_date_from    DATE,
                                p_pr_date_to      DATE)
      RETURN tp_proj_wise_coll_tab
      PIPELINED
   AS
      v_unadj_policy        tp_proj_wise_coll;
      v_partial_coll        NUMBER (12, 2);
      v_total_coll          NUMBER (12, 2);
      v_no_of_inst          NUMBER;
      v_first_prem_amount   NUMBER (12, 2) := 0;
      v_def_prem_amount     NUMBER (12, 2) := 0;
      v_sec_prem_amount     NUMBER (12, 2) := 0;
      v_ren_prem_amount     NUMBER (12, 2) := 0;

      CURSOR c_fpr_coll
      IS
           SELECT   ar.active_office_cd,
                    ap.project_cd,
                    SUM (ar.coll_amount) coll_amount
             FROM   acc_advance_receivables ar, ins_p_proposal ap
            WHERE   ar.active_office_cd IN
                          (SELECT   DISTINCT
                                    DECODE (p_check,
                                            0, x.office_cd,
                                            y.office_cd)
                             FROM   (SELECT   p_office_cd office_cd FROM DUAL)
                                    x,
                                    (    SELECT   office_cd
                                           FROM   hrm_office_setup
                                     CONNECT BY   PRIOR office_cd =
                                                     control_office_cd
                                     START WITH   office_cd =
                                                     NVL (p_office_cd,
                                                          office_cd)
                                     UNION ALL
                                     SELECT   p_office_cd office_cd FROM DUAL)
                                    y)
                    AND ( (p_coll_dt_fr IS NOT NULL
                           AND p_coll_dt_to IS NOT NULL
                           AND ar.receive_date BETWEEN p_coll_dt_fr
                                                   AND  p_coll_dt_to)
                         OR (    p_coll_dt_fr IS NULL
                             AND p_coll_dt_to IS NULL
                             AND 1 = 1))
                    AND ( (p_pr_date_from IS NOT NULL
                           AND p_pr_date_to IS NOT NULL
                           AND ar.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                       AND  p_pr_date_to)
                         OR (    p_pr_date_from IS NULL
                             AND p_pr_date_to IS NULL
                             AND 1 = 1))
                    AND ar.rec_status = '1'
                    AND ar.pgid = ap.pgid
                    AND ( (p_ins_tp_cd IS NOT NULL
                           AND ap.ins_tp_cd = p_ins_tp_cd)
                         OR (p_ins_tp_cd IS NULL AND 1 = 1))
                    AND ( (p_project_cd IS NOT NULL
                           AND ap.project_cd = p_project_cd)
                         OR (p_project_cd IS NULL AND 1 = 1))
         GROUP BY   ar.active_office_cd, ap.project_cd, ar.pgid;

      CURSOR c_oth_coll
      IS
         SELECT   r.pgid,
                  r.receive_id,
                  r.active_office_cd,
                  NVL (r.coll_amount, 0) coll_amount,
                  r.installment_no_from,
                  r.installment_no_to,
                  r.due_dt_from,
                  r.due_dt_to,
                  s.installment_premium,
                  s.pay_mode_cd,
                  s.ins_tp_cd,
                  j.project_cd
           FROM   ins.acc_receivables r,
                  ins_p_summery s,
                  ins_project_setup t,
                  ins_project j
          WHERE   r.pgid = s.pgid
                  AND r.active_office_cd IN
                           (SELECT   DISTINCT
                                     DECODE (p_check,
                                             0, x.office_cd,
                                             y.office_cd)
                              FROM   (SELECT   p_office_cd office_cd
                                        FROM   DUAL) x,
                                     (    SELECT   office_cd
                                            FROM   hrm_office_setup
                                      CONNECT BY   PRIOR office_cd =
                                                      control_office_cd
                                      START WITH   office_cd =
                                                      NVL (p_office_cd,
                                                           office_cd)
                                      UNION ALL
                                      SELECT   p_office_cd office_cd
                                        FROM   DUAL) y)
                  AND ( (p_coll_dt_fr IS NOT NULL
                         AND p_coll_dt_to IS NOT NULL
                         AND r.receive_date BETWEEN p_coll_dt_fr
                                                AND  p_coll_dt_to)
                       OR (    p_coll_dt_fr IS NULL
                           AND p_coll_dt_to IS NULL
                           AND 1 = 1))
                  AND ( (p_pr_date_from IS NOT NULL
                         AND p_pr_date_to IS NOT NULL
                         AND r.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                    AND  p_pr_date_to)
                       OR (    p_pr_date_from IS NULL
                           AND p_pr_date_to IS NULL
                           AND 1 = 1))
                  AND r.rec_status = '1'
                  AND ( (p_ins_tp_cd IS NOT NULL
                         AND s.ins_tp_cd = p_ins_tp_cd)
                       OR (p_ins_tp_cd IS NULL AND 1 = 1))
                  AND ( (p_project_cd IS NOT NULL
                         AND j.project_cd = p_project_cd)
                       OR (p_project_cd IS NULL AND 1 = 1))
                  AND s.pps_cd = t.pps_cd
                  AND t.project_cd = j.project_cd;

      rec_c_fpr_coll        c_fpr_coll%ROWTYPE;
      rec_c_oth_coll        c_oth_coll%ROWTYPE;
   BEGIN
      OPEN c_fpr_coll;

      LOOP
         FETCH c_fpr_coll INTO   rec_c_fpr_coll;

         EXIT WHEN c_fpr_coll%NOTFOUND;
         v_unadj_policy.office_cd := rec_c_fpr_coll.active_office_cd;
         v_unadj_policy.project_cd := rec_c_fpr_coll.project_cd;
         v_unadj_policy.first_prem_amt := rec_c_fpr_coll.coll_amount;
         v_unadj_policy.deffered_amt := 0;
         v_unadj_policy.second_yr_amt := 0;
         v_unadj_policy.renewal_amt := 0;
         PIPE ROW (v_unadj_policy);
      END LOOP;

      CLOSE c_fpr_coll;

      OPEN c_oth_coll;

      LOOP
         FETCH c_oth_coll INTO   rec_c_oth_coll;

         EXIT WHEN c_oth_coll%NOTFOUND;

         BEGIN
              SELECT   SUM (coll_amount)
                INTO   v_partial_coll
                FROM   acc_partial_receivables p, acc_partial_receivables_ref r
               WHERE       pgid = rec_c_oth_coll.pgid
                       AND r.receive_id_ref = rec_c_oth_coll.receive_id
                       AND p.receive_id = r.receive_id
                       AND p.rec_status = '1'
            GROUP BY   r.receive_id_ref;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_partial_coll := 0;
         END;

         v_total_coll := 0;
         v_total_coll := rec_c_oth_coll.coll_amount + v_partial_coll;
         v_no_of_inst :=
            (rec_c_oth_coll.installment_no_to
             - rec_c_oth_coll.installment_no_from)
            + 1;

         FOR i IN rec_c_oth_coll.installment_no_from .. rec_c_oth_coll.installment_no_to
         LOOP
            v_first_prem_amount := 0;
            v_def_prem_amount := 0;
            v_sec_prem_amount := 0;
            v_ren_prem_amount := 0;

            IF rec_c_oth_coll.pay_mode_cd = '01'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
                  v_def_prem_amount := 0;
               ELSIF i = 2
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '02'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i = 2
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i IN (3, 4)
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '03'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 4
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 5 AND i <= 8
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '04'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 12
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 13 AND i <= 24
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '05'
            THEN
               v_first_prem_amount :=
                  ROUND ( (v_total_coll / v_no_of_inst), 2);
               v_def_prem_amount := 0;
               v_sec_prem_amount := 0;
               v_ren_prem_amount := 0;
            END IF;

            v_unadj_policy.office_cd := rec_c_oth_coll.active_office_cd;
            v_unadj_policy.project_cd := rec_c_oth_coll.project_cd;
            v_unadj_policy.first_prem_amt := v_first_prem_amount;
            v_unadj_policy.deffered_amt := v_def_prem_amount;
            v_unadj_policy.second_yr_amt := v_sec_prem_amount;
            v_unadj_policy.renewal_amt := v_ren_prem_amount;
            PIPE ROW (v_unadj_policy);
         END LOOP;
      END LOOP;

      CLOSE c_oth_coll;

      RETURN;
   END fun_proj_wise_coll;

   --service wise collection reeport
   FUNCTION fun_service_wise_coll (p_office_cat      VARCHAR2,
                                   p_office_cd       VARCHAR2,
                                   p_check           CHAR,
                                   p_ins_tp_cd       NUMBER,
                                   p_coll_dt_fr      DATE,
                                   p_coll_dt_to      DATE,
                                   p_pr_date_from    DATE,
                                   p_pr_date_to      DATE)
      RETURN tp_service_wise_coll_tab
      PIPELINED
   AS
      v_unadj_policy        tp_service_wise_coll;
      v_partial_coll        NUMBER (12, 2);
      v_total_coll          NUMBER (12, 2);
      v_no_of_inst          NUMBER;
      v_first_prem_amount   NUMBER (12, 2) := 0;
      v_def_prem_amount     NUMBER (12, 2) := 0;
      v_sec_prem_amount     NUMBER (12, 2) := 0;
      v_ren_prem_amount     NUMBER (12, 2) := 0;

      CURSOR c_fpr_coll
      IS
           SELECT   fun_find_service_off (ar.active_office_cd) active_office_cd,
                    SUM (ar.coll_amount) coll_amount
             FROM   acc_advance_receivables ar, ins_p_proposal ap
            WHERE   ar.active_office_cd IN
                          (SELECT   DISTINCT
                                    DECODE (p_check,
                                            0, x.office_cd,
                                            y.office_cd)
                             FROM   (SELECT   p_office_cd office_cd FROM DUAL)
                                    x,
                                    (    SELECT   office_cd
                                           FROM   hrm_office_setup
                                     CONNECT BY   PRIOR office_cd =
                                                     control_office_cd
                                     START WITH   office_cd =
                                                     NVL (p_office_cd,
                                                          office_cd)
                                     UNION ALL
                                     SELECT   p_office_cd office_cd FROM DUAL)
                                    y)
                    AND ( (p_coll_dt_fr IS NOT NULL
                           AND p_coll_dt_to IS NOT NULL
                           AND ar.receive_date BETWEEN p_coll_dt_fr
                                                   AND  p_coll_dt_to)
                         OR (    p_coll_dt_fr IS NULL
                             AND p_coll_dt_to IS NULL
                             AND 1 = 1))
                    AND ( (p_pr_date_from IS NOT NULL
                           AND p_pr_date_to IS NOT NULL
                           AND ar.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                       AND  p_pr_date_to)
                         OR (    p_pr_date_from IS NULL
                             AND p_pr_date_to IS NULL
                             AND 1 = 1))
                    AND ar.rec_status = '1'
                    AND ar.pgid = ap.pgid
                    AND ( (p_ins_tp_cd IS NOT NULL
                           AND ap.ins_tp_cd = p_ins_tp_cd)
                         OR (p_ins_tp_cd IS NULL AND 1 = 1))
         GROUP BY   active_office_cd, ar.pgid;

      CURSOR c_oth_coll
      IS
         SELECT   r.pgid,
                  r.receive_id,
                  fun_find_service_off (r.active_office_cd) active_office_cd,
                  NVL (r.coll_amount, 0) coll_amount,
                  r.installment_no_from,
                  r.installment_no_to,
                  r.due_dt_from,
                  r.due_dt_to,
                  s.installment_premium,
                  s.pay_mode_cd,
                  s.ins_tp_cd
           FROM   acc_receivables r, ins_p_summery s
          WHERE   r.pgid = s.pgid
                  AND r.active_office_cd IN
                           (SELECT   DISTINCT
                                     DECODE (p_check,
                                             0, x.office_cd,
                                             y.office_cd)
                              FROM   (SELECT   p_office_cd office_cd
                                        FROM   DUAL) x,
                                     (    SELECT   office_cd
                                            FROM   hrm_office_setup
                                      CONNECT BY   PRIOR office_cd =
                                                      control_office_cd
                                      START WITH   office_cd =
                                                      NVL (p_office_cd,
                                                           office_cd)
                                      UNION ALL
                                      SELECT   p_office_cd office_cd
                                        FROM   DUAL) y)
                  AND ( (p_coll_dt_fr IS NOT NULL
                         AND p_coll_dt_to IS NOT NULL
                         AND r.receive_date BETWEEN p_coll_dt_fr
                                                AND  p_coll_dt_to)
                       OR (    p_coll_dt_fr IS NULL
                           AND p_coll_dt_to IS NULL
                           AND 1 = 1))
                  AND ( (p_pr_date_from IS NOT NULL
                         AND p_pr_date_to IS NOT NULL
                         AND r.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                    AND  p_pr_date_to)
                       OR (    p_pr_date_from IS NULL
                           AND p_pr_date_to IS NULL
                           AND 1 = 1))
                  AND r.rec_status = '1'
                  AND ( (p_ins_tp_cd IS NOT NULL
                         AND s.ins_tp_cd = p_ins_tp_cd)
                       OR (p_ins_tp_cd IS NULL AND 1 = 1));

      rec_c_fpr_coll        c_fpr_coll%ROWTYPE;
      rec_c_oth_coll        c_oth_coll%ROWTYPE;
   BEGIN
      OPEN c_fpr_coll;

      LOOP
         FETCH c_fpr_coll INTO   rec_c_fpr_coll;

         EXIT WHEN c_fpr_coll%NOTFOUND;
         v_unadj_policy.office_cd := rec_c_fpr_coll.active_office_cd;
         v_unadj_policy.first_prem_amt := rec_c_fpr_coll.coll_amount;
         v_unadj_policy.deffered_amt := 0;
         v_unadj_policy.second_yr_amt := 0;
         v_unadj_policy.renewal_amt := 0;
         PIPE ROW (v_unadj_policy);
      END LOOP;

      CLOSE c_fpr_coll;

      OPEN c_oth_coll;

      LOOP
         FETCH c_oth_coll INTO   rec_c_oth_coll;

         EXIT WHEN c_oth_coll%NOTFOUND;

         BEGIN
              SELECT   SUM (coll_amount)
                INTO   v_partial_coll
                FROM   acc_partial_receivables p, acc_partial_receivables_ref r
               WHERE       pgid = rec_c_oth_coll.pgid
                       AND r.receive_id_ref = rec_c_oth_coll.receive_id
                       AND p.receive_id = r.receive_id
                       AND p.rec_status = '1'
            GROUP BY   r.receive_id_ref;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_partial_coll := 0;
         END;

         v_total_coll := 0;
         v_total_coll := rec_c_oth_coll.coll_amount + v_partial_coll;
         v_no_of_inst :=
            (rec_c_oth_coll.installment_no_to
             - rec_c_oth_coll.installment_no_from)
            + 1;

         FOR i IN rec_c_oth_coll.installment_no_from .. rec_c_oth_coll.installment_no_to
         LOOP
            v_first_prem_amount := 0;
            v_def_prem_amount := 0;
            v_sec_prem_amount := 0;
            v_ren_prem_amount := 0;

            IF rec_c_oth_coll.pay_mode_cd = '01'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
                  v_def_prem_amount := 0;
               ELSIF i = 2
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '02'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i = 2
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i IN (3, 4)
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '03'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 4
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 5 AND i <= 8
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '04'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 12
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 13 AND i <= 24
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '05'
            THEN
               v_first_prem_amount :=
                  ROUND ( (v_total_coll / v_no_of_inst), 2);
               v_def_prem_amount := 0;
               v_sec_prem_amount := 0;
               v_ren_prem_amount := 0;
            END IF;

            v_unadj_policy.office_cd := rec_c_oth_coll.active_office_cd;
            v_unadj_policy.first_prem_amt := v_first_prem_amount;
            v_unadj_policy.deffered_amt := v_def_prem_amount;
            v_unadj_policy.second_yr_amt := v_sec_prem_amount;
            v_unadj_policy.renewal_amt := v_ren_prem_amount;
            PIPE ROW (v_unadj_policy);
         END LOOP;
      END LOOP;

      CLOSE c_oth_coll;

      RETURN;
   END fun_service_wise_coll;

   --Month wise collection reeport
   FUNCTION fun_month_wise_coll (p_office_cat      VARCHAR2,
                                 p_office_cd       VARCHAR2,
                                 p_check           CHAR,
                                 p_ins_tp_cd       NUMBER,
                                 p_coll_dt_fr      DATE,
                                 p_coll_dt_to      DATE,
                                 p_pr_date_from    DATE,
                                 p_pr_date_to      DATE)
      RETURN tp_month_wise_coll_tab
      PIPELINED
   AS
      v_unadj_policy        tp_month_wise_coll;
      v_partial_coll        NUMBER (12, 2);
      v_total_coll          NUMBER (12, 2);
      v_no_of_inst          NUMBER;
      v_first_prem_amount   NUMBER (12, 2) := 0;
      v_def_prem_amount     NUMBER (12, 2) := 0;
      v_sec_prem_amount     NUMBER (12, 2) := 0;
      v_ren_prem_amount     NUMBER (12, 2) := 0;

      CURSOR c_fpr_coll
      IS
           SELECT   ar.active_office_cd,
                    ar.receive_date,
                    SUM (ar.coll_amount) coll_amount
             FROM   acc_advance_receivables ar, ins_p_proposal ap
            WHERE   ar.active_office_cd IN
                          (SELECT   DISTINCT
                                    DECODE (p_check,
                                            0, x.office_cd,
                                            y.office_cd)
                             FROM   (SELECT   p_office_cd office_cd FROM DUAL)
                                    x,
                                    (    SELECT   office_cd
                                           FROM   hrm_office_setup
                                     CONNECT BY   PRIOR office_cd =
                                                     control_office_cd
                                     START WITH   office_cd =
                                                     NVL (p_office_cd,
                                                          office_cd)
                                     UNION ALL
                                     SELECT   p_office_cd office_cd FROM DUAL)
                                    y)
                    AND ( (p_coll_dt_fr IS NOT NULL
                           AND p_coll_dt_to IS NOT NULL
                           AND ar.receive_date BETWEEN p_coll_dt_fr
                                                   AND  p_coll_dt_to)
                         OR (    p_coll_dt_fr IS NULL
                             AND p_coll_dt_to IS NULL
                             AND 1 = 1))
                    AND ( (p_pr_date_from IS NOT NULL
                           AND p_pr_date_to IS NOT NULL
                           AND ar.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                       AND  p_pr_date_to)
                         OR (    p_pr_date_from IS NULL
                             AND p_pr_date_to IS NULL
                             AND 1 = 1))
                    AND ar.rec_status = '1'
                    AND ar.pgid = ap.pgid
                    AND ( (p_ins_tp_cd IS NOT NULL
                           AND ap.ins_tp_cd = p_ins_tp_cd)
                         OR (p_ins_tp_cd IS NULL AND 1 = 1))
         GROUP BY   ar.active_office_cd, ar.receive_date, ar.pgid;

      CURSOR c_oth_coll
      IS
         SELECT   r.pgid,
                  r.receive_id,
                  r.active_office_cd,
                  r.receive_date,
                  NVL (r.coll_amount, 0) coll_amount,
                  r.installment_no_from,
                  r.installment_no_to,
                  r.due_dt_from,
                  r.due_dt_to,
                  s.installment_premium,
                  s.pay_mode_cd,
                  s.ins_tp_cd
           FROM   acc_receivables r, ins_p_summery s
          WHERE   r.pgid = s.pgid
                  AND r.active_office_cd IN
                           (SELECT   DISTINCT
                                     DECODE (p_check,
                                             0, x.office_cd,
                                             y.office_cd)
                              FROM   (SELECT   p_office_cd office_cd
                                        FROM   DUAL) x,
                                     (    SELECT   office_cd
                                            FROM   hrm_office_setup
                                      CONNECT BY   PRIOR office_cd =
                                                      control_office_cd
                                      START WITH   office_cd =
                                                      NVL (p_office_cd,
                                                           office_cd)
                                      UNION ALL
                                      SELECT   p_office_cd office_cd
                                        FROM   DUAL) y)
                  AND ( (p_coll_dt_fr IS NOT NULL
                         AND p_coll_dt_to IS NOT NULL
                         AND r.receive_date BETWEEN p_coll_dt_fr
                                                AND  p_coll_dt_to)
                       OR (    p_coll_dt_fr IS NULL
                           AND p_coll_dt_to IS NULL
                           AND 1 = 1))
                  AND ( (p_pr_date_from IS NOT NULL
                         AND p_pr_date_to IS NOT NULL
                         AND r.coll_slip_rec_dt BETWEEN p_pr_date_from
                                                    AND  p_pr_date_to)
                       OR (    p_pr_date_from IS NULL
                           AND p_pr_date_to IS NULL
                           AND 1 = 1))
                  AND r.rec_status = '1'
                  AND ( (p_ins_tp_cd IS NOT NULL
                         AND s.ins_tp_cd = p_ins_tp_cd)
                       OR (p_ins_tp_cd IS NULL AND 1 = 1));

      rec_c_fpr_coll        c_fpr_coll%ROWTYPE;
      rec_c_oth_coll        c_oth_coll%ROWTYPE;
   BEGIN
      OPEN c_fpr_coll;

      LOOP
         FETCH c_fpr_coll INTO   rec_c_fpr_coll;

         EXIT WHEN c_fpr_coll%NOTFOUND;
         v_unadj_policy.office_cd := rec_c_fpr_coll.active_office_cd;
         v_unadj_policy.coll_date := rec_c_fpr_coll.receive_date;
         v_unadj_policy.first_prem_amt := rec_c_fpr_coll.coll_amount;
         v_unadj_policy.deffered_amt := 0;
         v_unadj_policy.second_yr_amt := 0;
         v_unadj_policy.renewal_amt := 0;
         PIPE ROW (v_unadj_policy);
      END LOOP;

      CLOSE c_fpr_coll;

      OPEN c_oth_coll;

      LOOP
         FETCH c_oth_coll INTO   rec_c_oth_coll;

         EXIT WHEN c_oth_coll%NOTFOUND;

         BEGIN
              SELECT   SUM (coll_amount)
                INTO   v_partial_coll
                FROM   acc_partial_receivables p, acc_partial_receivables_ref r
               WHERE       pgid = rec_c_oth_coll.pgid
                       AND r.receive_id_ref = rec_c_oth_coll.receive_id
                       AND p.receive_id = r.receive_id
                       AND p.rec_status = '1'
            GROUP BY   r.receive_id_ref;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_partial_coll := 0;
         END;

         v_total_coll := 0;
         v_total_coll := rec_c_oth_coll.coll_amount + v_partial_coll;
         v_no_of_inst :=
            (rec_c_oth_coll.installment_no_to
             - rec_c_oth_coll.installment_no_from)
            + 1;

         FOR i IN rec_c_oth_coll.installment_no_from .. rec_c_oth_coll.installment_no_to
         LOOP
            v_first_prem_amount := 0;
            v_def_prem_amount := 0;
            v_sec_prem_amount := 0;
            v_ren_prem_amount := 0;

            IF rec_c_oth_coll.pay_mode_cd = '01'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
                  v_def_prem_amount := 0;
               ELSIF i = 2
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '02'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i = 2
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i IN (3, 4)
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '03'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 4
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 5 AND i <= 8
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '04'
            THEN
               IF i = 1
               THEN
                  v_first_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 2 AND i <= 12
               THEN
                  v_def_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSIF i >= 13 AND i <= 24
               THEN
                  v_sec_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               ELSE
                  v_ren_prem_amount :=
                     ROUND ( (v_total_coll / v_no_of_inst), 2);
               END IF;
            ELSIF rec_c_oth_coll.pay_mode_cd = '05'
            THEN
               v_first_prem_amount :=
                  ROUND ( (v_total_coll / v_no_of_inst), 2);
               v_def_prem_amount := 0;
               v_sec_prem_amount := 0;
               v_ren_prem_amount := 0;
            END IF;

            v_unadj_policy.office_cd := rec_c_oth_coll.active_office_cd;
            v_unadj_policy.coll_date := rec_c_fpr_coll.receive_date;
            v_unadj_policy.first_prem_amt := v_first_prem_amount;
            v_unadj_policy.deffered_amt := v_def_prem_amount;
            v_unadj_policy.second_yr_amt := v_sec_prem_amount;
            v_unadj_policy.renewal_amt := v_ren_prem_amount;
            PIPE ROW (v_unadj_policy);
         END LOOP;
      END LOOP;

      CLOSE c_oth_coll;

      RETURN;
   END fun_month_wise_coll;

   FUNCTION fun_return_premium (p_pgid VARCHAR2)
      RETURN tp_return_premium_tab
      PIPELINED
   AS
      v_return_premium          tp_return_premium;
      v_rec_count               NUMBER := 1;
      v_return_amount           NUMBER (15, 2);
      v_installment_no_from     NUMBER (3);
      v_installment_no_to       NUMBER (3);
      v_due_dt_from             DATE;
      v_due_dt_to               DATE;
      v_due_installment         NUMBER (5, 2) := 0;
      v_tot_coll_amount         NUMBER (15, 2) := 0;
      v_tot_premium_amt         NUMBER (15, 2) := 0;
      v_f_installment_no_from   NUMBER (3);
      v_f_installment_no_to     NUMBER (3);
      v_f_due_dt_from           DATE;
      v_f_due_dt_to             DATE;
   BEGIN
      FOR i
      IN (  SELECT   r.pgid,
                     r.coll_amount,
                     r.installment_no_from,
                     r.installment_no_to,
                     r.due_dt_from,
                     r.due_dt_to,
                     r.tot_premium_amt,
                     s.installment_premium,
                     s.pay_mode_cd,
                     s.comm_date
              FROM   acc_receivables r, ins_p_summery s
             WHERE   r.pgid = p_pgid AND r.rec_status = '1'
                     AND NVL (r.coll_slip_rec_dt, r.receive_date) >=
                           ADD_MONTHS (s.maturity_date, -12)
                     --add by Musha on 04.10.2015
                     /*AND NVL (r.coll_slip_rec_dt, r.receive_date) >=
                            ADD_MONTHS (s.comm_date,
                                          (s.policy_installment - 1
                                          )
                                        * DECODE (s.pay_mode_cd,
                                                  '01', 12,
                                                  '02', 6,
                                                  '03', 3,
                                                  '04', 1,
                                                  12
                                                 )
                                       )*/
                     --Musha on 04.10.2015
                     AND r.installment_no_from <= s.policy_installment
                     /*AND NVL (r.coll_slip_rec_dt, r.receive_date) >
                            ADD_MONTHS (s.maturity_date,
                                        DECODE (s.pay_mode_cd,
                                                '01', -12,
                                                '02', -6,
                                                '03', -3,
                                                '04', -1,
                                                0
                                               )
                                       )*/
                     --Musha on 04.10.2015
                     AND NVL (r.coll_slip_rec_dt, r.receive_date) <
                           s.maturity_date
                     AND r.pgid = s.pgid
          ORDER BY   r.installment_no_from)
      LOOP
         --v_due_installment :=
         --                  (i.installment_no_to - i.installment_no_from) + 1;
         SELECT   ROUND (
                     ( (i.installment_no_to - i.installment_no_from) + 1)
                     / DECODE (i.pay_mode_cd,
                               '01', 1,
                               '02', 2,
                               '03', 4,
                               '04', 12,
                               1),
                     2
                  )
                  + v_due_installment
           INTO   v_due_installment
           FROM   DUAL;

         v_tot_coll_amount := v_tot_coll_amount + i.coll_amount;
         v_tot_premium_amt := v_tot_premium_amt + i.tot_premium_amt;

         IF v_rec_count = 1
         THEN
            v_f_installment_no_from := i.installment_no_from;
            v_f_installment_no_to := i.installment_no_to;
            v_f_due_dt_from := i.due_dt_from;
            v_f_due_dt_to := i.due_dt_to;

            IF v_due_installment < 2
            THEN
               v_return_amount := 0;
               v_installment_no_from := 0;
               v_installment_no_to := 0;
               v_due_dt_from := NULL;
               v_due_dt_to := NULL;
            ELSE
               IF i.coll_amount >= i.tot_premium_amt
               THEN
                  /*v_return_amount :=
                       (i.installment_no_to - i.installment_no_from
                       )
                     * i.installment_premium;*/
                  SELECT   ( (i.installment_no_to - i.installment_no_from)
                            - DECODE (i.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1))
                           * i.installment_premium
                    INTO   v_return_amount
                    FROM   DUAL;
               ELSE
                  v_return_amount := i.coll_amount - i.installment_premium;
               END IF;

               --v_installment_no_from := i.installment_no_from + 1;
               SELECT   i.installment_no_from
                        + DECODE (i.pay_mode_cd,
                                  '01', 1,
                                  '02', 2,
                                  '03', 4,
                                  '04', 12,
                                  1)
                        + 1
                 INTO   v_installment_no_from
                 FROM   DUAL;

               v_installment_no_to := i.installment_no_to;

               /*SELECT CASE
                         WHEN TO_NUMBER
                                 (TO_CHAR (ADD_MONTHS (i.due_dt_from,
                                                       DECODE (i.pay_mode_cd,
                                                               '01', 12,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1,
                                                               12
                                                              )
                                                      ),
                                           'dd'
                                          )
                                 ) = TO_NUMBER (TO_CHAR (i.comm_date, 'dd'))
                            THEN ADD_MONTHS (i.due_dt_from,
                                             DECODE (i.pay_mode_cd,
                                                     '01', 12,
                                                     '02', 6,
                                                     '03', 3,
                                                     '04', 1,
                                                     12
                                                    )
                                            )
                         ELSE TO_DATE
                                (   TO_CHAR
                                          (ADD_MONTHS (i.due_dt_from,
                                                       DECODE (i.pay_mode_cd,
                                                               '01', 12,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1,
                                                               12
                                                              )
                                                      ),
                                           'rrrrmm'
                                          )
                                 || TO_CHAR (i.comm_date, 'dd'),
                                 'rrrrmmdd'
                                )
                      END
                 INTO v_due_dt_from
                 FROM DUAL;*/
               SELECT   CASE
                           WHEN TO_NUMBER(TO_CHAR (
                                             ADD_MONTHS (i.due_dt_from, 12),
                                             'dd'
                                          )) =
                                   TO_NUMBER (TO_CHAR (i.comm_date, 'dd'))
                           THEN
                              ADD_MONTHS (i.due_dt_from, 12)
                           ELSE
                              TO_DATE (
                                 TO_CHAR (ADD_MONTHS (i.due_dt_from, 12),
                                          'rrrrmm')
                                 || TO_CHAR (i.comm_date, 'dd'),
                                 'rrrrmmdd'
                              )
                        END
                 INTO   v_due_dt_from
                 FROM   DUAL;

               v_due_dt_to := i.due_dt_to;
            END IF;
         ELSE
            IF v_installment_no_from = 0
            THEN
               IF v_due_installment < 2
               THEN
                  v_return_amount := 0;
                  v_installment_no_from := 0;
                  v_installment_no_to := 0;
                  v_due_dt_from := NULL;
                  v_due_dt_to := NULL;
               ELSE
                  IF v_tot_coll_amount >= v_tot_premium_amt
                  THEN
                     SELECT   ( (i.installment_no_to
                                 - v_f_installment_no_from) /*- DECODE (i.pay_mode_cd,
                                                                                                                                                                                  '01', 1,
                                                                                                                                                                                  '02', 2,
                                                                                                                                                                                  '03', 4,
                                                                                                                                                                                  '04', 12,
                                                                                                                                                                                  1
                                                                                                                                                                                 )*/
                                                           )
                              * i.installment_premium
                       INTO   v_return_amount
                       FROM   DUAL;
                  ELSE
                     v_return_amount := i.coll_amount - i.installment_premium;
                  END IF;

                  SELECT   v_f_installment_no_from
                           + DECODE (i.pay_mode_cd,
                                     '01', 1,
                                     '02', 2,
                                     '03', 4,
                                     '04', 12,
                                     1)
                    /*+ 1*/
                    INTO   v_installment_no_from
                    FROM   DUAL;

                  v_installment_no_to := i.installment_no_to;

                  SELECT   CASE
                              WHEN TO_NUMBER(TO_CHAR (
                                                ADD_MONTHS (v_f_due_dt_from,
                                                            12),
                                                'dd'
                                             )) =
                                      TO_NUMBER (TO_CHAR (i.comm_date, 'dd'))
                              THEN
                                 ADD_MONTHS (v_f_due_dt_from, 12)
                              ELSE
                                 TO_DATE (
                                    TO_CHAR (
                                       ADD_MONTHS (v_f_due_dt_from, 12),
                                       'rrrrmm'
                                    )
                                    || TO_CHAR (i.comm_date, 'dd'),
                                    'rrrrmmdd'
                                 )
                           END
                    INTO   v_due_dt_from
                    FROM   DUAL;

                  v_due_dt_to := i.due_dt_to;
               /*v_return_amount := v_return_amount + i.coll_amount;
               v_installment_no_from := i.installment_no_from;
               v_installment_no_to := i.installment_no_to;
               v_due_dt_from := i.due_dt_from;
               v_due_dt_to := i.due_dt_to;*/
               END IF;
            ELSE
               v_return_amount := v_return_amount + i.coll_amount;
               v_installment_no_to := i.installment_no_to;
               v_due_dt_to := i.due_dt_to;
            END IF;
         END IF;

         v_rec_count := v_rec_count + 1;
      END LOOP;

      v_return_premium.return_amount := v_return_amount;
      v_return_premium.installment_no_from := v_installment_no_from;
      v_return_premium.installment_no_to := v_installment_no_to;
      v_return_premium.due_dt_from := v_due_dt_from;
      v_return_premium.due_dt_to := v_due_dt_to;
      PIPE ROW (v_return_premium);
      RETURN;
   END fun_return_premium;

   -- 11.
   FUNCTION fun_claim_tax_sum (p_office_cd    hrm_office.office_cd%TYPE,
                               p_date_fr      DATE,
                               p_date_to      DATE)
      RETURN tp_claim_tax_sum_tab
      PIPELINED
   AS
      v_claim_tax_sum   tp_claim_tax_sum_rec;
   BEGIN
      FOR rec_c_claim_tax_sum
      IN (SELECT   a.pgid,
                   fun_ins_pgid_to_policy_no (a.pgid) policy_no,
                   a.payment_dt,
                   a.payable_amt,
                   a.bonus,
                   (a.payable_amt + a.bonus) total_payable_amt,
                   /*(s.installment_premium * s.last_paid_inst_no
                   )
                 + anf_loan deposited_premium,*/
                   (a.payable_amt + a.bonus) - (a.tax_amount / .05)
                      deposited_premium,
                   a.tax_amount,
                   ROUND (
                      (  (a.payable_amt + a.bonus)
                       - (s.installment_premium * s.last_paid_inst_no)
                       + anf_loan)
                      * .05,
                      0
                   )
                      cal_tax,
                   vouch_no,
                   control_office_cd
            FROM   ins_p_summery s,
                   (SELECT   pgid,
                             vouch_dt payment_dt,
                             gross_payable_amt
                             + NVL (
                                  (  SELECT   SUM (gross_payable_amt)
                                       FROM   clm_claim_payable_gen
                                      WHERE   pgid = g.pgid
                                              AND payable_no <> g.payable_no
                                   --AND payment_status = 'Y'
                                   GROUP BY   pgid),
                                  0
                               )
                                payable_amt,
                             NVL (bonus_payable, 0) bonus,
                             source_tax tax_amount,
                             NVL (vouch_no, vouch_no_2nd) vouch_no,
                             NVL ( (SELECT   NVL (SUM (d.ded_amt), 0)
                                      FROM   clm_adjust_other_ded d
                                     WHERE   d.pgid = g.pgid), 0)
                                anf_loan,
                             g.control_office_cd
                      FROM   clm_claim_payable_gen g
                     WHERE   NVL (source_tax, 0) > 0
                             --AND NVL (approved_flag, 'N') = 'Y'
                             AND vouch_dt BETWEEN NVL (p_date_fr, vouch_dt)
                                              AND  NVL (p_date_to, vouch_dt)
                    UNION ALL
                    SELECT   c.pgid,
                             d.disbursment_date payment_dt,
                             DECODE (TO_CHAR (paid_up_value),
                                     '0', sum_assured,
                                     paid_up_value)
                                payable_amt,
                             NVL (c.pay_bonus_amt, 0) bonus,
                             c.tax_deduction tax_amount,
                             NVL (dis_voucher, dis_voucher_2nd) vouch_no,
                             NVL ( (SELECT   NVL (SUM (d.loan_amount), 0)
                                      FROM   sur_loan_cal_prev_loan d
                                     WHERE   d.appl_sl_no = c.appl_sl_no), 0)
                                anf_loan,
                             c.control_office_cd
                      FROM   sur_sur_calculation c, sur_disburs_mst d
                     WHERE       c.appl_sl_no = d.appl_sl_no
                             AND NVL (c.tax_deduction, 0) > 0
                             AND approved_st = '3'
                             AND d.disbursment_date BETWEEN NVL (
                                                               p_date_fr,
                                                               d.disbursment_date
                                                            )
                                                        AND  NVL (
                                                                p_date_to,
                                                                d.disbursment_date
                                                             )) a
           WHERE   s.pgid = a.pgid
                   AND control_office_cd =
                         NVL (p_office_cd, control_office_cd))
      LOOP
         v_claim_tax_sum.pgid := rec_c_claim_tax_sum.pgid;
         v_claim_tax_sum.policy_no := rec_c_claim_tax_sum.policy_no;
         v_claim_tax_sum.payment_dt := rec_c_claim_tax_sum.payment_dt;
         v_claim_tax_sum.payable_amt := rec_c_claim_tax_sum.payable_amt;
         v_claim_tax_sum.bonus := rec_c_claim_tax_sum.bonus;
         v_claim_tax_sum.total_payable_amt :=
            rec_c_claim_tax_sum.total_payable_amt;
         v_claim_tax_sum.deposited_premium :=
            rec_c_claim_tax_sum.deposited_premium;
         v_claim_tax_sum.tax_amount := rec_c_claim_tax_sum.tax_amount;
         v_claim_tax_sum.cal_tax := rec_c_claim_tax_sum.cal_tax;
         v_claim_tax_sum.vouch_no := rec_c_claim_tax_sum.vouch_no;
         v_claim_tax_sum.control_office_cd :=
            rec_c_claim_tax_sum.control_office_cd;
         PIPE ROW (v_claim_tax_sum);
      END LOOP;
   END fun_claim_tax_sum;

   ---12 Premium Collection Receipt
   FUNCTION fun_premium_receipt (p_coll_type    CHAR,
                                 --Here '1'=Advance Collection,'2'=Renewal Collection,'3'Partial Collection
                                 p_pgid         VARCHAR2,
                                 p_rec_id       NUMBER,
                                 p_slno         NUMBER)
      RETURN tp_coll_rec_tab
      PIPELINED
   AS
      v_coll_rec      tp_coll_rec;
      v_proposal_no   ins_p_proposal.proposal_no%TYPE;
   BEGIN
      IF p_coll_type = '1'                --For Advance Collection Information
      THEN
         FOR i
         IN (SELECT   l.proposal_no,
                      DECODE (r.collection_type,
                              '05', r.receive_date,
                              r.coll_slip_rec_dt)
                         receive_date,
                      r.i_usr,
                      TRUNC (r.i_dt) i_dt,
                      r.active_office_cd,
                      r.receive_id,
                      r.received_by,
                      r.mode_tp,
                      fun_coll_media_type (r.collection_type) collection_type,
                      r.office_code,
                      '0' receipt_status,
                      f_agent_nm (l.agent_id) agent_nm,
                      l.agent_id,
                      fun_agent_org_setup (l.agent_id) office_nm,
                      NULL policy_status,
                      NULL pol_stat,
                      fun_ins_receive_mode (r.receive_mode) receive_mode,
                      r.coll_amount,
                      f_in_word (r.coll_amount) in_word,
                      0 avl_sus_amt,
                      fun_prem_coll_receipt_no (r.partner_code,
                                                r.partner_transid,
                                                r.active_office_cd,
                                                r.receive_date,
                                                r.coll_slip_no,
                                                r.coll_sl_no)
                         collection_no,
                      r.vouch_ref,
                      NVL (r.coll_slip_no, r.coll_sl_no) coll_slip_no,
                      NVL (r.coll_slip_rec_dt, r.receive_date)
                         coll_slip_rec_dt,
                      rep_f_emp_nm (r.received_by) collecter,
                      1 installment_no_from,
                      1 installment_no_to,
                      0 adv_due,
                      0 late_fee,
                      NVL (l.comm_dt, l.proposal_dt) comm_date,
                      NVL (l.comm_dt, l.proposal_dt) due_dt_to,
                      NVL (r.party_nm, l.pro_party_name) party_nm,
                      r.pgid,
                      0 latefee_waiver,
                      0 adv_status,
                      b.INSTALLMENT_PREMIUM installment_premium,
                      b.PRODUCT_CD || '-' || b.term tab_term,
                      REP_FUN_INS_PAY_MODE_SH_NM (b.PAY_MODE_CD) pay_mode_nm,
                      b.INSTALLMENT_PREMIUM tot_due_amt,
                      NVL (l.comm_dt, l.proposal_dt) due_dt_from,
                      b.INSTALLMENT_PREMIUM tot_premium_amt,
                      NULL other_amt,
                      NULL policy_group
               FROM   acc_advance_receivables r,
                      ins_p_proposal l,
                      ins_p_basic b
              WHERE       r.receive_id = NVL (p_rec_id, r.receive_id)
                      AND r.slno = p_slno
                      AND l.pgid = p_pgid
                      AND r.proposal_no = l.proposal_no
                      AND r.rec_status = '1'
                      AND l.pgid = b.pgid(+))
         LOOP
            BEGIN
               SELECT   SUBSTR (i.proposal_no,
                                (16 - (q.use_code_len + 4) + 1),
                                q.use_code_len)
                        || '-'
                        || LTRIM (
                              SUBSTR (i.proposal_no,
                                      1,
                                      (16 - (q.use_code_len + 4))),
                              '0'
                           )
                        || '-'
                        || SUBSTR (i.proposal_no, -4)
                           proposal_no
                 INTO   v_proposal_no
                 FROM   gen_code_no_convention q
                WHERE   q.code_id = 1;
            END;

            v_coll_rec.policy_no := v_proposal_no;
            v_coll_rec.receive_date := i.receive_date;
            v_coll_rec.i_usr := i.i_usr;
            v_coll_rec.i_dt := i.i_dt;
            v_coll_rec.active_office_cd := i.active_office_cd;
            v_coll_rec.receive_id := i.receive_id;
            v_coll_rec.received_by := i.received_by;
            v_coll_rec.mode_tp := i.mode_tp;
            v_coll_rec.collection_type := i.collection_type;
            v_coll_rec.office_code := i.office_code;
            v_coll_rec.receipt_status := i.receipt_status;
            v_coll_rec.agent_id := i.agent_id;
            v_coll_rec.agent_nm := i.agent_nm;
            v_coll_rec.office_nm := i.office_nm;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.receive_mode := i.receive_mode;
            v_coll_rec.coll_amount := i.coll_amount;
            v_coll_rec.in_word := i.in_word;
            v_coll_rec.avl_sus_amt := i.avl_sus_amt;
            v_coll_rec.collection_no := i.collection_no;
            v_coll_rec.vouch_ref := i.vouch_ref;
            v_coll_rec.coll_slip_no := i.coll_slip_no;
            v_coll_rec.coll_slip_rec_dt := i.coll_slip_rec_dt;
            v_coll_rec.collecter := i.collecter;
            v_coll_rec.installment_no_from := i.installment_no_from;
            v_coll_rec.installment_no_to := i.installment_no_to;
            v_coll_rec.adv_due := i.adv_due;
            v_coll_rec.late_fee := i.late_fee;
            v_coll_rec.due_dt_from := i.due_dt_from;
            v_coll_rec.due_dt_to := i.due_dt_to;
            v_coll_rec.party_nm := i.party_nm;
            v_coll_rec.comm_date := i.comm_date;
            v_coll_rec.pgid := i.pgid;
            v_coll_rec.latefee_waiver := i.latefee_waiver;
            v_coll_rec.adv_status := i.adv_status;
            v_coll_rec.tot_premium_amt := i.tot_premium_amt;
            v_coll_rec.tot_due_amt := i.tot_due_amt;
            v_coll_rec.other_amt := i.other_amt;
            v_coll_rec.pay_mode_nm := i.pay_mode_nm;
            v_coll_rec.tab_term := i.tab_term;
            v_coll_rec.installment_premium := i.installment_premium;
            v_coll_rec.policy_group := i.policy_group;
            PIPE ROW (v_coll_rec);
         END LOOP;
      ELSIF p_coll_type = '2'             --For renewal Collection Information
      THEN
         FOR i
         IN (SELECT   fun_ins_pgid_to_policy_no (l.pgid) policy_no,
                      NVL (r.coll_slip_rec_dt, r.receive_date) receive_date,
                      r.i_usr,
                      TRUNC (r.i_dt) i_dt,
                      r.active_office_cd,
                      r.receive_id,
                      r.received_by,
                      r.mode_tp,
                      r.collection_type,
                      r.office_code,
                      r.receipt_status,
                      l.agent_id,
                      f_agent_nm (l.agent_id) agent_nm,
                      fun_agent_org_setup (l.agent_id) office_nm,
                      NULL policy_status,
                      NULL pol_stat,
                      fun_ins_receive_mode (r.receive_mode) receive_mode,
                      r.coll_amount,
                      f_in_word (r.coll_amount) in_word,
                      0 avl_sus_amt,
                      fun_prem_coll_receipt_no (r.partner_code,
                                                r.partner_transid,
                                                r.active_office_cd,
                                                r.receive_date,
                                                r.coll_slip_no,
                                                r.coll_sl_no)
                         collection_no,
                      r.vouch_ref,
                      NVL (r.coll_slip_no, r.coll_sl_no) coll_slip_no,
                      NVL (r.coll_slip_rec_dt, r.receive_date)
                         coll_slip_rec_dt,
                      rep_f_emp_nm (r.received_by) collecter,
                      installment_no_from,
                      installment_no_to,
                      ( (  r.tot_premium_amt
                         + NVL (r.late_fee, 0)
                         - NVL (r.latefee_waiver, 0))
                       - r.coll_amount)
                         adv_due,
                      r.late_fee,
                      r.due_dt_from,
                      r.due_dt_to,
                      fun_party_name (r.pgid) party_nm,
                      l.comm_date comm_date,
                      r.pgid,
                      r.latefee_waiver,
                      0 adv_status,
                      r.tot_premium_amt,
                      (  r.tot_premium_amt
                       + NVL (r.late_fee, 0)
                       - NVL (r.latefee_waiver, 0))
                         tot_due_amt,
                      0 other_amt,
                      (SELECT   pay_mode_sh_nm
                         FROM   ins_pay_mode
                        WHERE   pay_mode_cd = l.pay_mode_cd)
                         pay_mode_nm,
                      l.product_cd || '-' || l.term tab_term,
                      l.installment_premium,
                      rep_fun_ins_policy_group (l.product_cd) policy_group
               FROM   acc_receivables r, ins_p_summery l, acc_receive_mode m
              WHERE       r.receive_id = p_rec_id
                      AND r.pgid = l.pgid
                      AND r.receive_mode = m.receive_mode_cd
                      AND r.rec_status = '1')
         LOOP
            v_coll_rec.policy_no := i.policy_no;
            v_coll_rec.receive_date := i.receive_date;
            v_coll_rec.i_usr := i.i_usr;
            v_coll_rec.i_dt := i.i_dt;
            v_coll_rec.active_office_cd := i.active_office_cd;
            v_coll_rec.receive_id := i.receive_id;
            v_coll_rec.received_by := i.received_by;
            v_coll_rec.mode_tp := i.mode_tp;
            v_coll_rec.collection_type := i.collection_type;
            v_coll_rec.office_code := i.office_code;
            v_coll_rec.receipt_status := i.receipt_status;
            v_coll_rec.agent_id := i.agent_id;
            v_coll_rec.agent_nm := i.agent_nm;
            v_coll_rec.office_nm := i.office_nm;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.receive_mode := i.receive_mode;
            v_coll_rec.coll_amount := i.coll_amount;
            v_coll_rec.in_word := i.in_word;
            v_coll_rec.avl_sus_amt := i.avl_sus_amt;
            v_coll_rec.collection_no := i.collection_no;
            v_coll_rec.vouch_ref := i.vouch_ref;
            v_coll_rec.coll_slip_no := i.coll_slip_no;
            v_coll_rec.coll_slip_rec_dt := i.coll_slip_rec_dt;
            v_coll_rec.collecter := i.collecter;
            v_coll_rec.installment_no_from := i.installment_no_from;
            v_coll_rec.installment_no_to := i.installment_no_to;
            v_coll_rec.adv_due := i.adv_due;
            v_coll_rec.late_fee := i.late_fee;
            v_coll_rec.due_dt_from := i.due_dt_from;
            v_coll_rec.due_dt_to := i.due_dt_to;
            v_coll_rec.party_nm := i.party_nm;
            v_coll_rec.comm_date := i.comm_date;
            v_coll_rec.pgid := i.pgid;
            v_coll_rec.latefee_waiver := i.latefee_waiver;
            v_coll_rec.adv_status := i.adv_status;
            v_coll_rec.tot_premium_amt := i.tot_premium_amt;
            v_coll_rec.tot_due_amt := i.tot_due_amt;
            v_coll_rec.other_amt := i.other_amt;
            v_coll_rec.pay_mode_nm := i.pay_mode_nm;
            v_coll_rec.tab_term := i.tab_term;
            v_coll_rec.installment_premium := i.installment_premium;
            v_coll_rec.policy_group := i.policy_group;
            PIPE ROW (v_coll_rec);
         END LOOP;
      ELSIF p_coll_type = '3'
      --For for Collection Information
      THEN
         FOR i
         IN (SELECT   fun_ins_pgid_to_policy_no (l.pgid) policy_no,
                      DECODE (r.coll_media, '05', r.receive_date, r.media_dt)
                         receive_date,
                      r.i_usr,
                      TRUNC (r.i_dt) i_dt,
                      r.active_office_cd,
                      r.receive_id,
                      r.received_by,
                      r.mode_tp,
                      r.coll_media collection_type,
                      r.office_code,
                      r.rec_status receipt_status,
                      f_agent_nm (l.agent_id) agent_nm,
                      l.agent_id,
                      fun_agent_org_setup (l.agent_id) office_nm,
                      NULL policy_status,
                      NULL pol_stat,
                      fun_ins_receive_mode (r.coll_type) receive_mode,
                      r.coll_amount,
                      f_in_word (r.coll_amount) in_word,
                      0 avl_sus_amt,
                      DECODE (
                         r.coll_media,
                         '05',
                            r.active_office_cd
                         || '-'
                         || TO_CHAR (r.receive_date, 'RR')
                         || '-'
                         || r.coll_sl_no,
                         r.media_no
                      )
                         collection_no,
                      r.vouch_ref,
                      r.media_no coll_slip_no,
                      r.media_dt coll_slip_rec_dt,
                      rep_f_emp_nm (r.received_by) collecter,
                      NULL installment_no_from,
                      NULL installment_no_to,
                      ( (  r.req_premium_amt
                         + NVL (r.late_fee, 0)
                         - NVL (r.latefee_waiver, 0))
                       - r.coll_amount)
                         adv_due,
                      r.late_fee,
                      r.due_date_from due_dt_from,
                      r.due_date_to due_dt_to,
                      f_party_name_concat (r.pgid) party_nm,
                      l.comm_date comm_date,
                      r.pgid,
                      r.latefee_waiver,
                      0 adv_status,
                      r.req_premium_amt installment_premium,
                      (  r.req_premium_amt
                       + NVL (r.late_fee, 0)
                       - NVL (r.latefee_waiver, 0))
                         tot_due_amt,
                      0 other_amt,
                      (SELECT   pay_mode_sh_nm
                         FROM   ins_pay_mode
                        WHERE   pay_mode_cd = l.pay_mode_cd)
                         pay_mode_nm,
                      l.product_cd || '-' || l.term tab_term,
                      rep_fun_ins_policy_group (l.product_cd) policy_group,
                      NULL tot_premium_amt
               FROM   acc_partial_receivables r, ins_p_summery l
              WHERE   r.receive_id = p_rec_id AND r.pgid = l.pgid)
         LOOP
            v_coll_rec.policy_no := i.policy_no;
            v_coll_rec.receive_date := i.receive_date;
            v_coll_rec.i_usr := i.i_usr;
            v_coll_rec.i_dt := i.i_dt;
            v_coll_rec.active_office_cd := i.active_office_cd;
            v_coll_rec.receive_id := i.receive_id;
            v_coll_rec.received_by := i.received_by;
            v_coll_rec.mode_tp := i.mode_tp;
            v_coll_rec.collection_type := i.collection_type;
            v_coll_rec.office_code := i.office_code;
            v_coll_rec.receipt_status := i.receipt_status;
            v_coll_rec.agent_id := i.agent_id;
            v_coll_rec.agent_nm := i.agent_nm;
            v_coll_rec.office_nm := i.office_nm;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.receive_mode := i.receive_mode;
            v_coll_rec.coll_amount := i.coll_amount;
            v_coll_rec.in_word := i.in_word;
            v_coll_rec.avl_sus_amt := i.avl_sus_amt;
            v_coll_rec.collection_no := i.collection_no;
            v_coll_rec.vouch_ref := i.vouch_ref;
            v_coll_rec.coll_slip_no := i.coll_slip_no;
            v_coll_rec.coll_slip_rec_dt := i.coll_slip_rec_dt;
            v_coll_rec.collecter := i.collecter;
            v_coll_rec.installment_no_from := i.installment_no_from;
            v_coll_rec.installment_no_to := i.installment_no_to;
            v_coll_rec.adv_due := i.adv_due;
            v_coll_rec.late_fee := i.late_fee;
            v_coll_rec.due_dt_from := i.due_dt_from;
            v_coll_rec.due_dt_to := i.due_dt_to;
            v_coll_rec.party_nm := i.party_nm;
            v_coll_rec.comm_date := i.comm_date;
            v_coll_rec.pgid := i.pgid;
            v_coll_rec.latefee_waiver := i.latefee_waiver;
            v_coll_rec.adv_status := i.adv_status;
            v_coll_rec.tot_premium_amt := i.tot_premium_amt;
            v_coll_rec.tot_due_amt := i.tot_due_amt;
            v_coll_rec.other_amt := i.other_amt;
            v_coll_rec.pay_mode_nm := i.pay_mode_nm;
            v_coll_rec.tab_term := i.tab_term;
            v_coll_rec.installment_premium := i.installment_premium;
            v_coll_rec.policy_group := i.policy_group;
            PIPE ROW (v_coll_rec);
         END LOOP;
      ELSIF p_coll_type = '4'          --For Alteration Collection Information
      THEN
         FOR i
         IN (SELECT   fun_ins_pgid_to_policy_no (s.pgid) policy_no,
                      NVL (r.coll_slip_rec_dt, r.receive_date) receive_date,
                      r.i_usr,
                      TRUNC (r.i_dt) i_dt,
                      r.active_office_cd,
                      r.receive_id,
                      r.received_by,
                      r.mode_tp,
                      r.collection_type,
                      r.office_code,
                      r.receipt_status,
                      s.agent_id,
                      f_agent_nm (s.agent_id) agent_nm,
                      fun_agent_org_setup (s.agent_id) office_nm,
                      s.policy_status,
                      fun_ins_policy_status (s.policy_status) pol_stat,
                      fun_ins_receive_mode (r.receive_mode) receive_mode,
                      r.coll_amount,
                      f_in_word (r.coll_amount) in_word,
                      r.avl_sus_amt,
                      NVL (
                         r.coll_slip_no,
                            r.active_office_cd
                         || '-'
                         || TO_CHAR (r.receive_date, 'RR')
                         || '-'
                         || r.coll_sl_no
                      )
                         collection_no,
                      r.vouch_ref,
                      NVL (r.coll_slip_no, r.coll_sl_no) coll_slip_no,
                      NVL (r.coll_slip_rec_dt, r.receive_date)
                         coll_slip_rec_dt,
                      rep_f_emp_nm (r.received_by) collecter,
                      NVL (r.par_instl_no_from, r.due_instl_no_from)
                         installment_no_from,
                      NVL (r.due_instl_no_to, r.par_instl_no_to)
                         installment_no_to,
                      (NVL (
                          r.tot_premium_amt,
                            0
                          + NVL (r.par_prem_due_amt, 0)
                          + NVL (r.late_fee, 0)
                          - NVL (r.latefee_waiver, 0)
                       )
                       - r.coll_amount)
                         adv_due,
                      r.late_fee,
                      NVL (r.par_due_dt_from, r.due_dt_from) due_dt_from,
                      NVL (r.due_dt_to, r.par_due_dt_to) due_dt_to,
                      fun_party_name (r.pgid) party_nm,
                      s.comm_date comm_date,
                      r.pgid,
                      r.latefee_waiver,
                      0 adv_status,
                      NVL (par_prem_due_amt, 0) + NVL (r.tot_premium_amt, 0)
                         tot_premium_amt,
                      (  NVL (par_prem_due_amt, 0)
                       + NVL (r.tot_premium_amt, 0)
                       + NVL (r.late_fee, 0)
                       - NVL (r.latefee_waiver, 0))
                         tot_due_amt,
                      0 other_amt,
                      (SELECT   pay_mode_sh_nm
                         FROM   ins_pay_mode
                        WHERE   pay_mode_cd = s.pay_mode_cd)
                         pay_mode_nm,
                      s.product_cd || '-' || s.term tab_term,
                      s.installment_premium,
                      rep_fun_ins_policy_group (s.product_cd) policy_group
               FROM   acc_alt_receivables r, ins_p_summery s
              WHERE       r.receive_id = NVL (p_rec_id, r.receive_id)
                      AND r.pgid = s.pgid
                      AND r.rec_status = '1')
         LOOP
            v_coll_rec.policy_no := i.policy_no;
            v_coll_rec.receive_date := i.receive_date;
            v_coll_rec.i_usr := i.i_usr;
            v_coll_rec.i_dt := i.i_dt;
            v_coll_rec.active_office_cd := i.active_office_cd;
            v_coll_rec.receive_id := i.receive_id;
            v_coll_rec.received_by := i.received_by;
            v_coll_rec.mode_tp := i.mode_tp;
            v_coll_rec.collection_type := i.collection_type;
            v_coll_rec.office_code := i.office_code;
            v_coll_rec.receipt_status := i.receipt_status;
            v_coll_rec.agent_id := i.agent_id;
            v_coll_rec.agent_nm := i.agent_nm;
            v_coll_rec.office_nm := i.office_nm;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.policy_status := i.policy_status;
            v_coll_rec.receive_mode := i.receive_mode;
            v_coll_rec.coll_amount := i.coll_amount;
            v_coll_rec.in_word := i.in_word;
            v_coll_rec.avl_sus_amt := i.avl_sus_amt;
            v_coll_rec.collection_no := i.collection_no;
            v_coll_rec.vouch_ref := i.vouch_ref;
            v_coll_rec.coll_slip_no := i.coll_slip_no;
            v_coll_rec.coll_slip_rec_dt := i.coll_slip_rec_dt;
            v_coll_rec.collecter := i.collecter;
            v_coll_rec.installment_no_from := i.installment_no_from;
            v_coll_rec.installment_no_to := i.installment_no_to;
            v_coll_rec.adv_due := i.adv_due;
            v_coll_rec.late_fee := i.late_fee;
            v_coll_rec.due_dt_from := i.due_dt_from;
            v_coll_rec.due_dt_to := i.due_dt_to;
            v_coll_rec.party_nm := i.party_nm;
            v_coll_rec.comm_date := i.comm_date;
            v_coll_rec.pgid := i.pgid;
            v_coll_rec.latefee_waiver := i.latefee_waiver;
            v_coll_rec.adv_status := i.adv_status;
            v_coll_rec.tot_premium_amt := i.tot_premium_amt;
            v_coll_rec.tot_due_amt := i.tot_due_amt;
            v_coll_rec.other_amt := i.other_amt;
            v_coll_rec.pay_mode_nm := i.pay_mode_nm;
            v_coll_rec.tab_term := i.tab_term;
            v_coll_rec.installment_premium := i.installment_premium;
            v_coll_rec.policy_group := i.policy_group;
            PIPE ROW (v_coll_rec);
         END LOOP;
      END IF;
   END fun_premium_receipt;
END pkg_trans_report_new;
/


--
-- PKG_UTL_REPORT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_utl_report
IS
   FUNCTION fun_utl_sp_office_coll (
      p_office_tp          CHAR,
      p_servicing_off_cd   VARCHAR2,
      p_sales_off_cd       VARCHAR2,
      p_branch_off_cd      VARCHAR2,
      p_coll_dt_fr         DATE,
      p_coll_dt_to         DATE,
      p_bus_cal_tp         CHAR,
      p_with_control_off   CHAR,
      p_receive_mode       VARCHAR2
   )
      RETURN utl_sp_office_coll_row_tab PIPELINED
   IS
      l_biz         utl_sp_office_coll_row;
      v_office_cd   VARCHAR2 (10);
   BEGIN
      BEGIN
         SELECT office_cd
           INTO v_office_cd
           FROM hrm_office
          WHERE off_catg_cd = '01';
      EXCEPTION
         WHEN OTHERS
         THEN
            v_office_cd := '00000';
      END;

      IF p_office_tp = '02'
      THEN
         FOR i IN (SELECT   DECODE (cs.servicing_off,
                                    '00000', v_office_cd,
                                    cs.servicing_off
                                   ) servicing_off,
                            SUM (cs.first_prem) first_prem,
                            SUM (cs.deffered) deffered,
                            SUM (cs.second_yr) second_yr,
                            SUM (cs.renewal) renewal,
                            SUM (DECODE (policy_file_tp,
                                         '1', cs.first_prem,
                                         0
                                        )
                                ) one_stop_amt,
                            SUM (DECODE (policy_file_tp,
                                         '2', cs.first_prem,
                                         0
                                        )
                                ) fdr_amt
                       FROM acc_coll_summery cs
                      WHERE (   (    p_bus_cal_tp = 1
                                 AND cs.receive_dt BETWEEN p_coll_dt_fr
                                                       AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 2
                                 AND cs.business_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 3
                                 AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                         AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 4
                                 AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                            )
                        AND   cs.first_prem
                            + cs.deffered
                            + (cs.second_yr)
                            + (cs.renewal) > 0
                        AND cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                        AND cs.servicing_off IS NOT NULL
                        AND cs.rec_status = '1'
                        AND cs.status = '1'
                        AND cs.receive_mode =
                                         NVL (p_receive_mode, cs.receive_mode)
                   GROUP BY cs.servicing_off
                   UNION
                   SELECT   v_office_cd servicing_off,
                            SUM (cs.first_prem) first_prem,
                            SUM (cs.deffered) deffered,
                            SUM (cs.second_yr) second_yr,
                            SUM (cs.renewal) renewal,
                            SUM (DECODE (policy_file_tp,
                                         '1', cs.first_prem,
                                         0
                                        )
                                ) one_stop_amt,
                            SUM (DECODE (policy_file_tp,
                                         '2', cs.first_prem,
                                         0
                                        )
                                ) fdr_amt
                       FROM acc_coll_summery cs
                      WHERE (   (    p_bus_cal_tp = 1
                                 AND cs.receive_dt BETWEEN p_coll_dt_fr
                                                       AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 2
                                 AND cs.business_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 3
                                 AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                         AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 4
                                 AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                            )
                        AND   cs.first_prem
                            + cs.deffered
                            + (cs.second_yr)
                            + (cs.renewal) > 0
                        AND cs.rec_status = '1'
                        AND cs.status = '1'
                        AND (    cs.servicing_off IS NULL
                             AND p_servicing_off_cd IS NULL
                            )
                        AND p_with_control_off = '1'
                        AND cs.receive_mode =
                                         NVL (p_receive_mode, cs.receive_mode)
                   GROUP BY cs.servicing_off
                   ORDER BY servicing_off)
         LOOP
            l_biz.servicing_off := i.servicing_off;
            l_biz.sales_off := NULL;
            l_biz.branch_off := NULL;
            l_biz.first_prem := i.first_prem;
            l_biz.deffered := i.deffered;
            l_biz.second_yr := i.second_yr;
            l_biz.renewal := i.renewal;
            l_biz.one_stop_amt := i.one_stop_amt;
            l_biz.fdr_amt := i.fdr_amt;
            PIPE ROW (l_biz);
         END LOOP;
      ELSIF p_office_tp = '04'
      THEN
         FOR i IN (SELECT   DECODE (cs.servicing_off,
                                    '00000', v_office_cd,
                                    cs.servicing_off
                                   ) servicing_off,
                            DECODE (cs.sales_off,
                                    '00000', DECODE (cs.servicing_off,
                                                     '00000', v_office_cd,
                                                     cs.servicing_off
                                                    ),
                                    cs.sales_off
                                   ) sales_off,
                            SUM (cs.first_prem) first_prem,
                            SUM (cs.deffered) deffered,
                            SUM (cs.second_yr) second_yr,
                            SUM (cs.renewal) renewal,
                            SUM (DECODE (policy_file_tp,
                                         '1', cs.first_prem,
                                         0
                                        )
                                ) one_stop_amt,
                            SUM (DECODE (policy_file_tp,
                                         '2', cs.first_prem,
                                         0
                                        )
                                ) fdr_amt
                       FROM acc_coll_summery cs
                      WHERE (   (    p_bus_cal_tp = 1
                                 AND cs.receive_dt BETWEEN p_coll_dt_fr
                                                       AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 2
                                 AND cs.business_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 3
                                 AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                         AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 4
                                 AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                            )
                        AND   cs.first_prem
                            + cs.deffered
                            + (cs.second_yr)
                            + (cs.renewal) > 0
                        AND cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                        AND cs.sales_off = NVL (p_sales_off_cd, cs.sales_off)
                        AND cs.rec_status = '1'
                        AND cs.status = '1'
                        AND cs.sales_off IS NOT NULL
                        AND cs.receive_mode =
                                         NVL (p_receive_mode, cs.receive_mode)
                   GROUP BY cs.servicing_off, cs.sales_off
                   UNION
                   SELECT   DECODE (cs.servicing_off,
                                    '00000', v_office_cd,
                                    cs.servicing_off
                                   ) servicing_off,
                            DECODE (cs.servicing_off,
                                    '00000', v_office_cd,
                                    cs.servicing_off
                                   ) sales_off,
                            SUM (cs.first_prem) first_prem,
                            SUM (cs.deffered) deffered,
                            SUM (cs.second_yr) second_yr,
                            SUM (cs.renewal) renewal,
                            SUM (DECODE (policy_file_tp,
                                         '1', cs.first_prem,
                                         0
                                        )
                                ) one_stop_amt,
                            SUM (DECODE (policy_file_tp,
                                         '2', cs.first_prem,
                                         0
                                        )
                                ) fdr_amt
                       FROM acc_coll_summery cs
                      WHERE (   (    p_bus_cal_tp = 1
                                 AND cs.receive_dt BETWEEN p_coll_dt_fr
                                                       AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 2
                                 AND cs.business_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 3
                                 AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                         AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 4
                                 AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                            )
                        AND   cs.first_prem
                            + cs.deffered
                            + (cs.second_yr)
                            + (cs.renewal) > 0
                        AND cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                        AND cs.rec_status = '1'
                        AND cs.status = '1'
                        AND (cs.sales_off IS NULL AND p_sales_off_cd IS NULL
                            )
                        AND p_with_control_off = '1'
                        AND cs.receive_mode =
                                         NVL (p_receive_mode, cs.receive_mode)
                   GROUP BY cs.servicing_off, cs.sales_off
                   ORDER BY servicing_off, sales_off)
         LOOP
            l_biz.servicing_off := i.servicing_off;
            l_biz.sales_off := i.sales_off;
            l_biz.branch_off := NULL;
            l_biz.first_prem := i.first_prem;
            l_biz.deffered := i.deffered;
            l_biz.second_yr := i.second_yr;
            l_biz.renewal := i.renewal;
            l_biz.one_stop_amt := i.one_stop_amt;
            l_biz.fdr_amt := i.fdr_amt;
            PIPE ROW (l_biz);
         END LOOP;
      ELSIF p_office_tp = '05'
      THEN
         FOR i IN
            (SELECT   DECODE (cs.servicing_off,
                              '00000', v_office_cd,
                              cs.servicing_off
                             ) servicing_off,
                      DECODE (cs.sales_off,
                              '00000', DECODE (cs.servicing_off,
                                               '00000', v_office_cd,
                                               cs.servicing_off
                                              ),
                              cs.sales_off
                             ) sales_off,
                      DECODE (cs.branch_off,
                              '00000', DECODE (cs.sales_off,
                                               '00000', DECODE
                                                            (cs.servicing_off,
                                                             '00000', v_office_cd,
                                                             cs.servicing_off
                                                            ),
                                               cs.sales_off
                                              ),
                              cs.branch_off
                             ) branch_off,
                      SUM (cs.first_prem) first_prem,
                      SUM (cs.deffered) deffered,
                      SUM (cs.second_yr) second_yr, SUM (cs.renewal) renewal,
                      SUM (DECODE (policy_file_tp, '1', cs.first_prem, 0)
                          ) one_stop_amt,
                      SUM (DECODE (policy_file_tp, '2', cs.first_prem, 0)
                          ) fdr_amt
                 FROM acc_coll_summery cs
                WHERE (   (    p_bus_cal_tp = 1
                           AND cs.receive_dt BETWEEN p_coll_dt_fr AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 2
                           AND cs.business_date BETWEEN p_coll_dt_fr
                                                    AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 3
                           AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                   AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 4
                           AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                    AND p_coll_dt_to
                          )
                      )
                  AND   cs.first_prem
                      + cs.deffered
                      + (cs.second_yr)
                      + (cs.renewal) > 0
                  AND cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                  AND cs.sales_off = NVL (p_sales_off_cd, cs.sales_off)
                  AND cs.branch_off = NVL (p_branch_off_cd, cs.branch_off)
                  AND cs.rec_status = '1'
                  AND cs.status = '1'
                  AND cs.branch_off IS NOT NULL
                  AND cs.receive_mode = NVL (p_receive_mode, cs.receive_mode)
             GROUP BY cs.servicing_off, cs.sales_off, cs.branch_off
             UNION
             SELECT   DECODE (cs.servicing_off,
                              '00000', v_office_cd,
                              cs.servicing_off
                             ) servicing_off,
                      DECODE (cs.sales_off,
                              '00000', DECODE (cs.servicing_off,
                                               '00000', v_office_cd,
                                               cs.servicing_off
                                              ),
                              cs.sales_off
                             ) sales_off,
                      DECODE (cs.sales_off,
                              '00000', DECODE (cs.servicing_off,
                                               '00000', v_office_cd,
                                               cs.servicing_off
                                              ),
                              cs.sales_off
                             ) branch_off,
                      SUM (cs.first_prem) first_prem,
                      SUM (cs.deffered) deffered, SUM (cs.second_yr)
                                                                    second_yr,
                      SUM (cs.renewal) renewal,
                      SUM (DECODE (policy_file_tp, '1', cs.first_prem, 0)
                          ) one_stop_amt,
                      SUM (DECODE (policy_file_tp, '2', cs.first_prem, 0)
                          ) fdr_amt
                 FROM acc_coll_summery cs
                WHERE (   (    p_bus_cal_tp = 1
                           AND cs.receive_dt BETWEEN p_coll_dt_fr AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 2
                           AND cs.business_date BETWEEN p_coll_dt_fr
                                                    AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 3
                           AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                   AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 4
                           AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                    AND p_coll_dt_to
                          )
                      )
                  AND   cs.first_prem
                      + cs.deffered
                      + (cs.second_yr)
                      + (cs.renewal) > 0
                  AND cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                  AND cs.sales_off = NVL (p_sales_off_cd, cs.sales_off)
                  AND (cs.branch_off IS NULL AND p_branch_off_cd IS NULL)
                  AND cs.rec_status = '1'
                  AND cs.status = '1'
                  AND p_with_control_off = '1'
                  AND cs.receive_mode = NVL (p_receive_mode, cs.receive_mode)
             GROUP BY cs.servicing_off, cs.sales_off, cs.branch_off
             ORDER BY servicing_off, sales_off, branch_off)
         LOOP
            l_biz.servicing_off := i.servicing_off;
            l_biz.sales_off := i.sales_off;
            l_biz.branch_off := i.branch_off;
            l_biz.first_prem := i.first_prem;
            l_biz.deffered := i.deffered;
            l_biz.second_yr := i.second_yr;
            l_biz.renewal := i.renewal;
            l_biz.one_stop_amt := i.one_stop_amt;
            l_biz.fdr_amt := i.fdr_amt;
            PIPE ROW (l_biz);
         END LOOP;
      END IF;
   END fun_utl_sp_office_coll;

   FUNCTION fun_utl_sp_emp_coll (
      p_office_tp          CHAR,
      p_servicing_off_cd   VARCHAR2,
      p_sales_off_cd       VARCHAR2,
      p_branch_off_cd      VARCHAR2,
      p_coll_dt_fr         DATE,
      p_coll_dt_to         DATE,
      p_bus_cal_tp         CHAR,
      p_receive_mode       VARCHAR2
   )
      RETURN utl_sp_emp_coll_row_tab PIPELINED
   IS
      l_biz         utl_sp_emp_coll_row;
      v_office_cd   VARCHAR2 (10);
   BEGIN
      BEGIN
         SELECT office_cd
           INTO v_office_cd
           FROM hrm_office
          WHERE off_catg_cd = '01';
      EXCEPTION
         WHEN OTHERS
         THEN
            v_office_cd := '00000';
      END;

      IF p_office_tp = '02'
      THEN
         FOR i IN (SELECT   DECODE (cs.servicing_off,
                                    '00000', v_office_cd,
                                    cs.servicing_off
                                   ) servicing_off,
                            um_gid, bm_gid, bc_gid, dc_gid, rc_gid, dvc_gid,
                            cc_gid, SUM (cs.first_prem) first_prem,
                            SUM (cs.deffered) deffered,
                            SUM (cs.second_yr) second_yr,
                            SUM (cs.renewal) renewal,
                            SUM (DECODE (policy_file_tp,
                                         '1', cs.first_prem,
                                         0
                                        )
                                ) one_stop_amt,
                            SUM (DECODE (policy_file_tp,
                                         '2', cs.first_prem,
                                         0
                                        )
                                ) fdr_amt
                       FROM acc_coll_summery cs
                      WHERE (   (    p_bus_cal_tp = 1
                                 AND cs.receive_dt BETWEEN p_coll_dt_fr
                                                       AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 2
                                 AND cs.business_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 3
                                 AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                         AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 4
                                 AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                            )
                        AND   cs.first_prem
                            + cs.deffered
                            + (cs.second_yr)
                            + (cs.renewal) > 0
                        AND cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                        AND cs.rec_status = '1'
                        AND cs.status = '1'
                        AND cs.receive_mode =
                                         NVL (p_receive_mode, cs.receive_mode)
                   GROUP BY cs.servicing_off,
                            um_gid,
                            bm_gid,
                            bc_gid,
                            dc_gid,
                            rc_gid,
                            dvc_gid,
                            cc_gid
                   ORDER BY cs.servicing_off,
                            um_gid,
                            bm_gid,
                            bc_gid,
                            dc_gid,
                            rc_gid,
                            dvc_gid,
                            cc_gid)
         LOOP
            IF i.um_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.um_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bm_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.bm_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.bc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.dc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.rc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.rc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dvc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.dvc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.cc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := NULL;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.cc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;
         END LOOP;

         NULL;
      ELSIF p_office_tp = '04'
      THEN
         FOR i IN (SELECT   DECODE (cs.servicing_off,
                                    '00000', v_office_cd,
                                    cs.servicing_off
                                   ) servicing_off,
                            DECODE (cs.sales_off,
                                    '00000', DECODE (cs.servicing_off,
                                                     '00000', v_office_cd,
                                                     cs.servicing_off
                                                    ),
                                    cs.sales_off
                                   ) sales_off,
                            um_gid, bm_gid, bc_gid, dc_gid, rc_gid, dvc_gid,
                            cc_gid, SUM (cs.first_prem) first_prem,
                            SUM (cs.deffered) deffered,
                            SUM (cs.second_yr) second_yr,
                            SUM (cs.renewal) renewal,
                            SUM (DECODE (policy_file_tp,
                                         '1', cs.first_prem,
                                         0
                                        )
                                ) one_stop_amt,
                            SUM (DECODE (policy_file_tp,
                                         '2', cs.first_prem,
                                         0
                                        )
                                ) fdr_amt
                       FROM acc_coll_summery cs
                      WHERE (   (    p_bus_cal_tp = 1
                                 AND cs.receive_dt BETWEEN p_coll_dt_fr
                                                       AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 2
                                 AND cs.business_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 3
                                 AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                         AND p_coll_dt_to
                                )
                             OR (    p_bus_cal_tp = 4
                                 AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                          AND p_coll_dt_to
                                )
                            )
                        AND   cs.first_prem
                            + cs.deffered
                            + (cs.second_yr)
                            + (cs.renewal) > 0
                        AND cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                        AND cs.sales_off = NVL (p_sales_off_cd, cs.sales_off)
                        AND cs.rec_status = '1'
                        AND cs.status = '1'
                        AND cs.receive_mode =
                                         NVL (p_receive_mode, cs.receive_mode)
                   GROUP BY cs.servicing_off,
                            cs.sales_off,
                            um_gid,
                            bm_gid,
                            bc_gid,
                            dc_gid,
                            rc_gid,
                            dvc_gid,
                            cc_gid
                   ORDER BY cs.servicing_off,
                            cs.sales_off,
                            um_gid,
                            bm_gid,
                            bc_gid,
                            dc_gid,
                            rc_gid,
                            dvc_gid,
                            cc_gid)
         LOOP
            IF i.um_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.um_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bm_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.bm_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.bc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.dc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.rc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.rc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dvc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.dvc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.cc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := NULL;
               l_biz.emp_gid := i.cc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;
         END LOOP;

         NULL;
      ELSIF p_office_tp = '05'
      THEN
         FOR i IN
            (SELECT   DECODE (cs.servicing_off,
                              '00000', v_office_cd,
                              cs.servicing_off
                             ) servicing_off,
                      DECODE (cs.sales_off,
                              '00000', DECODE (cs.servicing_off,
                                               '00000', v_office_cd,
                                               cs.servicing_off
                                              ),
                              cs.sales_off
                             ) sales_off,
                      DECODE (cs.branch_off,
                              '00000', DECODE (cs.sales_off,
                                               '00000', DECODE
                                                            (cs.servicing_off,
                                                             '00000', v_office_cd,
                                                             cs.servicing_off
                                                            ),
                                               cs.sales_off
                                              ),
                              cs.branch_off
                             ) branch_off,
                      um_gid, bm_gid, bc_gid, dc_gid, rc_gid, dvc_gid,
                      cc_gid, SUM (cs.first_prem) first_prem,
                      SUM (cs.deffered) deffered,
                      SUM (cs.second_yr) second_yr, SUM (cs.renewal) renewal,
                      SUM (DECODE (policy_file_tp, '1', cs.first_prem, 0)
                          ) one_stop_amt,
                      SUM (DECODE (policy_file_tp, '2', cs.first_prem, 0)
                          ) fdr_amt
                 FROM acc_coll_summery cs
                WHERE (   (    p_bus_cal_tp = 1
                           AND cs.receive_dt BETWEEN p_coll_dt_fr AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 2
                           AND cs.business_date BETWEEN p_coll_dt_fr
                                                    AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 3
                           AND cs.com_exe_date BETWEEN p_coll_dt_fr
                                                   AND p_coll_dt_to
                          )
                       OR (    p_bus_cal_tp = 4
                           AND cs.com_bill_date BETWEEN p_coll_dt_fr
                                                    AND p_coll_dt_to
                          )
                      )
                  AND   cs.first_prem
                      + cs.deffered
                      + (cs.second_yr)
                      + (cs.renewal) > 0
                  AND cs.servicing_off =
                                    NVL (p_servicing_off_cd, cs.servicing_off)
                  AND cs.sales_off = NVL (p_sales_off_cd, cs.sales_off)
                  AND cs.branch_off = NVL (p_branch_off_cd, cs.branch_off)
                  AND cs.rec_status = '1'
                  AND cs.status = '1'
                  AND cs.receive_mode = NVL (p_receive_mode, cs.receive_mode)
             GROUP BY cs.servicing_off,
                      cs.sales_off,
                      cs.branch_off,
                      um_gid,
                      bm_gid,
                      bc_gid,
                      dc_gid,
                      rc_gid,
                      dvc_gid,
                      cc_gid
             ORDER BY cs.servicing_off,
                      cs.sales_off,
                      cs.branch_off,
                      um_gid,
                      bm_gid,
                      bc_gid,
                      dc_gid,
                      rc_gid,
                      dvc_gid,
                      cc_gid)
         LOOP
            IF i.um_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.um_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bm_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.bm_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.bc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.bc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.dc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.rc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.rc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.dvc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.dvc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;

            IF i.cc_gid != 0
            THEN
               l_biz.servicing_off := i.servicing_off;
               l_biz.sales_off := i.sales_off;
               l_biz.branch_off := i.branch_off;
               l_biz.emp_gid := i.cc_gid;
               l_biz.first_prem := i.first_prem;
               l_biz.deffered := i.deffered;
               l_biz.second_yr := i.second_yr;
               l_biz.renewal := i.renewal;
               l_biz.one_stop_amt := i.one_stop_amt;
               l_biz.fdr_amt := i.fdr_amt;
               PIPE ROW (l_biz);
            END IF;
         END LOOP;
      END IF;
   END fun_utl_sp_emp_coll;

   FUNCTION fun_uts_ded_wise_bus (p_office_tp CHAR)
      RETURN uts_off_ded_row_tab PIPELINED
   IS
      l_biz         uts_off_ded_row;
      v_office_cd   VARCHAR2 (10);
   BEGIN
      BEGIN
         SELECT office_cd
           INTO v_office_cd
           FROM hrm_office
          WHERE off_catg_cd = '01';
      EXCEPTION
         WHEN OTHERS
         THEN
            v_office_cd := '00000';
      END;

      IF p_office_tp = '01'
      THEN
         FOR i IN (SELECT h.office_cd, h.office_cd head_off
                     FROM uts_off_rent_agrmnt_mst m, hrm_office h
                    WHERE m.office_cd = h.office_cd
                      AND TO_NUMBER (off_catg_cd) <= TO_NUMBER (p_office_tp))
         LOOP
            l_biz.office_cd := i.office_cd;
            l_biz.head_off := v_office_cd;
            l_biz.servicing_off := NULL;
            l_biz.sales_off := NULL;
            l_biz.branch_off := NULL;
            PIPE ROW (l_biz);
         END LOOP;
      ELSIF p_office_tp = '02'
      THEN
         FOR i IN
            (SELECT h.office_cd, h.office_cd servicing_off
               FROM uts_off_rent_agrmnt_mst m, hrm_office h
              WHERE m.office_cd = h.office_cd
                AND TO_NUMBER (off_catg_cd) BETWEEN (  TO_NUMBER (p_office_tp)
                                                     - 1
                                                    )
                                                AND TO_NUMBER (p_office_tp))
         LOOP
            l_biz.office_cd := i.office_cd;
            l_biz.head_off := v_office_cd;
            l_biz.servicing_off := NULL;
            l_biz.sales_off := NULL;
            l_biz.branch_off := NULL;
            PIPE ROW (l_biz);
         END LOOP;
      ELSIF p_office_tp = '04'
      THEN
         FOR i IN
            (SELECT h.office_cd,
                    fun_find_service_off (h.office_cd) servicing_off,
                    h.office_cd sales_off
               FROM uts_off_rent_agrmnt_mst m, hrm_office h
              WHERE m.office_cd = h.office_cd
                AND TO_NUMBER (off_catg_cd) BETWEEN (  TO_NUMBER (p_office_tp)
                                                     - 2
                                                    )
                                                AND TO_NUMBER (p_office_tp))
         LOOP
            l_biz.office_cd := i.office_cd;
            l_biz.head_off := v_office_cd;
            l_biz.servicing_off := i.servicing_off;
            l_biz.sales_off := NULL;
            l_biz.branch_off := NULL;
            PIPE ROW (l_biz);
         END LOOP;
      ELSIF p_office_tp = '05'
      THEN
         FOR i IN
            (SELECT h.office_cd,
                    fun_find_service_off (h.office_cd) servicing_off,
                    fun_find_sales_off (h.office_cd) sales_off,
                    h.office_cd branch_off
               FROM uts_off_rent_agrmnt_mst m, hrm_office h
              WHERE m.office_cd = h.office_cd
                AND TO_NUMBER (off_catg_cd) BETWEEN (  TO_NUMBER (p_office_tp)
                                                     - 1
                                                    )
                                                AND TO_NUMBER (p_office_tp))
         LOOP
            l_biz.office_cd := i.office_cd;
            l_biz.head_off := v_office_cd;
            l_biz.servicing_off := i.servicing_off;
            l_biz.sales_off := i.sales_off;
            l_biz.branch_off := NULL;
            PIPE ROW (l_biz);
         END LOOP;
      END IF;
   END fun_uts_ded_wise_bus;
END pkg_utl_report;
/


--
-- PKG_VALUATION_REPORT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_valuation_report
IS
   FUNCTION fun_lapse_ratio (
      p_date_fr        DATE,
      p_date_to        DATE,
      p_coll_date_fr   DATE,
      p_coll_date_to   DATE,
      p_grace_period   NUMBER,
      p_previous_yr    VARCHAR2
   )
      RETURN tp_lapse_ratio_tab PIPELINED
   IS
      v_coll_rec         tp_lapse_ratio_rec;
      v_inforce_policy   NUMBER (10);
   BEGIN
      SELECT COUNT (1)
        INTO v_inforce_policy
        FROM val_inforce_policy
       WHERE val_year = p_previous_yr;

      IF v_inforce_policy > 0
      THEN
         FOR i IN
            (SELECT      'This Report is generated on'
                      || SYSDATE
                      || '.'
                      || 'Where due date from '
                      || p_date_fr
                      || ' to '
                      || p_date_to
                      || ' And Collection date from '
                      || p_coll_date_fr
                      || ' to '
                      || p_coll_date_to
                      || ' And grace period is '
                      || p_grace_period report_parameter,
                      commencement_date, sl_no, description,
                      SUM (def_due_policy) + SUM (def_due_premium) due,
                        SUM (def_tot_coll_policy)
                      + SUM (def_full_coll_prem)
                      + SUM (def_partial_coll_prem) collection,
                        (SUM (def_due_policy) + SUM (def_due_premium))
                      - (  SUM (def_tot_coll_policy)
                         + SUM (def_full_coll_prem)
                         + SUM (def_partial_coll_prem)
                        ) lapse,
                      ROUND (  (  (  (  SUM (def_due_policy)
                                      + SUM (def_due_premium)
                                     )
                                   - (  SUM (def_tot_coll_policy)
                                      + SUM (def_full_coll_prem)
                                      + SUM (def_partial_coll_prem)
                                     )
                                  )
                                * 100
                               )
                             / (SUM (def_due_policy) + SUM (def_due_premium)),
                             2
                            ) lapse_ratio,
                        SUM (def_full_coll_policy)
                      + SUM (def_full_coll_prem) full_collection,
                        SUM (def_partial_coll_policy)
                      + SUM (def_partial_coll_prem) partial_collection
                 FROM (
                       ---Deffered Year
                       SELECT    'Commencement date 

from '
                              || ADD_MONTHS (ADD_MONTHS (p_date_fr, -12), 1)
                              || ' to '
                              || ADD_MONTHS (p_date_to, -1) commencement_date,
                              1 sl_no,
                              'Deferred Lapse 

policy' description,          NVL (COUNT (1), 0) def_due_policy,
                              0 def_due_premium, 0 def_tot_coll_policy,
                              0 def_full_coll_policy,
                              0 def_partial_coll_policy, 0 def_full_coll_prem,
                              0 def_partial_coll_prem
                         FROM ins_p_summery s
                        WHERE (   (    s.last_paid_date >= TO_DATE (p_date_fr)
                                   AND policy_status = '00'
                                  )
                               OR policy_status != '00'
                              )
                          AND EXISTS (
                                 SELECT 1
                                   FROM val_inforce_policy v
                                  WHERE v.val_year = p_previous_yr
                                    AND paymode <> '05'
                                    AND v.pgid = s.pgid)
                          AND s.pay_mode_cd <> '01'
                          AND s.comm_date
                                 BETWEEN ADD_MONTHS (ADD_MONTHS (p_date_fr,
                                                                 -12
                                                                ),
                                                     1
                                                    )
                                     AND ADD_MONTHS (p_date_to, -1)
                       UNION ALL
                       SELECT    'Commencement date 

from '
                              || ADD_MONTHS (ADD_MONTHS (p_date_fr, -12), 1)
                              || ' to '
                              || ADD_MONTHS (p_date_to, -1) commencement_date,
                              2 sl_no,
                              'Deferred Lapse policy 

premium' description,         0 def_due_policy,
                              NVL (SUM (due_installment * installment_premium),
                                   0
                                  ) def_due_premium,
                              0 def_tot_coll_policy, 0 def_full_coll_policy,
                              0 def_partial_coll_policy, 0 def_full_coll_prem,
                              0 def_partial_coll_prem
                         FROM (SELECT pgid, comm_date, last_paid_date,
                                      last_paid_inst_no, maturity_date,
                                      max_due_date,
                                      CASE
                                         WHEN max_due_date <
                                                    p_date_fr
                                            THEN 0
                                         WHEN max_due_date <=
                                                maturity_date
                                            THEN   FLOOR
                                                      ((  (  (  TO_NUMBER
                                                                   (TO_CHAR
                                                                       (max_due_date,
                                                                        'MM'
                                                                       )
                                                                   )
                                                              - TO_NUMBER
                                                                   (TO_CHAR
                                                                       (p_date_fr,
                                                                        'MM'
                                                                       )
                                                                   )
                                                             )
                                                           + CASE
                                                                WHEN TO_NUMBER
                                                                       (TO_CHAR
                                                                           (max_due_date,
                                                                            'MM'
                                                                           )
                                                                       ) <
                                                                       TO_NUMBER
                                                                          (TO_CHAR
                                                                              (p_date_fr,
                                                                               'MM'
                                                                              )
                                                                          )
                                                                   THEN 12
                                                                ELSE 0
                                                             END
                                                          )
                                                        / TO_NUMBER
                                                             (DECODE
                                                                 (pay_mode_cd,
                                                                  '02', 6,
                                                                  '03', 3,
                                                                  '04', 1
                                                                 )
                                                             )
                                                       )
                                                      )
                                                 + 1
                                         ELSE   FLOOR
                                                   ((  (  (  TO_NUMBER
                                                                (TO_CHAR
                                                                    (maturity_date,
                                                                     'MM'
                                                                    )
                                                                )
                                                           - TO_NUMBER
                                                                (TO_CHAR
                                                                    (p_date_fr,
                                                                     'MM'
                                                                    )
                                                                )
                                                          )
                                                        + CASE
                                                             WHEN TO_NUMBER
                                                                    (TO_CHAR
                                                                        (maturity_date,
                                                                         'MM'
                                                                        )
                                                                    ) <
                                                                    TO_NUMBER
                                                                       (TO_CHAR
                                                                           (p_date_fr,
                                                                            'MM'
                                                                           )
                                                                       )
                                                                THEN 12
                                                             ELSE 0
                                                          END
                                                       )
                                                     / TO_NUMBER
                                                          (DECODE
                                                                 (pay_mode_cd,
                                                                  '02', 6,
                                                                  '03', 3,
                                                                  '04', 1
                                                                 )
                                                          )
                                                    )
                                                   )
                                              + 1
                                      END due_installment,
                                      installment_premium
                                 FROM (SELECT s.pgid, s.comm_date,
                                              s.last_paid_date,
                                              s.last_paid_inst_no,
                                              s.maturity_date, s.pay_mode_cd,
                                              s.installment_premium,
                                              ADD_MONTHS
                                                 (s.comm_date,
                                                    12
                                                  - (DECODE (s.pay_mode_cd,
                                                             '02', 6,
                                                             '03', 3,
                                                             '04', 1
                                                            )
                                                    )
                                                 ) max_due_date
                                         FROM ins_p_summery s
                                        WHERE (   (    s.last_paid_date >=
                                                           TO_DATE (p_date_fr)
                                                   AND policy_status = '00'
                                                  )
                                               OR policy_status != '00'
                                              )
                                          AND EXISTS (
                                                 SELECT 1
                                                   FROM val_inforce_policy v
                                                  WHERE v.val_year =
                                                                 p_previous_yr
                                                    AND paymode <> '05'
                                                    AND v.pgid = s.pgid)
                                          AND s.pay_mode_cd <> '01'
                                          AND s.comm_date
                                                 BETWEEN ADD_MONTHS
                                                           (ADD_MONTHS
                                                                   (p_date_fr,
                                                                    -12
                                                                   ),
                                                            1
                                                           )
                                                     AND ADD_MONTHS
                                                                   (p_date_to,
                                                                    -1
                                                                   )))
                       UNION ALL
                       SELECT    'Commencement date 

from '
                              || ADD_MONTHS (ADD_MONTHS (p_date_fr, -12), 1)
                              || ' to '
                              || ADD_MONTHS (p_date_to, -1) commencement_date,
                              1 sl_no,
                              'Deferred Lapse 

policy' description,          0 def_due_policy, 0 def_due_premium,
                              NVL (COUNT (a.pgid), 0) def_tot_coll_policy,
                              NVL
                                 (SUM (CASE
                                          WHEN a.coll_record >=
                                                             b.due_installment
                                          AND b.due_installment > 0
                                             THEN 1
                                          ELSE 0
                                       END
                                      ),
                                  0
                                 ) def_full_coll_policy,
                              NVL
                                 (SUM (CASE
                                          WHEN a.coll_record <
                                                             b.due_installment
                                           OR b.due_installment = 0
                                             THEN 1
                                          ELSE 0
                                       END
                                      ),
                                  0
                                 ) def_partial_coll_policy,
                              0 def_full_coll_prem, 0 def_partial_coll_prem
                         FROM (SELECT   pgid,
                                        NVL (COUNT (pgid), 0) coll_record,
                                        NVL
                                           (SUM (d_coll_amount),
                                            0
                                           ) d_coll_amount
                                   FROM acc_coll_summery c
                                  WHERE receive_dt BETWEEN p_coll_date_fr
                                                       AND   p_coll_date_to
                                                           + p_grace_period
                                    AND EXISTS (
                                           SELECT 1
                                             FROM (SELECT pgid
                                                     FROM ins_p_summery s
                                                    WHERE (   (    s.last_paid_date >=
                                                                      TO_DATE
                                                                         (p_date_fr
                                                                         )
                                                               AND policy_status =
                                                                          '00'
                                                              )
                                                           OR policy_status !=
                                                                          '00'
                                                          )
                                                      AND s.pay_mode_cd <>
                                                                          '01'
                                                      AND EXISTS (
                                                             SELECT 1
                                                               FROM val_inforce_policy v
                                                              WHERE v.val_year =
                                                                       p_previous_yr
                                                                AND paymode <>
                                                                          '05'
                                                                AND v.pgid =
                                                                        s.pgid)
                                                      AND s.comm_date
                                                             BETWEEN ADD_MONTHS
                                                                       (ADD_MONTHS
                                                                           (p_date_fr,
                                                                            -12
                                                                           ),
                                                                        1
                                                                       )
                                                                 AND ADD_MONTHS
                                                                       (p_date_to,
                                                                        -1
                                                                       )) a
                                            WHERE pgid = c.pgid)
                                    AND due_date BETWEEN p_date_fr AND p_date_to
                                    AND d_coll_amount > 0
                               GROUP BY pgid) a,
                              (SELECT pgid,
                                      CASE
                                         WHEN max_due_date <
                                                    p_date_fr
                                            THEN 0
                                         WHEN max_due_date <=
                                                maturity_date
                                            THEN   FLOOR
                                                      ((  (  (  TO_NUMBER
                                                                   (TO_CHAR
                                                                       (max_due_date,
                                                                        'MM'
                                                                       )
                                                                   )
                                                              - TO_NUMBER
                                                                   (TO_CHAR
                                                                       (p_date_fr,
                                                                        'MM'
                                                                       )
                                                                   )
                                                             )
                                                           + CASE
                                                                WHEN TO_NUMBER
                                                                       (TO_CHAR
                                                                           (max_due_date,
                                                                            'MM'
                                                                           )
                                                                       ) <
                                                                       TO_NUMBER
                                                                          (TO_CHAR
                                                                              (p_date_fr,
                                                                               'MM'
                                                                              )
                                                                          )
                                                                   THEN 12
                                                                ELSE 0
                                                             END
                                                          )
                                                        / DECODE (pay_mode_cd,
                                                                  '02', 6,
                                                                  '03', 3,
                                                                  '04', 1
                                                                 )
                                                       )
                                                      )
                                                 + 1
                                         ELSE   FLOOR
                                                   ((  (  (  TO_NUMBER
                                                                (TO_CHAR
                                                                    (maturity_date,
                                                                     'MM'
                                                                    )
                                                                )
                                                           - TO_NUMBER
                                                                (TO_CHAR
                                                                    (p_date_fr,
                                                                     'MM'
                                                                    )
                                                                )
                                                          )
                                                        + CASE
                                                             WHEN TO_NUMBER
                                                                    (TO_CHAR
                                                                        (maturity_date,
                                                                         'MM'
                                                                        )
                                                                    ) <
                                                                    TO_NUMBER
                                                                       (TO_CHAR
                                                                           (p_date_fr,
                                                                            'MM'
                                                                           )
                                                                       )
                                                                THEN 12
                                                             ELSE 0
                                                          END
                                                       )
                                                     / DECODE (pay_mode_cd,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1
                                                              )
                                                    )
                                                   )
                                              + 1
                                      END due_installment
                                 FROM (SELECT s.pgid, s.comm_date,
                                              s.last_paid_date,
                                              s.last_paid_inst_no,
                                              s.maturity_date, s.pay_mode_cd,
                                              s.installment_premium,
                                              ADD_MONTHS
                                                 (s.comm_date,
                                                    12
                                                  - (DECODE (s.pay_mode_cd,
                                                             '02', 6,
                                                             '03', 3,
                                                             '04', 1
                                                            )
                                                    )
                                                 ) max_due_date
                                         FROM ins_p_summery s
                                        WHERE (   (    s.last_paid_date >=
                                                           TO_DATE (p_date_fr)
                                                   AND policy_status = '00'
                                                  )
                                               OR policy_status != '00'
                                              )
                                          AND EXISTS (
                                                 SELECT 1
                                                   FROM val_inforce_policy v
                                                  WHERE v.val_year =
                                                                 p_previous_yr
                                                    AND paymode <> '05'
                                                    AND v.pgid = s.pgid)
                                          AND s.pay_mode_cd <> '01'
                                          AND s.comm_date
                                                 BETWEEN ADD_MONTHS
                                                           (ADD_MONTHS
                                                                   (p_date_fr,
                                                                    -12
                                                                   ),
                                                            1
                                                           )
                                                     AND ADD_MONTHS
                                                                   (p_date_to,
                                                                    -1
                                                                   ))) b
                        WHERE a.pgid = b.pgid
                       UNION ALL
                       SELECT    'Commencement date 

from '
                              || ADD_MONTHS (ADD_MONTHS (p_date_fr, -12), 1)
                              || ' to '
                              || ADD_MONTHS (p_date_to, -1) commencement_date,
                              2 sl_no,
                              'Deferred Lapse policy 

premium' description,         0 def_due_policy, 0 def_due_premium,
                              0 def_tot_coll_policy, 0 def_full_coll_policy,
                              0 def_partial_coll_policy,
                              NVL
                                 (SUM
                                     (CASE
                                         WHEN a.coll_record >=
                                                             b.due_installment
                                         AND b.due_installment > 0
                                            THEN d_coll_amount
                                         ELSE 0
                                      END
                                     ),
                                  0
                                 ) def_full_coll_prem,
                              NVL
                                 (SUM
                                     (CASE
                                         WHEN a.coll_record <
                                                             b.due_installment
                                          OR b.due_installment = 0
                                            THEN d_coll_amount
                                         ELSE 0
                                      END
                                     ),
                                  0
                                 ) def_partial_coll_prem
                         FROM (SELECT   pgid,
                                        NVL (COUNT (pgid), 0) coll_record,
                                        NVL
                                           (SUM (d_coll_amount),
                                            0
                                           ) d_coll_amount
                                   FROM acc_coll_summery c
                                  WHERE receive_dt BETWEEN p_coll_date_fr
                                                       AND   p_coll_date_to
                                                           + p_grace_period
                                    AND EXISTS (
                                           SELECT 1
                                             FROM (SELECT pgid
                                                     FROM ins_p_summery s
                                                    WHERE (   (    s.last_paid_date >=
                                                                      TO_DATE
                                                                         (p_date_fr
                                                                         )
                                                               AND policy_status =
                                                                          '00'
                                                              )
                                                           OR policy_status !=
                                                                          '00'
                                                          )
                                                      AND s.pay_mode_cd <>
                                                                          '01'
                                                      AND EXISTS (
                                                             SELECT 1
                                                               FROM val_inforce_policy v
                                                              WHERE v.val_year =
                                                                       p_previous_yr
                                                                AND paymode <>
                                                                          '05'
                                                                AND v.pgid =
                                                                        s.pgid)
                                                      AND s.comm_date
                                                             BETWEEN ADD_MONTHS
                                                                       (ADD_MONTHS
                                                                           (p_date_fr,
                                                                            -12
                                                                           ),
                                                                        1
                                                                       )
                                                                 AND ADD_MONTHS
                                                                       (p_date_to,
                                                                        -1
                                                                       )) a
                                            WHERE pgid = c.pgid)
                                    AND due_date BETWEEN p_date_fr AND p_date_to
                                    AND d_coll_amount > 0
                               GROUP BY pgid) a,
                              (SELECT pgid,
                                      CASE
                                         WHEN max_due_date <
                                                    p_date_fr
                                            THEN 0
                                         WHEN max_due_date <=
                                                maturity_date
                                            THEN   FLOOR
                                                      ((  (  (  TO_NUMBER
                                                                   (TO_CHAR
                                                                       (max_due_date,
                                                                        'MM'
                                                                       )
                                                                   )
                                                              - TO_NUMBER
                                                                   (TO_CHAR
                                                                       (p_date_fr,
                                                                        'MM'
                                                                       )
                                                                   )
                                                             )
                                                           + CASE
                                                                WHEN TO_NUMBER
                                                                       (TO_CHAR
                                                                           (max_due_date,
                                                                            'MM'
                                                                           )
                                                                       ) <
                                                                       TO_NUMBER
                                                                          (TO_CHAR
                                                                              (p_date_fr,
                                                                               'MM'
                                                                              )
                                                                          )
                                                                   THEN 12
                                                                ELSE 0
                                                             END
                                                          )
                                                        / DECODE (pay_mode_cd,
                                                                  '02', 6,
                                                                  '03', 3,
                                                                  '04', 1
                                                                 )
                                                       )
                                                      )
                                                 + 1
                                         ELSE   FLOOR
                                                   ((  (  (  TO_NUMBER
                                                                (TO_CHAR
                                                                    (maturity_date,
                                                                     'MM'
                                                                    )
                                                                )
                                                           - TO_NUMBER
                                                                (TO_CHAR
                                                                    (p_date_fr,
                                                                     'MM'
                                                                    )
                                                                )
                                                          )
                                                        + CASE
                                                             WHEN TO_NUMBER
                                                                    (TO_CHAR
                                                                        (maturity_date,
                                                                         'MM'
                                                                        )
                                                                    ) <
                                                                    TO_NUMBER
                                                                       (TO_CHAR
                                                                           (p_date_fr,
                                                                            'MM'
                                                                           )
                                                                       )
                                                                THEN 12
                                                             ELSE 0
                                                          END
                                                       )
                                                     / DECODE (pay_mode_cd,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1
                                                              )
                                                    )
                                                   )
                                              + 1
                                      END due_installment
                                 FROM (SELECT s.pgid, s.comm_date,
                                              s.last_paid_date,
                                              s.last_paid_inst_no,
                                              s.maturity_date, s.pay_mode_cd,
                                              s.installment_premium,
                                              ADD_MONTHS
                                                 (s.comm_date,
                                                    12
                                                  - (DECODE (s.pay_mode_cd,
                                                             '02', 6,
                                                             '03', 3,
                                                             '04', 1
                                                            )
                                                    )
                                                 ) max_due_date
                                         FROM ins_p_summery s
                                        WHERE (   (    s.last_paid_date >=
                                                           TO_DATE (p_date_fr)
                                                   AND policy_status = '00'
                                                  )
                                               OR policy_status != '00'
                                              )
                                          AND EXISTS (
                                                 SELECT 1
                                                   FROM val_inforce_policy v
                                                  WHERE v.val_year =
                                                                 p_previous_yr
                                                    AND paymode <> '05'
                                                    AND v.pgid = s.pgid)
                                          AND s.pay_mode_cd <> '01'
                                          AND s.comm_date
                                                 BETWEEN ADD_MONTHS
                                                           (ADD_MONTHS
                                                                   (p_date_fr,
                                                                    -12
                                                                   ),
                                                            1
                                                           )
                                                     AND ADD_MONTHS
                                                                   (p_date_to,
                                                                    -1
                                                                   ))) b
                        WHERE a.pgid = b.pgid
                       UNION ALL
                       ---Second Year
                       SELECT    'Commencement date 

from '
                              || ADD_MONTHS (ADD_MONTHS (p_date_fr, -24), 1)
                              || ' to '
                              || ADD_MONTHS (p_date_to, -12)
                                                            commencement_date,
                              3 sl_no,
                              'Second Year Lapse 

policy' description,          NVL (COUNT (1), 0) def_due_policy,
                              0 def_due_premium, 0 def_tot_coll_policy,
                              0 def_full_coll_policy,
                              0 def_partial_coll_policy, 0 def_full_coll_prem,
                              0 def_partial_coll_prem
                         FROM ins_p_summery s
                        WHERE (   (    s.last_paid_date >= TO_DATE (p_date_fr)
                                   AND policy_status = '00'
                                  )
                               OR policy_status != '00'
                              )
                          AND EXISTS (
                                 SELECT 1
                                   FROM val_inforce_policy v
                                  WHERE v.val_year = p_previous_yr
                                    AND paymode <> '05'
                                    AND v.pgid = s.pgid)
                          AND s.comm_date
                                 BETWEEN ADD_MONTHS (ADD_MONTHS (p_date_fr,
                                                                 -24
                                                                ),
                                                     1
                                                    )
                                     AND ADD_MONTHS (p_date_to, -12)
                       UNION ALL
                       SELECT    'Commencement date 

from '
                              || ADD_MONTHS (ADD_MONTHS (p_date_fr, -24), 1)
                              || ' to '
                              || ADD_MONTHS (p_date_to, -12)
                                                            commencement_date,
                              4 sl_no,
                              'Second Year Lapse 

policy premium' description,
                              0 def_due_policy,
                              NVL (SUM (due_installment * installment_premium),
                                   0
                                  ) def_due_premium,
                              0 def_tot_coll_policy, 0 def_full_coll_policy,
                              0 def_partial_coll_policy, 0 def_full_coll_prem,
                              0 def_partial_coll_prem
                         FROM (SELECT pgid, comm_date, last_paid_date,
                                      last_paid_inst_no, maturity_date,
                                      max_due_date,
                                      CASE
                                         WHEN max_due_date <
                                                    p_date_fr
                                            THEN 0
                                         WHEN max_due_date <=
                                                maturity_date
                                            THEN   FLOOR
                                                      ((  (  (  TO_NUMBER
                                                                   (TO_CHAR
                                                                       (max_due_date,
                                                                        'MM'
                                                                       )
                                                                   )
                                                              - TO_NUMBER
                                                                   (TO_CHAR
                                                                       (p_date_fr,
                                                                        'MM'
                                                                       )
                                                                   )
                                                             )
                                                           + CASE
                                                                WHEN TO_NUMBER
                                                                       (TO_CHAR
                                                                           (max_due_date,
                                                                            'MM'
                                                                           )
                                                                       ) <
                                                                       TO_NUMBER
                                                                          (TO_CHAR
                                                                              (p_date_fr,
                                                                               'MM'
                                                                              )
                                                                          )
                                                                   THEN 12
                                                                ELSE 0
                                                             END
                                                          )
                                                        / DECODE (pay_mode_cd,
                                                                  '01', 12,
                                                                  '02', 6,
                                                                  '03', 3,
                                                                  '04', 1
                                                                 )
                                                       )
                                                      )
                                                 + 1
                                         ELSE   FLOOR
                                                   ((  (  (  TO_NUMBER
                                                                (TO_CHAR
                                                                    (maturity_date,
                                                                     'MM'
                                                                    )
                                                                )
                                                           - TO_NUMBER
                                                                (TO_CHAR
                                                                    (p_date_fr,
                                                                     'MM'
                                                                    )
                                                                )
                                                          )
                                                        + CASE
                                                             WHEN TO_NUMBER
                                                                    (TO_CHAR
                                                                        (maturity_date,
                                                                         'MM'
                                                                        )
                                                                    ) <
                                                                    TO_NUMBER
                                                                       (TO_CHAR
                                                                           (p_date_fr,
                                                                            'MM'
                                                                           )
                                                                       )
                                                                THEN 12
                                                             ELSE 0
                                                          END
                                                       )
                                                     / DECODE (pay_mode_cd,
                                                               '01', 12,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1
                                                              )
                                                    )
                                                   )
                                              + 1
                                      END due_installment,
                                      installment_premium
                                 FROM (SELECT s.pgid, s.comm_date,
                                              s.last_paid_date,
                                              s.last_paid_inst_no,
                                              s.maturity_date, s.pay_mode_cd,
                                              s.installment_premium,
                                              ADD_MONTHS
                                                 (s.comm_date,
                                                    24
                                                  - (DECODE (s.pay_mode_cd,
                                                             '01', 12,
                                                             '02', 6,
                                                             '03', 3,
                                                             '04', 1
                                                            )
                                                    )
                                                 ) max_due_date
                                         FROM ins_p_summery s
                                        WHERE (   (    s.last_paid_date >=
                                                           TO_DATE (p_date_fr)
                                                   AND policy_status = '00'
                                                  )
                                               OR policy_status != '00'
                                              )
                                          AND EXISTS (
                                                 SELECT 1
                                                   FROM val_inforce_policy v
                                                  WHERE v.val_year =
                                                                 p_previous_yr
                                                    AND paymode <> '05'
                                                    AND v.pgid = s.pgid)
                                          AND s.comm_date
                                                 BETWEEN ADD_MONTHS
                                                           (ADD_MONTHS
                                                                   (p_date_fr,
                                                                    -24
                                                                   ),
                                                            1
                                                           )
                                                     AND ADD_MONTHS
                                                                   (p_date_to,
                                                                    -12
                                                                   )))
                       UNION ALL
                       SELECT    'Commencement date 

from '
                              || ADD_MONTHS (ADD_MONTHS (p_date_fr, -24), 1)
                              || ' to '
                              || ADD_MONTHS (p_date_to, -12)
                                                            commencement_date,
                              3 sl_no,
                              'Second Year Lapse 

policy' description,          0 def_due_policy, 0 def_due_premium,
                              NVL (COUNT (a.pgid), 0) def_tot_coll_policy,
                              NVL
                                 (SUM (CASE
                                          WHEN a.coll_record >=
                                                             b.due_installment
                                          AND b.due_installment > 0
                                             THEN 1
                                          ELSE 0
                                       END
                                      ),
                                  0
                                 ) def_full_coll_policy,
                              NVL
                                 (SUM (CASE
                                          WHEN a.coll_record <
                                                             b.due_installment
                                           OR b.due_installment = 0
                                             THEN 1
                                          ELSE 0
                                       END
                                      ),
                                  0
                                 ) def_partial_coll_policy,
                              0 def_full_coll_prem, 0 def_partial_coll_prem
                         FROM (SELECT   pgid,
                                        NVL (COUNT (pgid), 0) coll_record,
                                        NVL
                                           (SUM (s_coll_amount),
                                            0
                                           ) s_coll_amount
                                   FROM acc_coll_summery c
                                  WHERE receive_dt BETWEEN p_coll_date_fr
                                                       AND   p_coll_date_to
                                                           + p_grace_period
                                    AND EXISTS (
                                           SELECT 1
                                             FROM (SELECT pgid
                                                     FROM ins_p_summery s
                                                    WHERE (   (    s.last_paid_date >=
                                                                      TO_DATE
                                                                         (p_date_fr
                                                                         )
                                                               AND policy_status =
                                                                          '00'
                                                              )
                                                           OR policy_status !=
                                                                          '00'
                                                          )
                                                      AND EXISTS (
                                                             SELECT 1
                                                               FROM val_inforce_policy v
                                                              WHERE v.val_year =
                                                                       p_previous_yr
                                                                AND paymode <>
                                                                          '05'
                                                                AND v.pgid =
                                                                        s.pgid)
                                                      AND s.comm_date
                                                             BETWEEN ADD_MONTHS
                                                                       (ADD_MONTHS
                                                                           (p_date_fr,
                                                                            -24
                                                                           ),
                                                                        1
                                                                       )
                                                                 AND ADD_MONTHS
                                                                       (p_date_to,
                                                                        -12
                                                                       )) a
                                            WHERE pgid = c.pgid)
                                    AND due_date BETWEEN p_date_fr AND p_date_to
                                    AND s_coll_amount > 0
                               GROUP BY pgid) a,
                              (SELECT pgid, comm_date,
                                      CASE
                                         WHEN max_due_date <
                                                    p_date_fr
                                            THEN 0
                                         WHEN max_due_date <=
                                                maturity_date
                                            THEN   FLOOR
                                                      ((  (  (  TO_NUMBER
                                                                   (TO_CHAR
                                                                       (max_due_date,
                                                                        'MM'
                                                                       )
                                                                   )
                                                              - TO_NUMBER
                                                                   (TO_CHAR
                                                                       (p_date_fr,
                                                                        'MM'
                                                                       )
                                                                   )
                                                             )
                                                           + CASE
                                                                WHEN TO_NUMBER
                                                                       (TO_CHAR
                                                                           (max_due_date,
                                                                            'MM'
                                                                           )
                                                                       ) <
                                                                       TO_NUMBER
                                                                          (TO_CHAR
                                                                              (p_date_fr,
                                                                               'MM'
                                                                              )
                                                                          )
                                                                   THEN 12
                                                                ELSE 0
                                                             END
                                                          )
                                                        / DECODE (pay_mode_cd,
                                                                  '01', 12,
                                                                  '02', 6,
                                                                  '03', 3,
                                                                  '04', 1
                                                                 )
                                                       )
                                                      )
                                                 + 1
                                         ELSE   FLOOR
                                                   ((  (  (  TO_NUMBER
                                                                (TO_CHAR
                                                                    (maturity_date,
                                                                     'MM'
                                                                    )
                                                                )
                                                           - TO_NUMBER
                                                                (TO_CHAR
                                                                    (p_date_fr,
                                                                     'MM'
                                                                    )
                                                                )
                                                          )
                                                        + CASE
                                                             WHEN TO_NUMBER
                                                                    (TO_CHAR
                                                                        (maturity_date,
                                                                         'MM'
                                                                        )
                                                                    ) <
                                                                    TO_NUMBER
                                                                       (TO_CHAR
                                                                           (p_date_fr,
                                                                            'MM'
                                                                           )
                                                                       )
                                                                THEN 12
                                                             ELSE 0
                                                          END
                                                       )
                                                     / DECODE (pay_mode_cd,
                                                               '01', 12,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1
                                                              )
                                                    )
                                                   )
                                              + 1
                                      END due_installment,
                                      installment_premium
                                 FROM (SELECT s.pgid, s.comm_date,
                                              s.last_paid_date,
                                              s.last_paid_inst_no,
                                              s.maturity_date, s.pay_mode_cd,
                                              s.installment_premium,
                                              ADD_MONTHS
                                                 (s.comm_date,
                                                    24
                                                  - (DECODE (s.pay_mode_cd,
                                                             '01', 12,
                                                             '02', 6,
                                                             '03', 3,
                                                             '04', 1
                                                            )
                                                    )
                                                 ) max_due_date
                                         FROM ins_p_summery s
                                        WHERE (   (    s.last_paid_date >=
                                                           TO_DATE (p_date_fr)
                                                   AND policy_status = '00'
                                                  )
                                               OR policy_status != '00'
                                              )
                                          AND EXISTS (
                                                 SELECT 1
                                                   FROM val_inforce_policy v
                                                  WHERE v.val_year =
                                                                 p_previous_yr
                                                    AND paymode <> '05'
                                                    AND v.pgid = s.pgid)
                                          AND s.comm_date
                                                 BETWEEN ADD_MONTHS
                                                           (ADD_MONTHS
                                                                   (p_date_fr,
                                                                    -24
                                                                   ),
                                                            1
                                                           )
                                                     AND ADD_MONTHS
                                                                   (p_date_to,
                                                                    -12
                                                                   ))) b
                        WHERE a.pgid = b.pgid
                       UNION ALL
                       SELECT    'Commencement date 

from '
                              || ADD_MONTHS (ADD_MONTHS (p_date_fr, -24), 1)
                              || ' to '
                              || ADD_MONTHS (p_date_to, -12)
                                                            commencement_date,
                              4 sl_no,
                              'Second Year Lapse 

policy premium' description,
                              0 def_due_policy, 0 def_due_premium,
                              0 def_tot_coll_policy, 0 def_full_coll_policy,
                              0 def_partial_coll_policy,
                              NVL
                                 (SUM
                                     (CASE
                                         WHEN a.coll_record >=
                                                             b.due_installment
                                         AND b.due_installment > 0
                                            THEN s_coll_amount
                                         ELSE 0
                                      END
                                     ),
                                  0
                                 ) def_full_coll_prem,
                              NVL
                                 (SUM
                                     (CASE
                                         WHEN a.coll_record <
                                                             b.due_installment
                                          OR b.due_installment = 0
                                            THEN s_coll_amount
                                         ELSE 0
                                      END
                                     ),
                                  0
                                 ) def_partial_coll_prem
                         FROM (SELECT   pgid,
                                        NVL (COUNT (pgid), 0) coll_record,
                                        NVL
                                           (SUM (s_coll_amount),
                                            0
                                           ) s_coll_amount
                                   FROM acc_coll_summery c
                                  WHERE receive_dt BETWEEN p_coll_date_fr
                                                       AND   p_coll_date_to
                                                           + p_grace_period
                                    AND EXISTS (
                                           SELECT 1
                                             FROM (SELECT pgid
                                                     FROM ins_p_summery s
                                                    WHERE (   (    s.last_paid_date >=
                                                                      TO_DATE
                                                                         (p_date_fr
                                                                         )
                                                               AND policy_status =
                                                                          '00'
                                                              )
                                                           OR policy_status !=
                                                                          '00'
                                                          )
                                                      AND EXISTS (
                                                             SELECT 1
                                                               FROM val_inforce_policy v
                                                              WHERE v.val_year =
                                                                       p_previous_yr
                                                                AND paymode <>
                                                                          '05'
                                                                AND v.pgid =
                                                                        s.pgid)
                                                      AND s.comm_date
                                                             BETWEEN ADD_MONTHS
                                                                       (ADD_MONTHS
                                                                           (p_date_fr,
                                                                            -24
                                                                           ),
                                                                        1
                                                                       )
                                                                 AND ADD_MONTHS
                                                                       (p_date_to,
                                                                        -12
                                                                       )) a
                                            WHERE pgid = c.pgid)
                                    AND due_date BETWEEN p_date_fr AND p_date_to
                                    AND s_coll_amount > 0
                               GROUP BY pgid) a,
                              (SELECT pgid, comm_date,
                                      CASE
                                         WHEN max_due_date <
                                                    p_date_fr
                                            THEN 0
                                         WHEN max_due_date <=
                                                maturity_date
                                            THEN   FLOOR
                                                      ((  (  (  TO_NUMBER
                                                                   (TO_CHAR
                                                                       (max_due_date,
                                                                        'MM'
                                                                       )
                                                                   )
                                                              - TO_NUMBER
                                                                   (TO_CHAR
                                                                       (p_date_fr,
                                                                        'MM'
                                                                       )
                                                                   )
                                                             )
                                                           + CASE
                                                                WHEN TO_NUMBER
                                                                       (TO_CHAR
                                                                           (max_due_date,
                                                                            'MM'
                                                                           )
                                                                       ) <
                                                                       TO_NUMBER
                                                                          (TO_CHAR
                                                                              (p_date_fr,
                                                                               'MM'
                                                                              )
                                                                          )
                                                                   THEN 12
                                                                ELSE 0
                                                             END
                                                          )
                                                        / DECODE (pay_mode_cd,
                                                                  '01', 12,
                                                                  '02', 6,
                                                                  '03', 3,
                                                                  '04', 1
                                                                 )
                                                       )
                                                      )
                                                 + 1
                                         ELSE   FLOOR
                                                   ((  (  (  TO_NUMBER
                                                                (TO_CHAR
                                                                    (maturity_date,
                                                                     'MM'
                                                                    )
                                                                )
                                                           - TO_NUMBER
                                                                (TO_CHAR
                                                                    (p_date_fr,
                                                                     'MM'
                                                                    )
                                                                )
                                                          )
                                                        + CASE
                                                             WHEN TO_NUMBER
                                                                    (TO_CHAR
                                                                        (maturity_date,
                                                                         'MM'
                                                                        )
                                                                    ) <
                                                                    TO_NUMBER
                                                                       (TO_CHAR
                                                                           (p_date_fr,
                                                                            'MM'
                                                                           )
                                                                       )
                                                                THEN 12
                                                             ELSE 0
                                                          END
                                                       )
                                                     / DECODE (pay_mode_cd,
                                                               '01', 12,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1
                                                              )
                                                    )
                                                   )
                                              + 1
                                      END due_installment,
                                      installment_premium
                                 FROM (SELECT s.pgid, s.comm_date,
                                              s.last_paid_date,
                                              s.last_paid_inst_no,
                                              s.maturity_date, s.pay_mode_cd,
                                              s.installment_premium,
                                              ADD_MONTHS
                                                 (s.comm_date,
                                                    24
                                                  - (DECODE (s.pay_mode_cd,
                                                             '01', 12,
                                                             '02', 6,
                                                             '03', 3,
                                                             '04', 1
                                                            )
                                                    )
                                                 ) max_due_date
                                         FROM ins_p_summery s
                                        WHERE (   (    s.last_paid_date >=
                                                           TO_DATE (p_date_fr)
                                                   AND policy_status = '00'
                                                  )
                                               OR policy_status != '00'
                                              )
                                          AND EXISTS (
                                                 SELECT 1
                                                   FROM val_inforce_policy v
                                                  WHERE v.val_year =
                                                                 p_previous_yr
                                                    AND paymode <> '05'
                                                    AND v.pgid = s.pgid)
                                          AND s.comm_date
                                                 BETWEEN ADD_MONTHS
                                                           (ADD_MONTHS
                                                                   (p_date_fr,
                                                                    -24
                                                                   ),
                                                            1
                                                           )
                                                     AND ADD_MONTHS
                                                                   (p_date_to,
                                                                    -12
                                                                   ))) b
                        WHERE a.pgid = b.pgid
                       UNION ALL
                       --Renewal
                       SELECT    'Commencement date 

from Begining'
                              || ' to '
                              || ADD_MONTHS (p_date_to, -24)
                                                            commencement_date,
                              5 sl_no,
                              'Third Year Lapse 

policy' description,          NVL (COUNT (1), 0) def_due_policy,
                              0 def_due_premium, 0 def_tot_coll_policy,
                              0 def_full_coll_policy,
                              0 def_partial_coll_policy, 0 def_full_coll_prem,
                              0 def_partial_coll_prem
                         FROM ins_p_summery s
                        WHERE (   (    s.last_paid_date >= TO_DATE (p_date_fr)
                                   AND policy_status = '00'
                                  )
                               OR policy_status != '00'
                              )
                          AND EXISTS (
                                 SELECT 1
                                   FROM val_inforce_policy v
                                  WHERE v.val_year = p_previous_yr
                                    AND paymode <> '05'
                                    AND v.pgid = s.pgid)
                          AND s.comm_date <= ADD_MONTHS (p_date_to, -24)
                       UNION ALL
                       SELECT    'Commencement date 

from Begining'
                              || ' to '
                              || ADD_MONTHS (p_date_to, -24)
                                                            commencement_date,
                              6 sl_no,
                              'Third Year Lapse 

policy premium' description,
                              0 def_due_policy,
                              NVL (SUM (due_installment * installment_premium),
                                   0
                                  ) def_due_premium,
                              0 def_tot_coll_policy, 0 def_full_coll_policy,
                              0 def_partial_coll_policy, 0 def_full_coll_prem,
                              0 def_partial_coll_prem
                         FROM (SELECT pgid, comm_date, last_paid_date,
                                      last_paid_inst_no, maturity_date,
                                      max_due_date,
                                      CASE
                                         WHEN max_due_date <
                                                    p_date_fr
                                            THEN 0
                                         WHEN max_due_date <=
                                                maturity_date
                                            THEN   FLOOR
                                                      ((  (  (  TO_NUMBER
                                                                   (TO_CHAR
                                                                       (max_due_date,
                                                                        'MM'
                                                                       )
                                                                   )
                                                              - TO_NUMBER
                                                                   (TO_CHAR
                                                                       (p_date_fr,
                                                                        'MM'
                                                                       )
                                                                   )
                                                             )
                                                           + CASE
                                                                WHEN TO_NUMBER
                                                                       (TO_CHAR
                                                                           (max_due_date,
                                                                            'MM'
                                                                           )
                                                                       ) <
                                                                       TO_NUMBER
                                                                          (TO_CHAR
                                                                              (p_date_fr,
                                                                               'MM'
                                                                              )
                                                                          )
                                                                   THEN 12
                                                                ELSE 0
                                                             END
                                                          )
                                                        / DECODE (pay_mode_cd,
                                                                  '01', 12,
                                                                  '02', 6,
                                                                  '03', 3,
                                                                  '04', 1
                                                                 )
                                                       )
                                                      )
                                                 + 1
                                         ELSE   FLOOR
                                                   ((  (  (  TO_NUMBER
                                                                (TO_CHAR
                                                                    (maturity_date,
                                                                     'MM'
                                                                    )
                                                                )
                                                           - TO_NUMBER
                                                                (TO_CHAR
                                                                    (p_date_fr,
                                                                     'MM'
                                                                    )
                                                                )
                                                          )
                                                        + CASE
                                                             WHEN TO_NUMBER
                                                                    (TO_CHAR
                                                                        (maturity_date,
                                                                         'MM'
                                                                        )
                                                                    ) <
                                                                    TO_NUMBER
                                                                       (TO_CHAR
                                                                           (p_date_fr,
                                                                            'MM'
                                                                           )
                                                                       )
                                                                THEN 12
                                                             ELSE 0
                                                          END
                                                       )
                                                     / DECODE (pay_mode_cd,
                                                               '01', 12,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1
                                                              )
                                                    )
                                                   )
                                              + 1
                                      END due_installment,
                                      installment_premium
                                 FROM (SELECT s.pgid, s.comm_date,
                                              s.last_paid_date,
                                              s.last_paid_inst_no,
                                              s.maturity_date, s.pay_mode_cd,
                                              s.installment_premium,
                                              p_date_to max_due_date
                                         FROM ins_p_summery s
                                        WHERE (   (    s.last_paid_date >=
                                                           TO_DATE (p_date_fr)
                                                   AND policy_status = '00'
                                                  )
                                               OR policy_status != '00'
                                              )
                                          AND EXISTS (
                                                 SELECT 1
                                                   FROM val_inforce_policy v
                                                  WHERE v.val_year =
                                                                 p_previous_yr
                                                    AND paymode <> '05'
                                                    AND v.pgid = s.pgid)
                                          AND s.comm_date <=
                                                    ADD_MONTHS (p_date_to,
                                                                -24)))
                       UNION ALL
                       SELECT    'Commencement date 

from Begining'
                              || ' to '
                              || ADD_MONTHS (p_date_to, -24)
                                                            commencement_date,
                              5 sl_no,
                              'Third Year Lapse 

policy' description,          0 def_due_policy, 0 def_due_premium,
                              NVL (COUNT (a.pgid), 0) def_tot_coll_policy,
                              NVL
                                 (SUM (CASE
                                          WHEN a.coll_record >=
                                                             b.due_installment
                                          AND b.due_installment > 0
                                             THEN 1
                                          ELSE 0
                                       END
                                      ),
                                  0
                                 ) def_full_coll_policy,
                              NVL
                                 (SUM (CASE
                                          WHEN a.coll_record <
                                                             b.due_installment
                                           OR b.due_installment = 0
                                             THEN 1
                                          ELSE 0
                                       END
                                      ),
                                  0
                                 ) def_partial_coll_policy,
                              0 def_full_coll_prem, 0 def_partial_coll_prem
                         FROM (SELECT   pgid, COUNT (pgid) coll_record,
                                        SUM (r_coll_amount) r_coll_amount
                                   FROM acc_coll_summery c
                                  WHERE receive_dt BETWEEN p_coll_date_fr
                                                       AND   p_coll_date_to
                                                           + p_grace_period
                                    AND EXISTS (
                                           SELECT 1
                                             FROM (SELECT pgid
                                                     FROM ins_p_summery s
                                                    WHERE (   (    s.last_paid_date >=
                                                                      TO_DATE
                                                                         (p_date_fr
                                                                         )
                                                               AND policy_status =
                                                                          '00'
                                                              )
                                                           OR policy_status !=
                                                                          '00'
                                                          )
                                                      AND EXISTS (
                                                             SELECT 1
                                                               FROM val_inforce_policy v
                                                              WHERE v.val_year =
                                                                       p_previous_yr
                                                                AND paymode <>
                                                                          '05'
                                                                AND v.pgid =
                                                                        s.pgid)
                                                      AND s.comm_date <=
                                                             ADD_MONTHS
                                                                   (p_date_to,
                                                                    -24
                                                                   )) a
                                            WHERE pgid = c.pgid)
                                    AND due_date BETWEEN p_date_fr AND p_date_to
                                    AND r_coll_amount > 0
                               GROUP BY pgid) a,
                              (SELECT pgid,
                                      CASE
                                         WHEN max_due_date <
                                                    p_date_fr
                                            THEN 0
                                         WHEN max_due_date <=
                                                maturity_date
                                            THEN   FLOOR
                                                      ((  (  (  TO_NUMBER
                                                                   (TO_CHAR
                                                                       (max_due_date,
                                                                        'MM'
                                                                       )
                                                                   )
                                                              - TO_NUMBER
                                                                   (TO_CHAR
                                                                       (p_date_fr,
                                                                        'MM'
                                                                       )
                                                                   )
                                                             )
                                                           + CASE
                                                                WHEN TO_NUMBER
                                                                       (TO_CHAR
                                                                           (max_due_date,
                                                                            'MM'
                                                                           )
                                                                       ) <
                                                                       TO_NUMBER
                                                                          (TO_CHAR
                                                                              (p_date_fr,
                                                                               'MM'
                                                                              )
                                                                          )
                                                                   THEN 12
                                                                ELSE 0
                                                             END
                                                          )
                                                        / DECODE (pay_mode_cd,
                                                                  '01', 12,
                                                                  '02', 6,
                                                                  '03', 3,
                                                                  '04', 1
                                                                 )
                                                       )
                                                      )
                                                 + 1
                                         ELSE   FLOOR
                                                   ((  (  (  TO_NUMBER
                                                                (TO_CHAR
                                                                    (maturity_date,
                                                                     'MM'
                                                                    )
                                                                )
                                                           - TO_NUMBER
                                                                (TO_CHAR
                                                                    (p_date_fr,
                                                                     'MM'
                                                                    )
                                                                )
                                                          )
                                                        + CASE
                                                             WHEN TO_NUMBER
                                                                    (TO_CHAR
                                                                        (maturity_date,
                                                                         'MM'
                                                                        )
                                                                    ) <
                                                                    TO_NUMBER
                                                                       (TO_CHAR
                                                                           (p_date_fr,
                                                                            'MM'
                                                                           )
                                                                       )
                                                                THEN 12
                                                             ELSE 0
                                                          END
                                                       )
                                                     / DECODE (pay_mode_cd,
                                                               '01', 12,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1
                                                              )
                                                    )
                                                   )
                                              + 1
                                      END due_installment,
                                      installment_premium
                                 FROM (SELECT s.pgid, s.comm_date,
                                              s.last_paid_date,
                                              s.last_paid_inst_no,
                                              s.maturity_date, s.pay_mode_cd,
                                              s.installment_premium,
                                              p_date_to max_due_date
                                         FROM ins_p_summery s
                                        WHERE (   (    s.last_paid_date >=
                                                           TO_DATE (p_date_fr)
                                                   AND policy_status = '00'
                                                  )
                                               OR policy_status != '00'
                                              )
                                          AND EXISTS (
                                                 SELECT 1
                                                   FROM val_inforce_policy v
                                                  WHERE v.val_year =
                                                                 p_previous_yr
                                                    AND paymode <> '05'
                                                    AND v.pgid = s.pgid)
                                          AND s.comm_date <=
                                                    ADD_MONTHS (p_date_to,
                                                                -24))) b
                        WHERE a.pgid = b.pgid
                       UNION ALL
                       SELECT    'Commencement date 

from Begining'
                              || ' to '
                              || ADD_MONTHS (p_date_to, -24)
                                                            commencement_date,
                              6 sl_no,
                              'Third Year Lapse 

policy premium' description,
                              0 def_due_policy, 0 def_due_premium,
                              0 def_tot_coll_policy, 0 def_full_coll_policy,
                              0 def_partial_coll_policy,
                              NVL
                                 (SUM
                                     (CASE
                                         WHEN a.coll_record >=
                                                             b.due_installment
                                         AND b.due_installment > 0
                                            THEN r_coll_amount
                                         ELSE 0
                                      END
                                     ),
                                  0
                                 ) def_full_coll_prem,
                              NVL
                                 (SUM
                                     (CASE
                                         WHEN a.coll_record <
                                                             b.due_installment
                                          OR b.due_installment = 0
                                            THEN r_coll_amount
                                         ELSE 0
                                      END
                                     ),
                                  0
                                 ) def_partial_coll_prem
                         FROM (SELECT   pgid,
                                        NVL (COUNT (pgid), 0) coll_record,
                                        NVL
                                           (SUM (r_coll_amount),
                                            0
                                           ) r_coll_amount
                                   FROM acc_coll_summery c
                                  WHERE receive_dt BETWEEN p_coll_date_fr
                                                       AND   p_coll_date_to
                                                           + p_grace_period
                                    AND EXISTS (
                                           SELECT 1
                                             FROM (SELECT pgid
                                                     FROM ins_p_summery s
                                                    WHERE (   (    s.last_paid_date >=
                                                                      TO_DATE
                                                                         (p_date_fr
                                                                         )
                                                               AND policy_status =
                                                                          '00'
                                                              )
                                                           OR policy_status !=
                                                                          '00'
                                                          )
                                                      AND EXISTS (
                                                             SELECT 1
                                                               FROM val_inforce_policy v
                                                              WHERE v.val_year =
                                                                       p_previous_yr
                                                                AND paymode <>
                                                                          '05'
                                                                AND v.pgid =
                                                                        s.pgid)
                                                      AND s.comm_date <=
                                                             ADD_MONTHS
                                                                   (p_date_to,
                                                                    -24
                                                                   )) a
                                            WHERE pgid = c.pgid)
                                    AND due_date BETWEEN p_date_fr AND p_date_to
                                    AND r_coll_amount > 0
                               GROUP BY pgid) a,
                              (SELECT pgid,
                                      CASE
                                         WHEN max_due_date <
                                                    p_date_fr
                                            THEN 0
                                         WHEN max_due_date <=
                                                maturity_date
                                            THEN   FLOOR
                                                      ((  (  (  TO_NUMBER
                                                                   (TO_CHAR
                                                                       (max_due_date,
                                                                        'MM'
                                                                       )
                                                                   )
                                                              - TO_NUMBER
                                                                   (TO_CHAR
                                                                       (p_date_fr,
                                                                        'MM'
                                                                       )
                                                                   )
                                                             )
                                                           + CASE
                                                                WHEN TO_NUMBER
                                                                       (TO_CHAR
                                                                           (max_due_date,
                                                                            'MM'
                                                                           )
                                                                       ) <
                                                                       TO_NUMBER
                                                                          (TO_CHAR
                                                                              (p_date_fr,
                                                                               'MM'
                                                                              )
                                                                          )
                                                                   THEN 12
                                                                ELSE 0
                                                             END
                                                          )
                                                        / DECODE (pay_mode_cd,
                                                                  '01', 12,
                                                                  '02', 6,
                                                                  '03', 3,
                                                                  '04', 1
                                                                 )
                                                       )
                                                      )
                                                 + 1
                                         ELSE   FLOOR
                                                   ((  (  (  TO_NUMBER
                                                                (TO_CHAR
                                                                    (maturity_date,
                                                                     'MM'
                                                                    )
                                                                )
                                                           - TO_NUMBER
                                                                (TO_CHAR
                                                                    (p_date_fr,
                                                                     'MM'
                                                                    )
                                                                )
                                                          )
                                                        + CASE
                                                             WHEN TO_NUMBER
                                                                    (TO_CHAR
                                                                        (maturity_date,
                                                                         'MM'
                                                                        )
                                                                    ) <
                                                                    TO_NUMBER
                                                                       (TO_CHAR
                                                                           (p_date_fr,
                                                                            'MM'
                                                                           )
                                                                       )
                                                                THEN 12
                                                             ELSE 0
                                                          END
                                                       )
                                                     / DECODE (pay_mode_cd,
                                                               '01', 12,
                                                               '02', 6,
                                                               '03', 3,
                                                               '04', 1
                                                              )
                                                    )
                                                   )
                                              + 1
                                      END due_installment,
                                      installment_premium
                                 FROM (SELECT s.pgid, s.comm_date,
                                              s.last_paid_date,
                                              s.last_paid_inst_no,
                                              s.maturity_date, s.pay_mode_cd,
                                              s.installment_premium,
                                              p_date_to max_due_date
                                         FROM ins_p_summery s
                                        WHERE (   (    s.last_paid_date >=
                                                           TO_DATE (p_date_fr)
                                                   AND policy_status = '00'
                                                  )
                                               OR policy_status != '00'
                                              )
                                          AND EXISTS (
                                                 SELECT 1
                                                   FROM val_inforce_policy v
                                                  WHERE v.val_year =
                                                                 p_previous_yr
                                                    AND paymode <> '05'
                                                    AND v.pgid = s.pgid)
                                          AND s.comm_date <=
                                                    ADD_MONTHS (p_date_to,
                                                                -24))) b
                        WHERE a.pgid = b.pgid)
             GROUP BY    'This Report is generated on'
                      || SYSDATE
                      || '.'
                      || 'Where due date from '
                      || p_date_fr
                      || ' to '
                      || p_date_to
                      || ' And Collection date from'
                      || p_coll_date_fr
                      || ' to '
                      || p_coll_date_fr
                      || ' And grace period is '
                      || p_grace_period,
                      commencement_date,
                      sl_no,
                      description
             ORDER BY sl_no)
         LOOP
            v_coll_rec.report_parameter := i.report_parameter;
            v_coll_rec.commencement_date := i.commencement_date;
            v_coll_rec.sl_no := i.sl_no;
            v_coll_rec.description := i.description;
            v_coll_rec.inforce_policy := v_inforce_policy;
            v_coll_rec.due_pol_or_prem := i.due;
            v_coll_rec.total_collection := i.collection;
            v_coll_rec.lapse_policy := i.lapse;
            v_coll_rec.lapse_ratio := i.lapse_ratio;
            v_coll_rec.full_collection := i.full_collection;
            v_coll_rec.partial_collection := i.partial_collection;
            PIPE ROW (v_coll_rec);
         END LOOP;
      END IF;
   END;
END pkg_valuation_report;
/


--
-- PKG_VAL_IDRA_LAPSE_REPORT  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.pkg_val_idra_lapse_report
IS
   FUNCTION fun_idra_lapse_ratio (p_date_fr         DATE,
                                  p_date_to         DATE,
                                  p_coll_date_fr    DATE,
                                  p_coll_date_to    DATE,
                                  p_grace_period    NUMBER,
                                  p_previous_yr     VARCHAR2)
      RETURN tp_lapse_ratio_tab
      PIPELINED
   IS
      v_coll_rec         tp_lapse_ratio_rec;
      v_inforce_policy   NUMBER (10);
   BEGIN
      SELECT   COUNT (1)
        INTO   v_inforce_policy
        FROM   val_inforce_policy
       WHERE   val_year = p_previous_yr;

      IF v_inforce_policy > 0
      THEN
         FOR i
         IN (  SELECT   ser_off,
                        org_off,
                        def_due_policy,
                        def_due_premium,
                        def_tot_coll_policy,
                        def_full_coll_policy,
                        def_partial_coll_policy,
                        def_full_coll_prem,
                        def_partial_coll_prem,
                        no_2nd_due_policy,
                        no_2nd_due_premium,
                        no_2nd_tot_coll_policy,
                        no_2nd_full_coll_policy,
                        no_2nd_partial_coll_policy,
                        no_2nd_full_coll_prem,
                        no_2nd_partial_coll_prem,
                        renewal_due_policy,
                        renewal_due_premium,
                        renewal_tot_coll_policy,
                        renewal_full_coll_policy,
                        renewal_partial_coll_policy,
                        renewal_full_coll_prem,
                        renewal_partial_coll_prem
                 FROM   (  SELECT   ser_off,
                                    org_off,
                                    SUM (def_due_policy) def_due_policy,
                                    SUM (def_due_premium) def_due_premium,
                                    SUM (def_tot_coll_policy) def_tot_coll_policy,
                                    SUM (def_full_coll_policy)
                                       def_full_coll_policy,
                                    SUM (def_partial_coll_policy)
                                       def_partial_coll_policy,
                                    SUM (def_full_coll_prem) def_full_coll_prem,
                                    SUM (def_partial_coll_prem)
                                       def_partial_coll_prem,
                                    SUM (no_2nd_due_policy) no_2nd_due_policy,
                                    SUM (no_2nd_due_premium) no_2nd_due_premium,
                                    SUM (no_2nd_tot_coll_policy)
                                       no_2nd_tot_coll_policy,
                                    SUM (no_2nd_full_coll_policy)
                                       no_2nd_full_coll_policy,
                                    SUM (no_2nd_partial_coll_policy)
                                       no_2nd_partial_coll_policy,
                                    SUM (no_2nd_full_coll_prem)
                                       no_2nd_full_coll_prem,
                                    SUM (no_2nd_partial_coll_prem)
                                       no_2nd_partial_coll_prem,
                                    SUM (renewal_due_policy) renewal_due_policy,
                                    SUM (renewal_due_premium) renewal_due_premium,
                                    SUM (renewal_tot_coll_policy)
                                       renewal_tot_coll_policy,
                                    SUM (renewal_full_coll_policy)
                                       renewal_full_coll_policy,
                                    SUM (renewal_partial_coll_policy)
                                       renewal_partial_coll_policy,
                                    SUM (renewal_full_coll_prem)
                                       renewal_full_coll_prem,
                                    SUM (renewal_partial_coll_prem)
                                       renewal_partial_coll_prem
                             -- First deffered Year
                             FROM   (  SELECT   f_office(FUN_FIND_SERVICE_OFF(FUN_FIND_SALES_OFFICE(OFFICE_CD)))
                                                   ser_off,
                                                F_OFFICE(FUN_FIND_SALES_OFFICE (
                                                            OFFICE_CD
                                                         ))
                                                   org_off,
                                                SUM (def_due_policy) def_due_policy,
                                                SUM (def_due_premium)
                                                   def_due_premium,
                                                SUM (def_tot_coll_policy)
                                                   def_tot_coll_policy,
                                                SUM (def_full_coll_policy)
                                                   def_full_coll_policy,
                                                SUM (def_partial_coll_policy)
                                                   def_partial_coll_policy,
                                                SUM (def_full_coll_prem)
                                                   def_full_coll_prem,
                                                SUM (def_partial_coll_prem)
                                                   def_partial_coll_prem,
                                                0 no_2nd_due_policy,
                                                0 no_2nd_due_premium,
                                                0 no_2nd_tot_coll_policy,
                                                0 no_2nd_full_coll_policy,
                                                0 no_2nd_partial_coll_policy,
                                                0 no_2nd_full_coll_prem,
                                                0 no_2nd_partial_coll_prem,
                                                0 renewal_due_policy,
                                                0 renewal_due_premium,
                                                0 renewal_tot_coll_policy,
                                                0 renewal_full_coll_policy,
                                                0 renewal_partial_coll_policy,
                                                0 renewal_full_coll_prem,
                                                0 renewal_partial_coll_prem
                                         FROM   (  SELECT   f_pgid_to_office (s.pgid)
                                                               office_cd,
                                                            NVL (COUNT (s.pgid), 0)
                                                               def_due_policy,
                                                            0 def_due_premium,
                                                            0 def_tot_coll_policy,
                                                            0 def_full_coll_policy,
                                                            0 def_partial_coll_policy,
                                                            0 def_full_coll_prem,
                                                            0 def_partial_coll_prem
                                                     FROM   ins_p_summery s
                                                    WHERE   ( (s.last_paid_date >=
                                                                  TO_DATE (p_date_fr)
                                                               AND policy_status =
                                                                     '00')
                                                             OR policy_status != '00')
                                                            AND EXISTS
                                                                  (SELECT   1
                                                                     FROM   val_inforce_policy v
                                                                    WHERE   v.val_year =
                                                                               p_previous_yr
                                                                            AND paymode <>
                                                                                  '05'
                                                                            AND v.pgid =
                                                                                  s.pgid)
                                                            AND s.pay_mode_cd <> '01'
                                                            AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                       ADD_MONTHS (
                                                                                          p_date_fr,
                                                                                          -12
                                                                                       ),
                                                                                       1
                                                                                    )
                                                                                AND  ADD_MONTHS (
                                                                                        p_date_to,
                                                                                        -1
                                                                                     )
                                                 GROUP BY   f_pgid_to_office (
                                                               s.pgid
                                                            )
                                                 UNION ALL
                                                   SELECT   office_cd,
                                                            0 def_due_policy,
                                                            NVL (
                                                               SUM(due_installment
                                                                   * installment_premium),
                                                               0
                                                            )
                                                               def_due_premium,
                                                            0 def_tot_coll_policy,
                                                            0 def_full_coll_policy,
                                                            0 def_partial_coll_policy,
                                                            0 def_full_coll_prem,
                                                            0 def_partial_coll_prem
                                                     FROM   (SELECT   office_cd,
                                                                      pgid,
                                                                      comm_date,
                                                                      last_paid_date,
                                                                      last_paid_inst_no,
                                                                      maturity_date,
                                                                      max_due_date,
                                                                      CASE
                                                                         WHEN max_due_date <
                                                                                 p_date_fr
                                                                         THEN
                                                                            0
                                                                         WHEN max_due_date <=
                                                                                 maturity_date
                                                                         THEN
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     max_due_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             max_due_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / TO_NUMBER(DECODE (
                                                                                                   pay_mode_cd,
                                                                                                   '02',
                                                                                                   6,
                                                                                                   '03',
                                                                                                   3,
                                                                                                   '04',
                                                                                                   1
                                                                                                ))))
                                                                            + 1
                                                                         ELSE
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     maturity_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             maturity_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / TO_NUMBER(DECODE (
                                                                                                   pay_mode_cd,
                                                                                                   '02',
                                                                                                   6,
                                                                                                   '03',
                                                                                                   3,
                                                                                                   '04',
                                                                                                   1
                                                                                                ))))
                                                                            + 1
                                                                      END
                                                                         due_installment,
                                                                      installment_premium
                                                               FROM   (SELECT   s.office_cd,
                                                                                s.pgid,
                                                                                s.comm_date,
                                                                                s.last_paid_date,
                                                                                s.last_paid_inst_no,
                                                                                s.maturity_date,
                                                                                s.pay_mode_cd,
                                                                                s.installment_premium,
                                                                                ADD_MONTHS (
                                                                                   s.comm_date,
                                                                                   12
                                                                                   - (DECODE (
                                                                                         s.pay_mode_cd,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      ))
                                                                                )
                                                                                   max_due_date
                                                                         FROM   ins_p_summery s
                                                                        WHERE   ( (s.last_paid_date >=
                                                                                      TO_DATE(p_date_fr)
                                                                                   AND policy_status =
                                                                                         '00')
                                                                                 OR policy_status !=
                                                                                      '00')
                                                                                AND EXISTS
                                                                                      (SELECT   1
                                                                                         FROM   val_inforce_policy v
                                                                                        WHERE   v.val_year =
                                                                                                   p_previous_yr
                                                                                                AND paymode <>
                                                                                                      '05'
                                                                                                AND v.pgid =
                                                                                                      s.pgid)
                                                                                AND s.pay_mode_cd <>
                                                                                      '01'
                                                                                AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                                           ADD_MONTHS (
                                                                                                              p_date_fr,
                                                                                                              -12
                                                                                                           ),
                                                                                                           1
                                                                                                        )
                                                                                                    AND  ADD_MONTHS (
                                                                                                            p_date_to,
                                                                                                            -1
                                                                                                         )))
                                                 GROUP BY   office_cd
                                                 UNION ALL
                                                   SELECT   f_pgid_to_office (a.pgid)
                                                               office_cd,
                                                            0 def_due_policy,
                                                            0 def_due_premium,
                                                            NVL (COUNT (a.pgid), 0)
                                                               def_tot_coll_policy,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record >=
                                                                              b.due_installment
                                                                           AND b.due_installment >
                                                                                 0
                                                                      THEN
                                                                         1
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               def_full_coll_policy,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record <
                                                                              b.due_installment
                                                                           OR b.due_installment =
                                                                                0
                                                                      THEN
                                                                         1
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               def_partial_coll_policy,
                                                            0 def_full_coll_prem,
                                                            0 def_partial_coll_prem
                                                     FROM   (  SELECT   pgid,
                                                                        NVL (
                                                                           COUNT (pgid),
                                                                           0
                                                                        )
                                                                           coll_record,
                                                                        NVL (
                                                                           SUM(d_coll_amount),
                                                                           0
                                                                        )
                                                                           d_coll_amount
                                                                 FROM   acc_coll_summery c
                                                                WHERE   receive_dt BETWEEN p_coll_date_fr
                                                                                       AND  p_coll_date_to
                                                                                            + p_grace_period
                                                                        AND EXISTS
                                                                              (SELECT   1
                                                                                 FROM   (SELECT   pgid
                                                                                           FROM   ins_p_summery s
                                                                                          WHERE   ( (s.last_paid_date >=
                                                                                                        TO_DATE(p_date_fr)
                                                                                                     AND policy_status =
                                                                                                           '00')
                                                                                                   OR policy_status !=
                                                                                                        '00')
                                                                                                  AND s.pay_mode_cd <>
                                                                                                        '01'
                                                                                                  AND EXISTS
                                                                                                        (SELECT   1
                                                                                                           FROM   val_inforce_policy v
                                                                                                          WHERE   v.val_year =
                                                                                                                     p_previous_yr
                                                                                                                  AND paymode <>
                                                                                                                        '05'
                                                                                                                  AND v.pgid =
                                                                                                                        s.pgid)
                                                                                                  AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                                                             ADD_MONTHS (
                                                                                                                                p_date_fr,
                                                                                                                                -12
                                                                                                                             ),
                                                                                                                             1
                                                                                                                          )
                                                                                                                      AND  ADD_MONTHS (
                                                                                                                              p_date_to,
                                                                                                                              -1
                                                                                                                           ))
                                                                                        a
                                                                                WHERE   pgid =
                                                                                           c.pgid)
                                                                        AND due_date BETWEEN p_date_fr
                                                                                         AND  p_date_to
                                                                        AND d_coll_amount >
                                                                              0
                                                             GROUP BY   pgid) a,
                                                            (SELECT   pgid,
                                                                      CASE
                                                                         WHEN max_due_date <
                                                                                 p_date_fr
                                                                         THEN
                                                                            0
                                                                         WHEN max_due_date <=
                                                                                 maturity_date
                                                                         THEN
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     max_due_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             max_due_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                         ELSE
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     maturity_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             maturity_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                      END
                                                                         due_installment
                                                               FROM   (SELECT   s.pgid,
                                                                                s.comm_date,
                                                                                s.last_paid_date,
                                                                                s.last_paid_inst_no,
                                                                                s.maturity_date,
                                                                                s.pay_mode_cd,
                                                                                s.installment_premium,
                                                                                ADD_MONTHS (
                                                                                   s.comm_date,
                                                                                   12
                                                                                   - (DECODE (
                                                                                         s.pay_mode_cd,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      ))
                                                                                )
                                                                                   max_due_date
                                                                         FROM   ins_p_summery s
                                                                        WHERE   ( (s.last_paid_date >=
                                                                                      TO_DATE(p_date_fr)
                                                                                   AND policy_status =
                                                                                         '00')
                                                                                 OR policy_status !=
                                                                                      '00')
                                                                                AND EXISTS
                                                                                      (SELECT   1
                                                                                         FROM   val_inforce_policy v
                                                                                        WHERE   v.val_year =
                                                                                                   p_previous_yr
                                                                                                AND paymode <>
                                                                                                      '05'
                                                                                                AND v.pgid =
                                                                                                      s.pgid)
                                                                                AND s.pay_mode_cd <>
                                                                                      '01'
                                                                                AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                                           ADD_MONTHS (
                                                                                                              p_date_fr,
                                                                                                              -12
                                                                                                           ),
                                                                                                           1
                                                                                                        )
                                                                                                    AND  ADD_MONTHS (
                                                                                                            p_date_to,
                                                                                                            -1
                                                                                                         )))
                                                            b
                                                    WHERE   a.pgid = b.pgid
                                                 GROUP BY   f_pgid_to_office (
                                                               a.pgid
                                                            )
                                                 UNION ALL
                                                   SELECT   f_pgid_to_office (a.pgid)
                                                               office_cd,
                                                            0 def_due_policy,
                                                            0 def_due_premium,
                                                            0 def_tot_coll_policy,
                                                            0 def_full_coll_policy,
                                                            0 def_partial_coll_policy,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record >=
                                                                              b.due_installment
                                                                           AND b.due_installment >
                                                                                 0
                                                                      THEN
                                                                         d_coll_amount
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               def_full_coll_prem,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record <
                                                                              b.due_installment
                                                                           OR b.due_installment =
                                                                                0
                                                                      THEN
                                                                         d_coll_amount
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               def_partial_coll_prem
                                                     FROM   (  SELECT   pgid,
                                                                        NVL (
                                                                           COUNT (pgid),
                                                                           0
                                                                        )
                                                                           coll_record,
                                                                        NVL (
                                                                           SUM(d_coll_amount),
                                                                           0
                                                                        )
                                                                           d_coll_amount
                                                                 FROM   acc_coll_summery c
                                                                WHERE   receive_dt BETWEEN p_coll_date_fr
                                                                                       AND  p_coll_date_to
                                                                                            + p_grace_period
                                                                        AND EXISTS
                                                                              (SELECT   1
                                                                                 FROM   (SELECT   pgid
                                                                                           FROM   ins_p_summery s
                                                                                          WHERE   ( (s.last_paid_date >=
                                                                                                        TO_DATE(p_date_fr)
                                                                                                     AND policy_status =
                                                                                                           '00')
                                                                                                   OR policy_status !=
                                                                                                        '00')
                                                                                                  AND s.pay_mode_cd <>
                                                                                                        '01'
                                                                                                  AND EXISTS
                                                                                                        (SELECT   1
                                                                                                           FROM   val_inforce_policy v
                                                                                                          WHERE   v.val_year =
                                                                                                                     p_previous_yr
                                                                                                                  AND paymode <>
                                                                                                                        '05'
                                                                                                                  AND v.pgid =
                                                                                                                        s.pgid)
                                                                                                  AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                                                             ADD_MONTHS (
                                                                                                                                p_date_fr,
                                                                                                                                -12
                                                                                                                             ),
                                                                                                                             1
                                                                                                                          )
                                                                                                                      AND  ADD_MONTHS (
                                                                                                                              p_date_to,
                                                                                                                              -1
                                                                                                                           ))
                                                                                        a
                                                                                WHERE   pgid =
                                                                                           c.pgid)
                                                                        AND due_date BETWEEN p_date_fr
                                                                                         AND  p_date_to
                                                                        AND d_coll_amount >
                                                                              0
                                                             GROUP BY   pgid) a,
                                                            (SELECT   pgid,
                                                                      CASE
                                                                         WHEN max_due_date <
                                                                                 p_date_fr
                                                                         THEN
                                                                            0
                                                                         WHEN max_due_date <=
                                                                                 maturity_date
                                                                         THEN
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     max_due_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             max_due_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                         ELSE
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     maturity_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             maturity_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                      END
                                                                         due_installment
                                                               FROM   (SELECT   s.pgid,
                                                                                s.comm_date,
                                                                                s.last_paid_date,
                                                                                s.last_paid_inst_no,
                                                                                s.maturity_date,
                                                                                s.pay_mode_cd,
                                                                                s.installment_premium,
                                                                                ADD_MONTHS (
                                                                                   s.comm_date,
                                                                                   12
                                                                                   - (DECODE (
                                                                                         s.pay_mode_cd,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      ))
                                                                                )
                                                                                   max_due_date
                                                                         FROM   ins_p_summery s
                                                                        WHERE   ( (s.last_paid_date >=
                                                                                      TO_DATE(p_date_fr)
                                                                                   AND policy_status =
                                                                                         '00')
                                                                                 OR policy_status !=
                                                                                      '00')
                                                                                AND EXISTS
                                                                                      (SELECT   1
                                                                                         FROM   val_inforce_policy v
                                                                                        WHERE   v.val_year =
                                                                                                   p_previous_yr
                                                                                                AND paymode <>
                                                                                                      '05'
                                                                                                AND v.pgid =
                                                                                                      s.pgid)
                                                                                AND s.pay_mode_cd <>
                                                                                      '01'
                                                                                AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                                           ADD_MONTHS (
                                                                                                              p_date_fr,
                                                                                                              -12
                                                                                                           ),
                                                                                                           1
                                                                                                        )
                                                                                                    AND  ADD_MONTHS (
                                                                                                            p_date_to,
                                                                                                            -1
                                                                                                         )))
                                                            b
                                                    WHERE   a.pgid = b.pgid
                                                 GROUP BY   f_pgid_to_office (
                                                               a.pgid
                                                            ))
                                     GROUP BY   f_office(FUN_FIND_SERVICE_OFF(FUN_FIND_SALES_OFFICE(OFFICE_CD))),
                                                F_OFFICE(FUN_FIND_SALES_OFFICE (
                                                            OFFICE_CD
                                                         ))
                                     -- Second Year
                                     UNION ALL
                                       SELECT   f_office(FUN_FIND_SERVICE_OFF(FUN_FIND_SALES_OFFICE(OFFICE_CD)))
                                                   ser_off,
                                                F_OFFICE(FUN_FIND_SALES_OFFICE (
                                                            OFFICE_CD
                                                         ))
                                                   org_off,
                                                0 def_due_policy,
                                                0 def_due_premium,
                                                0 def_tot_coll_policy,
                                                0 def_full_coll_policy,
                                                0 def_partial_coll_policy,
                                                0 def_full_coll_prem,
                                                0 def_partial_coll_prem,
                                                SUM (no_2nd_due_policy)
                                                   no_2nd_due_policy,
                                                SUM (no_2nd_due_premium)
                                                   no_2nd_due_premium,
                                                SUM (no_2nd_tot_coll_policy)
                                                   no_2nd_tot_coll_policy,
                                                SUM (no_2nd_full_coll_policy)
                                                   no_2nd_full_coll_policy,
                                                SUM (no_2nd_partial_coll_policy)
                                                   no_2nd_partial_coll_policy,
                                                SUM (no_2nd_full_coll_prem)
                                                   no_2nd_full_coll_prem,
                                                SUM (no_2nd_partial_coll_prem)
                                                   no_2nd_partial_coll_prem,
                                                0 renewal_due_policy,
                                                0 renewal_due_premium,
                                                0 renewal_tot_coll_policy,
                                                0 renewal_full_coll_policy,
                                                0 renewal_partial_coll_policy,
                                                0 renewal_full_coll_prem,
                                                0 renewal_partial_coll_prem
                                         FROM   (  SELECT   f_pgid_to_office (s.pgid)
                                                               office_cd,
                                                            NVL (COUNT (s.pgid), 0)
                                                               no_2nd_due_policy,
                                                            0 no_2nd_due_premium,
                                                            0 no_2nd_tot_coll_policy,
                                                            0 no_2nd_full_coll_policy,
                                                            0
                                                               no_2nd_partial_coll_policy,
                                                            0 no_2nd_full_coll_prem,
                                                            0
                                                               no_2nd_partial_coll_prem
                                                     FROM   ins_p_summery s
                                                    WHERE   ( (s.last_paid_date >=
                                                                  TO_DATE (p_date_fr)
                                                               AND policy_status =
                                                                     '00')
                                                             OR policy_status != '00')
                                                            AND EXISTS
                                                                  (SELECT   1
                                                                     FROM   val_inforce_policy v
                                                                    WHERE   v.val_year =
                                                                               p_previous_yr
                                                                            AND paymode <>
                                                                                  '05'
                                                                            AND v.pgid =
                                                                                  s.pgid)
                                                            AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                       ADD_MONTHS (
                                                                                          p_date_fr,
                                                                                          -24
                                                                                       ),
                                                                                       1
                                                                                    )
                                                                                AND  ADD_MONTHS (
                                                                                        p_date_to,
                                                                                        -12
                                                                                     )
                                                 GROUP BY   f_pgid_to_office (
                                                               s.pgid
                                                            )
                                                 UNION ALL
                                                   SELECT   f_pgid_to_office (pgid)
                                                               office_cd,
                                                            0 no_2nd_due_policy,
                                                            NVL (
                                                               SUM(due_installment
                                                                   * installment_premium),
                                                               0
                                                            )
                                                               no_2nd_due_premium,
                                                            0 no_2nd_tot_coll_policy,
                                                            0 no_2nd_full_coll_policy,
                                                            0
                                                               no_2nd_partial_coll_policy,
                                                            0 no_2nd_full_coll_prem,
                                                            0
                                                               no_2nd_partial_coll_prem
                                                     FROM   (SELECT   pgid,
                                                                      comm_date,
                                                                      last_paid_date,
                                                                      last_paid_inst_no,
                                                                      maturity_date,
                                                                      max_due_date,
                                                                      CASE
                                                                         WHEN max_due_date <
                                                                                 p_date_fr
                                                                         THEN
                                                                            0
                                                                         WHEN max_due_date <=
                                                                                 maturity_date
                                                                         THEN
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     max_due_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             max_due_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                         ELSE
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     maturity_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             maturity_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                      END
                                                                         due_installment,
                                                                      installment_premium
                                                               FROM   (SELECT   s.pgid,
                                                                                s.comm_date,
                                                                                s.last_paid_date,
                                                                                s.last_paid_inst_no,
                                                                                s.maturity_date,
                                                                                s.pay_mode_cd,
                                                                                s.installment_premium,
                                                                                ADD_MONTHS (
                                                                                   s.comm_date,
                                                                                   24
                                                                                   - (DECODE (
                                                                                         s.pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      ))
                                                                                )
                                                                                   max_due_date
                                                                         FROM   ins_p_summery s
                                                                        WHERE   ( (s.last_paid_date >=
                                                                                      TO_DATE(p_date_fr)
                                                                                   AND policy_status =
                                                                                         '00')
                                                                                 OR policy_status !=
                                                                                      '00')
                                                                                AND EXISTS
                                                                                      (SELECT   1
                                                                                         FROM   val_inforce_policy v
                                                                                        WHERE   v.val_year =
                                                                                                   p_previous_yr
                                                                                                AND paymode <>
                                                                                                      '05'
                                                                                                AND v.pgid =
                                                                                                      s.pgid)
                                                                                AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                                           ADD_MONTHS (
                                                                                                              p_date_fr,
                                                                                                              -24
                                                                                                           ),
                                                                                                           1
                                                                                                        )
                                                                                                    AND  ADD_MONTHS (
                                                                                                            p_date_to,
                                                                                                            -12
                                                                                                         )))
                                                 GROUP BY   f_pgid_to_office (pgid)
                                                 UNION ALL
                                                   SELECT   f_pgid_to_office (a.pgid)
                                                               office_cd,
                                                            0 no_2nd_due_policy,
                                                            0 no_2nd_due_premium,
                                                            NVL (COUNT (a.pgid), 0)
                                                               no_2nd_tot_coll_policy,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record >=
                                                                              b.due_installment
                                                                           AND b.due_installment >
                                                                                 0
                                                                      THEN
                                                                         1
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               no_2nd_full_coll_policy,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record <
                                                                              b.due_installment
                                                                           OR b.due_installment =
                                                                                0
                                                                      THEN
                                                                         1
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               no_2nd_partial_coll_policy,
                                                            0 no_2nd_full_coll_prem,
                                                            0
                                                               no_2nd_partial_coll_prem
                                                     FROM   (  SELECT   pgid,
                                                                        NVL (
                                                                           COUNT (pgid),
                                                                           0
                                                                        )
                                                                           coll_record,
                                                                        NVL (
                                                                           SUM(s_coll_amount),
                                                                           0
                                                                        )
                                                                           s_coll_amount
                                                                 FROM   acc_coll_summery c
                                                                WHERE   receive_dt BETWEEN p_coll_date_fr
                                                                                       AND  p_coll_date_to
                                                                                            + p_grace_period
                                                                        AND EXISTS
                                                                              (SELECT   1
                                                                                 FROM   (SELECT   pgid
                                                                                           FROM   ins_p_summery s
                                                                                          WHERE   ( (s.last_paid_date >=
                                                                                                        TO_DATE(p_date_fr)
                                                                                                     AND policy_status =
                                                                                                           '00')
                                                                                                   OR policy_status !=
                                                                                                        '00')
                                                                                                  AND EXISTS
                                                                                                        (SELECT   1
                                                                                                           FROM   val_inforce_policy v
                                                                                                          WHERE   v.val_year =
                                                                                                                     p_previous_yr
                                                                                                                  AND paymode <>
                                                                                                                        '05'
                                                                                                                  AND v.pgid =
                                                                                                                        s.pgid)
                                                                                                  AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                                                             ADD_MONTHS (
                                                                                                                                p_date_fr,
                                                                                                                                -24
                                                                                                                             ),
                                                                                                                             1
                                                                                                                          )
                                                                                                                      AND  ADD_MONTHS (
                                                                                                                              p_date_to,
                                                                                                                              -12
                                                                                                                           ))
                                                                                        a
                                                                                WHERE   pgid =
                                                                                           c.pgid)
                                                                        AND due_date BETWEEN p_date_fr
                                                                                         AND  p_date_to
                                                                        AND s_coll_amount >
                                                                              0
                                                             GROUP BY   pgid) a,
                                                            (SELECT   pgid,
                                                                      comm_date,
                                                                      CASE
                                                                         WHEN max_due_date <
                                                                                 p_date_fr
                                                                         THEN
                                                                            0
                                                                         WHEN max_due_date <=
                                                                                 maturity_date
                                                                         THEN
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     max_due_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             max_due_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                         ELSE
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     maturity_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             maturity_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                      END
                                                                         due_installment,
                                                                      installment_premium
                                                               FROM   (SELECT   s.pgid,
                                                                                s.comm_date,
                                                                                s.last_paid_date,
                                                                                s.last_paid_inst_no,
                                                                                s.maturity_date,
                                                                                s.pay_mode_cd,
                                                                                s.installment_premium,
                                                                                ADD_MONTHS (
                                                                                   s.comm_date,
                                                                                   24
                                                                                   - (DECODE (
                                                                                         s.pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      ))
                                                                                )
                                                                                   max_due_date
                                                                         FROM   ins_p_summery s
                                                                        WHERE   ( (s.last_paid_date >=
                                                                                      TO_DATE(p_date_fr)
                                                                                   AND policy_status =
                                                                                         '00')
                                                                                 OR policy_status !=
                                                                                      '00')
                                                                                AND EXISTS
                                                                                      (SELECT   1
                                                                                         FROM   val_inforce_policy v
                                                                                        WHERE   v.val_year =
                                                                                                   p_previous_yr
                                                                                                AND paymode <>
                                                                                                      '05'
                                                                                                AND v.pgid =
                                                                                                      s.pgid)
                                                                                AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                                           ADD_MONTHS (
                                                                                                              p_date_fr,
                                                                                                              -24
                                                                                                           ),
                                                                                                           1
                                                                                                        )
                                                                                                    AND  ADD_MONTHS (
                                                                                                            p_date_to,
                                                                                                            -12
                                                                                                         )))
                                                            b
                                                    WHERE   a.pgid = b.pgid
                                                 GROUP BY   f_pgid_to_office (
                                                               a.pgid
                                                            )
                                                 UNION ALL
                                                   SELECT   f_pgid_to_office (a.pgid)
                                                               office_cd,
                                                            0 no_2nd_due_policy,
                                                            0 no_2nd_due_premium,
                                                            0 no_2nd_tot_coll_policy,
                                                            0 no_2nd_full_coll_policy,
                                                            0
                                                               no_2nd_partial_coll_policy,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record >=
                                                                              b.due_installment
                                                                           AND b.due_installment >
                                                                                 0
                                                                      THEN
                                                                         s_coll_amount
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               no_2nd_full_coll_prem,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record <
                                                                              b.due_installment
                                                                           OR b.due_installment =
                                                                                0
                                                                      THEN
                                                                         s_coll_amount
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               no_2nd_partial_coll_prem
                                                     FROM   (  SELECT   pgid,
                                                                        NVL (
                                                                           COUNT (pgid),
                                                                           0
                                                                        )
                                                                           coll_record,
                                                                        NVL (
                                                                           SUM(s_coll_amount),
                                                                           0
                                                                        )
                                                                           s_coll_amount
                                                                 FROM   acc_coll_summery c
                                                                WHERE   receive_dt BETWEEN p_coll_date_fr
                                                                                       AND  p_coll_date_to
                                                                                            + p_grace_period
                                                                        AND EXISTS
                                                                              (SELECT   1
                                                                                 FROM   (SELECT   pgid
                                                                                           FROM   ins_p_summery s
                                                                                          WHERE   ( (s.last_paid_date >=
                                                                                                        TO_DATE(p_date_fr)
                                                                                                     AND policy_status =
                                                                                                           '00')
                                                                                                   OR policy_status !=
                                                                                                        '00')
                                                                                                  AND EXISTS
                                                                                                        (SELECT   1
                                                                                                           FROM   val_inforce_policy v
                                                                                                          WHERE   v.val_year =
                                                                                                                     p_previous_yr
                                                                                                                  AND paymode <>
                                                                                                                        '05'
                                                                                                                  AND v.pgid =
                                                                                                                        s.pgid)
                                                                                                  AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                                                             ADD_MONTHS (
                                                                                                                                p_date_fr,
                                                                                                                                -24
                                                                                                                             ),
                                                                                                                             1
                                                                                                                          )
                                                                                                                      AND  ADD_MONTHS (
                                                                                                                              p_date_to,
                                                                                                                              -12
                                                                                                                           ))
                                                                                        a
                                                                                WHERE   pgid =
                                                                                           c.pgid)
                                                                        AND due_date BETWEEN p_date_fr
                                                                                         AND  p_date_to
                                                                        AND s_coll_amount >
                                                                              0
                                                             GROUP BY   pgid) a,
                                                            (SELECT   pgid,
                                                                      comm_date,
                                                                      CASE
                                                                         WHEN max_due_date <
                                                                                 p_date_fr
                                                                         THEN
                                                                            0
                                                                         WHEN max_due_date <=
                                                                                 maturity_date
                                                                         THEN
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     max_due_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             max_due_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                         ELSE
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     maturity_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             maturity_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                      END
                                                                         due_installment,
                                                                      installment_premium
                                                               FROM   (SELECT   s.pgid,
                                                                                s.comm_date,
                                                                                s.last_paid_date,
                                                                                s.last_paid_inst_no,
                                                                                s.maturity_date,
                                                                                s.pay_mode_cd,
                                                                                s.installment_premium,
                                                                                ADD_MONTHS (
                                                                                   s.comm_date,
                                                                                   24
                                                                                   - (DECODE (
                                                                                         s.pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      ))
                                                                                )
                                                                                   max_due_date
                                                                         FROM   ins_p_summery s
                                                                        WHERE   ( (s.last_paid_date >=
                                                                                      TO_DATE(p_date_fr)
                                                                                   AND policy_status =
                                                                                         '00')
                                                                                 OR policy_status !=
                                                                                      '00')
                                                                                AND EXISTS
                                                                                      (SELECT   1
                                                                                         FROM   val_inforce_policy v
                                                                                        WHERE   v.val_year =
                                                                                                   p_previous_yr
                                                                                                AND paymode <>
                                                                                                      '05'
                                                                                                AND v.pgid =
                                                                                                      s.pgid)
                                                                                AND s.comm_date BETWEEN ADD_MONTHS (
                                                                                                           ADD_MONTHS (
                                                                                                              p_date_fr,
                                                                                                              -24
                                                                                                           ),
                                                                                                           1
                                                                                                        )
                                                                                                    AND  ADD_MONTHS (
                                                                                                            p_date_to,
                                                                                                            -12
                                                                                                         )))
                                                            b
                                                    WHERE   a.pgid = b.pgid
                                                 GROUP BY   f_pgid_to_office (
                                                               a.pgid
                                                            ))
                                     GROUP BY   f_office(FUN_FIND_SERVICE_OFF(FUN_FIND_SALES_OFFICE(OFFICE_CD))),
                                                F_OFFICE(FUN_FIND_SALES_OFFICE (
                                                            OFFICE_CD
                                                         ))
                                     --Renewal & more year
                                     UNION ALL
                                       SELECT   f_office(FUN_FIND_SERVICE_OFF(FUN_FIND_SALES_OFFICE(OFFICE_CD)))
                                                   ser_off,
                                                F_OFFICE(FUN_FIND_SALES_OFFICE (
                                                            OFFICE_CD
                                                         ))
                                                   org_off,
                                                0 def_due_policy,
                                                0 def_due_premium,
                                                0 def_tot_coll_policy,
                                                0 def_full_coll_policy,
                                                0 def_partial_coll_policy,
                                                0 def_full_coll_prem,
                                                0 def_partial_coll_prem,
                                                0 no_2nd_due_policy,
                                                0 no_2nd_due_premium,
                                                0 no_2nd_tot_coll_policy,
                                                0 no_2nd_full_coll_policy,
                                                0 no_2nd_partial_coll_policy,
                                                0 no_2nd_full_coll_prem,
                                                0 no_2nd_partial_coll_prem,
                                                SUM (renewal_due_policy)
                                                   renewal_due_policy,
                                                SUM (renewal_due_premium)
                                                   renewal_due_premium,
                                                SUM (renewal_tot_coll_policy)
                                                   renewal_tot_coll_policy,
                                                SUM (renewal_full_coll_policy)
                                                   renewal_full_coll_policy,
                                                SUM (renewal_partial_coll_policy)
                                                   renewal_partial_coll_policy,
                                                SUM (renewal_full_coll_prem)
                                                   renewal_full_coll_prem,
                                                SUM (renewal_partial_coll_prem)
                                                   renewal_partial_coll_prem
                                         FROM   (  SELECT   f_pgid_to_office (s.pgid)
                                                               office_cd,
                                                            NVL (COUNT (s.pgid), 0)
                                                               renewal_due_policy,
                                                            0 renewal_due_premium,
                                                            0 renewal_tot_coll_policy,
                                                            0
                                                               renewal_full_coll_policy,
                                                            0
                                                               renewal_partial_coll_policy,
                                                            0 renewal_full_coll_prem,
                                                            0
                                                               renewal_partial_coll_prem
                                                     FROM   ins_p_summery s
                                                    WHERE   ( (s.last_paid_date >=
                                                                  TO_DATE (p_date_fr)
                                                               AND policy_status =
                                                                     '00')
                                                             OR policy_status != '00')
                                                            AND EXISTS
                                                                  (SELECT   1
                                                                     FROM   val_inforce_policy v
                                                                    WHERE   v.val_year =
                                                                               p_previous_yr
                                                                            AND paymode <>
                                                                                  '05'
                                                                            AND v.pgid =
                                                                                  s.pgid)
                                                            AND s.comm_date <=
                                                                  ADD_MONTHS (
                                                                     p_date_to,
                                                                     -24
                                                                  )
                                                 GROUP BY   f_pgid_to_office (
                                                               s.pgid
                                                            )
                                                 UNION ALL
                                                   SELECT   f_pgid_to_office (pgid)
                                                               office_cd,
                                                            0 renewal_due_policy,
                                                            NVL (
                                                               SUM(due_installment
                                                                   * installment_premium),
                                                               0
                                                            )
                                                               renewal_due_premium,
                                                            0 renewal_tot_coll_policy,
                                                            0
                                                               renewal_full_coll_policy,
                                                            0
                                                               renewal_partial_coll_policy,
                                                            0 renewal_full_coll_prem,
                                                            0
                                                               renewal_partial_coll_prem
                                                     FROM   (SELECT   pgid,
                                                                      comm_date,
                                                                      last_paid_date,
                                                                      last_paid_inst_no,
                                                                      maturity_date,
                                                                      max_due_date,
                                                                      CASE
                                                                         WHEN max_due_date <
                                                                                 p_date_fr
                                                                         THEN
                                                                            0
                                                                         WHEN max_due_date <=
                                                                                 maturity_date
                                                                         THEN
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     max_due_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             max_due_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                         ELSE
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     maturity_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             maturity_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                      END
                                                                         due_installment,
                                                                      installment_premium
                                                               FROM   (SELECT   s.pgid,
                                                                                s.comm_date,
                                                                                s.last_paid_date,
                                                                                s.last_paid_inst_no,
                                                                                s.maturity_date,
                                                                                s.pay_mode_cd,
                                                                                s.installment_premium,
                                                                                p_date_to
                                                                                   max_due_date
                                                                         FROM   ins_p_summery s
                                                                        WHERE   ( (s.last_paid_date >=
                                                                                      TO_DATE(p_date_fr)
                                                                                   AND policy_status =
                                                                                         '00')
                                                                                 OR policy_status !=
                                                                                      '00')
                                                                                AND EXISTS
                                                                                      (SELECT   1
                                                                                         FROM   val_inforce_policy v
                                                                                        WHERE   v.val_year =
                                                                                                   p_previous_yr
                                                                                                AND paymode <>
                                                                                                      '05'
                                                                                                AND v.pgid =
                                                                                                      s.pgid)
                                                                                AND s.comm_date <=
                                                                                      ADD_MONTHS (
                                                                                         p_date_to,
                                                                                         -24
                                                                                      )))
                                                 GROUP BY   f_pgid_to_office (pgid)
                                                 UNION ALL
                                                   SELECT   f_pgid_to_office (a.pgid)
                                                               office_cd,
                                                            0 renewal_due_policy,
                                                            0 renewal_due_premium,
                                                            NVL (COUNT (a.pgid), 0)
                                                               renewal_tot_coll_policy,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record >=
                                                                              b.due_installment
                                                                           AND b.due_installment >
                                                                                 0
                                                                      THEN
                                                                         1
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               renewal_full_coll_policy,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record <
                                                                              b.due_installment
                                                                           OR b.due_installment =
                                                                                0
                                                                      THEN
                                                                         1
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               renewal_partial_coll_policy,
                                                            0 renewal_full_coll_prem,
                                                            0
                                                               renewal_partial_coll_prem
                                                     FROM   (  SELECT   pgid,
                                                                        COUNT (pgid)
                                                                           coll_record,
                                                                        SUM(r_coll_amount)
                                                                           r_coll_amount
                                                                 FROM   acc_coll_summery c
                                                                WHERE   receive_dt BETWEEN p_coll_date_fr
                                                                                       AND  p_coll_date_to
                                                                                            + p_grace_period
                                                                        AND EXISTS
                                                                              (SELECT   1
                                                                                 FROM   (SELECT   pgid
                                                                                           FROM   ins_p_summery s
                                                                                          WHERE   ( (s.last_paid_date >=
                                                                                                        TO_DATE(p_date_fr)
                                                                                                     AND policy_status =
                                                                                                           '00')
                                                                                                   OR policy_status !=
                                                                                                        '00')
                                                                                                  AND EXISTS
                                                                                                        (SELECT   1
                                                                                                           FROM   val_inforce_policy v
                                                                                                          WHERE   v.val_year =
                                                                                                                     p_previous_yr
                                                                                                                  AND paymode <>
                                                                                                                        '05'
                                                                                                                  AND v.pgid =
                                                                                                                        s.pgid)
                                                                                                  AND s.comm_date <=
                                                                                                        ADD_MONTHS (
                                                                                                           p_date_to,
                                                                                                           -24
                                                                                                        ))
                                                                                        a
                                                                                WHERE   pgid =
                                                                                           c.pgid)
                                                                        AND due_date BETWEEN p_date_fr
                                                                                         AND  p_date_to
                                                                        AND r_coll_amount >
                                                                              0
                                                             GROUP BY   pgid) a,
                                                            (SELECT   pgid,
                                                                      CASE
                                                                         WHEN max_due_date <
                                                                                 p_date_fr
                                                                         THEN
                                                                            0
                                                                         WHEN max_due_date <=
                                                                                 maturity_date
                                                                         THEN
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     max_due_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             max_due_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                         ELSE
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     maturity_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             maturity_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                      END
                                                                         due_installment,
                                                                      installment_premium
                                                               FROM   (SELECT   s.pgid,
                                                                                s.comm_date,
                                                                                s.last_paid_date,
                                                                                s.last_paid_inst_no,
                                                                                s.maturity_date,
                                                                                s.pay_mode_cd,
                                                                                s.installment_premium,
                                                                                p_date_to
                                                                                   max_due_date
                                                                         FROM   ins_p_summery s
                                                                        WHERE   ( (s.last_paid_date >=
                                                                                      TO_DATE(p_date_fr)
                                                                                   AND policy_status =
                                                                                         '00')
                                                                                 OR policy_status !=
                                                                                      '00')
                                                                                AND EXISTS
                                                                                      (SELECT   1
                                                                                         FROM   val_inforce_policy v
                                                                                        WHERE   v.val_year =
                                                                                                   p_previous_yr
                                                                                                AND paymode <>
                                                                                                      '05'
                                                                                                AND v.pgid =
                                                                                                      s.pgid)
                                                                                AND s.comm_date <=
                                                                                      ADD_MONTHS (
                                                                                         p_date_to,
                                                                                         -24
                                                                                      )))
                                                            b
                                                    WHERE   a.pgid = b.pgid
                                                 GROUP BY   f_pgid_to_office (
                                                               a.pgid
                                                            )
                                                 UNION ALL
                                                   SELECT   f_pgid_to_office (a.pgid)
                                                               office_cd,
                                                            0 renewal_due_policy,
                                                            0 renewal_due_premium,
                                                            0 renewal_tot_coll_policy,
                                                            0
                                                               renewal_full_coll_policy,
                                                            0
                                                               renewal_partial_coll_policy,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record >=
                                                                              b.due_installment
                                                                           AND b.due_installment >
                                                                                 0
                                                                      THEN
                                                                         r_coll_amount
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               renewal_full_coll_prem,
                                                            NVL (
                                                               SUM(CASE
                                                                      WHEN a.coll_record <
                                                                              b.due_installment
                                                                           OR b.due_installment =
                                                                                0
                                                                      THEN
                                                                         r_coll_amount
                                                                      ELSE
                                                                         0
                                                                   END),
                                                               0
                                                            )
                                                               renewal_partial_coll_prem
                                                     FROM   (  SELECT   pgid,
                                                                        NVL (
                                                                           COUNT (pgid),
                                                                           0
                                                                        )
                                                                           coll_record,
                                                                        NVL (
                                                                           SUM(r_coll_amount),
                                                                           0
                                                                        )
                                                                           r_coll_amount
                                                                 FROM   acc_coll_summery c
                                                                WHERE   receive_dt BETWEEN p_coll_date_fr
                                                                                       AND  p_coll_date_to
                                                                                            + p_grace_period
                                                                        AND EXISTS
                                                                              (SELECT   1
                                                                                 FROM   (SELECT   pgid
                                                                                           FROM   ins_p_summery s
                                                                                          WHERE   ( (s.last_paid_date >=
                                                                                                        TO_DATE(p_date_fr)
                                                                                                     AND policy_status =
                                                                                                           '00')
                                                                                                   OR policy_status !=
                                                                                                        '00')
                                                                                                  AND EXISTS
                                                                                                        (SELECT   1
                                                                                                           FROM   val_inforce_policy v
                                                                                                          WHERE   v.val_year =
                                                                                                                     p_previous_yr
                                                                                                                  AND paymode <>
                                                                                                                        '05'
                                                                                                                  AND v.pgid =
                                                                                                                        s.pgid)
                                                                                                  AND s.comm_date <=
                                                                                                        ADD_MONTHS (
                                                                                                           p_date_to,
                                                                                                           -24
                                                                                                        ))
                                                                                        a
                                                                                WHERE   pgid =
                                                                                           c.pgid)
                                                                        AND due_date BETWEEN p_date_fr
                                                                                         AND  p_date_to
                                                                        AND r_coll_amount >
                                                                              0
                                                             GROUP BY   pgid) a,
                                                            (SELECT   pgid,
                                                                      CASE
                                                                         WHEN max_due_date <
                                                                                 p_date_fr
                                                                         THEN
                                                                            0
                                                                         WHEN max_due_date <=
                                                                                 maturity_date
                                                                         THEN
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     max_due_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             max_due_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                         ELSE
                                                                            FLOOR( ( ( (TO_NUMBER(TO_CHAR (
                                                                                                     maturity_date,
                                                                                                     'MM'
                                                                                                  ))
                                                                                        - TO_NUMBER(TO_CHAR (
                                                                                                       p_date_fr,
                                                                                                       'MM'
                                                                                                    )))
                                                                                      + CASE
                                                                                           WHEN TO_NUMBER(TO_CHAR (
                                                                                                             maturity_date,
                                                                                                             'MM'
                                                                                                          )) <
                                                                                                   TO_NUMBER(TO_CHAR (
                                                                                                                p_date_fr,
                                                                                                                'MM'
                                                                                                             ))
                                                                                           THEN
                                                                                              12
                                                                                           ELSE
                                                                                              0
                                                                                        END)
                                                                                    / DECODE (
                                                                                         pay_mode_cd,
                                                                                         '01',
                                                                                         12,
                                                                                         '02',
                                                                                         6,
                                                                                         '03',
                                                                                         3,
                                                                                         '04',
                                                                                         1
                                                                                      )))
                                                                            + 1
                                                                      END
                                                                         due_installment,
                                                                      installment_premium
                                                               FROM   (SELECT   s.pgid,
                                                                                s.comm_date,
                                                                                s.last_paid_date,
                                                                                s.last_paid_inst_no,
                                                                                s.maturity_date,
                                                                                s.pay_mode_cd,
                                                                                s.installment_premium,
                                                                                p_date_to
                                                                                   max_due_date
                                                                         FROM   ins_p_summery s
                                                                        WHERE   ( (s.last_paid_date >=
                                                                                      TO_DATE(p_date_fr)
                                                                                   AND policy_status =
                                                                                         '00')
                                                                                 OR policy_status !=
                                                                                      '00')
                                                                                AND EXISTS
                                                                                      (SELECT   1
                                                                                         FROM   val_inforce_policy v
                                                                                        WHERE   v.val_year =
                                                                                                   p_previous_yr
                                                                                                AND paymode <>
                                                                                                      '05'
                                                                                                AND v.pgid =
                                                                                                      s.pgid)
                                                                                AND s.comm_date <=
                                                                                      ADD_MONTHS (
                                                                                         p_date_to,
                                                                                         -24
                                                                                      )))
                                                            b
                                                    WHERE   a.pgid = b.pgid
                                                 GROUP BY   f_pgid_to_office (
                                                               a.pgid
                                                            ))
                                     GROUP BY   f_office(FUN_FIND_SERVICE_OFF(FUN_FIND_SALES_OFFICE(OFFICE_CD))),
                                                F_OFFICE(FUN_FIND_SALES_OFFICE (
                                                            OFFICE_CD
                                                         )))
                         GROUP BY   ser_off, org_off)
             ORDER BY   ser_off)
         LOOP
            v_coll_rec.ser_off := i.ser_off;
            v_coll_rec.org_off := i.org_off;
            v_coll_rec.def_due_policy := i.def_due_policy;
            v_coll_rec.def_due_premium := i.def_due_premium;
            v_coll_rec.def_tot_coll_policy := i.def_tot_coll_policy;
            v_coll_rec.def_full_coll_policy := i.def_full_coll_policy;
            v_coll_rec.def_partial_coll_policy := i.def_partial_coll_policy;
            v_coll_rec.def_full_coll_prem := i.def_full_coll_prem;
            v_coll_rec.def_partial_coll_prem := i.def_partial_coll_prem;
            v_coll_rec.no_2nd_due_policy := i.no_2nd_due_policy;
            v_coll_rec.no_2nd_due_premium := i.no_2nd_due_premium;
            v_coll_rec.no_2nd_tot_coll_policy := i.no_2nd_tot_coll_policy;
            v_coll_rec.no_2nd_full_coll_policy := i.no_2nd_full_coll_policy;
            v_coll_rec.no_2nd_partial_coll_policy :=
               i.no_2nd_partial_coll_policy;
            v_coll_rec.no_2nd_full_coll_prem := i.no_2nd_full_coll_prem;
            v_coll_rec.no_2nd_partial_coll_prem := i.no_2nd_partial_coll_prem;
            v_coll_rec.renewal_due_policy := i.renewal_due_policy;
            v_coll_rec.renewal_due_premium := i.renewal_due_premium;
            v_coll_rec.renewal_tot_coll_policy := i.renewal_tot_coll_policy;
            v_coll_rec.renewal_full_coll_policy := i.renewal_full_coll_policy;
            v_coll_rec.renewal_partial_coll_policy :=
               i.renewal_partial_coll_policy;
            v_coll_rec.renewal_full_coll_prem := i.renewal_full_coll_prem;
            v_coll_rec.renewal_partial_coll_prem :=
               i.renewal_partial_coll_prem;
            PIPE ROW (v_coll_rec);
         END LOOP;
      END IF;
   END fun_idra_lapse_ratio;
END pkg_val_idra_lapse_report;
/


--
-- WEBUTIL_DB  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY INS.WEBUTIL_DB AS
  m_binaryData   BLOB;
  m_blobTable    VARCHAR2(60);
  m_blobColumn   VARCHAR2(60);
  m_blobWhere    VARCHAR2(1024);
  m_mode         CHAR(1);
  m_lastError    PLS_INTEGER := 0;
  m_sourceLength PLS_INTEGER := 0;
  m_bytesRead    PLS_INTEGER := 0;
  MAX_READ_BYTES PLS_INTEGER := 4096;

  -- internal Program Units
  PROCEDURE Reset;

  PROCEDURE Reset is
  BEGIN
    m_blobTable     := null;
    m_blobColumn    := null;
    m_blobWhere     := null;
    m_mode          := null;
    m_lastError     := 0;
    m_sourceLength  := 0;
    m_bytesRead     := 0;
  END Reset;


  FUNCTION  OpenBlob(blobTable in VARCHAR2, blobColumn in VARCHAR2, blobWhere in VARCHAR2, openMode in VARCHAR2, chunkSize PLS_INTEGER default null) return BOOLEAN is
    result BOOLEAN := false;
    stmtFetch   VARCHAR2(2000);
    hit    PLS_INTEGER;
  BEGIN
    -- New transaction clean up
    reset;

    m_blobTable  := blobTable;
    m_blobColumn := blobColumn;
    m_blobWhere  := blobWhere;
    m_mode       := upper(openMode);

    if chunkSize is not null then
      if chunkSize > 16384 then
        MAX_READ_BYTES := 16384;
      else
        MAX_READ_BYTES := chunkSize;
      end if;
    end if;

    -- check the target row exists
    stmtFetch := 'select count(*) from '||m_blobTable||' where '||m_blobWhere;
    EXECUTE IMMEDIATE stmtFetch into hit;

    if hit = 1 then
      if m_mode = 'W' then
        DBMS_LOB.CREATETEMPORARY(m_binaryData,false);
        DBMS_LOB.OPEN(m_binaryData,DBMS_LOB.LOB_READWRITE);
        m_sourceLength := 0;
        result := true;
      elsif m_mode = 'R' then
        stmtFetch := 'select '||m_blobColumn||' from '||m_blobTable||' where '||m_blobWhere;
        EXECUTE IMMEDIATE stmtFetch into m_binaryData;
        if m_binaryData is not null then
          m_sourceLength := dbms_lob.getlength(m_binaryData);
          if m_sourceLength > 0 then
            result := true;
          else
            m_lastError := 110;
          end if;
        else
          m_lastError := 111;
        end if;
      else
          m_lastError := 112;
      end if; -- mode
    else
      -- too many rows
      m_lastError := 113;
    end if; -- Hit
    return result;
  END OpenBlob;

  FUNCTION  CloseBlob(checksum in PLS_INTEGER) return BOOLEAN is
    sourceBlob  BLOB;
    stmtFetch   VARCHAR2(2000);
    stmtInit    VARCHAR2(2000);
    result      BOOLEAN := false;
  BEGIN
    if m_mode = 'W' then
      m_sourceLength := DBMS_LOB.GETLENGTH(m_binaryData);
    end if;

    -- checksum
    if checksum = m_sourceLength then
      if m_mode = 'W' then
        -- get the locator to the table blob
        stmtFetch := 'select '||m_blobColumn||' from '||m_blobTable||' where '||m_blobWhere||' for update';
        EXECUTE IMMEDIATE stmtFetch into sourceBlob;

        -- Check the blob has been initialised
        -- and if it's not empty clear it out
        if sourceBlob is null then
          stmtInit := 'update '||m_blobTable||' set '||m_blobColumn||'=EMPTY_BLOB()  where '||m_blobWhere;
          EXECUTE IMMEDIATE stmtInit;
          EXECUTE IMMEDIATE stmtFetch into sourceBlob;
        elsif dbms_lob.getlength(sourceBlob) > 0 then
          dbms_lob.TRIM(sourceBlob,0);
        end if;
        -- now replace the table data with the temp BLOB
        DBMS_LOB.APPEND(sourceBlob,m_binaryData);
        DBMS_LOB.CLOSE(m_binaryData);
        result := true;
      else
       -- todo
        null;
      end if; --mode
    else
      m_lastError := 115;
    end if; --checksum
    return result;
  END CloseBlob;

  PROCEDURE WriteData(data in VARCHAR2) is
    rawData raw(16384);
  BEGIN
    rawData := utl_encode.BASE64_DECODE(utl_raw.CAST_TO_RAW(data));
    dbms_lob.WRITEAPPEND(m_binaryData, utl_raw.LENGTH(rawData), rawData);
  END WriteData;


  FUNCTION ReadData return VARCHAR is
    rawData     RAW(16384);
    bytesToRead PLS_INTEGER;
  BEGIN
    bytesToRead :=  (m_sourceLength - m_bytesRead);
    if bytesToRead >  MAX_READ_BYTES then
      bytesToRead := MAX_READ_BYTES;
    end if;
    DBMS_LOB.READ(m_binaryData, bytesToRead, (m_bytesRead + 1), rawData);
    m_bytesRead := m_bytesRead + bytesToRead;
    return UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(rawData));
  END ReadData;

  FUNCTION GetLastError return PLS_INTEGER is
  BEGIN
    return m_lastError;
  END GetLastError;


  FUNCTION GetSourceLength  return PLS_INTEGER is
  BEGIN
    return m_sourceLength;
  END GetSourceLength;

  FUNCTION GetSourceChunks  return PLS_INTEGER is
   chunks PLS_INTEGER;
  BEGIN
    chunks := floor(m_sourceLength/MAX_READ_BYTES);
    if mod(m_sourceLength,MAX_READ_BYTES) > 0 then
      chunks := chunks+1;
    end if;
    return chunks;
  END GetSourceChunks;

END;
/


--
-- PKG_COMMISSION_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_COMMISSION_REPORT FOR INS.PKG_COMMISSION_REPORT;


--
-- PKG_CLM_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_CLM_CAL FOR INS.PKG_CLM_CAL;


--
-- PKG_UTL_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_UTL_REPORT FOR INS.PKG_UTL_REPORT;


--
-- PKG_SALARY_PROCESS  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_SALARY_PROCESS FOR INS.PKG_SALARY_PROCESS;


--
-- PKG_PROVIDENT_FUND  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_PROVIDENT_FUND FOR INS.PKG_PROVIDENT_FUND;


--
-- PKG_LIVE_DATA_MGR  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_LIVE_DATA_MGR FOR INS.PKG_LIVE_DATA_MGR;


--
-- PKG_PMIS_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_PMIS_REPORT FOR INS.PKG_PMIS_REPORT;


--
-- PKG_NEWBUSINESS_NEW  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_NEWBUSINESS_NEW FOR INS.PKG_NEWBUSINESS_NEW;


--
-- PKG_NEWBUSINESS  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_NEWBUSINESS FOR INS.PKG_NEWBUSINESS;


--
-- PKG_MIS_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_MIS_REPORT FOR INS.PKG_MIS_REPORT;


--
-- PKG_GL_ACCOUNT_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_ACCOUNT_REPORT FOR INS.PKG_GL_ACCOUNT_REPORT;


--
-- WEBUTIL_DB  (Synonym) 
--
CREATE PUBLIC SYNONYM WEBUTIL_DB FOR INS.WEBUTIL_DB;


--
-- PKG_GL_YEAR_CLOSING  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_YEAR_CLOSING FOR INS.PKG_GL_YEAR_CLOSING;


--
-- PKG_GL_PF  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_PF FOR INS.PKG_GL_PF;


--
-- PKG_GL_DR_CR_VOUCHER  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_DR_CR_VOUCHER FOR INS.PKG_GL_DR_CR_VOUCHER;


--
-- PKG_GL_VOUCHER  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_VOUCHER FOR INS.PKG_GL_VOUCHER;


--
-- PKG_GL_GRA  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GL_GRA FOR INS.PKG_GL_GRA;


--
-- PKG_EMP_ADV_REGISTER  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_EMP_ADV_REGISTER FOR INS.PKG_EMP_ADV_REGISTER;


--
-- PKG_TRANS_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_TRANS_REPORT FOR INS.PKG_TRANS_REPORT;


--
-- PKG_OFFICE_CASH_BAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_OFFICE_CASH_BAL FOR INS.PKG_OFFICE_CASH_BAL;


--
-- PKG_PF_YEAR_CLOSING  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_PF_YEAR_CLOSING FOR INS.PKG_PF_YEAR_CLOSING;


--
-- PKG_INVESTMENT_CALCULATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_INVESTMENT_CALCULATION FOR INS.PKG_INVESTMENT_CALCULATION;


--
-- PKG_GRA_YEAR_CLOSING  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_GRA_YEAR_CLOSING FOR INS.PKG_GRA_YEAR_CLOSING;


--
-- PKG_VALUATION_REPORT  (Synonym) 
--
CREATE PUBLIC SYNONYM PKG_VALUATION_REPORT FOR INS.PKG_VALUATION_REPORT;


GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO INS_WEB;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO NEPAL;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACCTUAL_BANK_DEPOSIT;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_AUDITOR;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_BANK;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_BANK;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_BANK;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_BANK_REC;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_CASH_HEAD_TRF;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_CASH_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_CASH_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_CASH_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_CEN_HEADOFF;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_CHEQ_ISSU;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_CHEQ_ISSU;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_CHEQ_ISSU;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_CH_HEAD;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_CH_HEAD;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_INCHARGE_SER;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_INCHARGE_SER;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_INCHARGE_SER;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_ACC_ORG_TRF_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_OROCESS_ORG;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_POLICY_LOAN;

GRANT EXECUTE ON INS.PKG_GL_YEAR_CLOSING TO RL_ACC_PRF;

GRANT EXECUTE ON INS.PKG_GL_YEAR_CLOSING TO RL_ACC_PROCESS;

GRANT EXECUTE ON INS.PKG_EMP_ADV_REGISTER TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PKG_OFFICE_CASH_BAL TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PKG_OFFICE_CASH_BAL TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_SALARY_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ACC_TAX_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_ACC_TRF_IT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PKG_OFFICE_CASH_BAL TO RL_ACC_TRIAL_BLANCE;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ADMIN_LOAN;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ADMIN_LOAN;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_ADMIN_RPT_IT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_ALTERATION_APPLICATION_TRF;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_AUDIT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_AUDIT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_AUDIT;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_AUDIT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_AUDIT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_BANK_INTEREST_TAX_SCHEDULE;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CASHIER_02;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_CASH_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CASH_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CHEQUE_TRF_HEAD;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CLAIM_ACC_HEAD;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CLAIM_APPROVAL;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CLAIM_AUDIT_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CLAIM_ONESTOP;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_CLAIM_PROSS;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CLAIM_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CLAIM_RPT_TRF;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CLAIM_TRF_ORG;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_CMC_INCHARGE;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_CMC_INCHARGE;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CMS_BILL_DISBUSEMENT;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_ORGOFF_TRR;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_TRR;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_CMS_TRR;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_CMS_TRR_ALL;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_COLLECTION_RPT;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_DALIL_TRF;

GRANT EXECUTE ON INS.PKG_DASHBOARD TO RL_DASHBOARD_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_DEATH_CLAIIM_RFT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_DEATH_CLAIM_INCHARGE;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_DEATH_CLAIM_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_DEATH_CLAIM_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_DEATH_CLAIM_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_DEPUTY_DEAH_CLAIM;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_DES_TRF;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_DEV_ADMIN_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_DEV_HEAD_ACC;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_DEV_INCHARGE;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_DEV_SALARY_PROCESS;

GRANT EXECUTE ON INS.PKG_SALARY_PROCESS TO RL_DEV_SALARY_PROCESS;

GRANT EXECUTE ON INS.PKG_GL_GRA TO RL_GRATU_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_GRATU_TRF;

GRANT EXECUTE ON INS.PKG_GRA_YEAR_CLOSING TO RL_GRATU_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_GROUP_TRF;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_HR_DEPUTY_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_HR_DEPUTY_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_ICD_ACC_FUND_OTHERS;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_ICD_GEN_ACC_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_ICD_GEN_ACC_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_INCHARGE_CASH;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_INCHARGE_CHEQUE_ACC;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_INCHARGE_GROUP;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_INCHARGE_LICENSE;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_INCHARGE_LICENSE;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_INCHARGE_LICENSE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_INCHARGE_PR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_INCHARGE_UNDER_DEPUTY;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_LICENSE_TRF_CODE;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_LICENSE_TRF_CODE;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_LICENSE_TRF_CODE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_LOAN_APP_APPR_DISBUS_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_MB_AGENT_COLLECTION_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_MB_AGENT_NEW_BUSINESS_RPT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_MB_AGENT_NEW_BUSINESS_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_MODHUMOTI_AGENT_BANKING_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_MODHUMOTI_BANK_ACC_RPT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_MODHUMOTI_BANK_NEW_BUSINESS;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_MODHUMOTI_BANK_NEW_BUSI_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_MODHUMOTI_BANK_PREM_COLLECT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_ASSING_DEV_TRF;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_NB_ORG;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_ORG;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_NB_ORG;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_ORGOFF_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_ORGOFF_TRR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_NB_TRR;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_OPERATOR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_OPERATOR;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_OPERATOR;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_OTHER_COLLECTION_APR_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PAYROLL_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PF_GF_APPROVAL;

GRANT EXECUTE ON INS.PKG_GL_PF TO RL_PF_TR;

GRANT EXECUTE ON INS.PKG_PROVIDENT_FUND TO RL_PF_TR;

GRANT EXECUTE ON INS.PKG_GL_PF TO RL_PF_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PF_TRF;

GRANT EXECUTE ON INS.PKG_PF_YEAR_CLOSING TO RL_PF_TRF;

GRANT EXECUTE ON INS.PKG_PROVIDENT_FUND TO RL_PF_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PF_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_PIR_TRF;

GRANT EXECUTE ON INS.PKG_GL_DR_CR_VOUCHER TO RL_PMIS_ADM_DEPUTY;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PMIS_ADM_DEPUTY;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PMIS_ADM_TRF;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PMIS_ADM_TRR;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PMIS_ADM_TRR;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PMIS_ADM_TRR;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PMIS_DEV_ADMIN_DEPUTY;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_PMIS_DEV_ADMIN_DEPUTY;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PMIS_DEV_COST_RPT;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_PMIS_DEV_COST_RPT;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PMIS_DEV_RPT_MONITOR;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_PMIS_DEV_RPT_MONITOR;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PMIS_DEV_TRPT;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PMIS_DEV_TRR;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PMIS_DEV_TRR;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_PMIS_DEV_TRR;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PMIS_OFFICE_CTRL_PRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_POLICY_DALIL_INCHARGE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_POLICY_INF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_POLICY_LOAN_RPT;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_POLICY_REGISTER_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PREMIUIM_COLLECTION_REPORT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PREMIUM_COLL_SUMMARY_RPT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_PROPOSAL_INFORMATION_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PR_CLAIM;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PR_DEP_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_PR_TRF_OFFICE;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PS_DMD_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_PS_DMD_RPT;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_PS_DMD_RPT;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_PS_MD;

GRANT EXECUTE ON INS.PKG_PMIS_REPORT TO RL_PS_MD;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_REINSURANCE_RPT;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_RLCMS_TRP;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_RPT_AUDIT;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_RPT_AUDIT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_RPT_AUDIT;

GRANT EXECUTE ON INS.PKG_SALARY_PROCESS TO RL_SALARY_APPROVAL;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_SALARY_DEV_INCHARGE;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_SALARY_DEV_RPT;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_SALARY_DEV_RPT;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_SALARY_DEV_RPT;

GRANT EXECUTE ON INS.PKG_SALARY_PROCESS TO RL_SALARY_PROCESS;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SAL_ADMIN_ACC;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SAL_DISBURSE_PROCESS;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_SAL_HR_PROSS;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_SER_DEPUTY_INCHARGE;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_SER_DEPUTY_INCHARGE;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_SER_PRF;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_SER_REP;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_SER_REPORT;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_SER_RPT_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SER_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_SER_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SER_TRF_IT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SER_TRF_ORG;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PKG_GL_ACCOUNT_REPORT TO RL_SUMMARY_BANK_RECONCILE_RPT;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_TEST123;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_TEST_321;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_TOP_20_MONITOR;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_TOP_20_MONITOR;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_TOP_20_MONITOR;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_TOP_20_MONITOR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UNDER_DEPUTY_TRF;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UNDER_RPT_INCHARGE;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UNDER_RPT_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_UPDATE_LEGER_TRF;

GRANT EXECUTE ON INS.PKG_CLM_CAL TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PKG_COMMISSION_REPORT TO RL_UTILITY_TRF_RPT;

GRANT EXECUTE ON INS.PKG_UTL_REPORT TO RL_UTILITY_TRF_RPT;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UW;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UW_ORG;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UW_TR;

GRANT EXECUTE ON INS.PKG_NEWBUSINESS TO RL_UW_TRF;

GRANT EXECUTE ON INS.PKG_TRANS_REPORT TO RL_UW_TRF;

GRANT EXECUTE ON INS.PKG_GL_VOUCHER TO RL_VALUATION_RPT_TR;

GRANT EXECUTE ON INS.PKG_MIS_REPORT TO RL_VALUATION_RPT_TR;

