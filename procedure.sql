--
-- DMG_DEL_COLL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.dmg_del_coll
IS
   /*v_cnt   NUMBER (3) := 0;

   CURSOR cur_coll
   IS
      SELECT b.pgid, b.receive_id, b.installment_no_from,
             b.installment_no_to, b.coll_slip_no, b.coll_slip_rec_dt
        FROM acc_receivables b
       WHERE b.pgid IN (
                SELECT l.pgid
                  FROM slicl.prem_coll_mst_life@dbl_dmgdb c,
                       ins_p_proposal@dbl_dmgdb l
                 WHERE l.policy_no = LPAD (c.project_cd || c.policy_no, 15, 0));*/
BEGIN
   /* Formatted on 2016/04/06 18:23 (Formatter Plus v4.8.8) */
    DECLARE
       v_sl_no        NUMBER (3);
       v_cnt          NUMBER        := 0;
       v_payable_no   VARCHAR2 (30);
       v_sys_cnt      NUMBER        := 0;
       v_sys_cnt1     NUMBER        := 0;
       v_mig_cnt      NUMBER        := 0;

       CURSOR cur_clm
       IS
          SELECT   l.pgid, f.POLICY, MAX (f.chq_amt) chq_amt,
                   MAX (f.chq_no) chq_no, MAX (f.chqdate) chqdate,
                   MAX (f.paymentoff) paymentoff, f.clm_cause_cd, f.clm_detl_cd
              FROM ins_p_proposal l, final_ripon f
             WHERE l.policy_no = f.POLICY
               AND f.clm_cause_cd IN ('02', '06')
               AND f.clm_detl_cd = '01'
               AND NOT EXISTS (
                      SELECT 1
                        FROM clm_claim_payable_gen g
                       WHERE g.pgid = l.pgid
                         --and G.I_USR IN ('SLICL', 'INS')
                         AND g.clm_cause_cd IN ('02', '06')
                         AND g.clm_detl_cd = '01'
                         AND g.cheque_no = f.chq_no)
               AND f.claimtype <> '7'
               --AND l.pgid = '0507180706103256'
          /*AND EXISTS (
                 SELECT 1
                   FROM clm_claim_payable_gen g
                  WHERE g.pgid = l.pgid
                    and G.I_USR IN ('SLICL', 'INS')
                    AND g.clm_cause_cd IN ('02', '06')
                    AND g.clm_detl_cd = '01'
                    AND (g.cheque_no IS NOT NULL OR g.cheque_no_2nd IS NOT NULL)
                    )*/
          GROUP BY l.pgid, f.POLICY, f.clm_cause_cd, f.clm_detl_cd;
    BEGIN
       FOR i IN cur_clm
       LOOP
          BEGIN
             SELECT COUNT (*)
               INTO v_mig_cnt
               FROM clm_claim_payable_gen g
              WHERE g.pgid = i.pgid
                AND g.i_usr IN ('SLICL', 'INS')
                AND g.clm_cause_cd IN ('02', '06')
                AND g.clm_detl_cd = '01';

             IF v_mig_cnt > 0
             THEN
                UPDATE clm_claim_payable_gen
                   SET cheque_no = i.chq_no,
                       cheque_dt = i.chqdate,
                       pay_order_no = i.chq_no,
                       net_payable_amt = i.chq_amt
                 WHERE pgid = i.pgid
                   AND i_usr IN ('SLICL', 'INS')
                   AND clm_cause_cd IN ('02', '06')
                   AND clm_detl_cd = '01'
                   AND cheque_no IS NOT NULL;
             ELSE
                SELECT COUNT (*)
                  INTO v_sys_cnt
                  FROM clm_claim_payable_gen g
                 WHERE g.pgid = i.pgid
                   AND g.i_usr NOT IN ('SLICL', 'INS')
                   AND g.clm_cause_cd IN ('02', '06')
                   AND g.clm_detl_cd = '01'
                   AND (g.cheque_no IS NOT NULL OR g.cheque_no_2nd IS NOT NULL);

                IF v_sys_cnt > 0
                THEN
                   NULL;
                ELSE
                   SELECT COUNT (*)
                     INTO v_sys_cnt1
                     FROM clm_claim_payable_gen g
                    WHERE g.pgid = i.pgid
                      AND g.i_usr NOT IN ('SLICL', 'INS')
                      AND g.clm_cause_cd IN ('02', '06')
                      AND g.clm_detl_cd = '01'
                      AND g.cheque_no IS NULL
                      AND g.cheque_no_2nd IS NULL;

                   IF v_sys_cnt1 > 0
                   THEN
                      DELETE FROM clm_adjust_bonus
                            WHERE pgid = i.pgid;

                      DELETE FROM clm_adjust_loan
                            WHERE pgid = i.pgid;

                      DELETE FROM ins_anf_loan_dtl
                            WHERE pgid = i.pgid;

                      DELETE FROM ins_anf_loan_mst
                            WHERE pgid = i.pgid;

                      DELETE FROM clm_adjust_other_ded
                            WHERE pgid = i.pgid;

                      DELETE FROM clm_payable_calc_detl
                            WHERE pgid = i.pgid
                              --AND i_usr NOT IN ('SLICL', 'INS')
                              AND clm_cause_cd IN ('02', '06')
                              AND clm_detl_cd = '01';

                      DELETE FROM clm_payable_approval
                            WHERE payable_no IN (
                                     SELECT payable_no
                                       FROM clm_claim_payable_gen
                                      WHERE pgid = i.pgid
                                        AND i_usr NOT IN ('SLICL', 'INS')
                                        AND clm_cause_cd IN ('02', '06')
                                        AND clm_detl_cd = '01');

                      DELETE FROM clm_claim_payable_gen
                            WHERE pgid = i.pgid
                              AND i_usr NOT IN ('SLICL', 'INS')
                              AND clm_cause_cd IN ('02', '06')
                              AND clm_detl_cd = '01';
                   END IF;

                   BEGIN
                      SELECT MIN (payable_no)
                        INTO v_payable_no
                        FROM clm_claim_payable_gen_bk040415
                       WHERE pgid = i.pgid
                         AND i_usr IN ('SLICL', 'INS')
                         AND clm_cause_cd IN ('02', '06')
                         AND clm_detl_cd = '01'
                         AND (cheque_no IS NOT NULL OR cheque_no_2nd IS NOT NULL
                             );
                   EXCEPTION
                      WHEN NO_DATA_FOUND
                      THEN
                         BEGIN
                            SELECT MIN (payable_no)
                              INTO v_payable_no
                              FROM clm_claim_payable_gen_bk040415
                             WHERE pgid = i.pgid
                               AND i_usr NOT IN ('SLICL', 'INS')
                               AND clm_cause_cd IN ('02', '06')
                               AND clm_detl_cd = '01'
                               AND (   cheque_no IS NOT NULL
                                    OR cheque_no_2nd IS NOT NULL
                                   );
                         EXCEPTION
                            WHEN OTHERS
                            THEN
                               v_payable_no := NULL;
                         END;
                      WHEN OTHERS
                      THEN
                         v_payable_no := NULL;
                   END;

                   SELECT MIN (c.sl_no)
                     INTO v_sl_no
                     FROM ins_p_summery s,
                          clm_product_claim_mst m,
                          clm_product_claim_detl c
                    WHERE s.pgid = i.pgid
                      AND s.product_cd = c.product_cd
                      AND s.product_cd = m.product_cd
                      AND c.clm_cause_cd = i.clm_cause_cd              --IN ('02')
                      AND c.clm_detl_cd = '01'
                      AND m.clm_cause_cd = i.clm_cause_cd              --IN ('02')
                      AND m.clm_detl_cd = '01'
                      AND m.setup_id = c.setup_id
                      AND m.policy_status IN ('03', '08')
                      --AND m.policy_status = s.policy_status
                      AND m.ben_party_cd = '03'
                      AND s.term BETWEEN c.policy_term_fr AND c.policy_term_to;

                   IF v_payable_no IS NOT NULL
                   THEN
                      INSERT INTO clm_payable_calc_detl
                                  (pgid, product_cd, sl_no, clm_cause_cd,
                                   clm_detl_cd, ben_party_cd, policy_clm_amt,
                                   pay_type_cd, payment_dt, payable_no)
                         SELECT pgid, product_cd, v_sl_no, clm_cause_cd,
                                clm_detl_cd, ben_party_cd, gross_payable_amt,
                                '03', payment_dt, payable_no
                           FROM clm_claim_payable_gen_bk040415
                          WHERE payable_no = v_payable_no;

                      INSERT INTO clm_claim_payable_gen
                         SELECT *
                           FROM clm_claim_payable_gen_bk040415
                          WHERE payable_no = v_payable_no;
                   ELSE
                      v_payable_no :=
                                fun_build_pk ('P', 'SEQ_CLM_PAYABLE_VR', 15, 'Y');

                      INSERT INTO clm_payable_calc_detl
                                  (pgid, product_cd, sl_no, clm_cause_cd,
                                   clm_detl_cd, ben_party_cd, policy_clm_amt,
                                   pay_type_cd, payment_dt, payable_no)
                         SELECT s.pgid, s.product_cd, v_sl_no, i.clm_cause_cd,
                                i.clm_detl_cd, '03', i.chq_amt, '03',
                                s.maturity_date, v_payable_no
                           FROM ins_p_summery s
                          WHERE s.pgid = i.pgid;

                      INSERT INTO clm_claim_payable_gen
                                  (payable_no, pgid, product_cd, supp_flag,
                                   supp_prod_cd, supp_ben_cd, clm_cause_cd,
                                   clm_detl_cd, ben_party_cd, gross_payable_amt,
                                   bonus_payable, loan_ded_amt, other_ded_amt,
                                   net_payable_amt, payment_status, remarks,
                                   payment_dt, cheque_no, cheque_dt,
                                   suspense_amt, anf_premium_amt, anf_late_fee,
                                   loan_interest, pay_order_no, i_usr, i_dt)
                         SELECT v_payable_no, pgid, s.product_cd, '0', NULL,
                                NULL, i.clm_cause_cd, i.clm_detl_cd, '03',
                                i.chq_amt, 0, 0, 0, i.chq_amt, 'Y',
                                'Migration Data', s.maturity_date, i.chq_no,
                                i.chqdate, 0, 0, 0, 0, i.chq_no, 'SLICL',
                                TO_DATE ('01/01/2015', 'DD/MM/RRRR')
                           FROM ins_p_summery s
                          WHERE s.pgid = i.pgid;
                   END IF;
                END IF;
             END IF;

             v_cnt := v_cnt + 1;
             COMMIT;
          EXCEPTION
             WHEN OTHERS
             THEN
                NULL;
          END;
       END LOOP;
    --DBMS_OUTPUT.put_line ('v_cnt: ' || v_cnt);
    END;
   
   
   
   --pkg_live_data_mgr.pro_pending_coll_info;
   
   /*FOR r IN cur_coll
   LOOP
      DELETE FROM acc_receivables
            WHERE pgid = r.pgid AND i_usr = 'SLICL';

      DELETE FROM ins_prem_acc_receivable
            WHERE pgid = r.pgid AND i_usr = 'SLICL';

      v_cnt := v_cnt + 1;

      IF v_cnt >= 100
      THEN
         COMMIT;
         v_cnt := 0;
      END IF;
   END LOOP;

   COMMIT;*/
END;
/


--
-- DMG_PROCESS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.dmg_process
IS
   v_process_output   VARCHAR2 (200) := 0;
BEGIN
   pkg_gl_year_closing.pro_accounts_bal_sheet_hist (TO_DATE ('01-Jan-2016'),
                                                    TO_DATE ('31-Dec-2016'),
                                                    '07001',
                                                    'INS',
                                                    '2016',
                                                    '2',
                                                    v_process_output
                                                   );

   IF v_process_output IS NULL
   THEN
      COMMIT;
   ELSE
      ROLLBACK;
   END IF;
/*
DECLARE
   v_valid_record_count   NUMBER;
   v_error                VARCHAR2 (200);
BEGIN
   pro_daily_prem_coll_adj (p_user                    => 'SYSUPD',
                            p_office_cd               => '07001',
                            p_agent_id                => NULL,
                            p_pgid                    => NULL,
                            p_ins_tp_cd               => NULL,
                            p_coll_dt_from            => TO_DATE
                                                                ('01/01/2015',
                                                                 'dd/mm/rrrr'
                                                                ),
                            p_coll_dt_to              => TO_DATE
                                                                ('31/12/2015',
                                                                 'dd/mm/rrrr'
                                                                ),
                            p_adjustment_date         => TO_DATE
                                                                ('31/12/2015',
                                                                 'dd/mm/rrrr'
                                                                ),
                            p_fyscal_yr_fr            => TO_DATE
                                                                ('01/01/2015',
                                                                 'dd/mm/rrrr'
                                                                ),
                            p_fyscal_yr_to            => TO_DATE
                                                                ('31/12/2015',
                                                                 'dd/mm/rrrr'
                                                                ),
                            p_descendant_flag         => '1',
                            p_object_cd               => '02620',
                            p_valid_record_count      => v_valid_record_count,
                            p_error                   => v_error
                           );

END;*/
/*DECLARE
   v_instl_no_from   NUMBER (2);
   v_due_dt_from     DATE;
   v_instl_no_to     NUMBER (2);
   v_due_dt_to       DATE;
   v_cnt             NUMBER;
   v_comm_date       DATE;
   v_receive_id      acc_receivables.receive_id%TYPE;
   v_errm            VARCHAR2 (200);
   v_record          NUMBER (3);

   CURSOR cur_coll
   IS
      SELECT t.receive_id, t.receive_date, t.received_by, t.collection_type,
             t.office_code, t.receive_mode, t.coll_slip_no, t.coll_amount,
             t.pgid, t.bank_branch_name, t.cheque_no, t.cheque_date,
             t.vouch_ref, t.coll_slip_by, t.i_usr, t.i_dt, t.u_usr, t.u_dt,
             t.coll_slip_rec_dt, t.to_bank_cd, t.to_br_cd, t.status,
             t.premium_status, t.installment_no_from, t.avl_sus_amt,
             t.installment_no_to, t.due_dt_from, t.due_dt_to,
             (t.installment_no_to - t.installment_no_from + 1) no_of_instl,
             t.tot_premium_amt, t.late_fee, t.interoffice_voucher,
             t.active_office_cd, t.mode_tp, t.coll_sl_no, t.web_feed_send,
             t.rec_status, t.latefee_waiver, t.cheque_deposit,
             t.receipt_status, t.collection_time_pol_stat, t.com_calculated,
             t.adjustment_date, t.adv_status, t.man_adjusted, t.adjusted_by,
             t.com_exe_date, t.last_due_dt_of_com_exe, t.alt_sl,
             t.adjusted_by_dgh, t.stamp_amt, t.amt_submit_st,
             t.amt_submit_dt, t.coll_check_status, t.coll_check_dt,
             t.coll_checked_by, t.summery_flag, t.bank_deposit_st,
             t.adj_slip_no, t.create_from_ip, t.receive_id_sl_no,
             t.old_active_office_cd, t.rev_voucher, t.old_coll_slip_rec_dt,
             t.return_st, t.action_ip_address, t.action_terminal_name,
             t.action_os_user_name
        FROM acc_receivables_mgr t
       WHERE NOT EXISTS (
                SELECT 1
                  FROM acc_receivables r
                 WHERE r.pgid = t.pgid
                   AND r.coll_amount = t.coll_amount
                   --AND r.coll_slip_no = t.coll_slip_no
                   AND (   r.coll_slip_no = t.coll_slip_no
                          OR (    r.coll_slip_no = SUBSTR (t.coll_slip_no, -8)
                              AND t.coll_slip_rec_dt >=
                                                  TO_DATE ('01/01/2015', 'DD/MM/RRRR')
                             )
                         )
                                                      --AND r.coll_slip_rec_dt = c.coll_slip_rec_dt
             )
         --AND t.pgid = '1212301100100331'
         ;
BEGIN
   FOR i IN cur_coll
   LOOP
      BEGIN
         v_cnt := 1;

         SELECT COUNT (*)
           INTO v_cnt
           FROM acc_receivables r
          WHERE r.pgid = i.pgid
            AND r.coll_amount = i.coll_amount
            AND r.coll_slip_no = i.coll_slip_no;

         --AND r.coll_slip_rec_dt = i.coll_slip_rec_dt;
         IF v_cnt = 0
         THEN
            SELECT NVL (MAX (r.installment_no_to), 1) + 1 instl_no_from,
                   ADD_MONTHS (NVL (MAX (r.due_dt_to), MAX (s.comm_date)),
                               DECODE (MAX (s.pay_mode_cd),
                                       '01', 12,
                                       '02', 6,
                                       '03', 3,
                                       '04', 1,
                                       0
                                      )
                              ) due_dt_from,
                   MAX (s.comm_date) comm_date
              INTO v_instl_no_from,
                   v_due_dt_from,
                   v_comm_date
              FROM acc_receivables r, ins_p_summery s
             WHERE r.pgid = i.pgid AND r.pgid = s.pgid;

            IF v_comm_date IS NULL
            THEN
               SELECT ADD_MONTHS (s.comm_date,
                                    DECODE (s.pay_mode_cd,
                                            '01', 12,
                                            '02', 6,
                                            '03', 3,
                                            '04', 1,
                                            0
                                           )
                                  * v_instl_no_from
                                 ) due_dt_from,
                      s.comm_date
                 INTO v_due_dt_from,
                      v_comm_date
                 FROM ins_p_summery s
                WHERE s.pgid = i.pgid;
            END IF;

            IF TO_CHAR (v_due_dt_from, 'dd') > TO_CHAR (v_comm_date, 'dd')
            THEN
               v_due_dt_from :=
                  TO_DATE (   TO_CHAR (v_due_dt_from, 'rrrrmm')
                           || TO_CHAR (v_comm_date, 'dd'),
                           'rrrrmmdd'
                          );
            END IF;

            v_instl_no_to := v_instl_no_from + i.no_of_instl - 1;

            SELECT ADD_MONTHS (s.comm_date,
                                 DECODE (s.pay_mode_cd,
                                         '01', 12,
                                         '02', 6,
                                         '03', 3,
                                         '04', 1,
                                         0
                                        )
                               * (v_instl_no_to - 1)
                              ) due_dt_from
              INTO v_due_dt_to
              FROM ins_p_summery s
             WHERE s.pgid = i.pgid;

            IF TO_CHAR (v_due_dt_to, 'dd') > TO_CHAR (v_comm_date, 'dd')
            THEN
               v_due_dt_to :=
                  TO_DATE (   TO_CHAR (v_due_dt_to, 'rrrrmm')
                           || TO_CHAR (v_comm_date, 'dd'),
                           'rrrrmmdd'
                          );
            END IF;

            SELECT acc_rec_id.NEXTVAL
              INTO v_receive_id
              FROM DUAL;

            --Generate collection record--
            INSERT INTO acc_receivables
                        (receive_id, receive_date, received_by,
                         collection_type, office_code, receive_mode,
                         coll_slip_no, coll_amount, pgid,
                         bank_branch_name, cheque_no, cheque_date,
                         vouch_ref, coll_slip_by, i_usr, i_dt,
                         u_usr, u_dt, coll_slip_rec_dt, to_bank_cd,
                         to_br_cd, status, premium_status,
                         installment_no_from, avl_sus_amt, installment_no_to,
                         due_dt_from, due_dt_to, tot_premium_amt,
                         late_fee, interoffice_voucher,
                         active_office_cd, mode_tp, coll_sl_no,
                         web_feed_send, rec_status, latefee_waiver,
                         cheque_deposit, receipt_status,
                         collection_time_pol_stat, com_calculated,
                         adjustment_date, adv_status, man_adjusted,
                         adjusted_by, com_exe_date,
                         last_due_dt_of_com_exe, alt_sl,
                         adjusted_by_dgh, stamp_amt, amt_submit_st,
                         amt_submit_dt, coll_check_status,
                         coll_check_dt, coll_checked_by, summery_flag,
                         bank_deposit_st, adj_slip_no, create_from_ip,
                         receive_id_sl_no, old_active_office_cd,
                         rev_voucher, old_coll_slip_rec_dt, return_st,
                         action_ip_address, action_terminal_name,
                         action_os_user_name
                        )
                 VALUES (v_receive_id, i.receive_date, i.received_by,
                         i.collection_type, i.office_code, i.receive_mode,
                         i.coll_slip_no, i.coll_amount, i.pgid,
                         i.bank_branch_name, i.cheque_no, i.cheque_date,
                         i.vouch_ref, i.coll_slip_by, i.i_usr, i.i_dt,
                         i.u_usr, i.u_dt, i.coll_slip_rec_dt, i.to_bank_cd,
                         i.to_br_cd, i.status, i.premium_status,
                         v_instl_no_from, i.avl_sus_amt, v_instl_no_to,
                         v_due_dt_from, v_due_dt_to, i.tot_premium_amt,
                         i.late_fee, i.interoffice_voucher,
                         i.active_office_cd, i.mode_tp, i.coll_sl_no,
                         i.web_feed_send, i.rec_status, i.latefee_waiver,
                         i.cheque_deposit, i.receipt_status,
                         i.collection_time_pol_stat, i.com_calculated,
                         i.adjustment_date, '0', '1',
                         i.adjusted_by, i.com_exe_date,
                         i.last_due_dt_of_com_exe, i.alt_sl,
                         i.adjusted_by_dgh, i.stamp_amt, i.amt_submit_st,
                         i.amt_submit_dt, i.coll_check_status,
                         i.coll_check_dt, i.coll_checked_by, i.summery_flag,
                         i.bank_deposit_st, i.adj_slip_no, i.create_from_ip,
                         i.receive_id_sl_no, i.old_active_office_cd,
                         i.rev_voucher, i.old_coll_slip_rec_dt, i.return_st,
                         i.action_ip_address, i.action_terminal_name,
                         'mig'
                        );

            UPDATE ins_prem_acc_receivable
               SET paid_amount = installment_premium,
                   balance = 0,
                   pay_status = '1',
                   payment_date = i.adjustment_date,
                   proposed_status = '1',
                   proposer_pk = v_receive_id
             WHERE pgid = i.pgid
               AND installment_no BETWEEN v_instl_no_from AND v_instl_no_to;
               --AND next_due_dt BETWEEN v_due_dt_from AND v_due_dt_to;

            IF SQL%NOTFOUND
            THEN
               pro_policy_due_creation (p_pgid        => i.pgid,
                                        p_usr         => 'SLICL',
                                        p_dt          => v_due_dt_to,
                                        p_errm        => v_errm,
                                        p_record      => v_record
                                       );

               UPDATE ins_prem_acc_receivable
                  SET paid_amount = installment_premium,
                      balance = 0,
                      pay_status = '1',
                      payment_date = i.adjustment_date,
                      proposed_status = '1',
                      proposer_pk = v_receive_id
                WHERE pgid = i.pgid
                  AND installment_no BETWEEN v_instl_no_from AND v_instl_no_to;
                  --AND next_due_dt BETWEEN v_due_dt_from AND v_due_dt_to;
            END IF;
         COMMIT;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            --DBMS_OUTPUT.put_line (i.pgid||'=='||sqlerrm);
            ROLLBACK;
      --exit;
      END;
   END LOOP;
END;
*/

/*DECLARE
   CURSOR cur_coll
   IS
      SELECT r.pgid, r.coll_slip_no actual_coll_slip_no,
             SUBSTR (r.coll_slip_no, -8) coll_slip_no, r.coll_slip_rec_dt,
             r.collection_type, s.product_cd
        FROM acc_receivables r, ins_p_summery s
       WHERE r.coll_slip_rec_dt >= TO_DATE ('01/01/2015', 'DD/MM/RRRR')
         AND r.i_usr <> 'SLICL'
         AND r.pgid = s.pgid
         AND EXISTS (
                SELECT 1
                  FROM acc_coll_media_dtl m
                 WHERE m.media_no = SUBSTR (r.coll_slip_no, -8)
                   AND m.used_status = '0'
                   AND m.applicable_using_yr = '2015'
                   AND group_number IN (
                          SELECT DISTINCT group_number
                                     FROM acc_pr_control_setup
                                    WHERE product_cd = s.product_cd
                                      AND coll_media_cd = r.collection_type
                       ));
BEGIN
   FOR i IN cur_coll
   LOOP
      UPDATE acc_coll_media_dtl
         SET used_status = '1',
             used_date = TRUNC (SYSDATE),
             u_usr = 'INS',
             u_dt = SYSDATE
       WHERE media_no = i.coll_slip_no
         AND used_status = '0'
         AND group_number IN (
                SELECT group_number
                  FROM acc_pr_control_setup
                 WHERE product_cd = i.product_cd
                   AND coll_media_cd = i.collection_type);

      COMMIT;
   END LOOP;
END;*/

/*DECLARE
      CURSOR cur_pol
      IS
         SELECT s.pgid, s.last_paid_inst_no, c.max_instl_no, max_due_dt_to      --count(s.pgid)
           FROM ins_p_summery s,
                (SELECT   r.pgid, MAX (r.installment_no_to) max_instl_no,
                          MAX (r.due_dt_to) max_due_dt_to
                     FROM acc_receivables r
                    WHERE r.rec_status = '1' AND r.status = '1'
                 GROUP BY r.pgid) c
          WHERE s.maturity_date > TRUNC (SYSDATE)
            AND s.pgid = c.pgid
            AND s.last_paid_inst_no < c.max_instl_no;
   BEGIN
      FOR i IN cur_pol
      LOOP
         UPDATE ins_p_summery
            SET last_paid_inst_no = i.max_instl_no,
                last_paid_date = i.max_due_dt_to,
                next_due_inst_no = i.max_instl_no + 1,
                next_due_date =
                   ADD_MONTHS (i.max_due_dt_to,
                               DECODE (pay_mode_cd,
                                       '01', 12,
                                       '02', 6,
                                       '03', 3,
                                       '04', 1,
                                       0
                                      )
                              )
          WHERE pgid = i.pgid;
          commit;
      END LOOP;
   END;*/
  /*UPDATE acc_receivables r
  SET r.active_office_cd = LPAD (r.active_office_cd, 5, 0)
WHERE LENGTH (r.active_office_cd) < 5
  AND r.coll_slip_rec_dt >= TO_DATE ('01/01/2015', 'DD/MM/RRRR');*/

--pkg_live_data_mgr.pro_proposal_info;

--PKG_LIVE_DATA_MGR.pro_pending_coll_info;
--pkg_live_data_mgr.pro_collection_info;
/*DECLARE
   v_output       VARCHAR2 (2000);
   v_process_st   VARCHAR2 (200);

   CURSOR cur_clm
   IS
      SELECT clm_tp, pgid, policy_no, party_name, maturity_date,
             sum_assured, product_cd, term, pay_mode_cd, office_cd,
             project_cd, deposit_prem,
             ROUND (pol_run_year, 2) pol_run_year, last_paid_inst_no,
             clm_payable_amt
        FROM (SELECT 'Paidup' clm_tp, s.pgid,
                     fun_ins_pgid_to_policy_no (s.pgid) policy_no,
                     (SELECT party_name
                        FROM ins_p_personal
                       WHERE pgid = s.pgid
                         AND party_cd = '03'
                         AND sl_no = 1) party_name,
                     s.maturity_date, s.sum_assured, s.product_cd, s.term,
                     s.pay_mode_cd, s.office_cd, l.project_cd,
                       s.installment_premium
                     * s.last_paid_inst_no deposit_prem,
                     (  s.last_paid_inst_no
                      / DECODE (s.pay_mode_cd,
                                '01', 1,
                                '02', 2,
                                '03', 4,
                                '04', 12,
                                1
                               )
                     ) pol_run_year,
                     s.last_paid_inst_no,
                     fun_paidup_value (s.pgid) clm_payable_amt
                FROM ins_p_summery s, ins_p_proposal l
               WHERE s.maturity_date < TO_DATE ('01/01/2015', 'dd/mm/rrrr')
                 AND s.maturity_date >=
                                       TO_DATE ('01/01/2001', 'dd/mm/rrrr')
                 AND (  s.last_paid_inst_no
                      / DECODE (s.pay_mode_cd,
                                '01', 1,
                                '02', 2,
                                '03', 4,
                                '04', 12,
                                1
                               )
                     ) >= 2
                 AND s.last_paid_inst_no < s.policy_installment
                 AND s.pgid = l.pgid
                 AND NOT EXISTS (
                        SELECT 1
                          FROM clm_claim_payable_gen g
                         WHERE g.clm_cause_cd IN ('02','06')
                           AND g.clm_detl_cd = '01'
                           AND g.pgid = s.pgid)) b
       WHERE NOT EXISTS (
                SELECT 1
                  FROM clm_claim_appl a
                 WHERE a.clm_cause_cd IN ('02','06')
                   AND a.clm_detl_cd = '01'
                   AND a.pgid = b.pgid)
         AND NOT EXISTS (SELECT 1
                           FROM ins_policy_bonus n
                          WHERE n.pgid = b.pgid)
          --AND pgid = '0412280702500764'
   ;
BEGIN
   FOR i IN cur_clm
   LOOP
      FOR j IN (SELECT bonus_cd
                  FROM ins_bonus_type)
      LOOP
         pro_policy_bonus_cal (p_pgid                    => i.pgid,
                               p_bonus_yr                => NULL,
                               p_bonus_cd                => j.bonus_cd,
                               p_applicable_on           => '3',
                               p_no_of_anf_loan_yr       => 0,
                               p_usr                     => 'INS',
                               p_irg_bonus_bar_date      => TRUNC (SYSDATE),
                               p_output                  => v_output,
                               p_process_st              => v_process_st
                              );
          COMMIT;
      END LOOP;
   END LOOP;
END;*/
END;
/


--
-- GL_TRANSFER  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.gl_transfer
IS
   CURSOR cur_voucher
   IS
      SELECT vouch_no, office_cd
        FROM acc_gl_trans_mst m
       WHERE vouch_dt < TO_DATE ('01-jan-2019');

   rec_cur_voucher   cur_voucher%ROWTYPE;
   v_rec_count       NUMBER (3)            := 0;
   v_count           NUMBER (10)           := 0;
BEGIN
   OPEN cur_voucher;

   LOOP
      FETCH cur_voucher
       INTO rec_cur_voucher;

      EXIT WHEN cur_voucher%NOTFOUND;

      INSERT INTO acc_gl_trans_mst_hist
         (SELECT *
            FROM acc_gl_trans_mst
           WHERE vouch_no = rec_cur_voucher.vouch_no
             AND office_cd = rec_cur_voucher.office_cd);

      INSERT INTO acc_gl_trans_dtl_hist
         (SELECT *
            FROM acc_gl_trans_dtl
           WHERE vouch_no = rec_cur_voucher.vouch_no
             AND office_cd = rec_cur_voucher.office_cd);

      DELETE FROM acc_gl_trans_dtl
            WHERE vouch_no = rec_cur_voucher.vouch_no
              AND office_cd = rec_cur_voucher.office_cd;

      DELETE FROM acc_gl_trans_mst
            WHERE vouch_no = rec_cur_voucher.vouch_no
              AND office_cd = rec_cur_voucher.office_cd;

      IF v_rec_count = 100
      THEN
         COMMIT;
         v_rec_count := 0;
      ELSE
         v_rec_count := v_rec_count + 1;
      END IF;
   END LOOP;

   CLOSE cur_voucher;

   COMMIT;
END;
/


--
-- PRO_ACC_COLL_SUM_CFO_UPDT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.PRO_ACC_COLL_SUM_CFO_UPDT
IS
BEGIN
   FOR i IN (SELECT   d.receive_id,
                      m.bank_cd,
                      m.bank_acc_no,
                      m.tran_dt
               FROM   acc_bank_tran_dtl d, acc_bank_tran_mst m
              WHERE   m.tran_id = d.tran_id
                      AND d.receive_id IN (SELECT   RECEIVE_ID
                                             FROM   ins.ACC_COLL_SUMMERY_CFO
                                            WHERE   TO_BANK_CD IS NULL))
   LOOP
      UPDATE   ins.ACC_COLL_SUMMERY_CFO
         SET   TO_BANK_CD = i.bank_cd,
               TO_ACC_NO = i.bank_acc_no,
               TRANS_DT = i.tran_dt
       WHERE   receive_id = i.receive_id;

      COMMIT;
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      NULL;
END;
/


--
-- PRO_ACC_INVESTMENT_INT_CAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_acc_investment_int_cal wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
276e 792
JFyppMO1RtY/BNCnXek2dUFL+vUwg82jDMca3y//WA+zxPv92k64zSuKtFwwULQaBARGdVWt
zLriABrFMRrxO24zxmRGyMhG23xB9LFbHjZNPZYyqlXK31cPUVMV5/n5wWSS6+tec/ictSK1
+IFycg+8JdlkgeuwJN3+pnBeSTFhh9RQStijmu92myYBiTxSomkuwCNy4oP05dtQ8HlGnNDz
QRI3nIlfcPbYXdZVmgTr1X6Q/wpfqSJT4I+WrKcW2R7PXGROX3pF9HVSs6MXSePJ6y+Le8RX
gzfwSwuA1C1eimS/UxcOiRtJeSUrV6PxFHLDDY7FnxIQmeunIwdmbrn1lDtFlG/+1UWUb75I
JgKVp7xslV/8oor95R7fLAxTBAwwKqcvkoTTCVES0siRc33ovFDTQ9QLIQp2hOGhOT/0CaAU
3QNWRtHKMSomfwzli95ZT9jvCe5GiqvJQWtHnsH246cMb3dNFPaJ89Zdau9RPg/Tl2NGunVH
Gxso48JTPQLTkQWOzzemOPh6S+IxonXl6Z/924h4w95BIKP8PFlBvncP8b0qZR8+zbJ1Ceu6
dgOlgSH2GsL6bJ1dy8lu6tPFEXphKPrvl3sd9Rq+b1ngwIwlFsqooc7tyoTeJn6A9tVQzZLn
IrdQDmmmwXyZBQfehxsxhBAsY0AkAiR77eYuRCCaQf6kKl07Sov7wT05ub/KaLTs1OHgbJDl
hvyBOxf6GMni2LvzOqkvslJiqOZajPEhUO72yTk38B8yWInX8UAmsbPM0o4+WpaT9391QHyv
MNM2uEIx8wVdX6vmhQOI5yJFgEoBsbQwVrfd2p9j8c3Kwq764todBIFZGh0QWXc0tjdJLPXq
yfBRkyb68fNqgbhAYHau4c6ByxtelL0SGIiNp/K6We7gw6V/va/wr9dpVY0oejMS+aV+bjD9
NVjpUkfHAxqj7sW6MzLg8KYN+Kyss84ATy17fYNM0XNKrBiMZ5Nxg+pVVO3G9Ts7fe7IJOM1
fqHWlUBqcn3UIzOPi4Zo40Q7WdL9VieORFzlNLv2XF3YNw+HaB3OWCqrXmJZYdzREKgXQIIE
apXaPKM++dNDeMX3eXLeUoV2CHEEswOHgleUP5Dw0A4A1irzmVt4byKfzHIr5PwaGJ39Cc8/
CZWaT8MID0COD27DCDHSGuxyi4Tl/sSc4OOS2HkDnoGT61mVXInlWmrsSqwy/IqyqZ/znhft
jzdNKgcS1NPkANs2A4mUjBhYE/1Uh4uKc3F4b7lF6opkz5BQN55UdD1nvo1grX1XKJxEIuQ/
bfKyOGYxjseP6aCvHwfEw5q8vnh9cMn8DrIZ92IZr81MfKMLagm7FgJWbLQuqhltj4fYhSCZ
HWvtZEVvSpJ7ilvEooh+ZSU577BVEIITfdrBggiLlwkDGaWLBwbXIFySQHjvPg/aGUcPKhkh
9zPCME4ZJSe87tcolRPPoRmlyRRD9sYTlQrUExslh28gyV4F/Qb9BjTKBnQEYksRtJayrhmr
6THnTfzhfpYmZo9T7/u1tftqXt3ux53BLEv85KnQqhIxy4wIMDY/rXftIy5NBRKQtJyCxRxq
FuQxxNZqhjbzc9ipHO0RzyEoLSEMdbIrYmxRc7pRutu8Vieau7fYonWlZKeMShJDpZUpENuF
VBZFYQkcwwfK7wN0qJoOX6RcIIx3DQnlyqpMaf/EhFq0tWfiDaFOC9bjIYGwB+A8whTiDdJc
DGmmedZFHtVSzfCD5iejAvL85Qzu2DfrkTzlU45lrljmhn5gJJe/x8xMJpB2kP23E6ixp5jx
+KAA53671mmtP55DH2XE3+Tw34ntyRYIcu6HxqgBuxorQduIgA/8u28di/YKbj5jXV79wToj
VZAh/tLZ5SHNGzIB0q2MgvzJ2vfS/Iuwu13KoIg=
/


--
-- PRO_AGENT_BILL_COLL_UNDO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_agent_bill_coll_undo (
   p_pgid_no                 VARCHAR2,
   p_agent_id                VARCHAR2,
   p_bill_no                 VARCHAR2,
   p_coll_date               DATE,
   p_coll_type               CHAR,                       --1=Online,'2=Offline
   p_undo_type               CHAR,
   p_u_usr                   VARCHAR2,
   p_request_by              VARCHAR2,
   p_prem_type               CHAR,
   p_bank_deposit_st         CHAR,
   p_receive_id              NUMBER,
   p_emp_type                VARCHAR2,
   p_emp_gid                 VARCHAR2,
   out_error           OUT   VARCHAR
)
IS
   -------------p_undo_type=0 then undo bill
   -------------p_undo_type=1 then undo bill and commission
   -------------p_undo_type=4  then undo only commission
   -------------p_undo_type=3 then unadjust collection
   /******************************************************************************
      NAME:       pro_agent_bill_coll_undo
      PURPOSE:    to undo bill and commission

      REVISIONS:
      Ver      Date            Author                  Description
      ----     ----------      ----------------------  ---------------------------
      1.0      23/08/2015    Parama Biswas     1. Created this procedure.
   ******************************************************************************/
   v_bill_count         NUMBER (10);
   v_com_count          NUMBER (5)     := 0;
   --v_dispatch_vou     VARCHAR2 (20);
   v_adjustment_vou     VARCHAR2 (20);
   v_max_action_id      NUMBER (20);
   v_temp               VARCHAR2 (12)  := 0;
   v_adv_status         VARCHAR2 (1);
   v_man_adjusted       VARCHAR2 (1);
   v_suspense           NUMBER (15, 2) := 0;
   v_date               DATE           := NULL;
   v_comm_date          DATE;
   v_voucher            VARCHAR2 (100);
   v_next_due_date      DATE;
   v_com_date           DATE;
   v_deposit_count      NUMBER (30);
   v_bank_deposit_amt   NUMBER (15, 2);
   v_due_date           DATE;
   v_inst_no_from       VARCHAR2 (100);
   v_count              VARCHAR2 (30);
   --v_proposal_no      VARCHAR2 (20);
   err_comm_date        EXCEPTION;
   err_bill_invld       EXCEPTION;
BEGIN
   out_error := NULL;

   IF p_prem_type = '1' AND p_pgid_no IS NOT NULL
   THEN
      BEGIN
         SELECT s.comm_date                                  --, p.proposal_no
           INTO v_comm_date                                  --, v_proposal_no
           FROM ins_p_summery s, ins_p_proposal p
          WHERE s.pgid = p_pgid_no AND s.pgid = p.pgid;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            RAISE err_comm_date;
      END;
   END IF;

   IF p_undo_type IN ('0', '1')
------------------------------------------------------------BILL UNDO
   THEN
      IF p_emp_type = '05'
      THEN
         -------------GENERATE ACTION ID----------------------
         SELECT NVL (MAX (action_id), 0) + 1
           INTO v_max_action_id
           FROM com_agent_com_bill_mst_invld;

-------------------------------------------------------
-- 0=Bill Undo
         IF p_agent_id IS NOT NULL AND p_bill_no IS NOT NULL
         THEN
            SELECT COUNT (1)
              INTO v_bill_count
              FROM com_agent_com_bill_mst
             WHERE agent_id = p_agent_id AND bill_no = p_bill_no;

            IF v_bill_count > 0
            THEN
               -----------------INSERT BILL MASTER INFO IN INVALID TABLE---------------------------
               BEGIN
                  INSERT INTO com_agent_com_bill_mst_invld
                              (bill_no, bill_date, agent_id, office_cd,
                               gross_payable_amt, tax_ded_req, tax_ded_rate,
                               tax_ded_amt, bill_amount, cheque_no,
                               cheque_dt, off_bank_cd, off_br_cd, off_acc_no,
                               agent_acc_no, agent_acc_bank_cd,
                               agent_acc_br_cd, stamp_amt,
                               stamp_money_receive, stamp_vr_no,
                               disburse_status, disburse_vr_no, disburse_dt,
                               disburse_by, remarks, i_usr, i_dt, u_usr,
                               u_dt, ins_tp_cd, action_usr, action_dt,
                               action_id)
                     SELECT bill_no, bill_date, agent_id, office_cd,
                            gross_payable_amt, tax_ded_req, tax_ded_rate,
                            tax_ded_amt, bill_amount, cheque_no, cheque_dt,
                            off_bank_cd, off_br_cd, off_acc_no, agent_acc_no,
                            agent_acc_bank_cd, agent_acc_br_cd, stamp_amt,
                            stamp_money_receive, stamp_vr_no,
                            disburse_status, disburse_vr_no, disburse_dt,
                            disburse_by, remarks, i_usr, i_dt, u_usr, u_dt,
                            ins_tp_cd, p_u_usr, SYSDATE, v_max_action_id
                       FROM com_agent_com_bill_mst
                      WHERE bill_no = p_bill_no;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     RAISE err_bill_invld;
               END;

               ----------------------DELETE VOUCHER-------------------------------
               SELECT disburse_vr_no
                 INTO v_voucher
                 FROM com_agent_com_bill_mst
                WHERE bill_no = p_bill_no;

               /*DELETE FROM acc_gl_trans_dtl
                     WHERE vouch_no = v_voucher;

               DELETE FROM acc_gl_trans_mst
                     WHERE vouch_no = v_voucher;*/
               BEGIN
                 ----------------------REVERSE VOUCHER----------------------------
                 pkg_gl_voucher.pro_rev_voucher_posting
                            (p_object_cd           => '02750',
                             p_trans_date          => TRUNC (SYSDATE),
                             p_rev_voucher_no      => v_voucher,
                             p_narration           => 'Undo FA Bill',
                             p_user                => p_u_usr,
                             p_voucher_no          => v_voucher,
                             p_error               => out_error
                            );
              EXCEPTION
                 WHEN OTHERS
                 THEN
                    out_error := SQLERRM;
              END;

               ----------------------INSERT BILL DETAIL INFO INTO INVAILD TABLE------------------------------------------------
               INSERT INTO com_agent_com_bill_dtl_invld
                           (bill_no, fa_comm_no, pgid, prem_due_dt,
                            earning_cd, gross_bill_amt, tax_ded_amt,
                            net_bill_amt, i_usr, i_dt, u_usr, u_dt, pay_rate,
                            receive_dt, branch_off, sales_off, zonal_off,
                            servicing_off, action_usr, action_dt, action_id)
                  SELECT bill_no, fa_comm_no, pgid, prem_due_dt, earning_cd,
                         gross_bill_amt, tax_ded_amt, net_bill_amt, i_usr,
                         i_dt, u_usr, u_dt, pay_rate, receive_dt, branch_off,
                         sales_off, zonal_off, servicing_off, p_u_usr,
                         SYSDATE, v_max_action_id
                    FROM com_agent_com_bill_dtl
                   WHERE bill_no = p_bill_no;

-------------------------------------------------------------------------------------------
               IF p_undo_type = '1'  --------------------------UNDO COMMISSION
               THEN
                  BEGIN
                     SELECT COUNT (agent_id)
                       INTO v_com_count
                       FROM com_agent_com_detail
                      WHERE agent_id = p_agent_id AND bill_no = p_bill_no;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_error := SQLERRM;
                  END;

                  IF v_com_count > 0
                  THEN
                     -----------------------INSERT COMMISSION INFO INTO INVALID TABLE-----------------
                     BEGIN
                        INSERT INTO com_agent_com_detail_invld
                                    (fa_comm_no, agent_id, office_cd, pgid,
                                     prem_due_dt, earning_cd, comm_bon_year,
                                     payable_amount, payable_vouch_dt,
                                     payable_vouch_no, com_exe_date,
                                     process_user, process_date, bill_status,
                                     bill_no, i_usr, i_dt, u_usr, u_dt,
                                     agent_org_setup, agent_org_setup_lvl,
                                     ins_tp_cd, pay_rate, receive_date,
                                     action_usr, action_dt, action_id)
                           SELECT fa_comm_no, agent_id, office_cd, pgid,
                                  prem_due_dt, earning_cd, comm_bon_year,
                                  payable_amount, payable_vouch_dt,
                                  payable_vouch_no, com_exe_date,
                                  process_user, process_date, bill_status,
                                  bill_no, i_usr, i_dt, u_usr, u_dt,
                                  agent_org_setup, agent_org_setup_lvl,
                                  ins_tp_cd, pay_rate, receive_date, p_u_usr,
                                  SYSDATE, v_max_action_id
                             FROM com_agent_com_detail
                            WHERE bill_no = p_bill_no
                              AND agent_id = p_agent_id;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           out_error := SQLERRM;
                     END;

--------------------------------------------------------------------------
                     FOR i IN (SELECT fa_comm_no, pgid
                                 FROM com_agent_com_detail
                                WHERE bill_no = p_bill_no
                                  AND agent_id = p_agent_id)
                     LOOP
                        ----------------------DELETE VOUCHER-------------------------------
                        SELECT payable_vouch_no
                          INTO v_voucher
                          FROM com_agent_com_detail
                         WHERE fa_comm_no = i.fa_comm_no;

                       /* DELETE FROM acc_gl_trans_dtl
                              WHERE vouch_no = v_voucher;

                        DELETE FROM acc_gl_trans_mst
                              WHERE vouch_no = v_voucher;*/
                              
                         BEGIN
                             ----------------------REVERSE VOUCHER----------------------------
                             pkg_gl_voucher.pro_rev_voucher_posting
                                        (p_object_cd           => '02750',
                                         p_trans_date          => TRUNC (SYSDATE),
                                         p_rev_voucher_no      => v_voucher,
                                         p_narration           => 'Undo FA Commission',
                                         p_user                => p_u_usr,
                                         p_voucher_no          => v_voucher,
                                         p_error               => out_error
                                        );
                          EXCEPTION
                             WHEN OTHERS
                             THEN
                                out_error := SQLERRM;
                          END;

----------------------------------------------------------------------
                        IF p_prem_type = '0'
                        --------------------------------OTHER PREMIUM
                        THEN
                           BEGIN
                              --9     Update Collection record in ACC_RECEIVABLE
                              UPDATE acc_receivables r
                                 SET r.com_calculated = 'N',
                                     r.com_exe_date = NULL,
                                     r.u_dt = SYSDATE,
                                     r.u_usr = USER
                               WHERE r.pgid = i.pgid
                                 AND r.rec_status = '1'
                                 --AND r.com_calculated = 'Y'
                                 AND EXISTS (
                                        SELECT 1
                                          FROM com_agent_com_detail d
                                         WHERE d.agent_id = p_agent_id
                                           AND bill_no = p_bill_no
                                           AND d.pgid = i.pgid
                                           AND d.prem_due_dt
                                                  BETWEEN r.due_dt_from
                                                      AND r.due_dt_to);
                           EXCEPTION
                              WHEN OTHERS
                              THEN
                                 out_error := SQLERRM;
                           END;
                        ELSE
                           BEGIN
                              UPDATE acc_advance_receivables r
                                 -------------------FIRST PREMIUM
                              SET com_calculated = 'N',
                                  com_exe_date = NULL,
                                  u_dt = SYSDATE,
                                  u_usr = USER
                               WHERE pgid = i.pgid
                                 AND r.rec_status = '1'
                                 AND r.com_calculated = 'Y';
                           EXCEPTION
                              WHEN OTHERS
                              THEN
                                 out_error := SQLERRM;
                           END;
                        END IF;
                     END LOOP;
                  END IF;
               END IF;

               -------------UPDATE COM_AGENT_COM_DETAIL--------------------------------------
               FOR i IN (SELECT fa_comm_no, pgid
                           FROM com_agent_com_detail
                          WHERE bill_no = p_bill_no AND agent_id = p_agent_id)
               LOOP
                  UPDATE com_agent_com_detail
                     SET bill_no = NULL,
                         u_usr = p_u_usr,
                         u_dt = SYSDATE,
                         bill_status = '0'
                   WHERE agent_id = p_agent_id AND fa_comm_no = i.fa_comm_no;

                  INSERT INTO ins_agent_bill_change
                              (old_bill_no, new_bill_no, req_by,
                               changing_date, comments,
                               pgid
                              )
                       VALUES (p_bill_no, NULL, p_request_by,
                               SYSDATE, 'Undo the bill based on requesting',
                               i.pgid
                              );

                  BEGIN
                     --4     Delete from bill INFO FROM DETAIL TABLE
                     DELETE FROM com_agent_com_bill_dtl
                           WHERE bill_no = p_bill_no;

                     --1.    Delete from all BILL INFO FROM MASTER TABLE
                     DELETE FROM com_agent_com_bill_mst
                           WHERE bill_no = p_bill_no;

                     IF p_undo_type = '1'
                     --------------------------DELETE FROM COMMISSION TABLE TO UNDO COMMISSION
                     THEN
                        DELETE FROM com_agent_com_detail
                              WHERE fa_comm_no = i.fa_comm_no;
                     END IF;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_error := SQLERRM;
                  END;
               END LOOP;
            ELSE
               out_error := 'Agent id and bill number must be input!';
            END IF;
         END IF;
      ----------------------------BC,DC AND ABOVE BILL UNDO------------------------------------------
      ELSIF p_emp_type NOT IN ('05', '06', '07')
      THEN
         -------------GENERATE ACTION ID----------------------
         SELECT NVL (MAX (action_id), 0) + 1
           INTO v_max_action_id
           FROM com_emp_com_bonus_invld;

-------------------------------------------------------
         IF p_emp_gid IS NOT NULL AND p_bill_no IS NOT NULL
         THEN
            -----------------COUNT THERE IS BILL OR NOT-----------------------
            SELECT COUNT (1)
              INTO v_bill_count
              FROM com_emp_bon_com_bil_mst
             WHERE emp_gid = p_emp_gid AND bill_no = p_bill_no;

            IF v_bill_count > 0
            THEN
               -----------------INSERT BILL MASTER INFO IN INVALID TABLE---------------------------
               BEGIN
                  INSERT INTO com_emp_com_bonus_invld
                              (bill_no, bill_date, emp_gid, office_cd,
                               gross_payable_amt, tax_ded_req, tax_ded_rate,
                               tax_ded_amt, bill_amount, cheque_no,
                               cheque_dt, off_bank_cd, off_br_cd, off_acc_no,
                               emp_acc_no, emp_acc_bank_cd, emp_acc_br_cd,
                               stamp_amt, stamp_money_receive, stamp_vr_no,
                               disburse_status, disburse_vr_no, disburse_dt,
                               disburse_by, remarks, ins_tp_cd, i_usr, i_dt,
                               u_usr, u_dt, action_usr, action_dt, action_id,
                               table_ref)
                     SELECT bill_no, bill_date, emp_gid, office_cd,
                            gross_payable_amt, tax_ded_req, tax_ded_rate,
                            tax_ded_amt, bill_amount, cheque_no, cheque_dt,
                            off_bank_cd, off_br_cd, off_acc_no, emp_acc_no,
                            emp_acc_bank_cd, emp_acc_br_cd, stamp_amt,
                            stamp_money_receive, stamp_vr_no,
                            disburse_status, disburse_vr_no, disburse_dt,
                            disburse_by, remarks, ins_tp_cd, i_usr, i_dt,
                            u_usr, u_dt, p_u_usr, SYSDATE, v_max_action_id,
                            'COM_EMP_BON_COM_BIL_MST'
                       FROM com_emp_bon_com_bil_mst
                      WHERE bill_no = p_bill_no;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     RAISE err_bill_invld;
               END;

               ----------------------DELETE VOUCHER-------------------------------
               SELECT disburse_vr_no
                 INTO v_voucher
                 FROM com_emp_bon_com_bil_mst
                WHERE bill_no = p_bill_no;

               /*DELETE FROM acc_gl_trans_dtl
                     WHERE vouch_no = v_voucher;

               DELETE FROM acc_gl_trans_mst
                     WHERE vouch_no = v_voucher;*/
                     
               BEGIN
                 ----------------------REVERSE VOUCHER----------------------------
                 pkg_gl_voucher.pro_rev_voucher_posting
                            (p_object_cd           => '02750',
                             p_trans_date          => TRUNC (SYSDATE),
                             p_rev_voucher_no      => v_voucher,
                             p_narration           => 'Undo FA Bonus Bill',
                             p_user                => p_u_usr,
                             p_voucher_no          => v_voucher,
                             p_error               => out_error
                            );
               EXCEPTION
                 WHEN OTHERS
                 THEN
                    out_error := SQLERRM;
               END;

               ----------------------INSERT BILL DETAIL INFO INTO INVAILD TABLE------------------------------------------------
               BEGIN
                  INSERT INTO com_emp_com_bonus_invld
                              (bill_no, payable_no, earning_cd, base_amount,
                               pay_rate, gross_bill_amt, tax_ded_amt,
                               net_bill_amt, i_usr, i_dt, u_usr, u_dt,
                               action_usr, action_dt, action_id, table_ref)
                     SELECT bill_no, payable_no, earning_cd, base_amount,
                            pay_rate, gross_bill_amt, tax_ded_amt,
                            net_bill_amt, i_usr, i_dt, u_usr, u_dt, p_u_usr,
                            SYSDATE, v_max_action_id,
                            'COM_EMP_BON_COM_BIL_DTL'
                       FROM com_emp_bon_com_bil_dtl
                      WHERE bill_no = p_bill_no;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_error := SQLERRM;
               END;

               IF p_undo_type = '1'  --------------------------UNDO COMMISSION
               THEN
                  BEGIN
                     SELECT COUNT (1)
                       INTO v_com_count
                       FROM com_dev_emp_bonus_comm
                      WHERE payable_no IN (
                               SELECT payable_no
                                 FROM com_emp_bon_com_bil_dtl
                                WHERE bill_no IN (
                                         SELECT bill_no
                                           FROM com_emp_bon_com_bil_mst
                                          WHERE emp_gid = p_emp_gid
                                            AND bill_no = p_bill_no));
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_error := SQLERRM;
                  END;

                  IF v_com_count > 0
                  THEN
                     -----------------------INSERT COMMISSION INFO INTO INVALID TABLE-----------------
                     BEGIN
                        INSERT INTO com_emp_com_bonus_invld
                                    (payable_no, emp_gid, office_cd,
                                     earning_cd, earning_type,
                                     com_calc_dt_to, payable_amount,
                                     base_amount, pay_rate, com_payable_vou,
                                     ins_tp_cd, fy_start_dt, fy_end_dt,
                                     bill_status, i_usr, i_dt, u_usr, u_dt,
                                     action_usr, action_dt, action_id,
                                     table_ref)
                           SELECT payable_no, emp_gid, office_cd, earning_cd,
                                  earning_type, com_calc_dt_to,
                                  payable_amount, base_amount, pay_rate,
                                  com_payable_vou, ins_tp_cd, fy_start_dt,
                                  fy_end_dt, bill_status, i_usr, i_dt, u_usr,
                                  u_dt, p_u_usr, SYSDATE, v_max_action_id,
                                  'COM_DEV_EMP_BONUS_COMM'
                             FROM com_dev_emp_bonus_comm
                            WHERE payable_no IN (
                                     SELECT payable_no
                                       FROM com_emp_bon_com_bil_dtl
                                      WHERE bill_no IN (
                                               SELECT bill_no
                                                 FROM com_emp_bon_com_bil_mst
                                                WHERE emp_gid = p_emp_gid
                                                  AND bill_no = p_bill_no));
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           out_error := SQLERRM;
                     END;

                     BEGIN
                        INSERT INTO com_emp_com_bonus_invld
                                    (payable_no, comm_no, emp_gid, pgid,
                                     i_usr, i_dt, u_usr, u_dt,
                                     subord_emp_gid, action_usr, action_dt,
                                     action_id, table_ref)
                           SELECT payable_no, comm_no, emp_gid, pgid, i_usr,
                                  i_dt, u_usr, u_dt, subord_emp_gid, p_u_usr,
                                  SYSDATE, v_max_action_id,
                                  'COM_DEV_EMP_BONUS_COMM_DTL'
                             FROM com_dev_emp_bonus_comm_dtl
                            WHERE payable_no IN (
                                     SELECT payable_no
                                       FROM com_dev_emp_bonus_comm b
                                      WHERE b.payable_no IN (
                                               SELECT payable_no
                                                 FROM com_emp_bon_com_bil_dtl
                                                WHERE bill_no IN (
                                                         SELECT bill_no
                                                           FROM com_emp_bon_com_bil_mst
                                                          WHERE emp_gid =
                                                                     p_emp_gid
                                                            AND bill_no =
                                                                     p_bill_no)));
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           out_error := SQLERRM;
                     END;

--------------------------------------------------------------------------
                     FOR i IN
                        (SELECT payable_no
                           FROM com_dev_emp_bonus_comm
                          WHERE payable_no IN (
                                   SELECT payable_no
                                     FROM com_emp_bon_com_bil_dtl
                                    WHERE bill_no IN (
                                             SELECT bill_no
                                               FROM com_emp_bon_com_bil_mst
                                              WHERE emp_gid = p_emp_gid
                                                AND bill_no = p_bill_no)))
                     LOOP
                        ----------------------DELETE VOUCHER-------------------------------
                        SELECT com_payable_vou
                          INTO v_voucher
                          FROM com_dev_emp_bonus_comm
                         WHERE payable_no = i.payable_no;

                        /*DELETE FROM acc_gl_trans_dtl
                              WHERE vouch_no = v_voucher;

                        DELETE FROM acc_gl_trans_mst
                              WHERE vouch_no = v_voucher;*/
                              
                         BEGIN
                             ----------------------REVERSE VOUCHER----------------------------
                             pkg_gl_voucher.pro_rev_voucher_posting
                                        (p_object_cd           => '02750',
                                         p_trans_date          => TRUNC (SYSDATE),
                                         p_rev_voucher_no      => v_voucher,
                                         p_narration           => 'Undo Employee Bonus',
                                         p_user                => p_u_usr,
                                         p_voucher_no          => v_voucher,
                                         p_error               => out_error
                                        );
                           EXCEPTION
                             WHEN OTHERS
                             THEN
                                out_error := SQLERRM;
                           END;
                     END LOOP;
                  END IF;
               END IF;

               -------------UPDATE COM_DEV_EMP_BONUS_COMM--------------------------------------
               FOR i IN (SELECT payable_no
                           FROM com_dev_emp_bonus_comm
                          WHERE payable_no IN (SELECT payable_no
                                                 FROM com_emp_bon_com_bil_dtl
                                                WHERE bill_no = p_bill_no))
               LOOP
                  UPDATE com_dev_emp_bonus_comm
                     SET u_usr = p_u_usr,
                         u_dt = SYSDATE,
                         bill_status = '0'
                   WHERE payable_no IN (SELECT payable_no
                                          FROM com_emp_bon_com_bil_dtl
                                         WHERE bill_no = p_bill_no);

                  INSERT INTO ins_agent_bill_change
                              (old_bill_no, new_bill_no, req_by,
                               changing_date, comments,
                               pgid
                              )
                       VALUES (p_bill_no, NULL, p_request_by,
                               SYSDATE, 'Undo the bill based on requesting',
                               NULL
                              );
               END LOOP;

------------------------------------------------------------------------------------------
               BEGIN
                  IF p_undo_type = '0'
                  THEN
                     --4     Delete from bill INFO FROM DETAIL TABLE
                     DELETE FROM com_emp_bon_com_bil_dtl
                           WHERE bill_no = p_bill_no;

                     --1.    Delete from all BILL INFO FROM MASTER TABLE
                     DELETE FROM com_emp_bon_com_bil_mst
                           WHERE bill_no = p_bill_no;
                  ELSIF p_undo_type = '1'
                  --------------------------DELETE FROM COMMISSION TABLE TO UNDO COMMISSION
                  THEN
                     BEGIN
                        DELETE FROM com_dev_emp_bonus_comm_dtl
                              WHERE payable_no IN (
                                       SELECT payable_no
                                         FROM com_emp_bon_com_bil_mst m,
                                              com_emp_bon_com_bil_dtl d
                                        WHERE m.bill_no = d.bill_no
                                          AND emp_gid = p_emp_gid
                                          AND m.bill_no = p_bill_no);
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           out_error := SQLERRM;
                     END;

                     DELETE FROM com_emp_bon_com_bil_dtl
                           WHERE bill_no = p_bill_no;

                     --1.    Delete from all BILL INFO FROM MASTER TABLE
                     DELETE FROM com_emp_bon_com_bil_mst
                           WHERE bill_no = p_bill_no;

                     BEGIN
                        DELETE FROM com_dev_emp_bonus_comm b
                              WHERE b.payable_no NOT IN (
                                              SELECT payable_no
                                                FROM com_dev_emp_bonus_comm_dtl)
                                AND emp_gid = p_emp_gid
                                AND bill_status = '0';
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           out_error := SQLERRM;
                     END;
                  END IF;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_error := SQLERRM;
               END;
            END IF;
         END IF;
-------------------FOR UM AND BM-------------------------------------
      ELSIF p_emp_type IN ('06', '07')
      THEN
         -------------GENERATE ACTION ID----------------------
         SELECT NVL (MAX (action_id), 0) + 1
           INTO v_max_action_id
           FROM com_dev_emp_com_invld;

-------------------------------------------------------
         IF p_emp_gid IS NOT NULL AND p_bill_no IS NOT NULL
         THEN
            -----------------COUNT THERE IS BILL OR NOT-----------------------
            SELECT COUNT (1)
              INTO v_bill_count
              FROM com_emp_com_bill_mst
             WHERE emp_gid = p_emp_gid AND bill_no = p_bill_no;

            IF v_bill_count > 0
            THEN
               -----------------INSERT BILL MASTER INFO IN INVALID TABLE---------------------------
               BEGIN
                  INSERT INTO com_dev_emp_com_invld
                              (bill_no, bill_date, emp_gid, office_cd,
                               gross_payable_amt, tax_ded_req, tax_ded_rate,
                               tax_ded_amt, bill_amount, cheque_no,
                               cheque_dt, off_bank_cd, off_br_cd, off_acc_no,
                               emp_acc_no, emp_acc_bank_cd, emp_acc_br_cd,
                               stamp_amt, stamp_money_receive, stamp_vr_no,
                               disburse_status, disburse_vr_no, disburse_dt,
                               disburse_by, remarks, i_usr, i_dt, u_usr,
                               u_dt, ins_tp_cd, action_usr, action_dt,
                               action_id, table_ref)
                     SELECT bill_no, bill_date, emp_gid, office_cd,
                            gross_payable_amt, tax_ded_req, tax_ded_rate,
                            tax_ded_amt, bill_amount, cheque_no, cheque_dt,
                            off_bank_cd, off_br_cd, off_acc_no, emp_acc_no,
                            emp_acc_bank_cd, emp_acc_br_cd, stamp_amt,
                            stamp_money_receive, stamp_vr_no,
                            disburse_status, disburse_vr_no, disburse_dt,
                            disburse_by, remarks, i_usr, i_dt, u_usr, u_dt,
                            ins_tp_cd, p_u_usr, SYSDATE, v_max_action_id,
                            'COM_EMP_COM_BILL_MST'
                       FROM com_emp_com_bill_mst
                      WHERE bill_no = p_bill_no;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     RAISE err_bill_invld;
               END;

               ----------------------DELETE VOUCHER-------------------------------
               SELECT disburse_vr_no
                 INTO v_voucher
                 FROM com_emp_com_bill_mst
                WHERE bill_no = p_bill_no;

               /*DELETE FROM acc_gl_trans_dtl
                     WHERE vouch_no = v_voucher;

               DELETE FROM acc_gl_trans_mst
                     WHERE vouch_no = v_voucher;*/
               
               BEGIN
                 ----------------------REVERSE VOUCHER----------------------------
                 pkg_gl_voucher.pro_rev_voucher_posting
                            (p_object_cd           => '02750',
                             p_trans_date          => TRUNC (SYSDATE),
                             p_rev_voucher_no      => v_voucher,
                             p_narration           => 'Undo Employee Bill',
                             p_user                => p_u_usr,
                             p_voucher_no          => v_voucher,
                             p_error               => out_error
                            );
               EXCEPTION
                 WHEN OTHERS
                 THEN
                    out_error := SQLERRM;
               END;

               ----------------------INSERT BILL DETAIL INFO INTO INVAILD TABLE------------------------------------------------
               BEGIN
                  INSERT INTO com_dev_emp_com_invld
                              (bill_no, comm_no, pgid, prem_due_dt,
                               earning_cd, gross_bill_amt, tax_ded_amt,
                               net_bill_amt, i_usr, i_dt, u_usr, u_dt,
                               pay_rate, receive_date, branch_off, sales_off,
                               zonal_off, servicing_off, action_usr,
                               action_dt, action_id, table_ref)
                     SELECT bill_no, comm_no, pgid, prem_due_dt, earning_cd,
                            gross_bill_amt, tax_ded_amt, net_bill_amt, i_usr,
                            i_dt, u_usr, u_dt, pay_rate, receive_dt,
                            branch_off, sales_off, zonal_off, servicing_off,
                            p_u_usr, SYSDATE, v_max_action_id,
                            'COM_EMP_COM_BILL_DTL'
                       FROM com_emp_com_bill_dtl
                      WHERE bill_no = p_bill_no;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_error := SQLERRM;
               END;

               IF p_undo_type = '1'
               --------------------------UNDO COMMISSION
               THEN
                  BEGIN
                     SELECT COUNT (1)
                       INTO v_com_count
                       FROM com_dev_emp_comm
                      WHERE comm_no IN (
                               SELECT comm_no
                                 FROM com_emp_com_bill_dtl
                                WHERE bill_no = p_bill_no
                                  AND pgid = NVL (p_pgid_no, pgid))
                        AND emp_gid = p_emp_gid;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_error := SQLERRM;
                  END;

                  IF v_com_count > 0
                  THEN
                     -----------------------INSERT COMMISSION INFO INTO INVALID TABLE-----------------
                     BEGIN
                        INSERT INTO com_dev_emp_com_invld
                                    (comm_no, emp_gid, office_cd, pgid,
                                     prem_due_dt, earning_cd, earning_type,
                                     com_calc_dt_to, prem_year,
                                     payable_amount, payable_vouch_dt,
                                     com_payable_vou, fy_start_dt, fy_end_dt,
                                     bill_status, i_usr, i_dt, u_usr, u_dt,
                                     ins_tp_cd, pay_rate, receive_date,
                                     agent_id, agent_office_cd, action_usr,
                                     action_dt, action_id, table_ref)
                           SELECT comm_no, emp_gid, office_cd, pgid,
                                  prem_due_dt, earning_cd, earning_type,
                                  com_calc_dt_to, prem_year, payable_amount,
                                  payable_vouch_dt, com_payable_vou,
                                  fy_start_dt, fy_end_dt, bill_status, i_usr,
                                  i_dt, u_usr, u_dt, ins_tp_cd, pay_rate,
                                  receive_date, agent_id, agent_office_cd,
                                  p_u_usr, SYSDATE, v_max_action_id,
                                  'COM_DEV_EMP_COMM'
                             FROM com_dev_emp_comm
                            WHERE comm_no IN (
                                     SELECT comm_no
                                       FROM com_emp_com_bill_dtl
                                      WHERE bill_no = p_bill_no
                                        AND pgid = NVL (p_pgid_no, pgid))
                              AND emp_gid = p_emp_gid;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           out_error := SQLERRM;
                     END;

--------------------------------------------------------------------------
                     FOR i IN
                        (SELECT comm_no
                           FROM com_dev_emp_comm
                          WHERE comm_no IN (
                                   SELECT comm_no
                                     FROM com_emp_com_bill_dtl
                                    WHERE bill_no = p_bill_no
                                      AND pgid = NVL (p_pgid_no, pgid))
                            AND emp_gid = p_emp_gid)
                     LOOP
                        ----------------------DELETE VOUCHER-------------------------------
                        SELECT com_payable_vou
                          INTO v_voucher
                          FROM com_dev_emp_comm
                         WHERE comm_no = i.comm_no;

                        /*DELETE FROM acc_gl_trans_dtl
                              WHERE vouch_no = v_voucher;

                        DELETE FROM acc_gl_trans_mst
                              WHERE vouch_no = v_voucher;*/
                              
                        BEGIN
                             ----------------------REVERSE VOUCHER----------------------------
                             pkg_gl_voucher.pro_rev_voucher_posting
                                        (p_object_cd           => '02750',
                                         p_trans_date          => TRUNC (SYSDATE),
                                         p_rev_voucher_no      => v_voucher,
                                         p_narration           => 'Undo Employee Commission',
                                         p_user                => p_u_usr,
                                         p_voucher_no          => v_voucher,
                                         p_error               => out_error
                                        );
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              out_error := SQLERRM;
                        END;
                     END LOOP;
                  END IF;
               END IF;

               -------------UPDATE COM_DEV_EMP_BONUS_COMM--------------------------------------
               FOR i IN (SELECT comm_no, pgid
                           FROM com_dev_emp_comm
                          WHERE comm_no IN (
                                   SELECT comm_no
                                     FROM com_emp_com_bill_dtl
                                    WHERE bill_no = p_bill_no
                                      AND pgid = NVL (p_pgid_no, pgid))
                            AND emp_gid = p_emp_gid)
               LOOP
                  UPDATE com_dev_emp_comm
                     SET u_usr = p_u_usr,
                         u_dt = SYSDATE,
                         bill_status = '0'
                   WHERE comm_no IN (
                            SELECT comm_no
                              FROM com_emp_com_bill_dtl
                             WHERE bill_no = p_bill_no
                               AND pgid = NVL (p_pgid_no, pgid))
                     AND emp_gid = p_emp_gid;

                  INSERT INTO ins_agent_bill_change
                              (old_bill_no, new_bill_no, req_by,
                               changing_date, comments,
                               pgid
                              )
                       VALUES (p_bill_no, NULL, p_request_by,
                               SYSDATE, 'Undo the bill based on requesting',
                               i.pgid
                              );

                  BEGIN
                     --4     Delete from bill INFO FROM DETAIL TABLE
                     DELETE FROM com_emp_com_bill_dtl
                           WHERE bill_no = p_bill_no;

                     --1.    Delete from all BILL INFO FROM MASTER TABLE
                     DELETE FROM com_emp_com_bill_mst
                           WHERE bill_no = p_bill_no;

                     IF p_undo_type = '1'
                     --------------------------DELETE FROM COMMISSION TABLE TO UNDO COMMISSION
                     THEN
                        /*DELETE FROM   com_dev_emp_comm
                              WHERE   comm_no = i.comm_no
                                      AND emp_gid = p_emp_gid;*/
                                      
                        /*
                        DELETE FROM com_dev_emp_comm
                              WHERE comm_no NOT IN (
                                       SELECT comm_no
                                         FROM com_emp_com_bill_dtl
                                        WHERE bill_no = p_bill_no
                                          AND pgid = NVL (p_pgid_no, pgid))
                                AND emp_gid = p_emp_gid
                                and BILL_STATUS = '0';*/
                        DELETE FROM com_dev_emp_comm
                              WHERE comm_no NOT IN (
                                       SELECT comm_no
                                         FROM com_emp_com_bill_dtl d, com_emp_com_bill_mst m
                                        WHERE m.BILL_NO = m.BILL_NO
                                          AND m.EMP_GID = p_emp_gid)
                                AND emp_gid = p_emp_gid;
                     END IF;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_error := SQLERRM;
                  END;
               END LOOP;
            END IF;
         END IF;
      END IF;
   END IF;

   IF p_undo_type = '4'
   THEN
      IF p_emp_type = '05'
      THEN
         BEGIN
            SELECT COUNT (1)
              INTO v_com_count
              FROM com_agent_com_detail
             WHERE                                     --agent_id = p_agent_id
                   pgid = p_pgid_no AND bill_status = '0';
         EXCEPTION
            WHEN OTHERS
            THEN
               out_error := SQLERRM;
         END;

         IF v_com_count > 0
         THEN
            -------------GENERATE ACTION ID----------------------
            SELECT NVL (MAX (action_id), 0) + 1
              INTO v_max_action_id
              FROM com_agent_com_detail_invld;

-------------------------------------------------------
-----------------------INSERT COMMISSION INFO INTO INVALID TABLE-----------------
            BEGIN
               INSERT INTO com_agent_com_detail_invld
                           (fa_comm_no, agent_id, office_cd, pgid,
                            prem_due_dt, earning_cd, comm_bon_year,
                            payable_amount, payable_vouch_dt,
                            payable_vouch_no, com_exe_date, process_user,
                            process_date, bill_status, bill_no, i_usr, i_dt,
                            u_usr, u_dt, agent_org_setup,
                            agent_org_setup_lvl, ins_tp_cd, pay_rate,
                            receive_date, action_usr, action_dt, action_id)
                  SELECT fa_comm_no, agent_id, office_cd, pgid, prem_due_dt,
                         earning_cd, comm_bon_year, payable_amount,
                         payable_vouch_dt, payable_vouch_no, com_exe_date,
                         process_user, process_date, bill_status, bill_no,
                         i_usr, i_dt, u_usr, u_dt, agent_org_setup,
                         agent_org_setup_lvl, ins_tp_cd, pay_rate,
                         receive_date, p_u_usr, SYSDATE, v_max_action_id
                    FROM com_agent_com_detail
                   WHERE pgid = p_pgid_no         --AND agent_id = p_agent_id
                     AND bill_status = '0';
            EXCEPTION
               WHEN OTHERS
               THEN
                  out_error := SQLERRM;
            END;

            FOR i IN (SELECT fa_comm_no, pgid, payable_vouch_no
                        FROM com_agent_com_detail
                       WHERE pgid = p_pgid_no      --AND agent_id = p_agent_id
                         AND bill_status = '0')
            LOOP
               IF p_prem_type = '0'
               THEN
                  BEGIN
                     --9     Update Collection record in ACC_RECEIVABLE
                     UPDATE acc_receivables r
                        SET r.com_calculated = 'N',
                            r.com_exe_date = NULL,
                            r.u_dt = SYSDATE,
                            r.u_usr = USER,
                            r.last_due_dt_of_com_exe = NULL
                      WHERE r.pgid = i.pgid
                        AND r.rec_status = '1'
                        --AND r.com_calculated = 'Y'
                        AND EXISTS (
                               SELECT 1
                                 FROM com_agent_com_detail d
                                WHERE                --d.agent_id = p_agent_id
                                      bill_status = '0'
                                  AND d.pgid = i.pgid
                                  AND d.prem_due_dt BETWEEN r.due_dt_from
                                                        AND r.due_dt_to);
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_error := SQLERRM;
                  END;
               ELSE
                  BEGIN
                     UPDATE acc_advance_receivables r
                        -------------------FIRST PREMIUM
                     SET com_calculated = 'N',
                         com_exe_date = NULL,
                         u_dt = SYSDATE,
                         u_usr = USER
                      WHERE pgid = i.pgid
                        AND r.rec_status = '1'
                        AND r.com_calculated = 'Y';
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_error := SQLERRM;
                  END;
               END IF;

               BEGIN
                  ----------------------REVERSE VOUCHER----------------------------
                  pkg_gl_voucher.pro_rev_voucher_posting
                                     (p_object_cd           => '02750',
                                      p_trans_date          => TRUNC (SYSDATE),
                                      p_rev_voucher_no      => i.payable_vouch_no,
                                      p_narration           => 'Undo agent commission',
                                      p_user                => p_u_usr,
                                      p_voucher_no          => v_voucher,
                                      p_error               => out_error
                                     );

                  UPDATE com_agent_com_detail_invld
                     SET reverse_voucher = v_voucher
                   WHERE action_id = v_max_action_id
                     AND pgid = p_pgid_no          --AND agent_id = p_agent_id
                     AND bill_status = '0';
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_error := SQLERRM;
               END;

               INSERT INTO ins_agent_bill_change
                           (old_bill_no, new_bill_no, req_by, changing_date,
                            comments, pgid
                           )
                    VALUES (p_bill_no, NULL, p_request_by, SYSDATE,
                            'Undo the commission based on requesting', i.pgid
                           );
            END LOOP;

            BEGIN
               --------------------DELETE FROM COMMISSION TABLE---------------------------
               DELETE FROM com_agent_com_detail
                     WHERE pgid = p_pgid_no       --AND agent_id = p_agent_id
                       AND bill_status = '0';
            EXCEPTION
               WHEN OTHERS
               THEN
                  out_error := 'Cannot delete commission';
            END;
         END IF;
      ELSIF p_emp_type NOT IN ('05', '06', '07')
      THEN
         -------------GENERATE ACTION ID----------------------
         SELECT NVL (MAX (action_id), 0) + 1
           INTO v_max_action_id
           FROM com_emp_com_bonus_invld;

-------------------------------------------------------
         IF p_emp_gid IS NOT NULL AND p_pgid_no IS NOT NULL
         THEN
            BEGIN
               SELECT COUNT (1)
                 INTO v_com_count
                 FROM com_dev_emp_bonus_comm
                WHERE payable_no IN (
                                SELECT payable_no
                                  FROM com_dev_emp_bonus_comm_dtl
                                 WHERE emp_gid = p_emp_gid
                                       AND pgid = p_pgid_no)
                  AND bill_status = '0';
            EXCEPTION
               WHEN OTHERS
               THEN
                  out_error := SQLERRM;
            END;

            IF v_com_count > 0
            THEN
               -----------------------INSERT COMMISSION INFO INTO INVALID TABLE-----------------
               BEGIN
                  INSERT INTO com_emp_com_bonus_invld
                              (payable_no, emp_gid, office_cd, earning_cd,
                               earning_type, com_calc_dt_to, payable_amount,
                               base_amount, pay_rate, com_payable_vou,
                               ins_tp_cd, fy_start_dt, fy_end_dt,
                               bill_status, i_usr, i_dt, u_usr, u_dt,
                               action_usr, action_dt, action_id, table_ref)
                     SELECT payable_no, emp_gid, office_cd, earning_cd,
                            earning_type, com_calc_dt_to, payable_amount,
                            base_amount, pay_rate, com_payable_vou,
                            ins_tp_cd, fy_start_dt, fy_end_dt, bill_status,
                            i_usr, i_dt, u_usr, u_dt, p_u_usr, SYSDATE,
                            v_max_action_id, 'COM_DEV_EMP_BONUS_COMM'
                       FROM com_dev_emp_bonus_comm
                      WHERE payable_no IN (
                               SELECT payable_no
                                 FROM com_dev_emp_bonus_comm_dtl
                                WHERE emp_gid = p_emp_gid
                                      AND pgid = p_pgid_no)
                        AND bill_status = '0';
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_error := SQLERRM;
               END;

               BEGIN
                  INSERT INTO com_emp_com_bonus_invld
                              (payable_no, comm_no, emp_gid, pgid, i_usr,
                               i_dt, u_usr, u_dt, subord_emp_gid, action_usr,
                               action_dt, action_id, table_ref)
                     SELECT payable_no, comm_no, emp_gid, pgid, i_usr, i_dt,
                            u_usr, u_dt, subord_emp_gid, p_u_usr, SYSDATE,
                            v_max_action_id, 'COM_DEV_EMP_BONUS_COMM_DTL'
                       FROM com_dev_emp_bonus_comm_dtl
                      WHERE emp_gid = p_emp_gid AND pgid = p_pgid_no;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_error := SQLERRM;
               END;

--------------------------------------------------------------------------
               FOR i IN
                  (SELECT payable_no, com_payable_vou
                     FROM com_dev_emp_bonus_comm
                    WHERE payable_no IN (
                                SELECT payable_no
                                  FROM com_dev_emp_bonus_comm_dtl
                                 WHERE emp_gid = p_emp_gid
                                       AND pgid = p_pgid_no)
                      AND bill_status = '0')
               LOOP
                  BEGIN
                     ----------------------REVERSE VOUCHER----------------------------
                     pkg_gl_voucher.pro_rev_voucher_posting
                            (p_object_cd           => '02750',
                             p_trans_date          => TRUNC (SYSDATE),
                             p_rev_voucher_no      => i.com_payable_vou,
                             p_narration           => 'Undo BC,DC or above commission',
                             p_user                => p_u_usr,
                             p_voucher_no          => v_voucher,
                             p_error               => out_error
                            );

                     UPDATE com_emp_com_bonus_invld
                        SET reverse_voucher = v_voucher
                      WHERE action_id = v_max_action_id
                        AND table_ref = 'COM_DEV_EMP_BONUS_COMM'
                        AND payable_no = i.payable_no;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_error := SQLERRM;
                  END;
               END LOOP;
            END IF;
         END IF;

         INSERT INTO ins_agent_bill_change
                     (old_bill_no, new_bill_no, req_by, changing_date,
                      comments, pgid
                     )
              VALUES (p_bill_no, NULL, p_request_by, SYSDATE,
                      'Undo the bill based on requesting', NULL
                     );

         BEGIN
            BEGIN
               DELETE FROM com_dev_emp_bonus_comm_dtl
                     WHERE emp_gid = p_emp_gid AND pgid = p_pgid_no;
            EXCEPTION
               WHEN OTHERS
               THEN
                  out_error := SQLERRM;
            END;

            DELETE FROM com_dev_emp_bonus_comm b
                  WHERE b.payable_no NOT IN (SELECT payable_no
                                               FROM com_dev_emp_bonus_comm_dtl)
                    AND emp_gid = p_emp_gid
                    AND bill_status = '0';
         EXCEPTION
            WHEN OTHERS
            THEN
               out_error := SQLERRM;
         END;
-------------------FOR UM AND BM-------------------------------------
      ELSIF p_emp_type IN ('06', '07')
      THEN
         -------------GENERATE ACTION ID----------------------
         SELECT NVL (MAX (action_id), 0) + 1
           INTO v_max_action_id
           FROM com_dev_emp_com_invld;

-------------------------------------------------------
         IF p_emp_gid IS NOT NULL AND p_pgid_no IS NOT NULL
         THEN
            BEGIN
               SELECT COUNT (1)
                 INTO v_com_count
                 FROM com_dev_emp_comm
                WHERE pgid = NVL (p_pgid_no, pgid)
                  AND emp_gid = p_emp_gid
                  AND bill_status = '0';
            EXCEPTION
               WHEN OTHERS
               THEN
                  out_error := SQLERRM;
            END;

            IF v_com_count > 0
            THEN
               -----------------------INSERT COMMISSION INFO INTO INVALID TABLE-----------------
               BEGIN
                  INSERT INTO com_dev_emp_com_invld
                              (comm_no, emp_gid, office_cd, pgid,
                               prem_due_dt, earning_cd, earning_type,
                               com_calc_dt_to, prem_year, payable_amount,
                               payable_vouch_dt, com_payable_vou,
                               fy_start_dt, fy_end_dt, bill_status, i_usr,
                               i_dt, u_usr, u_dt, ins_tp_cd, pay_rate,
                               receive_date, agent_id, agent_office_cd,
                               action_usr, action_dt, action_id, table_ref)
                     SELECT comm_no, emp_gid, office_cd, pgid, prem_due_dt,
                            earning_cd, earning_type, com_calc_dt_to,
                            prem_year, payable_amount, payable_vouch_dt,
                            com_payable_vou, fy_start_dt, fy_end_dt,
                            bill_status, i_usr, i_dt, u_usr, u_dt, ins_tp_cd,
                            pay_rate, receive_date, agent_id,
                            agent_office_cd, p_u_usr, SYSDATE,
                            v_max_action_id, 'COM_DEV_EMP_COMM'
                       FROM com_dev_emp_comm
                      WHERE pgid = NVL (p_pgid_no, pgid)
                        AND emp_gid = p_emp_gid
                        AND bill_status = '0';
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_error := SQLERRM;
               END;

--------------------------------------------------------------------------
               FOR i IN (SELECT comm_no, com_payable_vou
                           FROM com_dev_emp_comm
                          WHERE pgid = NVL (p_pgid_no, pgid)
                            AND emp_gid = p_emp_gid
                            AND bill_status = '0')
               LOOP
                  BEGIN
                     ----------------------REVERSE VOUCHER----------------------------
                     pkg_gl_voucher.pro_rev_voucher_posting
                                  (p_object_cd           => '02750',
                                   p_trans_date          => TRUNC (SYSDATE),
                                   p_rev_voucher_no      => i.com_payable_vou,
                                   p_narration           => 'Undo UM or BM commission',
                                   p_user                => p_u_usr,
                                   p_voucher_no          => v_voucher,
                                   p_error               => out_error
                                  );

                     UPDATE com_dev_emp_com_invld
                        SET reverse_voucher = v_voucher
                      WHERE action_id = v_max_action_id
                        AND table_ref = 'COM_DEV_EMP_COMM'
                        AND comm_no = i.comm_no;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_error := SQLERRM;
                  END;
               END LOOP;
            END IF;
         END IF;

         INSERT INTO ins_agent_bill_change
                     (old_bill_no, new_bill_no, req_by, changing_date,
                      comments, pgid
                     )
              VALUES (p_bill_no, NULL, p_request_by, SYSDATE,
                      'Undo the bill based on requesting', p_pgid_no
                     );

         BEGIN
            DELETE FROM com_dev_emp_comm
                  WHERE pgid = NVL (p_pgid_no, pgid)
                    AND emp_gid = p_emp_gid
                    AND bill_status = '0';
         EXCEPTION
            WHEN OTHERS
            THEN
               out_error := SQLERRM;
         END;
      END IF;
   END IF;

   IF p_undo_type = '3'           -----------------------COLLECTION UNADJUSTED
   THEN
      IF p_pgid_no IS NOT NULL AND p_coll_date IS NOT NULL
      THEN
         -------------PREMIUM TYPE OTHERS-------------------------
         IF p_prem_type = '0'
         THEN
            -------------CALCULATE SUSPENCE AMOUNT----------------------------
            BEGIN
               SELECT NVL (adv_status, 0), NVL (man_adjusted, 0),
                        NVL (tot_premium_amt, 0)
                      + NVL (late_fee, 0)
                      - (NVL (coll_amount, 0) + NVL (latefee_waiver, 0))
                 INTO v_adv_status, v_man_adjusted,
                      v_suspense
                 FROM acc_receivables
                WHERE pgid = p_pgid_no
                  AND rec_status = 1
                  AND status = '1'
                  AND receive_id = p_receive_id     --AND com_calculated = 'N'
                                               ;
            EXCEPTION
               WHEN OTHERS
               THEN
                  out_error := SQLERRM;
            END;

            -----------------------UPDATE ACC_RECEIVABLE----------------------------------------------
            BEGIN
               UPDATE acc_receivables
                  SET status = '0',
                      u_dt = SYSDATE,
                      u_usr = USER,
                      adjusted_by = NULL,
                      adjustment_date = NULL,
                      adjusted_by_dgh = '0',
                      man_adjusted = NULL,
                      com_calculated = 'N'
                WHERE pgid = p_pgid_no
                  AND receive_id = p_receive_id
                  AND status = '1'                  --AND com_calculated = 'N'
                                  ;
            EXCEPTION
               WHEN OTHERS
               THEN
                  out_error := SQLERRM;
            END;

            BEGIN
               SELECT MAX (next_due_dt), MAX (installment_no)
                 INTO v_due_date, v_inst_no_from
                 FROM ins_prem_acc_receivable
                WHERE proposer_pk = p_receive_id AND pgid = p_pgid_no;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            BEGIN
               SELECT COUNT (1)
                 INTO v_count
                 FROM acc_receivables
                WHERE pgid = p_pgid_no
                      AND installment_no_from > v_inst_no_from;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            FOR i IN (SELECT proposer_pk, pgid, ref_voucher, installment_no
                        FROM ins_prem_acc_receivable
                       WHERE proposer_pk = p_receive_id AND pgid = p_pgid_no)
            LOOP
               IF i.ref_voucher IS NOT NULL
               THEN
                  BEGIN
                     ----------------------REVERSE VOUCHER----------------------------
                     pkg_gl_voucher.pro_rev_voucher_posting
                                (p_object_cd           => '02750',
                                 p_trans_date          => TRUNC (SYSDATE),
                                 p_rev_voucher_no      => i.ref_voucher,
                                 p_narration           => 'Undo Collection adjustment',
                                 p_user                => p_u_usr,
                                 p_voucher_no          => v_voucher,
                                 p_error               => out_error
                                );
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_error := SQLERRM;
                  END;
               END IF;

               BEGIN
                  ---------------FOR FIRST PREMIUM UPDATE INS_PREM_ACC_RECEIVABLE------------
                  UPDATE ins_prem_acc_receivable
                     SET balance = installment_premium,
                         paid_amount = 0,
                         pay_status = 0,
                         proposed_status = '7',
                         ref_voucher = NULL,
                         u_dt = SYSDATE,
                         u_usr = USER,
                         reverse_voucher = v_voucher
                   WHERE proposer_pk = i.proposer_pk AND pgid = i.pgid;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_error := SQLERRM;
               END;

               ----------------------UPDATE INS_P_SUMMERY----------------------
               BEGIN
                  ----------------DUE DATE CALCULATION----------------
                  SELECT ADD_MONTHS (next_due_date,
                                     DECODE (pay_mode_cd,
                                             '01', -12,
                                             '02', -6,
                                             '03', -3,
                                             -1
                                            )
                                    ),
                         comm_date
                    INTO v_next_due_date,
                         v_com_date
                    FROM ins_p_summery
                   WHERE pgid = p_pgid_no;

                  IF TO_NUMBER (TO_CHAR (LAST_DAY (v_next_due_date), 'DD')) >=
                                        TO_NUMBER (TO_CHAR (v_com_date, 'DD'))
                  THEN
                     SELECT TO_DATE (   TO_CHAR (v_com_date, 'DD')
                                     || '-'
                                     || TO_CHAR (v_next_due_date, 'MON-RRRR')
                                    )
                       INTO v_next_due_date
                       FROM ins_p_summery p
                      WHERE p.pgid = p_pgid_no;
                  ELSE
                     v_next_due_date := LAST_DAY (v_next_due_date);
                  END IF;

---------------------------------------------------------------
                  UPDATE ins_p_summery
                     SET next_due_date = last_paid_date,
                         next_due_inst_no = last_paid_inst_no,
                         last_paid_date = v_next_due_date,
                         last_paid_inst_no = last_paid_inst_no - 1,
                         suspense_amt = NVL (suspense_amt, 0) + v_suspense,
                         u_usr = p_u_usr,
                         u_dt = SYSDATE
                   WHERE pgid = p_pgid_no AND v_count = 0;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     out_error := SQLERRM;
               END;
            END LOOP;
         /*ELSE
                   ----------UPDATE INS_P_SUMMERY--------------
                     UPDATE   ins_p_summery
                        SET   suspense_amt = 0,
                              fpr_no = NULL,
                              u_usr = p_u_usr,
                              u_dt = SYSDATE
                      WHERE   pgid = p_pgid_no;

                   -----------------UPDATE ACC_ADVANCE_RECEIVABLES------------------
                     UPDATE   acc_advance_receivables
                        SET   status = '0',
                              com_calculated = 'N',
                              u_dt = SYSDATE,
                              u_usr = USER,
                              adjusted_by = NULL,
                              adjustment_date = NULL
                      WHERE   receive_id = p_receive_id;*/
         END IF;

         --------------DELETE BANK DEPOSIT ACCORDING TO BANK DEPOSIT STATUS--------------
         IF p_bank_deposit_st = '1'
         THEN
            BEGIN
               SELECT tran_id, amount
                 INTO v_temp, v_bank_deposit_amt
                 FROM acc_bank_tran_dtl
                WHERE pgid = p_pgid_no AND receive_id = p_receive_id;

               SELECT COUNT (1)
                 INTO v_deposit_count
                 FROM acc_bank_tran_dtl
                WHERE tran_id = v_temp;

               IF v_deposit_count = '1'
               THEN
                  DELETE FROM acc_bank_tran_dtl
                        WHERE pgid = p_pgid_no AND receive_id = p_receive_id;

                  DELETE FROM acc_bank_tran_mst
                        WHERE tran_id = v_temp;
               ELSE
                  DELETE FROM acc_bank_tran_dtl
                        WHERE pgid = p_pgid_no AND receive_id = p_receive_id;

                  BEGIN
                     UPDATE acc_bank_tran_mst
                        SET tot_deposit_amt =
                                 tot_deposit_amt - NVL (v_bank_deposit_amt, 0),
                            u_usr = p_u_usr,
                            u_dt = SYSDATE
                      WHERE tran_id = v_temp;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        out_error := 'BANK DEPOSIT NOT FOUND';
                  END;
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  out_error := 'BANK DEPOSIT NOT FOUND';
            END;
         END IF;

         ---------------------------UPDATE COLLECTION SUMMERY--------------------
         BEGIN
            UPDATE acc_coll_summery
               SET status = '0'
             WHERE pgid = p_pgid_no
               AND receive_id = p_receive_id
               AND status = '1'
               AND coll_from = 'R';
         EXCEPTION
            WHEN OTHERS
            THEN
               out_error := 'BANK DEPOSIT NOT FOUND';
         END;

         INSERT INTO ins_agent_bill_change
                     (old_bill_no, new_bill_no, req_by, changing_date,
                      comments, pgid
                     )
              VALUES (p_receive_id, NULL, p_request_by, SYSDATE,
                      'Undo the adjustment on requesting', p_pgid_no
                     );
      END IF;
   END IF;

   IF out_error IS NULL
   THEN
      out_error := 'SUCCESS';
   END IF;
EXCEPTION
   WHEN err_comm_date
   THEN
      out_error := 'Commencement date not found';
   WHEN err_bill_invld
   THEN
      out_error := SQLERRM;
   WHEN OTHERS
   THEN
      out_error := SQLERRM;
END;
/


--
-- PRO_AGENT_BONUS_CALAC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_agent_bonus_calac wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
50d4 1004
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
ZvUw3nxwh/Z
1D3s+KQJALhrrkuCdPFLoWd94zYqA2kZkz8bwVOsv0bNZjkjBFJqxbRMK8M9JAjYva88fX0S
IajOpCarhChjVjjq9Z4VTzlVHiyaahRkfX0GzeP4QSAzmXO6F+W+NA47QjYiwVt4lepFIacS
D1n7rZgG92+9RI3VlScJUuRWF/jZDkOhmrZ95Cmn9bbZiLy/k8lxOs5z2pO34tAq+CqlgABl
gv4kcznv3smf
/


--
-- PRO_ALT_COLLECTION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_alt_collection (
   p_pgid                IN       ins_p_proposal.pgid%TYPE,
   p_coll_dt             IN       DATE,
   p_user                IN       VARCHAR2,
   p_alt_sl              IN       NUMBER,
   p_par_instl_no_from   OUT      ins_prem_acc_receivable.installment_no%TYPE,
   p_par_instl_no_to     OUT      ins_prem_acc_receivable.installment_no%TYPE,
   p_par_due_dt_from     OUT      DATE,
   p_par_due_dt_to       OUT      DATE,
   p_par_prem_due_amt    OUT      NUMBER,
   p_due_instl_no_from   OUT      ins_prem_acc_receivable.installment_no%TYPE,
   p_due_instl_no_to     OUT      ins_prem_acc_receivable.installment_no%TYPE,
   p_due_dt_from         OUT      DATE,
   p_due_dt_to           OUT      DATE,
   p_tot_prem_amt        OUT      NUMBER,
   p_late_fee            OUT      NUMBER,
   p_latefee_waiver      OUT      NUMBER,
   p_avl_sus_amt         OUT      NUMBER,
   p_actual_req_amt      OUT      NUMBER           ---total requirement amount
                                        ,
   p_prev_coll_amt       OUT      NUMBER,
   p_net_req_amt         OUT      NUMBER             ---net requirement amount
                                        ,
   p_error               OUT      VARCHAR2
)
IS
   --Store current policy information
   v_inst_premium              ins_p_summery.installment_premium%TYPE    := 0;
   v_last_paid_inst_no         ins_p_summery.last_paid_inst_no%TYPE      := 0;
   v_sum_assured               ins_p_summery.sum_assured%TYPE            := 0;
   v_suspense_amt              ins_p_summery.suspense_amt%TYPE           := 0;
   v_pay_mode_cd               ins_p_summery.pay_mode_cd%TYPE;
   v_policy_status             ins_p_summery.policy_status%TYPE;
   v_product_cd                ins_p_summery.product_cd%TYPE;
   v_term                      ins_p_summery.term%TYPE                   := 0;
   v_last_paid_date            ins_p_summery.last_paid_date%TYPE;
   v_comm_date                 ins_p_summery.comm_date%TYPE;
   v_age                       ins_p_summery.age%TYPE                    := 0;
   v_dob                       ins_p_summery.dob%TYPE;
   v_policy_installment        ins_p_summery.policy_installment%TYPE     := 0;
   v_yrly_no_inst              ins_pay_mode.yrly_no_inst%TYPE            := 0;
   v_option_cd                 ins_p_summery.option_cd%TYPE;
   v_paidup_age                ins_product.paidup_age%TYPE               := 2;
--================================================================--
--Store alteration proposal information
   v_pro_product_cd            ins_p_summery.product_cd%TYPE;
   v_pro_term                  ins_p_summery.term%TYPE                   := 0;
   v_pro_sum_assurerd          ins_p_summery.sum_assured%TYPE            := 0;
   v_pro_comm_dt               ins_p_summery.comm_date%TYPE;
   v_pro_age                   ins_p_summery.age%TYPE                    := 0;
   v_pro_option_cd             ins_p_summery.option_cd%TYPE;
   v_pro_pay_mode_cd           ins_p_summery.pay_mode_cd%TYPE;
   v_pro_yearly_premium        ins_p_summery.total_yearly_premium%TYPE   := 0;
   v_pro_installment_premium   ins_p_summery.installment_premium%TYPE    := 0;
   v_alt_sl                    ins_uw_accpt.alt_sl%TYPE;
   v_month_per_instl           NUMBER (2)                                := 0;
   v_pro_month_per_instl       NUMBER (2)                                := 0;
   v_pro_yrly_no_inst          NUMBER (2)                                := 0;
--================================================================--
   v_adj_comm_dt               ins_p_summery.comm_date%TYPE;
   v_adj_last_paid_dt          ins_p_summery.last_paid_date%TYPE;
   v_adj_last_paid_inst_no     ins_p_summery.last_paid_inst_no%TYPE      := 0;
   v_late_fee                  acc_receivables.late_fee%TYPE             := 0;
   v_tot_late_fee              acc_receivables.late_fee%TYPE             := 0;
   v_latefee_waiver            acc_receivables.latefee_waiver%TYPE       := 0;
   v_tot_latefee_waiver        acc_receivables.latefee_waiver%TYPE       := 0;
   --v_due_amt                     ins_p_summery.total_yearly_premium%TYPE := 0;
   v_tot_prem_due_amt          ins_p_summery.total_yearly_premium%TYPE   := 0;
   v_tot_prem_paid             ins_p_summery.total_yearly_premium%TYPE   := 0;
   v_drop_sum_value            ins_p_summery.sum_assured%TYPE            := 0;
   v_par_prem_due_amt          ins_p_summery.total_yearly_premium%TYPE   := 0;
   v_tot_paid_amt              NUMBER (12, 2)                            := 0;
   v_yly_extra_amt             ins_p_summery.extra_premium%TYPE          := 0;
---------------------------------------
   v_due_dt                    DATE;
   v_temp_due_date_to          DATE;
   ---------------
   v_life_premium              ins_p_summery.life_premium%TYPE   := 0;
   v_pro_life_premium          ins_p_summery.life_premium%TYPE   := 0;
BEGIN
   --Initialization
   p_par_prem_due_amt := 0;
   p_tot_prem_amt := 0;
   p_late_fee := 0;
   p_latefee_waiver := 0;
   p_avl_sus_amt := 0;
   p_prev_coll_amt := 0;
   v_drop_sum_value := 0;
   v_tot_paid_amt := 0;
   v_tot_prem_paid := 0;
   v_suspense_amt := 0;

--finding policy current information--
   SELECT ips.installment_premium, ips.last_paid_inst_no, ips.suspense_amt,
          ips.dob, ips.sum_assured, ips.policy_status, ips.product_cd,
          ips.term, ips.last_paid_date, ips.comm_date, ips.age,
          ips.policy_installment, ipm.yrly_no_inst, ips.pay_mode_cd,
          ips.option_cd, ip.paidup_age,
          NVL (ips.installment_premium, 0) * NVL (ips.last_paid_inst_no, 0)
                                                                tot_prem_paid,
            ips.extra_premium
          * DECODE (ips.pay_mode_cd, '01', 1, '02', 2, '03', 4, 12),
          ips.life_premium
     INTO v_inst_premium, v_last_paid_inst_no, v_suspense_amt,
          v_dob, v_sum_assured, v_policy_status, v_product_cd,
          v_term, v_last_paid_date, v_comm_date, v_age,
          v_policy_installment, v_yrly_no_inst, v_pay_mode_cd,
          v_option_cd, v_paidup_age,
          v_tot_prem_paid,
          v_yly_extra_amt,
          v_life_premium
     FROM ins_p_summery ips, ins_pay_mode ipm, ins_product ip
    WHERE ips.pgid = p_pgid
      AND ips.pay_mode_cd = ipm.pay_mode_cd
      AND ips.product_cd = ip.product_cd;

--Finding alteration proposal (accepted) information--
   SELECT c.product_cd, c.term, c.sum_assurerd, c.comm_dt,
          c.age, c.option_cd, c.pay_mode_cd,
          c.yearly_premium, c.installment_premium, c.alt_sl,
          c.life_premium
     INTO v_pro_product_cd, v_pro_term, v_pro_sum_assurerd, v_pro_comm_dt,
          v_pro_age, v_pro_option_cd, v_pro_pay_mode_cd,
          v_pro_yearly_premium, v_pro_installment_premium, v_alt_sl,
          v_pro_life_premium
     FROM ins.alt_uw_accpt_gen c
    WHERE c.pgid = p_pgid AND c.alt_sl = p_alt_sl;

--Finding drop sum-value if sumassured decrease--
   IF     v_pro_sum_assurerd < v_sum_assured
      AND v_policy_status IN ('00', '01', '09')
      AND FLOOR (v_last_paid_inst_no / v_yrly_no_inst) >= v_paidup_age
   THEN
      v_drop_sum_value :=
         fun_drop_sum_value (p_pgid                     => p_pgid,
                             p_term                     => v_term,
                             p_last_paid_inst_no        => v_last_paid_inst_no,
                             p_yrly_no_inst             => v_yrly_no_inst,
                             p_sum_assured              =>   v_sum_assured
                                                           - v_pro_sum_assurerd,
                             p_product_cd               => v_product_cd,
                             p_comm_date                => v_comm_date,
                             p_policy_installment       => v_policy_installment,
                             p_installment_premium      => v_inst_premium,
                             p_last_paid_date           => v_last_paid_date,
                             p_policy_status            => v_policy_status,
                             p_age                      => v_age
                            );
   END IF;

   --Finding No of months duration as per paymode
   SELECT DECODE (v_pay_mode_cd, '01', 12, '02', 6, '03', 3, 1),
          DECODE (v_pro_pay_mode_cd, '01', 12, '02', 6, '03', 3, 1),
          DECODE (v_pro_pay_mode_cd, '01', 1, '02', 2, '03', 4, 12)
     INTO v_month_per_instl,
          v_pro_month_per_instl,
          v_pro_yrly_no_inst
     FROM DUAL;

   IF MOD ((v_last_paid_inst_no * v_month_per_instl), v_pro_month_per_instl) =
                                                                             0
   THEN
      v_adj_last_paid_inst_no :=
            (v_last_paid_inst_no * v_month_per_instl) / v_pro_month_per_instl;
      v_adj_last_paid_dt :=
         ADD_MONTHS (v_pro_comm_dt,
                     ((v_adj_last_paid_inst_no - 1) * v_pro_month_per_instl
                     )
                    );
   --ELSE
   --   RAISE application_error;
   END IF;

   p_par_instl_no_from := 1;
   p_par_due_dt_from := v_pro_comm_dt;
   v_tot_paid_amt := v_tot_prem_paid + v_suspense_amt;

   IF     v_pro_sum_assurerd < v_sum_assured
      AND v_policy_status IN ('00', '01', '09')
      AND FLOOR (v_last_paid_inst_no / v_yrly_no_inst) >= v_paidup_age
   THEN
      NULL;
   ELSE
      IF v_pro_life_premium > v_life_premium THEN --Add by musha on 17.10.2018
       FOR i IN 1 .. v_adj_last_paid_inst_no
          LOOP
             IF (ADD_MONTHS (v_pro_comm_dt, ((i - 1) * v_pro_month_per_instl))) >
                                                                        p_coll_dt
             THEN
                EXIT;
             END IF;

             p_par_instl_no_to := i;
             p_par_due_dt_to :=
                     ADD_MONTHS (v_pro_comm_dt,
                                 ((i - 1) * v_pro_month_per_instl));

             IF v_tot_paid_amt >= v_pro_installment_premium
             THEN
                v_tot_paid_amt := v_tot_paid_amt - v_pro_installment_premium;
             ELSE
                IF NVL (v_drop_sum_value, 0) > 0
                THEN
                   IF v_drop_sum_value >=
                                    (v_pro_installment_premium - v_tot_paid_amt
                                    )
                   THEN
                      v_tot_paid_amt := 0;
                      v_drop_sum_value :=
                           v_drop_sum_value
                         - (v_pro_installment_premium - v_tot_paid_amt);
                   ELSE
                      /*v_late_fee :=
                         fun_cal_late_fee_for_alter
                                        (p_pgid             => p_pgid,
                                         p_prem_amt         => v_pro_installment_premium,
                                         p_yearly_inst      => v_pro_yrly_no_inst,
                                         p_due_dt_from      => p_par_due_dt_to,
                                         p_due_dt_to        => p_par_due_dt_to,
                                         p_calc_date        => p_coll_dt
                                        );*/  --mUSHA ON 16.10.2018
                                        
                      v_par_prem_due_amt :=
                           v_par_prem_due_amt
                         + (  (v_pro_installment_premium - v_tot_paid_amt)
                            - v_drop_sum_value
                           )
                         + NVL(v_late_fee, 0);
                      v_tot_paid_amt := 0;
                      v_drop_sum_value := 0;
                   END IF;
                ELSE
                   /*v_late_fee :=
                      fun_cal_late_fee_for_alter
                                        (p_pgid             => p_pgid,
                                         p_prem_amt         => v_pro_installment_premium,
                                         p_yearly_inst      => v_pro_yrly_no_inst,
                                         p_due_dt_from      => p_par_due_dt_to,
                                         p_due_dt_to        => p_par_due_dt_to,
                                         p_calc_date        => p_coll_dt
                                        );*/ --mUSHA ON 16.10.2018 
                   
                   v_par_prem_due_amt :=
                        v_par_prem_due_amt
                      + (v_pro_installment_premium - v_tot_paid_amt)
                      + NVL(v_late_fee, 0);
                   v_tot_paid_amt := 0;
                END IF;
             END IF;
          END LOOP;
      ELSE
          p_par_instl_no_to := v_adj_last_paid_inst_no;
          p_par_due_dt_to := v_adj_last_paid_dt;
      END IF;
   END IF;

   --Adjust due installment by drop sum value
   IF NVL (v_drop_sum_value, 0) > 0
   THEN
      WHILE v_drop_sum_value > v_pro_installment_premium --0
      LOOP
         /*IF v_adj_last_paid_dt > p_coll_dt
         THEN
            EXIT;
         END IF;*/ --Musha on 05.10.2020

         v_adj_last_paid_inst_no := v_adj_last_paid_inst_no + 1;
         v_adj_last_paid_dt :=
            ADD_MONTHS (v_pro_comm_dt,
                        (  (v_adj_last_paid_inst_no - 1)
                         * v_pro_month_per_instl --Musha on 07.10.2018  add -1
                        )
                       );

         IF v_drop_sum_value >= v_pro_installment_premium
         THEN
            v_drop_sum_value := v_drop_sum_value - v_pro_installment_premium;
         ELSE
            v_par_prem_due_amt :=
                 v_par_prem_due_amt
               + (v_pro_installment_premium - v_drop_sum_value);
            v_drop_sum_value := 0;
         END IF;
      END LOOP;

      p_par_instl_no_to := v_adj_last_paid_inst_no;
      p_par_due_dt_to := v_adj_last_paid_dt;
   END IF;

   p_par_prem_due_amt := v_par_prem_due_amt;
   --Remaining of total paid amount and drop sum value put in suspense amount
   p_avl_sus_amt := v_drop_sum_value;
            ---v_tot_paid_amt + v_drop_sum_value;       ---Musha on 01.10.2018
--=====================================================--
--Finding premium due information
   v_tot_prem_due_amt := 0;
   v_late_fee := 0;
   v_tot_late_fee := 0;
   v_latefee_waiver := 0;
   v_tot_latefee_waiver := 0;
   p_due_instl_no_from := 0;
   p_due_dt_from := NULL;
   p_due_instl_no_to := 0;
   p_due_dt_to := NULL;

   IF ADD_MONTHS (v_adj_last_paid_dt, v_pro_month_per_instl) < p_coll_dt
   THEN
      p_due_instl_no_from := v_adj_last_paid_inst_no + 1;
      p_due_dt_from := ADD_MONTHS (v_adj_last_paid_dt, v_pro_month_per_instl);
      v_adj_last_paid_inst_no := v_adj_last_paid_inst_no + 1;
      v_adj_last_paid_dt :=
         ADD_MONTHS (v_pro_comm_dt,
                     ((v_adj_last_paid_inst_no - 1) * v_pro_month_per_instl
                     )
                    );

      WHILE v_adj_last_paid_dt < p_coll_dt
      LOOP
         v_late_fee :=
            fun_cal_late_fee_for_alter
                                    (p_pgid             => p_pgid,
                                     p_prem_amt         => v_pro_installment_premium,
                                     p_yearly_inst      => v_pro_yrly_no_inst,
                                     p_due_dt_from      => v_adj_last_paid_dt,
                                     p_due_dt_to        => v_adj_last_paid_dt,
                                     p_calc_date        => p_coll_dt
                                    );
         v_tot_prem_due_amt := v_tot_prem_due_amt + v_pro_installment_premium;
                                                              -- + v_late_fee;
         v_tot_late_fee := v_tot_late_fee + v_late_fee;
         p_due_instl_no_to := v_adj_last_paid_inst_no;
         p_due_dt_to := v_adj_last_paid_dt;
         v_adj_last_paid_inst_no := v_adj_last_paid_inst_no + 1;
         v_adj_last_paid_dt :=
            ADD_MONTHS (v_pro_comm_dt,
                        ((v_adj_last_paid_inst_no - 1) * v_pro_month_per_instl
                        )
                       );
      END LOOP;

      IF NVL (p_due_instl_no_to, 0) > 0
      THEN
         p_tot_prem_amt := v_tot_prem_due_amt;
         p_late_fee := v_tot_late_fee;
         p_latefee_waiver := 0;

         ----Late Fee Waiver---
         BEGIN
            IF p_late_fee > 0
            THEN
               DELETE FROM temp_latefee_waiver_circular;

               COMMIT;

               FOR i IN p_due_instl_no_from .. p_due_instl_no_to
               LOOP
                  SELECT ADD_MONTHS (v_comm_date,
                                     DECODE (i - 1,
                                             0, 0,
                                             (  DECODE (v_pro_pay_mode_cd,
                                                        'YLY', 12,
                                                        'HLY', 6,
                                                        'QLY', 3,
                                                        1
                                                       )
                                              * (i - 1)
                                             )
                                            )
                                    )
                    INTO v_temp_due_date_to
                    FROM DUAL;

                  IF TO_NUMBER (TO_CHAR (LAST_DAY (v_temp_due_date_to), 'DD')) <
                                       TO_NUMBER (TO_CHAR (v_comm_date, 'DD'))
                  THEN
                     SELECT TO_DATE
                               (   TO_NUMBER
                                       (TO_CHAR (LAST_DAY (v_temp_due_date_to),
                                                 'DD'
                                                )
                                       )
                                || '-'
                                || TO_CHAR (v_temp_due_date_to, 'MON-RRRR'),
                                'DD-MON-RRRR'
                               )
                       INTO v_due_dt
                       FROM DUAL;
                  ELSE
                     SELECT TO_DATE (   TO_CHAR (v_comm_date, 'DD')
                                     || '-'
                                     || TO_CHAR (v_temp_due_date_to,
                                                 'MON-RRRR'
                                                ),
                                     'DD-MON-RRRR'
                                    )
                       INTO v_due_dt
                       FROM DUAL;
                  END IF;

                  FOR j IN
                     (SELECT a.waiver_rate, a.circular_id, a.circular_msg,
                             a.curcular_dt, a.waiver_category
                        FROM ser_latefee_waiver_circular a
                       WHERE a.status = '1'
                         AND (   (    a.applicable_on = '01'
                                  AND TO_DATE (v_due_dt)
                                         BETWEEN a.effective_dt_from
                                             AND a.effective_dt_to
                                 )
                              OR (    a.applicable_on = '02'
                                  AND TO_DATE (v_comm_date)
                                         BETWEEN a.effective_dt_from
                                             AND a.effective_dt_to
                                 )
                             /*OR (    a.applicable_on = '03'
                                 AND TO_DATE (:v_policy_history.risk_date)
                                        BETWEEN a.effective_dt_from
                                            AND a.effective_dt_to
                                )
                             OR (    a.applicable_on = '05'
                                 AND TO_DATE (:v_policy_history.last_paid_date)
                                        BETWEEN a.effective_dt_from
                                            AND a.effective_dt_to
                                )*/
                             )
                         AND p_coll_dt BETWEEN a.receive_dt_from
                                           AND a.receive_dt_to
                         AND policy_status = v_policy_status
                         /*AND a.office_cd IN (
                                SELECT DISTINCT DECODE (a.desc_office,
                                                        0, :v_policy_history.office_cd,
                                                        y.office_cd
                                                       )
                                           FROM (SELECT     office_cd
                                                       FROM hrm_office_setup
                                                 CONNECT BY PRIOR control_office_cd =
                                                                              office_cd
                                                 START WITH office_cd =
                                                               NVL
                                                                  (:v_policy_history.office_cd,
                                                                   office_cd
                                                                  )) y)*/
                         AND (   (    a.waiver_category = '1'
                                  AND a.product_cd IS NULL
                                 )
                              OR (    a.waiver_category = '2'
                                  AND a.product_cd = v_product_cd
                                 )
                             ))
                  LOOP
                     INSERT INTO temp_latefee_waiver_circular
                          VALUES (p_pgid, j.circular_id, j.circular_msg,
                                  j.curcular_dt, j.waiver_rate, v_due_dt,
                                  j.waiver_category);
                  END LOOP;
               END LOOP;

               SELECT ROUND ((NVL (p_late_fee, 0) * MAX (waiver_rate)) / 100,
                             2)
                 INTO v_latefee_waiver
                 FROM temp_latefee_waiver_circular
                WHERE pgid = p_pgid;

               DELETE FROM temp_latefee_waiver_circular;

               COMMIT;
            ELSE
               v_latefee_waiver := 0;
            END IF;
            
            p_latefee_waiver := v_latefee_waiver;
         EXCEPTION
            WHEN OTHERS
            THEN
               p_latefee_waiver := 0;
         END;
--==================--
      ELSE
         p_due_instl_no_to := NULL;
         p_due_dt_to := NULL;
         p_due_instl_no_from := NULL;
         p_due_dt_from := NULL;
      END IF;
   END IF;

--End of Finding premium due information
--=====================================================--
   p_actual_req_amt :=
        (  NVL (p_par_prem_due_amt, 0)
         + NVL (p_tot_prem_amt, 0)
         + NVL (p_late_fee, 0)
        )
      - (NVL (p_latefee_waiver, 0) + NVL (p_avl_sus_amt, 0));
   p_net_req_amt :=
        (  NVL (p_par_prem_due_amt, 0)
         + NVL (p_tot_prem_amt, 0)
         + NVL (p_late_fee, 0)
        )
      - (  NVL (p_latefee_waiver, 0)
         + NVL (p_avl_sus_amt, 0)
         + NVL (p_prev_coll_amt, 0)
        );

   --Finding amount collected earlier for alteration
   SELECT NVL (SUM (r.coll_amount), 0)
     INTO p_prev_coll_amt
     FROM acc_alt_receivables r
    WHERE r.pgid = p_pgid AND r.alt_sl = p_alt_sl;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := 'pro_alt_collection: Error- ' || SQLERRM;
END pro_alt_collection;
/


--
-- PRO_ALT_PREM_COLL_ADJ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_alt_prem_coll_adj (
   p_pgid              IN     VARCHAR2,
   p_user              IN     VARCHAR2--,v_office_cd                IN       VARCHAR2
                                      --,v_agent_id                 IN       VARCHAR2
   ,
   v_adjustment_date   IN     DATE,
   v_fyscal_yr_fr      IN     DATE,
   v_fyscal_yr_to      IN     DATE--,v_descendant_flag          IN       VARCHAR2
                                  --,v_test_var                 OUT      VARCHAR2
   ,
   p_object_cd         IN     VARCHAR2,
   v_errm                 OUT VARCHAR2
--,v_valid_record_count       OUT      NUMBER
)
IS
   money_in_hand     acc_receivables.tot_premium_amt%TYPE;
   v_exp_office      hrm_office.office_cd%TYPE;
   v_voucher_shnm    acc_voucher_type.vouch_sh_nm%TYPE;
   v_yrly_no_inst    ins_pay_mode.yrly_no_inst%TYPE;
   v_late_fee        acc_receivables.late_fee%TYPE;
   v_adjust_status   VARCHAR2 (1);
   v_paidup_st       VARCHAR2 (1);
   v_count           NUMBER (2);
   -- paid-up status checker varriable
   v_last_inst       VARCHAR2 (1);
   -- last installment checker
   --v_comm_errm                   VARCHAR2 (200);
   -- for commisiion process error message
   v_voucher_errm    VARCHAR2 (200);
   -- for voucher creation error message
   v_latefee_errm    VARCHAR2 (200);
   --for late fee voucher error message
   v_adjust          NUMBER (5);
   exp_renewal_inc EXCEPTION;
   -- for renewal income required exception
   exp_prem_depo_gl EXCEPTION;
   -- for premium deposit suspense required exception
   exp_voucher_creation EXCEPTION;
   -- for voucher creation exeption
   exp_comm_calc EXCEPTION;
   -- for commission calculation exception
   exp_late_fee_gl EXCEPTION;

   -- for late fee gl exception

   CURSOR c_coll
   IS
        SELECT   a.receive_id,
                 a.receive_date,
                 a.pgid,
                 a.coll_amount,
                 a.due_dt_from,
                 a.due_dt_to,
                 a.installment_no_from,
                 a.installment_no_to,
                 ABS (NVL (a.late_fee, 0) - NVL (a.latefee_waiver, 0)) late_fee,
                 a.office_code,
                 a.receive_mode,
                 a.vouch_ref,
                 a.interoffice_voucher,
                 a.status,
                 a.tot_premium_amt,
                 s.comm_date,
                 s.agent_id,
                 s.product_cd,
                 s.term,
                 s.pay_mode_cd,
                 NVL (s.suspense_amt, 0) + NVL (a.avl_sus_amt, 0) suspense_amt,
                 p.paidup_age paidupage,
                 s.ins_tp_cd
          FROM   acc_receivables a, ins_p_summery s, ins_product p
         WHERE       a.status = '0'
                 AND a.rec_status = '1'
                 AND a.receipt_status = '1'
                 AND a.coll_from = '2'
                 AND a.pgid = p_pgid
                 AND a.pgid = s.pgid
                 AND s.product_cd = p.product_cd
                 /*AND (    (    NVL (v_descendant_flag, '0') = '0'
                           AND a.active_office_cd = NVL (v_office_cd, a.active_office_cd) )
                      OR (    NVL (v_descendant_flag, '0') = '1'
                          AND a.active_office_cd IN (SELECT     office_cd
                                                           FROM hrm_office_setup
                                                     START WITH office_cd = v_office_cd
                                                     CONNECT BY PRIOR office_cd = control_office_cd) ) )*/
                 AND EXISTS
                       (SELECT   1
                          FROM   ins_prem_acc_receivable ipac
                         WHERE       ipac.pay_status = 0
                                 AND ipac.proposed_status = '7'
                                 AND ipac.proposer_pk = a.receive_id)
                 AND (a.com_calculated = 'N' OR a.com_calculated IS NULL)
                 AND (a.adv_status = '0' OR a.adv_status IS NULL)
                 AND NVL (a.cheque_deposit, 'N') =
                       DECODE (a.receive_mode,
                               '1', NVL (a.cheque_deposit, 'N'),
                               '3', NVL (a.cheque_deposit, 'N'),
                               '5', NVL (a.cheque_deposit, 'N'), -- this part is added by Alamgir Hossain for i-life & MFS
                               '7', NVL (a.cheque_deposit, 'N'),
                               'Y')
                 AND TO_DATE (a.receive_date, 'dd/mm/rrrr') <=
                       TO_DATE (v_adjustment_date, 'dd/mm/rrrr')
                 AND TO_DATE (a.receive_date, 'dd/mm/rrrr') BETWEEN TO_DATE (
                                                                       v_fyscal_yr_fr,
                                                                       'dd/mm/rrrr'
                                                                    )
                                                                AND  TO_DATE (
                                                                        v_fyscal_yr_to,
                                                                        'dd/mm/rrrr'
                                                                     )
      /*AND a.pgid IN (SELECT pgid
                       FROM ins_p_summery x
                      WHERE x.agent_id = NVL (v_agent_id, x.agent_id) )*/
      ORDER BY   a.pgid, a.receive_id;
BEGIN
   SELECT   vouch_sh_nm
     INTO   v_voucher_shnm
     FROM   acc_voucher_type
    WHERE   vouch_cd = '05';                            -- for journal voucher

   FOR i IN c_coll
   -- Alteration,Assignment Late Fee etc. (Income)
   LOOP
      SELECT   COUNT (1)
        INTO   v_count
        FROM   ins_prem_acc_receivable
       WHERE       pgid = i.pgid
               AND proposer_pk != i.receive_id
               AND pay_status = 0
               AND proposed_status = '7'
               AND installment_no < i.installment_no_from;

      IF v_count = 0
      THEN
         money_in_hand := 0;
         money_in_hand := (i.coll_amount - i.late_fee);
         v_late_fee := i.late_fee;

         FOR i2
         IN (  SELECT   a.installment_premium,
                        a.pgid,
                        a.installment_no,
                        a.pay_status,
                        TO_DATE (
                              TO_CHAR (i.comm_date, 'dd')
                           || '-'
                           || TO_CHAR (a.next_due_dt, 'MON-RRRR'),
                           'DD-MON-RRRR'
                        )
                           next_due_dt,
                        a.sl_no demand_sl,
                        a.total_installment                --, b.sl_no loan_sl
                                           ,
                        NULL loan_sl                --, b.ref_slno loan_sl_mst
                                    ,
                        NULL loan_sl_mst
                 FROM   ins_prem_acc_receivable a
                --, ins_proposal_auto_loan_dtl b
                WHERE       a.proposer_pk = i.receive_id
                        AND a.proposed_status = '7'
                        AND a.pay_status = 0
             --AND      a.sl_no = b.demand_note_sl(+)
             ORDER BY   a.installment_no)
         LOOP
            --check if this policy will earn the paidup status by this installment paid
            --if yes then update ins_p_summery's paid_up date and paid-up status
            --if no then paid-up status will remain unchanged.
            SELECT   yrly_no_inst
              INTO   v_yrly_no_inst
              FROM   ins_pay_mode
             WHERE   pay_mode_cd = i.pay_mode_cd;

            IF v_yrly_no_inst * i.paidupage <= i2.installment_no
            THEN
               --Assume the policy has earned the paid up value and need to update the status.
               v_paidup_st := 'Y';
            ELSE
               --no paid-up
               v_paidup_st := 'N';
            END IF;

            -- NOW FIND WHETHER IT IS THE LAST INSTALLMENT TO PAID. IF FOUND TRUE THEN UPDATE THE POLICY AT MATURE STATE
            -- OR IF FALSE THEN UPDATE THE POLICY NEXT_DUE_INST_NO
            IF i2.installment_no = i2.total_installment
            THEN
               --last installment arrived and policy will be at its mature state
               v_last_inst := 'Y';
            ELSIF i2.installment_no <> i2.total_installment
            THEN
               --update policy NEXT_DUE_INST_NO
               v_last_inst := 'N';
            END IF;

            --Added by Md. Zahid Hasan on 14/08/2014
            --Update by Md. Sayadur Rahaman ,on 10-sep-12 for new accounts interation
            DECLARE
               recprem          pkg_gl_voucher.t_trans_tab;
               v_error          VARCHAR2 (200);
               v_object_cd      gen_object_info.object_cd%TYPE;
               v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
               v_inter_off_st   CHAR (1);
               v_office_cd      hrm_office.office_cd%TYPE;
               v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
               --v_trans_date   DATE;
               v_cost_center    hrm_office.office_cd%TYPE;
               v_narration      VARCHAR2 (200);
               v_chq_tp         VARCHAR2 (3);
               v_chq_no         VARCHAR2 (50);
               v_chq_dt         DATE;
               v_voucher_no     VARCHAR2 (15);
               v_sus_amt_used   NUMBER (1);
            BEGIN
               /***********************
               Business wise value will change.
               Developer will put the value
               **********************************/
               --v_object_cd := '00080';
               v_object_cd := p_object_cd;
               --that is object_cd
               v_voucher_cd := '05';
               v_inter_off_st := '0';
               v_office_cd := fun_find_regional_off (i.office_code);
               v_cost_center := i.office_code;
               v_trans_id := i.receive_id;
               --v_trans_date   := i.receive_date;

               /*SELECT COUNT(1)
                 INTO v_coll_fy_open_st
                 FROM acc_fiscal_year
                WHERE fy_close = 0
                  AND TRUNC(v_coll_dt) BETWEEN fy_st_dt AND fy_ed_dt;

               IF v_coll_fy_open_st = 0 THEN
                 v_trans_date := p_adjustment_date;
               END IF;*/
               --Musha on 19-01-2014
               v_narration :=
                     'Premium adjusted to income for policy no: '
                  || fun_ins_pgid_to_policy_no (i.pgid)
                  || ' for '
                  || i2.next_due_dt
                  || ' at '
                  || v_adjustment_date;

               --v_coll_adj_dt;   --i.receive_date;  --Musha on 19-01-2014
               --v_user := v_user;  --- disable by zahid on 16/08/2014
               /*******End********/
               IF i.ins_tp_cd = '1'
               THEN
                  recprem (1).trans_item_cd := 97;
               ELSE
                  recprem (1).trans_item_cd := 102;
               END IF;

               --Here '3' for " Premium Amount"
               recprem (1).post_amount := i2.installment_premium;
               recprem (1).chq_tp := NULL;
               recprem (1).chq_no := NULL;
               recprem (1).chq_dt := NULL;

               ----------------------------------
               IF i.ins_tp_cd = '1'
               THEN
                  recprem (2).trans_item_cd := 158;
               ELSE
                  recprem (2).trans_item_cd := 159;
               END IF;

               --Here '19' for "Adjusted Amount"
               recprem (2).post_amount := i2.installment_premium;
               recprem (2).chq_tp := NULL;
               recprem (2).chq_no := NULL;
               recprem (2).chq_dt := NULL;

               --Now callaing the voucher posting
               IF money_in_hand >= i2.installment_premium
                  OR (money_in_hand + i.suspense_amt) >=
                       i2.installment_premium
               THEN
                  IF money_in_hand >= i2.installment_premium
                  THEN
                     v_sus_amt_used := 0;
                  ELSE
                     v_sus_amt_used := 1;
                  END IF;

                  pkg_gl_voucher.pro_voucher_posting (
                     p_table          => recprem,
                     p_object_cd      => v_object_cd,
                     p_vouch_cd       => v_voucher_cd,
                     p_inter_off_st   => v_inter_off_st,
                     p_office_cd      => v_office_cd,
                     p_trans_id       => v_trans_id,
                     p_trans_date     => v_adjustment_date,
                     --v_trans_date,
                     p_cost_center    => v_cost_center,
                     p_narration      => v_narration,
                     p_user           => p_user,
                     p_ins_tp_cd      => i.ins_tp_cd,
                     p_voucher_no     => v_voucher_no,
                     p_error          => v_error
                  );

                  /*
                  pro_prem_adj_vouch_issue (v_jv_no                       => v_voucher_shnm
                                        ,v_income_gl                   => i.income_gl
                                        ,v_premium_gl                  => i.premium_depo_gl
                                        ,v_autoloan_gl                 => i.anf_loan_gl
                                        ,v_office_cd                   => i.office_code
                                        ,v_pgid                        => i.pgid
                                        ,v_adjustment_date             => v_adjustment_date
                                        ,v_due_dt                      => i2.next_due_dt
                                        ,v_user                        => v_user
                                        ,v_amt                         => i2.installment_premium
                                        ,v_coll_dt                     => i.receive_date
                                        ,v_inst_no                     => i2.installment_no
                                        ,v_paidup_st                   => v_paidup_st
                                        ,v_last_inst                   => v_last_inst
                                        ,v_pay_mode_cd                 => i.pay_mode_cd
                                        ,v_sus_amt_used                => 0
                                        ,v_auto_adjust                 => 'N'
                                        ,v_loan_mst_sl                 => NULL
                                        ,v_loan_dtl_sl                 => NULL
                                        ,v_voucher_errm                => v_voucher_errm
                                        ,v_adjust_status               => v_adjust_status);
                  */
                  IF v_error IS NOT NULL
                  THEN
                     v_voucher_errm := v_error;
                     v_adjust_status := 'N';
                     EXIT;
                  ELSE
                     --make the premium receivable paid.................
                     UPDATE   ins_prem_acc_receivable x
                        SET   x.paid_amount = i2.installment_premium,
                              x.balance = 0,
                              x.payment_date = i.receive_date,
                              x.pay_status = DECODE (v_sus_amt_used, 0, 1, 4),
                              x.proposed_status =
                                 DECODE (v_sus_amt_used, 0, '1', '4'),
                              x.ref_voucher = v_voucher_no,
                              --x.next_due_dt     = i2.next_due_dt,
                              u_usr = p_user,
                              u_dt = SYSDATE
                      WHERE   x.pgid = i.pgid
                              AND x.installment_no = i2.installment_no;

                     --update ins_p_summery for paid-up status and next due date and next due installment no
                     UPDATE   ins_p_summery p
                        SET   p.last_adjustment_dt = i.receive_date,
                              --i.receive_date,
                              p.last_paid_date = i2.next_due_dt,
                              p.paid_up_dt =
                                 DECODE (v_paidup_st,
                                         'Y', i2.next_due_dt,
                                         NULL),
                              p.paid_up_status =
                                 DECODE (v_paidup_st, 'Y', 1, NULL),
                              p.last_paid_inst_no = i2.installment_no,
                              p.policy_status =
                                 DECODE (v_last_inst, 'Y', '07', '09'),
                              p.next_due_date =
                                 TO_CHAR (comm_date, 'dd') || '-'
                                 || TO_CHAR (
                                       ADD_MONTHS (
                                          i2.next_due_dt,
                                          DECODE (p.pay_mode_cd,
                                                  '01', 12,
                                                  '02', 6,
                                                  '03', 3,
                                                  1)
                                       ),
                                       'MON-RRRR'
                                    ),
                              p.next_due_inst_no = i2.installment_no + 1,
                              p.policy_status_dt = v_adjustment_date,
                              /*DECODE(v_last_inst,
                                     'Y',
                                     i.receive_date,
                                     p.policy_status_dt),*/
                              p.suspense_amt =
                                 DECODE (
                                    v_sus_amt_used,
                                    1,
                                    (p.suspense_amt
                                     - ABS(i2.installment_premium
                                           - money_in_hand)),
                                    p.suspense_amt
                                 ),
                              p.process_user = p_user,
                              p.process_date = v_adjustment_date,
                              u_usr = p_user,
                              u_dt = SYSDATE
                      WHERE   p.pgid = i.pgid;

                     v_voucher_errm := 'Success';
                     v_adjust_status := 'Y';

                     IF money_in_hand >= i2.installment_premium
                     THEN
                        money_in_hand :=
                           money_in_hand - i2.installment_premium;
                     ELSE
                        money_in_hand := 0;
                     END IF;
                  END IF;
               ELSIF (money_in_hand + i.suspense_amt) < i2.installment_premium
               THEN
                  v_adjust_status := 'N';
                  EXIT;
               END IF;
            END;
         --End Of Update by Md. Sayadur Rahaman ,on 10-sep-12 for new accounts interation
         /*  Disable by Md. Zahid Hasan and delete after complete  will complete
         --Policy adjustment operation
         IF money_in_hand >= i2.installment_premium THEN
            -- available amount colleted for make this premium paid
            --now check it is due, discontinued or laps status
            IF i2.pay_status IN (0, 5, 6) THEN
               -- 0=due, 5=discontinue, 6=laps
               -- we can make the installnment paid

               -- call the voucher issue process
               pro_prem_adj_vouch_issue (v_jv_no                       => v_voucher_shnm
                                        ,v_income_gl                   => i.income_gl
                                        ,v_premium_gl                  => i.premium_depo_gl
                                        ,v_autoloan_gl                 => i.anf_loan_gl
                                        ,v_office_cd                   => i.office_code
                                        ,v_pgid                        => i.pgid
                                        ,v_adjustment_date             => v_adjustment_date
                                        ,v_due_dt                      => i2.next_due_dt
                                        ,v_user                        => v_user
                                        ,v_amt                         => i2.installment_premium
                                        ,v_coll_dt                     => i.receive_date
                                        ,v_inst_no                     => i2.installment_no
                                        ,v_paidup_st                   => v_paidup_st
                                        ,v_last_inst                   => v_last_inst
                                        ,v_pay_mode_cd                 => i.pay_mode_cd
                                        ,v_sus_amt_used                => 0
                                        ,v_auto_adjust                 => 'N'
                                        ,v_loan_mst_sl                 => NULL
                                        ,v_loan_dtl_sl                 => NULL
                                        ,v_voucher_errm                => v_voucher_errm
                                        ,v_adjust_status               => v_adjust_status);

               IF v_adjust_status = 'N' THEN
                  EXIT;
               END IF;

               money_in_hand              := money_in_hand - i2.installment_premium;
            ELSIF i2.pay_status = 2 THEN
               --now check whether this installment is previously paid by autoloan issue
               --adjust the auto loan account
                  -- call the voucher issue process
               pro_prem_adj_vouch_issue (v_jv_no                       => v_voucher_shnm
                                        ,v_income_gl                   => i.income_gl
                                        ,v_premium_gl                  => i.premium_depo_gl
                                        ,v_autoloan_gl                 => i.anf_loan_gl
                                        ,v_office_cd                   => i.office_code
                                        ,v_pgid                        => i.pgid
                                        ,v_adjustment_date             => v_adjustment_date
                                        ,v_due_dt                      => i2.next_due_dt
                                        ,v_user                        => v_user
                                        ,v_amt                         => i2.installment_premium
                                        ,v_coll_dt                     => i.receive_date
                                        ,v_inst_no                     => i2.installment_no
                                        ,v_paidup_st                   => v_paidup_st
                                        ,v_last_inst                   => v_last_inst
                                        ,v_pay_mode_cd                 => i.pay_mode_cd
                                        ,v_sus_amt_used                => 0
                                        ,v_auto_adjust                 => 'Y'
                                        ,v_loan_mst_sl                 => i2.loan_sl_mst
                                        ,v_loan_dtl_sl                 => i2.loan_sl
                                        ,v_voucher_errm                => v_voucher_errm
                                        ,v_adjust_status               => v_adjust_status);

               IF v_adjust_status = 'N' THEN
                  EXIT;
               END IF;
            END IF;
         ELSIF money_in_hand < i2.installment_premium THEN
            -- not enough money to pay installment
            -- if any suspense amount found that deposited before can cover the current due then the amount should be paid from
            -- suspense amount adjustment
            IF                                                                               --6
               (money_in_hand + i.suspense_amt) >= i2.installment_premium THEN
               --make the installment paid and payment status should be 4=Paid form suspense amount adjustment

               --call the voucher issue process
               pro_prem_adj_vouch_issue (v_jv_no                       => v_voucher_shnm
                                        ,v_income_gl                   => i.income_gl
                                        ,v_premium_gl                  => i.premium_depo_gl
                                        ,v_autoloan_gl                 => i.anf_loan_gl
                                        ,v_office_cd                   => i.office_code
                                        ,v_pgid                        => i.pgid
                                        ,v_adjustment_date             => v_adjustment_date
                                        ,v_due_dt                      => i2.next_due_dt
                                        ,v_user                        => v_user
                                        ,v_amt                         => i2.installment_premium
                                        ,v_coll_dt                     => i.receive_date
                                        ,v_inst_no                     => i2.installment_no
                                        ,v_paidup_st                   => v_paidup_st
                                        ,v_last_inst                   => v_last_inst
                                        ,v_pay_mode_cd                 => i.pay_mode_cd
                                        ,v_sus_amt_used                => ABS
                                                                             (  i2.installment_premium
                                                                              - money_in_hand)
                                        ,v_auto_adjust                 => 'N'
                                        ,v_loan_mst_sl                 => NULL
                                        ,v_loan_dtl_sl                 => NULL
                                        ,v_voucher_errm                => v_voucher_errm
                                        ,v_adjust_status               => v_adjust_status);

               IF v_adjust_status = 'N' THEN
                  EXIT;
               END IF;

               money_in_hand              := 0;
            ELSIF (money_in_hand + i.suspense_amt) < i2.installment_premium THEN
               v_adjust_status            := 'N';
               EXIT;
            END IF;
         END IF;
         */
         END LOOP;

         v_latefee_errm := 'Success';

         /*IF     v_late_fee > 0
            AND v_adjust_status = 'Y' THEN
            pro_latefee_vouch_issue (v_jv_no                       => v_voucher_shnm
                                    ,v_premium_gl                  => i.premium_depo_gl
                                    ,v_latefee_gl                  => i.latefee_income_gl
                                    ,v_office_cd                   => i.office_code
                                    ,v_pgid                        => i.pgid
                                    ,v_process_date                => v_adjustment_date
                                    ,v_user                        => v_user
                                    ,v_amt                         => v_late_fee
                                    ,v_coll_dt                     => i.receive_date
                                    ,v_voucher_errm                => v_latefee_errm);
         END IF;*/
         -- Musha on 24-08-2011 Reason: At adjustment voucher for late fee not required.
         IF v_adjust_status = 'Y' AND v_latefee_errm = 'Success'
         THEN
            --v_test_var                 := 'v_voucher_errm-' || v_voucher_errm;

            --v_errm                     := 'Success';
            UPDATE   acc_receivables
               SET   status = '1',
                     u_usr = p_user,
                     u_dt = SYSDATE,
                     com_calculated = 'N',
                     adjusted_by = p_user,
                     adjustment_date = v_adjustment_date
             WHERE   receive_id = i.receive_id;

            --v_valid_record_count       := NVL (v_valid_record_count, 0) + 1;
            IF money_in_hand > 0 AND i.pgid IS NOT NULL
            THEN
               UPDATE   ins_p_summery
                  SET   suspense_amt = suspense_amt + money_in_hand,
                        process_user = p_user,
                        process_date = v_adjustment_date,
                        u_usr = p_user,
                        u_dt = SYSDATE
                WHERE   pgid = i.pgid;
            END IF;

            COMMIT;
         ELSE
            ROLLBACK;
         END IF;
      ELSE
         NULL;
      END IF;
   END LOOP;
EXCEPTION
   WHEN exp_renewal_inc
   THEN
      v_errm :=
            'ERROR: Renewal income setup for "'
         || f_office (fun_find_regional_off (v_exp_office))
         || '" required.';
      ROLLBACK;
   WHEN exp_prem_depo_gl
   THEN
      v_errm :=
            'ERROR: Premium Deposit Individual Life(Suspense) setup for "'
         || f_office (fun_find_regional_off (v_exp_office))
         || '" required.';
      ROLLBACK;
   WHEN exp_voucher_creation
   THEN
      v_errm := v_voucher_errm;
      ROLLBACK;
   -- WHEN exp_comm_calc THEN
   --  v_errm                     := v_comm_errm;
   --ROLLBACK;
   WHEN exp_late_fee_gl
   THEN
      ROLLBACK;
   WHEN NO_DATA_FOUND
   THEN
      v_errm := 'ERROR: Data not found for adjustment process.';
      ROLLBACK;
   WHEN OTHERS
   THEN
      v_errm := 'ERROR: Other error ' || SQLERRM;
      ROLLBACK;
END pro_alt_prem_coll_adj;
/


--
-- PRO_ANF_LOAN_ADJUSTMENT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_anf_loan_adjustment wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
edf 4d0
xvgWJnxHvnB/mMdZ/UCv0GUT17Ewgz3quq4FfI4Zx6oCD2mjO9Xqst49HHEFa4jcbjHLyEmZ
+xJ1OVmO+bVKkJi32DsbLhWWoce8u7TBuegJL2CC+lC7nBfH+NJq5CO8EGXE/iSa32TQKK5k
EXs152MbR5SvaF0lRtO+lGyVtszYMWiA3n9Kl47VMsMKYEw4oTxUQYlaWZ0B8sZWs9SbgNJ/
PobiIvcp4rz6ftM+bRtYw+aDB6+hEVPd9HNx5zg+1IgtXTD3h6L1y65tf/RLZPECi/KRkdeR
YvSJlwQqCs9KfeZSbW71rh2atp8dG5FHWH+AwPNs8gv/kN4rxHEaCRrmNxsvfVmBiXfn3iXZ
p3yJZjnETYMcttXwBhydHWvs73vnoWxtshvbWmBU9QLqbqgxpmSv9Tk5lPd/qMYffdWeSuGu
XLoq3BEp3KkJ/iUfnIef45tVW4HPkb8iKGA4PMwvk4mRbvjKo5CAy0HGbXVqKg+gKLFRqS6G
AgwHZUevc3Puhobumdhwi9r9PBgp9tTxQBk7A82eI/i/DLhUN8iO/CCNsT4Zf3mtLXznvN6x
WsytgXIdPuIyQcJDkZXRZuo1ZkSEg3Xm8x9mYv6yWBseh0OUQlvNFZrCj2rgePdhQrFcqsjn
pBhWayrRDJAoYPFTCEHgq2NXUTnG3bEvBZSLV6hHCgeb1YXQeqEYTis5QTZOnRSdgQFVIX4c
QsmfIxjELiQF0B0otzV4DSdt4oO2CfZBl42BWWzV8lPyqrVXVSdL+j15XIRu0VHZHFYxr3WI
jZV/t60JVVQmRMZQJ4MDZ9pt7SmPiA8lcRoKqzMoGXnZhs/2j9xh/vUweRrqaonzNWu4a6zN
DuZeDPJE0FpIo+WAJ50NIs0cp/cqE9DmDp1yEAvUs3UJtm2iZJTsuVmrwJ4w4cViQL+EfUh3
i9tpxX3OkQ+nYoty+PHcN/VFlilHQSAs/36blg4xMCc8MVWGvHKKVs2ISXS0+VJ6bxByjRxN
e4MSn7q49RxfhMWEI7ClSLy60PNuRe3/rM1pcu0FpRIUz792y+MFjKDxSE+nhGrYELNIMy3r
R5hX/jkjPpZJPGGo/izUqsd/LP+solZiN61NWpkgL8uCqo97WqJ2gIPzl7V5D929E8SYmAfX
OeJEikBLw4AVTLJVkK4RV2TZ4TAmSF8JuLwVXcCT+Uj1JrtovKwbU4g/zh2zZqgc
/


--
-- PRO_ANF_LOAN_PAYABLE_INFO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_anf_loan_payable_info wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
3553 a84
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
/


--
-- PRO_API_SUMMARY_DATA_PREP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_api_summary_data_prep wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
2a26 991
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
/


--
-- PRO_ARREAR_PF  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.PRO_ARREAR_PF (
   P_EMP_GID       IN     HRM_EMPLOYEE.EMP_GID%TYPE,
   P_OFFICE_CD     IN     HRM_OFFICE.OFFICE_CD%TYPE,
   P_DESCENDANT    IN     VARCHAR2,
   P_SAL_DT_FROM   IN     DATE,
   P_SAL_DT_TO     IN     DATE,
   P_SALARY_DT     IN     DATE,
   P_IUSR          IN     VARCHAR2,
   P_ERROR            OUT VARCHAR2
)
IS
   V_CURR_BASIC    HRM_EMPLOYEE.CURR_BASIC%TYPE := 0;
   V_AEARN_AMT     NUMBER (10, 2) := 0;

   V_ADED_AMT      NUMBER (10, 2) := 0;
   V_PF            NUMBER (10, 2) := 0;

   V_PAYABLE_AMT   NUMBER (10, 2) := 0;


   CURSOR CUR_ARREAR_LIST
   IS
      SELECT   D.ARREAR_NO,
               S.EMP_GID,
               D.EARNING_AMT,
               S.SAL_PROCESS_NO,
               ROUND (NVL ( (D.EARNING_AMT * 5) / 100, 0)) DEDUCT
        FROM   SAL_SALARY_DETL D, SAL_SALARY_MST S, HRM_EMPLOYEE E
       WHERE       S.SAL_PROCESS_NO = D.SAL_PROCESS_NO
               AND D.HEAD_CD = '011'
               AND S.EMP_GID = E.EMP_GID
               AND E.SERVICE_CD = '02'
               AND S.SALARY_DT BETWEEN P_SAL_DT_FROM AND P_SAL_DT_TO
               AND EXISTS
                     (SELECT   1
                        FROM   SAL_ARREAR_MST
                       WHERE       ARREAR_NO = D.ARREAR_NO
                               AND STATUS = 0
                               AND EMP_GID = NVL (P_EMP_GID, S.EMP_GID))
               AND ( (NVL (P_DESCENDANT, 'N') = 'N'
                      AND E.OFFICE_CD = NVL (P_OFFICE_CD, E.OFFICE_CD))
                    OR (NVL (P_DESCENDANT, 'N') = 'Y'
                        AND E.OFFICE_CD IN
                                 (    SELECT   O.OFFICE_CD
                                        FROM   HRM_OFFICE_SETUP O
                                  START WITH   O.OFFICE_CD = P_OFFICE_CD
                                  CONNECT BY   PRIOR O.OFFICE_CD =
                                                  O.CONTROL_OFFICE_CD)));
BEGIN
   FOR i IN CUR_ARREAR_LIST
   LOOP
    

      UPDATE   SAL_SALARY_DETL
         SET   DEDUCTION_AMT = DEDUCTION_AMT + ROUND (NVL ( (I.EARNING_AMT * 5) / 100, 0))
       WHERE   HEAD_CD = '005'
               AND SALARY_DT BETWEEN P_SAL_DT_FROM AND P_SAL_DT_TO
               AND SAL_PROCESS_NO = I.SAL_PROCESS_NO;
               /* AND EXISTS
                     (SELECT   1
                        FROM   SAL_SALARY_DETL D, SAL_SALARY_MST S
                       WHERE       S.SAL_PROCESS_NO = D.SAL_PROCESS_NO
                               AND D.HEAD_CD = '005'
                               AND S.EMP_GID = I.EMP_GID); */



      UPDATE   SAL_SALARY_MST
         SET   NET_PAYABLE_AMT = NET_PAYABLE_AMT - I.DEDUCT
       WHERE   EMP_GID = I.EMP_GID
               AND SAL_PROCESS_NO = I.SAL_PROCESS_NO
               AND SALARY_DT BETWEEN P_SAL_DT_FROM AND P_SAL_DT_TO;

      UPDATE   SAL_ARREAR_MST
         SET   STATUS = 1
       WHERE   ARREAR_NO = I.ARREAR_NO
          AND EMP_GID = I.EMP_GID;

      COMMIT;
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      P_ERROR := 'Pro_Arrear: ' || SQLERRM;
END PRO_ARREAR_PF;
/


--
-- PRO_BANK_DEPOSIT_FOR_APPS_COLL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_bank_deposit_for_apps_coll (
   p_pgid                   VARCHAR2,
   p_receive_id             NUMBER,
   p_sl_no                  NUMBER,
   p_tran_dt                DATE,
   p_coll_amt               NUMBER,
   p_object_cd              VARCHAR2,
   p_user                   VARCHAR2,
   p_ins_tp_cd              NUMBER,
   p_coll_purpose           VARCHAR2,
   p_mobile_bank_cd         VARCHAR2,
   p_output_error     OUT   VARCHAR2
--- COLL_PURPOSE,1=First Premium Collection,2=Other Premium Collection
)
AS
   v_tran_id      VARCHAR2 (12);
   v_office_cd    hrm_office.office_cd%TYPE;
   v_acc_no       acc_gl_bank_acc_setup_mst.acc_no%TYPE;
   v_bank_cd      acc_bank.bank_cd%TYPE;
   v_br_cd        acc_branch.br_cd%TYPE;
   v_acc_tp       acc_gl_bank_acc_setup_mst.acc_tp%TYPE;
   v_glac_sl_no   acc_gl_coa.glac_sl_no%TYPE;
   v_voucher_no   VARCHAR2 (15);
   v_error        VARCHAR2 (200)                          := NULL;
BEGIN
   ----Bank clearance process
   BEGIN
      SELECT office_cd
        INTO v_office_cd
        FROM hrm_office
       WHERE off_catg_cd = '01';
   EXCEPTION
      WHEN OTHERS
      THEN
         v_office_cd := NULL;
         v_error := 'Head office is not defined!';
   END;

   IF v_office_cd IS NOT NULL
   THEN
      BEGIN
         SELECT m.acc_no, b.bank_cd, m.br_cd, m.acc_tp, m.glac_sl_no
           INTO v_acc_no, v_bank_cd, v_br_cd, v_acc_tp, v_glac_sl_no
           FROM acc_gl_bank_acc_setup_mst m,
                acc_gl_bank_acc_setup_dtl d,
                acc_branch b
          WHERE m.sl_no = d.sl_no
            AND d.object_cd = '03860'
            AND user_office_cd = v_office_cd
            AND acc_no = '99999'
            AND m.br_cd = b.br_cd;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_acc_no := NULL;
            v_error := 'Clearing Account Setup Not Found!';
      END;

      IF v_acc_no IS NOT NULL
      THEN
         SELECT    TO_CHAR (SYSDATE, 'rrmmdd')
                || LPAD (NVL ((MAX (SUBSTR (tran_id, 7)) + 1), 0), 6, '0')
           INTO v_tran_id
           FROM acc_bank_tran_mst;

         DECLARE
            recprem                pkg_gl_voucher.t_trans_tab;
            v_inter_off_st         CHAR (1)                            := '0';
            v_trans_item_payment   acc_gl_trans_item_info.trans_item_cd%TYPE;
            v_trans_item_deposit   acc_gl_trans_item_info.trans_item_cd%TYPE;
            v_narration            VARCHAR2 (200);
            v_voucher_cd           acc_voucher_type.vouch_cd%TYPE     := '06';
         BEGIN
            v_trans_item_payment := '1';

            SELECT DECODE (p_ins_tp_cd, '1', '95', '2', '114')
              INTO v_trans_item_deposit
              FROM DUAL;

            v_narration := 'Bank Deposit';
            recprem (1).trans_item_cd := v_trans_item_payment;
            recprem (1).glac_sl_no := v_glac_sl_no;
            recprem (1).post_amount := p_coll_amt;
            recprem (1).chq_tp := NULL;
            recprem (1).chq_no := NULL;
            recprem (1).chq_dt := NULL;
            recprem (2).trans_item_cd := v_trans_item_deposit;
            recprem (2).glac_sl_no := NULL;
            recprem (2).post_amount := v_glac_sl_no;
            recprem (2).chq_tp := NULL;
            recprem (2).chq_no := NULL;
            recprem (2).chq_dt := NULL;
            pkg_gl_voucher.pro_voucher_posting
                                            (p_table             => recprem,
                                             p_object_cd         => '03860',
                                             p_vouch_cd          => v_voucher_cd,
                                             p_inter_off_st      => v_inter_off_st,
                                             p_office_cd         => v_office_cd,
                                             p_trans_id          => v_tran_id,
                                             p_trans_date        => p_tran_dt,
                                             p_cost_center       => v_office_cd,
                                             p_narration         => v_narration,
                                             p_user              => p_user,
                                             p_ins_tp_cd         => p_ins_tp_cd,
                                             p_voucher_no        => v_voucher_no,
                                             p_error             => v_error
                                            );
         EXCEPTION
            WHEN OTHERS
            THEN
               v_error := SQLERRM;
         END;

         IF v_voucher_no IS NOT NULL
         THEN
            BEGIN
               INSERT INTO acc_bank_tran_mst
                           (tran_id, tran_dt, office_cd, tran_tp,
                            bank_acc_no, bank_cd, br_cd, voucher_no,
                            i_usr, i_dt, payment_tp, coll_dt_frm,
                            coll_dt_to, acc_glac_no, acc_tp, ins_tp_cd,
                            coll_purpose, tot_deposit_amt
                           )
                    VALUES (v_tran_id, p_tran_dt, v_office_cd, 'D',
                            v_acc_no, v_bank_cd, v_br_cd, v_voucher_no,
                            p_user, SYSDATE, '1', p_tran_dt,
                            p_tran_dt, v_glac_sl_no, v_acc_tp, p_ins_tp_cd,
                            p_coll_purpose, p_coll_amt
                           );

               INSERT INTO acc_bank_tran_dtl
                           (tran_id, sl_no, amount, i_usr, i_dt,
                            pgid, deposit_st, receive_id, slno,
                            coll_purpose, acc_tp
                           )
                    VALUES (v_tran_id, 1, p_coll_amt, p_user, SYSDATE,
                            p_pgid, '1', p_receive_id, p_sl_no,
                            p_coll_purpose, v_acc_tp
                           );
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_error :=
                      'Bank Clerance is not yet completed due to ' || SQLERRM;
            END;

            ----Process for actual Bank Deposit
            IF v_error IS NULL
            THEN
               v_acc_no := NULL;
               v_bank_cd := NULL;
               v_br_cd := NULL;
               v_acc_tp := NULL;
               v_glac_sl_no := NULL;
               v_tran_id := NULL;

               BEGIN
                  SELECT m.acc_no, b.bank_cd, m.br_cd, m.acc_tp, m.glac_sl_no
                    INTO v_acc_no, v_bank_cd, v_br_cd, v_acc_tp, v_glac_sl_no
                    FROM acc_gl_bank_acc_setup_mst m,
                         acc_gl_bank_acc_setup_dtl d,
                         acc_branch b
                   WHERE m.sl_no = d.sl_no
                     AND d.object_cd = p_object_cd
                     AND user_office_cd = v_office_cd
                     AND b.bank_cd = p_mobile_bank_cd
                     AND m.br_cd = b.br_cd;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_acc_no := NULL;
                     v_error := 'Bank Account Setup Not Found!';
               END;

               IF v_acc_no IS NOT NULL
               THEN
                  SELECT    TO_CHAR (SYSDATE, 'rrmmdd')
                         || LPAD (NVL ((MAX (SUBSTR (tran_id, 7)) + 1), 0),
                                  6,
                                  '0'
                                 )
                    INTO v_tran_id
                    FROM acc_bank_tran_actual;

                  DECLARE
                     recprem                pkg_gl_voucher.t_trans_tab;
                     v_inter_off_st         CHAR (1)                   := '0';
                     v_trans_item_payment   acc_gl_trans_item_info.trans_item_cd%TYPE;
                     v_trans_item_deposit   acc_gl_trans_item_info.trans_item_cd%TYPE;
                     v_narration            VARCHAR2 (200);
                     v_voucher_cd           acc_voucher_type.vouch_cd%TYPE
                                                                      := '06';
                  BEGIN
                     v_trans_item_payment := '1';

                     SELECT DECODE (p_ins_tp_cd, '1', '95', '2', '114')
                       INTO v_trans_item_deposit
                       FROM DUAL;

                     v_narration := 'Bank Deposit';
                     recprem (1).trans_item_cd := v_trans_item_payment;
                     recprem (1).glac_sl_no := NULL;
                     recprem (1).post_amount := p_coll_amt;
                     recprem (1).chq_tp := NULL;
                     recprem (1).chq_no := NULL;
                     recprem (1).chq_dt := NULL;
                     recprem (2).trans_item_cd := v_trans_item_deposit;
                     recprem (2).glac_sl_no := NULL;
                     recprem (2).post_amount := p_coll_amt;
                     recprem (2).chq_tp := NULL;
                     recprem (2).chq_no := NULL;
                     recprem (2).chq_dt := NULL;
                     pkg_gl_voucher.pro_voucher_posting
                                            (p_table             => recprem,
                                             p_object_cd         => p_object_cd,
                                             p_vouch_cd          => v_voucher_cd,
                                             p_inter_off_st      => v_inter_off_st,
                                             p_office_cd         => v_office_cd,
                                             p_trans_id          => v_tran_id,
                                             p_trans_date        => p_tran_dt,
                                             p_cost_center       => v_office_cd,
                                             p_narration         => v_narration,
                                             p_user              => p_user,
                                             p_ins_tp_cd         => p_ins_tp_cd,
                                             p_voucher_no        => v_voucher_no,
                                             p_error             => v_error
                                            );
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_error := SQLERRM;
                  END;

                  IF v_voucher_no IS NOT NULL
                  THEN
                     BEGIN
                        INSERT INTO acc_bank_tran_actual
                                    (tran_id, tran_dt, office_cd,
                                     acc_tp_cd, bank_acc_no, bank_cd, br_cd,
                                     deposit_amt, voucher_no, ins_tp_cd,
                                     deposit_tp, i_usr, i_dt
                                    )
                             VALUES (v_tran_id, p_tran_dt, v_office_cd,
                                     v_acc_tp, v_acc_no, v_bank_cd, v_br_cd,
                                     p_coll_amt, v_voucher_no, p_ins_tp_cd,
                                     '5', p_user, SYSDATE
                                    );
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           v_error :=
                                 'Bank Deposit is not yet completed due to '
                              || SQLERRM;
                     END;
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;
   END IF;

   p_output_error := v_error;
END;
/


--
-- PRO_BANK_RECONCILE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_bank_reconcile (
   p_trans_id            VARCHAR2,
   p_acc_no              VARCHAR2,
   p_recon_type          CHAR,
   p_stat_dt_frm         DATE,
   p_stat_dt_to          DATE,
   p_i_usr               VARCHAR2,
   p_i_dt                DATE,
   p_output        OUT   VARCHAR2
)
IS
   v_cheque_no   NUMBER (20) := NULL;
   v_sl_no       NUMBER      := 0;
BEGIN
   BEGIN
      FOR i IN
         (SELECT m.office_cd, m.vouch_no, d.sl_no,
                 TO_CHAR
                    ((TRIM
                         (REGEXP_REPLACE
                             (d.chq_no,
                              '[![:alpha:][:space:]-:=!,@#$%^&*()+_~`{}[]|\/?.>,<;"]',
                              ''
                             )
                         )
                     )
                    ) chq_no
            FROM acc_gl_trans_mst m,
                 acc_gl_trans_dtl d,
                 acc_gl_bank_acc_setup_mst s
           WHERE m.office_cd = d.office_cd
             AND m.vouch_no = d.vouch_no
             AND m.vouch_dt BETWEEN p_stat_dt_frm AND p_stat_dt_to
             AND d.glac_sl_no = s.glac_sl_no
             AND s.acc_no = p_acc_no
             AND d.chq_no IS NOT NULL
             AND d.cheque_no IS NULL)
      LOOP
         BEGIN
            v_cheque_no := TO_NUMBER (i.chq_no);

            UPDATE acc_gl_trans_dtl
               SET cheque_no = v_cheque_no
             WHERE office_cd = i.office_cd
               AND vouch_no = i.vouch_no
               AND sl_no = i.sl_no;

            IF v_sl_no = 100
            THEN
               COMMIT;
               v_sl_no := 0;
            ELSE
               v_sl_no := v_sl_no + 1;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               UPDATE acc_gl_trans_dtl
                  SET cheque_no = i.chq_no
                WHERE office_cd = i.office_cd
                  AND vouch_no = i.vouch_no
                  AND sl_no = i.sl_no;
         END;
      END LOOP;

      v_sl_no := 0;

      BEGIN
         FOR i IN
            (SELECT d.trans_id, d.sl_no, d.cheque_slip_no cheque_slip_no_act,
                    TO_CHAR
                       ((TRIM
                            (REGEXP_REPLACE
                                (d.cheque_slip_no,
                                 '[![:alpha:][:space:]-:=!,@#$%^&*()+_~`{}[]|\/?.>,<;"]',
                                 ''
                                )
                            )
                        )
                       ) cheque_slip_no
               FROM acc_bank_reconcile_dtl d
              WHERE d.trans_id = p_trans_id
                AND cheque_slip_no_pre IS NULL
                AND cheque_slip_no IS NOT NULL)
         LOOP
            UPDATE acc_bank_reconcile_dtl
               SET cheque_slip_no = i.cheque_slip_no,
                   cheque_slip_no_pre = i.cheque_slip_no_act
             WHERE trans_id = i.trans_id AND sl_no = i.sl_no;

            IF v_sl_no = 100
            THEN
               COMMIT;
               v_sl_no := 0;
            ELSE
               v_sl_no := v_sl_no + 1;
            END IF;
         END LOOP;

         COMMIT;
      END;
   END;

--For Withsrwal Account's reconciliation---
   IF p_recon_type = '2'
   THEN
      BEGIN
--'01 Cheque Issued but not Presented in the bank'--Withsrwal Account
         FOR i IN
            (SELECT a.vouch_dt, a.cheque_no chq_no, a.debit_amt,
                    a.credit_amt, a.cost_center_vr_no, a.narration
               FROM (SELECT vouch_dt, chq_no, cheque_no, debit_amt,
                            credit_amt, cost_center_vr_no, narration
                       FROM (SELECT m.vouch_dt, d.chq_no, d.cheque_no,
                                    DECODE (d.dr_cr,
                                            'D', d.trans_amt,
                                            'C', 0
                                           ) debit_amt,
                                    DECODE (d.dr_cr,
                                            'C', d.trans_amt,
                                            'D', 0
                                           ) credit_amt,
                                    m.cost_center_vr_no, m.narration
                               FROM acc_gl_trans_mst m,
                                    acc_gl_trans_dtl d,
                                    acc_gl_bank_acc_setup_mst s
                              WHERE m.office_cd = d.office_cd
                                AND m.vouch_no = d.vouch_no
                                AND m.vouch_dt BETWEEN p_stat_dt_frm
                                                   AND p_stat_dt_to
                                AND d.glac_sl_no = s.glac_sl_no
                                AND s.acc_no = p_acc_no
                                --AND d.chq_no IS NOT NULL
                                AND NVL (m.adjustment_st, '0') = '0'
                                AND d.dr_cr = 'C'
                             UNION ALL
                             SELECT s.trans_dt vouch_dt,
                                    s.cheque_slip_no chq_no,
                                    s.cheque_slip_no cheque_no,
                                    NVL (s.debit_amt, 0) debit_amt,
                                    NVL (s.credit_amt, 0) credit_amt,
                                    s.cost_center_vr_no, s.narration
                               FROM acc_bank_recon_summery s,
                                    acc_bank_reconcile_mst m
                              WHERE s.trans_id = m.trans_id
                                AND m.acc_no = p_acc_no
                                AND s.head_id IN ('01')
                                AND m.stat_dt_to =
                                       (SELECT MAX (stat_dt_to)
                                          FROM acc_bank_reconcile_mst
                                         WHERE acc_no = p_acc_no
                                           AND trans_id <> p_trans_id)) p
                      WHERE NOT EXISTS (
                               SELECT m.vouch_dt, d.chq_no, d.cheque_no,
                                      DECODE (d.dr_cr,
                                              'D', d.trans_amt,
                                              'C', 0
                                             ) debit_amt,
                                      DECODE (d.dr_cr,
                                              'C', d.trans_amt,
                                              'D', 0
                                             ) credit_amt,
                                      m.cost_center_vr_no, m.narration
                                 FROM acc_gl_trans_mst m,
                                      acc_gl_trans_dtl d,
                                      acc_gl_bank_acc_setup_mst s
                                WHERE m.office_cd = d.office_cd
                                  AND m.vouch_no = d.vouch_no
                                  AND m.vouch_dt BETWEEN p_stat_dt_frm
                                                     AND p_stat_dt_to
                                  AND d.glac_sl_no = s.glac_sl_no
                                  AND s.acc_no = p_acc_no
                                  --AND d.chq_no IS NOT NULL
                                  AND d.dr_cr = 'D'
                                  AND cheque_no = p.cheque_no
                                  AND   DECODE (d.dr_cr,
                                                'D', d.trans_amt,
                                                'C', 0
                                               )
                                      + DECODE (d.dr_cr,
                                                'C', d.trans_amt,
                                                'D', 0
                                               ) = p.debit_amt + p.credit_amt)) a
              WHERE NOT EXISTS (
                       SELECT 1
                         FROM acc_bank_reconcile_mst rm,
                              acc_bank_reconcile_dtl rd
                        WHERE rm.trans_id = rd.trans_id
                          AND rm.stat_dt_frm = p_stat_dt_frm
                          AND rm.stat_dt_to = p_stat_dt_to
                          AND rm.acc_no = p_acc_no
                          AND cheque_slip_no IS NOT NULL
                          AND cheque_slip_no = a.cheque_no
                          AND (debit_amt + credit_amt) =
                                                 (a.debit_amt + a.credit_amt
                                                 )))
         LOOP
            INSERT INTO acc_bank_recon_summery
                        (trans_id, head_id, trans_dt, trans_tp,
                         cheque_slip_no, particular, debit_amt, credit_amt,
                         i_usr, i_dt, cost_center_vr_no, narration
                        )
                 VALUES (p_trans_id, '01', i.vouch_dt, NULL,
                         i.chq_no, NULL, i.debit_amt, i.credit_amt,
                         p_i_usr, p_i_dt, i.cost_center_vr_no, i.narration
                        );
         END LOOP;
      END;

      --02    Fund Deposited but not posted in GL ----Withsrwal Account
      BEGIN
         FOR i IN
            (SELECT a.cheque_slip_no,
                    NVL (credit_amt, 0) - NVL (debit_amt, 0) amount
               FROM (SELECT   x.cheque_slip_no,
                              NVL (SUM (x.credit_amt), 0) credit_amt
                         FROM (SELECT NVL (d.cheque_slip_no,
                                           'CASH'
                                          ) cheque_slip_no,
                                      d.credit_amt
                                 FROM acc_bank_reconcile_mst m,
                                      acc_bank_reconcile_dtl d
                                WHERE m.trans_id = d.trans_id
                                  AND m.stat_dt_frm = p_stat_dt_frm
                                  AND m.stat_dt_to = p_stat_dt_to
                                  AND m.acc_no = p_acc_no
                                  AND d.cheque_slip_no IS NULL
                                  AND NVL (d.debit_amt, 0) = 0
                                  AND NVL (d.credit_amt, 0) > 0
                               UNION ALL
                               SELECT NVL (s.cheque_slip_no,
                                           'CASH'
                                          ) cheque_slip_no,
                                      s.credit_amt
                                 FROM acc_bank_recon_summery s,
                                      acc_bank_reconcile_mst m
                                WHERE s.trans_id = m.trans_id
                                  AND m.acc_no = p_acc_no
                                  AND s.head_id = '02'
                                  AND NVL (s.debit_amt, 0) = 0
                                  AND NVL (s.credit_amt, 0) > 0
                                  AND m.stat_dt_to =
                                         (SELECT MAX (stat_dt_to)
                                            FROM acc_bank_reconcile_mst
                                           WHERE acc_no = p_acc_no
                                             AND trans_id <> p_trans_id)) x
                     GROUP BY x.cheque_slip_no) a,
                    (SELECT   NVL (d.cheque_no, 'CASH') cheque_slip_no,
                              SUM (DECODE (d.dr_cr, 'D', d.trans_amt, 'C', 0)
                                  ) debit_amt
                         FROM acc_gl_trans_mst m,
                              acc_gl_trans_dtl d,
                              acc_gl_bank_acc_setup_mst s
                        WHERE m.office_cd = d.office_cd
                          AND m.vouch_no = d.vouch_no
                          AND m.vouch_dt BETWEEN p_stat_dt_frm AND p_stat_dt_to
                          AND d.glac_sl_no = s.glac_sl_no
                          AND s.acc_no = p_acc_no
                          --AND d.chq_no IS NULL
                          AND NVL (m.adjustment_st, '0') = '0'
                          AND d.dr_cr = 'D'
                          AND m.vouch_cd = '06'
                     GROUP BY NVL (d.cheque_no, 'CASH')) b
              WHERE a.cheque_slip_no = b.cheque_slip_no)
         LOOP
            INSERT INTO acc_bank_recon_summery
                        (trans_id, head_id, trans_dt, trans_tp,
                         cheque_slip_no, particular, debit_amt, credit_amt,
                         i_usr, i_dt
                        )
                 VALUES (p_trans_id, '02', p_stat_dt_to, NULL,
                         i.cheque_slip_no, NULL, 0, i.amount,
                         p_i_usr, p_i_dt
                        );
         END LOOP;
      END;

--03    Only Deposited by Bank ----Withsrwal Account
      BEGIN
         FOR i IN
            (SELECT   x.cheque_slip_no, x.particular,
                      SUM (x.credit_amt) credit_amt,
                      SUM (x.debit_amt) debit_amt
                 FROM (SELECT cheque_slip_no, particular, credit_amt,
                              debit_amt
                         FROM (SELECT NVL (rd.cheque_slip_no,
                                           'CASH'
                                          ) cheque_slip_no,
                                      rd.particular,
                                      NVL (rd.credit_amt, 0) credit_amt,
                                      NVL (rd.debit_amt, 0) debit_amt
                                 FROM acc_bank_reconcile_mst rm,
                                      acc_bank_reconcile_dtl rd
                                WHERE rm.trans_id = rd.trans_id
                                  AND rm.stat_dt_frm = p_stat_dt_frm
                                  AND rm.stat_dt_to = p_stat_dt_to
                                  AND rm.acc_no = p_acc_no
                                  AND NVL (rd.debit_amt, 0) > 0
                                  AND NVL (rd.credit_amt, 0) = 0
                               UNION ALL
                               SELECT NVL (s.cheque_slip_no,
                                           'CASH'
                                          ) cheque_slip_no,
                                      s.particular,
                                      NVL (s.credit_amt, 0) credit_amt,
                                      NVL (s.debit_amt, 0) debit_amt
                                 FROM acc_bank_recon_summery s,
                                      acc_bank_reconcile_mst m
                                WHERE s.trans_id = m.trans_id
                                  AND m.acc_no = p_acc_no
                                  AND (   (    s.head_id = ('03')
                                           AND NVL (s.debit_amt, 0) > 0
                                           AND NVL (s.credit_amt, 0) = 0
                                          )
                                       OR s.head_id = ('01')
                                      )
                                  AND m.stat_dt_to =
                                         (SELECT MAX (stat_dt_to)
                                            FROM acc_bank_reconcile_mst
                                           WHERE acc_no = p_acc_no
                                             AND trans_id <> p_trans_id)) p
                        WHERE EXISTS (
                                 SELECT 1
                                   FROM (SELECT   cheque_slip_no
                                             FROM (SELECT NVL
                                                             (rd.cheque_slip_no,
                                                              'CASH'
                                                             ) cheque_slip_no,
                                                          rd.particular,
                                                          NVL
                                                             (rd.credit_amt,
                                                              0
                                                             ) credit_amt,
                                                          NVL
                                                             (rd.debit_amt,
                                                              0
                                                             ) debit_amt
                                                     FROM acc_bank_reconcile_mst rm,
                                                          acc_bank_reconcile_dtl rd
                                                    WHERE rm.trans_id =
                                                                   rd.trans_id
                                                      AND rm.stat_dt_frm =
                                                                 p_stat_dt_frm
                                                      AND rm.stat_dt_to =
                                                                  p_stat_dt_to
                                                      AND rm.acc_no = p_acc_no
                                                      AND NVL (rd.debit_amt,
                                                               0) > 0
                                                      AND NVL (rd.credit_amt,
                                                               0
                                                              ) = 0
                                                   UNION ALL
                                                   SELECT NVL
                                                             (s.cheque_slip_no,
                                                              'CASH'
                                                             ) cheque_slip_no,
                                                          s.particular,
                                                          NVL
                                                             (s.credit_amt,
                                                              0
                                                             ) credit_amt,
                                                          NVL
                                                             (s.debit_amt,
                                                              0
                                                             ) debit_amt
                                                     FROM acc_bank_recon_summery s,
                                                          acc_bank_reconcile_mst m
                                                    WHERE s.trans_id =
                                                                    m.trans_id
                                                      AND m.acc_no = p_acc_no
                                                      AND (   (    s.head_id =
                                                                       ('03')
                                                               AND NVL
                                                                      (s.debit_amt,
                                                                       0
                                                                      ) > 0
                                                               AND NVL
                                                                      (s.credit_amt,
                                                                       0
                                                                      ) = 0
                                                              )
                                                           OR s.head_id =
                                                                       ('01')
                                                          )
                                                      AND m.stat_dt_to =
                                                             (SELECT MAX
                                                                        (stat_dt_to
                                                                        )
                                                                FROM acc_bank_reconcile_mst
                                                               WHERE acc_no =
                                                                        p_acc_no
                                                                 AND trans_id <>
                                                                        p_trans_id))
                                         GROUP BY cheque_slip_no
                                           HAVING SUM (debit_amt) <>
                                                              SUM (credit_amt))
                                  WHERE cheque_slip_no = p.cheque_slip_no)) x
                WHERE NOT EXISTS (
                         SELECT 1
                           FROM acc_gl_trans_mst m,
                                acc_gl_trans_dtl d,
                                acc_gl_bank_acc_setup_mst s
                          WHERE m.office_cd = d.office_cd
                            AND m.vouch_no = d.vouch_no
                            AND m.vouch_dt BETWEEN p_stat_dt_frm AND p_stat_dt_to
                            AND d.glac_sl_no = s.glac_sl_no
                            AND s.acc_no = p_acc_no
                            AND cheque_no = x.cheque_slip_no
                            AND   DECODE (d.dr_cr, 'D', d.trans_amt, 'C', 0)
                                + DECODE (d.dr_cr, 'C', d.trans_amt, 'D', 0) =
                                                    x.credit_amt + x.debit_amt)
                  AND debit_amt > 0
             GROUP BY x.cheque_slip_no, x.particular)
         LOOP
            INSERT INTO acc_bank_recon_summery
                        (trans_id, head_id, trans_dt, trans_tp,
                         cheque_slip_no, particular, debit_amt,
                         credit_amt, i_usr, i_dt
                        )
                 VALUES (p_trans_id, '03', p_stat_dt_to, NULL,
                         i.cheque_slip_no, i.particular, i.debit_amt,
                         i.credit_amt, p_i_usr, p_i_dt
                        );
         END LOOP;
      END;

      --Upto above is tested

      --08    Fund transferred but not Credited by bank --Withsrwal Account
      BEGIN
         FOR i IN
            (SELECT x.vouch_dt, x.cheque_no chq_no, x.debit_amt,
                    x.credit_amt, x.cost_center_vr_no, x.narration
               FROM (SELECT vouch_dt, chq_no, cheque_no, debit_amt,
                            credit_amt, cost_center_vr_no, narration
                       FROM (SELECT m.vouch_dt, d.chq_no, d.cheque_no,
                                    DECODE (d.dr_cr,
                                            'D', d.trans_amt,
                                            'C', 0
                                           ) debit_amt,
                                    DECODE (d.dr_cr,
                                            'C', d.trans_amt,
                                            'D', 0
                                           ) credit_amt,
                                    m.cost_center_vr_no, m.narration
                               FROM acc_gl_trans_mst m,
                                    acc_gl_trans_dtl d,
                                    acc_gl_bank_acc_setup_mst s
                              WHERE m.office_cd = d.office_cd
                                AND m.vouch_no = d.vouch_no
                                AND m.vouch_dt BETWEEN p_stat_dt_frm
                                                   AND p_stat_dt_to
                                AND d.glac_sl_no = s.glac_sl_no
                                AND s.acc_no = p_acc_no
                                AND d.chq_no IS NOT NULL
                                AND m.vouch_cd <> '05'
                                AND DECODE (d.dr_cr,
                                            'D', d.trans_amt,
                                            'C', 0
                                           ) > 0
                             --AND d.chq_no = '5018198'
                             UNION ALL
                             SELECT s.trans_dt vouch_dt,
                                    s.cheque_slip_no chq_no,
                                    s.cheque_slip_no cheque_no,
                                    s.debit_amt debit_amt,
                                    s.credit_amt credit_amt,
                                    s.cost_center_vr_no, s.narration
                               FROM acc_bank_recon_summery s,
                                    acc_bank_reconcile_mst m
                              WHERE s.trans_id = m.trans_id
                                AND m.acc_no = p_acc_no
                                AND s.head_id = '08'
                                --Below part is omitted on 05/01/2021 for checking the reconcillitation for account number 11231500000003 for period of 01-jul-2020 to 30-sep-2020
                                                    /*AND s.head_id IN
                                                                 ('08', '01')*/
                                AND NVL (s.debit_amt, 0) = 0
                                AND NVL (s.credit_amt, 0) > 0
                                AND m.stat_dt_to =
                                       (SELECT MAX (stat_dt_to)
                                          FROM acc_bank_reconcile_mst
                                         WHERE acc_no = p_acc_no
                                           AND trans_id <> p_trans_id)
                                                                      --AND s.cheque_slip_no = '5018198'
                            ) p
                      WHERE EXISTS (
                               SELECT 1
                                 FROM (SELECT   chq_no, cheque_no
                                           FROM (SELECT d.chq_no, d.cheque_no,
                                                        DECODE
                                                           (d.dr_cr,
                                                            'D', d.trans_amt,
                                                            'C', 0
                                                           ) debit_amt,
                                                        DECODE
                                                           (d.dr_cr,
                                                            'C', d.trans_amt,
                                                            'D', 0
                                                           ) credit_amt
                                                   FROM acc_gl_trans_mst m,
                                                        acc_gl_trans_dtl d,
                                                        acc_gl_bank_acc_setup_mst s
                                                  WHERE m.office_cd =
                                                                   d.office_cd
                                                    AND m.vouch_no =
                                                                    d.vouch_no
                                                    AND m.vouch_dt
                                                           BETWEEN p_stat_dt_frm
                                                               AND p_stat_dt_to
                                                    AND d.glac_sl_no =
                                                                  s.glac_sl_no
                                                    AND s.acc_no = p_acc_no
                                                    AND d.chq_no IS NOT NULL
                                                    AND m.vouch_cd <> '05'
                                                    AND DECODE (d.dr_cr,
                                                                'D', d.trans_amt,
                                                                'C', 0
                                                               ) > 0
                                                 --AND d.chq_no = '5018198'
                                                 UNION ALL
                                                 SELECT s.cheque_slip_no
                                                                       chq_no,
                                                        s.cheque_slip_no
                                                                    cheque_no,
                                                        s.debit_amt debit_amt,
                                                        s.credit_amt
                                                                   credit_amt
                                                   FROM acc_bank_recon_summery s,
                                                        acc_bank_reconcile_mst m
                                                  WHERE s.trans_id =
                                                                    m.trans_id
                                                    AND m.acc_no = p_acc_no
                                                    AND s.head_id = '08'
                                                    --Below part is omitted on 05/01/2021 for checking the reconcillitation for account number 11231500000003 for period of 01-jul-2020 to 30-sep-2020
                                                    /*AND s.head_id IN
                                                                 ('08', '01')*/
                                                    AND NVL (s.debit_amt, 0) =
                                                                             0
                                                    AND NVL (s.credit_amt, 0) >
                                                                             0
                                                    AND m.stat_dt_to =
                                                           (SELECT MAX
                                                                      (stat_dt_to
                                                                      )
                                                              FROM acc_bank_reconcile_mst
                                                             WHERE acc_no =
                                                                      p_acc_no
                                                               AND trans_id <>
                                                                      p_trans_id)
                                                                                 --AND s.cheque_slip_no = '5018198'
                                                )
                                       GROUP BY chq_no, cheque_no
                                         HAVING SUM (debit_amt) <>
                                                              SUM (credit_amt))
                                WHERE cheque_no = p.cheque_no)) x
              WHERE NOT EXISTS (
                       SELECT 1
                         FROM acc_bank_reconcile_mst rm,
                              acc_bank_reconcile_dtl rd
                        WHERE rm.trans_id = rd.trans_id
                          AND rm.stat_dt_frm = p_stat_dt_frm
                          AND rm.stat_dt_to = p_stat_dt_to
                          AND rm.acc_no = p_acc_no
                          AND NVL (rd.debit_amt, 0) > 0
                          AND NVL (rd.credit_amt, 0) = 0
                          AND cheque_slip_no = x.cheque_no
                          AND (debit_amt + credit_amt) =
                                                 (x.debit_amt + x.credit_amt
                                                 )))
         LOOP
            INSERT INTO acc_bank_recon_summery
                        (trans_id, head_id, trans_dt, trans_tp,
                         cheque_slip_no, particular, debit_amt, credit_amt,
                         i_usr, i_dt
                        )
                 VALUES (p_trans_id, '08', i.vouch_dt, NULL,
                         i.chq_no, NULL, i.debit_amt, i.credit_amt,
                         p_i_usr, p_i_dt
                        );
         END LOOP;
      END;
   --For Collection Account's reconciliation---
   ELSIF p_recon_type = '1'
   THEN
--04    Only Credited  by Bank --Collection Account
      BEGIN
         DECLARE
            v_count   NUMBER := 1;
         BEGIN
            DELETE FROM acc_bank_recon_bank;

            FOR i IN (SELECT rd.trans_dt, 
                                          --NVL (rd.cheque_slip_no, 'CASH') cheque_slip_no,
                             'CASH' cheque_slip_no, rd.particular,
                             NVL (rd.credit_amt, 0) credit_amt,
                             NVL (rd.debit_amt, 0) debit_amt, NULL narration,
                             NULL cost_center_vr_no
                        FROM acc_bank_reconcile_mst rm,
                             acc_bank_reconcile_dtl rd
                       WHERE rm.trans_id = rd.trans_id
                         AND rm.stat_dt_frm = p_stat_dt_frm
                         AND rm.stat_dt_to = p_stat_dt_to
                         AND rm.acc_no = p_acc_no
                         AND rd.trans_tp = '04'
                         AND NVL (rd.debit_amt, 0) = 0
                         AND NVL (rd.credit_amt, 0) > 0
                      UNION ALL
                      SELECT trans_dt, 
                                       --NVL (s.cheque_slip_no, 'CASH') cheque_slip_no,
                             'CASH' cheque_slip_no, s.particular,
                             NVL (s.credit_amt, 0) credit_amt,
                             NVL (s.debit_amt, 0) debit_amt, s.narration,
                             s.cost_center_vr_no
                        FROM acc_bank_recon_summery s,
                             acc_bank_reconcile_mst m
                       WHERE s.trans_id = m.trans_id
                         AND m.acc_no = p_acc_no
                         AND s.head_id = '04'
                         AND NVL (s.debit_amt, 0) = 0
                         AND NVL (s.credit_amt, 0) > 0
                         AND m.stat_dt_to =
                                (SELECT MAX (stat_dt_to)
                                   FROM acc_bank_reconcile_mst
                                  WHERE acc_no = p_acc_no
                                    AND trans_id <> p_trans_id))
            LOOP
               INSERT INTO acc_bank_recon_bank
                           (sl_no, trans_id, head_id, trans_dt, trans_tp,
                            cheque_slip_no, particular, debit_amt,
                            credit_amt, cost_center_vr_no, narration,
                            matched_flag
                           )
                    VALUES (v_count, p_trans_id, '04', i.trans_dt, NULL,
                            i.cheque_slip_no, i.particular, i.debit_amt,
                            i.credit_amt, i.cost_center_vr_no, i.narration,
                            '0'
                           );

               v_count := v_count + 1;
            END LOOP;
         END;

         DECLARE
            v_count   NUMBER := 1;
         BEGIN
            DELETE FROM acc_bank_recon_ledger;

            FOR i IN (SELECT vouch_dt trans_dt, 
                                                --NVL (d.cheque_no, 'CASH') cheque_slip_no,
                             'CASH' cheque_slip_no, NULL particular,
                             DECODE (d.dr_cr,
                                     'C', NVL (d.trans_amt, 0),
                                     0
                                    ) credit_amt,
                             DECODE (d.dr_cr,
                                     'D', NVL (d.trans_amt, 0),
                                     0
                                    ) debit_amt,
                             m.narration, m.cost_center_vr_no
                        FROM acc_gl_trans_mst m,
                             acc_gl_trans_dtl d,
                             acc_gl_bank_acc_setup_mst s
                       WHERE m.office_cd = d.office_cd
                         AND m.vouch_no = d.vouch_no
                         AND m.vouch_dt BETWEEN p_stat_dt_frm AND p_stat_dt_to
                         AND d.glac_sl_no = s.glac_sl_no
                         AND s.acc_no = p_acc_no
                         AND DECODE (d.dr_cr, 'D', NVL (d.trans_amt, 0), 0) >
                                                                             0)
            LOOP
               INSERT INTO acc_bank_recon_ledger
                           (sl_no, trans_id, head_id, trans_dt, trans_tp,
                            cheque_slip_no, particular, debit_amt,
                            credit_amt, cost_center_vr_no, narration,
                            matched_flag
                           )
                    VALUES (v_count, p_trans_id, '04', i.trans_dt, NULL,
                            i.cheque_slip_no, i.particular, i.debit_amt,
                            i.credit_amt, i.cost_center_vr_no, i.narration,
                            '0'
                           );

               v_count := v_count + 1;
            END LOOP;
         END;

---Finding the unmatched record
         DECLARE
            CURSOR cur_matched
            IS
               (SELECT CASE
                          WHEN (a.b_no_record - b.l_no_record
                               ) >= 0
                             THEN   a.b_no_record
                                  - (a.b_no_record - b.l_no_record)
                          ELSE a.b_no_record
                       END matched_record,
                       a.b_no_record, a.b_amt, a.b_trans_dt,
                       a.b_cheque_slip_no, b.l_no_record, b.l_amt,
                       b.l_trans_dt, b.l_cheque_slip_no
                  FROM (SELECT   COUNT (sl_no) b_no_record,
                                 (debit_amt + credit_amt) b_amt,
                                 trans_dt b_trans_dt, 
--                                 NVL (cheque_slip_no,
--                                      'CASH') b_cheque_slip_no
                                 'CASH' b_cheque_slip_no
                            FROM acc_bank_recon_bank
                           WHERE matched_flag = '0'
                        GROUP BY (debit_amt + credit_amt), trans_dt
                        --,                                 NVL (cheque_slip_no, 'CASH')
                        ORDER BY (debit_amt + credit_amt), trans_dt
                                                                   --,                                 NVL (cheque_slip_no, 'CASH')
                       ) a,
                       (SELECT   COUNT (sl_no) l_no_record,
                                 (debit_amt + credit_amt) l_amt,
                                 trans_dt l_trans_dt, 
--                                 NVL (cheque_slip_no,
--                                      'CASH') l_cheque_slip_no
                                 'CASH' l_cheque_slip_no
                            FROM acc_bank_recon_ledger
                           WHERE matched_flag = '0'
                        GROUP BY (debit_amt + credit_amt), trans_dt
                        --,                             NVL (cheque_slip_no, 'CASH')
                        ORDER BY (debit_amt + credit_amt), trans_dt
                                                                   --,                                 NVL (cheque_slip_no, 'CASH')
                       ) b
                 WHERE a.b_amt = b.l_amt
                   AND a.b_trans_dt = b.l_trans_dt
                   AND a.b_cheque_slip_no = b.l_cheque_slip_no);

            CURSOR cur_bank
            IS
               (SELECT *
                  FROM (SELECT   sl_no, trans_dt, 
                                                  --NVL (cheque_slip_no, 'CASH') cheque_slip_no,
                                 'CASH' cheque_slip_no,
                                 (debit_amt + credit_amt) amount
                            FROM acc_bank_recon_bank
                           WHERE matched_flag = '0'
                        ORDER BY (debit_amt + credit_amt), trans_dt));

            CURSOR cur_ledger
            IS
               (SELECT *
                  FROM (SELECT   sl_no, trans_dt, 
                                                  --NVL (cheque_slip_no, 'CASH') cheque_slip_no,
                                 'CASH' cheque_slip_no,
                                 (debit_amt + credit_amt) amount
                            FROM acc_bank_recon_ledger
                           WHERE matched_flag = '0'
                        ORDER BY (debit_amt + credit_amt), trans_dt));

            c_rec        cur_matched%ROWTYPE;
            c_rec_bank   cur_bank%ROWTYPE;
            c_rec_led    cur_ledger%ROWTYPE;
            v_count      NUMBER                := 0;
         BEGIN
            --For Date and amount wise cross checking
            OPEN cur_matched;

            LOOP
               FETCH cur_matched
                INTO c_rec;

               EXIT WHEN cur_matched%NOTFOUND;

               UPDATE acc_bank_recon_bank
                  SET matched_flag = '1'
                WHERE sl_no IN (
                         SELECT sl_no
                           FROM acc_bank_recon_bank
                          WHERE (debit_amt + credit_amt) = c_rec.b_amt
                            AND trans_dt = c_rec.b_trans_dt
--                            AND NVL (cheque_slip_no, 'CASH') =
--                                                        c_rec.b_cheque_slip_no
                            AND ROWNUM <= c_rec.matched_record);

               UPDATE acc_bank_recon_ledger
                  SET matched_flag = '1'
                WHERE sl_no IN (
                         SELECT sl_no
                           FROM acc_bank_recon_ledger
                          WHERE (debit_amt + credit_amt) = c_rec.l_amt
                            AND trans_dt = c_rec.l_trans_dt
--                            AND NVL (cheque_slip_no, 'CASH') =
--                                                        c_rec.l_cheque_slip_no
                            AND ROWNUM <= c_rec.matched_record);
            END LOOP;

            CLOSE cur_matched;

            --For amount wise cross checking
            OPEN cur_bank;

            LOOP
               v_count := 0;

               FETCH cur_bank
                INTO c_rec_bank;

               EXIT WHEN cur_bank%NOTFOUND;

               OPEN cur_ledger;

               LOOP
                  FETCH cur_ledger
                   INTO c_rec_led;

                  EXIT WHEN cur_ledger%NOTFOUND;

                  IF     c_rec_bank.cheque_slip_no = c_rec_led.cheque_slip_no
                     AND c_rec_bank.amount = c_rec_led.amount
                  THEN
                     v_count := 0;

                     SELECT COUNT (1)
                       INTO v_count
                       FROM acc_bank_recon_ledger
                      WHERE sl_no = c_rec_led.sl_no AND matched_flag = '0';

                     IF v_count > 0
                     THEN
                        UPDATE acc_bank_recon_bank
                           SET matched_flag = '1'
                         WHERE sl_no = c_rec_bank.sl_no;

                        UPDATE acc_bank_recon_ledger
                           SET matched_flag = '1'
                         WHERE sl_no = c_rec_led.sl_no;

                        EXIT;
                     END IF;
                  END IF;
               END LOOP;

               CLOSE cur_ledger;
            END LOOP;

            CLOSE cur_bank;
         END;

         INSERT INTO acc_bank_recon_summery
                     (trans_id, head_id, trans_dt, trans_tp, cheque_slip_no,
                      particular, debit_amt, credit_amt, cost_center_vr_no,
                      narration, i_usr, i_dt)
            SELECT trans_id, head_id, trans_dt, trans_tp, cheque_slip_no,
                   particular, debit_amt, credit_amt, cost_center_vr_no,
                   narration, p_i_usr, p_i_dt
              FROM acc_bank_recon_bank
             WHERE matched_flag = '0';

         DELETE FROM acc_bank_recon_ledger;

         DELETE FROM acc_bank_recon_bank;
      END;

      --05    Fund transferred but not debited by bank --Collection Account
      BEGIN
         DECLARE
            v_count   NUMBER := 1;
         BEGIN
            DELETE FROM acc_bank_recon_bank;

            FOR i IN (SELECT rd.trans_dt, 
--                             NVL (rd.cheque_slip_no, 'CASH') cheque_slip_no,
                             'CASH' cheque_slip_no, rd.particular,
                             NVL (rd.credit_amt, 0) credit_amt,
                             NVL (rd.debit_amt, 0) debit_amt, NULL narration,
                             NULL cost_center_vr_no
                        FROM acc_bank_reconcile_mst rm,
                             acc_bank_reconcile_dtl rd
                       WHERE rm.trans_id = rd.trans_id
                         AND rm.stat_dt_frm = p_stat_dt_frm
                         AND rm.stat_dt_to = p_stat_dt_to
                         AND rm.acc_no = p_acc_no
                         AND NVL (rd.debit_amt, 0) > 0
                         AND NVL (rd.credit_amt, 0) = 0)
            LOOP
               INSERT INTO acc_bank_recon_bank
                           (sl_no, trans_id, head_id, trans_dt, trans_tp,
                            cheque_slip_no, particular, debit_amt,
                            credit_amt, cost_center_vr_no, narration,
                            matched_flag
                           )
                    VALUES (v_count, p_trans_id, '05', i.trans_dt, NULL,
                            i.cheque_slip_no, i.particular, i.debit_amt,
                            i.credit_amt, i.cost_center_vr_no, i.narration,
                            '0'
                           );

               v_count := v_count + 1;
            END LOOP;
         END;

         DECLARE
            v_count   NUMBER := 1;
         BEGIN
            DELETE FROM acc_bank_recon_ledger;

            FOR i IN
               (SELECT vouch_dt trans_dt, 
                                          --NVL (d.cheque_no, 'CASH') cheque_slip_no,
                       'CASH' cheque_slip_no, NULL particular,
                       DECODE (d.dr_cr,
                               'C', NVL (d.trans_amt, 0),
                               0
                              ) credit_amt,
                       DECODE (d.dr_cr,
                               'D', NVL (d.trans_amt, 0),
                               0
                              ) debit_amt,
                       m.narration, m.cost_center_vr_no
                  FROM acc_gl_trans_mst m,
                       acc_gl_trans_dtl d,
                       acc_gl_bank_acc_setup_mst s
                 WHERE m.office_cd = d.office_cd
                   AND m.vouch_no = d.vouch_no
                   AND m.vouch_dt BETWEEN p_stat_dt_frm AND p_stat_dt_to
                   AND d.glac_sl_no = s.glac_sl_no
                   AND s.acc_no = p_acc_no
                   AND DECODE (d.dr_cr, 'C', d.trans_amt, 'D', 0) > 0
                   AND NVL (narration, 'X') NOT LIKE 'Invalid%'
                   AND NOT EXISTS (
                          SELECT 1
                            FROM acc_gl_trans_mst
                           WHERE source_vouch_no = m.vouch_no
                             AND vouch_dt BETWEEN p_stat_dt_frm AND p_stat_dt_to)
                UNION ALL
                SELECT s.trans_dt, 
                                   --NVL (s.cheque_slip_no, 'CASH') cheque_slip_no,
                       'CASH' cheque_slip_no, s.particular,
                       NVL (s.credit_amt, 0) credit_amt,
                       NVL (s.debit_amt, 0) debit_amt, NULL narration,
                       NULL cost_center_vr_no
                  FROM acc_bank_recon_summery s, acc_bank_reconcile_mst m
                 WHERE s.trans_id = m.trans_id
                   AND m.acc_no = p_acc_no
                   AND s.head_id = '05'
                   AND m.stat_dt_to =
                          (SELECT MAX (stat_dt_to)
                             FROM acc_bank_reconcile_mst
                            WHERE acc_no = p_acc_no AND trans_id <> p_trans_id))
            LOOP
               INSERT INTO acc_bank_recon_ledger
                           (sl_no, trans_id, head_id, trans_dt, trans_tp,
                            cheque_slip_no, particular, debit_amt,
                            credit_amt, cost_center_vr_no, narration,
                            matched_flag
                           )
                    VALUES (v_count, p_trans_id, '05', i.trans_dt, NULL,
                            i.cheque_slip_no, i.particular, i.debit_amt,
                            i.credit_amt, i.cost_center_vr_no, i.narration,
                            '0'
                           );

               v_count := v_count + 1;
            END LOOP;
         END;

---Finding the unmatched record
         DECLARE
            CURSOR cur_matched
            IS
               (SELECT CASE
                          WHEN (a.b_no_record - b.l_no_record
                               ) >= 0
                             THEN   a.b_no_record
                                  - (a.b_no_record - b.l_no_record)
                          ELSE a.b_no_record
                       END matched_record,
                       a.b_no_record, a.b_amt, a.b_trans_dt,
                       a.b_cheque_slip_no, b.l_no_record, b.l_amt,
                       b.l_trans_dt, b.l_cheque_slip_no
                  FROM (SELECT   COUNT (sl_no) b_no_record,
                                 (debit_amt + credit_amt) b_amt,
                                 trans_dt b_trans_dt, 
--                                 NVL (cheque_slip_no,
--                                      'CASH') b_cheque_slip_no
                                 'CASH' b_cheque_slip_no
                            FROM acc_bank_recon_ledger
                           WHERE matched_flag = '0'
                        GROUP BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                        ORDER BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                       ) a,
                       (SELECT   COUNT (sl_no) l_no_record,
                                 (debit_amt + credit_amt) l_amt,
                                 trans_dt l_trans_dt, 
--                                 NVL (cheque_slip_no,
--                                      'CASH') l_cheque_slip_no
                                 'CASH' l_cheque_slip_no
                            FROM acc_bank_recon_bank
                           WHERE matched_flag = '0'
                        GROUP BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                        ORDER BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                       ) b
                 WHERE a.b_amt = b.l_amt
                   AND a.b_trans_dt = b.l_trans_dt
                   AND a.b_cheque_slip_no = b.l_cheque_slip_no);

            CURSOR cur_bank
            IS
               (SELECT *
                  FROM (SELECT   sl_no, trans_dt, 
                                                  --NVL (cheque_slip_no, 'CASH') cheque_slip_no,
                                 'CASH' cheque_slip_no,
                                 (debit_amt + credit_amt) amount
                            FROM acc_bank_recon_bank
                           WHERE matched_flag = '0'
                        ORDER BY (debit_amt + credit_amt), trans_dt));

            CURSOR cur_ledger
            IS
               (SELECT *
                  FROM (SELECT   sl_no, trans_dt, 
                                                  --NVL (cheque_slip_no, 'CASH') cheque_slip_no,
                                 'CASH' cheque_slip_no,
                                 (debit_amt + credit_amt) amount
                            FROM acc_bank_recon_ledger
                           WHERE matched_flag = '0'
                        ORDER BY (debit_amt + credit_amt), trans_dt));

            c_rec        cur_matched%ROWTYPE;
            c_rec_bank   cur_bank%ROWTYPE;
            c_rec_led    cur_ledger%ROWTYPE;
            v_count      NUMBER                := 0;
         BEGIN
            --For Date and amount wise cross checking
            OPEN cur_matched;

            LOOP
               FETCH cur_matched
                INTO c_rec;

               EXIT WHEN cur_matched%NOTFOUND;

               UPDATE acc_bank_recon_ledger
                  SET matched_flag = '1'
                WHERE sl_no IN (
                         SELECT sl_no
                           FROM acc_bank_recon_ledger
                          WHERE (debit_amt + credit_amt) = c_rec.b_amt
                            AND trans_dt = c_rec.b_trans_dt
--                            AND NVL (cheque_slip_no, 'CASH') =
--                                                        c_rec.b_cheque_slip_no
                            AND ROWNUM <= c_rec.matched_record);

               UPDATE acc_bank_recon_bank
                  SET matched_flag = '1'
                WHERE sl_no IN (
                         SELECT sl_no
                           FROM acc_bank_recon_bank
                          WHERE (debit_amt + credit_amt) = c_rec.l_amt
                            AND trans_dt = c_rec.l_trans_dt
--                            AND NVL (cheque_slip_no, 'CASH') =
--                                                        c_rec.l_cheque_slip_no
                            AND ROWNUM <= c_rec.matched_record);
            END LOOP;

            CLOSE cur_matched;

            --For amount wise cross checking
            OPEN cur_bank;

            LOOP
               v_count := 0;

               FETCH cur_bank
                INTO c_rec_bank;

               EXIT WHEN cur_bank%NOTFOUND;

               OPEN cur_ledger;

               LOOP
                  FETCH cur_ledger
                   INTO c_rec_led;

                  EXIT WHEN cur_ledger%NOTFOUND;

                  IF     c_rec_bank.cheque_slip_no = c_rec_led.cheque_slip_no
                     AND c_rec_bank.amount = c_rec_led.amount
                  THEN
                     v_count := 0;

                     SELECT COUNT (1)
                       INTO v_count
                       FROM acc_bank_recon_bank
                      WHERE sl_no = c_rec_bank.sl_no AND matched_flag = '0';

                     IF v_count > 0
                     THEN
                        UPDATE acc_bank_recon_ledger
                           SET matched_flag = '1'
                         WHERE sl_no = c_rec_led.sl_no;

                        UPDATE acc_bank_recon_bank
                           SET matched_flag = '1'
                         WHERE sl_no = c_rec_bank.sl_no;

                        EXIT;
                     END IF;
                  END IF;
               END LOOP;

               CLOSE cur_ledger;
            END LOOP;

            CLOSE cur_bank;
         END;

         INSERT INTO acc_bank_recon_summery
                     (trans_id, head_id, trans_dt, trans_tp, cheque_slip_no,
                      particular, debit_amt, credit_amt, cost_center_vr_no,
                      narration, i_usr, i_dt)
            SELECT trans_id, head_id, trans_dt, trans_tp, cheque_slip_no,
                   particular, debit_amt, credit_amt, cost_center_vr_no,
                   narration, p_i_usr, p_i_dt
              FROM acc_bank_recon_ledger
             WHERE matched_flag = '0';

         DELETE FROM acc_bank_recon_ledger;

         DELETE FROM acc_bank_recon_bank;
      END;

      --06    Amount Deposited but not credited by bank --Collection Account
      BEGIN
         DECLARE
            v_count   NUMBER := 1;
         BEGIN
            DELETE FROM acc_bank_recon_bank;

            FOR i IN (SELECT rd.trans_dt, 
                                          --NVL (rd.cheque_slip_no, 'CASH') cheque_slip_no,
                             'CASH' cheque_slip_no, rd.particular,
                             NVL (rd.credit_amt, 0) credit_amt,
                             NVL (rd.debit_amt, 0) debit_amt, NULL narration,
                             NULL cost_center_vr_no
                        FROM acc_bank_reconcile_mst rm,
                             acc_bank_reconcile_dtl rd
                       WHERE rm.trans_id = rd.trans_id
                         AND rm.stat_dt_frm = p_stat_dt_frm
                         AND rm.stat_dt_to = p_stat_dt_to
                         AND rm.acc_no = p_acc_no
                         AND NVL (rd.debit_amt, 0) = 0
                         AND NVL (rd.credit_amt, 0) > 0)
            LOOP
               INSERT INTO acc_bank_recon_bank
                           (sl_no, trans_id, head_id, trans_dt, trans_tp,
                            cheque_slip_no, particular, debit_amt,
                            credit_amt, cost_center_vr_no, narration,
                            matched_flag
                           )
                    VALUES (v_count, p_trans_id, '06', i.trans_dt, NULL,
                            i.cheque_slip_no, i.particular, i.debit_amt,
                            i.credit_amt, i.cost_center_vr_no, i.narration,
                            '0'
                           );

               v_count := v_count + 1;
            END LOOP;
         END;

         DECLARE
            v_count   NUMBER := 1;
         BEGIN
            DELETE FROM acc_bank_recon_ledger;

            FOR i IN
               (SELECT vouch_dt trans_dt, 
                                          --NVL (d.cheque_no, 'CASH') cheque_slip_no,
                       'CASH' cheque_slip_no, NULL particular,
                       DECODE (d.dr_cr,
                               'C', NVL (d.trans_amt, 0),
                               0
                              ) credit_amt,
                       DECODE (d.dr_cr,
                               'D', NVL (d.trans_amt, 0),
                               0
                              ) debit_amt,
                       m.narration, m.cost_center_vr_no
                  FROM acc_gl_trans_mst m,
                       acc_gl_trans_dtl d,
                       acc_gl_bank_acc_setup_mst s
                 WHERE m.office_cd = d.office_cd
                   AND m.vouch_no = d.vouch_no
                   AND m.vouch_dt BETWEEN p_stat_dt_frm AND p_stat_dt_to
                   AND d.glac_sl_no = s.glac_sl_no
                   AND s.acc_no = p_acc_no
                   AND m.vouch_cd <> '05'
                   AND DECODE (d.dr_cr, 'D', d.trans_amt, 'C', 0) > 0
                   AND NVL (narration, 'X') NOT LIKE 'Invalid%'
                   AND NOT EXISTS (
                          SELECT 1
                            FROM acc_gl_trans_mst
                           WHERE source_vouch_no = m.vouch_no
                             AND vouch_dt BETWEEN p_stat_dt_frm AND p_stat_dt_to)
                UNION ALL
                SELECT s.trans_dt, 
                                   --NVL (s.cheque_slip_no, 'CASH') cheque_slip_no,
                       'CASH' cheque_slip_no, s.particular,
                       NVL (s.credit_amt, 0) credit_amt,
                       NVL (s.debit_amt, 0) debit_amt, NULL narration,
                       NULL cost_center_vr_no
                  FROM acc_bank_recon_summery s, acc_bank_reconcile_mst m
                 WHERE s.trans_id = m.trans_id
                   AND m.acc_no = p_acc_no
                   AND s.head_id = '06'
                   AND m.stat_dt_to =
                          (SELECT MAX (stat_dt_to)
                             FROM acc_bank_reconcile_mst
                            WHERE acc_no = p_acc_no AND trans_id <> p_trans_id))
            LOOP
               INSERT INTO acc_bank_recon_ledger
                           (sl_no, trans_id, head_id, trans_dt, trans_tp,
                            cheque_slip_no, particular, debit_amt,
                            credit_amt, cost_center_vr_no, narration,
                            matched_flag
                           )
                    VALUES (v_count, p_trans_id, '06', i.trans_dt, NULL,
                            i.cheque_slip_no, i.particular, i.debit_amt,
                            i.credit_amt, i.cost_center_vr_no, i.narration,
                            '0'
                           );

               v_count := v_count + 1;
            END LOOP;
         END;

---Finding the unmatched record
         DECLARE
            CURSOR cur_matched
            IS
               (SELECT CASE
                          WHEN (a.b_no_record - b.l_no_record
                               ) >= 0
                             THEN   a.b_no_record
                                  - (a.b_no_record - b.l_no_record)
                          ELSE a.b_no_record
                       END matched_record,
                       a.b_no_record, a.b_amt, a.b_trans_dt,
                       a.b_cheque_slip_no, b.l_no_record, b.l_amt,
                       b.l_trans_dt, b.l_cheque_slip_no
                  FROM (SELECT   COUNT (sl_no) b_no_record,
                                 (debit_amt + credit_amt) b_amt,
                                 trans_dt b_trans_dt, 
--                                 NVL (cheque_slip_no,
--                                      'CASH') b_cheque_slip_no
                                 'CASH' b_cheque_slip_no
                            FROM acc_bank_recon_ledger
                           WHERE matched_flag = '0'
                        GROUP BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                        ORDER BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                       ) a,
                       (SELECT   COUNT (sl_no) l_no_record,
                                 (debit_amt + credit_amt) l_amt,
                                 trans_dt l_trans_dt, 
--                                 NVL (cheque_slip_no,
--                                      'CASH') l_cheque_slip_no
                                 'CASH' l_cheque_slip_no
                            FROM acc_bank_recon_bank
                           WHERE matched_flag = '0'
                        GROUP BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                        ORDER BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                       ) b
                 WHERE a.b_amt = b.l_amt
                   AND a.b_trans_dt = b.l_trans_dt
                   AND a.b_cheque_slip_no = b.l_cheque_slip_no);

            CURSOR cur_bank
            IS
               (SELECT *
                  FROM (SELECT   sl_no, trans_dt, 
--                                 NVL (cheque_slip_no, 'CASH') cheque_slip_no,
                                 'CASH' cheque_slip_no,
                                 (debit_amt + credit_amt) amount
                            FROM acc_bank_recon_bank
                           WHERE matched_flag = '0'
                        ORDER BY (debit_amt + credit_amt), trans_dt));

            CURSOR cur_ledger
            IS
               (SELECT *
                  FROM (SELECT   sl_no, trans_dt, 
--                                 NVL (cheque_slip_no, 'CASH') cheque_slip_no,
                                 'CASH' cheque_slip_no,
                                 (debit_amt + credit_amt) amount
                            FROM acc_bank_recon_ledger
                           WHERE matched_flag = '0'
                        ORDER BY (debit_amt + credit_amt), trans_dt));

            c_rec        cur_matched%ROWTYPE;
            c_rec_bank   cur_bank%ROWTYPE;
            c_rec_led    cur_ledger%ROWTYPE;
            v_count      NUMBER                := 0;
         BEGIN
            --For Date and amount wise cross checking
            OPEN cur_matched;

            LOOP
               FETCH cur_matched
                INTO c_rec;

               EXIT WHEN cur_matched%NOTFOUND;

               UPDATE acc_bank_recon_ledger
                  SET matched_flag = '1'
                WHERE sl_no IN (
                         SELECT sl_no
                           FROM acc_bank_recon_ledger
                          WHERE (debit_amt + credit_amt) = c_rec.b_amt
                            AND trans_dt = c_rec.b_trans_dt
--                            AND NVL (cheque_slip_no, 'CASH') =
--                                                        c_rec.b_cheque_slip_no
                            AND ROWNUM <= c_rec.matched_record);

               UPDATE acc_bank_recon_bank
                  SET matched_flag = '1'
                WHERE sl_no IN (
                         SELECT sl_no
                           FROM acc_bank_recon_bank
                          WHERE (debit_amt + credit_amt) = c_rec.l_amt
                            AND trans_dt = c_rec.l_trans_dt
--                            AND NVL (cheque_slip_no, 'CASH') =
--                                                        c_rec.l_cheque_slip_no
                            AND ROWNUM <= c_rec.matched_record);
            END LOOP;

            CLOSE cur_matched;

            --For amount wise cross checking
            OPEN cur_bank;

            LOOP
               v_count := 0;

               FETCH cur_bank
                INTO c_rec_bank;

               EXIT WHEN cur_bank%NOTFOUND;

               OPEN cur_ledger;

               LOOP
                  FETCH cur_ledger
                   INTO c_rec_led;

                  EXIT WHEN cur_ledger%NOTFOUND;

                  IF     c_rec_bank.cheque_slip_no = c_rec_led.cheque_slip_no
                     AND c_rec_bank.amount = c_rec_led.amount
                  THEN
                     v_count := 0;

                     SELECT COUNT (1)
                       INTO v_count
                       FROM acc_bank_recon_bank
                      WHERE sl_no = c_rec_bank.sl_no AND matched_flag = '0';

                     IF v_count > 0
                     THEN
                        UPDATE acc_bank_recon_ledger
                           SET matched_flag = '1'
                         WHERE sl_no = c_rec_led.sl_no;

                        UPDATE acc_bank_recon_bank
                           SET matched_flag = '1'
                         WHERE sl_no = c_rec_bank.sl_no;

                        EXIT;
                     END IF;
                  END IF;
               END LOOP;

               CLOSE cur_ledger;
            END LOOP;

            CLOSE cur_bank;
         END;

         INSERT INTO acc_bank_recon_summery
                     (trans_id, head_id, trans_dt, trans_tp, cheque_slip_no,
                      particular, debit_amt, credit_amt, cost_center_vr_no,
                      narration, i_usr, i_dt)
            SELECT trans_id, head_id, trans_dt, trans_tp, cheque_slip_no,
                   particular, debit_amt, credit_amt, cost_center_vr_no,
                   narration, p_i_usr, p_i_dt
              FROM acc_bank_recon_ledger
             WHERE matched_flag = '0';

         DELETE FROM acc_bank_recon_ledger;

         DELETE FROM acc_bank_recon_bank;
      END;

      --07    Fund transferred but not Posted in GL ---Collection Account   Have to change it
      BEGIN
         DECLARE
            v_count   NUMBER := 1;
         BEGIN
            DELETE FROM acc_bank_recon_bank;

            FOR i IN (SELECT rd.trans_dt, 
--                             NVL (rd.cheque_slip_no, 'CASH') cheque_slip_no,
                             'CASH' cheque_slip_no, rd.particular,
                             NVL (rd.credit_amt, 0) credit_amt,
                             NVL (rd.debit_amt, 0) debit_amt, NULL narration,
                             NULL cost_center_vr_no
                        FROM acc_bank_reconcile_mst rm,
                             acc_bank_reconcile_dtl rd
                       WHERE rm.trans_id = rd.trans_id
                         AND rm.stat_dt_frm = p_stat_dt_frm
                         AND rm.stat_dt_to = p_stat_dt_to
                         AND rm.acc_no = p_acc_no
                         AND rd.trans_tp = '04'
                         AND NVL (rd.debit_amt, 0) > 0
                         AND NVL (rd.credit_amt, 0) = 0
                      UNION ALL
                      SELECT trans_dt, 
--                             NVL (s.cheque_slip_no, 'CASH') cheque_slip_no,
                             'CASH' cheque_slip_no, s.particular,
                             NVL (s.credit_amt, 0) credit_amt,
                             NVL (s.debit_amt, 0) debit_amt, s.narration,
                             s.cost_center_vr_no
                        FROM acc_bank_recon_summery s,
                             acc_bank_reconcile_mst m
                       WHERE s.trans_id = m.trans_id
                         AND m.acc_no = p_acc_no
                         AND s.head_id = '07'
                         AND NVL (s.debit_amt, 0) > 0
                         AND NVL (s.credit_amt, 0) = 0
                         AND m.stat_dt_to =
                                (SELECT MAX (stat_dt_to)
                                   FROM acc_bank_reconcile_mst
                                  WHERE acc_no = p_acc_no
                                    AND trans_id <> p_trans_id))
            LOOP
               INSERT INTO acc_bank_recon_bank
                           (sl_no, trans_id, head_id, trans_dt, trans_tp,
                            cheque_slip_no, particular, debit_amt,
                            credit_amt, cost_center_vr_no, narration,
                            matched_flag
                           )
                    VALUES (v_count, p_trans_id, '07', i.trans_dt, NULL,
                            i.cheque_slip_no, i.particular, i.debit_amt,
                            i.credit_amt, i.cost_center_vr_no, i.narration,
                            '0'
                           );

               v_count := v_count + 1;
            END LOOP;
         END;

         DECLARE
            v_count   NUMBER := 1;
         BEGIN
            DELETE FROM acc_bank_recon_ledger;

            FOR i IN (SELECT vouch_dt trans_dt, 
--                             NVL (d.cheque_no, 'CASH') cheque_slip_no,
                             'CASH' cheque_slip_no, NULL particular,
                             DECODE (d.dr_cr,
                                     'C', NVL (d.trans_amt, 0),
                                     0
                                    ) credit_amt,
                             DECODE (d.dr_cr,
                                     'D', NVL (d.trans_amt, 0),
                                     0
                                    ) debit_amt,
                             m.narration, m.cost_center_vr_no
                        FROM acc_gl_trans_mst m,
                             acc_gl_trans_dtl d,
                             acc_gl_bank_acc_setup_mst s
                       WHERE m.office_cd = d.office_cd
                         AND m.vouch_no = d.vouch_no
                         AND m.vouch_dt BETWEEN p_stat_dt_frm AND p_stat_dt_to
                         AND d.glac_sl_no = s.glac_sl_no
                         AND s.acc_no = p_acc_no
                         AND DECODE (d.dr_cr, 'C', NVL (d.trans_amt, 0), 0) >
                                                                             0)
            LOOP
               INSERT INTO acc_bank_recon_ledger
                           (sl_no, trans_id, head_id, trans_dt, trans_tp,
                            cheque_slip_no, particular, debit_amt,
                            credit_amt, cost_center_vr_no, narration,
                            matched_flag
                           )
                    VALUES (v_count, p_trans_id, '07', i.trans_dt, NULL,
                            i.cheque_slip_no, i.particular, i.debit_amt,
                            i.credit_amt, i.cost_center_vr_no, i.narration,
                            '0'
                           );

               v_count := v_count + 1;
            END LOOP;
         END;

---Finding the unmatched record
         DECLARE
            CURSOR cur_matched
            IS
               (SELECT CASE
                          WHEN (a.b_no_record - b.l_no_record
                               ) >= 0
                             THEN   a.b_no_record
                                  - (a.b_no_record - b.l_no_record)
                          ELSE a.b_no_record
                       END matched_record,
                       a.b_no_record, a.b_amt, a.b_trans_dt,
                       a.b_cheque_slip_no, b.l_no_record, b.l_amt,
                       b.l_trans_dt, b.l_cheque_slip_no
                  FROM (SELECT   COUNT (sl_no) b_no_record,
                                 (debit_amt + credit_amt) b_amt,
                                 trans_dt b_trans_dt, 
--                                 NVL (cheque_slip_no,
--                                      'CASH') b_cheque_slip_no
                                 'CASH' b_cheque_slip_no
                            FROM acc_bank_recon_bank
                           WHERE matched_flag = '0'
                        GROUP BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                        ORDER BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                       ) a,
                       (SELECT   COUNT (sl_no) l_no_record,
                                 (debit_amt + credit_amt) l_amt,
                                 trans_dt l_trans_dt, 
--                                 NVL (cheque_slip_no,
--                                      'CASH') l_cheque_slip_no
                                 'CASH' l_cheque_slip_no
                            FROM acc_bank_recon_ledger
                           WHERE matched_flag = '0'
                        GROUP BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                        ORDER BY (debit_amt + credit_amt), trans_dt
--                                 ,                                 NVL (cheque_slip_no, 'CASH')
                       ) b
                 WHERE a.b_amt = b.l_amt
                   AND a.b_trans_dt = b.l_trans_dt
                   AND a.b_cheque_slip_no = b.l_cheque_slip_no);

            CURSOR cur_bank
            IS
               (SELECT *
                  FROM (SELECT   sl_no, trans_dt, 
--                                 NVL (cheque_slip_no, 'CASH') cheque_slip_no,
                                 'CASH' cheque_slip_no,
                                 (debit_amt + credit_amt) amount
                            FROM acc_bank_recon_bank
                           WHERE matched_flag = '0'
                        ORDER BY (debit_amt + credit_amt), trans_dt));

            CURSOR cur_ledger
            IS
               (SELECT *
                  FROM (SELECT   sl_no, trans_dt, 
--                                 NVL (cheque_slip_no, 'CASH') cheque_slip_no,
                                 'CASH' cheque_slip_no,
                                 (debit_amt + credit_amt) amount
                            FROM acc_bank_recon_ledger
                           WHERE matched_flag = '0'
                        ORDER BY (debit_amt + credit_amt), trans_dt));

            c_rec        cur_matched%ROWTYPE;
            c_rec_bank   cur_bank%ROWTYPE;
            c_rec_led    cur_ledger%ROWTYPE;
            v_count      NUMBER                := 0;
         BEGIN
            --For Date and amount wise cross checking
            OPEN cur_matched;

            LOOP
               FETCH cur_matched
                INTO c_rec;

               EXIT WHEN cur_matched%NOTFOUND;

               UPDATE acc_bank_recon_bank
                  SET matched_flag = '1'
                WHERE sl_no IN (
                         SELECT sl_no
                           FROM acc_bank_recon_bank
                          WHERE (debit_amt + credit_amt) = c_rec.b_amt
                            AND trans_dt = c_rec.b_trans_dt
--                            AND NVL (cheque_slip_no, 'CASH') =
--                                                        c_rec.b_cheque_slip_no
                            AND ROWNUM <= c_rec.matched_record);

               UPDATE acc_bank_recon_ledger
                  SET matched_flag = '1'
                WHERE sl_no IN (
                         SELECT sl_no
                           FROM acc_bank_recon_ledger
                          WHERE (debit_amt + credit_amt) = c_rec.l_amt
                            AND trans_dt = c_rec.l_trans_dt
--                            AND NVL (cheque_slip_no, 'CASH') =
--                                                        c_rec.l_cheque_slip_no
                            AND ROWNUM <= c_rec.matched_record);
            END LOOP;

            CLOSE cur_matched;

            --For amount wise cross checking
            OPEN cur_bank;

            LOOP
               v_count := 0;

               FETCH cur_bank
                INTO c_rec_bank;

               EXIT WHEN cur_bank%NOTFOUND;

               OPEN cur_ledger;

               LOOP
                  FETCH cur_ledger
                   INTO c_rec_led;

                  EXIT WHEN cur_ledger%NOTFOUND;

                  IF     c_rec_bank.cheque_slip_no = c_rec_led.cheque_slip_no
                     AND c_rec_bank.amount = c_rec_led.amount
                  THEN
                     v_count := 0;

                     SELECT COUNT (1)
                       INTO v_count
                       FROM acc_bank_recon_ledger
                      WHERE sl_no = c_rec_led.sl_no AND matched_flag = '0';

                     IF v_count > 0
                     THEN
                        UPDATE acc_bank_recon_bank
                           SET matched_flag = '1'
                         WHERE sl_no = c_rec_bank.sl_no;

                        UPDATE acc_bank_recon_ledger
                           SET matched_flag = '1'
                         WHERE sl_no = c_rec_led.sl_no;

                        EXIT;
                     END IF;
                  END IF;
               END LOOP;

               CLOSE cur_ledger;
            END LOOP;

            CLOSE cur_bank;
         END;

         INSERT INTO acc_bank_recon_summery
                     (trans_id, head_id, trans_dt, trans_tp, cheque_slip_no,
                      particular, debit_amt, credit_amt, cost_center_vr_no,
                      narration, i_usr, i_dt)
            SELECT trans_id, head_id, trans_dt, trans_tp, cheque_slip_no,
                   particular, debit_amt, credit_amt, cost_center_vr_no,
                   narration, p_i_usr, p_i_dt
              FROM acc_bank_recon_bank
             WHERE matched_flag = '0';

         DELETE FROM acc_bank_recon_ledger;

         DELETE FROM acc_bank_recon_bank;
      END;
   END IF;

   p_output := NULL;
EXCEPTION
   WHEN OTHERS
   THEN
      p_output := 'Falied! Due to ' || SQLERRM;
END;
/


--
-- PRO_CALC_CLAIM_SOURCE_TAX  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_calc_claim_source_tax (
   p_pgid           IN       ins_p_proposal.pgid%TYPE,
   p_cur_pay_amt    IN       NUMBER,
   p_prem_type      IN       NUMBER,
   -- 1 for Life Premium, 2 for Installment Premium
   p_tax_calc_for   IN       VARCHAR2,
   p_source_tax     OUT      NUMBER,
   p_error          OUT      VARCHAR2
)
IS
   ---p_tax_calc_for---
   --01    Death
   --02    Maturity
   --03    Surrender
   --04    Hospitalization
   --05    Physical Disability
   --06    Paid Up
   --07    Pension Commutation
   --08    FA Commission
   --09    Employeer of FA Commission
   v_tot_deposit_amt   NUMBER (12, 2)                      := 0;
   v_tot_paid_amt      NUMBER (12, 2)                      := 0;
   v_tax_rate          com_agency_tax_rate.tax_rate%TYPE;
   v_tin_tax_rate      com_agency_tax_rate.tax_rate%TYPE;
   v_no_tin_tax_rate   com_agency_tax_rate.tax_rate%TYPE;
   v_anf_loan_amt      clm_adjust_other_ded.ded_amt%TYPE;
BEGIN
   IF p_tax_calc_for IN ('02', '03', '04', '05', '06', '07')
   THEN
      SELECT DECODE (p_prem_type,
                     1, s.life_premium * last_paid_inst_no,
                     s.installment_premium * last_paid_inst_no
                    )
        INTO v_tot_deposit_amt
        FROM ins_p_summery s
       WHERE s.pgid = p_pgid;

      --ANF Loan add with total deposit amount---
      BEGIN                                      ---Add by Musha on 10-08-2015
         SELECT NVL (SUM (d.ded_amt), 0)
           INTO v_anf_loan_amt
           FROM clm_adjust_other_ded d
          WHERE d.pgid = p_pgid;

         v_tot_deposit_amt :=
                           NVL (v_tot_deposit_amt, 0)
                           + NVL (v_anf_loan_amt, 0);
      EXCEPTION
         WHEN OTHERS
         THEN
            v_anf_loan_amt := 0;
      END;

      SELECT NVL (SUM (paid_amt), 0)
        INTO v_tot_paid_amt
        FROM (SELECT   NVL (c.gross_payable_amt, 0)
                     + NVL (bonus_payable, 0) paid_amt
                FROM clm_claim_payable_gen c
               WHERE c.pgid = p_pgid
              UNION ALL
              SELECT NVL (commutation_amt, 0)
                FROM clm_commutation_info c
               WHERE c.pgid = p_pgid);

      v_tot_paid_amt := v_tot_paid_amt + p_cur_pay_amt;

      IF v_tot_paid_amt > v_tot_deposit_amt
      THEN
         BEGIN
            /*SELECT (m.tax_rate / 100)
              INTO v_tax_rate
              FROM acc_source_tax_rate_mst m,
                   acc_source_tax_rate_dtl d
             WHERE d.applicable_on = p_tax_calc_for
               AND m.source_cd = d.source_cd;*/
            SELECT NVL (MAX (  DECODE (m.tin_status, 1, 0, 2, 0, m.tax_rate)
                             / 100
                            ),
                        0
                       ),
                   NVL (MAX (DECODE (m.tin_status, 1, m.tax_rate, 0) / 100),
                        0),
                   NVL (MAX (DECODE (m.tin_status, 2, m.tax_rate, 0) / 100),
                        0)
              INTO v_tax_rate,
                   v_tin_tax_rate,
                   v_no_tin_tax_rate
              FROM acc_source_tax_rate_mst m, acc_source_tax_rate_dtl d
             WHERE m.status = '1'
               AND d.status = '1'
               AND m.applicable_on = '1'
               AND DECODE (m.applicable_on,
                           1, d.clm_cause_cd,
                           2, emp_type_cd
                          ) = p_tax_calc_for
               AND m.source_cd = d.source_cd;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_tax_rate := 0;                                        --.05;
         END;

         p_source_tax :=
                     NVL(ROUND ((v_tot_paid_amt - v_tot_deposit_amt) * v_tax_rate), 0);
      ELSE
         p_source_tax := 0;
      END IF;
   ELSE
    p_source_tax := 0;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END pro_calc_claim_source_tax;
/


--
-- PRO_CLAIM_DATA_CHECKING  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_claim_data_checking (
   p_pgid     IN     VARCHAR2,
   p_status      OUT CHAR,                                 --0=Failed,'1'=Pass
   p_error       OUT VARCHAR2
)
IS
   v_count   NUMBER (3) := 0;
BEGIN
   SELECT   COUNT (1)
     INTO   v_count
     FROM   clm_claim_payable_gen
    WHERE   pgid = p_pgid AND NVL (payment_status, 'N') = 'N';

   IF v_count > 0
   THEN
      p_status := '0';
      p_error :=
         'Pending Cliam found for this policy. So it is not possible to alter this policy!';
   ELSE
      p_status := '1';
   END IF;

   SELECT   COUNT (1)
     INTO   v_count
     FROM   sur_sur_application
    WHERE   pgid = p_pgid AND status = '0';

   IF v_count > 0
   THEN
      p_status := '0';
      p_error :=
         'Pending Surrender found for this policy. So it is not possible to alter this policy!';
   ELSE
      p_status := '1';
   END IF;

   SELECT   COUNT (1)
     INTO   v_count
     FROM   ACC_RECEIVABLES
    WHERE   NO_OF_SYNC IS NOT NULL AND pgid = p_pgid;
    
     IF v_count = 0
   THEN
      p_status := '0';
      p_error :=
         'Please first synchronize this policy.Otherwise,it is not possible to alter this policy!';
   ELSE
      p_status := '1';
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END;
/


--
-- PRO_CLIENT_INFO_VALIDATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_client_info_validation (
   p_validate_cd_type   IN       VARCHAR2,
   --1=Mobile No, 2=NID, 3=Passport No, 4=TIN, 5=Name 1
   p_validate_cd        IN       VARCHAR2,
   p_pgid               IN       VARCHAR2,
   p_product_cd         IN       VARCHAR2,
   p_client_nm          IN       VARCHAR2,
   p_client_dob         IN       VARCHAR2,
   p_father_nm          IN       VARCHAR2,
   p_mother_nm          IN       VARCHAR2,
   p_status             OUT      VARCHAR2,
   p_message            OUT      VARCHAR2
)
IS
   v_policy_tp_cd   VARCHAR (5);
   v_cnt            NUMBER (10);
   v_count2         NUMBER (10);
   v_output         VARCHAR (4000);
   v_loop_cnt       NUMBER (1)     := 0;
   v_status         CHAR (1);
--This added by Md. Sayadur Rahaman on 26/02/2018
BEGIN
   IF p_validate_cd_type = '1'
   THEN
      --This added by Md. Sayadur Rahaman on 26/02/2018
      SELECT fun_mobile_number_val (p_validate_cd)
        INTO v_status
        FROM DUAL;

--IF v_status = '1'. This added by Md. Sayadur Rahaman on 26/02/2018
      IF v_status = '1'
      THEN
         SELECT COUNT (mobile_no)
           INTO v_cnt
           FROM ins_p_address
          WHERE party_cd IN ('03', '02') AND mobile_no = p_validate_cd;

         IF v_cnt = 0
         THEN
            p_status := '1';
         ELSIF v_cnt BETWEEN 1 AND 5
         THEN
            p_status := '1';

            --Below condition (Line No 46-99) has been changed by Md. Sayadur Rahaman on 15/02/2021 according to ticket ref:Ticket#2021021144000087 ? One mobile number with 5 policy issue .
            SELECT COUNT (a.pgid)
              INTO v_count2
              FROM ins_p_address a, ins_p_personal p
             WHERE a.party_cd IN ('03', '02')
               AND p.party_cd IN ('03', '02')
               AND mobile_no = p_validate_cd
               AND UPPER (p.party_name) = UPPER (p_client_nm)
               AND (p.dob IS NULL OR (p.dob = p_client_dob))
               AND UPPER (father_name) = UPPER (p_father_nm)
               AND a.pgid = p.pgid
               AND a.party_id = p.party_id
               AND a.party_cd = p.party_cd;

            IF v_count2 = v_cnt
            THEN
               p_status := '1';
            ELSE
               v_loop_cnt := 0;

               FOR i IN (SELECT    'Client Name: '
                                || p.party_name
                                || ', Date of Birth: '
                                || p.dob
                                || ', Father''s Name: '
                                || p.father_name
                                || ', Mother''s Name: '
                                || p.mother_name client_info
                           FROM ins_p_address a, ins_p_personal p
                          WHERE a.party_cd IN ('03', '02')
                            AND p.party_cd IN ('03', '02')
                            AND mobile_no = p_validate_cd
                            AND UPPER (p.party_name) <> UPPER (p_client_nm)
                            AND (p.dob IS NULL OR (p.dob <> p_client_dob))
                            AND a.pgid = p.pgid
                            AND a.party_id = p.party_id
                            AND a.party_cd = p.party_cd)
               LOOP
                  v_output := v_output || ';' || i.client_info;
                  v_loop_cnt := v_loop_cnt + 1;

                  IF v_loop_cnt >= 2
                  THEN
                     EXIT;
                  END IF;
               END LOOP;

               v_output :=
                  'This Mobile No. Already Used by: ' || LTRIM (v_output, ';');
               p_status := '0';
               p_message := v_output;
            END IF;
         ELSE
            v_output :=
                  'This number is used about '
               || v_cnt
               || ' times so it is not possible to use further!';
            p_message := v_output;
            p_status := '0';
         END IF;
      ELSE
         v_output := 'This Mobile No is not valid!';
         p_message := v_output;
         p_status := '0';
      END IF;
   ELSIF p_validate_cd_type IN ('2', '3', '4')
   THEN
      SELECT COUNT (*)
        INTO v_cnt
        FROM ins_p_personal p
       WHERE party_cd IN ('03', '02')
         AND DECODE (p_validate_cd_type,
                     '2', p.nid,
                     '3', p.tin,
                     '4', p.passport_no
                    ) = p_validate_cd;

      IF v_cnt > 1
      THEN
         v_loop_cnt := 0;

         FOR i IN (SELECT    'Client Name: '
                          || p.party_name
                          || ', Date of Birth: '
                          || p.dob
                          || ', Father''s Name: '
                          || p.father_name
                          || ', Mother''s Name: '
                          || p.mother_name client_info
                     FROM ins_p_personal p
                    WHERE p.party_cd IN ('03', '02')
                      AND DECODE (p_validate_cd_type,
                                  '2', p.nid,
                                  '3', p.tin,
                                  '4', p.passport_no
                                 ) = p_validate_cd
                      AND UPPER (p.party_name) <> UPPER (p_client_nm)
                      AND (p.dob IS NULL OR (p.dob <> p_client_dob)))
         LOOP
            v_output := v_output || ';' || i.client_info;
            v_loop_cnt := v_loop_cnt + 1;

            IF v_loop_cnt >= 2
            THEN
               EXIT;
            END IF;
         END LOOP;

         IF v_output IS NOT NULL
         THEN
            SELECT    'This '
                   || DECODE (p_validate_cd_type,
                              '2', 'NID',
                              '3', 'TIN',
                              '4', 'Passport No'
                             )
                   || ' Already Used by: '
                   || LTRIM (v_output, ';')
              INTO v_output
              FROM DUAL;

            p_status := '0';
            p_message := v_output;                              --add by Prite
         ELSE
            p_status := '1';
         END IF;
      ELSE
         p_status := '1';
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      v_output := SQLERRM;
      p_status := '0';
      p_message := v_output;
--add by Prite
END;
/


--
-- PRO_CLM_PAY_APPROVAL_STAT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_clm_pay_approval_stat wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
101f 57b
xgjfzLmwuYAJ4NrJ8tW1oIstjiMwg9fqmiCMVy+8F/mendimJuZVGQB56WyeGw3/cDxAijO9
QyX8wz4uUQWKoUnNLKoL1q/fUKIKItgKOeCqgkEsml+QGAOOF7LGfc5ya1W5hwWGi52fx0Yg
tUifzcTri0bhKKjDDT0YkRF2GnaHopkKblxZFCHxSyiBCwJkIy1df76wU2JYYqclUS7e5hj7
LRUBIVFipG4BLqPE3t8DMsRv8AReCc3xIeG/woKYCj2F276biOLenYHxNBWiObR3UtAMpfex
0ILfTTpaZOwJoVwIMtX8GitwPPWuoNwwksilExwrcKjxlDyTk6w4/4gst3g3QmuARrBAblw/
1kSgQ84D+4SvLjAFqGWnYT6Mj34+Mo0uUtC+LYfIlLuxyAPR+5skeVOmCo+oxMyrPvMNceEL
e603Ptz2ielLg2fjes3m/5Nr5haVGjCoJ8Nxk16TLrPKCEP7HddtWo9FJqOPwHSjgZw1YvKX
dGc5huBtqdFQZlSKfEjL2DGOBYrsBA69ttp0wjeP+3wa86ZOJJLEGQCH9wnmQB+kr4kqAaSF
/HQATAAqgtNDrVKQjrAXRswq1lO7nkE4yMy5LVxzG+Og8I/CL+EPafEJtZ46adk/xqTkKpVc
LrRTOPRUsgWeNk9jeHwYJcsPycTsCRR4Jr8H4o1axEBoRZJ3Wy78DuH2Xz97XKU+HITQm+ig
6tah1kbzmoHzRZtQ/QsljzmzOJJu4bBy3kSL0mzFXysX5X2wct64q5A8fHIZKX3aHaPkUDoN
4WRU9WKI9e8k+aUq7WLCVmMZWT6gZkpeCpShzcfNJiyJLZczhfnJpxyewFVq5nieEGzsYj0C
VM3cN1pYgonaU+J7ThFhIgeo9rhLOXDiBbfJ9p6n9sUQ+4hZPFfWMOa0ZHNL9jUg9BooV3NO
ZfSmQTeb2glYQJ/mNsWTO5c/WOkJb6pEH6K/eULH0ik6MG9XKRglG4lunB4l93319UK+cNpD
gGVTHNA4U3HOFbcp0yoXctjH8m+uA7jMxhWejt4O09M1s8hm98HbZNtKUaTN5l00fsYvm8d0
qNwv4HhWnNUjH2HI/nCZQiRhRivWgHMIOFVxu+B4av8ts/BjEmpXR/3bwrQN1UBHDDQylVTh
c843z87WgNFM3p5WKJxjbxxFyZfnwYsabvdbWJTV53dThs95LoaRewar5PW0P6oQGU+sIKiD
LNwRErTNQcSwwUmaDZVL//QpfiEASZg8Q90AcP+0iknGhrkBmK3tdjNNNtWV/p2HD9y21SZ1
Vfz+T1XFKaogjPxCtdLCtfjXdV8PgQoyON/i2UF5QPmU55htco4ZmS+N6p//g7nEfYyefLpJ
w5XOM8S1+9MuJ2g=
/


--
-- PRO_CODE_NO_PADDING  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_code_no_padding wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
4f2 250
M0CA6MKDwWfyOYAM05Jxm9j/MwQwg2PD2UisZ47N7GRTEzkuWh9M8n4Vhp4UamdbS8Jmo+Ps
VC0inz/PWzkeZz3sn9+Ryf++wSLLtsLd5to45xN5WO2cQvc72X6C105DI8sARKYVR55+R3r9
P1bszhtlLg562rb40Sd+fNkqtMfWgthXf1qZHBQtX9bap+OV9DjXAGSfVmNkMMwCpBe8f/ON
Lxrk3TXFYSGPD3tgqxL7EPHM0FKrUdG0oUa/SwGJR8uyBTNNt1yAsTFl/NMFWR6eqjgT3moq
swgRlKjmrCt0wN6rhSYnygxPv8nldxgc8NbcWw3crqDcjaPVIPPJ2+G18jMqj9fpSNu3BUAX
wSnyMrvwRccwiOG1Vy2ZAPqqc552mBas3zQ8NkAO0w2+jamcza0ExXiQWjB9p/k7PHXeDyAV
qPSlDxWKZBV3iwAmvwnLmiTrqb/GBij7UGrG2LQVSMwcK61HnlSUmKSKH+sqiboWIijrlIoM
adDGYYoITea8bpb+2pT1Q2BC5HPKol2zGka2mWq3LFOkFjbPIlb8WcP/KiNshXWq0C/qsyy8
puxrrfk=
/


--
-- PRO_COLL_DEPOSIT_DASHBOARD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_coll_deposit_dashboard (
   p_trans_date   DATE,
   p_user         VARCHAR2
)
IS
/******************************************************************************
   NAME:       pro_coll_deposit_dashboard

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        31/10/2021   Md. Sayadur Rahaman      1. Created this procedure.

 ******************************************************************************/
   v_opening_bal             acc_coll_deposit_dashboad.opening_bal%TYPE;
   v_first_year_target_amt   acc_coll_deposit_dashboad.first_year_target_amt%TYPE;
   v_renewal_target_amt      acc_coll_deposit_dashboad.renewal_target_amt%TYPE;
   v_count                   NUMBER;
   v_error                   VARCHAR2 (200);
   v_deposit_amt             NUMBER (12);
   v_trans_date              DATE;
   v_process_time            DATE;
BEGIN
   v_process_time := SYSDATE;

   IF p_trans_date IS NULL
   THEN
      v_trans_date := TRUNC (SYSDATE);
   ELSE
      v_trans_date := p_trans_date;
   END IF;

   --pro_premium_coll_summery (p_user, v_error);
   FOR i IN
      (SELECT   office_cd, servicing_off, coll_date,
                SUM (first_prem_amt) first_prem_amt,
                SUM (deff_prem_amt) deff_prem_amt,
                SUM (sec_prem_amt) sec_prem_amt,
                SUM (ren_prem_amt) ren_prem_amt,
                SUM (grp_prem_amt) grp_prem_amt,
                SUM (others_coll_amt) others_coll_amt,
                SUM (commission_amt) commission_amt,
                SUM (deposit_amt) deposit_amt
           FROM (SELECT active_office_cd office_cd,
                        active_regional_cd servicing_off,
                        receive_dt coll_date, f_coll_amount first_prem_amt,
                        d_coll_amount deff_prem_amt,
                        s_coll_amount sec_prem_amt,
                        r_coll_amount ren_prem_amt, 0 grp_prem_amt,
                        0 others_coll_amt,
                        fun_comm_cal_dashboard (s.product_cd,
                                                s.term,
                                                f_coll_amount,
                                                d_coll_amount,
                                                s_coll_amount,
                                                r_coll_amount,
                                                0
                                               ) commission_amt,
                        0 deposit_amt
                   FROM acc_coll_summery c, ins_p_summery s
                  WHERE c.pgid = s.pgid
                    AND receive_dt = v_trans_date
                    AND rec_status = '1'
                 UNION ALL
                 SELECT active_office_cd office_cd,
                        fun_find_service_off (active_office_cd) servicing_off,
                        receive_date coll_date, 0 first_prem_amt,
                        0 deff_prem_amt, 0 sec_prem_amt, 0 ren_prem_amt,
                        coll_amount grp_prem_amt, 0 others_coll_amt,
                        fun_comm_cal_dashboard (s.product_cd,
                                                s.term,
                                                0,
                                                0,
                                                0,
                                                0,
                                                coll_amount
                                               ) commission_amt,
                        0 deposit_amt
                   FROM grp_receivables r, grp_group_ins_summery s
                  WHERE r.pgid = s.pgid
                    AND receive_date = v_trans_date
                    AND rec_status = '1'
                 UNION ALL
                 SELECT r.office_cd,
                        fun_find_service_off (r.office_cd) servicing_off,
                        r.receive_dt coll_date, 0 first_prem_amt,
                        0 deff_prem_amt, 0 sec_prem_amt, 0 ren_prem_amt,
                        0 grp_prem_amt, r.trns_amt others_coll_amt,
                        0 commission_amt, 0 deposit_amt
                   FROM acc_oth_coll_mst r
                  WHERE r.receive_dt = v_trans_date AND r.status = '1'
                 UNION ALL
                 SELECT office_cd,
                        fun_find_service_off (r.office_cd) servicing_off,
                        tran_dt coll_date, 0 first_prem_amt, 0 deff_prem_amt,
                        0 sec_prem_amt, 0 ren_prem_amt, 0 grp_prem_amt,
                        0 others_coll_amt, 0 commission_amt, deposit_amt
                   FROM acc_bank_tran_actual r
                  WHERE tran_dt = v_trans_date)
       GROUP BY office_cd, servicing_off, coll_date)
   LOOP
      ---Findings the office wise opening balance
      SELECT SUM (fun_gl_head_opening (c.glac_sl_no,
                                       '07001',
                                       i.office_cd,
                                       '0',
                                       i.coll_date,
                                       NULL
                                      )
                 )
        INTO v_opening_bal
        FROM acc_gl_coa c
       WHERE glac_sl_no IN ('101562', '101575');

---Findings the office wise target amount
      BEGIN
         SELECT t.first_yr_target, t.renewal_target
           INTO v_first_year_target_amt, v_renewal_target_amt
           FROM hrm_office_target t
          WHERE i.coll_date BETWEEN start_dt AND end_dt
            AND office_cd = i.office_cd;
      EXCEPTION
         WHEN OTHERS
         THEN
            BEGIN
               SELECT t.first_yr_target, t.renewal_target
                 INTO v_first_year_target_amt, v_renewal_target_amt
                 FROM hrm_office_target t
                WHERE i.coll_date BETWEEN start_dt AND end_dt
                  AND f_off_catg_cd (i.office_cd) = t.off_catg_cd;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_first_year_target_amt := 0;
                  v_renewal_target_amt := 0;
            END;
      END;

      SELECT COUNT (1)
        INTO v_count
        FROM acc_coll_deposit_dashboad
       WHERE office_cd = i.office_cd AND coll_date = i.coll_date;

      IF v_count > 0
      THEN
         UPDATE acc_coll_deposit_dashboad
            SET opening_bal = v_opening_bal,
                first_prem_amt = i.first_prem_amt,
                deff_prem_amt = i.deff_prem_amt,
                sec_prem_amt = i.sec_prem_amt,
                ren_prem_amt = i.ren_prem_amt,
                grp_prem_amt = i.grp_prem_amt,
                others_coll_amt = i.others_coll_amt,
                commission_amt = i.commission_amt,
                bank_deposit_amt = i.deposit_amt,
                first_year_target_amt = v_first_year_target_amt,
                renewal_target_amt = v_renewal_target_amt,
                i_usr = p_user,
                pre_process_date = process_date,
                process_date = v_process_time
          WHERE office_cd = i.office_cd AND coll_date = i.coll_date;
      ELSE
         INSERT INTO acc_coll_deposit_dashboad
                     (office_cd, servicing_off, coll_date,
                      opening_bal, first_prem_amt, deff_prem_amt,
                      sec_prem_amt, ren_prem_amt, grp_prem_amt,
                      others_coll_amt, commission_amt, bank_deposit_amt,
                      first_year_target_amt, renewal_target_amt, i_usr,
                      process_date
                     )
              VALUES (i.office_cd, i.servicing_off, i.coll_date,
                      v_opening_bal, i.first_prem_amt, i.deff_prem_amt,
                      i.sec_prem_amt, i.ren_prem_amt, i.grp_prem_amt,
                      i.others_coll_amt, i.commission_amt, i.deposit_amt,
                      v_first_year_target_amt, v_renewal_target_amt, p_user,
                      v_process_time
                     );
      END IF;
   END LOOP;

   COMMIT;

   BEGIN
      FOR j IN (SELECT office_cd, servicing_off, first_year_target_amt,
                       renewal_target_amt
                  FROM acc_coll_deposit_dashboad
                 WHERE coll_date = v_trans_date - 1
                   AND (office_cd, coll_date) NOT IN (
                                                SELECT office_cd, coll_date
                                                  FROM acc_coll_deposit_dashboad
                                                 WHERE coll_date =
                                                                  v_trans_date))
      LOOP
         SELECT SUM (fun_gl_head_opening (c.glac_sl_no,
                                          '07001',
                                          j.office_cd,
                                          '0',
                                          v_trans_date,
                                          NULL
                                         )
                    )
           INTO v_opening_bal
           FROM acc_gl_coa c
          WHERE glac_sl_no IN ('101562', '101575');

         INSERT INTO acc_coll_deposit_dashboad
                     (office_cd, servicing_off, coll_date,
                      opening_bal, first_prem_amt, deff_prem_amt,
                      sec_prem_amt, ren_prem_amt, grp_prem_amt,
                      others_coll_amt, commission_amt, bank_deposit_amt,
                      first_year_target_amt, renewal_target_amt, i_usr,
                      process_date
                     )
              VALUES (j.office_cd, j.servicing_off, v_trans_date,
                      v_opening_bal, 0, 0,
                      0, 0, 0,
                      0, 0, 0,
                      j.first_year_target_amt, j.renewal_target_amt, p_user,
                      v_process_time
                     );
      END LOOP;
   END;
END pro_coll_deposit_dashboard;
/


--
-- PRO_COLL_MEDIA_NO_GEN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_coll_media_no_gen wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
745 357
cYf3j+Un/v9yDZEP6faWiia3F6cwg41cDCAGfC8Zxz+VaMonRg7G6XbmBqkN1DOD3L+tk5TX
4sXMTfIStKqdC0k3NH1q04VfnSAZglps0/GLGN1O2bO5SvjtEMUcHLvN7hG1b1sEW6bKO8mn
mVOfMLyT05SNUI3TvjQYSDW+S2YDCRDnYu4J99rkwuwWq4yE+RBUAwfRAs6z6bI1OxSX1iSb
eLGiTC7haJXFk8b8YeEgoeRCpUAaIWHJ1fpJ3SU9WfYKLv0bwOtEsYMNSuoQPXnmL0b7PSrZ
EOMVaMO8ODtlHyg6kC/eTY/HBwTywNqGmh+EQ1M3k7dP424T7OuGsWn3ASGo36ES9DcIfqv/
1myTzLlL7HzxBFe24dDoaOPo7AnsPi015vHVJ2G2NM5lupeC7vudPDaw75y0FHwzrs+2FVGn
iUw31KRXtp4Wg1IG7kiV3YR1WXDPDWsdziW+3kezsU1r1oKokemMdnN8AacGFK9RfCuUJCp+
Z/5Tq4HAog65t+ca5Rjwv3ngtx7nFosmboy5a00cUkdqf1gmO62cJgQUUYh4kRkcRRxenzNj
XoY/aJzL4K2z4oeBGRjd5x5FntQhX4OkHK8R3xjlLnx9txn8Id8U5b8bZeiFcGXckPdgorge
mhXuUOWFEXcgtJ98AYa+IclV3qOgxLoCgvYVlhh7iU6gDYcKGZXG7j7UhHUbu97NWuxZQVG7
+ZyYRUBWCydie8M3Jk+cmyNPraj5EtgYhAjAtZIwet0pecTV3LAkIPhzJLSkT0H+lfYIqTRO
g8CruBqt51lGmx7i9/dB1ykRPz8ndT0kiNHGsvxDKeQFqpCfE90=
/


--
-- PRO_COLL_SL_NO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_coll_sl_no wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
c9d 34b
640QqKMqUrdlgbAsPkVMmhDnoxswg83DDCDrZy+Lig9/nJc7RmnT9B3wwLTYxpE4LLm5e9Dr
no3AnjYNuB7QF3hKzQ1SZlxcmcVHqPqKek7XeF4R6X/VKhX+BZCYGXnEuUgevM2PevupFSZ6
F46k1w73bLP1NdJdMkP3goS9gMSzxnpGl1Ax4Wa9i9aNxf+Q7tzFZOUlkq6TGK08M2b1EV+C
YS2xOrdtRliPDfU5ZPKJvF4+e2LdOpEhRanZWK6XOtKPfvTpNyUzkqT16KvtvxalysHlmjw6
zWf9r/bv1XK2WMHOQfovFZvn14gahiE0g0TyMIkUPepesNPWdiZEKrWPnW4U4bcWQKEKRVPG
PHHV+zFuU8WDomE94QAFy5PN6N2lrvwh3m4240cGm90xxtwoDRoXYvRu8W6h9T5omr/OHj2g
P3mt2i6DRn9/es4pVdczi5JbigtFdJm+GVpxBWzupUOf/pQiteSgLoaRU2CjozYbNslHsPDr
SWrHtAurIKJuSwO9awBeJQ7o6xriWi1LWenvcUQnMFll4PTZXD4DPG8R6ymMchnZMWcT3kMd
Kqt8qc8k2Nrj+/YjFOik62kvMFcNApQDmQTWyvYkX9PuTGLKddhB1BwdRWtovwx94Thlmyjy
F039pZKYUHxRVbO3MI5DboKeGVz68M63TV3yJF4667QyiWt5fUt5kku0n1bt3crwYbCdm6Kx
s/uS8P5zlWXqdg1v16P6frW2vimamqHHqii8ll2sizomtnuOtbXlHAuxhmQnAPCR506q/tgi
eFZzmJJGgbXUaoPMQaWXktaVm97T0uqdpqq/7VQ=
/


--
-- PRO_COLL_SL_NO_TEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_coll_sl_no_temp wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
a69 378
84LVU9RAlmvWwJxmLC3ie43hBkcwg83DzCDrfC+LrZ0Gh2nfvWvi0yjY/IT8cU2vLYIFMTxJ
CvwJN3cqjB4cyDOGLRMbUvIrBMrIL/7I27y7/5xymkwbRK9XnOe/EyVWlz2XaGRHRSEFBjPL
3OGmhV9a0/JQyASrmF8UWGDAzuXmFMP342tY+rAvJuOzfXR6x7ntnOfUX+BAmZiOvmGuQbC2
2HNY1V4+jPWGZE5bsPtcyzLejoddhXljes2Jpklqr4+O/8bfPguMAFSAq15dkg4Zh3z3EbO5
qRc3CiO6pRNBZXYn1NVd90e2z4C+mWv0xosEFQNQzfw+wM5smeXqx9wBnojTsuCbGbx00Al0
NASXDX2buRK2PgnjSfcmUY3BmOxRjWgiCkEBffka3LaSocoGLap6fJJrXoR57tkromC4YK3s
Lxws2pIN2UsZeSranoNGvHxWOu4QLcVvurSV9ZSLwO2LMDuW7znZLkKZeChOXH1JavYUvmAO
3hh/Dd5z0jW1AIpXgdoVrrQpNupBl/S6QIwOIvdw6Cal4qWXoWrA04B7ZfSFQmiSbn57Mnbl
/s9oXslUOA7JHSN1JHQeh6LQeM9m6O3ovMpL9fKy6sOu7nQlfYOHYEqlYd9aPmRh/1ZbkWB1
O99mXkbu3UjniIx+hdqKAmDzedAcQ+/ZSV/TS2mvFymakWzzmyikqm6Y/1Fk/Xsn/RAfGRmi
H/1X9ivalZkKeSnXbiAaP7QM/Kxrid7roXoZEGZeB++/tF9oADMsiOyhwH4nM5W1LBokTeJB
q2oAmsHlzuRp2B9EpcCZ2Zs4EAtPE08RKy1Azcbhp0+5H05c+w8YOjmXbHqMAqogwVTzJZGO
U4FtZEHArrA=
/


--
-- PRO_CONTROL_OFFICE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_control_office wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
838 2b9
mNelXoE28tBkkxPDhXGi+VLJz60wgztcLiCGyi9Vgp2s2eUtwzuDoBLeiR2ohoPTRJnUKcYC
hA2NxVwuXM21sQa0qHC2scyc/UdONFjBeGnelThM9g4sT7r4NBC1+L4QAwWcnLHBJPVgFmP9
Cps0XXA67Msra7tFpZbQkvTQlG7ET+KI4S5kG6CEXKdSVnhw6uyhh4pCw/AunuhCr9J6YKsb
3c6s1Miu8mV/vSbuYXqpCxT6Wt6DSlPxTY3joq3lrG1VVoREH4fM2YgZQOy5vn1+QTJ8hx43
zlu0Q+k8t6ByDcBi+huNaeVmYjkc8hr+RIWRlmNrwm/gNXv1WCwCPmg12spFX9sfBvRzZcqp
77KrSVLNY6KU1esdXaNVRPLGzLHIA6Vr3QHlfppcULrOSafSigabVhXbeQ0KlBZ6+zjx+osP
SQyDu4taOl5XZNyPz5IsRrFJL5K+c8vuu7bnKOqXFGAp2JBbF6Xda+b+D1pyfvHFxgrXJslS
dPhVQdgFM2DoE5w1rzj5SJFgf+0mLTlL4n7MqxTMhGopvbtBTdWLnrtIM5SPAFd/dGXwzcy2
jf01F+KdVfqt6UwM3BeLsyH4Vk6edD0u8tpQMjDtWcN+RUjv/LJwD5exx5Mlw++8e+Bi7D9K
brO2eMNd2iBF+baCZRTwTBMXkTXsNiT5+/lZcqM=
/


--
-- PRO_COST_CENTER_VOUCHER_NO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_cost_center_voucher_no wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
ae2 3c9
RDB9aMhIlbFmCnFPFWhkMuxaa9kwg1Ur2iAFfC+52A9SDKj9lODVRGXbuPsCUQv7ZSbIiV6u
dm6mTHYf3oM+JLyAABEJp13LpBgZ5vTkuYbt9bDmuObrCWnO+SN3+IbQeO2qP0ISPz2dSiT+
mrgQrRUUpqnmttGNG4k+xaWkZTkN2JVgTj3F79LlhyGhJOVMNYyjINkMwujhv6/rBRus2LZS
VTdj9FHRRzR4yAk86njA9PQI/Imc5R9gAo/LVYhWdTlYIVA7HkUBnK0cbEZ9XBuh8R6kLri3
InFCcNaEhOUwNqXEXZ+9Tul5o8YxtwTrucc7ohUaGVo9DQp/5Wuo8l0bbXmn2HTJv/Nos/hf
iDL4UEJg9yGwovvuWb1B9gzzMELDaHivAEy9vFLY3S8Kwrim0H0ARAx0DJ3DH7KJP2ygaYi/
foQuOXFrvHp5BtVO00PGOe9yl3rE2FZMNjfBxQWLfCkKN+eLXs42UlCBmMRT4XK1QXuZerWU
ZCRu9LWo6S8iANfLBzHV8lcACt3a5Rw+YK/leJxajeeBgHRcJi3SX/vvguIgiWDCPKbZUeCk
CJo2GY60Qt330gn1teuPgXcSXIrYRUmz1YfCM+9OmSILtAtcTOyMNb9jxgg/yvVz/amTsWaF
Sx6ZAxrF4TRnjWX8158kXHiLBRSWJkb08DBX0MFS57u7G73ou/7DNaRzqAs7cOLLB54S+61a
MsL8x3YPtdUrQpWUKscEty238GxSBK1510kND2VfdAmK5VJMDXkk1ysy76QJJuwpH3X92F6v
GXo0TCPfslkEX1JXme2/cu7MkYcUKXX3eNT/zDkTmjcbITtlpNyYC+gVEb48futQ7JWBmofr
R1hBttq6g4L+eGO58IEALretc5eTx54kBhkAefJ/E23d9lqQsx6RS9nB3AUzT7LEQ4RKcv0a
6ZLmpRl0DkQsPx28pD/L
/


--
-- PRO_CPF_INVESTMENT_INT_CAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_cpf_investment_int_cal wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
24d3 729
+1fcDk1HUklk8YmViLe25B7x2hMwg82jBUoF3y/NA53gGVYBQ/ABmP2Rsh9Q8vUrmVVZzMvk
FI41no4R6w5M0j4sDwkf8jTj8XjLqzYbS6miywfHyYu4EVKCbpIWFnyscqq1XD/O5Lo6+LCq
JPlO5MHGrnLSCL7kpR4scNemytVqXVSS+yFiPgZbRpAjhf5RZaXnxaHymjFegmldBEWf0ku1
fe49R0ECrbZX8oIe1BnE17ijFDbbK2R0PIMZ8nszVLDvWVoplVFRKweY9XABx6+GIa+X5ZtG
eti2fmPxoFn+d0teWKh2OR0JWQz10/B30YMm2u7u6SjRXITSywo9r3PLpzvS/FYpgZMlEwMa
NXlx7NbrRkUffdYbE0Y4PQKsHQIzqRkCvROF+TM+QC8VNth26YVJacevN9EBtII+fwxz5XgO
AC2AnnbxXvqIayEbIxWO3KvazZmhAczfdD9hFz4YwNOMRlpmuyzzbFLcfRitinC5/41DNBQR
iujh+n/hCkOg69IFg61YBz42wJdpO1PxGCUh9hr9nHfDY6/sMrQRBKthR3Rp8nL+Ut0WfLZQ
uAtqBZL3QE2zNMESHS5r6Ld6URodykiZ/jvxqd2yUwW8cdAzcdg/IJVpiYxIYGcI0yGy51k2
9d7Wk03+cdoMmkmnvA1+tyC4EgUypW4eRDyOuj40Pd/fghfYPNoNC3rfac2w2idNyE176jLu
IElimDV/smfRZf7aYigx26DT4fa8nx/7mx/HzpsCgcLsRKcvLFuLdWG+ef7NBuiBPPgCZi8z
+zVxfysLZNhw1VnI5mJA19mzpqP8/jYGIaZt4X6/r3/Y/8geMAW04HyOLAMBsb+/HdNfEfXO
F1V8RMUyeL20mj1s9MWZ1hVtFLVNlVhFMdOknS+I3gwhNhAIHNyWGXyUGj/ENmad5dPt0crf
NMmU3t7aUHeBGfHUDas93UtNYe0JUgUdPLyn5HuOOjdpDCsML8ub3ElXkgEm2HIG1onGUlkD
BBwvQtB9dr8hwxchYd47B5Qr9LuHq6+LJee5YC/Y0fCP12PzNKQ1S7wv4QNVepWnA6ErmArz
Aw33HGjTKAn+UCKFyzlbn3xwW7gjdi/q89Dh1+H4nMwucihMOh2BFiSgJjPFM8DzElQmtAeh
KhPvt7EqsUjvNmKex2zBf1weQrBpzr1eHzvWCWHL7wJtCgqqVsu+vzTs4zN1rX8NGnfXhRMp
+2gQXDa3ZhigfxhAGPejaDlS9fqY9R+HYLexfcjlLvq5zGJhPs3DGpaR5GAPrtH6zrBmvmX5
WdRk4l+1IgS1w6IkBIaafXIPnJHPSsLVhnKR5JKXzrvWCCauP3zUmNk3LJachjT5DGiNTsn/
IOJutZ2tINLhfLuEMnSl8Qguawz5f/q8P/99+rc2RNb1EvdF4j2Rc3tsM4r9ckWthoaPdYMD
M+AueB4LT+AUwOeWOPHvWfxyJF67GjADg7pnP7IL43/ZRlcuhYwdboG+Hd5A8XxC6hzthXxY
BRWWLnMW1zE0W3so5jO14UApODIKg4vgtdSBj9+j9Dh7cwjrnvsAbzJyEzNCn2BfPiXhQ3dC
xDv4YOKudKe9tTXuTU8ppO48cg59FlfqUzhT9zkD8xfBsDQzZa/pBtY9NAXcu+gV7iz3X989
nXukP6syMPCrn1PAC4JS+GOhbzYyQCWPIWHZ+zitIsTeLjKkIyN/81THKe+HnavPVtzS61fL
+BDyDfeX8SPgfRAt9vlS5tJL6KoAUJ3Mko15YL7IuQVJmDV2t66CBk05Rm83PM89M/+4kqBz
KSTycF7h
/


--
-- PRO_CPF_INVESTMENT_INT_CAL_BKP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_cpf_investment_int_cal_bkp wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
2772 79a
BAXLaGaOsijrqegUHchVaL1pfPAwg82jVSAa3y+7gqqVNGKRoUUss5DsIffnMLbFb28LM0hP
aRJF8lwF9ndgEEUkvN85C/0TAQMFcRwGSd2GOptHIDlHOReoGPJfjwi7neWu0J0rnRA6/k4k
rqo/+Zuilk/lriS1zHOb+O9Ty6Z+5VdVKzg211rZgaQVIk+e1hoY4azF8bMSnz1ZiURASH4d
diI2MO4w3HF8rDth8SifqjsuZEtSe9Ve4fyPGDeY0qtRIQrCXA3/CZtwSeDURPaNTAwhTzpL
ab7pr8tZRqTaZUqQkaoNagAdAiF/3vFhFTVaBlaNPfFNtM09sker/KSeuMJeXCH8p/1olimn
/V2DY4s5upKnXcfltn8gTeUF4FbuwFbuQ1TmfSg1WvS5UBBuM4wTkuahifYHs9hldH/bPlNE
8mlaqRdYKExnwvYJOKfDgevjIpNbGtt/MT1Hdi5YlP88L0grVk3MNTwWbKv6B1ui67zKiQz7
eHxYrvUcLxrMjJlsWsS9U2LhztfHclPJtnDlbzF5LxdxXmyTYd5N/YJCiwmqvRt3hdgu3hfd
icXnhHYtpTKO9kbCCESdXcvJburhxRF63yj6HfLaHcMavidYol2j6Pdn5sil+Kd0bAKgpPA7
Z8Qe71NZ5vDmHFk4uXgot9jj6/j80VohqmH5fdKblJRuEBIZv3fIxHvsEm6N/VMFNR7U1CFv
L9Xuw5TqZEh2hCt3x+kyB4VbRhHj1b3uhNOOGkDL6n/rTlk0TdlGfqchWe1KSlEXE6zS8ZSI
8CYotl9JQVsfH6Qtof9Ns55C39an0Pz3CzE93xzZ28dKTD4B2qAxSQGxOzlfJxslNyLUwBkN
N0kc9eoj8FGTJoXT82qBS0Bgji56zghvG4KIvRIY3o2n8rr/j8/DpX+9GQ3ULl5Vpyh6MxL5
uFluMP01WETM28cDDqPuZbL4ey1gqYMQ3K8R5EFyk6SgzdGcPww1lQkOdNHNCuI7GQtFJSvS
uIWk28phGtTg1+4X9Qukx7hOfz3gNT62czltq+k1jcW7RfKUrQrunB+/KLwX8NRZvbc7jQwP
hViLdNS4OkoNK/Gdg5v9joWgwaBXGqcw/w19k2SIbmE/kNDQDgDWKvMMmXhvIsnMcivkmxoY
nf0Jz1IJlZpPwwgsQI4PQcMIOooa7HIfhOX+xJzg4+TY3gPAOpNVWekByIVaauxKbjL8irKp
n/PTFw2PNbr2y/5fqM4S470jPtmAlILaeHw0R1j4vkhWzTKWmg86e2sdlHws5Tfg1Q3AUFIc
0ZnPU3NvjasVosI+i91OcNZyKCAmvD8NIFCvR101/TTvujTWBdogoNTsY//MnojyS5A/g22P
h9jjIJkda+1kRYunknuKW5ii835mJTnvsDEQABN92sGCCIslaQMZpYsTBteuAZtAeO8+D9oZ
VocqGXf3M8IwThlQJ7zu13iVE1YUIDCC8ZsNhtebXIYupN6WbXhOWCmyCLJShy9SOV9ILRG0
liquGatEKedN/OF+liYUj1Pv+/61+2pe3e7HncEsSycj3cad7X4HszB64Z12/Ie8G3fN7dyK
2YiI0DiO+YoFr+5SrOM/K2fQhyEi7AdU/GxHNgpA07PkYrNi4A9vjbv+UqPKWc7q2czG7eBT
zSkQ3YVUFoNhCXbD+MpmA6WoBQ6JpFwg1tthCU3KP0zI/8QQ4zG1Z2ENUnMLhP3em64oOjQ4
oX72KQorDPugsvzilgX2F3dvCevyw2nqTKD/q1cuyTsYLqhzifqx/8l3jM/aHzGNl/qzwxNo
dL5htJRosNc1cMe7OiUIt5a8yDEN7iCgvH0qEDeqb/6jyz4SSQ0GFNzakvGqxAR8D5MBLj4+
T+xXcjweuRq+sA+jG6F4JsWM/96QzHgF9BrqsZpzW6DHYSg=
/


--
-- PRO_DATA_PREPARE_SMS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_data_prepare_sms 
-- P_DATA_TP=1 FOR PREMIUM, 2 FOR DEMAND NOTICE, 3 FOR LAPSE NOTICE 4.PROPOSAL, 5. Recruitment of FA and Employer of FA
(
   p_pgid                VARCHAR2,
   p_data_tp             VARCHAR2,
   p_schedule_tp         VARCHAR2,
   p_date_from           DATE,
   p_date_to             DATE,
   p_error_msg     OUT   VARCHAR2
)
/*
=======================================================================
    || creation history ||
-----------------------------------------------------------------------
    author      :
    purpose      :
    creation date :

-----------------------------------------------------------------------
     || modification history ||
-----------------------------------------------------------------------
     version no.    date:        author:                  ver:     area of change:
-----------------------------------------------------------------------
     1.0            31/07/2016   sharmin sultana prite             1.change insert area.add sms_message
                                                                   2. add proposal no part

    1.1             02/01/2017   sharmin sultana prite             1. add parameter p_data_tp,p_shedule_tp
    1.2             17/07/2018   Md. Sayadur Rahaan                add parameter 5. Recruitment of FA and Employer of FA
=======================================================================
*/
IS
   v_pre_data_cnt          NUMBER (10)                       := 0;
   v_last_adv_receive_id   acc_receivables.receive_id%TYPE;
   v_last_rec_receive_id   acc_receivables.receive_id%TYPE;
   v_last_par_receive_id   acc_receivables.receive_id%TYPE;
   v_cur_adv_receive_id    acc_receivables.receive_id%TYPE;
   v_cur_rec_receive_id    acc_receivables.receive_id%TYPE;
   v_cur_par_receive_id    acc_receivables.receive_id%TYPE;
   v_pgid                  VARCHAR2 (100);
   v_proposal              VARCHAR2 (100);
   v_process_st_dt         DATE;
   v_process_msg           VARCHAR2 (500);
   v_schedule_tp           VARCHAR2 (1);
   v_coll_amt              VARCHAR (20);
   v_risk_dt               DATE;
   v_schedule_tp_nm        VARCHAR (100);
   v_data_tp_nm            VARCHAR (100);
BEGIN
   v_process_st_dt := SYSDATE;

   SELECT l.last_adv_receive_id, l.last_rec_receive_id, l.last_par_receive_id
     INTO v_last_adv_receive_id, v_last_rec_receive_id, v_last_par_receive_id
     FROM gen_schd_bassed_pro_log l
    WHERE l.process_id = 6;

   --modified by prite 01-01-2017 .p_schedule_tp= '1' from schedule date wise date by search and '2'  from ui wise date by serch in where condition
   v_schedule_tp := p_schedule_tp;

   IF v_schedule_tp IS NULL
   THEN
      v_schedule_tp := 1;
   END IF;

   IF v_schedule_tp = '1'
   THEN
      v_schedule_tp_nm := 'Current datewise schedule generated';
   ELSE
      v_schedule_tp_nm := 'UI datewise schedule generated';
   END IF;

   IF p_data_tp = '1'
   THEN
      v_data_tp_nm :=
                   'Schedule is generated for ''Advance Premium Collection''';
   ELSIF p_data_tp = '2'
   THEN
      v_data_tp_nm :=
                  'Schedule is generated for ''Deffered Premium Collection''';
   ELSIF p_data_tp = '3'
   THEN
      v_data_tp_nm :=
                   'Schedule is generated for ''Partial Premium Collection''';
   ELSIF p_data_tp = '4'
   THEN
      v_data_tp_nm := 'Schedule is generated for ''Proposal''';
   ELSIF p_data_tp = '5'
   THEN
      v_data_tp_nm :=
         'Schedule is generated for ''Recruitment of FA and Employer of FA''';
   END IF;

   IF p_data_tp = '1' OR p_data_tp IS NULL                     --//for premium
   THEN
      BEGIN
         IF v_last_adv_receive_id IS NULL
         THEN
            INSERT INTO sms@dbl_smsdb
                        (pgid, policy_no, premium, mobile, receive_id,
                         data_type, sms_message, i_dt, i_usr, receive_sl_no)
               SELECT r.pgid, p.policy_no, r.coll_amount, a.mobile_no,
                      r.receive_id, 1,
                      (   'Welcome, '
                       || CHR (10)
                       || 'we received Tk. '
                       || r.coll_amount
                       || ' with Thanks against your proposal no '
                       || p.proposal_no
                       || '. your proposal is under processing.'
                      ) sms,
                      SYSDATE, USER, r.slno
                 FROM acc_advance_receivables r,
                      ins_p_address a,
                      ins_p_proposal p
                WHERE r.pgid = a.pgid
                  AND r.pgid = p.pgid
                  AND r.i_usr <> 'SLICL'
                  AND (   (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                       OR (    p_pgid IS NULL
                           AND (   (    NVL (v_schedule_tp, 1) = 1
                                    AND TRUNC (r.i_dt) = TRUNC (SYSDATE)
                                   )
                                OR (    v_schedule_tp = 2
                                    AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                           AND p_date_to
                                   )
                               )
                          )
                      )
                  AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                                            TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                  AND NOT EXISTS (
                         SELECT 1
                           FROM sms@dbl_smsdb sms
                          WHERE sms.pgid = p.pgid
                            AND r.slno = sms.receive_sl_no
                            AND r.receive_id = sms.receive_id
                            AND data_type = '1')
                  AND a.mobile_no IS NOT NULL
                  AND LENGTH (a.mobile_no) = 11;
         ELSE
            INSERT INTO sms@dbl_smsdb
                        (pgid, policy_no, premium, mobile, receive_id,
                         proposal_no, data_type, sms_message, i_dt, i_usr,
                         receive_sl_no)
               SELECT r.pgid, p.policy_no, r.coll_amount, a.mobile_no,
                      r.receive_id, p.proposal_no, 1,
                      (   'Welcome, '
                       || CHR (10)
                       || 'we received Tk. '
                       || r.coll_amount
                       || ' against your proposal no '
                       || p.proposal_no
                       || '. your proposal is under processing.'
                      ) sms,
                      SYSDATE, USER, slno
                 FROM acc_advance_receivables r,
                      ins_p_address a,
                      ins_p_proposal p
                WHERE r.pgid = a.pgid
                  AND r.pgid = p.pgid
                  -- and r.receive_id > v_last_adv_receive_id   --//disable by prite
                  AND r.i_usr <> 'SLICL'
                  AND (   (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                       OR (    p_pgid IS NULL
                           AND (   (    v_schedule_tp = 1
                                    AND TRUNC (r.i_dt) = TRUNC (SYSDATE)
                                   )
                                OR (    v_schedule_tp = 2
                                    AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                           AND p_date_to
                                   )
                               )
                          )
                      )
                  AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                                            TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                  AND NOT EXISTS (
                         SELECT 1
                           FROM sms@dbl_smsdb sms
                          WHERE sms.pgid = p.pgid
                            AND r.slno = sms.receive_sl_no
                            AND r.receive_id = sms.receive_id
                            AND data_type = '1')
                  AND a.mobile_no IS NOT NULL
                  AND LENGTH (a.mobile_no) = 11;
         END IF;

         COMMIT;

         SELECT MAX (receive_id)
           INTO v_cur_adv_receive_id
           FROM sms@dbl_smsdb
          WHERE data_type = 1;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := 'Proposal error: ' || SQLERRM;
            ROLLBACK;
      END;
   END IF;

   --data_type:2 for def/ren prem coll
   IF p_data_tp = '2' OR p_data_tp IS NULL
   THEN
      BEGIN
         IF v_last_rec_receive_id IS NULL
         THEN
            INSERT INTO sms@dbl_smsdb
                        (pgid, policy_no, premium, mobile, receive_id,
                         data_type, receive_date, sms_message, receive_sl_no,
                         i_dt, i_usr)
               SELECT r.pgid, p.policy_no, r.coll_amount, a.mobile_no,
                      r.receive_id, 2, r.receive_date,
                      (   'Dear Sir/Madam, '
                       || CHR (10)
                       || 'Thanks  for deposit TK '
                       || r.coll_amount
                       || ' against your policy no- '
                       || p.policy_no
                       || ' on '
                       || r.receive_date
                       || ' SLICL '
                      ) sms,
                      NULL, SYSDATE, USER
                 FROM acc_receivables r, ins_p_address a, ins_p_proposal p
                WHERE r.pgid = a.pgid
                  AND r.pgid = p.pgid  -- and trunc (r.i_dt) = trunc (sysdate)
                  AND r.i_usr <> 'SLICL'
                  AND (   (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                       OR (    p_pgid IS NULL
                           AND (   (    v_schedule_tp = 1
                                    AND TRUNC (r.i_dt) = TRUNC (SYSDATE)
                                   )
                                OR (    v_schedule_tp = 2
                                    AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                           AND p_date_to
                                   )
                               )
                          )
                      )
                  AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                                            TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                  AND NOT EXISTS (
                         SELECT 1
                           FROM sms@dbl_smsdb sms
                          WHERE sms.pgid = p.pgid
                            AND r.receive_id = sms.receive_id
                            AND data_type = '2')
                  AND a.mobile_no IS NOT NULL
                  AND LENGTH (a.mobile_no) = 11;
         ELSE
            INSERT INTO sms@dbl_smsdb
                        (pgid, policy_no, premium, mobile, receive_id,
                         data_type, receive_date, sms_message, receive_sl_no,
                         i_dt, i_usr)
               SELECT r.pgid, p.policy_no, r.coll_amount, a.mobile_no,
                      r.receive_id, 2, r.receive_date,
                      (   'Dear Sir/Madam, '
                       || CHR (10)
                       || 'Thanks  for deposit TK '
                       || r.coll_amount
                       || ' against your policy no- '
                       || p.policy_no
                       || ' on '
                       || r.receive_date
                       || ' SLICL '
                      ) sms,
                      NULL, SYSDATE, USER
                 FROM acc_receivables r, ins_p_address a, ins_p_proposal p
                WHERE r.pgid = a.pgid
                  AND r.pgid = p.pgid
                  -- and r.receive_id > v_last_rec_receive_id  --//disable by prite
                  AND r.i_usr <> 'SLICL'
                  -- and trunc (r.i_dt) = trunc (sysdate)
                  AND (   (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                       OR (    p_pgid IS NULL
                           AND (   (    v_schedule_tp = 1
                                    AND TRUNC (r.i_dt) = TRUNC (SYSDATE)
                                   )
                                OR (    v_schedule_tp = 2
                                    AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                           AND p_date_to
                                   )
                               )
                          )
                      )
                  AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                                            TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                  AND NOT EXISTS (
                         SELECT 1
                           FROM sms@dbl_smsdb sms
                          WHERE sms.pgid = p.pgid
                            AND r.receive_id = sms.receive_id
                            AND data_type = '2')
                  AND a.mobile_no IS NOT NULL
                  AND LENGTH (a.mobile_no) = 11;
         END IF;

         COMMIT;

         SELECT MAX (receive_id)
           INTO v_cur_rec_receive_id
           FROM sms@dbl_smsdb
          WHERE data_type = 2;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := v_process_msg || '; Def_Ren error: ' || SQLERRM;
            ROLLBACK;
      END;
   END IF;

   --data_type:3.for partial coll
   IF p_data_tp = '3' OR p_data_tp IS NULL
   THEN
      BEGIN
         IF v_last_par_receive_id IS NULL
         THEN
            INSERT INTO sms@dbl_smsdb
                        (pgid, policy_no, premium, mobile, receive_id,
                         data_type, receive_date, sms_message, receive_sl_no,
                         i_dt, i_usr)
               SELECT r.pgid, p.policy_no, r.coll_amount, a.mobile_no,
                      r.receive_id, 3, r.receive_date,
                      (   'Dear Sir/Madam, '
                       || CHR (10)
                       || 'Thanks  for deposit TK '
                       || r.coll_amount
                       || ' against your policy no- '
                       || p.policy_no
                       || ' on '
                       || TO_CHAR (r.receive_date, 'dd/mm/rrrr')
                       || ' SLICL '
                      ) sms,
                      NULL, SYSDATE, USER
                 FROM acc_partial_receivables r,
                      ins_p_address a,
                      ins_p_proposal p
                WHERE r.pgid = a.pgid
                  AND r.pgid = p.pgid   --and trunc (r.i_dt) = trunc (sysdate)
                  AND r.i_usr <> 'SLICL'
                  AND (   (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                       OR (    p_pgid IS NULL
                           AND (   (    v_schedule_tp = 1
                                    AND TRUNC (r.i_dt) = TRUNC (SYSDATE)
                                   )
                                OR (    v_schedule_tp = 2
                                    AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                           AND p_date_to
                                   )
                               )
                          )
                      )
                  AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                                            TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                  AND NOT EXISTS (
                         SELECT 1
                           FROM sms@dbl_smsdb sms
                          WHERE sms.pgid = p.pgid
                            AND r.receive_id = sms.receive_id
                            AND data_type = '3')
                  AND a.mobile_no IS NOT NULL
                  AND LENGTH (a.mobile_no) = 11;
         ELSE
            INSERT INTO sms@dbl_smsdb
                        (pgid, policy_no, premium, mobile, receive_id,
                         data_type, receive_date, sms_message, receive_sl_no,
                         i_dt, i_usr)
               SELECT r.pgid, p.policy_no, r.coll_amount, a.mobile_no,
                      r.receive_id, 3, r.receive_date,
                      (   'Dear Sir/Madam, '
                       || CHR (10)
                       || 'Thanks  for deposit TK '
                       || r.coll_amount
                       || ' against your policy no- '
                       || p.policy_no
                       || ' on '
                       || TO_CHAR (r.receive_date, 'dd/mm/rrrr')
                       || ' SLICL '
                      ) sms,
                      NULL, SYSDATE, USER
                 FROM acc_partial_receivables r,
                      ins_p_address a,
                      ins_p_proposal p
                WHERE r.pgid = a.pgid
                  AND r.pgid = p.pgid
                  --  and r.receive_id > v_last_par_receive_id        --//disable by prite
                              -- and trunc (r.i_dt) = trunc (sysdate)
                  AND r.i_usr <> 'SLICL'
                  AND (   (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                       OR (    p_pgid IS NULL
                           AND (   (    v_schedule_tp = 1
                                    AND TRUNC (r.i_dt) = TRUNC (SYSDATE)
                                   )
                                OR (    v_schedule_tp = 2
                                    AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                           AND p_date_to
                                   )
                               )
                          )
                      )
                  AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                                            TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                  AND NOT EXISTS (
                         SELECT 1
                           FROM sms@dbl_smsdb sms
                          WHERE sms.pgid = p.pgid
                            AND r.receive_id = sms.receive_id
                            AND data_type = '3')
                  AND a.mobile_no IS NOT NULL
                  AND LENGTH (a.mobile_no) = 11;
         END IF;

         COMMIT;

         SELECT MAX (receive_id)
           INTO v_cur_par_receive_id
           FROM sms@dbl_smsdb
          WHERE data_type = 3;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := v_process_msg || '; Partial error: ' || SQLERRM;
            ROLLBACK;
      END;
   END IF;

   --data_type:4.for proposal
   IF p_data_tp = '4' OR p_data_tp IS NULL
   THEN
      --  v_process_st_dt := sysdate;
      BEGIN
         SELECT COUNT (l.pgid)
           INTO v_pgid
           FROM ins_p_proposal l
          WHERE l.u_usr <> 'SLICL';
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := SQLERRM;
      END;

      BEGIN
         IF v_pgid > 0
         THEN
            INSERT INTO sms@dbl_smsdb
                        (pgid, policy_no, mobile, data_type, risk_date,
                         sms_message, receive_sl_no, i_dt, i_usr)
               SELECT p.pgid, p.policy_no, a.mobile_no, 4, s.risk_date,
                      (   'Welcome, '
                       || CHR (10)
                       || 'Thanks for opening the policy in our company. Your policy no '
                       || p.policy_no
                       || '.We have covered the risk for your life from '
                       || TO_CHAR (s.risk_date, 'dd/mm/rrrr')
                      ) sms,
                      NULL, SYSDATE, USER
                 FROM ins_p_address a, ins_p_proposal p, ins_p_summery s
                WHERE a.pgid = p.pgid
                  AND s.pgid = p.pgid
                  -- and trunc (p.u_dt) = trunc (sysdate)
                  AND p.i_usr <> 'SLICL'
                  AND a.mobile_no IS NOT NULL
                  AND LENGTH (a.mobile_no) = 11
                  --and p.pgid = nvl (p_pgid, p.pgid)
                  AND (   (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                       OR (    p_pgid IS NULL
                           AND (   (    v_schedule_tp = 1
                                    AND TRUNC (p.u_dt) = TRUNC (SYSDATE)
                                   )
                                OR (    v_schedule_tp = 2
                                    AND TRUNC (p.u_dt) BETWEEN p_date_from
                                                           AND p_date_to
                                   )
                               )
                          )
                      )
                  AND p.policy_no IS NOT NULL
                  AND NOT EXISTS (SELECT 1
                                    FROM sms@dbl_smsdb sms
                                   WHERE sms.pgid = p.pgid AND data_type = '4');
         ELSE
            INSERT INTO sms@dbl_smsdb
                        (pgid, policy_no, mobile, data_type, risk_date,
                         sms_message, receive_sl_no, i_dt, i_usr)
               SELECT p.pgid, p.policy_no, a.mobile_no, 4, s.risk_date,
                      (   'Welcome, '
                       || CHR (10)
                       || 'Thanks for opening the policy in our company. Your policy no '
                       || p.policy_no
                       || '.We have covered the risk for your life from '
                       || TO_CHAR (s.risk_date, 'dd/mm/rrrr')
                      ) sms,
                      NULL, SYSDATE, USER
                 FROM ins_p_address a, ins_p_proposal p, ins_p_summery s
                WHERE a.pgid = p.pgid
                  AND s.pgid = p.pgid
                  AND p.i_usr <> 'SLICL'
                  -- and p.pgid = nvl (p_pgid, p.pgid)
                  AND (   (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                       OR (    p_pgid IS NULL
                           AND (   (    v_schedule_tp = 1
                                    AND TRUNC (p.u_dt) = TRUNC (SYSDATE)
                                   )
                                OR (    v_schedule_tp = 2
                                    AND TRUNC (p.u_dt) BETWEEN p_date_from
                                                           AND p_date_to
                                   )
                               )
                          )
                      )
                  AND TO_DATE (p.u_dt, 'DD/MM/RRRR') >=
                                            TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                  AND NOT EXISTS (SELECT 1
                                    FROM sms@dbl_smsdb sms
                                   WHERE sms.pgid = p.pgid AND data_type = '4')
                  AND a.mobile_no IS NOT NULL
                  AND LENGTH (a.mobile_no) = 11
                  AND p.policy_no IS NOT NULL;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := 'Proposal error: ' || SQLERRM;
            ROLLBACK;
      END;
   END IF;

   --data_type:5. Recruitment of FA and Employer of FA
   IF p_data_tp = '5' OR p_data_tp IS NULL
   THEN
      BEGIN
         FOR i IN
            (SELECT a.agent_id fa_emp_gid, a.agent_id fa_emp_id,
                    '05' emp_type_cd, a.join_dt, TRIM (d.mobile) mobile,
                       'Congratulation '
                    || CASE
                          WHEN a.sex_cd = '1'
                             THEN 'MR. '
                          WHEN a.sex_cd = '2' AND a.marital_stat_cd = '0'
                             THEN 'MISS. '
                          WHEN a.sex_cd = '2' AND a.marital_stat_cd <> '0'
                             THEN 'MRS. '
                          ELSE NULL
                       END
                    || a.agent_nm_eng
                    || '. You are FA in SLIC. Your ID is '
                    || a.agent_id
                    || '. Welcome to SLIC Family.' sms_message,
                    SYSDATE, USER, 'F' emp_type
               FROM hrm_agent a, hrm_agent_detl d
              WHERE a.agent_id = d.agent_id
                AND d.mobile IS NOT NULL
                AND LENGTH (TRIM (d.mobile)) = 11
                AND NVL (a.recruit_msg_st, '0') = '0'
                AND a.join_dt >= TO_DATE ('01-jan-2018')
                AND a.activity_cd = '01'
             UNION ALL
             SELECT TO_CHAR (a.emp_gid) fa_emp_gid, a.emp_id fa_emp_id,
                    a.emp_type_cd emp_type_cd, a.join_dt,
                    TRIM (d.mobile) mobile,
                       'Congratulation '
                    || CASE
                          WHEN a.sex_cd = '1'
                             THEN 'MR. '
                          WHEN a.sex_cd = '2' AND a.marital_stat_cd = '0'
                             THEN 'MISS. '
                          WHEN a.sex_cd = '2' AND a.marital_stat_cd <> '0'
                             THEN 'MRS. '
                          ELSE NULL
                       END
                    || a.emp_nm_eng
                    || '. You are '
                    || e.short_nm
                    || ' in SLIC. Your ID is '
                    || a.emp_id
                    || '. Welcome to SLIC Family.' sms_message,
                    SYSDATE, USER, 'E' emp_type
               FROM hrm_employee a, hrm_employee_detl d, hrm_emp_type e
              WHERE a.emp_gid = d.emp_gid
                AND a.emp_type_cd = e.emp_type_cd
                AND a.employment_tp_cd = '02'
                AND d.mobile IS NOT NULL
                AND LENGTH (TRIM (d.mobile)) = 11
                AND NVL (a.recruit_msg_st, '0') = '0'
                AND a.join_dt >= TO_DATE ('01-jan-2018')
                AND a.activity_cd = '01')
         LOOP
            INSERT INTO dbl_sms_faumbm_new@dbl_smsdb
                        (fa_emp_gid, fa_emp_id, emp_type_cd,
                         join_dt, mobile, sms_message, i_dt, i_user
                        )
                 VALUES (i.fa_emp_gid, i.fa_emp_id, i.emp_type_cd,
                         i.join_dt, i.mobile, i.sms_message, SYSDATE, USER
                        );

            IF i.emp_type = 'E'
            THEN
               UPDATE hrm_employee
                  SET recruit_msg_st = '1'
                WHERE emp_gid = i.fa_emp_gid;
            ELSE
               UPDATE hrm_agent
                  SET recruit_msg_st = '1'
                WHERE agent_id = i.fa_emp_gid;
            END IF;
         END LOOP;

         COMMIT;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := 'Recruitment of FA  error: ' || SQLERRM;
            ROLLBACK;
      END;
   END IF;

   BEGIN
      --v_process_msg :='"fpr collection " is sucessfully inserted';
      UPDATE gen_schd_bassed_pro_log
         SET process_st_dt = v_process_st_dt,
             process_end_dt = SYSDATE,
             execution_output = v_process_msg,
             last_adv_receive_id =
                CASE
                   WHEN v_cur_adv_receive_id > last_adv_receive_id
                      THEN v_cur_adv_receive_id
                   ELSE NVL (v_cur_adv_receive_id, last_adv_receive_id)
                END,
             last_rec_receive_id =
                CASE
                   WHEN v_cur_rec_receive_id > last_rec_receive_id
                      THEN v_cur_rec_receive_id
                   ELSE NVL (v_cur_rec_receive_id, last_rec_receive_id)
                END,
             last_par_receive_id =
                CASE
                   WHEN v_cur_par_receive_id > last_par_receive_id
                      THEN v_cur_par_receive_id
                   ELSE NVL (v_cur_par_receive_id, last_par_receive_id)
                END,
             remarks =
                   v_schedule_tp_nm
                || 'Advance Receive Id:'
                || NVL (v_cur_adv_receive_id, last_adv_receive_id)
                || 'Current Recive Id:'
                || NVL (v_cur_rec_receive_id, last_rec_receive_id)
                || 'Partial Recive Id:'
                || NVL (v_cur_par_receive_id, last_par_receive_id)
                || 'User: '
                || USER,
             input_parameter =
                   'PGID: '
                || NVL (p_pgid, '0')
                || 'Data Type:'
                || NVL (v_data_tp_nm, '0')
                || 'Schedule Type:'
                || v_schedule_tp_nm
                || 'Date From :'
                || NVL (p_date_from, TO_DATE (SYSDATE, 'dd/mm/rrrr'))
                || 'Date To: '
                || NVL (p_date_to, TO_DATE (SYSDATE, 'dd/mm/rrrr'))
       WHERE process_id = 6;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_process_msg := 'Update error: ' || SQLERRM;
         ROLLBACK;
   END;

   COMMIT;
   p_error_msg := v_process_msg;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error_msg := v_process_msg || '; ' || SQLERRM;
END pro_data_prepare_sms;
/


--
-- PRO_DATA_PREPARE_SMS2  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_data_prepare_sms2-- P_DATA_TP=1 FOR PREMIUM, 2 FOR DEMAND NOTICE, 3 FOR LAPSE NOTICE 4.PROPOSAL, 5. Recruitment of FA and Employer of FA
(p_pgid              VARCHAR2,
 p_data_tp           VARCHAR2,
 p_schedule_tp       VARCHAR2,
 p_date_from         DATE,
 p_date_to           DATE,
 p_error_msg     OUT VARCHAR2)
/*
=======================================================================
    || creation history ||
-----------------------------------------------------------------------
    author      :
    purpose      :
    creation date :

-----------------------------------------------------------------------
     || modification history ||
-----------------------------------------------------------------------
     version no.    date:        author:                  ver:     area of change:
-----------------------------------------------------------------------
     1.0            31/07/2016   sharmin sultana prite             1.change insert area.add sms_message
                                                                   2. add proposal no part

    1.1             02/01/2017   sharmin sultana prite             1. add parameter p_data_tp,p_shedule_tp
    1.2             17/07/2018   Md. Sayadur Rahaan                add parameter 5. Recruitment of FA and Employer of FA
=======================================================================
*/
IS
   v_pre_data_cnt          NUMBER (10) := 0;
   v_last_adv_receive_id   acc_receivables.receive_id%TYPE;
   v_last_rec_receive_id   acc_receivables.receive_id%TYPE;
   v_last_par_receive_id   acc_receivables.receive_id%TYPE;
   v_cur_adv_receive_id    acc_receivables.receive_id%TYPE;
   v_cur_rec_receive_id    acc_receivables.receive_id%TYPE;
   v_cur_par_receive_id    acc_receivables.receive_id%TYPE;
   v_pgid                  VARCHAR2 (100);
   v_proposal              VARCHAR2 (100);
   v_process_st_dt         DATE;
   v_process_msg           VARCHAR2 (500);
   v_schedule_tp           VARCHAR2 (1);
   v_coll_amt              VARCHAR (20);
   v_risk_dt               DATE;
   v_schedule_tp_nm        VARCHAR (100);
   v_data_tp_nm            VARCHAR (100);
BEGIN
   v_process_st_dt := SYSDATE;

   SELECT   l.last_adv_receive_id,
            l.last_rec_receive_id,
            l.last_par_receive_id
     INTO   v_last_adv_receive_id,
            v_last_rec_receive_id,
            v_last_par_receive_id
     FROM   gen_schd_bassed_pro_log l
    WHERE   l.process_id = 6;

   --modified by prite 01-01-2017 .p_schedule_tp= '1' from schedule date wise date by search and '2'  from ui wise date by serch in where condition
   v_schedule_tp := p_schedule_tp;

   IF v_schedule_tp IS NULL
   THEN
      v_schedule_tp := 1;
   END IF;

   IF v_schedule_tp = '1'
   THEN
      v_schedule_tp_nm := 'Current datewise schedule generated';
   ELSE
      v_schedule_tp_nm := 'UI datewise schedule generated';
   END IF;

   IF p_data_tp = '1'
   THEN
      v_data_tp_nm :=
         'Schedule is generated for ''Advance Premium Collection''';
   ELSIF p_data_tp = '2'
   THEN
      v_data_tp_nm :=
         'Schedule is generated for ''Deffered Premium Collection''';
   ELSIF p_data_tp = '3'
   THEN
      v_data_tp_nm :=
         'Schedule is generated for ''Partial Premium Collection''';
   ELSIF p_data_tp = '4'
   THEN
      v_data_tp_nm := 'Schedule is generated for ''Proposal''';
   ELSIF p_data_tp = '5'
   THEN
      v_data_tp_nm :=
         'Schedule is generated for ''Recruitment of FA and Employer of FA''';
   END IF;

   IF p_data_tp = '1' OR p_data_tp IS NULL                     --//for premium
   THEN
      BEGIN
         IF v_last_adv_receive_id IS NULL
         THEN
            INSERT INTO sms@dbl_smsdb (pgid,
                                       policy_no,
                                       premium,
                                       mobile,
                                       receive_id,
                                       data_type,
                                       sms_message,
                                       i_dt,
                                       i_usr,
                                       receive_sl_no)
               SELECT   r.pgid,
                        p.policy_no,
                        r.coll_amount,
                        a.mobile_no,
                        r.receive_id,
                        1,
                        (   'Welcome, '
                         || CHR (10)
                         || 'we received Tk. '
                         || r.coll_amount
                         || ' with Thanks against your proposal no '
                         || p.proposal_no
                         || '. your proposal is under processing.')
                           sms,
                        SYSDATE,
                        USER,
                        r.slno
                 FROM   acc_advance_receivables r,
                        ins_p_address a,
                        ins_p_proposal p
                WHERE       r.pgid = a.pgid
                        AND r.pgid = p.pgid
                        AND r.i_usr <> 'SLICL'
                        AND ( (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                             OR (p_pgid IS NULL
                                 AND ( (NVL (v_schedule_tp, 1) = 1
                                        AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                               AND  TRUNC(SYSDATE))
                                      OR (v_schedule_tp = 2
                                          AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                                 AND  p_date_to))))
                        AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                              TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                        AND NOT EXISTS
                              (SELECT   1
                                 FROM   sms@dbl_smsdb sms
                                WHERE       sms.pgid = p.pgid
                                        AND r.slno = sms.receive_sl_no
                                        AND r.receive_id = sms.receive_id
                                        AND data_type = '1')
                        AND a.mobile_no IS NOT NULL
                        AND LENGTH (a.mobile_no) = 11;
         ELSE
            INSERT INTO sms@dbl_smsdb (pgid,
                                       policy_no,
                                       premium,
                                       mobile,
                                       receive_id,
                                       proposal_no,
                                       data_type,
                                       sms_message,
                                       i_dt,
                                       i_usr,
                                       receive_sl_no)
               SELECT   r.pgid,
                        p.policy_no,
                        r.coll_amount,
                        a.mobile_no,
                        r.receive_id,
                        p.proposal_no,
                        1,
                        (   'Welcome, '
                         || CHR (10)
                         || 'we received Tk. '
                         || r.coll_amount
                         || ' against your proposal no '
                         || p.proposal_no
                         || '. your proposal is under processing.')
                           sms,
                        SYSDATE,
                        USER,
                        slno
                 FROM   acc_advance_receivables r,
                        ins_p_address a,
                        ins_p_proposal p
                WHERE   r.pgid = a.pgid AND r.pgid = p.pgid -- and r.receive_id > v_last_adv_receive_id   --//disable by prite
                        AND r.i_usr <> 'SLICL'
                        AND ( (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                             OR (p_pgid IS NULL
                                 AND ( (v_schedule_tp = 1
                                        AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                               AND  TRUNC(SYSDATE))
                                      OR (v_schedule_tp = 2
                                          AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                                 AND  p_date_to))))
                        AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                              TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                        AND NOT EXISTS
                              (SELECT   1
                                 FROM   sms@dbl_smsdb sms
                                WHERE       sms.pgid = p.pgid
                                        AND r.slno = sms.receive_sl_no
                                        AND r.receive_id = sms.receive_id
                                        AND data_type = '1')
                        AND a.mobile_no IS NOT NULL
                        AND LENGTH (a.mobile_no) = 11;
         END IF;

         COMMIT;

         SELECT   MAX (receive_id)
           INTO   v_cur_adv_receive_id
           FROM   sms@dbl_smsdb
          WHERE   data_type = 1;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := 'Proposal error: ' || SQLERRM;
            ROLLBACK;
      END;
   END IF;

   --data_type:2 for def/ren prem coll
   IF p_data_tp = '2' OR p_data_tp IS NULL
   THEN
      BEGIN
         IF v_last_rec_receive_id IS NULL
         THEN
            INSERT INTO sms@dbl_smsdb (pgid,
                                       policy_no,
                                       premium,
                                       mobile,
                                       receive_id,
                                       data_type,
                                       receive_date,
                                       sms_message,
                                       receive_sl_no,
                                       i_dt,
                                       i_usr)
               SELECT   r.pgid,
                        p.policy_no,
                        r.coll_amount,
                        a.mobile_no,
                        r.receive_id,
                        2,
                        r.receive_date,
                        (   'Dear Sir/Madam, '
                         || CHR (10)
                         || 'Thanks  for deposit TK '
                         || r.coll_amount
                         || ' against your policy no- '
                         || p.policy_no
                         || ' on '
                         || r.receive_date
                         || ' SLICL ')
                           sms,
                        NULL,
                        SYSDATE,
                        USER
                 FROM   acc_receivables r, ins_p_address a, ins_p_proposal p
                WHERE       r.pgid = a.pgid
                        AND r.pgid = p.pgid -- and trunc (r.i_dt) = trunc (sysdate)
                        AND r.i_usr <> 'SLICL'
                        AND ( (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                             OR (p_pgid IS NULL
                                 AND ( (v_schedule_tp = 1
                                        AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                               AND  TRUNC(SYSDATE))
                                      OR (v_schedule_tp = 2
                                          AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                                 AND  p_date_to))))
                        AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                              TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                        AND NOT EXISTS
                              (SELECT   1
                                 FROM   sms@dbl_smsdb sms
                                WHERE       sms.pgid = p.pgid
                                        AND r.receive_id = sms.receive_id
                                        AND data_type = '2')
                        AND a.mobile_no IS NOT NULL
                        AND LENGTH (a.mobile_no) = 11;
         ELSE
            INSERT INTO sms@dbl_smsdb (pgid,
                                       policy_no,
                                       premium,
                                       mobile,
                                       receive_id,
                                       data_type,
                                       receive_date,
                                       sms_message,
                                       receive_sl_no,
                                       i_dt,
                                       i_usr)
               SELECT   r.pgid,
                        p.policy_no,
                        r.coll_amount,
                        a.mobile_no,
                        r.receive_id,
                        2,
                        r.receive_date,
                        (   'Dear Sir/Madam, '
                         || CHR (10)
                         || 'Thanks  for deposit TK '
                         || r.coll_amount
                         || ' against your policy no- '
                         || p.policy_no
                         || ' on '
                         || r.receive_date
                         || ' SLICL ')
                           sms,
                        NULL,
                        SYSDATE,
                        USER
                 FROM   acc_receivables r, ins_p_address a, ins_p_proposal p
                WHERE   r.pgid = a.pgid AND r.pgid = p.pgid -- and r.receive_id > v_last_rec_receive_id  --//disable by prite
                        AND r.i_usr <> 'SLICL'
                        -- and trunc (r.i_dt) = trunc (sysdate)
                        AND ( (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                             OR (p_pgid IS NULL
                                 AND ( (v_schedule_tp = 1
                                        AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                               AND  TRUNC(SYSDATE))
                                      OR (v_schedule_tp = 2
                                          AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                                 AND  p_date_to))))
                        AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                              TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                        AND NOT EXISTS
                              (SELECT   1
                                 FROM   sms@dbl_smsdb sms
                                WHERE       sms.pgid = p.pgid
                                        AND r.receive_id = sms.receive_id
                                        AND data_type = '2')
                        AND a.mobile_no IS NOT NULL
                        AND LENGTH (a.mobile_no) = 11;
         END IF;

         COMMIT;

         SELECT   MAX (receive_id)
           INTO   v_cur_rec_receive_id
           FROM   sms@dbl_smsdb
          WHERE   data_type = 2;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := v_process_msg || '; Def_Ren error: ' || SQLERRM;
            ROLLBACK;
      END;
   END IF;

   --data_type:3.for partial coll
   IF p_data_tp = '3' OR p_data_tp IS NULL
   THEN
      BEGIN
         IF v_last_par_receive_id IS NULL
         THEN
            INSERT INTO sms@dbl_smsdb (pgid,
                                       policy_no,
                                       premium,
                                       mobile,
                                       receive_id,
                                       data_type,
                                       receive_date,
                                       sms_message,
                                       receive_sl_no,
                                       i_dt,
                                       i_usr)
               SELECT   r.pgid,
                        p.policy_no,
                        r.coll_amount,
                        a.mobile_no,
                        r.receive_id,
                        3,
                        r.receive_date,
                        (   'Dear Sir/Madam, '
                         || CHR (10)
                         || 'Thanks  for deposit TK '
                         || r.coll_amount
                         || ' against your policy no- '
                         || p.policy_no
                         || ' on '
                         || TO_CHAR (r.receive_date, 'dd/mm/rrrr')
                         || ' SLICL ')
                           sms,
                        NULL,
                        SYSDATE,
                        USER
                 FROM   acc_partial_receivables r,
                        ins_p_address a,
                        ins_p_proposal p
                WHERE       r.pgid = a.pgid
                        AND r.pgid = p.pgid --and trunc (r.i_dt) = trunc (sysdate)
                        AND r.i_usr <> 'SLICL'
                        AND ( (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                             OR (p_pgid IS NULL
                                 AND ( (v_schedule_tp = 1
                                        AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                               AND  TRUNC(SYSDATE))
                                      OR (v_schedule_tp = 2
                                          AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                                 AND  p_date_to))))
                        AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                              TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                        AND NOT EXISTS
                              (SELECT   1
                                 FROM   sms@dbl_smsdb sms
                                WHERE       sms.pgid = p.pgid
                                        AND r.receive_id = sms.receive_id
                                        AND data_type = '3')
                        AND a.mobile_no IS NOT NULL
                        AND LENGTH (a.mobile_no) = 11;
         ELSE
            INSERT INTO sms@dbl_smsdb (pgid,
                                       policy_no,
                                       premium,
                                       mobile,
                                       receive_id,
                                       data_type,
                                       receive_date,
                                       sms_message,
                                       receive_sl_no,
                                       i_dt,
                                       i_usr)
               SELECT   r.pgid,
                        p.policy_no,
                        r.coll_amount,
                        a.mobile_no,
                        r.receive_id,
                        3,
                        r.receive_date,
                        (   'Dear Sir/Madam, '
                         || CHR (10)
                         || 'Thanks  for deposit TK '
                         || r.coll_amount
                         || ' against your policy no- '
                         || p.policy_no
                         || ' on '
                         || TO_CHAR (r.receive_date, 'dd/mm/rrrr')
                         || ' SLICL ')
                           sms,
                        NULL,
                        SYSDATE,
                        USER
                 FROM   acc_partial_receivables r,
                        ins_p_address a,
                        ins_p_proposal p
                WHERE   r.pgid = a.pgid AND r.pgid = p.pgid --  and r.receive_id > v_last_par_receive_id        --//disable by prite
                                                            -- and trunc (r.i_dt) = trunc (sysdate)
                        AND r.i_usr <> 'SLICL'
                        AND ( (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                             OR (p_pgid IS NULL
                                 AND ( (v_schedule_tp = 1
                                        AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                               AND  TRUNC(SYSDATE))
                                      OR (v_schedule_tp = 2
                                          AND TRUNC (r.i_dt) BETWEEN p_date_from
                                                                 AND  p_date_to))))
                        AND TO_DATE (r.i_dt, 'DD/MM/RRRR') >=
                              TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                        AND NOT EXISTS
                              (SELECT   1
                                 FROM   sms@dbl_smsdb sms
                                WHERE       sms.pgid = p.pgid
                                        AND r.receive_id = sms.receive_id
                                        AND data_type = '3')
                        AND a.mobile_no IS NOT NULL
                        AND LENGTH (a.mobile_no) = 11;
         END IF;

         COMMIT;

         SELECT   MAX (receive_id)
           INTO   v_cur_par_receive_id
           FROM   sms@dbl_smsdb
          WHERE   data_type = 3;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := v_process_msg || '; Partial error: ' || SQLERRM;
            ROLLBACK;
      END;
   END IF;

   --data_type:4.for proposal
   IF p_data_tp = '4' OR p_data_tp IS NULL
   THEN
      --  v_process_st_dt := sysdate;
      BEGIN
         SELECT   COUNT (l.pgid)
           INTO   v_pgid
           FROM   ins_p_proposal l
          WHERE   l.u_usr <> 'SLICL';
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := SQLERRM;
      END;

      BEGIN
         IF v_pgid > 0
         THEN
            INSERT INTO sms@dbl_smsdb (pgid,
                                       policy_no,
                                       mobile,
                                       data_type,
                                       risk_date,
                                       sms_message,
                                       receive_sl_no,
                                       i_dt,
                                       i_usr)
               SELECT   p.pgid,
                        p.policy_no,
                        a.mobile_no,
                        4,
                        s.risk_date,
                        ('Welcome, ' || CHR (10)
                         || 'Thanks for opening the policy in our company. Your policy no '
                         || p.policy_no
                         || '.We have covered the risk for your life from '
                         || TO_CHAR (s.risk_date, 'dd/mm/rrrr'))
                           sms,
                        NULL,
                        SYSDATE,
                        USER
                 FROM   ins_p_address a, ins_p_proposal p, ins_p_summery s
                WHERE       a.pgid = p.pgid
                        AND s.pgid = p.pgid
                        -- and trunc (p.u_dt) = trunc (sysdate)
                        AND p.i_usr <> 'SLICL'
                        AND a.mobile_no IS NOT NULL
                        AND LENGTH (a.mobile_no) = 11
                        --and p.pgid = nvl (p_pgid, p.pgid)
                        AND ( (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                             OR (p_pgid IS NULL
                                 AND ( (v_schedule_tp = 1
                                        AND TRUNC (p.u_dt) BETWEEN p_date_from
                                                               AND  TRUNC(SYSDATE))
                                      OR (v_schedule_tp = 2
                                          AND TRUNC (p.u_dt) BETWEEN p_date_from
                                                                 AND  p_date_to))))
                        AND p.policy_no IS NOT NULL
                        AND NOT EXISTS
                              (SELECT   1
                                 FROM   sms@dbl_smsdb sms
                                WHERE   sms.pgid = p.pgid AND data_type = '4');
         ELSE
            INSERT INTO sms@dbl_smsdb (pgid,
                                       policy_no,
                                       mobile,
                                       data_type,
                                       risk_date,
                                       sms_message,
                                       receive_sl_no,
                                       i_dt,
                                       i_usr)
               SELECT   p.pgid,
                        p.policy_no,
                        a.mobile_no,
                        4,
                        s.risk_date,
                        ('Welcome, ' || CHR (10)
                         || 'Thanks for opening the policy in our company. Your policy no '
                         || p.policy_no
                         || '.We have covered the risk for your life from '
                         || TO_CHAR (s.risk_date, 'dd/mm/rrrr'))
                           sms,
                        NULL,
                        SYSDATE,
                        USER
                 FROM   ins_p_address a, ins_p_proposal p, ins_p_summery s
                WHERE       a.pgid = p.pgid
                        AND s.pgid = p.pgid
                        AND p.i_usr <> 'SLICL'
                        -- and p.pgid = nvl (p_pgid, p.pgid)
                        AND ( (p_pgid IS NOT NULL AND p.pgid = p_pgid)
                             OR (p_pgid IS NULL
                                 AND ( (v_schedule_tp = 1
                                        AND TRUNC (p.u_dt) BETWEEN p_date_from
                                                               AND  TRUNC(SYSDATE))
                                      OR (v_schedule_tp = 2
                                          AND TRUNC (p.u_dt) BETWEEN p_date_from
                                                                 AND  p_date_to))))
                        AND TO_DATE (p.u_dt, 'DD/MM/RRRR') >=
                              TO_DATE ('1/1/2017', 'DD/MM/RRRR')
                        AND NOT EXISTS
                              (SELECT   1
                                 FROM   sms@dbl_smsdb sms
                                WHERE   sms.pgid = p.pgid AND data_type = '4')
                        AND a.mobile_no IS NOT NULL
                        AND LENGTH (a.mobile_no) = 11
                        AND p.policy_no IS NOT NULL;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := 'Proposal error: ' || SQLERRM;
            ROLLBACK;
      END;
   END IF;

   --data_type:5. Recruitment of FA and Employer of FA
   IF p_data_tp = '5' OR p_data_tp IS NULL
   THEN
      BEGIN
         FOR i
         IN (SELECT   a.agent_id fa_emp_gid,
                      a.agent_id fa_emp_id,
                      '05' emp_type_cd,
                      a.join_dt,
                      TRIM (d.mobile) mobile,
                      'Congratulation '
                      || CASE
                            WHEN a.sex_cd = '1'
                            THEN
                               'MR. '
                            WHEN a.sex_cd = '2' AND a.marital_stat_cd = '0'
                            THEN
                               'MISS. '
                            WHEN a.sex_cd = '2' AND a.marital_stat_cd <> '0'
                            THEN
                               'MRS. '
                            ELSE
                               NULL
                         END
                      || a.agent_nm_eng
                      || '. You are FA in SLIC. Your ID is '
                      || a.agent_id
                      || '. Welcome to SLIC Family.'
                         sms_message,
                      SYSDATE,
                      USER,
                      'F' emp_type
               FROM   hrm_agent a, hrm_agent_detl d
              WHERE       a.agent_id = d.agent_id
                      AND d.mobile IS NOT NULL
                      AND LENGTH (TRIM (d.mobile)) = 11
                      AND NVL (a.recruit_msg_st, '0') = '0'
                      AND a.join_dt >= TO_DATE ('01-jan-2018')
                      AND a.activity_cd = '01'
             UNION ALL
             SELECT   TO_CHAR (a.emp_gid) fa_emp_gid,
                      a.emp_id fa_emp_id,
                      a.emp_type_cd emp_type_cd,
                      a.join_dt,
                      TRIM (d.mobile) mobile,
                      'Congratulation '
                      || CASE
                            WHEN a.sex_cd = '1'
                            THEN
                               'MR. '
                            WHEN a.sex_cd = '2' AND a.marital_stat_cd = '0'
                            THEN
                               'MISS. '
                            WHEN a.sex_cd = '2' AND a.marital_stat_cd <> '0'
                            THEN
                               'MRS. '
                            ELSE
                               NULL
                         END
                      || a.emp_nm_eng
                      || '. You are '
                      || e.short_nm
                      || ' in SLIC. Your ID is '
                      || a.emp_id
                      || '. Welcome to SLIC Family.'
                         sms_message,
                      SYSDATE,
                      USER,
                      'E' emp_type
               FROM   hrm_employee a, hrm_employee_detl d, hrm_emp_type e
              WHERE       a.emp_gid = d.emp_gid
                      AND a.emp_type_cd = e.emp_type_cd
                      AND a.employment_tp_cd = '02'
                      AND d.mobile IS NOT NULL
                      AND LENGTH (TRIM (d.mobile)) = 11
                      AND NVL (a.recruit_msg_st, '0') = '0'
                      AND a.join_dt >= TO_DATE ('01-jan-2018')
                      AND a.activity_cd = '01')
         LOOP
            INSERT INTO dbl_sms_faumbm_new@dbl_smsdb (fa_emp_gid,
                                                      fa_emp_id,
                                                      emp_type_cd,
                                                      join_dt,
                                                      mobile,
                                                      sms_message,
                                                      i_dt,
                                                      i_user)
              VALUES   (i.fa_emp_gid,
                        i.fa_emp_id,
                        i.emp_type_cd,
                        i.join_dt,
                        i.mobile,
                        i.sms_message,
                        SYSDATE,
                        USER);

            IF i.emp_type = 'E'
            THEN
               UPDATE   hrm_employee
                  SET   recruit_msg_st = '1'
                WHERE   emp_gid = i.fa_emp_gid;
            ELSE
               UPDATE   hrm_agent
                  SET   recruit_msg_st = '1'
                WHERE   agent_id = i.fa_emp_gid;
            END IF;
         END LOOP;

         COMMIT;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_process_msg := 'Recruitment of FA  error: ' || SQLERRM;
            ROLLBACK;
      END;
   END IF;

   BEGIN
      --v_process_msg :='"fpr collection " is sucessfully inserted';
      UPDATE   gen_schd_bassed_pro_log
         SET   process_st_dt = v_process_st_dt,
               process_end_dt = SYSDATE,
               execution_output = v_process_msg,
               last_adv_receive_id =
                  CASE
                     WHEN v_cur_adv_receive_id > last_adv_receive_id
                     THEN
                        v_cur_adv_receive_id
                     ELSE
                        NVL (v_cur_adv_receive_id, last_adv_receive_id)
                  END,
               last_rec_receive_id =
                  CASE
                     WHEN v_cur_rec_receive_id > last_rec_receive_id
                     THEN
                        v_cur_rec_receive_id
                     ELSE
                        NVL (v_cur_rec_receive_id, last_rec_receive_id)
                  END,
               last_par_receive_id =
                  CASE
                     WHEN v_cur_par_receive_id > last_par_receive_id
                     THEN
                        v_cur_par_receive_id
                     ELSE
                        NVL (v_cur_par_receive_id, last_par_receive_id)
                  END,
               remarks =
                     v_schedule_tp_nm
                  || 'Advance Receive Id:'
                  || NVL (v_cur_adv_receive_id, last_adv_receive_id)
                  || 'Current Recive Id:'
                  || NVL (v_cur_rec_receive_id, last_rec_receive_id)
                  || 'Partial Recive Id:'
                  || NVL (v_cur_par_receive_id, last_par_receive_id)
                  || 'User: '
                  || USER,
               input_parameter =
                     'PGID: '
                  || NVL (p_pgid, '0')
                  || 'Data Type:'
                  || NVL (v_data_tp_nm, '0')
                  || 'Schedule Type:'
                  || v_schedule_tp_nm
                  || 'Date From :'
                  || NVL (p_date_from, TO_DATE (SYSDATE, 'dd/mm/rrrr'))
                  || 'Date To: '
                  || NVL (p_date_to, TO_DATE (SYSDATE, 'dd/mm/rrrr'))
       WHERE   process_id = 6;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_process_msg := 'Update error: ' || SQLERRM;
         ROLLBACK;
   END;

   COMMIT;
   p_error_msg := v_process_msg;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error_msg := v_process_msg || '; ' || SQLERRM;
END pro_data_prepare_sms2;
/


--
-- PRO_DEMAND_NOTICE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_demand_notice (
   p_pro_date             DATE,
   p_notice_month         DATE,
   p_user                 VARCHAR2,
   p_output         OUT   VARCHAR2
)
IS
   v_count              NUMBER (10)              := 0;
   v_error              VARCHAR2 (100);
   v_record             NUMBER;

   CURSOR cur_dem_notice
   IS
      SELECT p_notice_month, ips.pgid,
             fun_next_due_dt (ips.comm_date,
                              ips.last_paid_inst_no + 1,
                              DECODE (ips.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12
                                     )
                             ) due_date,
             ipp.party_name,
                ipp.father_name
             || ' '
             || DECODE (ipa.t_address,
                        NULL, ipa.p_address_1 || ' ' || ipa.p_address_2,
                        ipa.t_address
                       )
             || DECODE (ipa.t_thana_cd, NULL, NULL, ' P.S:')
             || rep_f_thana (ipa.t_thana_cd)
             || DECODE (ipa.t_district_cd, NULL, NULL, ' DIST:')
             || rep_f_district (ipa.t_district_cd)
             || DECODE (ipa.mobile_no, NULL, NULL, ' Mob.')
             || ipa.mobile_no t_address,
             ips.servicing_off, ips.risk_date, ips.sum_assured,
             ips.product_cd || '-' || ips.term table_term,
             rep_fun_ins_pay_mode_sh_nm (ips.pay_mode_cd) pay_mode,
             ips.installment_premium premium,
             rep_fun_ins_option (ips.option_cd) optionm,
             fun_office_shnm (ips.servicing_off) off_shnm, p_pro_date,
             p_user, fun_ins_pgid_to_policy_no (ips.pgid) policy_no,
             ips.sales_off, ips.branch_off, ips.dm_gid, ips.do_gid,
             ips.agent_id, ips.last_paid_date, ips.comm_date, ips.zonal_off,
             ips.next_due_inst_no installment_no, ips.pay_mode_cd
        FROM ins_p_summery ips, ins_p_personal ipp, ins_p_address ipa
       WHERE fun_next_due_dt (ips.comm_date,
                              ips.last_paid_inst_no + 1,
                              DECODE (ips.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12
                                     )
                             ) BETWEEN p_notice_month
                                   AND LAST_DAY (p_notice_month)
         AND ips.policy_status IN ('01', '09')
         --AND IPS.PAY_MODE_CD IN ('01', '02', '03')
         AND ips.pay_mode_cd IN ('01', '02', '03', '04')
         AND ips.pgid = ipp.pgid
         AND ipp.party_cd = '03'
         AND ipp.pgid = ipa.pgid
         AND ipp.party_id = ipa.party_id
         AND ipa.party_cd = '03'
         AND ipp.sl_no = 1
         AND ips.maturity_date > p_notice_month
         AND last_paid_inst_no < policy_installment
         AND ipa.mobile_no IS NOT NULL
         AND fun_mobile_number_val (ipa.mobile_no) = '1';

   rec_cur_dem_notice   cur_dem_notice%ROWTYPE;
BEGIN
   OPEN cur_dem_notice;

   LOOP
      FETCH cur_dem_notice
       INTO rec_cur_dem_notice;

      EXIT WHEN cur_dem_notice%NOTFOUND;

      INSERT INTO ser_demand_notice
                  (dmnd_not_month,
                   pgid, due_date,
                   party_name,
                   t_address,
                   servicing_off,
                   risk_date,
                   sum_assured,
                   table_term,
                   pay_mode, premium,
                   optionm, off_shnm,
                   pro_date, i_user,
                   policy_no,
                   sales_off,
                   branch_off, dm_gid,
                   do_gid, agent_id,
                   last_paid_date,
                   comm_date,
                   zonal_off,
                   installment_no,
                   pay_mode_cd
                  )
           VALUES (rec_cur_dem_notice.p_notice_month,
                   rec_cur_dem_notice.pgid, rec_cur_dem_notice.due_date,
                   rec_cur_dem_notice.party_name,
                   rec_cur_dem_notice.t_address,
                   rec_cur_dem_notice.servicing_off,
                   rec_cur_dem_notice.risk_date,
                   rec_cur_dem_notice.sum_assured,
                   rec_cur_dem_notice.table_term,
                   rec_cur_dem_notice.pay_mode, rec_cur_dem_notice.premium,
                   rec_cur_dem_notice.optionm, rec_cur_dem_notice.off_shnm,
                   rec_cur_dem_notice.p_pro_date, rec_cur_dem_notice.p_user,
                   rec_cur_dem_notice.policy_no,
                   rec_cur_dem_notice.sales_off,
                   rec_cur_dem_notice.branch_off, rec_cur_dem_notice.dm_gid,
                   rec_cur_dem_notice.do_gid, rec_cur_dem_notice.agent_id,
                   rec_cur_dem_notice.last_paid_date,
                   rec_cur_dem_notice.comm_date,
                   rec_cur_dem_notice.zonal_off,
                   rec_cur_dem_notice.installment_no,
                   rec_cur_dem_notice.pay_mode_cd
                  );

      v_count := v_count + 1;

      IF v_count = 500
      THEN
         COMMIT;
         v_count := 0;
      END IF;
   END LOOP;

   CLOSE cur_dem_notice;

   COMMIT;
   p_output := NULL;
EXCEPTION
   WHEN OTHERS
   THEN
      p_output := SQLERRM;
END;
/


--
-- PRO_DMG_UPD_PARTIAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_dmg_upd_partial wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
4a04 cd9
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
CR26
/


--
-- PRO_EMP_COLL_INC_BILL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_emp_coll_inc_bill (
   p_office_cd         IN     hrm_office.office_cd%TYPE,
   p_descendant_flag   IN     VARCHAR2,
   p_emp_gid           IN     hrm_employee.emp_gid%TYPE,
   p_pgid              IN     ins_p_proposal.pgid%TYPE,
   p_agent_bank_cd     IN     hrm_agent.agent_bank_cd%TYPE,
   p_ins_tp_cd         IN     ins_insurance_type.ins_tp_cd%TYPE,
   p_fy_start_dt       IN     DATE,
   p_fy_end_dt         IN     DATE,
   p_coll_dt_from      IN     DATE,
   p_coll_dt_to        IN     DATE,
   p_bill_date         IN     DATE,
   p_min_bill_amt      IN     NUMBER,
   p_object_cd         IN     VARCHAR2,
   p_user              IN     VARCHAR2,
   p_process_rec_cnt      OUT NUMBER,
   p_error                OUT VARCHAR2
)
IS
   v_fy_status                     NUMBER (2);
   v_bm_incen_fee_rate             NUMBER (5, 2);
   v_inchrg_of_bm_incen_fee_rate   NUMBER (5, 2);
   v_payable_amt                   NUMBER (12, 2);
   v_cnt                           NUMBER (2);
   v_bill_no                       NUMBER (20);
   v_payable_off                   VARCHAR2 (20);
   v_setup_cd                      NUMBER (5);
   v_bill_dtl_no                   NUMBER (10);
   v_tot_gross_payable_amt         NUMBER (12, 2);
   v_tot_tax_ded_amt               NUMBER (12, 2);
   v_tot_bill_amount               NUMBER (12, 2);
   v_inchrg_of_bm_emp_gid          NUMBER (8);
   v_office_cd                     VARCHAR2 (20);

   v_bill_no1                      NUMBER (20);
   v_bill_dtl_no1                  NUMBER (10);
   v_payable_amt1                  NUMBER (12, 2);
   v_payable_off1                  VARCHAR2 (20);
   v_tot_gross_payable_amt1        NUMBER (12, 2);
   v_tot_tax_ded_amt1              NUMBER (12, 2);
   v_tot_bill_amount1              NUMBER (12, 2);

   v_bank_account_no               hrm_employee.bank_account_no%TYPE;
   v_bank_br_cd                    hrm_employee.bank_br_cd%TYPE;
   v_bank_cd                       hrm_employee.bank_cd%TYPE;
   v_sal_transfer_tp               hrm_employee.sal_transfer_tp%TYPE;

   CURSOR c_emp
   IS
      SELECT   e.emp_gid,
               e.bank_account_no,
               e.bank_br_cd,
               e.bank_cd,
               e.sal_transfer_tp,
               oi.office_code,
               f.agent_bank_cd
        FROM   hrm_employee e, hrm_agent_off_incharge oi, hrm_office f
       WHERE       /*e.activity_cd <> '02'
               AND*/
            e      .emp_gid = oi.incharge_emp_gid
               AND oi.office_code = f.office_cd
               AND f.bank_agent_st = '1'
               AND f.agent_bank_cd = NVL (p_agent_bank_cd, f.agent_bank_cd)
               AND ( (NVL (p_descendant_flag, '0') = '0'
                      AND oi.office_code = NVL (p_office_cd, oi.office_code))
                    OR (NVL (p_descendant_flag, '0') = '1'
                        AND oi.office_code IN
                                 (    SELECT   office_cd
                                        FROM   hrm_office_setup
                                  START WITH   office_cd = p_office_cd
                                  CONNECT BY   PRIOR office_cd =
                                                  control_office_cd)));

   CURSOR c_agent (
      p_dev_emp_off_cd                 VARCHAR2
   )
   IS
      SELECT   g.agent_id,
               g.agent_bank_cd,
               g.office_cd,
               g.acc_type,
               g.account_no,
               g.acc_bank_cd,
               g.acc_br_cd,
               g.payment_tp
        FROM   hrm_agent g
       WHERE       g.activity_cd <> '02'
               AND g.bank_agent_st = 1
               AND g.agent_bank_cd = NVL (p_agent_bank_cd, g.agent_bank_cd)
               AND g.office_cd = p_dev_emp_off_cd;

   CURSOR c_coll (
      p_emp_office_cd                 VARCHAR2,
      p_fy_status                     NUMBER
   )
   IS
      SELECT   r.receive_id,
               r.slno,
               r.pgid,
               r.active_office_cd,
               s.comm_date due_date_from,
               s.comm_date due_date_to,
               r.coll_amount,
               s.installment_premium
        FROM   acc_advance_receivables r, ins_p_summery s
       WHERE   r.pgid = NVL (p_pgid, r.pgid) AND r.rec_status = '1'
               --and r.status = '1'
               AND EXISTS
                     (SELECT   1
                        FROM   acc_bank_tran_dtl td
                       WHERE       td.pgid = r.pgid
                               AND td.receive_id = r.receive_id
                               AND td.slno = r.slno)
               AND s.ins_tp_cd = NVL (p_ins_tp_cd, s.ins_tp_cd)
               AND r.active_office_cd = p_emp_office_cd
               AND NVL (r.coll_slip_rec_dt, r.receive_date) <= p_bill_date
               AND NVL (r.coll_slip_rec_dt, r.receive_date) BETWEEN p_coll_dt_from
                                                                AND  p_coll_dt_to
               AND ( (p_fy_status = 0
                      AND NVL (r.coll_slip_rec_dt, r.receive_date) <=
                            p_fy_end_dt)
                    OR (p_fy_status > 0
                        AND NVL (r.coll_slip_rec_dt, r.receive_date) BETWEEN p_fy_start_dt
                                                                         AND  p_fy_end_dt))
               AND NOT EXISTS
                     (SELECT   1
                        FROM   com_emp_coll_inc_bill_dtl f
                       WHERE       f.pgid = r.pgid
                               AND f.receive_id = r.receive_id
                               AND f.slno = r.slno)
               AND r.pgid = s.pgid
      UNION ALL
      SELECT   r.receive_id,
               NULL slno,
               r.pgid,
               r.active_office_cd,
               r.due_dt_from due_date_from,
               r.due_dt_to due_date_to,
               r.coll_amount,
               s.installment_premium
        FROM   acc_receivables r, ins_p_summery s
       WHERE   r.pgid = NVL (p_pgid, r.pgid) AND r.rec_status = '1'
               --and r.status = '1'
               AND EXISTS
                     (SELECT   1
                        FROM   acc_bank_tran_dtl td
                       WHERE   td.pgid = r.pgid
                               AND td.receive_id = r.receive_id)
               AND s.ins_tp_cd = NVL (p_ins_tp_cd, s.ins_tp_cd)
               AND r.active_office_cd = p_emp_office_cd
               AND NVL (r.coll_slip_rec_dt, r.receive_date) <= p_bill_date
               AND NVL (r.coll_slip_rec_dt, r.receive_date) BETWEEN p_coll_dt_from
                                                                AND  p_coll_dt_to
               AND ( (p_fy_status = 0
                      AND NVL (r.coll_slip_rec_dt, r.receive_date) <=
                            p_fy_end_dt)
                    OR (p_fy_status > 0
                        AND NVL (r.coll_slip_rec_dt, r.receive_date) BETWEEN p_fy_start_dt
                                                                         AND  p_fy_end_dt))
               AND NOT EXISTS
                     (SELECT   1
                        FROM   com_emp_coll_inc_bill_dtl f
                       WHERE   f.pgid = r.pgid
                               AND f.receive_id = r.receive_id)
               AND r.pgid = s.pgid;
BEGIN
   SELECT   COUNT (1)
     INTO   v_fy_status
     FROM   acc_fiscal_year
    WHERE   fy_close = 0 AND fy_st_dt < p_fy_start_dt;

   FOR r_emp IN c_emp
   LOOP
      v_cnt := 0;
      v_bill_no := NULL;
      v_tot_gross_payable_amt := 0;
        v_tot_tax_ded_amt := 0;
        v_tot_bill_amount := 0;
        v_tot_gross_payable_amt1 := 0;
        v_tot_tax_ded_amt1 := 0;
        v_tot_bill_amount1 := 0;

      ----------find payable office-----------
      BEGIN
         SELECT   fun_find_sales_off (r_emp.office_code)
           INTO   v_payable_off
           FROM   DUAL;

         IF v_payable_off IS NULL
         THEN
            SELECT   fun_find_service_off (r_emp.office_code)
              INTO   v_payable_off
              FROM   DUAL;

            IF v_payable_off IS NULL
            THEN
               SELECT   fun_find_head_off (r_emp.office_code)
                 INTO   v_payable_off
                 FROM   DUAL;
            END IF;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_payable_off := r_emp.office_code;
      END;

      --end of find payable office--

      FOR r_agent IN c_agent (r_emp.office_code)
      LOOP
         FOR r_coll IN c_coll (r_agent.office_cd, v_fy_status)
         LOOP
            SELECT   setup_cd, bm_incen_fee_rate, inchrg_of_bm_incen_fee_rate
              INTO   v_setup_cd,
                     v_bm_incen_fee_rate,
                     v_inchrg_of_bm_incen_fee_rate
              FROM   com_coll_fee_incentive_setup
             WHERE   agent_bank_cd = r_emp.agent_bank_cd
                     AND p_bill_date BETWEEN valid_dt_fr
                                         AND  NVL (valid_dt_to,
                                                   TRUNC (SYSDATE));

            v_payable_amt :=
               ROUND (r_coll.coll_amount * v_bm_incen_fee_rate / 100);

            IF v_cnt = 0
            THEN
               SELECT   TO_CHAR (SYSDATE, 'rrrrmmdd')
                        || LPAD (NVL (MAX (SUBSTR (bill_no, 9)), 0) + 1,
                                 4,
                                 0)
                 INTO   v_bill_no
                 FROM   com_emp_coll_inc_bill_mst;

               INSERT INTO com_emp_coll_inc_bill_mst (bill_no,
                                                      bill_date,
                                                      emp_gid,
                                                      office_cd,
                                                      agent_bank_cd,
                                                      emp_acc_no,
                                                      emp_acc_bank_cd,
                                                      emp_acc_br_cd,
                                                      emp_payment_type,
                                                      payable_office,
                                                      payable_vr_no,
                                                      tax_payable_vr_no,
                                                      disburse_status,
                                                      remarks,
                                                      emp_cat,
                                                      ins_tp_cd,
                                                      i_usr,
                                                      i_dt)
                 VALUES   (v_bill_no,
                           p_bill_date,
                           r_emp.emp_gid,
                           r_emp.office_code,
                           r_emp.agent_bank_cd,
                           r_emp.bank_account_no,
                           r_emp.bank_cd,
                           r_emp.bank_br_cd,
                           r_emp.sal_transfer_tp,
                           v_payable_off,
                           NULL,
                           NULL,
                           0,
                           NULL,
                           1,
                           p_ins_tp_cd,
                           p_user,
                           SYSDATE);

               --INCHRG_OF_BM--
               v_inchrg_of_bm_emp_gid := NULL;

               BEGIN
                  SELECT   s.h_employee_gid,
                           e.office_cd,
                           e.bank_account_no,
                           e.bank_br_cd,
                           e.bank_cd,
                           e.sal_transfer_tp
                    INTO   v_inchrg_of_bm_emp_gid,
                           v_office_cd,
                           v_bank_account_no,
                           v_bank_br_cd,
                           v_bank_cd,
                           v_sal_transfer_tp
                    FROM   hrm_employee_setup S, hrm_employee e
                   WHERE   S.employee_gid = r_emp.emp_gid
                           AND s.h_employee_gid = e.emp_gid;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;

               IF v_inchrg_of_bm_emp_gid IS NOT NULL
               THEN
                  ----------find payable office-----------
                  BEGIN
                     SELECT   fun_find_sales_off (v_office_cd)
                       INTO   v_payable_off1
                       FROM   DUAL;

                     IF v_payable_off1 IS NULL
                     THEN
                        SELECT   fun_find_service_off (v_office_cd)
                          INTO   v_payable_off1
                          FROM   DUAL;

                        IF v_payable_off1 IS NULL
                        THEN
                           SELECT   fun_find_head_off (v_office_cd)
                             INTO   v_payable_off1
                             FROM   DUAL;
                        END IF;
                     END IF;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_payable_off1 := v_office_cd;
                  END;

                  SELECT   TO_CHAR (SYSDATE, 'rrrrmmdd')
                           || LPAD (NVL (MAX (SUBSTR (bill_no, 9)), 0) + 1,
                                    4,
                                    0)
                    INTO   v_bill_no1
                    FROM   com_emp_coll_inc_bill_mst;

                  INSERT INTO com_emp_coll_inc_bill_mst (bill_no,
                                                         bill_date,
                                                         emp_gid,
                                                         office_cd,
                                                         agent_bank_cd,
                                                         emp_acc_no,
                                                         emp_acc_bank_cd,
                                                         emp_acc_br_cd,
                                                         emp_payment_type,
                                                         payable_office,
                                                         payable_vr_no,
                                                         tax_payable_vr_no,
                                                         disburse_status,
                                                         remarks,
                                                         emp_cat,
                                                         ins_tp_cd,
                                                         i_usr,
                                                         i_dt)
                    VALUES   (v_bill_no1,
                              p_bill_date,
                              v_inchrg_of_bm_emp_gid,
                              v_office_cd,
                              r_emp.agent_bank_cd,
                              v_bank_account_no,
                              v_bank_cd,
                              v_bank_br_cd,
                              v_sal_transfer_tp,
                              v_payable_off1,
                              NULL,
                              NULL,
                              0,
                              NULL,
                              2,
                              p_ins_tp_cd,
                              p_user,
                              SYSDATE);
               END IF;

               ----------------

               v_cnt := v_cnt + 1;
            END IF;

            SELECT   NVL (MAX (bill_dtl_no), 0) + 1
              INTO   v_bill_dtl_no
              FROM   com_emp_coll_inc_bill_dtl;

            INSERT INTO com_emp_coll_inc_bill_dtl (bill_dtl_no,
                                                   bill_no,
                                                   pgid,
                                                   setup_cd,
                                                   pay_rate,
                                                   gross_bill_amt,
                                                   tax_ded_rate,
                                                   tax_ded_amt,
                                                   net_bill_amt,
                                                   receive_id,
                                                   slno,
                                                   i_usr,
                                                   i_dt)
              VALUES   (v_bill_dtl_no,
                        v_bill_no,
                        r_coll.pgid,
                        v_setup_cd,
                        v_bm_incen_fee_rate,
                        v_payable_amt,
                        0,
                        0,
                        v_payable_amt,
                        r_coll.receive_id,
                        r_coll.slno,
                        p_user,
                        SYSDATE);

            v_tot_gross_payable_amt :=
               NVL (v_tot_gross_payable_amt, 0) + v_payable_amt;
            v_tot_tax_ded_amt := 0;
            v_tot_bill_amount := NVL (v_tot_bill_amount, 0) + v_payable_amt;
            p_process_rec_cnt := NVL(p_process_rec_cnt, 0) + 1;

            IF v_bill_no1 IS NOT NULL
            THEN                                              --Incharge of BM
               v_payable_amt1 :=
                  ROUND (
                     r_coll.coll_amount * v_inchrg_of_bm_incen_fee_rate / 100
                  );

               IF v_payable_amt1 > 0
               THEN
                  SELECT   NVL (MAX (bill_dtl_no), 0) + 1
                    INTO   v_bill_dtl_no1
                    FROM   com_emp_coll_inc_bill_dtl;

                  INSERT INTO com_emp_coll_inc_bill_dtl (bill_dtl_no,
                                                         bill_no,
                                                         pgid,
                                                         setup_cd,
                                                         pay_rate,
                                                         gross_bill_amt,
                                                         tax_ded_rate,
                                                         tax_ded_amt,
                                                         net_bill_amt,
                                                         receive_id,
                                                         slno,
                                                         i_usr,
                                                         i_dt)
                    VALUES   (v_bill_dtl_no1,
                              v_bill_no1,
                              r_coll.pgid,
                              v_setup_cd,
                              v_inchrg_of_bm_incen_fee_rate,
                              v_payable_amt1,
                              0,
                              0,
                              v_payable_amt1,
                              r_coll.receive_id,
                              r_coll.slno,
                              p_user,
                              SYSDATE);

                  v_tot_gross_payable_amt1 :=
                     NVL (v_tot_gross_payable_amt1, 0) + v_payable_amt1;
                  v_tot_tax_ded_amt1 := 0;
                  v_tot_bill_amount1 :=
                     NVL (v_tot_bill_amount1, 0) + v_payable_amt1;
               END IF;
            END IF;
         END LOOP;
      END LOOP;

      IF v_tot_gross_payable_amt > 0
      THEN
         DECLARE
            recprem                 pkg_gl_voucher.t_trans_tab;
            v_object_cd             gen_object_info.object_cd%TYPE;
            v_voucher_cd            acc_voucher_type.vouch_cd%TYPE;
            v_inter_off_st          CHAR (1);
            v_office_cd             hrm_office.office_cd%TYPE;
            v_trans_id              acc_gl_trans_mst.trans_id%TYPE;
            v_trans_date            DATE;
            v_cost_center           hrm_office.office_cd%TYPE;
            v_narration             VARCHAR2 (200);
            v_user                  VARCHAR2 (20);
            v_chq_tp                VARCHAR2 (3);
            v_chq_no                VARCHAR2 (50);
            v_chq_dt                DATE;
            v_voucher_no            VARCHAR2 (15);
            v_vr_error              VARCHAR2 (150);
            v_trans_item_comm_pay   NUMBER (3);
            v_trans_item_comm       NUMBER (3);
         BEGIN
            /***********************
            Business wise value will change.
            Developer will put the value
            **********************************/
            v_object_cd := p_object_cd;
            v_voucher_cd := '05';
            v_inter_off_st := '0';
            v_office_cd := fun_find_regional_off (v_payable_off);
            v_cost_center := v_payable_off;
            v_trans_id := v_bill_no;
            v_trans_date := p_bill_date;
            v_narration :=
               'Employee Collection Incentive Payable on ' || p_bill_date;
            v_user := p_user;

            IF p_ins_tp_cd = 1
            THEN
               --Conventional Insurance
               v_trans_item_comm_pay := 234;
               --Employee Collection Fee Payaable (CLI)
               v_trans_item_comm := 235;
            --Employee Collection Fee (CLI)
            ELSE
               --Takaful Insurance
               v_trans_item_comm_pay := 236;
               --Employee Collection Fee Payaable (TLI)
               v_trans_item_comm := 237;
            --Employee Collection Fee (TLI)
            END IF;

            --commission payable
            recprem (1).trans_item_cd := v_trans_item_comm_pay;
            recprem (1).post_amount := v_tot_gross_payable_amt;
            recprem (1).chq_tp := NULL;
            recprem (1).chq_no := NULL;
            recprem (1).chq_dt := NULL;

            --commission
            recprem (2).trans_item_cd := v_trans_item_comm;
            recprem (2).post_amount := v_tot_gross_payable_amt;
            recprem (2).chq_tp := NULL;
            recprem (2).chq_no := NULL;
            recprem (2).chq_dt := NULL;


            pkg_gl_voucher.pro_voucher_posting (
               p_table          => recprem,
               p_object_cd      => v_object_cd,
               p_vouch_cd       => v_voucher_cd,
               p_inter_off_st   => v_inter_off_st,
               p_office_cd      => v_office_cd,
               p_trans_id       => v_trans_id,
               p_trans_date     => v_trans_date,
               p_cost_center    => v_cost_center,
               p_narration      => v_narration,
               p_user           => v_user,
               p_ins_tp_cd      => p_ins_tp_cd,
               p_voucher_no     => v_voucher_no,
               p_error          => v_vr_error
            );

            IF v_vr_error IS NULL
            THEN
               UPDATE   com_emp_coll_inc_bill_mst
                  SET   gross_payable_amt = v_tot_gross_payable_amt,
                        tax_ded_amt = v_tot_tax_ded_amt,
                        bill_amount = v_tot_bill_amount,
                        payable_vr_no = v_voucher_no
                WHERE   bill_no = v_bill_no;
            ELSE
               p_error := 'BM ' || v_vr_error;
               ROLLBACK;
            END IF;
         END;
      --ELSE
      --   ROLLBACK;
      END IF;


      IF v_tot_gross_payable_amt1 > 0
      THEN
         DECLARE
            recprem                 pkg_gl_voucher.t_trans_tab;
            v_object_cd             gen_object_info.object_cd%TYPE;
            v_voucher_cd            acc_voucher_type.vouch_cd%TYPE;
            v_inter_off_st          CHAR (1);
            v_office_cd             hrm_office.office_cd%TYPE;
            v_trans_id              acc_gl_trans_mst.trans_id%TYPE;
            v_trans_date            DATE;
            v_cost_center           hrm_office.office_cd%TYPE;
            v_narration             VARCHAR2 (200);
            v_user                  VARCHAR2 (20);
            v_chq_tp                VARCHAR2 (3);
            v_chq_no                VARCHAR2 (50);
            v_chq_dt                DATE;
            v_voucher_no1           VARCHAR2 (15);
            v_vr_error1             VARCHAR2 (150);
            v_trans_item_comm_pay   NUMBER (3);
            v_trans_item_comm       NUMBER (3);
         BEGIN
            /***********************
            Business wise value will change.
            Developer will put the value
            **********************************/
            v_object_cd := p_object_cd;
            v_voucher_cd := '05';
            v_inter_off_st := '0';
            v_office_cd := fun_find_regional_off (v_payable_off1);
            v_cost_center := v_payable_off1;
            v_trans_id := v_bill_no1;
            v_trans_date := p_bill_date;
            v_narration :=
               'Employee Collection Incentive Payable on ' || p_bill_date;
            v_user := p_user;

            IF p_ins_tp_cd = 1
            THEN
               --Conventional Insurance
               v_trans_item_comm_pay := 234;
               --Employee Collection Fee Payaable (CLI)
               v_trans_item_comm := 235;
            --Employee Collection Fee (CLI)
            ELSE
               --Takaful Insurance
               v_trans_item_comm_pay := 236;
               --Employee Collection Fee Payaable (TLI)
               v_trans_item_comm := 237;
            --Employee Collection Fee (TLI)
            END IF;

            --commission payable
            recprem (1).trans_item_cd := v_trans_item_comm_pay;
            recprem (1).post_amount := v_tot_gross_payable_amt1;
            recprem (1).chq_tp := NULL;
            recprem (1).chq_no := NULL;
            recprem (1).chq_dt := NULL;

            --commission
            recprem (2).trans_item_cd := v_trans_item_comm;
            recprem (2).post_amount := v_tot_gross_payable_amt1;
            recprem (2).chq_tp := NULL;
            recprem (2).chq_no := NULL;
            recprem (2).chq_dt := NULL;


            pkg_gl_voucher.pro_voucher_posting (
               p_table          => recprem,
               p_object_cd      => v_object_cd,
               p_vouch_cd       => v_voucher_cd,
               p_inter_off_st   => v_inter_off_st,
               p_office_cd      => v_office_cd,
               p_trans_id       => v_trans_id,
               p_trans_date     => v_trans_date,
               p_cost_center    => v_cost_center,
               p_narration      => v_narration,
               p_user           => v_user,
               p_ins_tp_cd      => p_ins_tp_cd,
               p_voucher_no     => v_voucher_no1,
               p_error          => v_vr_error1
            );

            IF v_vr_error1 IS NULL
            THEN
               UPDATE   com_emp_coll_inc_bill_mst
                  SET   gross_payable_amt = v_tot_gross_payable_amt1,
                        tax_ded_amt = v_tot_tax_ded_amt1,
                        bill_amount = v_tot_bill_amount1,
                        payable_vr_no = v_voucher_no1
                WHERE   bill_no = v_bill_no1;
            ELSE
               p_error := 'In-charge of BM ' || v_vr_error1;
               ROLLBACK;
            END IF;
         END;
      --ELSE
      --   ROLLBACK;
      END IF;
   END LOOP;
   
   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := p_error || '==' || SQLERRM;
END pro_emp_coll_inc_bill;
/


--
-- PRO_FA_COLL_FEE_BILL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_fa_coll_fee_bill (
   p_office_cd         IN     hrm_office.office_cd%TYPE,
   p_descendant_flag   IN     VARCHAR2,
   p_agent_id          IN     hrm_agent.agent_id%TYPE,
   p_pgid              IN     ins_p_proposal.pgid%TYPE,
   p_agent_bank_cd     IN     hrm_agent.agent_bank_cd%TYPE,
   p_ins_tp_cd         IN     ins_insurance_type.ins_tp_cd%TYPE,
   p_fy_start_dt       IN     DATE,
   p_fy_end_dt         IN     DATE,
   p_coll_dt_from      IN     DATE,
   p_coll_dt_to        IN     DATE,
   p_bill_date         IN     DATE,
   p_min_bill_amt      IN     NUMBER,
   p_object_cd         IN     VARCHAR2,
   p_user              IN     VARCHAR2,
   p_process_rec_cnt      OUT NUMBER,
   p_error                OUT VARCHAR2
)
IS
   v_fy_status               NUMBER (2);
   v_coll_fee_rate           NUMBER (5, 2);
   v_payable_amt             NUMBER (12, 2);
   v_cnt                     NUMBER (2);
   v_bill_no                 NUMBER (20);
   v_payable_off             VARCHAR2 (20);
   v_setup_cd                NUMBER (5);
   v_bill_dtl_no             NUMBER (10);
   v_tot_gross_payable_amt   NUMBER (12, 2);
   v_tot_tax_ded_amt         NUMBER (12, 2);
   v_tot_bill_amount         NUMBER (12, 2);

   CURSOR c_agent
   IS
      SELECT   g.agent_id,
               g.agent_bank_cd,
               g.office_cd,
               g.acc_type,
               g.account_no,
               g.acc_bank_cd,
               g.acc_br_cd,
               g.payment_tp
        FROM   hrm_agent g
       WHERE       g.activity_cd <> '02'
               AND g.bank_agent_st = 1
               AND g.agent_bank_cd = NVL (p_agent_bank_cd, g.agent_bank_cd)
               AND ( (NVL (p_descendant_flag, '0') = '0'
                      AND g.office_cd = NVL (p_office_cd, g.office_cd))
                    OR (NVL (p_descendant_flag, '0') = '1'
                        AND g.office_cd IN
                                 (    SELECT   office_cd
                                        FROM   hrm_office_setup
                                  START WITH   office_cd = p_office_cd
                                  CONNECT BY   PRIOR office_cd =
                                                  control_office_cd)));

   CURSOR c_coll (
      p_agent_office_cd                 VARCHAR2,
      p_fy_status                       NUMBER
   )
   IS
      SELECT   r.receive_id,
               r.slno,
               r.pgid,
               r.active_office_cd,
               s.comm_date due_date_from,
               s.comm_date due_date_to,
               r.coll_amount,
               s.installment_premium
        FROM   acc_advance_receivables r, ins_p_summery s
       WHERE   r.pgid = NVL (p_pgid, r.pgid) AND r.rec_status = '1'
               --and r.status = '1'
               AND EXISTS
                     (SELECT   1
                        FROM   acc_bank_tran_dtl td
                       WHERE       td.pgid = r.pgid
                               AND td.receive_id = r.receive_id
                               AND td.slno = r.slno)
               AND s.ins_tp_cd = p_ins_tp_cd
               AND r.active_office_cd = p_agent_office_cd
               AND NVL (r.coll_slip_rec_dt, r.receive_date) <= p_bill_date
               AND NVL (r.coll_slip_rec_dt, r.receive_date) BETWEEN p_coll_dt_from
                                                                AND  p_coll_dt_to
               AND ( (p_fy_status = 0
                      AND NVL (r.coll_slip_rec_dt, r.receive_date) <=
                            p_fy_end_dt)
                    OR (p_fy_status > 0
                        AND NVL (r.coll_slip_rec_dt, r.receive_date) BETWEEN p_fy_start_dt
                                                                         AND  p_fy_end_dt))
               AND NOT EXISTS
                     (SELECT   1
                        FROM   com_agent_coll_fee_bill_dtl f
                       WHERE       f.pgid = r.pgid
                               AND f.receive_id = r.receive_id
                               AND f.slno = r.slno)
               AND r.pgid = s.pgid
      UNION ALL
      SELECT   r.receive_id,
               NULL slno,
               r.pgid,
               r.active_office_cd,
               r.due_dt_from due_date_from,
               r.due_dt_to due_date_to,
               r.coll_amount,
               s.installment_premium
        FROM   acc_receivables r, ins_p_summery s
       WHERE   r.pgid = NVL (p_pgid, r.pgid) AND r.rec_status = '1'
               --and r.status = '1'
               AND EXISTS
                     (SELECT   1
                        FROM   acc_bank_tran_dtl td
                       WHERE   td.pgid = r.pgid
                               AND td.receive_id = r.receive_id)
               AND s.ins_tp_cd = NVL (p_ins_tp_cd, s.ins_tp_cd)
               AND r.active_office_cd = p_agent_office_cd
               AND NVL (r.coll_slip_rec_dt, r.receive_date) <= p_bill_date
               AND NVL (r.coll_slip_rec_dt, r.receive_date) BETWEEN p_coll_dt_from
                                                                AND  p_coll_dt_to
               AND ( (p_fy_status = 0
                      AND NVL (r.coll_slip_rec_dt, r.receive_date) <=
                            p_fy_end_dt)
                    OR (p_fy_status > 0
                        AND NVL (r.coll_slip_rec_dt, r.receive_date) BETWEEN p_fy_start_dt
                                                                         AND  p_fy_end_dt))
               AND NOT EXISTS
                     (SELECT   1
                        FROM   com_agent_coll_fee_bill_dtl f
                       WHERE   f.pgid = r.pgid
                               AND f.receive_id = r.receive_id)
               AND r.pgid = s.pgid;
BEGIN
   SELECT   COUNT (1)
     INTO   v_fy_status
     FROM   acc_fiscal_year
    WHERE   fy_close = 0 AND fy_st_dt < p_fy_start_dt;

   FOR r_agent IN c_agent
   LOOP
      v_cnt := 0;
      v_bill_no := NULL;
      v_tot_gross_payable_amt := 0;
      v_tot_tax_ded_amt := 0;
      v_tot_bill_amount := 0;

      ----------find payable office-----------
      BEGIN
         SELECT   fun_find_sales_off (r_agent.office_cd)
           INTO   v_payable_off
           FROM   DUAL;

         IF v_payable_off IS NULL
         THEN
            SELECT   fun_find_service_off (r_agent.office_cd)
              INTO   v_payable_off
              FROM   DUAL;

            IF v_payable_off IS NULL
            THEN
               SELECT   fun_find_head_off (r_agent.office_cd)
                 INTO   v_payable_off
                 FROM   DUAL;
            END IF;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_payable_off := r_agent.office_cd;
      END;

      --end of find payable office--

      FOR r_coll IN c_coll (r_agent.office_cd, v_fy_status)
      LOOP
         SELECT   setup_cd, coll_fee_rate
           INTO   v_setup_cd, v_coll_fee_rate
           FROM   com_coll_fee_incentive_setup
          WHERE   agent_bank_cd = r_agent.agent_bank_cd
                  AND p_bill_date BETWEEN valid_dt_fr
                                      AND  NVL (valid_dt_to, TRUNC (SYSDATE));

         v_payable_amt := ROUND (r_coll.coll_amount * v_coll_fee_rate / 100);

         IF v_cnt = 0
         THEN
            SELECT   TO_CHAR (SYSDATE, 'rrrrmmdd')
                     || LPAD (NVL (MAX (SUBSTR (bill_no, 9)), 0) + 1, 4, 0)
              INTO   v_bill_no
              FROM   com_agent_coll_fee_bill_mst;

            INSERT INTO com_agent_coll_fee_bill_mst (bill_no,
                                                     bill_date,
                                                     agent_id,
                                                     office_cd,
                                                     agent_bank_cd,
                                                     agent_acc_no,
                                                     agent_acc_bank_cd,
                                                     agent_acc_br_cd,
                                                     agent_payment_type,
                                                     payable_office,
                                                     payable_vr_no,
                                                     tax_payable_vr_no,
                                                     disburse_status,
                                                     remarks,
                                                     ins_tp_cd,
                                                     i_usr,
                                                     i_dt)
              VALUES   (v_bill_no,
                        p_bill_date,
                        r_agent.agent_id,
                        r_agent.office_cd,
                        r_agent.agent_bank_cd,
                        r_agent.account_no,
                        r_agent.acc_bank_cd,
                        r_agent.acc_br_cd,
                        r_agent.payment_tp,
                        v_payable_off,
                        NULL,
                        NULL,
                        0,
                        NULL,
                        p_ins_tp_cd,
                        p_user,
                        SYSDATE);

            v_cnt := v_cnt + 1;
         END IF;

         SELECT   NVL (MAX (bill_dtl_no), 0) + 1
           INTO   v_bill_dtl_no
           FROM   com_agent_coll_fee_bill_dtl;

         INSERT INTO com_agent_coll_fee_bill_dtl (bill_dtl_no,
                                                  bill_no,
                                                  pgid,
                                                  setup_cd,
                                                  pay_rate,
                                                  gross_bill_amt,
                                                  tax_ded_rate,
                                                  tax_ded_amt,
                                                  net_bill_amt,
                                                  receive_id,
                                                  slno,
                                                  i_usr,
                                                  i_dt)
           VALUES   (v_bill_dtl_no,
                     v_bill_no,
                     r_coll.pgid,
                     v_setup_cd,
                     v_coll_fee_rate,
                     v_payable_amt,
                     0,
                     0,
                     v_payable_amt,
                     r_coll.receive_id,
                     r_coll.slno,
                     p_user,
                     SYSDATE);

         v_tot_gross_payable_amt :=
            NVL (v_tot_gross_payable_amt, 0) + v_payable_amt;
         v_tot_tax_ded_amt := 0;
         v_tot_bill_amount := NVL (v_tot_bill_amount, 0) + v_payable_amt;
         
         p_process_rec_cnt := NVL(p_process_rec_cnt, 0) + 1;
      END LOOP;

      IF v_tot_gross_payable_amt > 0
      THEN
         DECLARE
            recprem                 pkg_gl_voucher.t_trans_tab;
            v_object_cd             gen_object_info.object_cd%TYPE;
            v_voucher_cd            acc_voucher_type.vouch_cd%TYPE;
            v_inter_off_st          CHAR (1);
            v_office_cd             hrm_office.office_cd%TYPE;
            v_trans_id              acc_gl_trans_mst.trans_id%TYPE;
            v_trans_date            DATE;
            v_cost_center           hrm_office.office_cd%TYPE;
            v_narration             VARCHAR2 (200);
            v_user                  VARCHAR2 (20);
            v_chq_tp                VARCHAR2 (3);
            v_chq_no                VARCHAR2 (50);
            v_chq_dt                DATE;
            v_voucher_no            VARCHAR2 (15);
            v_vr_error              VARCHAR2 (150);
            v_trans_item_comm_pay   NUMBER (3);
            v_trans_item_comm       NUMBER (3);
         BEGIN
            /***********************
            Business wise value will change.
            Developer will put the value
            **********************************/
            v_object_cd := p_object_cd;
            v_voucher_cd := '05';
            v_inter_off_st := '0';
            v_office_cd := fun_find_regional_off (v_payable_off);
            v_cost_center := v_payable_off;
            v_trans_id := v_bill_no;
            v_trans_date := p_bill_date;
            v_narration := 'FA Collection Fee Payable on ' || p_bill_date;
            v_user := p_user;

            IF p_ins_tp_cd = 1
            THEN
               --Conventional Insurance
               v_trans_item_comm_pay := 230;
               --FA Collection Fee Payaable (CLI)
               v_trans_item_comm := 231;
            --FA Collection Fee (CLI)
            ELSE
               --Takaful Insurance
               v_trans_item_comm_pay := 232;
               --FA Collection Fee Payaable (TLI)
               v_trans_item_comm := 233;
            --FA Collection Fee (TLI)
            END IF;

            --commission payable
            recprem (1).trans_item_cd := v_trans_item_comm_pay;
            recprem (1).post_amount := v_tot_gross_payable_amt;
            recprem (1).chq_tp := NULL;
            recprem (1).chq_no := NULL;
            recprem (1).chq_dt := NULL;

            --commission
            recprem (2).trans_item_cd := v_trans_item_comm;
            recprem (2).post_amount := v_tot_gross_payable_amt;
            recprem (2).chq_tp := NULL;
            recprem (2).chq_no := NULL;
            recprem (2).chq_dt := NULL;


            pkg_gl_voucher.pro_voucher_posting (
               p_table          => recprem,
               p_object_cd      => v_object_cd,
               p_vouch_cd       => v_voucher_cd,
               p_inter_off_st   => v_inter_off_st,
               p_office_cd      => v_office_cd,
               p_trans_id       => v_trans_id,
               p_trans_date     => v_trans_date,
               p_cost_center    => v_cost_center,
               p_narration      => v_narration,
               p_user           => v_user,
               p_ins_tp_cd      => p_ins_tp_cd,
               p_voucher_no     => v_voucher_no,
               p_error          => v_vr_error
            );

            IF v_vr_error IS NULL
            THEN
               UPDATE   com_agent_coll_fee_bill_mst
                  SET   gross_payable_amt = v_tot_gross_payable_amt,
                        tax_ded_amt = v_tot_tax_ded_amt,
                        bill_amount = v_tot_bill_amount,
                        payable_vr_no = v_voucher_no
                WHERE   bill_no = v_bill_no;
            ELSE
               p_error := v_vr_error;
               ROLLBACK;
            END IF;
         END;
      --ELSE
      --   ROLLBACK;
      END IF;
   END LOOP;
   
   commit;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END pro_fa_coll_fee_bill;
/


--
-- PRO_FIND_ADJ_DATE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_find_adj_date (
   p_pgid              IN     VARCHAR2,
   p_prem_type         IN     VARCHAR2,
   --0 for proposal amount, 1 for deferd, 2 for 2nd year + renewal
   p_receive_id        IN     NUMBER,
   p_adv_flag          IN     VARCHAR2 DEFAULT '0' ,
   --1 For advanct collection
   p_coll_due_dt       IN     DATE,
   --only need for advance collection
   p_adj_type          IN     VARCHAR2 DEFAULT '0' ,
   --0 for system adjustment, 1 for manual adjustment
   /*p_fy_st_dt          IN       DATE DEFAULT TRUNC (SYSDATE, 'Year'),
   p_fy_ed_dt          IN       DATE
         DEFAULT LAST_DAY (ADD_MONTHS (TRUNC (SYSDATE, 'Year'), 11)),*/
   p_adjustment_date      OUT DATE
)
IS
   /*
   Created By : Syed Md. Musha
   Created Date : 29-04-2013
   Pupose : Find adjustment date
   */
   v_doc_coll_dt       DATE;
   v_fp_coll_dt        DATE;
   v_prem_coll_dt      DATE;
   v_partial_coll_dt   DATE;
   v_coll_fy_open_st   NUMBER (2) := 0;
   v_cheque_hon_dt     DATE;
BEGIN
   IF p_adj_type = '0'      --0 for system adjustment, 1 for manual adjustment
   THEN
      IF p_prem_type = '0'
      --0 for proposal amount, 1 for deferd, 2 for 2nd year + renewal
      THEN                                                   --proposal amount
         SELECT   MAX (receive_date)
           INTO   v_fp_coll_dt
           FROM   acc_advance_receivables d
          WHERE       d.proposal_no = fun_ins_pgid_to_proposal_no (p_pgid)
                  AND d.status = '0'
                  AND d.rec_status = '1'
                  AND d.cheque_deposit =
                        DECODE (d.receive_mode, '2', 'Y', d.cheque_deposit)
                  AND NVL (d.coll_check_status, '0') =
                        DECODE (d.mode_tp, '1', '0', '1')
                  AND EXISTS
                        (SELECT   1
                           FROM   acc_bank_tran_mst m, acc_bank_tran_dtl d
                          WHERE       m.coll_purpose = '2'
                                  AND d.pgid = d.pgid
                                  AND d.receive_id = d.receive_id
                                  AND NVL (d.deposit_st, '0') = '1'
                                  AND m.tran_id = d.tran_id);

         --Find cheque honor date--
         SELECT   MAX (h.cheque_hon_dt)
           INTO   v_cheque_hon_dt
           FROM   acc_chq_hon_dhon h
          WHERE   h.proposal_no = fun_ins_pgid_to_proposal_no (p_pgid)
                  AND h.status = '1';

         IF v_cheque_hon_dt IS NOT NULL AND v_cheque_hon_dt > v_fp_coll_dt
         THEN
            v_fp_coll_dt := v_cheque_hon_dt;
         END IF;

         --End of find cheque honor date--
         SELECT   COUNT (1)
           INTO   v_coll_fy_open_st
           FROM   acc_fiscal_year
          WHERE   fy_close = 0
                  AND TRUNC (v_fp_coll_dt) BETWEEN fy_st_dt AND fy_ed_dt;

         IF v_coll_fy_open_st = 0                                   --FY Close
         THEN
            p_adjustment_date := TRUNC (SYSDATE);
         ELSE
            p_adjustment_date := v_fp_coll_dt;
         END IF;
      ELSIF p_prem_type = '1'
      --0 for proposal amount, 1 for deferd, 2 for 2nd year + renewal
      THEN                                                     --Deferd amount
         IF p_adv_flag = '1'
         THEN
            SELECT   a.receive_date
              INTO   v_prem_coll_dt
              FROM   acc_receivables a
             WHERE       a.pgid = p_pgid
                     AND a.receive_id = p_receive_id
                     AND a.status = '0'
                     AND a.rec_status = '1'
                     AND (a.receipt_status = '1'
                          OR ( ---This part is temporary add by Musha on 12-03-2015
                              a.receipt_status = '0'
                              AND a.tot_premium_amt <=
                                    a.coll_amount + NVL (a.avl_sus_amt, 0)))
                     AND NVL (a.cheque_deposit, 'N') =
                           DECODE (a.receive_mode,
                                   '2', 'Y',
                                   NVL (a.cheque_deposit, 'N'))
                     AND NVL (a.coll_check_status, '0') =
                           DECODE (a.mode_tp, '1', '0', '1')
                     AND (NVL (a.coll_amount, 0) = 0
                          OR (NVL (a.coll_amount, 0) > 0
                              AND EXISTS
                                    (SELECT   1
                                       FROM   acc_bank_tran_mst m,
                                              acc_bank_tran_dtl d
                                      WHERE       m.coll_purpose = '2'
                                              AND d.pgid = a.pgid
                                              AND d.receive_id = a.receive_id
                                              AND NVL (d.deposit_st, '0') =
                                                    '1'
                                              AND m.tran_id = d.tran_id)))/*

                                                                               /*AND EXISTS (
                                                                                      SELECT 1
                                                                                        FROM acc_bank_tran_mst m, acc_bank_tran_dtl d
                                                                                       WHERE m.coll_purpose = '2'
                                                                                         AND d.pgid = a.pgid
                                                                                         AND d.receive_id = a.receive_id
                                                                                         AND NVL (d.deposit_st, '0') = '1'
                                                                                         AND m.tran_id = d.tran_id)*/
            ;

            --Find cheque honor date--
            SELECT   MAX (h.cheque_hon_dt)
              INTO   v_cheque_hon_dt
              FROM   acc_chq_hon_dhon h
             WHERE       h.policy_no = fun_ins_pgid_to_policy_no (p_pgid)
                     AND h.receive_id = p_receive_id
                     AND h.status = '1';

            IF v_cheque_hon_dt IS NOT NULL
               AND v_cheque_hon_dt > v_prem_coll_dt
            THEN
               v_prem_coll_dt := v_cheque_hon_dt;
            END IF;

            --End of find cheque honor date--
            SELECT   COUNT (1)
              INTO   v_coll_fy_open_st
              FROM   acc_fiscal_year
             WHERE   fy_close = 0
                     AND TRUNC (v_prem_coll_dt) BETWEEN fy_st_dt AND fy_ed_dt;

            IF v_coll_fy_open_st = 0                                --FY Close
            THEN
               /*IF p_coll_due_dt <= TRUNC (SYSDATE)
               THEN
                  p_adjustment_date := p_coll_due_dt;
               ELSE
                  p_adjustment_date := TRUNC (SYSDATE);
               END IF;*/
               p_adjustment_date := TRUNC (SYSDATE);
            ---Update by Md. Sayadur on 09/01/2018 due to adjustmet date is less than collection date
            ELSE
               p_adjustment_date := v_prem_coll_dt;
            END IF;
         ELSE
            SELECT   a.receive_date
              INTO   v_prem_coll_dt
              FROM   acc_receivables a
             WHERE       a.pgid = p_pgid
                     AND a.receive_id = p_receive_id
                     AND a.status = '0'
                     AND a.rec_status = '1'
                     AND (a.receipt_status = '1'
                          OR ( ---This part is temporary add by Musha on 12-03-2015
                              a.receipt_status = '0'
                              AND a.tot_premium_amt <=
                                    a.coll_amount + NVL (a.avl_sus_amt, 0)))
                     AND NVL (a.cheque_deposit, 'N') =
                           DECODE (a.receive_mode,
                                   '2', 'Y',
                                   NVL (a.cheque_deposit, 'N'))
                     AND NVL (a.coll_check_status, '0') =
                           DECODE (a.mode_tp, '1', '0', '1')
                     AND (NVL (a.coll_amount, 0) = 0
                          OR (NVL (a.coll_amount, 0) > 0
                              AND EXISTS
                                    (SELECT   1
                                       FROM   acc_bank_tran_mst m,
                                              acc_bank_tran_dtl d
                                      WHERE       m.coll_purpose = '2'
                                              AND d.pgid = a.pgid
                                              AND d.receive_id = a.receive_id
                                              AND NVL (d.deposit_st, '0') =
                                                    '1'
                                              AND m.tran_id = d.tran_id)))/*
                                                                               /*AND EXISTS (
                                                                                      SELECT 1
                                                                                        FROM acc_bank_tran_mst m, acc_bank_tran_dtl d
                                                                                       WHERE m.coll_purpose = '2'
                                                                                         AND d.pgid = a.pgid
                                                                                         AND d.receive_id = a.receive_id
                                                                                         AND NVL (d.deposit_st, '0') = '1'
                                                                                         AND m.tran_id = d.tran_id)*/
            ;

            --Find cheque honor date--
            SELECT   MAX (h.cheque_hon_dt)
              INTO   v_cheque_hon_dt
              FROM   acc_chq_hon_dhon h
             WHERE       h.policy_no = fun_ins_pgid_to_policy_no (p_pgid)
                     AND h.receive_id = p_receive_id
                     AND h.status = '1';

            IF v_cheque_hon_dt IS NOT NULL
               AND v_cheque_hon_dt > v_prem_coll_dt
            THEN
               v_prem_coll_dt := v_cheque_hon_dt;
            END IF;

            --End of find cheque honor date--
            SELECT   COUNT (1)
              INTO   v_coll_fy_open_st
              FROM   acc_fiscal_year
             WHERE   fy_close = 0
                     AND TRUNC (v_prem_coll_dt) BETWEEN fy_st_dt AND fy_ed_dt;

            IF v_coll_fy_open_st = 0                                --FY Close
            THEN
               p_adjustment_date := TRUNC (SYSDATE);
            ELSE
               p_adjustment_date := v_prem_coll_dt;
            END IF;
         END IF;
      ELSE     --0 for proposal amount, 1 for deferd, 2 for 2nd year + renewal
                                                        ----2nd year + renewal
         IF p_adv_flag = '1'
         THEN
            --Find cheque honor date--
            SELECT   MAX (h.cheque_hon_dt)
              INTO   v_cheque_hon_dt
              FROM   acc_chq_hon_dhon h
             WHERE       h.policy_no = fun_ins_pgid_to_policy_no (p_pgid)
                     AND h.receive_id = p_receive_id
                     AND h.status = '1';

            --End of find cheque honor date--
            IF v_cheque_hon_dt IS NOT NULL
               AND v_cheque_hon_dt > p_coll_due_dt
            THEN
               SELECT   COUNT (1)
                 INTO   v_coll_fy_open_st
                 FROM   acc_fiscal_year
                WHERE   fy_close = 0
                        AND TRUNC (v_cheque_hon_dt) BETWEEN fy_st_dt
                                                        AND  fy_ed_dt;
            ELSE
               SELECT   COUNT (1)
                 INTO   v_coll_fy_open_st
                 FROM   acc_fiscal_year
                WHERE   fy_close = 0
                        AND TRUNC (p_coll_due_dt) BETWEEN fy_st_dt
                                                      AND  fy_ed_dt;
            END IF;

            SELECT   COUNT (1)
              INTO   v_coll_fy_open_st
              FROM   acc_fiscal_year
             WHERE   fy_close = 0
                     AND TRUNC (p_coll_due_dt) BETWEEN fy_st_dt AND fy_ed_dt;

            IF v_coll_fy_open_st = 0                                --FY Close
            THEN
               p_adjustment_date := TRUNC (SYSDATE);
            ELSE
               IF v_cheque_hon_dt IS NOT NULL
                  AND v_cheque_hon_dt > p_coll_due_dt
               THEN
                  p_adjustment_date := v_cheque_hon_dt;
               ELSE
                  -- p_adjustment_date := p_coll_due_dt;
                  p_adjustment_date := TRUNC (SYSDATE);
               ---Update by Md. Sayadur on 09/01/2018 due to adjustmet date is less than collection date
               END IF;
            END IF;
         ELSE
            SELECT   a.receive_date
              INTO   v_prem_coll_dt
              FROM   acc_receivables a, ins_p_summery s
             WHERE       a.pgid = p_pgid
                     AND a.receive_id = p_receive_id
                     AND a.status = '0'
                     AND a.rec_status = '1'
                     AND a.pgid = s.pgid                ---Musha on 12-03-2015
                     AND (a.receipt_status = '1'
                          OR ( ---This part is temporary add by Musha on 12-03-2015
                              a.receipt_status = '0'
                              AND a.tot_premium_amt <=
                                    a.coll_amount + NVL (a.avl_sus_amt, 0)/*AND s.pay_mode_cd = '04'
                                                                          AND a.installment_no_from >=
                                                                                 DECODE (s.pay_mode_cd,
                                                                                         '01', 3,
                                                                                         '02', 5,
                                                                                         '03', 9,
                                                                                         '04', 25,
                                                                                         99
                                                                                        )*/
                            ))
                     AND NVL (a.cheque_deposit, 'N') =
                           DECODE (a.receive_mode,
                                   '2', 'Y',
                                   NVL (a.cheque_deposit, 'N'))
                     AND NVL (a.coll_check_status, '0') =
                           DECODE (a.mode_tp, '1', '0', '1')
                     AND (NVL (a.coll_amount, 0) = 0
                          OR (NVL (a.coll_amount, 0) > 0
                              AND EXISTS
                                    (SELECT   1
                                       FROM   acc_bank_tran_mst m,
                                              acc_bank_tran_dtl d
                                      WHERE       m.coll_purpose = '2'
                                              AND d.pgid = a.pgid
                                              AND d.receive_id = a.receive_id
                                              AND NVL (d.deposit_st, '0') =
                                                    '1'
                                              AND m.tran_id = d.tran_id)))/*
                                                                               /*AND EXISTS (
                                                                                      SELECT 1
                                                                                        FROM acc_bank_tran_mst m, acc_bank_tran_dtl d
                                                                                       WHERE m.coll_purpose = '2'
                                                                                         AND d.pgid = a.pgid
                                                                                         AND d.receive_id = a.receive_id
                                                                                         AND NVL (d.deposit_st, '0') = '1'
                                                                                         AND m.tran_id = d.tran_id)*/
            ;

            --Find cheque honor date--
            SELECT   MAX (h.cheque_hon_dt)
              INTO   v_cheque_hon_dt
              FROM   acc_chq_hon_dhon h
             WHERE       h.policy_no = fun_ins_pgid_to_policy_no (p_pgid)
                     AND h.receive_id = p_receive_id
                     AND h.status = '1';

            IF v_cheque_hon_dt IS NOT NULL
               AND v_cheque_hon_dt > v_prem_coll_dt
            THEN
               v_prem_coll_dt := v_cheque_hon_dt;
            END IF;

            --End of find cheque honor date--
            SELECT   COUNT (1)
              INTO   v_coll_fy_open_st
              FROM   acc_fiscal_year
             WHERE   fy_close = 0
                     AND TRUNC (v_prem_coll_dt) BETWEEN fy_st_dt AND fy_ed_dt;

            IF v_coll_fy_open_st = 0                                --FY Close
            THEN
               p_adjustment_date := TRUNC (SYSDATE);
            ELSE
               p_adjustment_date := v_prem_coll_dt;
            END IF;
         END IF;
      END IF;
   ELSE                     --0 for system adjustment, 1 for manual adjustment
      --Find last document coll date--
      SELECT   MAX (collection_dt)
        INTO   v_doc_coll_dt
        FROM   ser_doc_coll_info
       WHERE       pgid = p_pgid
               AND service_id IS NULL
               AND checked_dt IS NOT NULL
               AND NVL (coll_purpose, '0') = '0';

      IF v_doc_coll_dt IS NOT NULL
      THEN
         p_adjustment_date := v_doc_coll_dt;
      ELSE
         /*If document not required then find last partial coll
          date if exists or last premium coll date
         */
         SELECT   MAX (p.receive_date)
           INTO   v_partial_coll_dt
           FROM   acc_partial_receivables p
          WHERE   p.pgid = p_pgid AND p.rec_status = '1'
                  AND p.receive_id =
                        (SELECT   MAX (receive_id)
                           FROM   acc_partial_receivables_ref
                          WHERE   receive_id_ref IN
                                        (SELECT   receive_id
                                           FROM   v_unadjusted_collection
                                          WHERE   pgid = p_pgid))
                  AND NVL (p.coll_check_status, '0') =
                        DECODE (p.mode_tp, '1', '0', '1')
                  AND EXISTS
                        (SELECT   1
                           FROM   acc_bank_tran_mst m, acc_bank_tran_dtl d
                          WHERE       m.coll_purpose = '2'
                                  AND d.pgid = p.pgid
                                  AND d.receive_id = p.receive_id
                                  AND NVL (d.deposit_st, '0') = '1'
                                  AND m.tran_id = d.tran_id);

         SELECT   MAX (a.receive_date)
           INTO   v_prem_coll_dt
           FROM   acc_receivables a
          WHERE       a.pgid = p_pgid
                  AND a.status = '0'
                  AND a.rec_status = '1'
                  AND a.receipt_status = '0'
                  AND NVL (a.cheque_deposit, 'N') =
                        DECODE (a.receive_mode,
                                '2', 'Y',
                                NVL (a.cheque_deposit, 'N'))
                  AND NVL (a.man_adjusted, '0') != '1'
                  AND NVL (a.coll_check_status, '0') =
                        DECODE (a.mode_tp, '1', '0', '1')
                  AND (NVL (a.coll_amount, 0) = 0
                       OR (NVL (a.coll_amount, 0) > 0
                           AND EXISTS
                                 (SELECT   1
                                    FROM   acc_bank_tran_mst m,
                                           acc_bank_tran_dtl d
                                   WHERE       m.coll_purpose = '2'
                                           AND d.pgid = a.pgid
                                           AND d.receive_id = a.receive_id
                                           AND NVL (d.deposit_st, '0') = '1'
                                           AND m.tran_id = d.tran_id)));

         /*AND EXISTS (
                SELECT 1
                  FROM acc_bank_tran_mst m, acc_bank_tran_dtl d
                 WHERE m.coll_purpose = '2'
                   AND d.pgid = a.pgid
                   AND d.receive_id = a.receive_id
                   AND NVL (d.deposit_st, '0') = '1'
                   AND m.tran_id = d.tran_id);*/
         IF v_partial_coll_dt IS NOT NULL
         THEN
            IF v_prem_coll_dt >= v_partial_coll_dt
            THEN
               p_adjustment_date := v_prem_coll_dt;
            ELSE
               p_adjustment_date := v_partial_coll_dt;
            END IF;
         ELSE
            p_adjustment_date := v_prem_coll_dt;
         END IF;
      END IF;

      --Find cheque honor date--
      SELECT   MAX (h.cheque_hon_dt)
        INTO   v_cheque_hon_dt
        FROM   acc_chq_hon_dhon h
       WHERE   h.policy_no = fun_ins_pgid_to_policy_no (p_pgid)
               AND (h.receive_id = p_receive_id
                    OR h.receive_id IN
                            (SELECT   receive_id
                               FROM   acc_partial_receivables_ref
                              WHERE   receive_id_ref = p_receive_id))
               AND h.status = '1';

      IF v_cheque_hon_dt IS NOT NULL AND v_cheque_hon_dt > p_adjustment_date
      THEN
         p_adjustment_date := v_cheque_hon_dt;
      END IF;

      --End of find cheque honor date--
      SELECT   COUNT (1)
        INTO   v_coll_fy_open_st
        FROM   acc_fiscal_year
       WHERE   fy_close = 0
               AND TRUNC (p_adjustment_date) BETWEEN fy_st_dt AND fy_ed_dt;

      IF v_coll_fy_open_st = 0
      --FY Close
      THEN
         p_adjustment_date := TRUNC (SYSDATE);
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      p_adjustment_date := NULL;
END pro_find_adj_date;
/


--
-- PRO_FIND_SOURCE_TAX  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_find_source_tax wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
365 22b
p1O9QVXmh/gkJlLvj1u8SLcImYIwgzIJ2dxqfC9dbmS0mQnmDMPFUmvF8R5+ugw/Rg1Mg7cC
MFpxFgaoCDpXKOYTYa2ip7/Jn580bIhKAklG/tB5MEIQEp5PBbvQxsGlgaUd3uGmARYfUam5
tkXatC9tkfILWEfVd74FiVd+VGheFjEbfEOfk4MKiAltLdS2xo+0RcWIu0pwyIVpse1q2AQI
bIxS8WwVK4VcuNQC4Yz97oPi8C8a6oaoX4JTWBURm9BiWBajjz6KdB/m6nRt074dE8YmpLcJ
a0rhRvIwRB/KWHmB5SNQG97vwItQVF4Tt8x5QDzVAqA3I8tTD+DPKLpbnuvftaHChuZkkaut
yJvPNdSDxRfft1Qogk2XyP9fM0w454xWCj9bYflltAjbY55xZWt7MUQnj9oZzn8g7VkLP+0T
r/kJIVZ/u2pI0FuLp039t/gStvjICEWpIc29TByeAQgmm7MyK5b78m1JjhNir03Fi7c2sXYM
SVlVJBsOr6J4kSh+KgqrOjPc1AMYw0xZ/z/7XVM8+g==
/


--
-- PRO_FIND_SOURCE_TAX_RATE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_find_source_tax_rate (
   p_applicable_on     IN       VARCHAR2,
   p_pgid              IN       ins_p_proposal.pgid%TYPE,
   p_fa_emp_id         IN       VARCHAR2,
   p_tax_calc_for      IN       VARCHAR2,
   p_source_tax_rate   OUT      NUMBER,
   p_error             OUT      VARCHAR2
)
IS
   v_tax_rate          acc_source_tax_rate_mst.tax_rate%TYPE;
   v_tin_tax_rate      acc_source_tax_rate_mst.tax_rate%TYPE;
   v_no_tin_tax_rate   acc_source_tax_rate_mst.tax_rate%TYPE;
   v_tin_cnt           NUMBER (1) := 0;
BEGIN
   SELECT NVL (MAX (DECODE (m.tin_status, 1, 0, 2, 0, m.tax_rate)), 0),
          NVL (MAX (DECODE (m.tin_status, 1, m.tax_rate, 0)), 0),
          NVL (MAX (DECODE (m.tin_status, 2, m.tax_rate, 0)), 0)
     INTO v_tax_rate,
          v_tin_tax_rate,
          v_no_tin_tax_rate
     FROM acc_source_tax_rate_mst m, acc_source_tax_rate_dtl d
    WHERE m.status = '1'
      AND d.status = '1'
      AND m.applicable_on = p_applicable_on
      AND DECODE (m.applicable_on, 1, d.clm_cause_cd, 2, emp_type_cd) =
                                                                p_tax_calc_for
      AND m.source_cd = d.source_cd;

   IF v_tax_rate > 0 OR v_tin_tax_rate > 0 OR v_no_tin_tax_rate > 0
   THEN
      IF v_tax_rate = 0
      THEN
         IF p_applicable_on = '1'
         THEN                                                    --Settlememt
            NULL;
         ELSIF p_applicable_on = '2'
         THEN                                                    --Commisstion
            IF p_tax_calc_for = '05'
            THEN
               SELECT COUNT (*)
                 INTO v_tin_cnt
                 FROM hrm_agent_detl
                WHERE agent_id = p_fa_emp_id AND tin_no IS NOT NULL;
            ELSE
               SELECT COUNT (*)
                 INTO v_tin_cnt
                 FROM hrm_employee_detl
                WHERE emp_gid = p_fa_emp_id AND tin_no IS NOT NULL;
            END IF;

            IF v_tin_cnt > 0
            THEN
               p_source_tax_rate := v_tin_tax_rate;
            ELSE
               p_source_tax_rate := v_no_tin_tax_rate;
            END IF;
         END IF;
      ELSE
         p_source_tax_rate := v_tax_rate;
      END IF;
   ELSE
      p_source_tax_rate := 0;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      p_source_tax_rate := 0;
END;
/


--
-- PRO_FP_COMM_BILL_NO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_fp_comm_bill_no wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
9f6 3a4
YcRPtRQFkKlooPrW6C8ERvw+FgQwg1UrmiATfC8ZgqqV7VkUq/Lm/jwWtxZ1OfS0d98pm5He
ChsuxQw9wfkI2v24Sx2g0Ou5ROC8+IFVOtGUFz76J9yPQ4HYP+1NT8HozCQ/JCQKJBdUNqZp
JphRVlynWuFgnoMiNSzpYhS+ScPFp8Hp8kDIACT1sAozayWKA3pc7Ydi5wdtVO0LFesQFSBR
NTaJgXwr2TNsAQf/DT+CTdbICstIdkTZDi+Dl8xDEG6LmBYIfKFejR9mLvIyZr3qrHrYz3V/
1rQFpH5hO2yWQShAJT6w8ZzsjhrhGYze/Wj3+Kwn6fjAATYd2fYYQlBZ9BoU5qqpArqNQ999
iW1o65Y2UEVWmHLAriN4QbErNj6hxX8Pxa3VjfCx+ykJ8ouSCKatFwc1Blrt2NUfTlNJtFg8
HYo03AWHj10S8sWTfHgrIWc3OGBxV8FISrZuJ9xAHBE8tRXqkbPTg3/m0GxW5Iv0cANGli9b
HJYi0bgRiN7Z3e6iwjPm0TnEgqylKd5VIR7qibgpwQdjidA2OktFkFuottEkkTUMrL74b8jQ
QhA7IVaMag1DLeJfPVhdKrHT4rkISEBQtfdk9z94kNzwT6JD2OgxfTLRFstxMd/uVnKEiKHP
duc/P7Z8E6M2ROKm4ixYbuaMupNt5xtkX+8/lEqhk7b7mbrWuLYgBi8ZGfWT0vEIE1Fi1MMh
K0v1LgtLu8pJLkzmkqvGeLWiWtyM6VWsSmdu23EAaldfOe//MgFkeF+5cHagUgWzoBM2U09H
Fu05EziSst+rKn0e2SK8Va01fTtNXvqIeMgKkDA17/7ue/U/cnQpf1NiVbTYk+xmQNk/1sPW
yKhHCksytKQzz3Vshmj1IGuyWrhWYQoMuk1X696PqvHWDfkpljMuZ+8=
/


--
-- PRO_FP_SINGLE_DEMAND_NOTC_PREP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_fp_single_demand_notc_prep (
   P_POLICY_NO   IN     INS_P_PROPOSAL.POLICY_NO%TYPE,
   P_USR         IN     VARCHAR2,
   P_DT          IN     DATE,
   P_ERRM           OUT VARCHAR2,
   P_RECORD         OUT NUMBER
)
IS
   V_YRLY_NO_INST               INS_PAY_MODE.YRLY_NO_INST%TYPE;



   CURSOR DEMAND_NOTICE
   IS
      SELECT   IPS.PGID,
               FUN_INS_PGID_TO_POLICY_NO (IPS.PGID) POLICY_NO,
               IPS.INSTALLMENT_PREMIUM,
               IPS.POLICY_STATUS,
               (TO_CHAR (IPS.COMM_DATE, 'DD') || '-'
                || TO_CHAR (
                      ADD_MONTHS (IPS.LAST_PAID_DATE,
                                  DECODE (IPM.YRLY_NO_INST,
                                          1,
                                          12,
                                          2,
                                          6,
                                          4,
                                          3,
                                          12,
                                          1)),
                      'MON-RRRR'
                   ))
                  NEXT_DUE_DATE,
               IPM.YRLY_NO_INST,
               IPS.POLICY_INSTALLMENT,
               IPS.COMM_DATE,
               IPS.LAST_PAID_DATE,
               IPS.SUM_ASSURED,
               IPS.PRODUCT_CD,
               IPS.TERM,
               FUN_INS_PAY_MODE (IPS.PAY_MODE_CD) PAY_MODE,
               FUN_INS_OPTION (IPS.OPTION_CD) OPTION_NM,
               IPS.DO_GID,
               IPS.DM_GID,
               IPS.BRANCH_OFF,
               IPS.SALES_OFF,
               IPS.ZONAL_OFF,
               IPS.REGIONAL_OFF,
               IPS.AGENT_ID,
               IPS.OFFICE_CD,
               IPS.LAST_PAID_INST_NO
        FROM   INS_P_SUMMERY IPS, INS_PAY_MODE IPM
       WHERE       IPS.PGID = FUN_INS_POLICY_NO_TO_PGID (P_POLICY_NO)
               AND IPS.POLICY_INSTALLMENT > IPS.LAST_PAID_INST_NO
               AND IPS.PAY_MODE_CD = IPM.PAY_MODE_CD;

   V_DEMAND_NOTICE              DEMAND_NOTICE%ROWTYPE;
   V_NEXT_DUE_DATE              DATE;
   V_COMM_DATE                  DATE;
   V_TOTAL_POLICY_INSTALLMENT   NUMBER (3);
   V_NEXT_DUE_INST_NO           NUMBER (3);
   V_COUNT                      NUMBER (10) := 0;
   V_PAY_MODE_CD                VARCHAR2 (5);
   V_COME_DT                    DATE;
   V_LAST_PD_DT                 DATE;
   V_PAY                        VARCHAR2 (3);
   V_NEXT_DUE_DATE1             DATE;
   V_MONTH_LAST_DAY             NUMBER (2) := 0;
   V_MONTH_LAST_DAY1            NUMBER (2) := 0;
BEGIN
   SELECT   COMM_DATE, LAST_PAID_DATE, PAY_MODE_CD
     INTO   V_COME_DT, V_LAST_PD_DT, V_PAY
     FROM   INS_P_SUMMERY
    WHERE   PGID = FUN_INS_POLICY_NO_TO_PGID (P_POLICY_NO);



   SELECT   TO_NUMBER(TO_CHAR (
                         LAST_DAY(TO_DATE (
                                     TO_CHAR (
                                        ADD_MONTHS (
                                           V_LAST_PD_DT,
                                           DECODE (V_PAY,
                                                   '01', 12,
                                                   '02', 6,
                                                   '03', 3,
                                                   1)
                                        ),
                                        'RRRRMM'
                                     )
                                     || '01',
                                     'RRRRMMDD'
                                  )),
                         'DD'
                      ))
     INTO   V_MONTH_LAST_DAY1
     FROM   DUAL;

   IF V_MONTH_LAST_DAY1 >= TO_NUMBER (TO_CHAR (V_COMM_DATE, 'DD'))
   THEN
      SELECT   TO_DATE(TO_CHAR (V_COMM_DATE, 'DD') || '-'
                       || TO_CHAR (
                             ADD_MONTHS (
                                V_LAST_PD_DT,
                                DECODE (V_PAY, '01', 12, '02', 6, '03', 3, 1)
                             ),
                             'MON-RRRR'
                          ))
        INTO   V_NEXT_DUE_DATE1
        FROM   DUAL;
   ELSE
      SELECT   TO_CHAR (
                  ADD_MONTHS (V_LAST_PD_DT,
                              DECODE (V_PAY, '01', 12, '02', 6, '03', 3, 1)),
                  'DD-MON-RRRR'
               )
        INTO   V_NEXT_DUE_DATE1
        FROM   DUAL;
   END IF;



   UPDATE   INS_P_SUMMERY
      SET   NEXT_DUE_INST_NO = (LAST_PAID_INST_NO + 1),
            NEXT_DUE_DATE = V_NEXT_DUE_DATE1
    WHERE   PGID = FUN_INS_POLICY_NO_TO_PGID (P_POLICY_NO);

   COMMIT;
   P_RECORD := 0;

   OPEN DEMAND_NOTICE;

   LOOP
      FETCH DEMAND_NOTICE INTO   V_DEMAND_NOTICE;

      EXIT WHEN DEMAND_NOTICE%NOTFOUND;
      V_NEXT_DUE_DATE := V_DEMAND_NOTICE.COMM_DATE;
      V_NEXT_DUE_INST_NO := 1;
      V_COMM_DATE := V_DEMAND_NOTICE.COMM_DATE;
      V_TOTAL_POLICY_INSTALLMENT := V_DEMAND_NOTICE.POLICY_INSTALLMENT;

      WHILE V_NEXT_DUE_INST_NO <= V_TOTAL_POLICY_INSTALLMENT
            AND TRUNC (V_NEXT_DUE_DATE) <= TRUNC (SYSDATE) + 731
      LOOP
         BEGIN
            SELECT   COUNT (1)
              INTO   V_COUNT
              FROM   INS_PREM_ACC_RECEIVABLE
             WHERE   PGID = V_DEMAND_NOTICE.PGID
                     AND INSTALLMENT_NO = V_NEXT_DUE_INST_NO;

            BEGIN
               IF V_COUNT = 0
               THEN
                  INSERT INTO INS_PREM_ACC_RECEIVABLE (
                                                          PGID,
                                                          INSTALLMENT_PREMIUM,
                                                          PAID_AMOUNT,
                                                          BALANCE,
                                                          PAY_STATUS,
                                                          I_USR,
                                                          I_DT,
                                                          PREM_YEAR_STATUS,
                                                          SL_NO,
                                                          POLICY_STATUS,
                                                          INSTALLMENT_NO,
                                                          NEXT_DUE_DT,
                                                          TOTAL_INSTALLMENT,
                                                          PROPOSED_STATUS,
                                                          DATE_OF_COM,
                                                          LAST_PAID_DT,
                                                          SUM_ASSURED,
                                                          PID_TERM,
                                                          PAY_MODE,
                                                          POL_OPTION,
                                                          DO_ID,
                                                          DM_ID,
                                                          BRANCH_OFF,
                                                          SALES_OFF,
                                                          ZONAL_OFF,
                                                          REGIONAL_OFF,
                                                          AGENT_ID,
                                                          POLICY_NO,
                                                          OFFICE_CD
                             )
                    VALUES   (
                                 V_DEMAND_NOTICE.PGID,
                                 V_DEMAND_NOTICE.INSTALLMENT_PREMIUM,
                                 0,
                                 V_DEMAND_NOTICE.INSTALLMENT_PREMIUM,
                                 0,
                                 P_USR,
                                 P_DT,
                                 DECODE (
                                    CEIL(V_NEXT_DUE_INST_NO
                                         / V_DEMAND_NOTICE.YRLY_NO_INST),
                                    1,
                                    'F',
                                    2,
                                    'S',
                                    'R'
                                 ),
                                 DEMAND_NOTICE_SEQ.NEXTVAL,
                                 V_DEMAND_NOTICE.POLICY_STATUS,
                                 V_NEXT_DUE_INST_NO,
                                 V_NEXT_DUE_DATE,
                                 V_DEMAND_NOTICE.POLICY_INSTALLMENT,
                                 '0',
                                 V_DEMAND_NOTICE.COMM_DATE,
                                 V_DEMAND_NOTICE.LAST_PAID_DATE,
                                 V_DEMAND_NOTICE.SUM_ASSURED,
                                 V_DEMAND_NOTICE.PRODUCT_CD
                                 || V_DEMAND_NOTICE.TERM,
                                 V_DEMAND_NOTICE.PAY_MODE,
                                 V_DEMAND_NOTICE.OPTION_NM,
                                 V_DEMAND_NOTICE.DO_GID,
                                 V_DEMAND_NOTICE.DM_GID,
                                 V_DEMAND_NOTICE.BRANCH_OFF,
                                 V_DEMAND_NOTICE.SALES_OFF,
                                 V_DEMAND_NOTICE.ZONAL_OFF,
                                 V_DEMAND_NOTICE.REGIONAL_OFF,
                                 V_DEMAND_NOTICE.AGENT_ID,
                                 V_DEMAND_NOTICE.POLICY_NO,
                                 V_DEMAND_NOTICE.OFFICE_CD
                             );
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  P_ERRM := 'Fail';
                  EXIT;
            END;
         END;

         V_NEXT_DUE_INST_NO := V_NEXT_DUE_INST_NO + 1;



         SELECT   TO_NUMBER(TO_CHAR (
                               LAST_DAY(TO_DATE (
                                           TO_CHAR (
                                              ADD_MONTHS (
                                                 V_NEXT_DUE_DATE,
                                                 DECODE (
                                                    V_DEMAND_NOTICE.YRLY_NO_INST,
                                                    1,
                                                    12,
                                                    2,
                                                    6,
                                                    4,
                                                    3,
                                                    12,
                                                    1
                                                 )
                                              ),
                                              'RRRRMM'
                                           )
                                           || '01',
                                           'RRRRMMDD'
                                        )),
                               'DD'
                            ))
           INTO   V_MONTH_LAST_DAY
           FROM   DUAL;

         IF V_MONTH_LAST_DAY >= TO_NUMBER (TO_CHAR (V_COMM_DATE, 'DD'))
         THEN
            SELECT   TO_DATE(TO_CHAR (V_COMM_DATE, 'DD') || '-'
                             || TO_CHAR (
                                   ADD_MONTHS (
                                      V_NEXT_DUE_DATE,
                                      DECODE (V_DEMAND_NOTICE.YRLY_NO_INST,
                                              1,
                                              12,
                                              2,
                                              6,
                                              4,
                                              3,
                                              12,
                                              1)
                                   ),
                                   'MON-RRRR'
                                ))
              INTO   V_NEXT_DUE_DATE
              FROM   DUAL;
         ELSE
            SELECT   TO_DATE(V_MONTH_LAST_DAY || '-'
                             || TO_CHAR (
                                   ADD_MONTHS (
                                      V_NEXT_DUE_DATE,
                                      DECODE (V_DEMAND_NOTICE.YRLY_NO_INST,
                                              1,
                                              12,
                                              2,
                                              6,
                                              4,
                                              3,
                                              12,
                                              1)
                                   ),
                                   'MON-RRRR'
                                ))
              INTO   V_NEXT_DUE_DATE
              FROM   DUAL;
         END IF;
      END LOOP;

      IF P_ERRM = 'Fail'
      THEN
         ROLLBACK;
      ELSE
         COMMIT;
         P_RECORD := P_RECORD + 1;
         P_ERRM := 'Success';
      END IF;
   END LOOP;

   CLOSE DEMAND_NOTICE;
EXCEPTION
   WHEN OTHERS
   THEN
      P_ERRM := SQLERRM;
      ROLLBACK;
END PRO_FP_SINGLE_DEMAND_NOTC_PREP;
/


--
-- PRO_GET_SYS_CONFIG_ST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_get_sys_config_st (
   p_pgid            IN       ins_p_proposal.pgid%TYPE,
   p_config_id       IN       ins_system_config.config_id%TYPE,
   p_sys_config_st   OUT      NUMBER,
   p_upd_message     OUT      VARCHAR2
)
IS
   v_config_active_st     NUMBER (1);
   v_last_info_upd_date   DATE;
   v_act_user             VARCHAR2 (20);
   v_config_act_for       ins_system_config.config_act_for%TYPE;
   v_date_from            ins_system_config.date_from%TYPE;
   v_date_to              ins_system_config.date_to%TYPE;
   v_no_of_days           ins_system_config.no_of_days%TYPE;
   v_config_message1      ins_system_config.config_message1%TYPE;
   v_config_message2      ins_system_config.config_message2%TYPE;
   v_config_message3      ins_system_config.config_message3%TYPE;
   v_config_message4      ins_system_config.config_message4%TYPE;
   v_config_message5      ins_system_config.config_message5%TYPE;
   v_policy_active_cnt    NUMBER (1)                               := 0;
/*
   p_sys_config_st = 0 Configuration is not active and user can proceed/ user can perform the activity
   p_sys_config_st = 1 Configuration is active and user can not proceed/ user cannot perform the activity
*/
BEGIN
   BEGIN
      SELECT config_act_for, date_from, date_to, no_of_days,
             config_message1, config_message2, config_message3,
             config_message4, config_message5, 1
        INTO v_config_act_for, v_date_from, v_date_to, v_no_of_days,
             v_config_message1, v_config_message2, v_config_message3,
             v_config_message4, v_config_message5, v_config_active_st
        FROM ins_system_config c
       WHERE c.config_id = p_config_id AND status = '1';
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         v_config_active_st := 0;
   END;

   p_sys_config_st := 0;

   IF v_config_active_st = 1
   THEN
      IF p_config_id = 1
      THEN
         SELECT MAX (TRUNC (l.act_datetime))
           INTO v_last_info_upd_date
           FROM ins_info_upd_log l
          WHERE l.pgid = p_pgid;

         SELECT MAX (l.act_user)
           INTO v_act_user
           FROM ins_info_upd_log l
          WHERE l.pgid = p_pgid
            AND TRUNC (l.act_datetime) = v_last_info_upd_date;

         /*config_act_for =
           1 for Date Duration,
           2 for Last no_of_days (start from DATE_TO),
           3 for Next no_of_days (start from DATE_from)
           if date is null then consider sysdate
         */
         IF v_config_act_for = 2
         THEN
            IF v_last_info_upd_date <=
                      NVL (v_date_to, TRUNC (SYSDATE))
                      + NVL (v_no_of_days, 0)
            THEN
               p_sys_config_st := 1;
               p_upd_message :=
                     v_config_message1
                  || ' '
                  || v_last_info_upd_date
                  || ' '
                  || v_config_message2
                  || ' '
                  || v_act_user
                  || ' '
                  || v_config_message3
                  || ' '
                  || (v_last_info_upd_date + 31);
            END IF;
         END IF;
      ELSIF p_config_id = 3
      THEN
         p_sys_config_st := 1;
         p_upd_message :=
               v_config_message1
            || '/'
            || v_config_message2
            || '/'
            || v_config_message3
            || '/'
            || v_config_message4
            || '/'
            || v_config_message5;
      ELSIF p_config_id = 5
      THEN
         p_sys_config_st := 1;
         p_upd_message :=
               v_config_message1
            || '/'
            || v_config_message2
            || '/'
            || v_config_message3
            || '/'
            || v_config_message4
            || '/'
            || v_config_message5;
      ELSIF p_config_id = 9
      THEN
         p_sys_config_st := 1;
         p_upd_message :=
               v_config_message1
            || '/'
            || v_config_message2
            || '/'
            || v_config_message3
            || '/'
            || v_config_message4
            || '/'
            || v_config_message5;
      ELSIF p_config_id = 12
      THEN
         p_sys_config_st := 1;
      ELSIF p_config_id = 13
      THEN
         p_sys_config_st := 1;
      ELSIF p_config_id = 14
      THEN
         SELECT COUNT (s.pgid)
           INTO v_policy_active_cnt
           FROM ins_p_summery s
          WHERE s.pgid = p_pgid AND NVL (s.active_status, '0') = '1';

         IF v_policy_active_cnt = 0
         THEN
            p_sys_config_st := 1;
            p_upd_message := v_config_message1;
         END IF;
      ELSIF p_config_id = 15
      THEN
         p_sys_config_st := 1;
      ELSIF p_config_id = 16
      THEN
         p_sys_config_st := 1;
         p_upd_message := v_config_message1;
      ELSIF p_config_id = 17
      THEN
         p_sys_config_st := 1;
         p_upd_message := v_config_message1;
      ELSIF p_config_id = 18
      THEN
         p_sys_config_st := 1;
      ELSIF p_config_id = 19
      THEN
         p_sys_config_st := 1;
      ELSIF p_config_id = 20                      --Add by Musha on 03.07.2017
      THEN
         p_sys_config_st := 1;
      ELSIF p_config_id = 21                      --Add by Musha on 02.04.2018
      THEN
         p_sys_config_st := 1;
      ELSIF p_config_id = 26                      --Add by Musha on 03.07.2018
      THEN
         p_sys_config_st := 1;
      ELSIF p_config_id = 27                      --Add by Musha on 03.07.2018
      THEN
         p_sys_config_st := 1;
         p_upd_message := v_config_message1;
      ELSIF p_config_id = 28                      --Add by Musha on 03.07.2018
      THEN
         p_sys_config_st := 1;
      ELSIF p_config_id = 29                      --Add by Musha on 08.07.2018
      THEN
         p_sys_config_st := 1;
         p_upd_message := v_config_message1;
      ELSIF p_config_id = 32                      --Add by Musha on 11.07.2018
      THEN
         p_sys_config_st := 1;
         p_upd_message := v_config_message1;
      ELSIF p_config_id = 37                      --Add by Musha on 17.07.2018
      THEN
         p_sys_config_st := 1;
         p_upd_message := v_config_message1;
      ELSIF p_config_id = 40                     --Add by Anamul on 15.10.2018
      THEN
         p_sys_config_st := 1;
         p_upd_message := v_config_message1;
      ELSIF p_config_id = 43                      --Add by Musha on 28.09.2020
      THEN
         p_sys_config_st := 1;
         p_upd_message := v_config_message1;
      ELSIF p_config_id = 44                      --Add by Musha on 05.04.2021
      THEN
         p_sys_config_st := 1;
         p_upd_message := v_config_message1;
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      p_upd_message := SQLERRM;
END pro_get_sys_config_st;
/


--
-- PRO_GRATUITY_PROVISION_CAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_gratuity_provision_cal (
   p_office_cd        IN       hrm_office.office_cd%TYPE,
   p_descendant_off   IN       VARCHAR2,
   p_emp_gid          IN       hrm_employee.emp_gid%TYPE,
   p_user_name        IN       sec_user_info.user_nm%TYPE,
   p_process_dt       IN       DATE,
   p_excep_tracker    OUT      NUMBER,
   p_exep_msg         OUT      VARCHAR2
)
IS
   /******************************************************************************
       NAME:       pro_gratuity_provision_cal
       PURPOSE:    Provision calculation for gratuity

       REVISIONS:
       Ver         Date            Author                      Description
       ---------   ------------   -------------------------   ----------------------------
       1.0         18-MAR-2015     Md. Zahid Hasan             Created this Procedure
                                                               1. Eligible employee for gratuity
                                                               2. Gratuity Policy Setup
                                                               3. For calender year
                                                               4. For process year
                                                               5. Year consideration: Fiscal or Celender Year
                                                               6. Calculate days in year
                                                               7 Calculate days in year accordint to last process date
                                                               8 Length of service
                                                               9. Provisioin calculation
                                                               10. Generate process id
                                                               11. Insert data into provision calculation history table
                                                               12. Update gratuity balance
       Change History :
       Ver          Date            Changed By           Description
       ---------    --------        ------------        --------------------------------------
       1.1          01-JUL-2015      Md. Zahid Hasan     1,9,12
       1.1          06-JUL-2015      Md. Zahid Hasan     12. process_date = p_cur_year
   ******************************************************************************/

   --1. Eligible employee for gratuity
   --1. Eligible employee for gratuity
   CURSOR c_eligible_emp
   IS
      SELECT e.emp_gid, e.curr_basic,
             NVL (e.previous_basic, 0) previous_basic,
               e.curr_basic
             - DECODE (NVL (e.previous_basic, 0),
                       0, e.curr_basic,
                       e.previous_basic
                      ) incre_sal,
             e.join_dt, e.confirm_dt, g.starting_basic_amt,
             g.provision_amt gratuity_balance, g.eligible_start_dt,
             NVL (g.process_date, g.eligible_start_dt) last_process_date,
             e.pf_date, e.activity_cd_change_dt resign_terminate_dt
        FROM hrm_employee e, gra_gratuity_eligibility g
       WHERE e.emp_gid = g.emp_gid
         AND e.emp_gid = NVL (p_emp_gid, g.emp_gid)
       --  AND e.activity_cd <> '02'   ---disable by prite 25-april-17 for also ruunning this process inactive user
         AND NVL (g.gratuity_setl_status, '0') = '1'
         AND (   (    NVL (p_descendant_off, '0') = '0'
                  AND e.office_cd = NVL (p_office_cd, e.office_cd)
                 )
              OR (    NVL (p_descendant_off, '0') = '1'
                  AND e.office_cd IN (
                              SELECT     o.office_cd
                                    FROM hrm_office_setup o
                              START WITH o.office_cd = p_office_cd
                              CONNECT BY PRIOR o.office_cd =
                                                           o.control_office_cd)
                 )
             );

   v_setup_id              NUMBER (8);
   v_prov_consider         CHAR (1);
   v_actual_month          CHAR (1);
   v_no_of_days            NUMBER (3)                                     := 0;
   v_no_basic_per_year     NUMBER (2)                                     := 0;
   v_freq_provision        VARCHAR (2);
   v_calender_start_dt     DATE;
   v_calender_end_dt       DATE;
   v_process_year          VARCHAR2 (4);
   v_last_process_year     VARCHAR2 (4);
   v_first_date_of_year    DATE;
   v_last_date_of_year     DATE;
   v_ls                    NUMBER (6);
   v_process_id            NUMBER (8);
   v_no_of_process         NUMBER (8)                                     := 0;
   v_emp_gid               NUMBER (8);
   v_curr_basic            NUMBER (8, 2);
   v_previous_basic        NUMBER (8, 2);
   v_incre_sal             NUMBER (8, 2);
   v_starting_basic_amt    NUMBER (8, 2);
   v_eligible_start_dt     DATE;
   v_last_process_date     DATE;
   v_join_dt               DATE;
   v_confirm_dt            DATE;
   v_gratuity_balance      NUMBER (12, 2);
----------------
   v_pf_date               DATE;
   v_resign_terminate_dt   DATE;
   v_gra_prv_calc_on       gra_employee_setup_mst.gra_prv_calc_on%TYPE;
   v_gra_calc_dt_to        DATE;
   v_tot_gra_prov_amt      NUMBER (12, 2);
   v_ls_year               NUMBER (6);
   v_gratuity_percent      gra_employee_setup_dtl.gratuity_percent%TYPE;
   exp_gra_policy_setup    EXCEPTION;
   exp_rollback            EXCEPTION;
BEGIN
   --Gratuity Policy Setup
   BEGIN
      SELECT setup_id, prov_consider, actual_month, no_of_days,
             no_basic_per_year, freq_provision, gra_prv_calc_on
        INTO v_setup_id, v_prov_consider, v_actual_month, v_no_of_days,
             v_no_basic_per_year, v_freq_provision, v_gra_prv_calc_on
        FROM gra_employee_setup_mst
       WHERE active = 1;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         p_excep_tracker := 1;
         p_exep_msg := 'Gratuity policy setup are not found';
         RAISE exp_gra_policy_setup;
   END;

   OPEN c_eligible_emp;

   LOOP
      FETCH c_eligible_emp
       INTO v_emp_gid, v_curr_basic, v_previous_basic, v_incre_sal,
            v_join_dt, v_confirm_dt, v_starting_basic_amt,
            v_gratuity_balance, v_eligible_start_dt, v_last_process_date,
            v_pf_date, v_resign_terminate_dt;

      EXIT WHEN c_eligible_emp%NOTFOUND;

      --3. For calender year
      SELECT TO_CHAR (p_process_dt, 'YYYY')
        INTO v_process_year
        FROM DUAL;

      --4. For Process year
      BEGIN
         SELECT MAX (TO_CHAR (process_dt, 'YYYY'))
           INTO v_last_process_year
           FROM gra_provision_cal
          WHERE emp_gid = v_emp_gid;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_last_process_year := NULL;
      END;

      -- Check process completed or didn't completed for process yesr
      IF (   v_last_process_year IS NULL
          OR (    v_last_process_year <> v_process_year
              AND (   v_resign_terminate_dt IS NULL
                   OR v_last_process_year <>
                                       TO_CHAR (v_resign_terminate_dt, 'YYYY')
                  )
             )
         )
      THEN
         --- Frequency of provision as like Yearly / Half-Yearly / ..
         IF v_freq_provision = '1'                                  -- Yearly
         THEN
            --5. Year consideration
            IF v_prov_consider = '1'                      --- '1'=Fiscal Year
            THEN
               --- for fiscal year
               SELECT f.fy_st_dt, f.fy_ed_dt
                 INTO v_first_date_of_year, v_last_date_of_year
                 FROM acc_fiscal_year f
                WHERE f.fy_close = 0
                  AND f.status = 1
                  AND p_process_dt BETWEEN f.fy_st_dt AND f.fy_ed_dt;
            ELSIF v_prov_consider = 2                    --- '2'=Calender Year
            THEN
               --- First date of year
               SELECT TO_DATE (TO_CHAR (('01-01-' || v_process_year || '')),
                               'DD-MM-YYYY'
                              )
                 INTO v_first_date_of_year
                 FROM DUAL;

               --- Last date of year
               SELECT TO_DATE (TO_CHAR (('31-12-' || v_process_year || '')),
                               'DD-MM-YYYY'
                              )
                 INTO v_last_date_of_year
                 FROM DUAL;
            END IF;
         END IF;

         --Length of service
         IF     v_resign_terminate_dt IS NOT NULL
            AND v_resign_terminate_dt < v_last_date_of_year
         THEN
            v_gra_calc_dt_to := v_resign_terminate_dt;
         ELSE
            v_gra_calc_dt_to := v_last_date_of_year;
         END IF;

         IF v_gra_calc_dt_to > p_process_dt
         THEN
            v_gra_calc_dt_to := p_process_dt;
         END IF;

         IF v_gra_prv_calc_on = 1
         THEN                                                            --Day
            SELECT (v_gra_calc_dt_to + 1 - v_eligible_start_dt)
              INTO v_ls
              FROM DUAL;
         ELSIF v_gra_prv_calc_on = 2
         THEN                                                          --Month
            SELECT FLOOR (MONTHS_BETWEEN (v_gra_calc_dt_to + 1,
                                          v_eligible_start_dt
                                         )
                         )
              INTO v_ls
              FROM DUAL;
         ELSIF v_gra_prv_calc_on = 3
         THEN                                                           --Year
            SELECT FLOOR (  (v_gra_calc_dt_to + 1 - v_eligible_start_dt)
                          / v_no_of_days
                         )
              INTO v_ls
              FROM DUAL;
         END IF;

         --Provisioin calculation
         SELECT FLOOR ((v_gra_calc_dt_to + 1 - v_eligible_start_dt) / v_no_of_days)
           INTO v_ls_year
           FROM DUAL;

         SELECT NVL(MAX (gratuity_percent), 0)
           INTO v_gratuity_percent
           FROM gra_employee_setup_dtl d
          WHERE d.no_of_year <= v_ls_year;

         IF v_gra_prv_calc_on = 1
         THEN                                                            --Day
            v_tot_gra_prov_amt :=
                 (((v_curr_basic * v_no_basic_per_year) / v_no_of_days) * v_ls
                 )
               * (v_gratuity_percent / 100);
         ELSIF v_gra_prv_calc_on = 2
         THEN                                                          --Month
            v_tot_gra_prov_amt :=
                 (((v_curr_basic * v_no_basic_per_year) / 12) * v_ls
                 )
               * (v_gratuity_percent / 100);
         ELSIF v_gra_prv_calc_on = 3
         THEN                                                           --Year
            v_tot_gra_prov_amt :=
                 (((v_curr_basic * v_no_basic_per_year)) * v_ls
                 )
               * (v_gratuity_percent / 100);
         END IF;

         IF NVL (v_tot_gra_prov_amt, 0) > 0
         THEN
            --Generate process id
            BEGIN
               SELECT NVL (MAX (process_id), 0) + 1
                 INTO v_process_id
                 FROM gra_provision_cal;
            END;

            --Count no of process
            BEGIN
               SELECT COUNT (process_id) + 1
                 INTO v_no_of_process
                 FROM gra_provision_cal
                WHERE emp_gid = v_emp_gid;
            END;

            BEGIN
               --Insert data into provision calculation history table
               INSERT INTO gra_provision_cal
                           (process_id, emp_gid, process_dt, freq_provision,
                            provision_dt, provision_amt, i_usr,
                            i_dt
                           )
                    VALUES (v_process_id, v_emp_gid, p_process_dt, NULL,
                            p_process_dt, ROUND(v_tot_gra_prov_amt), p_user_name,
                            SYSDATE
                           );
              

               IF SQL%NOTFOUND
               THEN
                  p_exep_msg := SQLERRM;
                  RAISE exp_rollback;
               END IF;

               --Update gratuity balance
               BEGIN
                  UPDATE gra_gratuity_eligibility
                     SET provision_amt = ROUND(v_tot_gra_prov_amt),
                         process_date = p_process_dt,
                         I_DT = p_process_dt,
                         no_of_process = v_no_of_process
                   WHERE emp_gid = v_emp_gid
                  AND NVL (gratuity_setl_status, 0) = 1;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     p_exep_msg := SQLERRM;
                   RAISE exp_rollback;
               END;

               p_excep_tracker := 0;
               COMMIT;
            END;
         END IF;
      END IF;
   END LOOP;

   CLOSE c_eligible_emp;
EXCEPTION
  WHEN exp_gra_policy_setup
   THEN
      ROLLBACK;
      p_excep_tracker := 1; 
   WHEN OTHERS
   THEN
      ROLLBACK;
      p_excep_tracker := 1;
      p_exep_msg := SQLERRM;
END pro_gratuity_provision_cal;
/


--
-- PRO_GRA_GRATUITY_ELIGIBLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_gra_gratuity_eligible (
   p_employee_type              IN     VARCHAR2,
   p_activity_cd                IN     VARCHAR2,
   p_eligibility_start          IN     VARCHAR2,
   p_emp_gid                    IN     VARCHAR2,
   p_eligible_start_date_from   IN     DATE,
   p_eligible_start_date_to     IN     DATE,
   p_gratuity_status            IN     VARCHAR2,
   p_i_usr                      IN     VARCHAR2,
   p_output                        OUT VARCHAR2
)
IS
   /******************************************************************************
       NAME:       pro_gra_gratuity_eligible
       PURPOSE:    Eligible employee for gratuity

       REVISIONS:
       Ver         Date           Created By                   Description
       ---------  ------------   -----------------------      ------------------------------------
       1.0        18-MAR-2015     MD. Zahid Hasan              1. Find employees according to confirmation date
                                                               2. Find employees according to joining date
                                                               3. Setup available or not
                                                               4. Eligible employees data insert into table

       Change History :
       Ver         Date           Changed By                   Description
       ---------  ------------    ----------------            -------------------------------------
       1.1        07-JUL-2015    MD. Zahid Hasan              Added the comments convention of this package
                                                               1, 2 : Added NOT EXITS condition

   *******************************************************************************/
   --1. Find employees according to PF date.Add by Sharmin Sultana Prite
   CURSOR c3
   IS
      /*Modified by Sharmin Sultana Prite at 16-may-2017*/
      SELECT   e.emp_gid,
               emp_id,
               emp_nm_eng,
               --f_desig (desig_cd) desig,
               --f_divdept (divdept_cd) dept,
               CASE
                  WHEN e.pf_date IS NOT NULL
                  THEN
                     e.pf_date
                  WHEN e.pf_date IS NULL
                  THEN
                     (SELECT   MAX (c.CON_MONTH) dt
                        FROM   CPF_EMP_MONTHLY_CON c
                       WHERE   c.EMP_GID = e.EMP_GID)
               END
                  pf_date,
               e.curr_basic
        FROM   hrm_employee e
       WHERE   employment_tp_cd = p_employee_type
               AND (NVL (activity_cd, '00') = '00'
                    OR NVL (activity_cd, '00') = NVL (p_activity_cd, '00'))
               AND e.emp_gid = NVL (p_emp_gid, e.emp_gid)
               AND ( (e.pf_date IS NOT NULL
                      AND e.pf_date BETWEEN NVL (p_eligible_start_date_from,
                                                 e.pf_date)
                                        AND  NVL (p_eligible_start_date_to,
                                                  e.pf_date))
                    OR (e.pf_date IS NULL
                        AND (SELECT   MAX (c.CON_MONTH) dt
                               FROM   CPF_EMP_MONTHLY_CON c
                              WHERE   c.EMP_GID = e.EMP_GID) BETWEEN p_eligible_start_date_from
                                                                 AND  p_eligible_start_date_to))
               AND NOT EXISTS (SELECT   1
                                 FROM   gra_gratuity_eligibility g
                                WHERE   g.emp_gid = e.emp_gid);

   --2. Find employees according to confirmation date
   CURSOR c2
   IS
      SELECT   e.emp_gid,
               emp_id,
               emp_nm_eng,
               --f_desig (desig_cd) desig,
               --f_divdept (divdept_cd) dept,
               e.confirm_dt,
               e.curr_basic
        FROM   hrm_employee e
       WHERE   employment_tp_cd = p_employee_type
               AND (NVL (activity_cd, '00') = '00'
                    OR NVL (activity_cd, '00') = NVL (p_activity_cd, '00'))
               AND e.emp_gid = NVL (p_emp_gid, e.emp_gid)
               AND confirm_dt BETWEEN NVL (p_eligible_start_date_from,
                                           confirm_dt)
                                  AND  NVL (p_eligible_start_date_to,
                                            confirm_dt)
               AND NOT EXISTS (SELECT   1
                                 FROM   gra_gratuity_eligibility g
                                WHERE   g.emp_gid = e.emp_gid);

   --3. Find employees according to joining date
   CURSOR c1
   IS
      SELECT   e.emp_gid,
               emp_id,
               emp_nm_eng,
               --f_desig (desig_cd) desig,
               --f_divdept (divdept_cd) dept,
               join_dt,
               curr_basic,
               previous_basic,
               confirm_dt
        FROM   hrm_employee e
       WHERE   employment_tp_cd = p_employee_type
               AND (NVL (activity_cd, '00') = '00'
                    OR NVL (activity_cd, '00') = NVL (p_activity_cd, '00'))
               AND e.emp_gid = NVL (p_emp_gid, e.emp_gid)
               AND join_dt BETWEEN NVL (p_eligible_start_date_from, join_dt)
                               AND  NVL (p_eligible_start_date_to, join_dt)
               AND NOT EXISTS (SELECT   1
                                 FROM   gra_gratuity_eligibility g
                                WHERE   g.emp_gid = e.emp_gid);

   rec_c1          c1%ROWTYPE;
   rec_c2          c2%ROWTYPE;
   rec_c3          c3%ROWTYPE;
   v_emp_tp_cd     hrm_employee.employment_tp_cd%TYPE;
   v_activity_cd   hrm_employee.activity_cd%TYPE;
   v_setup_id      gra_employee_setup_mst.setup_id%TYPE;
   v_amount        VARCHAR2 (100);
   v_count         NUMBER;
   exp_exception EXCEPTION;
BEGIN
   --3. Setup available or not
   BEGIN
      SELECT   m.emp_type_cd, m.activity_cd, m.setup_id
        INTO   v_emp_tp_cd, v_activity_cd, v_setup_id
        FROM   gra_employee_setup_mst m
       WHERE   emp_type_cd = p_employee_type
               AND (NVL (activity_cd, '00') = '00'
                    OR NVL (activity_cd, '00') = NVL (p_activity_cd, '00'))
               AND active = p_gratuity_status;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         p_output := 'Setup are not found';
         RAISE exp_exception;
   END;

   --4. Eligible employees data insert into table
   IF p_employee_type = v_emp_tp_cd        --AND p_activity_cd = v_activity_cd
   THEN
      IF p_eligibility_start = 3 OR p_eligibility_start IS NULL
      THEN
         OPEN c2;

         LOOP
            FETCH c2 INTO   rec_c2;

            EXIT WHEN c2%NOTFOUND;

            BEGIN
               INSERT INTO gra_gratuity_eligibility (emp_gid,
                                                     starting_basic_amt,
                                                     eligible_start_dt,
                                                     i_usr,
                                                     i_dt,
                                                     setup_id,
                                                     gratuity_setl_status)
                 VALUES   (rec_c2.emp_gid,
                           rec_c2.curr_basic,
                           rec_c2.confirm_dt,
                           p_i_usr,
                           SYSDATE,
                           v_setup_id,
                           '1');
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END LOOP;

         CLOSE c2;
      ELSIF p_eligibility_start = 2 OR p_eligibility_start IS NULL
      THEN
         OPEN c1;

         LOOP
            FETCH c1 INTO   rec_c1;

            EXIT WHEN c1%NOTFOUND;

            IF rec_c1.confirm_dt IS NULL
               OR rec_c1.confirm_dt = rec_c1.join_dt
            THEN
               v_amount := rec_c1.curr_basic;
            ELSE
               v_amount := rec_c1.previous_basic;
            END IF;

            INSERT INTO gra_gratuity_eligibility (emp_gid,
                                                  starting_basic_amt,
                                                  eligible_start_dt,
                                                  i_usr,
                                                  i_dt,
                                                  setup_id,
                                                  gratuity_setl_status)
              VALUES   (rec_c1.emp_gid,
                        v_amount,
                        rec_c1.join_dt,
                        p_i_usr,
                        SYSDATE,
                        v_setup_id,
                        '1');
         END LOOP;

         CLOSE c1;
      --Add By Prite for PF Date
      ELSIF p_eligibility_start = 1 OR p_eligibility_start IS NULL
      THEN
         OPEN c3;

         LOOP
            FETCH c3 INTO   rec_c3;

            EXIT WHEN c3%NOTFOUND;

            INSERT INTO gra_gratuity_eligibility (emp_gid,
                                                  starting_basic_amt,
                                                  eligible_start_dt,
                                                  i_usr,
                                                  i_dt,
                                                  setup_id,
                                                  gratuity_setl_status)
              VALUES   (rec_c3.emp_gid,
                        v_amount,
                        rec_c3.pf_date,
                        p_i_usr,
                        SYSDATE,
                        v_setup_id,
                        '1');
         END LOOP;

         CLOSE c3;
      END IF;
   ELSE
      p_output := 'Setup available or not';
      RAISE exp_exception;
   END IF;

   p_output := 'Process has been succesfully Completed.';
   COMMIT;
EXCEPTION
   WHEN exp_exception
   THEN
      ROLLBACK;
   WHEN OTHERS
   THEN
      p_output := SQLERRM;
      ROLLBACK;
END;
/


--
-- PRO_GRA_INVESTMENT_INT_CAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_gra_investment_int_cal wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
24d3 729
9b19NH9X+em31fdo8J+KgBVhi2Iwg82jeSAF3y8ZF7UY+Mkm917ZMwlWQFsW05AWUBM+lwIk
vZVpdB1hSH2sEPzQLCYf8s/zbLAcK44bL2dm0MYSubnus+BlbpIWFnysnSK1k/mSOoQ6BbCq
Ivlzm8bGrpbSCGPkQ2q7cNemytVqXVSS+yFiPgZbRpAjhf5RZaXnxaHymjFegmldBEWf0ku1
Xe49R0ECrbZX8oIe1BnE17ijFDbbK2R0PIMZ8nszVLDvWVoplVFRKweY9XABx6+GIa+X5ZtG
eti2fmPxoFn+d0teWKh2OR0JWQz10/B30YMm2u7u6SjRXITSywo9r3PLpzvS/FYpgZMlEwMa
NXlx7NbrRkUffdYbE0Y4PQKsHQIzqRxqRi6RqviOhOc44StKZl22Tb6PZ5xliliJdWM/Pf1Q
QbTvRMv6Jl1faau2ADieSfCQMwIawhb9QICKLY7prfTM5hT3/q7j8VdJ9ZV2n3y/wZfAh9Mh
n143XQQ3PcCD3pJ5zW5Hao7hrQFNK3Gh6d7sKiXwDCflJXDXe34hdLK6yTkWY8H4V3COdb0R
Uy3ueXNahHcRGU7tN+hp66FBaSX7L8QC+CuhZ485aHkP4oAS0SudxOAWl8x47w4wvew5Nhvh
RaCvVncS4pBju4IMmqNh+nhT7c17MP+B4fYYO44ZJ/0TWIIrHpCDfxz9TTPrpCrDWsOQCkWl
xLenVQ51OcofWPiQpwd+4KO9NyoPmG2mOm2tzzoVI5PX4Qzj0B3HWQVoYfifUusjHnNZ8+f4
qcriBAot6itLlBtaa29qi0MRpmKBEuFSq6np+2GYjwQrF4UyNHl+fwQY0DHCHpiY+71gIXvk
jEh14Y1FEzaKu/zxoo0CNe7p8ap3BllVfvRKD+NfoGyrrLwwKLAfIHWeCZ264feaw/SHHy/9
GcIYoKCkEfwjIKGGo/AncFTDBRlNU8379pryP6QY5GdNbAps51tCsLZ2c0XDPBcINZeGV+iT
dCjjNID1Stqr5YKrBaA8ap4K27+W8HDH3ja/7+crnGCluSXnP6s1S7wv4QNVepWnA6ErmArz
Aw33HGjTKAn+UCKFyzlbn3xwW7gjdi/q89Dh1+H4scwucihMOh2BFiSgJjPFM8DzElQmtAeh
KhPvt7EqsUjvNmKex2zBf1weQrBpzr1eHzvWCWHL7wJtCgqqVsu+vzTs4zN1rX8NGnfXhRMp
+2gQXDa3ZhigfxhAGPejaDlS9fqY9R+HYLexfcjlLvq5zGJhPs3DGmSR5GAPrtH6zsFmvmX5
WdRk4l+13wS1caKaiIaaKXIPnJHPSsLVhnKR5JKXziDWCCauvILUmNk3LJachjT5DGiNTsn/
IOJutZ2tINLhfLuEMnSl8Qguawz5f/q8P/99+rc2RNb1Eo1F4j2Rc3tsM4okQTLH1Mavfw0X
zZXsSDzGIpVaXS+HFRSAdXdPqugZoQjJDcSp5KvULwunvVLsyElbVx7HWyV0bDibVBzthXxY
BRWWLnMW1zE0W3so5jO14UApODIKg4vgtdSBj9+j9Dh7cwjrnvsAbzJyEzNCn2BfPiXhQ3dC
xDv4YOKudKe9tTXuTU8ppO48cg59FlfqUzhT9zkD8xfBsDQzZa/pBtY9NAXcu+gV7iz3X989
nXukP6syMPCrn1PAC4JS+GOhbzYyQCWPIWHZ+zitIsTeLjKkIyN/81THKe+HnavPVtzS61fL
+BDyDfeX8SPgfRAt9vlS5tJL6KoAUJ3Mko15YL7IuQVJmDV2t66CBk05Rm83PM89M/+4kqBz
7g9Oml7n
/


--
-- PRO_GRA_INVESTMENT_INT_CAL_BKP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_gra_investment_int_cal_bkp wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
2772 796
9wsb8cc6fav/0/ToeM07l+nm/6Qwg82jDMcF3y+5WJ3gIGZigz1qt1k7g4JL5zGKaRrnrPL1
BhqQWbDr39cUQUGbhpml++HKZ8yn/H1wblrgLZaKP5gUU6j601utr6U62SSVuw8ijqrPkv6G
sbCdJD8j4JyulSAs+cU/c06CU8umfhh8GW/ZpvzzwR4SWeQnJ/RRZmeOHyE4/uTlQYWC4c20
ZsLPopGLMNx1Uqw7YcKr5D9rLmTjUnv6C578TY4dv7k9olIJFArgkNvSs9zb8IT2jUyEIZDO
fF6+RBFbGxWnpKTU3MKdtPdKN+bsdSGhuvOgGjjT2Sehw+Qzi28bKoHL79PNw5TwRWM5/gxF
Yzm+nyYmr6fibCmJKaLX/eX83/3yVyzyMACJL0WEL2VREuQv1FV9ybxp0wHuuOxc5spGfDl4
avOHCU3CRwffyjoqYueu5Zve3UHY89ehWr9sgoBeyenxKnov29arF/XwC+X3NBLbVs2Cl1OR
uJmMKVrB+xbLJ0wENTTw3Xkv3WRPEtQq/aJ1o/XEr5SG8cXy8S4uTBOTAdFOnHAVX1nsiZ8j
WT5QwKHhHLxK4PBp3zTl0dVbx//V+5RWHB4H0vPGO/vFJWghWeFFyN4UyC8UPRCEQIxZg0qD
K3AFgRxx0WuiqCjUfIEeB8zxAgiEUtBm10/wJKPtz+lEF5pBv6Q9wTunizcUOjm5v1BTLd/w
W9vyV1yVPRO6xsiUQ3EraAuSywtvBvLmzi9rX6dQ7sXJI0H0H8dYyNe3QAqxJX/SfgnITJtm
jH+BOKKFhU6P/OVs3/qIIauocslQpcwAwFaYJdQLWDD/LdVjfgcb+BqKRV43LWPDXvGy5CKJ
tmltZ308FqeNGFZYpyk4svDKBEKlTqRfG2XTn9KzxWK330/dQw6PhtM0AtQuXlWnKFyK/kU1
9u8Ego42XEjJWdXxxtni3DTzcJ8PZXyrvMFeh1t5mLqhnQsO4D5pOZyfXLEru39M3tV7V10z
4C8PCeAti6WZYS1KrVMKfzzgNT62VTltiJVnjT67RfKUvhbuxMW5HOSF/fD00xu61ZziyJnX
iG7u5LIgOxSqKkMfAbSgwdhX26cw3A19k2Stbt8/kMvQDgDWePPHmXgcIsnMcivkkhoYnSle
z58JlZpBwwhPko5PT8MIKV0a7K4XEOW/xJw44+TYSAMJOpMxWUStGJEa7i6Al9oy+TndRef0
A6OlDiYqBxLUL+Sk2zbtiWPWGFiQ/QSHi0dzcdqLM0WcuWTPO1BBnnUzPWctjaOtEa3+nAIn
U1VvjYgV6Zs+ud0MoKicB8TDmrwxeH1wyZtwshn3YhmvzZB4VAvXCcEWAnRstNwkuaK4SSvb
xAJBUBnqTF4MEM3+1kxR59/z3u33Xru8QS6KkE5YMMd5TZNkME5MCIuceiOVEzeJwUp4AwPU
E2Ulh28gGauj1+o0OuIwt1Yp1Rl0Gnq/NFhPKhmJ9zPCMIKQdRkvD/PBRPOwxn05bZJzCZvY
o++OKKnl390z8fLhStrTuLUsfHpEdiL+Evn7CtRbz+QF2WEs8AfvpdlruYGta0jBMuAP/4Uw
dNalF5rLM9C2otID4SOlUe6zaMYJljgbVCqJ45Ig9J/ztcJNz50ohnS2oxANdvVo1UAFbhnv
3NSEs2GNBg6DW/NYWCj6OcbkTSNtZgXya6zOMjV7mjOoXbUdMTxAQ9CyLhr6JAAa6+xsDTsB
ZKOyREvfTe28SOKQNbqFWdlS1HEyPVcKwSFYxMXfAtJeGw/aE8zQm81xkerFSYALecDrwYN+
nFwiOyjhHhJynEpPzwgCR+IugWAebYfrH84XUmRDyMLHCdXcBqCMljq/bRxOjVw8ifGbJkpO
ke1IKHXakpVCjg235WX8bjyIDQM7Wp8Nzu4kX2YN+Q==
/


--
-- PRO_GRP_AGENT_COMM_BILL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_grp_agent_comm_bill wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
edb 58b
LOmISaWrLsL9dwbRywCN5cnKHEYwg2PqLiCG3y/Nk53g0TfNK7iQ4W3hHjL7WFF2UcIWyIm2
T+PYHkgdMLdwt3aeitC7yJLKbJNKb2wvVNOadPpYeCB1cbjmhuZpMPkzGp3PEjz+D0rQZJKl
0oEK+eS4e68hpqlxThQ4RifThABUKwCKZjVIZgi6VGYLxb3XBhZee6GM8NAhS56UeRbhdcd4
fdClO+i/w8b3UaQaOsNr8e0UzPKBh32iXzU+IuPgRcjh5H+geJRV+1/mm+ZDApv3ND87969W
cGV8uAnn+gI6s/3MlZfPxikloiWJ00R/txgBzmeLMnqEhZ8+WbFWLjLUhFRHDiPLDtrTr8RQ
VnDh7QHxCHRa53jguj9ALnKlM0BmOGjsS8UfMpOy7TGTqjjjwgTozvb5JwXLIOZ1VhuC9fAk
F3qgcfe+jBcDnItefXJy0c6rbmpxX4MpgSjNjiZl7UYHK+LNIicF88mHGC7R1V6hXPfQk8Pp
5q9iXniPBzxt/OdJRhdYMZIjKL5wBKJyPX22dEIrrLCSqmMy43WRGfFuKlzEickA8H9QSlFf
x87ePcwN+wPXepVqAfH8TInCBHMeVK8s7zu6Q77eh6c16jhZMfaM83xVrZNgwDxFkYZ3jUHP
C+VuAVqJIVWr74zfwo6QeoOA9nTyoEPp6BUzy3nza7g8A2BRaPbWpNOwq2kYyD3faNbFFBzH
OK65kAWkEd7QYhazYlxihO4ZZDadXPhu0RCgbS+g7zzmu/VsoBmTHi8V0iMtdVxLP+tXx0e+
mfqNxEZRBTR5Ep+9mLclktPYmkZyFeX1h1T1LnhHyUDBVD4749HuFUuhoa1kbD5rGGjS+EGI
VmpKVdkPWCt20ko+avT//OqI6r1AqEipPSgMkv+LMuH3oZRZa4CAmjht0NVaTucTg8oURihA
/NcicT6NQGFWYVrwJlY8CfRt4j9P135V5OGxOLgioCxAGzn43gwoeVMMvDpPmgqX6HztZopP
jEyJu8bfqdlqnUE/tcsWiUCQBPrtoLF7ded/WO3BRGLZHZb23Gt1SxoxkWp5rn8HcotlzQiY
6QjULlC9Eq6/5FcN9LkaTYD1dulI/f9Dz4gcxbh3LOhMlqmfFdGzefIQfjiWPQqSIxDLqVV5
RDL//5Y8WnOIGdqV2zreQq21lF9nr3Jzdf8FLpdOb/VNfhKQHwRyRNygYTiD0Irbs68Bu6tI
pc0cIzxLsilCBJP2SndA97KuWpdsAsuaI2cH/BEgTmSy8o+ib0ZpOvePqtAoliiu0LhTJKQZ
3P5kizpP+B/Oz3oiFdkF7rjPOvjN9ZIfL5LPe7wcteyuiuWna33sGfPsChgmp7l2DVS0uuNJ
l5PMzW9bh+frMqL5ogtW1k/5HUqNgCg=
/


--
-- PRO_GRP_AGENT_COMM_CAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_grp_agent_comm_cal wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
2800 c26
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
/


--
-- PRO_GRP_DEMAND_NOTC_PREP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_grp_demand_notc_prep wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
15d9 6e0
BHQTlLikWT6841bL6RZIGnHZNIUwg81UDCAFVy8ZA6pEljdWd9fUBQAqpeFl6UkVCVGnGmjO
ojb0LRbIG0ATHDOau2kaFPFRLN7iQ+nTrYJ2/89ODif/fPr93FBItVH5Vbt3hjMFc06MIz9C
EGmYc58H6LZGaTv8E2aAyY6NEL7uDUXu2CZczL1s7MIUz8cmPpZd6BuCalh4okNYFNGw+WHZ
8I8WjjT/V7zXziynRriHg5Q8Wk+R8dyea/obaqmWaLivV5ehWFy+5XVWfLNOQG9AyolwYgyg
nnKP9JOT5YeCv8P2GOgG8cnm5XvVwIRDwhoRNBa9lq5t4euhabhA4nGIVX6Fy2Bg65Lxb9VR
J9yXUT431zp726hYR33dUUMXiaca8Vutf/bFJkJERFwJoCvNYFgvpnU84DJhzGzZ9BW+ajQG
2F8LHfSTS2m2pV6NzMMo4bxo06YaCJmjBG2Ipv+Kfvzlnss8619vMIyPw8Lz3Y3kWKLjX9tF
EFj1yjlMUMDr+ziRnf7uZma711PnWRBVZs87erj4JTRjmf+8fTA0336UvrdIaUV+fAsmkrYO
s7hNVuVfzaRZKR0qQ/G4IXOJQPiDt74HKN6y0lGMjJCENKLGwURFwuDSSDsWcONtrXp2f/3c
eA64CjBnPeC0RYslY5h8bw/xE1ElCVQuxZpi1PCJLcuS1WYIzVcBWHkUmQBIzjjImOb8Dr1d
D90LRAdyEhV2wBxXoNCupM7FalRSrKEt/6eJMEshN7RE8D77e8gn/ycbWrmiBVwlu9NmdHSI
ERw2WXKT2Eppn00+NqwqpSxjpy4Vs1vt72fa5TWA0vvXZNrWCTXc53QVv56jfGOZ8dxcVbMX
FjFqWiWpqxB2TYSVQJHHqTG1nw05co7VxrKE54B0UJaH/tJb1q0V4sdUnY21faggQGKgYXVH
AIFi2AUqv/lZRiPOdCr1CTSIq75IMR0k0Wb/za4qIvJbzMdvhSgZ8ShqhOHPClOI72A8E30h
OPaCeKTp+tj6QODTA266J+E/wAehYplv2sMTrAR1N21Nf1ZHNH6eUOzQeFLApwvnNVMhM1dJ
QkQLJ5JbLKYDC3YRWgubV+6t14l43RViLfRO37IBYzk9UmEBYAOet7fCeYdA6/y5oySPNjg8
IqjpusTw50zGSvfos5UyYP1m1CnXMDh2Mkl6OKPdqGQ5KhsA//8ylKJe1UnDKdcZmdyrK2+w
iCQPWSPLKbsXbOEPub1q5pQCy06cOj//z+qCxzcCORDvfrO88kpOXTaESOlesB3n1qgAcqn6
ejdzK/pYd3pYNLHxKVdi+C5hKY5u9Cg4I7tFiThmo8xuowbXxvwYczWmEkkK+GSuoRoRlCVV
LZeQQfoAJRQEnzx6DtIFkEXwG3+QV4z1WO6dkLIdRMTQT8z5C238c5+/nZ2qc5KbX+Wc6kYP
vM1BYWQFxhQZ4/yn19rj7+rkMDC0P7Uib3bz/P70LlVh47P4kkuNytMjKylz++Ogy6+W4Zrz
SBGAMNDkleNdBKAE+4GQKSnXWBZ06wiQ4Njv/6Kg7GEw0GghIlGtktURIQeoKMeVVyFuaG23
AwkC/6v6cW7ig/ntIAiLwlWgJB0f37BA9r5IvnlBkHTJ2j8dETVk82S7MTlOi6cpXRYFhdo4
ijYrBK4x6z8Stc4PBOpIaTieeSswsf4lcchVbpCAnuOqTT/NrL+F0dtx243LaDiW2PO6D7Uz
JMC15fY=
/


--
-- PRO_GRP_PREMIUM_CALCULATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_grp_premium_calculation wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
20f6 9a9
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
/


--
-- PRO_GRP_PREM_COLL_ADJUSTMENT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_grp_prem_coll_adjustment wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
2dd5 bf1
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
/


--
-- PRO_GRP_RENEW_PREM_CALC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_grp_renew_prem_calc (
   p_pgid           VARCHAR2,
   p_usr            VARCHAR2,
   p_output   OUT   VARCHAR2
/*
=======================================================================
    || Creation History ||
-----------------------------------------------------------------------
    Author      :   Syed Md. Musha
    Purpose     :   1.
                    2.

    Creation Date :

-----------------------------------------------------------------------
     || Modification History ||
-----------------------------------------------------------------------
     Version No.    Date:                 Author:           Ver:    Area of Change:
-----------------------------------------------------------------------
     1.0            24-NOV-2015           Md. Zahid Hasan    -- Finding category wise approved rate.
                                                                If category wise approved rate is not found then assigned setup rate.
     1.1            25-NOV-2015           Md. Zahid Hasan    -- Calculating Premium Amount.
                                                                If category wise approved rate is not found then assigned setup rate and calculate premium amount
=======================================================================
*/
)
IS
   --Finding the Employee's information
   CURSOR c_prem_main
   IS
      SELECT   p.pgid, p.sl_no, p.category_cd, p.entry_age, p.maturity_age,
               p.sum_assured, p.basic_salary, p.dob,
               (p.basic_salary - NVL (p.prev_basic_salary, 0)
               ) incr_basic_salary,
               p.life_premium, p.entry_dt
          FROM grp_group_ins_personal p
         WHERE pgid = p_pgid
           AND status = 1
           AND (   p.life_premium IS NULL
                OR (    p.life_premium IS NOT NULL
                    AND NVL (p.prev_basic_salary, 0) > 0
                    AND (prem_upd_dt IS NULL OR basic_upd_dt < prem_upd_dt)
                   )
               )
      ORDER BY sl_no;

   --Finding the supplimentary product information
   CURSOR c_prem_supp
   IS
      SELECT   p.pgid, p.supp_ben_cd, s.depends_on_sum_assured,
               s.depends_on_age
          FROM grp_group_ins_supp_ben p, grp_supp_ben_type s
         WHERE pgid = p_pgid AND p.supp_ben_cd = s.supp_ben_cd
      ORDER BY supp_ben_cd;

   rec_c_prem_main         c_prem_main%ROWTYPE;
   v_product_cd            grp_group_ins_summery.product_cd%TYPE;
   v_maturity_age          grp_group_ins_summery.maturity_age%TYPE;
   v_strength_cd           grp_group_ins_summery.strength_cd%TYPE;
   v_term                  grp_group_ins_summery.term%TYPE;
   v_death_ben_rate        grp_group_ins_summery.death_ben_rate%TYPE;
   v_supp_ben_rate         grp_group_ins_summery.supp_ben_rate%TYPE;
   v_hospital_ben          grp_group_ins_summery.hospital_ben%TYPE;
   v_rate                  grp_product_defn.rate%TYPE;
   v_cal_para              grp_product.cal_para%TYPE;
   v_entry_age             grp_group_ins_personal.entry_age%TYPE;
   v_approved_rate         grp_group_ins_personal.approved_rate%TYPE      := 0;
   --
   v_supp_ben_cd           grp_supp_ben_type.supp_ben_cd%TYPE;
   v_supp_sum_assured      grp_group_ins_summery.sum_assured%TYPE;
   v_main_sum_assured      grp_group_ins_summery.sum_assured%TYPE;
   v_total_sum_assured     grp_group_ins_summery.sum_assured%TYPE         := 0;
   v_tot_life_assured      NUMBER (12, 2)                                 := 0;
   v_emp_main_prem_amt     NUMBER (12, 2)                                 := 0;
   --employee wise main product's premium
   v_main_prod_prem_amt    NUMBER (12, 2)                                 := 0;
   --Total main product's premium
   v_incr_basic_salary     NUMBER (12, 2)                                 := 0;
   v_depends_on_mltpl_by   grp_group_ins_summery.depends_on_mltpl_by%TYPE := 1;
   err_main_prod_rate      EXCEPTION;
   err_supp_prod_rate      EXCEPTION;
------------------
   v_comm_date             DATE;
BEGIN
   --Finding the group common information
   SELECT                                                    --s.sum_assured,
          s.product_cd, s.strength_cd, s.term, s.death_ben_rate,
          s.supp_ben_rate, s.hospital_ben, s.hospital_ben,
          tot_life_assured, NVL (s.comm_date, s.proposal_dt) comm_date,
          s.depends_on_mltpl_by
     INTO                                                 --v_tot_sum_assured,
          v_product_cd, v_strength_cd, v_term, v_death_ben_rate,
          v_supp_ben_rate, v_hospital_ben, v_hospital_ben,
          v_tot_life_assured, v_comm_date,
          v_depends_on_mltpl_by
     FROM grp_group_ins_summery s
    WHERE pgid = p_pgid;

   OPEN c_prem_main;

   LOOP
      FETCH c_prem_main
       INTO rec_c_prem_main;

      EXIT WHEN c_prem_main%NOTFOUND;

      --v_entry_age := rec_c_prem_main.entry_age;
      IF rec_c_prem_main.life_premium IS NULL
      THEN
         v_entry_age :=
            CEIL (  MONTHS_BETWEEN (rec_c_prem_main.entry_dt,
                                    rec_c_prem_main.dob
                                   )
                  / 12
                 );
      ELSE
         v_entry_age :=
            CEIL (  MONTHS_BETWEEN (TO_DATE (   TO_CHAR (SYSDATE, 'RRRR')
                                             || TO_CHAR (v_comm_date, 'MMDD'),
                                             'RRRRMMDD'
                                            ),
                                    rec_c_prem_main.dob
                                   )
                  / 12
                 );
      END IF;

      v_maturity_age := rec_c_prem_main.maturity_age;

      IF rec_c_prem_main.incr_basic_salary IS NULL
      THEN
         v_total_sum_assured :=
                            v_total_sum_assured + rec_c_prem_main.sum_assured;
      ELSE
         v_total_sum_assured :=
              v_total_sum_assured
            + (rec_c_prem_main.incr_basic_salary * v_depends_on_mltpl_by);
      END IF;

      --Finding the main product rate based on employee information
      BEGIN
         SELECT s.rate, p.cal_para
           INTO v_rate, v_cal_para
           FROM grp_product_defn s, grp_product p
          WHERE s.product_cd = v_product_cd
            AND s.strength_cd = v_strength_cd
            AND s.entry_age = v_entry_age
            AND s.maturity_age = v_maturity_age
            AND v_term BETWEEN s.term_from AND s.term_to
            /*AND    s.death_ben_rate = v_death_ben_rate
            AND    s.supp_ben_rate = v_supp_ben_rate
            AND    s.benefit_amount = v_hospital_ben */ -- Disable by Md. Zahid Hasan on 24-NOV-2015
            AND s.product_cd = p.product_cd;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            RAISE err_main_prod_rate;
      END;

      -- Finding category wise approved rate
      BEGIN
         SELECT MAX (p.approved_rate)
           INTO v_approved_rate
           FROM grp_group_ins_personal p
          WHERE p.pgid = p_pgid
            AND (   rec_c_prem_main.category_cd IS NULL
                 OR (    rec_c_prem_main.category_cd IS NOT NULL
                     AND p.category_cd = rec_c_prem_main.category_cd
                    )
                );
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_approved_rate := 0;
      END;

      -- If category wise approved rate is not found then assigned setup rate and calculate premium amount
      IF v_approved_rate = 0
      THEN
         -- Calculating premium amount
         IF rec_c_prem_main.incr_basic_salary IS NULL
         THEN
            v_emp_main_prem_amt :=
               ROUND ((rec_c_prem_main.sum_assured * v_rate) / v_cal_para, 2);
         ELSE
            v_emp_main_prem_amt :=
               ROUND (  (rec_c_prem_main.incr_basic_salary * v_rate)
                      / v_cal_para,
                      2
                     );
         END IF;

         v_main_prod_prem_amt := v_main_prod_prem_amt + v_emp_main_prem_amt;
         v_approved_rate := v_rate;
      ELSE
         v_emp_main_prem_amt :=
            ROUND (  (rec_c_prem_main.sum_assured * v_approved_rate)
                   / v_cal_para,
                   2
                  );
         v_main_prod_prem_amt := v_main_prod_prem_amt + v_emp_main_prem_amt;
      END IF;

      --Finding the Supplimentary product's Premium amount
      /*OPEN c_prem_supp;

              LOOP
                 FETCH c_prem_supp
                  INTO rec_c_prem_supp;

                 EXIT WHEN c_prem_supp%NOTFOUND;
                 v_supp_ben_cd := rec_c_prem_supp.supp_ben_cd;
                 --v_supp_sum_assured := NVL (rec_c_prem_supp.sum_assured, 0);
                 v_main_sum_assured := NVL (rec_c_prem_main.sum_assured, 0) + NVL (rec_c_prem_main.incre_sum_assured, 0);

        --Finding the supplimentary product rate based on employee information
                 BEGIN
                    SELECT s.rate, p.cal_para, s.fixed_benefit
                      INTO v_supp_rate, v_supp_cal_para, v_fixed_benefit
                      FROM grp_supp_prod_defn s, grp_supp_ben_type p
                     WHERE s.supp_ben_cd = rec_c_prem_supp.supp_ben_cd
                       AND main_sum_assured =
                              DECODE (rec_c_prem_supp.depends_on_sum_assured,
                                      '0', '0',
                                      0, v_main_sum_assured
                                     )
                       AND s.entry_age =
                              DECODE (rec_c_prem_supp.depends_on_age,
                                      '0', 0,
                                      rec_c_prem_main.entry_age
                                     )
                       AND s.supp_ben_cd = p.supp_ben_cd;

                    IF v_fixed_benefit = 1
                    THEN                                                  --Fixed Rate
                       v_emp_sup_prem_amt := v_supp_rate;
                    ELSE
                       v_emp_sup_prem_amt :=
                          ROUND (  (rec_c_prem_main.sum_assured * v_supp_rate)
                                 / v_cal_para,
                                 2
                                );
                    END IF;

                    v_sup_prem_amt := v_sup_prem_amt + v_emp_sup_prem_amt;

                    IF v_emp_sup_prem_amt > 0
                    THEN
        --Update the grp_group_ins_supp_ben table by using employee's supplimentary premium.
                       UPDATE grp_group_ins_supp_ben
                          SET supp_premium_amt =
                                         NVL (supp_premium_amt, 0)
                                         + v_emp_sup_prem_amt,
                              u_usr = p_usr,
                              u_dt = SYSDATE
                        WHERE pgid = p_pgid
                          AND supp_ben_cd = rec_c_prem_supp.supp_ben_cd;

                       v_emp_tot_sup_prem_amt :=
                                           v_emp_tot_sup_prem_amt + v_emp_sup_prem_amt;
                    END IF;
                 EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                       RAISE err_supp_prod_rate;
                 END;
              END LOOP;

              CLOSE c_prem_supp;*/

      -- Update the GRP_GROUP_INS_PERSONAL table by using employee's premium amount
      UPDATE grp_group_ins_personal
         SET life_premium = NVL (life_premium, 0) + NVL (v_emp_main_prem_amt, 0),
             total_premium = NVL (total_premium, 0) + NVL (v_emp_main_prem_amt, 0),
             prem_upd_dt = TRUNC (SYSDATE),
             approved_rate = v_approved_rate,
             u_usr = p_usr,
             u_dt = SYSDATE
       WHERE pgid = p_pgid AND sl_no = rec_c_prem_main.sl_no;
   END LOOP;

   CLOSE c_prem_main;

   -- Update group summery information
   UPDATE grp_group_ins_summery
      SET sum_assured = sum_assured + NVL (v_total_sum_assured, 0),
          life_premium = NVL (life_premium, 0) + NVL (v_main_prod_prem_amt, 0),
          --extra_premium = v_sup_prem_amt,
          installment_premium = installment_premium + NVL (v_main_prod_prem_amt, 0),
          prem_cal_date = SYSDATE,
          approved_rate = v_approved_rate,
          u_usr = p_usr,
          u_dt = SYSDATE
    WHERE pgid = p_pgid;

   p_output := 'SUCCESS: Premium Calculation succesfully completed.';
   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_output := 'FAILED: Organization ID not found!!!!!';
      ROLLBACK;
   WHEN err_main_prod_rate
   THEN
      p_output :=
            'FAILED: Rate not found where '
         || ' Produc Code: '
         || v_product_cd
         || ' Strength: '
         || v_strength_cd
         || ' Entry Age: '
         || v_entry_age
         || ' Maturity Age: '
         || v_maturity_age
         || ' Term: '
         || v_term
         || ' Death Benefit '
         || v_death_ben_rate
         || ' Supplimentary Benefit '
         || v_supp_ben_rate
         || ' Hospital Benefit '
         || v_hospital_ben
         || '!!!!!';
      ROLLBACK;
   WHEN err_supp_prod_rate
   THEN
      p_output :=
            'FAILED: Supplimentary product Rate not found where '
         || ' Produc Code: '
         || v_supp_ben_cd
         || ' Main Sum assured '
         || v_main_sum_assured
         || ' Supplimentary Sum assured '
         || v_supp_sum_assured
         || ' Entry Age '
         || v_entry_age
         || '!!!!!';
      ROLLBACK;
   WHEN OTHERS
   THEN
      p_output := 'FAILED: ' || SQLERRM || '!!!!!';
      ROLLBACK;
END pro_grp_renew_prem_calc;
/


--
-- PRO_IDRA_COLLECTION_INFO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_idra_collection_info (
   p_date_from   IN     DATE,
   p_date_to     IN     DATE,
   p_error          OUT VARCHAR2
)
IS
   v_depositdate                DATE;
   v_depositedtobank            VARCHAR2 (200);
   v_depositedtobranch          VARCHAR2 (200);
   v_depositedtoaccountnumber   VARCHAR2 (200);
   v_ortype                     VARCHAR2 (20);
   v_receive_mode_desc          VARCHAR2 (50);
   v_coll_slip_no               VARCHAR2 (200);
   v_coll_slip_rec_dt           VARCHAR2 (200);
   v_agent_nm_eng               VARCHAR2 (200);
BEGIN
   EXECUTE IMMEDIATE ('TRUNCATE TABLE idra_collection_info');

   INSERT INTO idra_collection_info (orid,
                                     orserialnumber,
                                     policynumber,
                                     projectcode,
                                     officebranchcode,
                                     officebranchname,
                                     ortype,
                                     ordate,
                                     duedate,
                                     frominstallment,
                                     toinstallment,
                                     premiumunitamount,
                                     totalpremiumamount,
                                     latefee,
                                     suspenseamount,
                                     others,
                                     totalpayableamount,
                                     modeofpayment,
                                     paymentdetail,
                                     prid,
                                     prdate,
                                     nextpremiumduedate,
                                     totalpremiumpaidsofar,
                                     premiummode,
                                     depositdate,
                                     depositedtobank,
                                     depositedtobranch,
                                     depositedtoaccountnumber,
                                     mfs,
                                     mfsaccountnumber,
                                     agentname,
                                     agentid,
                                     productcode,
                                     pgid,
                                     receive_id,
                                     slno,
                                     coll_purpose,
                                     riskstartdate,
                                     dateofbirth)
      SELECT      c.active_office_cd
               || TO_CHAR (NVL (c.coll_slip_rec_dt, c.receive_date), 'RRRR')
               || c.coll_sl_no
                  orid,
               NVL (c.coll_sl_no, 1) orserialnumber,
               fun_ins_pgid_to_policy_no (s.pgid) policynumber,
               s.product_cd projectcode,
               c.active_office_cd officebranchcode,
               f_office (c.active_office_cd) officebranchname,
               NULL ortype,
               TO_CHAR (NVL (TRUNC (c.adjustment_date), c.receive_date),
                        'YYYY-MM-DD')
                  ordate,
               TO_CHAR (s.comm_date, 'YYYY-MM-DD') duedate,
               1 frominstallment,
               1 toinstallment,
               s.installment_premium premiumunitamount,
               S.INSTALLMENT_PREMIUM totalpremiumamount,
               NULL latefee,
               s.suspense_amt suspenseamount,
               NULL others,
               S.INSTALLMENT_PREMIUM totalpayableamount,
               c.receive_mode modeofpayment,
               c.cheque_no paymentdetail,
               c.coll_slip_no prid,
               TO_CHAR (c.coll_slip_rec_dt, 'YYYY-MM-DD') prdate,
               TO_CHAR (s.next_due_date, 'YYYY-MM-DD') nextpremiumduedate,
               (s.installment_premium * s.last_paid_inst_no)
                  totalpremiumpaidsofar,
               DECODE (s.pay_mode_cd,
                       '01',
                       'Yly',
                       '02',
                       'Hly',
                       '03',
                       'Qly',
                       '04',
                       'Mly',
                       '05',
                       'Sin')
                  premiummode,
               NULL depositdate,
               NULL depositedtobank,
               NULL depositedtobranch,
               NULL depositedtoaccountnumber,
               NULL mfs,
               NULL mfsaccountnumber,
               NULL agentname,
               s.agent_id agentid,
               s.product_cd productcode,
               c.pgid,
               c.receive_id,
               c.slno,
               '1' coll_purpose,
               TO_CHAR (s.risk_date, 'YYYY-MM-DD') AS riskstartdate,
               TO_CHAR (s.dob, 'YYYY-MM-DD') AS dateofbirth
        FROM   (  SELECT   SUM (a.coll_amount) coll_amount,
                           a.receive_id,
                           a.pgid,
                           MAX (a.slno) slno
                    FROM   acc_advance_receivables a
                   WHERE   a.rec_status = '1' AND a.status = '1'
                           AND NVL (a.coll_slip_rec_dt, a.receive_date) BETWEEN p_date_from
                                                                            AND  p_date_to
                GROUP BY   a.pgid, a.receive_id) b,
               acc_advance_receivables c,
               ins_p_summery s
       WHERE       b.pgid = c.pgid
               AND c.pgid = s.pgid
               AND b.pgid = s.pgid
               AND c.rec_status = '1'
               AND c.status = '1'
               AND NVL (c.coll_slip_rec_dt, c.receive_date) BETWEEN p_date_from
                                                                AND  p_date_to
               AND b.slno = c.slno
      UNION ALL
      SELECT   NVL (
                  r.adj_slip_no,
                  r.active_office_cd
                  || TO_CHAR (NVL (r.coll_slip_rec_dt, r.receive_date),
                              'RRRR')
                  || r.coll_sl_no
               )
                  orid,
               NVL (r.coll_sl_no, 1) orserialnumber,
               fun_ins_pgid_to_policy_no (s.pgid) policynumber,
               s.product_cd projectcode,
               r.active_office_cd officebranchcode,
               f_office (r.active_office_cd) officebranchname,
               NULL ortype,
               TO_CHAR (NVL (TRUNC (r.adjustment_date), r.receive_date),
                        'YYYY-MM-DD')
                  ordate,
               TO_CHAR (r.due_dt_from, 'YYYY-MM-DD') duedate,
               r.installment_no_from frominstallment,
               r.installment_no_to toinstallment,
               s.installment_premium premiumunitamount,
               r.tot_premium_amt totalpremiumamount,
               r.late_fee latefee,
               s.suspense_amt suspenseamount,
               0 - r.latefee_waiver others,
                 r.tot_premium_amt
               + NVL (r.late_fee, 0)
               - NVL (r.latefee_waiver, 0)
                  totalpayableamount,
               r.receive_mode modeofpayment,
               r.cheque_no paymentdetail,
               r.coll_slip_no prid,
               TO_CHAR (r.coll_slip_rec_dt, 'YYYY-MM-DD') prdate,
               TO_CHAR (s.next_due_date, 'YYYY-MM-DD') nextpremiumduedate,
               (s.installment_premium * s.last_paid_inst_no)
                  totalpremiumpaidsofar,
               DECODE (s.pay_mode_cd,
                       '01',
                       'Yly',
                       '02',
                       'Hly',
                       '03',
                       'Qly',
                       '04',
                       'Mly',
                       '05',
                       'Sin')
                  premiummode,
               NULL depositdate,
               NULL depositedtobank,
               NULL depositedtobranch,
               NULL depositedtoaccountnumber,
               NULL mfs,
               NULL mfsaccountnumber,
               NULL agentname,
               s.agent_id agentid,
               s.product_cd productcode,
               r.pgid,
               r.receive_id,
               NULL slno,
               '2' coll_purpose,
               TO_CHAR (s.risk_date, 'YYYY-MM-DD') AS riskstartdate,
               TO_CHAR (s.dob, 'YYYY-MM-DD') AS dateofbirth
        FROM   ins_p_summery s, acc_receivables r
       WHERE   s.pgid = r.pgid
               AND NVL (r.coll_slip_rec_dt, r.receive_date) BETWEEN p_date_from
                                                                AND  p_date_to
               AND r.rec_status = '1'
               AND r.status = '1'
               AND s.policy_status = '09'
               AND s.product_cd NOT IN ('09', '10', '16', '39', '40');

   COMMIT;

   FOR i IN (SELECT   pgid,
                      receive_id,
                      slno,
                      coll_purpose,
                      duedate,
                      frominstallment,
                      modeofpayment,
                      premiumMode,
                      AGENTID
               FROM   idra_collection_info)
   LOOP
      BEGIN
         SELECT   m.tran_dt,
                  m.bank_cd,
                  m.br_cd,
                  m.bank_acc_no
           INTO   v_depositdate,
                  v_depositedtobank,
                  v_depositedtobranch,
                  v_depositedtoaccountnumber
           FROM   acc_bank_tran_dtl d, acc_bank_tran_mst m
          WHERE       m.tran_id = d.tran_id
                  AND d.pgid = i.pgid
                  AND d.receive_id = i.receive_id
                  AND d.slno = i.slno
                  AND m.coll_purpose = i.coll_purpose;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_depositdate := NULL;
            v_depositedtobank := NULL;
            v_depositedtobranch := NULL;
            v_depositedtoaccountnumber := NULL;
      END;


      BEGIN
         SELECT   receive_mode_desc
           INTO   v_receive_mode_desc
           FROM   acc_receive_mode
          WHERE   receive_mode_cd = i.modeofpayment;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_receive_mode_desc := NULL;
      END;

      IF i.coll_purpose = '1'
      THEN
         v_ortype := 'F';
      ELSE
         SELECT   (CASE
                      WHEN I.frominstallment <= DECODE (I.premiumMode,
                                                        'Yly',
                                                        1,
                                                        'Hly',
                                                        2,
                                                        'Qly',
                                                        4,
                                                        'Mly',
                                                        12,
                                                        'Sin',
                                                        1)
                      THEN
                         'D'
                      ELSE
                         'R'
                   END)
           INTO   v_ortype
           FROM   DUAL;
      END IF;

      IF i.coll_purpose = '1'
      THEN
           SELECT   listagg (coll_slip_no, ', ') WITHIN GROUP (ORDER BY pgid)
                       AS coll_slip_no,
                    listagg (TO_CHAR (coll_slip_rec_dt, 'YYYY-MM-DD'), ', ')
                       WITHIN GROUP (ORDER BY pgid)
                       AS coll_slip_rec_dt
             INTO   v_coll_slip_no, v_coll_slip_rec_dt
             FROM   acc_advance_receivables
            WHERE   pgid = i.pgid
         GROUP BY   pgid;
      ELSE
         BEGIN
              SELECT   listagg (media_no, ', ') WITHIN GROUP (ORDER BY pgid)
                          AS coll_slip_no,
                       listagg (TO_CHAR (media_dt, 'YYYY-MM-DD'), ', ')
                          WITHIN GROUP (ORDER BY pgid)
                          AS coll_slip_rec_dt
                INTO   v_coll_slip_no, v_coll_slip_rec_dt
                FROM   acc_partial_receivables
               WHERE   pgid = i.pgid
                       AND i.duedate BETWEEN due_date_from AND due_date_to
            GROUP BY   pgid;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_coll_slip_no := NULL;
               v_coll_slip_rec_dt := NULL;
         END;
      END IF;

      BEGIN
         SELECT   agent_nm_eng
           INTO   v_agent_nm_eng
           FROM   hrm_agent
          WHERE   agent_id = i.agentid;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_agent_nm_eng := NULL;
      END;

      UPDATE   idra_collection_info
         SET   depositdate = TO_CHAR (v_depositdate, 'YYYY-MM-DD'),
               depositedtobank = v_depositedtobank,
               depositedtobranch = v_depositedtobranch,
               depositedtoaccountnumber = v_depositedtoaccountnumber,
               ortype = v_ortype,
               modeofpayment = v_receive_mode_desc,
               agentid = NVL (f_agent_idra_cd (i.agentid), i.agentid),
               agentname = v_agent_nm_eng
       WHERE       pgid = i.pgid
               AND receive_id = i.receive_id
               AND NVL (slno, 0) = NVL (i.slno, 0)
               AND coll_purpose = i.coll_purpose;
   END LOOP;

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END pro_idra_collection_info;
/


--
-- PRO_IDRA_COLL_SCD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_idra_coll_scd (p_date_fr   IN DATE,
                                                   p_date_to   IN DATE)
IS
   v_depositdate                DATE;
   v_depositedtobank            VARCHAR2 (200);
   v_depositedtobranch          VARCHAR2 (200);
   v_depositedtoaccountnumber   VARCHAR2 (200);
   v_ortype                     VARCHAR2 (20);
   v_receive_mode_desc          VARCHAR2 (50);
   v_coll_slip_no               VARCHAR2 (200);
   v_coll_slip_rec_dt           VARCHAR2 (200);
   v_agent_nm_eng               VARCHAR2 (200);
BEGIN
   INSERT INTO IDRA_COLL_INFO@dbl_smsdb (orid,
                                         orserialnumber,
                                         policynumber,
                                         projectcode,
                                         officebranchcode,
                                         officebranchname,
                                         ortype,
                                         ordate,
                                         duedate,
                                         frominstallment,
                                         toinstallment,
                                         premiumunitamount,
                                         totalpremiumamount,
                                         latefee,
                                         suspenseamount,
                                         others,
                                         totalpayableamount,
                                         modeofpayment,
                                         paymentdetail,
                                         prid,
                                         prdate,
                                         nextpremiumduedate,
                                         totalpremiumpaidsofar,
                                         premiummode,
                                         depositdate,
                                         depositedtobank,
                                         depositedtobranch,
                                         depositedtoaccountnumber,
                                         mfs,
                                         mfsaccountnumber,
                                         agentname,
                                         agentid,
                                         productcode,
                                         pgid,
                                         receiveid,
                                         slno,
                                         collpurpose,
                                         riskstartdate,
                                         dateofbirth,
                                         sendstatus,
                                         idt /*,
                                                                                                 SUM_AT_RISK,
                                                                                                 POLICY_OPTION,
                                                                                                 SURRENDER_DATE*/
                                            )
      SELECT      c.active_office_cd
               || TO_CHAR (NVL (c.coll_slip_rec_dt, c.receive_date), 'RRRR')
               || c.coll_sl_no
                  orid,
               NVL (c.coll_sl_no, 1) orserialnumber,
               (SELECT   policy_no
                  FROM   ins_p_proposal
                 WHERE   pgid = s.pgid)
                  policynumber,
               s.product_cd projectcode,
               NVL (c.active_office_cd, '07001') officebranchcode,
               --f_office(c.active_office_cd)
               (SELECT   OFFICE_NM
                  FROM   hrm_office
                 WHERE   OFFICE_CD = NVL (c.active_office_cd, '07001'))
                  officebranchname,
               NULL ortype,
               TO_CHAR (NVL (TRUNC (c.adjustment_date), c.receive_date),
                        'YYYY-MM-DD')
                  ordate,
               TO_CHAR (s.comm_date, 'YYYY-MM-DD') duedate,
               1 frominstallment,
               1 toinstallment,
               s.installment_premium premiumunitamount,
               S.INSTALLMENT_PREMIUM totalpremiumamount,
               0 latefee,
               NVL (s.suspense_amt, 0) suspenseamount,
               0 others,
               S.INSTALLMENT_PREMIUM totalpayableamount,
               DECODE (c.receive_mode,
                       '1', 'CASH',
                       '2', 'CHEQUE',
                       '3', 'DD',
                       '4', 'OTHERS',
                       '5', 'I-LIFE',
                       'BM')
                  modeofpayment,
               c.cheque_no paymentdetail,
               c.coll_slip_no prid,
               TO_CHAR (NVL (TRUNC (c.coll_slip_rec_dt), c.receive_date),
                        'YYYY-MM-DD')
                  prdate,
               TO_CHAR (s.next_due_date, 'YYYY-MM-DD') nextpremiumduedate,
               (s.installment_premium * s.last_paid_inst_no)
                  totalpremiumpaidsofar,
               DECODE (s.pay_mode_cd,
                       '01',
                       'Yly',
                       '02',
                       'Hly',
                       '03',
                       'Qly',
                       '04',
                       'Mly',
                       '05',
                       'Sin')
                  premiummode,
               NULL depositdate,
               NULL depositedtobank,
               NULL depositedtobranch,
               NULL depositedtoaccountnumber,
               NULL mfs,
               NULL mfsaccountnumber,
               NULL agentname,
               s.agent_id agentid,
               s.product_cd productcode,
               c.pgid,
               c.receive_id receiveid,
               c.slno,
               '1' collpurpose,
               TO_CHAR (s.risk_date, 'YYYY-MM-DD') AS riskstartdate,
               TO_CHAR (s.dob, 'YYYY-MM-DD') AS dateofbirth,
               0 sendstatus,
               SYSDATE idt
        /*,
        s.sum_assured,
        decode(s.option_cd,'1','A','2','B','3','C'),
        to_char(s.maturity_date, 'YYYY-MM-DD') as maturitydt*/
        FROM   (  SELECT   SUM (a.coll_amount) coll_amount,
                           a.receive_id,
                           a.pgid,
                           MAX (a.slno) slno
                    FROM   acc_advance_receivables a
                   WHERE       a.rec_status = '1'
                           AND a.status = '1'
                           AND a.idra_coll_entry_flag = '0'
                           AND NVL (a.coll_slip_rec_dt, a.receive_date) BETWEEN p_date_fr
                                                                            AND  p_date_to
                GROUP BY   a.pgid, a.receive_id) b,
               acc_advance_receivables c,
               ins_p_summery s
       WHERE       b.pgid = c.pgid
               AND c.pgid = s.pgid
               AND b.pgid = s.pgid
               AND c.rec_status = '1'
               AND s.product_cd NOT IN ('09', '10', '16', '39', '40')
               AND c.idra_coll_entry_flag = '0'
               AND c.status = '1'
               AND NVL (c.coll_slip_rec_dt, c.receive_date) BETWEEN p_date_fr
                                                                AND  p_date_to
               AND b.slno = c.slno
      UNION ALL
      SELECT   NVL (
                  r.adj_slip_no,
                  r.active_office_cd
                  || TO_CHAR (NVL (r.coll_slip_rec_dt, r.receive_date),
                              'RRRR')
                  || r.coll_sl_no
               )
                  orid,
               NVL (r.coll_sl_no, 1) orserialnumber,
               --fun_ins_pgid_to_policy_no (s.pgid) policynumber,
               (SELECT   policy_no
                  FROM   ins_p_proposal
                 WHERE   pgid = s.pgid)
                  policynumber,
               s.product_cd projectcode,
               NVL (r.active_office_cd, '07001') officebranchcode,
               --f_office (r.active_office_cd) officebranchname,
               (SELECT   OFFICE_NM
                  FROM   hrm_office
                 WHERE   OFFICE_CD = NVL (r.active_office_cd, '07001'))
                  officebranchname,
               NULL ortype,
               TO_CHAR (NVL (TRUNC (r.adjustment_date), r.receive_date),
                        'YYYY-MM-DD')
                  ordate,
               TO_CHAR (r.due_dt_from, 'YYYY-MM-DD') duedate,
               r.installment_no_from frominstallment,
               r.installment_no_to toinstallment,
               s.installment_premium premiumunitamount,
               r.tot_premium_amt totalpremiumamount,
               NVL (r.late_fee, 0) latefee,
               NVL (s.suspense_amt, 0) suspenseamount,
               NVL ( (0 - r.latefee_waiver), 0) others,
                 r.tot_premium_amt
               + NVL (r.late_fee, 0)
               - NVL (r.latefee_waiver, 0)
                  totalpayableamount,
               DECODE (r.receive_mode,
                       '1', 'CASH',
                       '2', 'CHEQUE',
                       '3', 'DD',
                       '4', 'OTHERS',
                       '5', 'I-LIFE',
                       'BM')
                  modeofpayment,
               r.cheque_no paymentdetail,
               r.coll_slip_no prid,
               TO_CHAR (NVL (TRUNC (r.coll_slip_rec_dt), r.receive_date),
                        'YYYY-MM-DD')
                  prdate,
               TO_CHAR (s.next_due_date, 'YYYY-MM-DD') nextpremiumduedate,
               (s.installment_premium * r.installment_no_to)
                  totalpremiumpaidsofar,
               DECODE (s.pay_mode_cd,
                       '01',
                       'Yly',
                       '02',
                       'Hly',
                       '03',
                       'Qly',
                       '04',
                       'Mly',
                       '05',
                       'Sin')
                  premiummode,
               NULL depositdate,
               NULL depositedtobank,
               NULL depositedtobranch,
               NULL depositedtoaccountnumber,
               NULL mfs,
               NULL mfsaccountnumber,
               NULL agentname,
               s.agent_id agentid,
               s.product_cd productcode,
               r.pgid,
               r.receive_id receiveid,
               NULL slno,
               '2' collpurpose,
               TO_CHAR (s.risk_date, 'YYYY-MM-DD') AS riskstartdate,
               TO_CHAR (s.dob, 'YYYY-MM-DD') AS dateofbirth,
               0 sendstatus,
               SYSDATE idt
        /* s.sum_assured,
         decode(s.option_cd,'1','A','2','B','3','C'),
         to_char(s.maturity_date, 'YYYY-MM-DD') as maturitydt */
        FROM   ins_p_summery s, acc_receivables r
       WHERE   s.pgid = r.pgid
               AND NVL (r.coll_slip_rec_dt, r.receive_date) BETWEEN p_date_fr
                                                                AND  p_date_to
               AND r.rec_status = '1'
               AND r.idra_coll_entry_flag = '0'
               AND r.status = '1'
               AND s.policy_status = '09'
               AND s.product_cd NOT IN ('09', '10', '16', '39', '40');


   UPDATE   acc_advance_receivables c
      SET   c.idra_coll_entry_flag = 1
    WHERE       c.idra_coll_entry_flag = '0'
            AND c.rec_status = '1'
            AND c.status = '1'
            AND c.pgid IN
                     (SELECT   s.pgid
                        FROM   ins_p_summery s
                       WHERE   s.policy_status = '09'
                               AND s.product_cd NOT IN
                                        ('09', '10', '16', '39', '40'))
            AND NVL (c.coll_slip_rec_dt, c.receive_date) BETWEEN p_date_fr
                                                             AND  p_date_to;

   UPDATE   acc_receivables r
      SET   r.idra_coll_entry_flag = 1
    WHERE   NVL (r.coll_slip_rec_dt, r.receive_date) BETWEEN p_date_fr
                                                         AND  p_date_to
            AND r.rec_status = '1'
            AND r.idra_coll_entry_flag = '0'
            AND r.status = '1'
            AND r.pgid IN
                     (SELECT   s.pgid
                        FROM   ins_p_summery s
                       WHERE   s.policy_status = '09'
                               AND s.product_cd NOT IN
                                        ('09', '10', '16', '39', '40'));

   COMMIT;

   FOR i IN (SELECT   pgid,
                      receiveid,
                      slno,
                      collpurpose,
                      duedate,
                      frominstallment,
                      modeofpayment,
                      premiumMode,
                      AGENTID
               FROM   IDRA_COLL_INFO@dbl_smsdb)
   LOOP                                                           --@DBL_SMSDB
      /* BEGIN
          SELECT   m.tran_dt,
                   m.bank_cd,
                   m.br_cd,
                   m.bank_acc_no
            INTO   v_depositdate,
                   v_depositedtobank,
                   v_depositedtobranch,
                   v_depositedtoaccountnumber
            FROM   acc_bank_tran_dtl d, acc_bank_tran_mst m
           WHERE       m.tran_id = d.tran_id
                   AND d.pgid = i.pgid
                   AND d.receive_id = i.receiveid
                   -- AND d.slno = i.slno
                   AND m.coll_purpose = i.collpurpose;
       EXCEPTION
          WHEN OTHERS
          THEN
             v_depositdate := NULL;
             v_depositedtobank := NULL;
             v_depositedtobranch := NULL;
             v_depositedtoaccountnumber := NULL;
       END;
      */


      IF i.collpurpose = '1'
      THEN
         v_ortype := 'F';
      ELSE
         SELECT   (CASE
                      WHEN I.frominstallment <= DECODE (I.premiumMode,
                                                        'Yly',
                                                        1,
                                                        'Hly',
                                                        2,
                                                        'Qly',
                                                        4,
                                                        'Mly',
                                                        12,
                                                        'Sin',
                                                        1)
                      THEN
                         'D'
                      ELSE
                         'R'
                   END)
           INTO   v_ortype
           FROM   DUAL;
      END IF;

      IF i.collpurpose = '1'
      THEN
           SELECT   listagg (coll_slip_no, ', ') WITHIN GROUP (ORDER BY pgid)
                       AS coll_slip_no,
                    listagg (TO_CHAR (coll_slip_rec_dt, 'YYYY-MM-DD'), ', ')
                       WITHIN GROUP (ORDER BY pgid)
                       AS coll_slip_rec_dt
             INTO   v_coll_slip_no, v_coll_slip_rec_dt
             FROM   acc_advance_receivables
            WHERE   pgid = i.pgid
         GROUP BY   pgid;
      ELSE
         BEGIN
              SELECT   listagg (media_no, ', ') WITHIN GROUP (ORDER BY pgid)
                          AS coll_slip_no,
                       listagg (TO_CHAR (media_dt, 'YYYY-MM-DD'), ', ')
                          WITHIN GROUP (ORDER BY pgid)
                          AS coll_slip_rec_dt
                INTO   v_coll_slip_no, v_coll_slip_rec_dt
                FROM   acc_partial_receivables
               WHERE   pgid = i.pgid
                       AND i.duedate BETWEEN due_date_from AND due_date_to
            GROUP BY   pgid;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_coll_slip_no := NULL;
               v_coll_slip_rec_dt := NULL;
         END;
      END IF;

      BEGIN
         SELECT   agent_nm_eng
           INTO   v_agent_nm_eng
           FROM   hrm_agent
          WHERE   agent_id = i.agentid;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_agent_nm_eng := NULL;
      END;

      UPDATE   idra_coll_info@dbl_smsdb
         SET   depositdate = TO_CHAR (v_depositdate, 'YYYY-MM-DD'),
               -- depositedtobank = v_depositedtobank,
               --depositedtobranch = v_depositedtobranch,
               --depositedtoaccountnumber = v_depositedtoaccountnumber,
               ortype = v_ortype,
               --modeofpayment = v_receive_mode_desc,
               agentname = v_agent_nm_eng,
               idracollprocessflag = 1
       WHERE       pgid = i.pgid
               AND receiveid = i.receiveid
               AND NVL (slno, 0) = NVL (i.slno, 0)
               AND collpurpose = i.collpurpose;
   END LOOP;

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      --dbms_output.put_line('sqlerrm: '||sqlerrm);
      NULL;
END;
/


--
-- PRO_IDRA_POLICY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_idra_policy (
   p_date_from   IN     DATE,
   p_error          OUT VARCHAR2
)
/* This Procedure has created by Alamgir Hossain for idra policy data preparation in sms server*/
IS
BEGIN
   -- EXECUTE IMMEDIATE ('TRUNCATE TABLE idra_policy_info@dbl_smsdb');

   INSERT INTO idra_policy_info@dbl_smsdb (policynumber,
                                           projectcode,
                                           policyholdername,
                                           address,
                                           postalcode,
                                           district,
                                           gender,
                                           mobilenumber,
                                           email,
                                           dateofbirth,
                                           policystartdate,
                                           policyenddate,
                                           riskstartdate,
                                           policytype,
                                           productname,
                                           productcode,
                                           premiummode,
                                           term,
                                           assuredsum,
                                           lifepremium,
                                           supplypremium,
                                           externalload,
                                           totalpremium,
                                           nextpremiumduedate,
                                           noofpaidinstallment,
                                           totalpaidamount,
                                           identificationtype,
                                           identificationnumber,
                                           agentid,
                                           agentmobilenumber,
                                           agentname,
                                           status,
                                           pgid,
                                           sumatrisk,
                                           policyoption,
                                           surrenderdate,
                                           id,
                                           sendstatus,
                                           transtatus,
                                           idt)
      SELECT   pp.policy_no policynumber,
               (SELECT   project_nm
                  FROM   INS_PROJECT
                 WHERE   project_cd = pp.project_cd)
                  projectcode,
               p.party_name AS policyholdername,
               NULL AS address,
               NULL AS postalcode,
               NULL AS district,
               DECODE (s.sex_cd, '1', 'Male', 'Female') AS gender,
               NULL AS mobilenumber,
               NULL AS email,
               TO_CHAR (s.dob, 'YYYY-MM-DD') AS dateofbirth,
               TO_CHAR (s.comm_date, 'YYYY-MM-DD') AS policystartdate,
               TO_CHAR (s.maturity_date, 'YYYY-MM-DD') AS policyenddate,
               TO_CHAR (s.risk_date, 'YYYY-MM-DD') AS riskstartdate,
               (SELECT   DECODE (policy_tp_cd, '06', 'Micro', 'Macro')
                  FROM   ins_product
                 WHERE   product_cd = s.product_cd)
                  AS policytype,
               (SELECT   product_nm
                  FROM   ins_product
                 WHERE   product_cd = s.product_cd)
                  AS productname,
               s.product_cd AS productcode,
               DECODE (s.pay_mode_cd,
                       '01',
                       'Yly',
                       '02',
                       'Hly',
                       '03',
                       'Qly',
                       '04',
                       'Mly',
                       '05',
                       'Sin')
                  AS premiummode,
               s.term AS term,
               s.sum_assured AS assuredsum,
               s.life_premium AS lifepremium,
               NVL (s.suppl_product_premium, 0) AS supplypremium,
               NVL (s.extra_premium, 0) AS externalload,
               s.installment_premium AS totalpremium,
               TO_CHAR (s.next_due_date, 'YYYY-MM-DD') AS nextpremiumduedate,
               s.last_paid_inst_no AS noofpaidinstallment,
               (s.installment_premium * s.last_paid_inst_no)
                  AS totalpaidamount,
               p.age_docu_cd AS identificationtype,
               DECODE (p.age_docu_cd, '09', p.nid, '06', p.passport_no, NULL)
                  AS identificationnumber,
               s.agent_id AS agentid,
               (SELECT   mobile
                  FROM   hrm_agent_detl
                 WHERE   agent_id = s.agent_id)
                  agentmobilenumber,
               (SELECT   agent_nm_eng
                  FROM   hrm_agent
                 WHERE   agent_id = s.agent_id)
                  agentname,
               DECODE (s.policy_status,
                       '02', 'Death',
                       '04', 'Surrender',
                       NULL)
                  AS status,
               s.pgid,
               0 sumatrisk,
               DECODE (s.option_cd, '1', 'A', '2', 'B', 'C') policyoption,
               NULL surrenderdate,
               NULL id,
               0 sendstatus,
               0 transtatus,
               SYSDATE idt
        FROM   ins_p_summery s, ins_p_personal p, ins_p_proposal pp
       WHERE       s.pgid = p.pgid
               AND s.pgid = pp.pgid
               AND s.maturity_date > p_date_from
               --  AND s.policy_status = '09'
               --  AND s.product_cd NOT IN ('09', '10', '16', '39', '40')
               AND p.party_cd = '03'
               AND p.sl_no = 1
               AND pp.policy_no IS NOT NULL
               AND pp.policy_no IN (SELECT   policy_no FROM ins_policy);

   COMMIT;

   DECLARE
      v_agent_nm_eng    VARCHAR2 (200);
      v_agent_mobile    VARCHAR2 (200);
      v_p_address_1     VARCHAR2 (2000);
      v_p_po_cd         VARCHAR2 (200);
      v_p_district_cd   VARCHAR2 (200);
      v_mobile_no       VARCHAR2 (200);
      v_e_mail          VARCHAR2 (200);
      v_project_name    VARCHAR2 (200);
      v_policy_tp_cd    VARCHAR2 (2);
      v_policy_tp_nm    VARCHAR2 (200);

      CURSOR c
      IS
         SELECT   policynumber, pgid, agentid agent_id
           FROM   idra_policy_info@dbl_smsdb;
   BEGIN
      FOR i IN c
      LOOP
         BEGIN
            SELECT   pd.policy_tp_cd
              INTO   v_policy_tp_cd
              FROM   ins_p_summery s, ins_product pd
             WHERE   s.pgid = i.pgid AND s.product_cd = pd.product_cd;

            SELECT   policy_tp_nm
              INTO   v_policy_tp_nm
              FROM   ins_policy_type
             WHERE   policy_tp_cd = v_policy_tp_cd;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_policy_tp_cd := NULL;
         END;

         IF v_policy_tp_cd IS NOT NULL
         THEN
            BEGIN
               SELECT   a.p_address_1,
                        a.p_po_cd,
                        (SELECT   district_nm
                           FROM   hrm_district
                          WHERE   district_cd = a.p_district_cd),
                        a.mobile_no,
                        a.e_mail
                 INTO   v_p_address_1,
                        v_p_po_cd,
                        v_p_district_cd,
                        v_mobile_no,
                        v_e_mail
                 FROM   ins_p_address a
                WHERE   a.pgid = i.pgid
                        AND a.party_cd =
                              DECODE (v_policy_tp_cd, '03', '02', '03')
                        AND LENGTH (TRIM (a.p_address_1)) >= 6;
            EXCEPTION
               WHEN OTHERS
               THEN
                  BEGIN
                     SELECT   a.p_address_1,
                              a.p_po_cd,
                              (SELECT   district_nm
                                 FROM   hrm_district
                                WHERE   district_cd = a.p_district_cd),
                              a.mobile_no,
                              a.e_mail
                       INTO   v_p_address_1,
                              v_p_po_cd,
                              v_p_district_cd,
                              v_mobile_no,
                              v_e_mail
                       FROM   ins_p_address a
                      WHERE       a.pgid = i.pgid
                              AND a.party_id = (SELECT   MIN (party_id)
                                                  FROM   ins_p_address d
                                                 WHERE   d.pgid = a.pgid)
                              AND LENGTH (TRIM (a.p_address_1)) >= 6;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_p_address_1 := NULL;
                        v_p_po_cd := NULL;
                        v_p_district_cd := NULL;
                        v_mobile_no := NULL;
                        v_e_mail := NULL;
                  END;
            END;
         END IF;

         UPDATE   idra_policy_info@dbl_smsdb
            SET   address = v_p_address_1,
                  postalcode = v_p_po_cd,
                  district = v_p_district_cd,
                  mobilenumber = v_mobile_no,
                  email = v_e_mail,
                  transtatus = 1
          WHERE   policynumber = i.policynumber;



         COMMIT;
      END LOOP;

      COMMIT;
   END;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END pro_idra_policy;
/


--
-- PRO_IDRA_POLICY_INFO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_idra_policy_info (
   p_date_from   IN     DATE,
   p_date_to     IN     DATE,
   p_error          OUT VARCHAR2
)
IS
BEGIN
   EXECUTE IMMEDIATE ('TRUNCATE TABLE idra_policy_info');

   INSERT INTO idra_policy_info (policynumber,
                                 projectcode,
                                 policyholdername,
                                 address,
                                 postalcode,
                                 district,
                                 gender,
                                 mobilenumber,
                                 email,
                                 dateofbirth,
                                 policystartdate,
                                 policyenddate,
                                 riskstartdate,
                                 policytype,
                                 productname,
                                 productcode,
                                 premiummode,
                                 term,
                                 assuredsum,
                                 lifepremium,
                                 supplypremium,
                                 externalload,
                                 totalpremium,
                                 nextpremiumduedate,
                                 noofpaidinstallment,
                                 totalpaidamount,
                                 identificationtype,
                                 identificationnumber,
                                 agentid,
                                 agentmobilenumber,
                                 agentname,
                                 status,
                                 pgid)
      SELECT   fun_ins_pgid_to_policy_no (s.pgid) AS policynumber,
               NULL AS projectcode,
               p.party_name AS policyholdername,
               NULL AS address,
               NULL AS postalcode,
               NULL AS district,
               fun_ins_gender (s.sex_cd) AS gender,
               NULL AS mobilenumber,
               NULL AS email,
               TO_CHAR (s.dob, 'YYYY-MM-DD') AS dateofbirth,
               TO_CHAR (s.comm_date, 'YYYY-MM-DD') AS policystartdate,
               TO_CHAR (s.maturity_date, 'YYYY-MM-DD') AS policyenddate,
               TO_CHAR (s.risk_date, 'YYYY-MM-DD') AS riskstartdate,
               NULL AS policytype,
               fun_ins_product (s.product_cd) AS productname,
               s.product_cd AS productcode,
               DECODE (s.pay_mode_cd,
                       '01',
                       'Yly',
                       '02',
                       'Hly',
                       '03',
                       'Qly',
                       '04',
                       'Mly',
                       '05',
                       'Sin')
                  AS premiummode,
               s.term AS term,
               s.sum_assured AS assuredsum,
               s.life_premium AS lifepremium,
               s.suppl_product_premium AS supplypremium,
               s.extra_premium AS externalload,
               s.installment_premium AS totalpremium,
               TO_CHAR (s.next_due_date, 'YYYY-MM-DD') AS nextpremiumduedate,
               s.last_paid_inst_no AS noofpaidinstallment,
               (s.installment_premium * s.last_paid_inst_no)
                  AS totalpaidamount,
               p.age_docu_cd AS identificationtype,
               DECODE (p.age_docu_cd, '09', p.nid, '06', p.passport_no, NULL)
                  AS identificationnumber,
               s.agent_id AS agentid,
               NULL agentmobilenumber,
               NULL agentname,
               DECODE (s.policy_status,
                       '02', 'Death',
                       '04', 'Surrender',
                       NULL)
                  AS status,
               s.pgid
        FROM   ins_p_summery s, ins_p_personal p
       WHERE       s.pgid = p.pgid
               AND s.maturity_date BETWEEN p_date_from AND p_date_to
               AND s.policy_status = '09'
               AND s.product_cd NOT IN ('09', '10', '16', '39', '40')
               AND p.party_cd = '03'
               AND p.sl_no = 1;

   COMMIT;

   DECLARE
      v_agent_nm_eng    VARCHAR2 (200);
      v_agent_idra_cd   VARCHAR2 (25);
      v_agent_mobile    VARCHAR2 (200);
      v_p_address_1     VARCHAR2 (2000);
      v_p_po_cd         VARCHAR2 (200);
      v_p_district_cd   VARCHAR2 (200);
      v_mobile_no       VARCHAR2 (200);
      v_e_mail          VARCHAR2 (200);
      v_project_name    VARCHAR2 (200);
      v_policy_tp_cd    VARCHAR2 (2);
      v_policy_tp_nm    VARCHAR2 (200);

      CURSOR c
      IS
         SELECT   policynumber,
                  fun_ins_policy_no_to_pgid (policynumber) pgid,
                  agentid agent_id
           FROM   idra_policy_info;
   BEGIN
      FOR i IN c
      LOOP
         BEGIN
            SELECT   agent_nm_eng
              INTO   v_agent_nm_eng
              FROM   hrm_agent
             WHERE   agent_id = i.agent_id;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_agent_nm_eng := NULL;
         END;

         /* BEGIN
               SELECT   IDRA_FA_CD
                 INTO   v_agent_idra_cd
                 FROM   hrm_agent
                WHERE   agent_id = i.agent_id;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_agent_idra_cd := NULL;
            END;
            */

         BEGIN
            SELECT   mobile
              INTO   v_agent_mobile
              FROM   hrm_agent_detl
             WHERE   agent_id = i.agent_id;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_agent_mobile := NULL;
         END;

         BEGIN
            SELECT   fun_project_nm (p.project_cd)
              INTO   v_project_name
              FROM   ins_p_proposal p
             WHERE   p.pgid = i.pgid;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_project_name := NULL;
         END;

         BEGIN
            SELECT   pd.policy_tp_cd
              INTO   v_policy_tp_cd
              FROM   ins_p_summery s, ins_product pd
             WHERE   s.pgid = i.pgid AND s.product_cd = pd.product_cd;

            SELECT   policy_tp_nm
              INTO   v_policy_tp_nm
              FROM   ins_policy_type
             WHERE   policy_tp_cd = v_policy_tp_cd;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_policy_tp_cd := NULL;
         END;

         IF v_policy_tp_cd IS NOT NULL
         THEN
            BEGIN
               SELECT   a.p_address_1,
                        a.p_po_cd,
                        a.p_district_cd,
                        a.mobile_no,
                        a.e_mail
                 INTO   v_p_address_1,
                        v_p_po_cd,
                        v_p_district_cd,
                        v_mobile_no,
                        v_e_mail
                 FROM   ins_p_address a
                WHERE   a.pgid = i.pgid
                        AND a.party_cd =
                              DECODE (v_policy_tp_cd, '03', '02', '03');
            EXCEPTION
               WHEN OTHERS
               THEN
                  BEGIN
                     SELECT   a.p_address_1,
                              a.p_po_cd,
                              a.p_district_cd,
                              a.mobile_no,
                              a.e_mail
                       INTO   v_p_address_1,
                              v_p_po_cd,
                              v_p_district_cd,
                              v_mobile_no,
                              v_e_mail
                       FROM   ins_p_address a
                      WHERE   a.pgid = i.pgid
                              AND a.party_id = (SELECT   MIN (party_id)
                                                  FROM   ins_p_address d
                                                 WHERE   d.pgid = a.pgid);
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_p_address_1 := NULL;
                        v_p_po_cd := NULL;
                        v_p_district_cd := NULL;
                        v_mobile_no := NULL;
                        v_e_mail := NULL;
                  END;
            END;
         END IF;

         UPDATE   idra_policy_info
            SET   projectcode = v_project_name,
                  address = v_p_address_1,
                  postalcode = v_p_po_cd,
                  district = v_p_district_cd,
                  mobilenumber = v_mobile_no,
                  email = v_e_mail,
                  agentid = NVL (f_agent_idra_cd (i.agent_id), i.agent_id),
                  agentmobilenumber = v_agent_mobile,
                  agentname = v_agent_nm_eng,
                  policytype = v_policy_tp_nm
          WHERE   policynumber = i.policynumber;

         COMMIT;
      END LOOP;

      COMMIT;
   END;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END pro_idra_policy_info;
/


--
-- PRO_IDRA_POLICY_INFO_SCDL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_idra_policy_info_scdl (
   p_date_from   IN     DATE,
   p_date_to     IN     DATE,
   p_error          OUT VARCHAR2
)
/* This Procedure has created by Alamgir Hossain for idra policy data preparation in sms server*/
IS
BEGIN
   -- EXECUTE IMMEDIATE ('TRUNCATE TABLE idra_policy_info@dbl_smsdb');

   INSERT INTO idra_policy_info@dbl_smsdb (policynumber,
                                           projectcode,
                                           policyholdername,
                                           address,
                                           postalcode,
                                           district,
                                           gender,
                                           mobilenumber,
                                           email,
                                           dateofbirth,
                                           policystartdate,
                                           policyenddate,
                                           riskstartdate,
                                           policytype,
                                           productname,
                                           productcode,
                                           premiummode,
                                           term,
                                           assuredsum,
                                           lifepremium,
                                           supplypremium,
                                           externalload,
                                           totalpremium,
                                           nextpremiumduedate,
                                           noofpaidinstallment,
                                           totalpaidamount,
                                           identificationtype,
                                           identificationnumber,
                                           agentid,
                                           agentmobilenumber,
                                           agentname,
                                           status,
                                           pgid,
                                           sumatrisk,
                                           policyoption,
                                           surrenderdate,
                                           id,
                                           sendstatus,
                                           transtatus,
                                           idt)
      SELECT   pp.policy_no policynumber,
               (SELECT   project_nm
                  FROM   INS_PROJECT
                 WHERE   project_cd = pp.project_cd)
                  projectcode,
               p.party_name AS policyholdername,
               NULL AS address,
               NULL AS postalcode,
               NULL AS district,
               DECODE (s.sex_cd, '1', 'Male', 'Female') AS gender,
               NULL AS mobilenumber,
               NULL AS email,
               TO_CHAR (s.dob, 'YYYY-MM-DD') AS dateofbirth,
               TO_CHAR (s.comm_date, 'YYYY-MM-DD') AS policystartdate,
               TO_CHAR (s.maturity_date, 'YYYY-MM-DD') AS policyenddate,
               TO_CHAR (s.risk_date, 'YYYY-MM-DD') AS riskstartdate,
               (SELECT   DECODE (policy_tp_cd, '06', 'Micro', 'Macro')
                  FROM   ins_product
                 WHERE   product_cd = s.product_cd)
                  AS policytype,
               (SELECT   product_nm
                  FROM   ins_product
                 WHERE   product_cd = s.product_cd)
                  AS productname,
               s.product_cd AS productcode,
               DECODE (s.pay_mode_cd,
                       '01',
                       'Yly',
                       '02',
                       'Hly',
                       '03',
                       'Qly',
                       '04',
                       'Mly',
                       '05',
                       'Sin')
                  AS premiummode,
               s.term AS term,
               s.sum_assured AS assuredsum,
               s.life_premium AS lifepremium,
               NVL (s.suppl_product_premium, 0) AS supplypremium,
               NVL (s.extra_premium, 0) AS externalload,
               s.installment_premium AS totalpremium,
               TO_CHAR (s.next_due_date, 'YYYY-MM-DD') AS nextpremiumduedate,
               s.last_paid_inst_no AS noofpaidinstallment,
               (s.installment_premium * s.last_paid_inst_no)
                  AS totalpaidamount,
               p.age_docu_cd AS identificationtype,
               DECODE (p.age_docu_cd, '09', p.nid, '06', p.passport_no, NULL)
                  AS identificationnumber,
               s.agent_id AS agentid,
               (SELECT   mobile
                  FROM   hrm_agent_detl
                 WHERE   agent_id = s.agent_id)
                  agentmobilenumber,
               (SELECT   agent_nm_eng
                  FROM   hrm_agent
                 WHERE   agent_id = s.agent_id)
                  agentname,
               DECODE (s.policy_status,
                       '02', 'Death',
                       '04', 'Surrender',
                       NULL)
                  AS status,
               s.pgid,
               0 sumatrisk,
               DECODE (s.option_cd, '1', 'A', '2', 'B', 'C') policyoption,
               NULL surrenderdate,
               NULL id,
               0 sendstatus,
               0 transtatus,
               SYSDATE idt
        FROM   ins_p_summery s, ins_p_personal p, ins_p_proposal pp
       WHERE       s.pgid = p.pgid
               AND s.pgid = pp.pgid
               AND s.maturity_date BETWEEN p_date_from AND p_date_to
               AND s.policy_status = '09'
               AND s.product_cd NOT IN ('09', '10', '16', '39', '40')
               AND p.party_cd = '03'
               AND p.sl_no = 1
               AND pp.policy_no IS NOT NULL
               AND NOT EXISTS (SELECT   1
                                 FROM   idra_policy_info@dbl_smsdb
                                WHERE   pgid = s.pgid AND transtatus = 1);

   COMMIT;

   DECLARE
      v_agent_nm_eng    VARCHAR2 (200);
      v_agent_mobile    VARCHAR2 (200);
      v_p_address_1     VARCHAR2 (2000);
      v_p_po_cd         VARCHAR2 (200);
      v_p_district_cd   VARCHAR2 (200);
      v_mobile_no       VARCHAR2 (200);
      v_e_mail          VARCHAR2 (200);
      v_project_name    VARCHAR2 (200);
      v_policy_tp_cd    VARCHAR2 (2);
      v_policy_tp_nm    VARCHAR2 (200);

      CURSOR c
      IS
         SELECT   policynumber, pgid, agentid agent_id
           FROM   idra_policy_info@dbl_smsdb;
   BEGIN
      FOR i IN c
      LOOP
         BEGIN
            SELECT   pd.policy_tp_cd
              INTO   v_policy_tp_cd
              FROM   ins_p_summery s, ins_product pd
             WHERE   s.pgid = i.pgid AND s.product_cd = pd.product_cd;

            SELECT   policy_tp_nm
              INTO   v_policy_tp_nm
              FROM   ins_policy_type
             WHERE   policy_tp_cd = v_policy_tp_cd;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_policy_tp_cd := NULL;
         END;

         IF v_policy_tp_cd IS NOT NULL
         THEN
            BEGIN
               SELECT   a.p_address_1,
                        a.p_po_cd,
                        (SELECT   district_nm
                           FROM   hrm_district
                          WHERE   district_cd = a.p_district_cd),
                        a.mobile_no,
                        a.e_mail
                 INTO   v_p_address_1,
                        v_p_po_cd,
                        v_p_district_cd,
                        v_mobile_no,
                        v_e_mail
                 FROM   ins_p_address a
                WHERE   a.pgid = i.pgid
                        AND a.party_cd =
                              DECODE (v_policy_tp_cd, '03', '02', '03')
                        AND LENGTH (TRIM (a.p_address_1)) >= 6;
            EXCEPTION
               WHEN OTHERS
               THEN
                  BEGIN
                     SELECT   a.p_address_1,
                              a.p_po_cd,
                              (SELECT   district_nm
                                 FROM   hrm_district
                                WHERE   district_cd = a.p_district_cd),
                              a.mobile_no,
                              a.e_mail
                       INTO   v_p_address_1,
                              v_p_po_cd,
                              v_p_district_cd,
                              v_mobile_no,
                              v_e_mail
                       FROM   ins_p_address a
                      WHERE       a.pgid = i.pgid
                              AND a.party_id = (SELECT   MIN (party_id)
                                                  FROM   ins_p_address d
                                                 WHERE   d.pgid = a.pgid)
                              AND LENGTH (TRIM (a.p_address_1)) >= 6;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_p_address_1 := NULL;
                        v_p_po_cd := NULL;
                        v_p_district_cd := NULL;
                        v_mobile_no := NULL;
                        v_e_mail := NULL;
                  END;
            END;
         END IF;

         UPDATE   idra_policy_info@dbl_smsdb
            SET   address = v_p_address_1,
                  postalcode = v_p_po_cd,
                  district = v_p_district_cd,
                  mobilenumber = v_mobile_no,
                  email = v_e_mail,
                  transtatus = 1
          WHERE   policynumber = i.policynumber;



         COMMIT;
      END LOOP;

      COMMIT;
   END;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END pro_idra_policy_info_scdl;
/


--
-- PRO_ID_GENERATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_id_generation wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
179a 59b
synkpcAxHdwhWkaOg2XRQh3+KoEwg81ULtAF3y/Nk53g0QJj1CrCGd8Hq/1n1bPf+5PDFCcD
rb0Fg7JvFordVV2JLJqoJijx6FZCt+vfe1SjwItSzosIC0nZk6IGZUmlKTBNHMQ9xlU/v88w
I3qKr/6mygpmb7cY1HB63r6+bDrDk8guKwgoiCZm1yeQIINKWMkIAzCxSn8+fZel5aQBxtgp
PEy0wKHv4DrnHz1/9vgysJShoRzA0wpCS/GGu0x1gB58T3jdbHKRmCNZ/ZalEaiKuX7Y1OHk
mg9bmQHCvbsKrDQKCehSRPk0KoUVU2ZC/8AqKwd/qmJ+SPoY6BXA9G+OEZ4/NdPTUhaZUZv3
yPWe6fS37U/mp7Y61H8M8cCrG1f1DVkVjW4F+guDUvHiziOeDOwfcUAbYC8R8wyG4q+9lbEh
u35+twH/36lGqFyseKChu9vdVg1WmmS98kvMg/DoRXzwa4+olpl+QXEu4e5YfKc95yvm+VM1
RbeRswUMFxg7AuoTUGxhkGVJk8YI6HxYbU/2KsJuZbMVgP7RVO5OyZ6dREFgL39JuhfTplzh
Ihdc79BRNGJXvD0nay0TpRnBsdXOQ5EbxcQf+0QZeKOtmIevjT1ZXv9fDQatoOt9IvZXJp38
7aLkMX7TBphM5ACzoUcjC/K0W+bKx6OnPvKOFRRSMzx/6XlZ94heGpWOTI5elPdu6jinbC++
1z3mobvTpQJi6X6Ov5WCiRF7vdur85b2bCOwL49tdkdH6SigyNnGrd+56SLSrX8ZuxYcLV8L
ZtcQ/XBuUEOjIdzx9z/HKbHokW7rDfWrl5AIyjqEyZrUZ4SsR7xS/KPbNoYIi6SHSYNKO5nI
4toap9/WanAUw2SQA4YazBbXW8i6a1Kp8I7E2R5lMtB7V5BYEH+bP29EpYSa76vaEBO/ZPeb
n1dM6Ei2j7UWucF8piSgzRFx9Ts26WCczTt21ExHckygrrv5K9mxZNRz6/NfgiGIsY+UhXSw
7dK6f25LrH8AHvHKvX8yQ7LegLfweBrLLgQZhdKxH+S8KZcSIHFA+q3sByiGu69ObLA9mWwj
pVTOHHoPS1K8VABPfhd4ZspJ+nJV3dg3xt1wkcKnGoAThYP7zugypiCzo2SE8F9MltmpK7hq
4r1VqkLOwVKZlbkpTrD0ANCSXo4Qw88EbgIgKVxtbNlYGI46YEOVIUz0C/+Td0YTxEx/wdhA
27VzLu7U4Xzv/We970oYLa/R6S3ynCNWeWMIbpeB2B6VoU5g3htX/WlcE9saygCTchxhBcZz
gMrGhu7ntmzBn/WcnntWk58KLf8HJtlWQHPuvfzT/kgFsCEIobnv8SqNl/7jvXT3ThWnsa3P
zsf+sWrBqr+4zrouZDCcj2jfmWTQhA1afECVrrX7UZnimw==
/


--
-- PRO_INS_FIND_POLICY_CAT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_ins_find_policy_cat wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
d75 562
Ufa5/wJHL4iVLrOCENA/qJ+r8tcwg43qTPYFeo4/ZHPV9YLxfAuDgeKVHYArcX+ACWyYeeJZ
WuvMtPElGh/Wc87+hfF5odzER44nLAByszqnZhTGFGRsNWQg+IsBvxFBD5+u1x75xtmL6gOT
LLMh5uf0YI4hgLmEk7VRq1SccbiNjfQ5P+UrrNunhQwY6rL/5VGvo0Rk1Qe0ZPGs2VwGjEwA
ovLRTB0jAP5Y28RY5NPXUVnepXMw607EmH+rnhXAZhLCHj73GIKlw/fGqTb3fiF94v/yRQ4U
xBRixGW0GMCnX8jiq0pSzbt6gwXmYFYCvsod/o4K1lNxhYeHhpcFoEOrQmXYEla27eabozBW
77GF0RWN51Plh99YCWlCQo+Gel6OSf9FDNmerBXGY69FmQ8J31HkvUEA+ZlxkcKjRPQluPnd
ygbEwxRzuo8AyVy369gRwEraGwqcx2az0idA/0LiXvXuPQy97puCICUu5aMUHNujZUlEAaPW
ZmyvlOyYNdDux4UjkTIraK5Mij1KNWIUD0XMhE4r+bgMcJegCxQNTl0bJ7r4urN8m3xklAGi
Pu3VVPK9RlrB4HtBACnqCspK/+eJBFx4pUwDcnfTb2AKREYXJWoJfikrMOIYDnrwnu96hGpH
29olcsgyr+0cgWXN3zB1cbYiFAZLQzWME7iumNztnSyXVOI1hBgJlq3UyUXnxi4YGx/qtu0r
VdPJ7b+jm6MdvFmDy6hjZizK4lbhXw6ZA+qab9xf46Qzf2a/hjGk9qmQhWoSeBfWXTNpBV9z
5fBCqqXbsMuJMFccBriLW/1Ex2sP9ZID2gTdTc7SNUT51K9WNXa/RX4YoQYNgXBgE7pUzeZB
ewgsa8MxfMvI2bPyF43MOIJwRO+4vzDocBf+f3N62vAe0Nn7VfSpC/w4Fh1H9itrJvKDs2L6
pN3JOPlosyJKQnIha8MtSTsmFAwEzxb+73pxYAnE5s9PwwaR0AR9TT/PGK2uwRojykY34c4n
o17wInOTCMgGQWgdDY1Fke/nKUK4Q+boLhBQjvkD+AmARS6h3EafWO5cdH362GwurPRbnITX
+NUIwMDgw/xMc14hc0uqQEKrENLeZo/DvU3ZVbu8woOvi1U5vFGZmIt03/UGG83cV12yviiz
nB2Dy3pzkuP0UO0cgWzGL4YuQVzIaRY65H4SVEyneNHbcYNkXpYJtrP5RWcwEGg/mp0pnFVI
qqIx7ksCnUkhmkg8uwdigyTvLRDair8eLOO5Qf4gJLHGnHPLqaNKzslO+ScUJxLPqunSqQR9
k4qav65zcZ30elu6u1dTZgVPnkquqscRpYtPenUOmp33RdU3NDa63Q61+VsWT2XM
/


--
-- PRO_INS_GET_MISSING_POLICY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_ins_get_missing_policy (
   P_OLD_POLICY_NO          IN     VARCHAR2,
   P_POLICY_NO                 OUT VARCHAR2,
   P_COMM_DATE                 OUT DATE,
   P_AGENT_ID                  OUT VARCHAR2,
   P_SERVICING_OFFICE          OUT VARCHAR2,
   P_PROJECT_CD                OUT VARCHAR2,
   P_OFFICE_CD                 OUT VARCHAR2,
   P_SL_NO                     OUT NUMBER,
   P_YEAR                      OUT VARCHAR2,
   P_INS_TP_CD                 OUT CHAR,
   P_PRO_PARTY_NAME            OUT VARCHAR2,
   P_PRO_PRODUCT_CD            OUT VARCHAR2,
   P_PGID                      OUT VARCHAR2,
   P_TERM                      OUT VARCHAR2,
   P_PAY_MODE_CD               OUT VARCHAR2,
   P_POLICY_INSTALLMENT        OUT NUMBER,
   P_PREMIUM                   OUT NUMBER,
   P_TOTAL_YEARLY_PREMIUM      OUT NUMBER,
   P_DO_GID                    OUT NUMBER,
   P_DM_GID                    OUT NUMBER,
   P_NEXT_DUE_DATE             OUT DATE,
   P_OUTPUT                    OUT VARCHAR2
)
IS
   V_PGID          INS_P_PROPOSAL.PGID%TYPE;
   V_PROPOSAL_NO   INS_P_PROPOSAL.PROPOSAL_NO%TYPE;
   V_ERROR         VARCHAR2 (200);
   EXP_PROPOSAL_INFO EXCEPTION;
   EXP_PROPOSAL_YEAR EXCEPTION;
   EXP_PRO_SUMMERY_INFO EXCEPTION;
BEGIN
   BEGIN
      SELECT   PGID,
               PROPOSAL_DT,
               PROPOSAL_NO,
               POLICY_NO,
               COMM_DT,
               AGENT_ID,
               SERVICING_OFFICE,
               PROJECT_CD,
               SL_NO,
               OFFICE_CD,
               INS_TP_CD,
               PRO_PARTY_NAME,
               PRO_PRODUCT_CD,
               PROJECT_CD
        INTO   P_PGID,
               P_COMM_DATE,
               V_PROPOSAL_NO,
               P_POLICY_NO,
               P_COMM_DATE,
               P_AGENT_ID,
               P_SERVICING_OFFICE,
               P_PROJECT_CD,
               P_SL_NO,
               P_OFFICE_CD,
               P_INS_TP_CD,
               P_PRO_PARTY_NAME,
               P_PRO_PRODUCT_CD,
               P_PROJECT_CD
        FROM   INS_P_PROPOSAL
       WHERE   OLD_POLICY_NO = P_OLD_POLICY_NO;
   EXCEPTION
      WHEN OTHERS
      THEN
         RAISE EXP_PROPOSAL_INFO;
   END;

   BEGIN
      SELECT   SUBSTR (V_PROPOSAL_NO, 13, 4) INTO P_YEAR FROM DUAL;
   EXCEPTION
      WHEN OTHERS
      THEN
         RAISE EXP_PROPOSAL_YEAR;
   END;


   BEGIN
      SELECT   TERM,
               PAY_MODE_CD,
               POLICY_INSTALLMENT,
               INSTALLMENT_PREMIUM,
               TOTAL_YEARLY_PREMIUM,
               NEXT_DUE_DATE,
               DO_GID,
               DM_GID
        INTO   P_TERM,
               P_PAY_MODE_CD,
               P_POLICY_INSTALLMENT,
               P_PREMIUM,
               P_TOTAL_YEARLY_PREMIUM,
               P_NEXT_DUE_DATE,
               P_DO_GID,
               P_DM_GID
        FROM   INS_P_SUMMERY
       WHERE   PGID = P_PGID;
   EXCEPTION
      WHEN OTHERS
      THEN
         RAISE EXP_PROPOSAL_INFO;
   END;

   P_OUTPUT := NULL;
EXCEPTION
   WHEN EXP_PROPOSAL_INFO
   THEN
      P_OUTPUT := 'Proposal Info ' || SQLERRM;
   WHEN EXP_PROPOSAL_YEAR
   THEN
      P_OUTPUT := 'Proposal Year ' || SQLERRM;
   WHEN EXP_PRO_SUMMERY_INFO
   THEN
      P_OUTPUT := 'Proposal Summery Info ' || SQLERRM;
END;
/


--
-- PRO_INS_MISSING_POLICY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_ins_missing_policy (
   P_POLICY_NO              IN     VARCHAR2,
   P_COMM_DATE              IN     DATE,
   p_proposal_dt            IN     DATE,
   p_risk_date              IN     DATE,
   p_dob                    IN     DATE,
   p_age                    IN     NUMBER,
   p_last_paid_dt           IN     DATE,
   p_last_paid_instl_no     IN     NUMBER,
   p_option                 IN     VARCHAR2,
   p_summ_ass               IN     NUMBER,
   p_life_prem              IN     NUMBER,
   p_status                 IN     VARCHAR2,
   P_AGENT_ID               IN     VARCHAR2,
   P_SERVICING_OFFICE       IN     VARCHAR2,
   P_PROJECT_CD             IN     VARCHAR2,
   P_OFFICE_CD              IN     VARCHAR2,
   P_YEAR                   IN     VARCHAR2,
   P_INS_TP_CD              IN     CHAR,
   P_PRO_PARTY_NAME         IN     VARCHAR2,
   P_PRO_PRODUCT_CD         IN     VARCHAR2,
   P_OLD_POLICY_NO          IN     VARCHAR2,
   P_TERM                   IN     VARCHAR2,
   P_PAY_MODE_CD            IN     VARCHAR2,
   P_POLICY_INSTALLMENT     IN     NUMBER,
   P_PREMIUM                IN     NUMBER,
   P_TOTAL_YEARLY_PREMIUM   IN     NUMBER,
   P_DO_GID                 IN     NUMBER,
   P_DM_GID                 IN     NUMBER,
   P_USER                   IN     VARCHAR2,
   P_NEXT_DUE_DATE          IN     DATE,
   P_SL_NO                     OUT NUMBER,
   P_OUTPUT                    OUT VARCHAR2
)
IS
   V_PGID          INS_P_PROPOSAL.PGID%TYPE;
   V_PROPOSAL_NO   INS_P_PROPOSAL.PROPOSAL_NO%TYPE;
   V_ERROR         VARCHAR2 (200);
   EXP_PROPOSAL_NO_GEN EXCEPTION;
   EXP_SL_NO_GEN EXCEPTION;
BEGIN
   BEGIN
      SELECT   NVL (MAX (PROPOSAL_SL_NO), 0) + 1
        INTO   P_SL_NO
        FROM   INS_P_PROPOSAL
       WHERE   OFFICE_CD = P_OFFICE_CD;
   EXCEPTION
      WHEN OTHERS
      THEN
         RAISE EXP_SL_NO_GEN;
   END;

   V_PROPOSAL_NO := P_SL_NO || P_OFFICE_CD || P_YEAR;

   BEGIN
      PRO_CODE_NO_PADDING (P_CODE_ID            => '3',
                           P_ID_NUMBER          => V_PROPOSAL_NO,
                           P_ACTUAL_ID_NUMBER   => V_PROPOSAL_NO,
                           P_OUTPUT             => V_ERROR);

      IF V_ERROR IS NOT NULL
      THEN
         RAISE EXP_PROPOSAL_NO_GEN;
      END IF;
   END;

   SELECT      TO_CHAR (TO_DATE (SYSDATE), 'RRMMDD')
            || P_OFFICE_CD
            || LPAD (INS_PROPOSAL_SL_NO.NEXTVAL, 5, 0)
     INTO   V_PGID
     FROM   DUAL;

   INSERT INTO INS_P_PROPOSAL (PGID,
                               PROPOSAL_DT,
                               ASSURANCE_TYPE,
                               I_USR,
                               I_DT,
                               POLICY_NO,
                               COMM_DT,
                               PROPOSAL_NO,
                               AGENT_ID,
                               SERVICING_OFFICE,
                               POLICY_CATG_CD,
                               PROJECT_CD,
                               SL_NO,
                               OFFICE_CD,
                               INS_TP_CD,
                               REVIEW,
                               PROPOSAL_SL_NO,
                               PRO_PARTY_NAME,
                               PRO_PRODUCT_CD,
                               OLD_POLICY_NO,
                               PRO_GROUP_NUMBER,
                               MIGRATION_ST)
     VALUES   (V_PGID,
               p_proposal_dt,
               '1',
               P_USER,
               SYSDATE,
               P_POLICY_NO,
               P_COMM_DATE,
               V_PROPOSAL_NO,
               P_AGENT_ID,
               P_SERVICING_OFFICE,
               '01',
               P_PROJECT_CD,
               P_SL_NO,
               P_OFFICE_CD,
               P_INS_TP_CD,
               '0',
               P_SL_NO,
               P_PRO_PARTY_NAME,
               P_PRO_PRODUCT_CD,
               P_OLD_POLICY_NO,
               P_PROJECT_CD,
               '2');

   INSERT INTO INS_P_SUMMERY (
                                 PGID,
                                 PROPOSAL_DATE,
                                 COMM_DATE,
                                 RISK_DATE,
                                 AGE_DOCU_CD,
                                 SEX_CD,
                                 OPTION_CD,
                                 SUM_ASSURED,
                                 PRODUCT_CD,
                                 TERM,
                                 PAY_MODE_CD,
                                 POLICY_INSTALLMENT,
                                 LIFE_PREMIUM,
                                 SUPPL_BEN_PREMIUM,
                                 SUPPL_PRODUCT_PREMIUM,
                                 PAY_MODE_REBATE,
                                 STAFF_REBATE,
                                 SUM_REBATE,
                                 TOTAL_YEARLY_PREMIUM,
                                 INSTALLMENT_PREMIUM,
                                 MATURITY_DATE,
                                 ZONE_CD,
                                 AGENT_ID,
                                 LAST_PAID_INST_NO,
                                 LAST_PAID_DATE,
                                 NEXT_DUE_INST_NO,
                                 NEXT_DUE_DATE,
                                 POLICY_STATUS,
                                 I_USR,
                                 I_DT,
                                 OFFICE_CD,
                                 POLICY_STATUS_DT,
                                 PAID_UP_STATUS,
                                 GENDER_EXTRA_AMT,
                                 OCCU_EXTRA_AMT,
                                 LIFE_CLASS_EXTRA_AMT,
                                 EXTRA_PREMIUM,
                                 DO_GID,
                                 DO_OFFICE_CD,
                                 DM_GID,
                                 LAST_ADJUSTMENT_DT,
                                 FPR_ISSUE,
                                 BRANCH_OFF,
                                 SALES_OFF,
                                 ZONAL_OFF,
                                 REGIONAL_OFF,
                                 SERVICING_OFF,
                                 POLICY_CATG_CD,
                                 ACTIVE_STATUS,
                                 PPS_CD,
                                 INS_TP_CD
              )
     VALUES   (
                  V_PGID,
                  p_proposal_dt,
                  P_COMM_DATE,
                  p_risk_date,
                  '01',
                  '1',
                  p_option,
                  p_summ_ass,
                  P_PRO_PRODUCT_CD,
                  P_TERM,
                  P_PAY_MODE_CD,
                  P_POLICY_INSTALLMENT,
                  P_PREMIUM,
                  0,
                  0,
                  0,
                  0,
                  0,
                  P_TOTAL_YEARLY_PREMIUM,
                  P_PREMIUM,
                  ADD_MONTHS (P_COMM_DATE, P_TERM * 12),
                  NULL,
                  P_AGENT_ID,
                  p_last_paid_instl_no,
                  p_last_paid_dt,
                  p_last_paid_instl_no + 1,
                  ADD_MONTHS (
                     p_last_paid_dt,
                     DECODE (P_PAY_MODE_CD,
                             '01', 12,
                             '02', 6,
                             '03', 3,
                             '04', 1,
                             12)
                  ),
                  p_status,
                  P_USER,
                  SYSDATE,
                  P_OFFICE_CD,
                  P_COMM_DATE,
                  '0',
                  0,
                  0,
                  0,
                  0,
                  P_DO_GID,
                  P_OFFICE_CD,
                  P_DM_GID,
                  P_COMM_DATE,
                  '0',
                  NULL,
                  NULL,
                  NULL,
                  NULL,
                  P_SERVICING_OFFICE,
                  '01',
                  '1',
                  P_PROJECT_CD || P_PRO_PRODUCT_CD,
                  P_INS_TP_CD
              );


   INSERT INTO INS_P_PERSONAL (PGID,
                               PARTY_CD,
                               PARTY_ID,
                               SL_NO,
                               PARTY_NAME,
                               SEX_CD,
                               AGE_DOCU_CD,
                               I_USR,
                               I_DT)
     VALUES   (V_PGID,
               '03',
               V_PGID || '03' || '1',
               1,
               P_PRO_PARTY_NAME,
               '1',
               '01',
               P_USER,
               SYSDATE);

   INSERT INTO INS_P_ADDRESS (PGID,
                              PARTY_CD,
                              PARTY_ID,
                              P_ADDRESS_1,
                              P_ADDRESS_2,
                              T_ADDRESS,
                              I_USR,
                              I_DT)
     VALUES   (V_PGID,
               '03',
               V_PGID || '03' || '1',
               'Please Update Address',
               'Please Update Address',
               'Please Update Address',
               P_USER,
               SYSDATE);

   INSERT INTO INS_P_BASIC (PGID,
                            PRODUCT_CD,
                            AGE,
                            TERM,
                            PAY_MODE_CD,
                            OPTION_CD,
                            I_USR,
                            I_DT,
                            EXPECTED_PREMIUM,
                            INSTALLMENT_PREMIUM,
                            SUM_ASSURED)
     VALUES   (V_PGID,
               P_PRO_PRODUCT_CD,
               p_age,
               P_TERM,
               P_PAY_MODE_CD,
               p_option,
               P_USER,
               SYSDATE,
               P_PREMIUM,
               P_PREMIUM,
               p_summ_ass);

   COMMIT;
   P_OUTPUT := NULL;
EXCEPTION
   WHEN EXP_SL_NO_GEN
   THEN
      ROLLBACK;
      P_OUTPUT := SQLERRM;
   WHEN EXP_PROPOSAL_NO_GEN
   THEN
      ROLLBACK;
      P_OUTPUT := V_ERROR;
   WHEN OTHERS
   THEN
      ROLLBACK;
      P_OUTPUT := SQLERRM;
END;
/


--
-- PRO_INS_MISSING_POLICY_OLD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_ins_missing_policy_old(
   P_POLICY_NO              IN     VARCHAR2,
   P_COMM_DATE              IN     DATE,
   P_AGENT_ID               IN     VARCHAR2,
   P_SERVICING_OFFICE       IN     VARCHAR2,
   P_PROJECT_CD             IN     VARCHAR2,
   P_OFFICE_CD              IN     VARCHAR2,
   P_YEAR                   IN     VARCHAR2,
   P_INS_TP_CD              IN     CHAR,
   P_PRO_PARTY_NAME         IN     VARCHAR2,
   P_PRO_PRODUCT_CD         IN     VARCHAR2,
   P_OLD_POLICY_NO          IN     VARCHAR2,
   P_TERM                   IN     VARCHAR2,
   P_PAY_MODE_CD            IN     VARCHAR2,
   P_POLICY_INSTALLMENT     IN     NUMBER,
   P_PREMIUM                IN     NUMBER,
   P_TOTAL_YEARLY_PREMIUM   IN     NUMBER,
   P_DO_GID                 IN     NUMBER,
   P_DM_GID                 IN     NUMBER,
   P_USER                   IN     VARCHAR2,
   P_NEXT_DUE_DATE          IN     DATE,
   P_SL_NO                     OUT NUMBER,
   P_OUTPUT                    OUT VARCHAR2
)
IS
   V_PGID          INS_P_PROPOSAL.PGID%TYPE;
   V_PROPOSAL_NO   INS_P_PROPOSAL.PROPOSAL_NO%TYPE;
   V_ERROR         VARCHAR2 (200);
   EXP_PROPOSAL_NO_GEN EXCEPTION;
   EXP_SL_NO_GEN EXCEPTION;
BEGIN
   BEGIN
      SELECT   NVL (MAX (PROPOSAL_SL_NO), 0) + 1
        INTO   P_SL_NO
        FROM   INS_P_PROPOSAL
       WHERE   OFFICE_CD = P_OFFICE_CD;
   EXCEPTION
      WHEN OTHERS
      THEN
         RAISE EXP_SL_NO_GEN;
   END;

   V_PROPOSAL_NO := P_SL_NO || P_OFFICE_CD || P_YEAR;

   BEGIN
      PRO_CODE_NO_PADDING (P_CODE_ID            => '3',
                           P_ID_NUMBER          => V_PROPOSAL_NO,
                           P_ACTUAL_ID_NUMBER   => V_PROPOSAL_NO,
                           P_OUTPUT             => V_ERROR);

      IF V_ERROR IS NOT NULL
      THEN
         RAISE EXP_PROPOSAL_NO_GEN;
      END IF;
   END;

   SELECT      TO_CHAR (TO_DATE (SYSDATE), 'RRMMDD')
            || P_OFFICE_CD
            || LPAD (INS_PROPOSAL_SL_NO.NEXTVAL, 5, 0)
     INTO   V_PGID
     FROM   DUAL;

   INSERT INTO INS_P_PROPOSAL (PGID,
                               PROPOSAL_DT,
                               ASSURANCE_TYPE,
                               I_USR,
                               I_DT,
                               POLICY_NO,
                               COMM_DT,
                               PROPOSAL_NO,
                               AGENT_ID,
                               SERVICING_OFFICE,
                               POLICY_CATG_CD,
                               PROJECT_CD,
                               SL_NO,
                               OFFICE_CD,
                               INS_TP_CD,
                               REVIEW,
                               PROPOSAL_SL_NO,
                               PRO_PARTY_NAME,
                               PRO_PRODUCT_CD,
                               OLD_POLICY_NO,
                               PRO_GROUP_NUMBER,
                               MIGRATION_ST)
     VALUES   (V_PGID,
               P_COMM_DATE,
               '1',
               P_USER,
               SYSDATE,
               P_POLICY_NO,
               P_COMM_DATE,
               V_PROPOSAL_NO,
               P_AGENT_ID,
               P_SERVICING_OFFICE,
               '01',
               P_PROJECT_CD,
               P_SL_NO,
               P_OFFICE_CD,
               P_INS_TP_CD,
               '0',
               P_SL_NO,
               P_PRO_PARTY_NAME,
               P_PRO_PRODUCT_CD,
               P_OLD_POLICY_NO,
               P_PROJECT_CD,
               '2');

   INSERT INTO INS_P_SUMMERY (PGID,
                              PROPOSAL_DATE,
                              COMM_DATE,
                              RISK_DATE,
                              AGE_DOCU_CD,
                              SEX_CD,
                              OPTION_CD,
                              SUM_ASSURED,
                              PRODUCT_CD,
                              TERM,
                              PAY_MODE_CD,
                              POLICY_INSTALLMENT,
                              LIFE_PREMIUM,
                              SUPPL_BEN_PREMIUM,
                              SUPPL_PRODUCT_PREMIUM,
                              PAY_MODE_REBATE,
                              STAFF_REBATE,
                              SUM_REBATE,
                              TOTAL_YEARLY_PREMIUM,
                              INSTALLMENT_PREMIUM,
                              MATURITY_DATE,
                              ZONE_CD,
                              AGENT_ID,
                              LAST_PAID_INST_NO,
                              LAST_PAID_DATE,
                              NEXT_DUE_INST_NO,
                              NEXT_DUE_DATE,
                              POLICY_STATUS,
                              I_USR,
                              I_DT,
                              OFFICE_CD,
                              POLICY_STATUS_DT,
                              PAID_UP_STATUS,
                              GENDER_EXTRA_AMT,
                              OCCU_EXTRA_AMT,
                              LIFE_CLASS_EXTRA_AMT,
                              EXTRA_PREMIUM,
                              DO_GID,
                              DO_OFFICE_CD,
                              DM_GID,
                              LAST_ADJUSTMENT_DT,
                              FPR_ISSUE,
                              BRANCH_OFF,
                              SALES_OFF,
                              ZONAL_OFF,
                              REGIONAL_OFF,
                              SERVICING_OFF,
                              POLICY_CATG_CD,
                              ACTIVE_STATUS,
                              PPS_CD,
                              INS_TP_CD)
     VALUES   (V_PGID,
               P_COMM_DATE,
               P_COMM_DATE,
               P_COMM_DATE,
               '01',
               '1',
               '3',
               NULL,
               P_PRO_PRODUCT_CD,
               P_TERM,
               P_PAY_MODE_CD,
               P_POLICY_INSTALLMENT,
               P_PREMIUM,
               0,
               0,
               0,
               0,
               0,
               P_TOTAL_YEARLY_PREMIUM,
               P_PREMIUM,
               NULL,
               NULL,
               P_AGENT_ID,
               1,
               P_COMM_DATE,
               2,
               P_NEXT_DUE_DATE,
               '09',
               P_USER,
               SYSDATE,
               P_OFFICE_CD,
               P_COMM_DATE,
               '0',
               0,
               0,
               0,
               0,
               P_DO_GID,
               P_OFFICE_CD,
               P_DM_GID,
               P_COMM_DATE,
               '0',
               NULL,
               NULL,
               NULL,
               NULL,
               P_SERVICING_OFFICE,
               '01',
               '1',
               P_PROJECT_CD || P_PRO_PRODUCT_CD,
               P_INS_TP_CD);


   INSERT INTO INS_P_PERSONAL (PGID,
                               PARTY_CD,
                               PARTY_ID,
                               SL_NO,
                               PARTY_NAME,
                               SEX_CD,
                               AGE_DOCU_CD,
                               I_USR,
                               I_DT)
     VALUES   (V_PGID,
               '03',
               V_PGID || '03' || '1',
               1,
               P_PRO_PARTY_NAME,
               '1',
               '01',
               P_USER,
               SYSDATE);

   INSERT INTO INS_P_ADDRESS (PGID,
                              PARTY_CD,
                              PARTY_ID,
                              P_ADDRESS_1,
                              P_ADDRESS_2,
                              T_ADDRESS,
                              I_USR,
                              I_DT)
     VALUES   (V_PGID,
               '03',
               V_PGID || '03' || '1',
               'Please Update Address',
               'Please Update Address',
               'Please Update Address',
               P_USER,
               SYSDATE);

   INSERT INTO INS_P_BASIC (PGID,
                            PRODUCT_CD,
                            AGE,
                            TERM,
                            PAY_MODE_CD,
                            OPTION_CD,
                            I_USR,
                            I_DT,
                            EXPECTED_PREMIUM,
                            INSTALLMENT_PREMIUM,
                            SUM_ASSURED)
     VALUES   (V_PGID,
               P_PRO_PRODUCT_CD,
               18,
               P_TERM,
               P_PAY_MODE_CD,
               '3',
               P_USER,
               SYSDATE,
               P_PREMIUM,
               P_PREMIUM,
               0);

   COMMIT;
   P_OUTPUT := NULL;
EXCEPTION
   WHEN EXP_SL_NO_GEN
   THEN
      ROLLBACK;
      P_OUTPUT := SQLERRM;
   WHEN EXP_PROPOSAL_NO_GEN
   THEN
      ROLLBACK;
      P_OUTPUT := V_ERROR;
   WHEN OTHERS
   THEN
      ROLLBACK;
      P_OUTPUT := SQLERRM;
END;
/


--
-- PRO_INS_TOTAL_AUTO_LOAN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_ins_total_auto_loan wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
304 19d
Nc9oqLlCjWwWLhFGXQgJI+oZOR8wgw33r0gVfHRAv7lezufT7OikB1caOzda3natvQXcK9C3
L5DfM/nHmOGsqEhdkZVPqgWdHV4CMslGcmTcIp+awrszzSuDTxBJBeJVrxqmqco4AfZTM9gs
1vDuJ3nOvqlYm4m3V2WH4boPMY+42yEIH85oiYUfoIEpWXPxQW/fb8bqBpeSP7zjywpBX743
9BAhsgFPRi3mmH9jhKGJXxNvSUMxNz2nhQQgUPJQPY3/Xf/EVxqnWfCeomJRZ7NXf62zqTek
a7ENy6bWam2z/CID4Jf7l/6ogpalOxXIVrKZ9vRbrgkTkZEm2TzI0vaONDi12eFBi7UtDJrQ
tFARC3FgNckGEmGoPYsw0MtN+X37GiTbuAXrlIsonYQnDT4=
/


--
-- PRO_LAPSE_NOTICE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_lapse_notice wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
22b9 838
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
/


--
-- PRO_LOAN_INT_AMOUNT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_loan_int_amount wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
2226 920
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
/


--
-- PRO_LOAN_RECOVERY_ADJ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_loan_recovery_adj wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
3847 d4e
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
/


--
-- PRO_LOAN_REC_UNDO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_loan_rec_undo wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
2c5a c7b
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
/


--
-- PRO_LOAN_RE_SCHEDULE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS."PRO_LOAN_RE_SCHEDULE" wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
1b0c 7a6
jBMqECDrDADZiax5I5teI8gH/iwwg+2Tea5d3y+5Fz+V5yaDTOdo4eoiaI23WeBKWjFXMm4C
c47M0dONfcxScWP5+EqG19SWt4ri9XlGyvZyehzQF0EIVgKOf67F+u5LyFH/Ntn2+h5lvJWz
XywV0qamGEXObhtQJAwbhrobcu+Cusky0ZIxNKNxx75BCvLRByrpYxjy7goRqr8DWwPWoHfT
2Xuh2R7yp8+vx1xJWQjLJi9YLcSCYYeJ/CEvtZM7nvmzcGJ15ZHlK8v/fKfvSIYavgbxnOWn
2u5XBt/c1NLK0JXxDHHpea8IlXlN8HAmpmETkfQFFgJZTldiuHrXDJXCWZj3YKHDn/IY2ssf
UwGo6yfu+yUwoFMeOtdLEuMhDpZIhGyUxDPZbyd2xS+7LSM016G6uO8wYVMoFxNISbHL2tcC
x+h+AsHIpXvcOWbWlOmn1FljZiQNGnkvp1Z59umNCn/251L+jpzLhTztYr3IbprVukgdUSiD
cp4aU5+q0emv0uBhp8PmgIXlh6FyGmfx9dZiQt/QjzS3uesN4GWgDtm3IbFTMkdleNjXh99y
KrVui6NjXYjQlFbmvG24UKjRAI98aQztHlsB7WMNU64hI0fgdP3Ka6HKFb17E0wBJDUNh8je
VQ6Q0Wp8vuPKD8l8AZ98gHxYT67JYaPViWktq6/Pbw1LTI+IKo62w6EY5IPTOukVh3h6ueNN
RPcM/NHdqXIH57FcyxDcyDiifIN8XzO+aiHiFingEzlf0vCOmUWHrxU5FJPh0wnbBt9wO91V
YoM3+1WH3uL1pobZo41D9MuBM3uMsIN4F0g7lYOcKQhfw5GL10+HHuwFjiZTvPKTxz9+jFCg
DD+fKF6/n5+mukH7LIwdxCarna0SEWLSfsTEXz9pdW9se+FEG7tJWgEAQi0Ur7j6PXm9XmbF
W4qhfOnT4io0iiITorifSJt6rAxzwDeWH1d7j6dYtz0/AC3g077ax1m7X91DOOWiVcwkvPz4
CmH/B4QShwhYR8iTGXJNVTgxU1M0GsnR0aqttOAQD51amOv9/EVYp1RAwjNdPWJysfagwjUy
cz3BUw2gY+f1+nO46Tod3OfFZVy2LEGNNIB5Yp7iP4RvRGDwg0MzNoxgRJ+yHXJ5pEdG0skD
A/m3RDy5yEWREKw6qYxqE5UH1cYh9KYEQQ6/3kwgSo9+IsaaXSOR6DSCOr6+A6Q6PfAlwu1g
RkFSP7joxnfUyRtAYq5EuE/j5Xury4k1qNs8XnoEgvzsCtr/x9B95uBXvm7u1HIWsdrQ6Heo
QZszUw/Lu5x/kRv4Eywuq4NM7zzMORU/kwDJygHviokFNXBG99NlMbVC0RL3MRl6+B3/AUfd
tdJxVhxh8b4yNc493exAc8WIg39HsSIDEn6kTo4F96fYakPQ9AVX6UWAQMPNILBKFoI+Vb9F
xyoCa2RvRo9n8OjftCy9TIE59XDOqEr2q1HIuSWAHea5IzRC+mNlxApMZNleEElKRwJX4WQk
Zl2oituSxQzFjvG//YIuq1XnJeUGG1xInVPtuhQupH9p/XjJJLoN5+hi43DYavV87RnDqneR
SCLeIPUsFqbCc1ke5YmSKCuPVJFY6/RF+yDQYpMrUtiG6PsYReJJmyCCtNM4oUm7OmdV+01v
bjyyz9/OEKY7riEGEtuviakOXYV2do4UzSyJ6Ndj2961KAmK0Ggf7dKRIvRweBWrrT+W/YuS
B/FBgB6q3co+O5enOItGcaqdGeSEOUJUv0AiOAVOt4pD7tV6AM/WmhOL1Xq85Dqxx04z5Cg0
39CWqnhk15z0Xkw6EEeZTM/Sj6RlYl3mAxwKIPWMUYBi+TIrCa7nW6rP1mSWpdjqEBI3xrGL
7js3xLA5ywHHCSIiKg+8JHgHybNvD8pBVoCp2Zpl0UPhedm30CRzmZRch5w=
/


--
-- PRO_LOAN_RE_SCHEDULE_NEW  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_loan_re_schedule_new wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
261a 8ae
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
1k/HeqPSph+dGkYlPrFibST5pSj8RZ+J
/


--
-- PRO_LOAN_SCHEDULE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_loan_schedule wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
de0 4c4
DHz0idcIeKJljX2atlRx/Bujarwwg5DqTCDrfI5DrZ0GvA5s2B48m9QE8RNT9kYLB9s+Hl7D
LRXI6JSUQEagLHLXnCSbLckDdw1t0HLtIrzBPPC27uvKDBbke4pO+HMzqLVzzUi/+DCdHbH7
qVcXrKVumVDvXUO6Wd89FPQLK+ShPH6jjJqXLllJOfv0XZnnL1U43Vb0dEQsxlAOLqvRwC1H
hEHy32bzHXnxRnElRujTx46InIBaoxG35wiRrxEchX/CEaD692Mh+/Z3dvbxztXxR/Z2LtOz
4eHjWcVuhq04o3CxQvxkS2Z8iSLHQemZdF28/tG6BJDPZxQ7F3OjBAvDdIE000TQ46ztwYmX
VkGj48BqJz4cB6cZWUjfT900oXzc5oesvQvzYi3tV3R3rIGGGsjst4HbAijquDip/eA5ao+8
LQ6xqJYRGJySW4DyiIFtNtUyTN8qy5fH0joMayg1AIcbZsKR4rHh9soP6k1XvNWZao3fqr5/
I4brU6WJjCu4Z5yP+rfP9O6sI+YGRhjY/DW9okKpEmTEBNGUj+/hdhJCErvP1xiQukN/N5ko
GTeuhG72/hjHddcS2y3nQOnFJ/O0GrH3ZzmJ1eUq/h2J0LQo5yjsgAD8qwUyq+57XF+rGwJQ
J4zpugDEuhPq9PaboApx61OPYXPj8UyJGPwvh65fe0akJ/RMG1YjUHToXhKh8HDm20Xf0kky
2xTnm1q4vvJtLvxheDdQCstQSCRDa0SIOCcFb2Tea7zgGIUuBQwBNZAVRy26dcUcHQWsdr8x
VGRcjM1T77wexw9e4cnqxoZPWMyrJGENHqAAcbRCn4NesJx5y4z9xctziqC6UXO9OAO42r1u
kwKSJvyoHQnSuvyT8roWWa9ZLkkav8c87RR2rgrGa+8wT9fXLX3wZNfxmIxqzoSPMCnIjaRF
jbk8XHrenI+PfMVOlG1Lf1+HkeV8P1y6Jpzbt2Rx4x+YXWylZyMbIy5UYF7kj+XiZd3JKkCG
dTUNzdP9NvB3wl70HVP84Xp8WEglBtzlvOWeB46aIuXlEPPpOEOolyWLq1Bxp7NsSRNz72h5
tblwEqq0eSC1r9BVarlLcwPWi4AlvXoANZIC7uxNvmiJIqCjvzEtRIMiPru0QLXXEdK4tCxw
taQlix+0MpS5wfn7VZq9Au/zX2LjtYiGOGhX82H9lprkW4dF/SY=
/


--
-- PRO_MOBILE_BANK_RECONCILE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_mobile_bank_reconcile (
   p_trans_id       VARCHAR2,
   p_i_usr          VARCHAR2,
   p_i_dt           DATE,
   p_output     OUT VARCHAR2
)
IS
   v_collection_mst_id   VARCHAR2 (30);
   v_collection_for      CHAR (1);
   v_count               NUMBER (2);
BEGIN
   FOR i
   IN (SELECT   m.trans_id,
                m.channel_cd,
                m.partner_code,
                d.trans_dt,
                d.collection_for_id,
                d.partner_transid,
                d.collection_amt,
                d.collection_id,
                d.partner_invoice_no,
                d.from_account_no
         FROM   acc_mobile_bank_reconcile_dtl d,
                acc_mobile_bank_reconcile_mst m
        WHERE   d.trans_id = m.trans_id 
          AND   m.trans_id = p_trans_id
          AND   NVL(m.recon_complete_st, '0') = '0'
                AND NOT EXISTS
                      (SELECT   1
                         FROM   api_ins_collection@DBL_APICLOUDDB
                        WHERE       collection_for_id = d.collection_for_id
                                AND partner_transid = d.partner_transid
                                AND partner_code = m.partner_code))
   LOOP
      BEGIN
         SELECT   TO_CHAR (MAX (TO_NUMBER (m.collection_mst_id))),
                  MAX (m.collection_for)
           INTO   v_collection_mst_id, v_collection_for
           FROM   api_ins_collection_mst@DBL_APICLOUDDB M
          WHERE   m.collection_for_id = i.collection_for_id
                  AND NOT EXISTS
                        (SELECT   1
                           FROM   api_ins_collection@DBL_APICLOUDDB C
                          WHERE   c.collection_mst_id = m.collection_mst_id);
      EXCEPTION
         WHEN OTHERS
         THEN
            v_collection_mst_id := NULL;
      END;

      IF v_collection_mst_id IS NOT NULL
      THEN
         SELECT   COUNT (1)
           INTO   v_count
           FROM   api_ins_collection@DBL_APICLOUDDB
          WHERE       partner_transid = i.partner_transid
                  AND collection_for_id = i.collection_for_id
                  AND partner_code = i.partner_code;

         IF v_count = 0
         THEN
            INSERT INTO api_ins_collection@DBL_APICLOUDDB (
                                                              collection_for,
                                                              collection_for_id,
                                                              collection_id,
                                                              collection_date,
                                                              collection_amt,
                                                              partner_invoice_no,
                                                              i_usr,
                                                              i_dt,
                                                              partner_code,
                                                              collection_status,
                                                              partner_transid,
                                                              collection_mst_id
                       )
              VALUES   (v_collection_for,
                        i.collection_for_id,
                        i.collection_id,
                        TO_CHAR (i.trans_dt, 'RRRR-MM-DD'), --TRUNC (i.trans_dt),
                        i.collection_amt,
                        i.partner_invoice_no,
                        i.from_account_no,
                        i.trans_dt,
                        i.partner_code,
                        '0',
                        i.partner_transid,
                        v_collection_mst_id);

            UPDATE   acc_mobile_bank_reconcile_mst
               SET   recon_complete_st = '1'
             WHERE   trans_id = p_trans_id;
            
            commit;
            pro_missing_collection@DBL_APICLOUDDB;
         END IF;
      END IF;
   END LOOP;
EXCEPTION
   WHEN OTHERS THEN
    ROLLBACK;
    p_output := SQLERRM;
END;
/


--
-- PRO_OBJECT_UI_NM  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_object_ui_nm wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
5a1 24c
XfuzHWv/hqI0D1h1nyA8OVCJEGAwg43Dr9xGfC+BaGR1bZPfqHZ6RTGEN9F3ZwWJwpgUGy4h
HCGzKmC1mm9UFhXRtOumIIvteF5gWhz3U4k2Ip3cktLSM5vkO6qHgcbaMOemRovuHfSJSuDO
xxb21kZLgsXG5mmnNkwlO+U2NY9qh5zDmdgJBKSH5Ru0C4hjVBkqzm7GAWAb48bOKlDhAhRr
RyfRWsmFqOgCUUc2V0s0EdseE5akveWkPrnhe9devkpn+EJJQrnhNCsCAOlcfeOCybrTKy4f
NF1H18AsK9AKKlmCspOQ2JVQYI9mEffe1EmzSiTauzko+nEBxLKtIqyc9wD6PN/ijB46aqOZ
zXHT2hONWoee59XVMn9ca0vDuA7FKk63Rj7ZyZZiYqlSRNhHiy5hnGrAmaG+ijo42laYOXqT
zcjTTih43+F4/XJo4UcGx1QoGqG+36TGUtPkck6FwWkeT8C3h3P0Mh2oq2EOIjidAn4f+OlA
QGET33RGRnPrOfcLokZRbg0URzB3fytUuzDelxZO5T1CAfpVIB5hfntdlYE8qL1teHidf9ps
gg==
/


--
-- PRO_OFFICE_DESH_BOARD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_office_desh_board wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
47bb 8b2
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
+2Qw53y1by9skJgV4A07sRToKWootaaNS0QU
/


--
-- PRO_OFF_MONTHS_SETUP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_off_months_setup wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
59e 278
qY2ic3XiZxTD3l2T7zMbnqd8C+Ywg43DLdxqfC8B/+owNXljxeHUYKQJweZibJ9LkOG3SS+Z
jjU6qtGfg13jur2uLbtVTpi/H3ijUhajsopO9rszZGS5ELVSMPifmpYHT3KRQXxx8F4BPldX
h4/cWmE9MqqJQWaxM743y7x+aIJdgz3ygzsH2WEZqbkL+bSIHp7Zw/aT97rKqBZmqFCj3m8r
H4ND7CDHEJxWdXyHXbnbbvauGQEXFDYlXoLTq5xAHn7ek8I3EqhJkwqBtE9WCKnyJhspQ8Ko
u1N0w91igj6NWXw4YtB1DpDKRqDFCTBfAntnL2MrgWm/0IaNZY90tGE4QN0sxKlqrCVbWzwL
JOdXnBlcvgqLG+kQYSoM35hYYnwXn9ptOMGJQnojV6YbYt24lne0Z8LjLXX1Iayk2UvX3DAw
BlBUa12a4VLgjWqI+kwmoxSgMCFSMoM9JFVDMBMrPYj2Gy40dIxM/Km8rcx+mlGCspcbrVIs
+R7G3Rt+XcutRXV+oq1zMgKv/WK8/VwyFS7RY676JwBr+lGlpTRfj+5Pyvxpw7RJhuWslJzb
QBpKDhKmwkZ7HuuUPGuyO4vONGsWTmnuv/AmfbM9lquq5nI=
/


--
-- PRO_PAR_COLL_DUE_CALC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_par_coll_due_calc wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
5d33 11ba
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
2/OkXoQ35uo
G0CEssLPwUGTeHzxfwDEzv0TrriGQVkNPFFKBM08ampFdbRNYcnuobt9AJcLybHbaDoDa1gM
6tSL1zpWvB9GSY1SHSjRpPfochNbA8VCiX6pT3dLIarU+7XKsYlN61p9lzn1u5eJzvPcw230
00Kzw7EWgPfx/SdKz7QcKr7WXxxJMCnR64aHvBiFSGaTuyBL7ZTreWD3RimjB89DoXoiZg8s
Ow+YiwnUkTwHE8yRt6ntI2jQ1S+bGRixXCM0JnHSvbCFgbi6Ulo1sxgFVegwFQN8DJ4be955
U989i8uczXUc6wE0b1UGsYGlSW1mZKE0IdepELC4j4bhwQNwiodJdTEiNor03nZBgIlA7R7m
IVR4vesnScAgh4Ji1fFxHzpiWCZQN956e0Zj95qHtQGu6irnmn+buq1Pxs5VekK6dym6wedF
6UBk5VsoIoNXgsdnmV8ZaZLq/Qy1Vvw2iDFUEwf7GRFMV/lF1xgvGFTvUZogQ4xlgrOTA/zM
irHECZIZcRYn0ma5bfttSDZoOsLg1dT5LEw6dz9judyks9xV/oc6Do3UQ/JUV9VI2yrJQ/cJ
FiPutyvnx4Jq2HrZl8Eab6zlP9oDwlIitxeAoy2F5cmDjeCT0RtIyLbItYZEIvQx1sjjUtTM
HCTkQ53paXNy
/


--
-- PRO_PENDING_GROUP_BONUS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_pending_group_bonus wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
1642 745
RNKCGt/JJUMCgjUVj0Uq84KiAfgwgztUDCBo3y+5k52snOBjYBmDoa4eSKY720yZyKKN8W6K
9Gcs5+GOhwttdp7Oxr9gGhqogUvgiQeRLj+CbsGACWOOf66r+jFOgVFBtSOSTh7rH4FDIzoz
2D+dehD4BzocC9jDUqcKITdP3vu1S7dWXKPDfKRjvhiXZV5CXCAq/MaScZtp2Y2wKxiXkBoR
oPX6AWwYFgVmGPJcWMXbCgliGBhjLpVDyjME+s6o8bvXxZwJj+URJ0X8RIejQv/dMo2ATz01
ji5jFNA9k6sM8vdjCJNkfvgyQSLolb1pOzX+o4RvXA3FjCGzJVcYGySp9/mWN6/bUT4nyfDz
G8VKWBhitKmzqrsziqe55bLVjMf1hTCdc1oDQOmtzACG73BN9mOOobaxxdx+NQDtpKcmadcB
SJj8XWEnm27ZTm83w3xvQuLxTYtkvTNnxQAUwq4d8k9jQw6Qe7Yk0Qv2gIA5scYJc9EKn+Hr
XMNcUEb6wiA2EQFmewpxFG4a4KNBpmJCkB5924CVgWuW3baxApdDdGCGMMzZA/IRa+BlI6Jo
Z7vy5K5r8N0fV5lzB4UYF3rik8OrHN74Yf18bVbu/w12cItKCV2KzB7NEb18I4HrHVunHjKG
dz+PDdz2wxRV3CPgchjGR7F6b58MN227OuXGxII4nTl/e6Veow5o8+GpRuDhqZHpBq9lqJfc
7fTnd5ZOKLZxtnSzWm2jWbg8phGMhjPf2tKmpA7WMxCuYn6wWmizKdYIMTlhx/6kdwhRb569
nDo9n4/p2ErIeeJ83zWFxeZ2zh+bqY3Aw4D9+zUQctpatGkfJiBhMz48iohL/Z/GGVjttBS/
SlFZQgCghXwhVsGreQ1CWohibguK9HfwI+xc3PnlvuTXAWNonwAMVt9I3NhZdSWQxth2uIN1
wOl/DT13v1AJrb6nHtbrnLpV83aSVwT4fEsFiR+jjh2HfynslrHsT6UEEY06LYVQwsOO5Z2N
WfAuPnioTYB6fOmDg/tSQZQEz9sYWDVEioZBFHmJpfNtuyGTswQCxDf3HholhncuFjuptQNf
PSg0S79riPyD0VsY1npssrQP1XQ/L0gUXy4FEEokZGUx5Y4/F6ua7Jd4Y8cy8pwlJ8Y0+Pqv
B9Iwu2Kwu+oHansh6LcWzdGwmO0SnO1YUHtIw8lPcOmqc/voxMmlq5QwbekO9J+pEreVUEyg
BDJqdzU1/29hxFQF/T03INEKW4eqBmmGymh4obqvYpfsOwiJSeylbq4I9Z0LBXkfDMLcKCPx
VoMaLDFi3n+w+m+bmE8QRFeIHDm1bqMNQ3fr7NdyEaUK8NrRAzjSvxr6OCfeFozIs+HsjR4K
3ulsMYaNRcKA6gH//XAkjQ6/7zwDQCZi+PQNw8ILCMRvpfV52zSi0dJvzwdiNsCTGkpp7frP
8Zg3W4VzZuBSsxBR7t5Aq52AH8P+c4oGooOfx/pu/G7YBhnx7gsQiYS1rgxugjgEeR23fAYt
0fzuEf5v79APst3L9CkzEPio+LdjV3AkA5gFBaVzWTfXkatInHE8RRJVnNngeaBqLJ2c5slW
cmXzgM0py8Yh/QBWF0BCd5OujiMKSf4WYeZVL0//0eA4h2Ql9+Xo4Wt3vGNyX3D7mwQBsmgO
5FJcN7fB8p3DaP137A7w0dKGW7dOISearvZusGxv3Jv4g3zsIAftCtXgvs9URUCj6rthQilH
8AVhYLc9BFcHv0Ac8mH9PFbiSN6TZ0nZYQ9aDL9PhL/4ucHZ2UCNsW3F14CPm5v+sST5XAcz
1Xydh5axpAVLnB8rc6c3Z8u6+xL5pSxHloEh
/


--
-- PRO_PF_LOAN_SCHEDULE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_pf_loan_schedule wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
b9d 457
Z0hbtl6h+dfFrUZ3p4mxxecUCRgwg9crLiAFfHRVMZ2sAJXeVTwpUjcoSjshOY76t131AIiV
7DgdGA20PLqq5BYxUhSTUrMFRqY3bJv0LNAaJ6+ZCd+s3dm7wTNDEvjS5KUKc07NxvkIgd4o
UjamMgxC/6PUr7qYcY4TcWgUp8O8Q7JeYY72YdVmI1g04kSa92FHlC2R0heWrzC6fybA8sTb
4cBpq6E2X5wXrjsQt8KNW44ZFgzF7ICNX8sMLI+V8qAVKtdFpAbp7N3XzzGhsVHg1Cv1o+3V
eUskZgDb3czn8mTA7AOszoVJGt5KYBEMTZw7DvWHTRuwn9yS9qwlGNXv2OPKSgriIc//ykxg
1cC6fzsWvWwC4aTvdyWI419vSLjallW5o6VijoFFlU+okBTlJtcxVTmWOSFcKtNldWLJkJ5d
2NIpxGb8Si9ARg5cMaflPVPzWWLwFZ+OBjWACDaJEVT7LTScq79KLQSwRKSfxRq3k8f7lCO9
mVNFq/cPDGn/HhnoTbW71mwv6Ea0CjQOc8GjWbV+GA8LZUilEffoTjpGBcFpTtqQRTD7H7Yv
TpF7n1WeOs7/7Hy5XbMNvUeq9nhxFQaGh5BLIfAbf0oqXcOluEjlJturDxzni3jVXUiu35zr
wbbMLsrNI+FfumwGRHtoY6q7zFXVFL+GJcYs5E08VHExMOh9xZ9//8KoGCeEtH8ONetVO5kf
9t7V0G50mCJEf7k8NXSAxm3qI1cUw9O6uaIgTzSpcKXlDZWNZ9l4pjdzbVIYKCbgVyVcxj3g
ER6VOZobiTbOpP6u8TZ+hoHEt242bh6sgYba7KmUItvZu9eheF4vLw8s5rWNaxyPidHL9EBa
4wdbjuVsIqrTJBs178Y6Wmh6SXwKF6G13/IOT+momS5mMm+BESnTUHfJyss3sQvAgBIBduJ8
kbOOI8nQkQVxB+gxoawxxQsjF6glBcXOX4RXKyuKYZlj6Kd4h0wKOZ7LH1/63o5FwWruvhOk
T7xMbm54bPFuKo6YGzqjyKNcaKCyonDdLfTniL5V2+pBOyw/Is0scpexAOQQQIg07Tfk5vQv
utuRQ5vrJDpZbos=
/


--
-- PRO_POLICY_BONUS_CAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_bonus_cal (
   P_PGID                 IN     VARCHAR2,
   P_BONUS_YR             IN     NUMBER,
   P_BONUS_CD             IN     VARCHAR2,
   P_APPLICABLE_ON        IN     CHAR,
   P_NO_OF_ANF_LOAN_YR    IN     NUMBER,
   P_USR                  IN     VARCHAR2,
   P_IRG_BONUS_BAR_DATE   IN     DATE,
   P_OUTPUT                  OUT VARCHAR2,
   P_PROCESS_ST              OUT CHAR
)
IS
   CURSOR C_POLICY
   IS
      SELECT   PGID,
               SUM_ASSURED,
               FUN_PAIDUP_VALUE (PGID) Paidup_value,
               S.PRODUCT_CD,
               TERM,
               DECODE (
                  P.POLICY_TP_CD,
                  '10',
                  CASE
                     WHEN TO_DATE (
                             TO_CHAR (S.COMM_DATE, 'DD-MON')
                             || TO_CHAR (SYSDATE, 'RRRR'),
                             'DD-MM-RRRR'
                          ) > TRUNC (SYSDATE)
                     THEN
                        TO_DATE (
                           TO_CHAR (S.COMM_DATE, 'DD-MON')
                           || TO_CHAR (
                                 TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')) - 1
                              ),
                           'DD-MM-RRRR'
                        )
                     ELSE
                        TO_DATE (
                           TO_CHAR (S.COMM_DATE, 'DD-MON')
                           || TO_CHAR (SYSDATE, 'RRRR'),
                           'DD-MM-RRRR'
                        )
                  END,
                  ADD_MONTHS (LAST_PAID_DATE, (P_NO_OF_ANF_LOAN_YR * 12))
               )
                  LAST_PAID_DATE,
               DECODE (
                  TO_CHAR (S.COMM_DATE, 'DDMM'),
                  '2902',
                  TO_DATE ('28-FEB-' || TO_CHAR (S.COMM_DATE, 'RRRR'),
                           'DD-MON-RRRR'),
                  S.COMM_DATE
               )
                  COMM_DATE,
               P.POLICY_TP_CD,
               S.PAY_MODE_CD,
               S.LAST_PAID_INST_NO,
               S.MATURITY_DATE,
               S.POLICY_STATUS
        FROM   INS_P_SUMMERY S, INS_PRODUCT P
       WHERE   ( (P_PGID IS NULL AND POLICY_STATUS NOT IN ('02', '04', '10'))
                OR (P_PGID IS NOT NULL AND 1 = 1))
               AND PGID = NVL (P_PGID, PGID)
               AND ( (P_PGID IS NULL
                      AND P_BONUS_YR <=
                            TO_NUMBER(TO_CHAR (
                                         DECODE (
                                            P.POLICY_TP_CD,
                                            '10',
                                            TO_DATE (
                                               TO_CHAR (S.COMM_DATE,
                                                        'DD-MON')
                                               || TO_CHAR (P_BONUS_YR),
                                               'DD-MM-RRRR'
                                            ),
                                            ADD_MONTHS (
                                               LAST_PAID_DATE,
                                               (P_NO_OF_ANF_LOAN_YR * 12)
                                            )
                                         ),
                                         'RRRR'
                                      )))
                    OR (P_PGID IS NOT NULL AND 1 = 1))
               AND ( (P_PGID IS NULL
                      AND S.COMM_DATE <=
                            TO_DATE (
                               TO_CHAR (
                                  ADD_MONTHS (LAST_PAID_DATE,
                                              (P_NO_OF_ANF_LOAN_YR * 12)),
                                  'DD-MON'
                               )
                               || TO_CHAR (P_BONUS_YR),
                               'DD-MM-RRRR'
                            ))
                    OR (P_PGID IS NOT NULL AND 1 = 1))
               AND S.PRODUCT_CD = P.PRODUCT_CD;

   REC_C_POLICY                 C_POLICY%ROWTYPE;
   V_COUNTER                    NUMBER := 0;

   V_COUNT                      NUMBER := 0;

   V_UNAVAILABLE_BONUS          NUMBER := 0;

   V_BONUS_RATE                 INS_YR_BONUS.BONUS_RATE%TYPE;
   V_UNAVAILABLE_BONUS_RATE     NUMBER := 0;

   V_CAL_PARA                   INS_BONUS_TYPE.CAL_PARA%TYPE;
   V_CAL_METHOD                 INS_BONUS_TYPE.CAL_METHOD%TYPE;
   V_BONUS_AMOUNT               NUMBER;

   V_PRE_YR_BONUS_AMOUNT        INS_POLICY_BONUS.BONUS_AMT%TYPE;

   V_DEDUCT_BONUS_AMOUNT        INS_POLICY_BONUS.BONUS_AMT%TYPE := 0;
   V_RUNNING_AGE_BONUS_AMOUNT   NUMBER (10) := 0;
   V_PAID_BONUS_AMT             NUMBER (10);
   V_BONUS_NM                   INS_BONUS_TYPE.BONUS_NM%TYPE;
   V_COMPLETE_RECORD            NUMBER := 0;
   V_BON_CAL_MODE               VARCHAR2 (2);
   V_RUNNING_AGE                NUMBER (10);
   V_PRE_RUNNING_AGE_BONUS      NUMBER := 0;
   V_DIFF_TYPE                  INS_POL_BONUS_IRGLR_POLICY.DIFF_TYPE%TYPE;
   V_DIFF_DEP_ON_FR             INS_POL_BONUS_IRGLR_POLICY.DIFF_DEP_ON_FR%TYPE;
   V_DIFF_DEP_ON_TO             INS_POL_BONUS_IRGLR_POLICY.DIFF_DEP_ON_TO%TYPE;
   V_DURATION                   INS_POL_BONUS_IRGLR_POLICY.DURATION%TYPE;
   V_NO_OF_BONUS_YR             INS_POL_BONUS_IRGLR_POLICY.NO_OF_BONUS_YR%TYPE;
   V_IRREGUAL_PAID_INST         NUMBER (10) := 0;
   V_REGUAL_PAID_INST           NUMBER (10) := 0;
   V_REGUALR_BONUS_YEAR         NUMBER (10) := 0;
   V_REGUALR_PAID_AC_INST       NUMBER (10) := 0;
   V_IRRG_BONUS_YR              NUMBER (10) := 0;
   V_BONUS_YR_FROM              NUMBER (4);
   V_BONUS_YR_TO                NUMBER (4);
   V_TOTAL_RUNNING_AGE          NUMBER (10);
   V_ERROR_IRG                  CHAR (1) := '0';
   V_YR_WISE_BON                NUMBER := 0;
   V_CALCULATED_BONUS_YR        VARCHAR2 (20);
   V_REDUCE_YR                  NUMBER;
   V_POLICY_STATUS              VARCHAR2 (2);
   V_MAX_PAYMENT_DT             DATE;
   V_DOD                        DATE;
   V_DOD_TOT_RUNNING_AGE        NUMBER (10);
   V_SUM_ASSURED                NUMBER (10);
   v_paidup_value               NUMBER (15);
BEGIN
   IF P_BONUS_YR IS NOT NULL
   THEN
      SELECT   COUNT (1)
        INTO   V_COUNT
        FROM   INS_POL_BONUS_APPLICABLE
       WHERE       BONUS_YR = P_BONUS_YR
               AND BONUS_CD = P_BONUS_CD
               AND APPLICABLE_ON IN (P_APPLICABLE_ON, '6')
               AND STATUS = '1';

      V_BONUS_YR_FROM := P_BONUS_YR;
      V_BONUS_YR_TO := P_BONUS_YR;
   ELSE
      V_COUNT := 1;
   END IF;

   IF V_COUNT > 0
   THEN
      BEGIN
         SELECT   BONUS_NM
           INTO   V_BONUS_NM
           FROM   INS_BONUS_TYPE
          WHERE   BONUS_CD = P_BONUS_CD;
      EXCEPTION
         WHEN OTHERS
         THEN
            V_BONUS_NM := P_BONUS_CD;
      END;

      OPEN C_POLICY;

      LOOP
         FETCH C_POLICY INTO   REC_C_POLICY;

         EXIT WHEN C_POLICY%NOTFOUND;


         IF REC_C_POLICY.POLICY_STATUS = '03'
         THEN
            --ADD CODE --

            DECLARE
               v_payable_amt          NUMBER (15, 2);
               v_suspense_amt         NUMBER (15, 2);
               v_bonus_amt            NUMBER (15, 2);
               v_loan_amt             NUMBER (15, 2);
               v_interest_amt         NUMBER (15, 2);
               v_premium_amt          NUMBER (15, 2);
               v_late_fee             NUMBER (15, 2);
               v_cnt                  NUMBER (10) := 0;
               v_no_of_anf_instl      NUMBER (5) := 0;
               v_payable_no           clm_claim_payable_gen.payable_no%TYPE;
               v_account_no           clm_client_account.account_no%TYPE;
               v_bank_cd              clm_client_account.bank_cd%TYPE;
               v_br_cd                clm_client_account.br_cd%TYPE;
               v_br_address           clm_client_account.address%TYPE;
               v_paid_amt             clm_claim_payable_gen.net_payable_amt%TYPE;
               v_ded_amt              NUMBER (15, 2) := 0;
               v_anf_error            VARCHAR2 (1000);
               ---------------------
               v_loan_sl_no           VARCHAR2 (10);
               v_loan_reco_locking    NUMBER (1);
               v_loan_rec_loc_err     VARCHAR2 (100);
               v_source_tax           NUMBER (12, 2) := 0;
               v_source_tax_err       VARCHAR2 (200);
               v_prem_due_late_fee    NUMBER (12, 2) := 0;
               v_paid_prem_late_fee   NUMBER (12, 2) := 0;
               v_unadj_coll_amt       NUMBER (12, 2) := 0;
               v_tot_paid_amt         NUMBER (12, 2) := 0;

               v_no_of_anf_loan       NUMBER (5) := 0;
               v_no_of_anf_loan_yr    NUMBER (2) := 0;
               v_anf_loan_amount      NUMBER (12, 2) := 0;
               v_interest_amount      NUMBER (12, 2) := 0;
               v_alt_due_amount       clm_claim_appl.alt_due_amount%TYPE;
               ---Add by Musha on 15.07.2018
               v_extra_bonus_amt      NUMBER (15, 2) := 0;
               v_extra_bonus_error    VARCHAR2 (200);
               v_bonus_amt_temp       NUMBER (15, 2);

               CURSOR cur_paidup_policy
               IS
                  SELECT   s.pgid,
                           s.maturity_date,
                           s.sum_assured,
                           s.product_cd,
                           s.comm_date,
                           s.age age_entry,
                           s.age
                           + ROUND ( (s.maturity_date - s.comm_date) / 365)
                              age_maturity,
                           s.last_paid_inst_no,
                           s.policy_installment,
                           s.term,
                           d.sl_no,
                           d.ben_party_cd,
                           d.payment_type,
                           d.installment_type,
                           s.last_paid_inst_no
                           / (s.policy_installment / s.term)
                              no_of_paid_year,
                           s.option_cd,
                           s.pay_mode_cd,
                           l.clm_cause_cd,
                           l.clm_detl_cd,
                           d.pay_basis_cd,
                           d.percentage
                    FROM   ins_p_summery s,
                           ins_product p,
                           clm_product_claim_detl d,
                           clm_product_claim_mst l
                   WHERE       s.product_cd = p.product_cd
                           AND s.product_cd = d.product_cd
                           AND NVL (s.active_status, '1') = '1'
                           AND p.policy_tp_cd <> '02'
                           AND (s.policy_status = '03'
                                OR (s.policy_status = '01'
                                    AND s.maturity_date <=
                                          TRUNC (ADD_MONTHS (SYSDATE, 1))
                                    AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) =
                                          '0')
                                OR (s.policy_status = '01'
                                    AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) =
                                          '2'))
                           --AND s.paid_up_status       = 1
                           AND NVL (p.paidup_age, 0) <=
                                 ( (s.last_paid_date - s.comm_date) / 365)
                                 + 1
                           AND d.clm_cause_cd = '06'
                           AND s.pgid = REC_C_POLICY.PGID
                           AND TO_NUMBER (s.term) <> 0
                           AND s.product_cd = REC_C_POLICY.PRODUCT_CD
                           AND fun_policy_surrendered (s.pgid) = '0'
                           AND d.product_cd = l.product_cd
                           AND d.clm_cause_cd = l.clm_cause_cd
                           AND d.clm_detl_cd = l.clm_detl_cd
                           AND d.ben_party_cd = l.ben_party_cd
                           AND l.setup_id = d.setup_id
                           AND s.policy_status =
                                 NVL (l.policy_status, s.policy_status)
                           AND s.maturity_date = REC_C_POLICY.MATURITY_DATE
                           ----add tazmul
                           AND (NVL (l.app_req, '0') = '0'
                                OR (l.app_req = '1'
                                    AND EXISTS
                                          (SELECT   1
                                             FROM   clm_claim_appl a
                                            WHERE   a.pgid = s.pgid
                                                    AND a.clm_cause_cd =
                                                          d.clm_cause_cd
                                                    AND a.clm_detl_cd =
                                                          d.clm_detl_cd
                                                    AND a.party_cd =
                                                          d.ben_party_cd
                                                    AND a.payable_dt =
                                                          REC_C_POLICY.MATURITY_DATE
                                                    AND a.apprv_status = '1')));
            BEGIN
               FOR j IN cur_paidup_policy
               LOOP
                  -----------Calculate previously paid amount-----------
                  BEGIN
                     SELECT   NVL (
                                 SUM(NVL (p.actual_payable_amt,
                                          p.gross_payable_amt)
                                     + NVL (actual_bonus_amt,
                                            NVL (p.bonus_payable, 0))),
                                 0
                              )
                       INTO   v_paid_amt
                       FROM   clm_claim_payable_gen p
                      WHERE   p.pgid = j.pgid
                              AND p.clm_cause_cd NOT IN ('04', '05');
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_paid_amt := 0;
                        NULL;
                  END;

                  BEGIN
                     ---Chekc deductable amount
                     pro_anf_loan_payable_info (
                        p_pgid                => p_pgid,
                        p_appl_date           => j.maturity_date,
                        p_no_of_anf_loan      => v_no_of_anf_loan,
                        p_no_of_anf_loan_yr   => v_no_of_anf_loan_yr,
                        p_anf_loan_amount     => v_anf_loan_amount,
                        p_interest_amount     => v_interest_amount,
                        p_error               => v_anf_error
                     );

                     v_no_of_anf_instl := NVL (v_no_of_anf_loan, 0);

                     IF j.pay_mode_cd = '01'
                     THEN
                        v_no_of_anf_instl := v_no_of_anf_instl / 1;
                     ELSIF j.pay_mode_cd = '02'
                     THEN
                        v_no_of_anf_instl := v_no_of_anf_instl / 2;
                     ELSIF j.pay_mode_cd = '03'
                     THEN
                        v_no_of_anf_instl := v_no_of_anf_instl / 4;
                     ELSIF j.pay_mode_cd = '04'
                     THEN
                        v_no_of_anf_instl := v_no_of_anf_instl / 12;
                     END IF;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        NULL;
                  END;

                  ---End of finding no of installment adjusted by ANF loan---

                  IF j.pay_basis_cd = '12'
                  THEN
                     BEGIN
                        SELECT   ROUND (
                                    (last_paid_inst_no * installment_premium),
                                    2
                                 )
                                    tot_paid_amt
                          INTO   v_tot_paid_amt
                          FROM   ins_p_summery
                         WHERE   pgid = j.pgid;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           NULL;
                     END;

                     v_paidup_value :=
                        (NVL (v_tot_paid_amt, 0) * NVL (j.percentage, 0))
                        / 100;
                  ELSE
                     v_paidup_value :=
                        ROUND( ( (j.sum_assured * j.no_of_paid_year) / j.term)
                              - NVL (v_paid_amt, 0));  ----Musha on 30.11.2015

                     IF v_paidup_value >=
                           v_anf_loan_amount + v_interest_amount
                     THEN
                        v_paidup_value :=
                           ROUND( ( (j.sum_assured
                                     * (j.no_of_paid_year + v_no_of_anf_instl))
                                   / j.term)
                                 - NVL (v_paid_amt, 0));
                     ELSE
                        v_no_of_anf_loan := 0;
                        v_no_of_anf_loan_yr := 0;
                        v_anf_loan_amount := 0;
                        v_interest_amount := 0;
                     END IF;
                  END IF;

                  -----------------------------------
                  ---Musha on 20.12.2015--
                  IF ( (j.option_cd IN ('1', '2')
                        AND NVL (v_no_of_anf_loan, 0) = 0)
                      OR (j.option_cd = '2' AND NVL (v_no_of_anf_loan, 0) > 0
                          AND (j.last_paid_inst_no
                               + NVL (v_no_of_anf_loan, 0)) <
                                j.policy_installment))
                  THEN
                     v_paidup_value := 0;
                  END IF;
               ------------------------------------




               END LOOP;
            EXCEPTION
               WHEN OTHERS
               THEN
                  v_paidup_value := 0;
            END;

            ---=================================================--

            V_SUM_ASSURED := v_paidup_value;
         ELSE
            V_SUM_ASSURED := REC_C_POLICY.SUM_ASSURED; ---NOT CHANGED CHANGE AFTER THIS WITH V_SUM_ASSURED
         END IF;



         IF P_APPLICABLE_ON = '1'
         THEN
            BEGIN
               SELECT   POLICY_STATUS
                 INTO   V_POLICY_STATUS
                 FROM   CLM_CLAIM_MST
                WHERE   PGID = REC_C_POLICY.PGID;
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_POLICY_STATUS := REC_C_POLICY.POLICY_STATUS;
            END;
         ELSE
            V_POLICY_STATUS := REC_C_POLICY.POLICY_STATUS;
         END IF;


         BEGIN
              SELECT   MAX (NEXT_DUE_DT)
                INTO   V_MAX_PAYMENT_DT
                FROM   INS_PREM_ACC_RECEIVABLE
               WHERE       PGID = REC_C_POLICY.PGID
                       AND PAY_STATUS = '1'
                       AND NVL (RETURN_ST, '0') = '0'
            GROUP BY   PGID;

            IF REC_C_POLICY.LAST_PAID_DATE < V_MAX_PAYMENT_DT
            THEN
               V_IRREGUAL_PAID_INST := 0;
            ELSE
               SELECT   DIFF_TYPE,
                        DIFF_DEP_ON_FR,
                        DIFF_DEP_ON_TO,
                        DURATION,
                        NO_OF_BONUS_YR
                 INTO   V_DIFF_TYPE,
                        V_DIFF_DEP_ON_FR,
                        V_DIFF_DEP_ON_TO,
                        V_DURATION,
                        V_NO_OF_BONUS_YR
                 FROM   INS_POL_BONUS_IRGLR_POLICY
                WHERE       BONUS_CD = P_BONUS_CD
                        AND PAYMENT_TYPE = '1'
                        AND PAY_MODE_CD = REC_C_POLICY.PAY_MODE_CD
                        AND APPLICABLE_ON IN (P_APPLICABLE_ON, '6');

               SELECT   COUNT (1)
                 INTO   V_IRREGUAL_PAID_INST
                 FROM   INS_PREM_ACC_RECEIVABLE
                WHERE   PGID = REC_C_POLICY.PGID
                        AND NVL (RETURN_ST, '0') = '0'
                        AND PAYMENT_DATE >
                              CASE
                                 WHEN V_DIFF_TYPE = '1'
                                 THEN
                                    (P_IRG_BONUS_BAR_DATE - V_DURATION)
                                 WHEN V_DIFF_TYPE = '2'
                                 THEN
                                    ADD_MONTHS (P_IRG_BONUS_BAR_DATE,
                                                -V_DURATION)
                                 ELSE
                                    ADD_MONTHS (P_IRG_BONUS_BAR_DATE,
                                                - (V_DURATION * 12))
                              END;
            END IF;

            IF V_IRREGUAL_PAID_INST > 1
            THEN
               V_REGUAL_PAID_INST :=
                  REC_C_POLICY.LAST_PAID_INST_NO - V_IRREGUAL_PAID_INST;

               SELECT   DECODE (REC_C_POLICY.PAY_MODE_CD,
                                '01', V_REGUAL_PAID_INST / 1,
                                '02', FLOOR (V_REGUAL_PAID_INST / 2),
                                '03', FLOOR (V_REGUAL_PAID_INST / 4),
                                '04', FLOOR (V_REGUAL_PAID_INST / 12),
                                V_REGUAL_PAID_INST / 1),
                        DECODE (REC_C_POLICY.PAY_MODE_CD,
                                '01', (V_REGUAL_PAID_INST / 1) * 1,
                                '02', FLOOR (V_REGUAL_PAID_INST / 2) * 2,
                                '03', FLOOR (V_REGUAL_PAID_INST / 4) * 4,
                                '04', FLOOR (V_REGUAL_PAID_INST / 12) * 12,
                                (V_REGUAL_PAID_INST / 1) * 1)
                 INTO   V_REGUALR_BONUS_YEAR, V_REGUALR_PAID_AC_INST
                 FROM   DUAL;

               SELECT   DECODE (
                           REC_C_POLICY.PAY_MODE_CD,
                           '01',
                           ( (REC_C_POLICY.LAST_PAID_INST_NO
                              - V_REGUALR_PAID_AC_INST)
                            / 1),
                           '02',
                           FLOOR( (REC_C_POLICY.LAST_PAID_INST_NO
                                   - V_REGUALR_PAID_AC_INST)
                                 / 2),
                           '03',
                           FLOOR( (REC_C_POLICY.LAST_PAID_INST_NO
                                   - V_REGUALR_PAID_AC_INST)
                                 / 4),
                           '04',
                           FLOOR( (REC_C_POLICY.LAST_PAID_INST_NO
                                   - V_REGUALR_PAID_AC_INST)
                                 / 12),
                           ( (REC_C_POLICY.LAST_PAID_INST_NO
                              - V_REGUALR_PAID_AC_INST)
                            / 1)
                        )
                 INTO   V_IRRG_BONUS_YR
                 FROM   DUAL;

               IF V_IRRG_BONUS_YR >= V_NO_OF_BONUS_YR
               THEN
                  V_BONUS_YR_FROM :=
                     TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'));
                  V_BONUS_YR_TO :=
                     (  TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'))
                      + V_REGUALR_BONUS_YEAR
                      - 1);
                  V_TOTAL_RUNNING_AGE :=
                     ( (V_BONUS_YR_TO - V_BONUS_YR_FROM) + 1) * 12;
               ELSE
                  V_BONUS_YR_FROM :=
                     TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'));
                  V_BONUS_YR_TO :=
                     (  TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'))
                      + V_REGUALR_BONUS_YEAR
                      - 1);
                  V_TOTAL_RUNNING_AGE :=
                     ( (V_BONUS_YR_TO - V_BONUS_YR_FROM) + 1) * 12;
               END IF;

               IF V_TOTAL_RUNNING_AGE > REC_C_POLICY.TERM * 12
               THEN
                  V_TOTAL_RUNNING_AGE := TO_NUMBER (REC_C_POLICY.TERM) * 12;
                  V_BONUS_YR_TO :=
                     (V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12)) - 1;
               END IF;
            ELSE
               V_BONUS_YR_FROM :=
                  TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'));

               IF REC_C_POLICY.POLICY_TP_CD <> 10
               THEN
                  SELECT   MONTHS_BETWEEN (
                              ADD_MONTHS (REC_C_POLICY.LAST_PAID_DATE,
                                          DECODE (REC_C_POLICY.PAY_MODE_CD,
                                                  '01',
                                                  12,
                                                  '02',
                                                  6,
                                                  '03',
                                                  3,
                                                  '04',
                                                  1,
                                                  '05',
                                                  12)),
                              REC_C_POLICY.COMM_DATE
                           )
                    INTO   V_TOTAL_RUNNING_AGE
                    FROM   DUAL;

                  V_BONUS_YR_TO :=
                     (V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12)) - 1;
               ELSE
                  V_BONUS_YR_TO :=
                     TO_NUMBER (
                        TO_CHAR (REC_C_POLICY.LAST_PAID_DATE, 'RRRR')
                     );
                  V_TOTAL_RUNNING_AGE :=
                     ( (V_BONUS_YR_TO - V_BONUS_YR_FROM) + 1) * 12;

                  IF V_TOTAL_RUNNING_AGE > REC_C_POLICY.TERM * 12
                  THEN
                     V_TOTAL_RUNNING_AGE := TO_NUMBER (REC_C_POLICY.TERM) * 12;
                     V_BONUS_YR_TO :=
                        (V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12))
                        - 1;
                  END IF;
               END IF;
            END IF;

            V_ERROR_IRG := 0;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               V_BONUS_YR_FROM :=
                  TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'));

               IF REC_C_POLICY.POLICY_TP_CD <> 10
               THEN
                  SELECT   MONTHS_BETWEEN (
                              ADD_MONTHS (REC_C_POLICY.LAST_PAID_DATE,
                                          DECODE (REC_C_POLICY.PAY_MODE_CD,
                                                  '01',
                                                  12,
                                                  '02',
                                                  6,
                                                  '03',
                                                  3,
                                                  '04',
                                                  1,
                                                  '05',
                                                  12)),
                              REC_C_POLICY.COMM_DATE
                           )
                    INTO   V_TOTAL_RUNNING_AGE
                    FROM   DUAL;

                  V_BONUS_YR_TO :=
                     V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12) - 1;
               ELSE
                  V_BONUS_YR_TO :=
                     TO_NUMBER (
                        TO_CHAR (REC_C_POLICY.LAST_PAID_DATE, 'RRRR')
                     );
                  V_TOTAL_RUNNING_AGE :=
                     ( (V_BONUS_YR_TO - V_BONUS_YR_FROM) + 1) * 12;

                  IF V_TOTAL_RUNNING_AGE > REC_C_POLICY.TERM * 12
                  THEN
                     V_TOTAL_RUNNING_AGE := TO_NUMBER (REC_C_POLICY.TERM) * 12;
                     V_BONUS_YR_TO :=
                        (V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12))
                        - 1;
                  END IF;
               END IF;

               V_ERROR_IRG := 0;
            WHEN OTHERS
            THEN
               V_ERROR_IRG := 1;
         END;

         IF P_APPLICABLE_ON <> 1
         THEN
            NULL;
         ELSE
            BEGIN
               SELECT   DOD
                 INTO   V_DOD
                 FROM   CLM_APPLICATION
                WHERE   PGID = P_PGID;

               V_DOD_TOT_RUNNING_AGE :=
                  FLOOR (MONTHS_BETWEEN (V_DOD, REC_C_POLICY.COMM_DATE));

               IF V_TOTAL_RUNNING_AGE <= V_DOD_TOT_RUNNING_AGE
               THEN
                  V_TOTAL_RUNNING_AGE := V_TOTAL_RUNNING_AGE;
               ELSE
                  V_TOTAL_RUNNING_AGE := V_DOD_TOT_RUNNING_AGE;
               END IF;


               V_BONUS_YR_TO :=
                  (V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12)) - 1;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END IF;


         IF V_ERROR_IRG = '0'
         THEN
            V_TOTAL_RUNNING_AGE := FLOOR ( (V_TOTAL_RUNNING_AGE) / 12);


            IF V_BONUS_YR_FROM < 1997
            THEN
               V_REDUCE_YR := (1997 - V_BONUS_YR_FROM);
            ELSE
               V_REDUCE_YR := 0;
            END IF;

            FOR I IN V_BONUS_YR_FROM .. V_BONUS_YR_TO
            LOOP
               IF (P_BONUS_CD = '03' AND I = V_BONUS_YR_TO)
                  OR P_BONUS_CD != '03'
               THEN
                  IF ( (P_BONUS_YR IS NOT NULL AND I = P_BONUS_YR)
                      OR (P_BONUS_YR IS NULL))
                  THEN
                     SELECT   COUNT (1)
                       INTO   V_YR_WISE_BON
                       FROM   INS_POLICY_BONUS
                      WHERE       PGID = REC_C_POLICY.PGID
                              AND BONUS_RECEIVING_YR = I
                              AND BONUS_CD = P_BONUS_CD;

                     IF V_YR_WISE_BON = 0
                     THEN
                        SELECT   COUNT (1)
                          INTO   V_COUNT
                          FROM   INS_POL_BONUS_APPLICABLE
                         WHERE       BONUS_YR = I
                                 AND BONUS_CD = P_BONUS_CD
                                 AND APPLICABLE_ON IN (P_APPLICABLE_ON, '6')
                                 AND STATUS = '1'
                                 AND ( (STATUS_DEP = '1'
                                        AND STATUS_CD = V_POLICY_STATUS)
                                      OR (STATUS_DEP = '0'));


                        IF V_COUNT > 0
                        THEN
                           BEGIN
                              SELECT   R.BONUS_RATE,
                                       T.CAL_PARA,
                                       T.CAL_METHOD,
                                       R.BON_CAL_MODE
                                INTO   V_BONUS_RATE,
                                       V_CAL_PARA,
                                       V_CAL_METHOD,
                                       V_BON_CAL_MODE
                                FROM   INS_YR_BONUS R, INS_BONUS_TYPE T
                               WHERE   ( (P_BONUS_CD = '01'
                                          AND R.BONUS_YR = I)
                                        OR (P_BONUS_CD = '02'
                                            AND R.BONUS_YR = I)
                                        OR (P_BONUS_CD = '03'
                                            AND R.BONUS_YR = V_BONUS_YR_TO))
                                       AND R.BONUS_CD = P_BONUS_CD
                                       AND R.PRODUCT_CD =
                                             REC_C_POLICY.PRODUCT_CD
                                       AND REC_C_POLICY.TERM BETWEEN R.TERM_FROM
                                                                 AND  R.TERM_TO
                                       AND R.STATUS = '1'
                                       AND R.BONUS_CD = T.BONUS_CD;

                              IF V_BON_CAL_MODE = '01'
                              THEN
                                 V_RUNNING_AGE :=
                                    FLOOR( (MONTHS_BETWEEN (
                                               TO_DATE (
                                                  TO_CHAR (
                                                     REC_C_POLICY.COMM_DATE,
                                                     'DD-MON-'
                                                  )
                                                  || TO_CHAR (I + 1),
                                                  'DD-MM-RRRR'
                                               ),
                                               REC_C_POLICY.COMM_DATE
                                            ))
                                          / 12);
                              ELSIF V_BON_CAL_MODE = '02'
                              THEN
                                 IF TO_DATE (
                                       TO_CHAR (REC_C_POLICY.COMM_DATE,
                                                'DD-MON-')
                                       || TO_CHAR (I + 1),
                                       'DD-MM-RRRR'
                                    ) <= REC_C_POLICY.LAST_PAID_DATE
                                 THEN
                                    V_RUNNING_AGE :=
                                       FLOOR( (MONTHS_BETWEEN (
                                                  TO_DATE (
                                                     TO_CHAR (
                                                        REC_C_POLICY.COMM_DATE,
                                                        'DD-MON-'
                                                     )
                                                     || TO_CHAR (I + 1),
                                                     'DD-MM-RRRR'
                                                  ),
                                                  REC_C_POLICY.COMM_DATE
                                               ))
                                             / 6);
                                 ELSE
                                    V_RUNNING_AGE :=
                                       FLOOR( (MONTHS_BETWEEN (
                                                  TO_DATE (
                                                     TO_CHAR (
                                                        ADD_MONTHS (
                                                           REC_C_POLICY.LAST_PAID_DATE,
                                                           6
                                                        ),
                                                        'DD-MON-'
                                                     )
                                                     || TO_CHAR (I + 1),
                                                     'DD-MM-RRRR'
                                                  ),
                                                  REC_C_POLICY.COMM_DATE
                                               ))
                                             / 6);
                                 END IF;
                              ELSIF V_BON_CAL_MODE = '03'
                              THEN
                                 IF TO_DATE (
                                       TO_CHAR (REC_C_POLICY.COMM_DATE,
                                                'DD-MON-')
                                       || TO_CHAR (I + 1),
                                       'DD-MM-RRRR'
                                    ) <= REC_C_POLICY.LAST_PAID_DATE
                                 THEN
                                    V_RUNNING_AGE :=
                                       FLOOR( (MONTHS_BETWEEN (
                                                  TO_DATE (
                                                     TO_CHAR (
                                                        REC_C_POLICY.COMM_DATE,
                                                        'DD-MON-'
                                                     )
                                                     || TO_CHAR (I + 1),
                                                     'DD-MM-RRRR'
                                                  ),
                                                  REC_C_POLICY.COMM_DATE
                                               ))
                                             / 3);
                                 ELSE
                                    SELECT   FLOOR( (MONTHS_BETWEEN (
                                                        TO_DATE (
                                                           TO_CHAR (
                                                              ADD_MONTHS (
                                                                 REC_C_POLICY.LAST_PAID_DATE,
                                                                 3
                                                              ),
                                                              'DD-MON-'
                                                           )
                                                           || TO_CHAR (I + 1),
                                                           'DD-MM-RRRR'
                                                        ),
                                                        REC_C_POLICY.COMM_DATE
                                                     ))
                                                   / 3)
                                      INTO   V_RUNNING_AGE
                                      FROM   DUAL;
                                 END IF;
                              ELSIF V_BON_CAL_MODE = '04'
                              THEN
                                 IF TO_DATE (
                                       TO_CHAR (REC_C_POLICY.COMM_DATE,
                                                'DD-MON-')
                                       || TO_CHAR (I + 1),
                                       'DD-MM-RRRR'
                                    ) <= REC_C_POLICY.LAST_PAID_DATE
                                 THEN
                                    V_RUNNING_AGE :=
                                       MONTHS_BETWEEN (
                                          TO_DATE (
                                             TO_CHAR (REC_C_POLICY.COMM_DATE,
                                                      'DD-MON-')
                                             || TO_CHAR (I + 1),
                                             'DD-MM-RRRR'
                                          ),
                                          REC_C_POLICY.COMM_DATE
                                       );
                                 ELSE
                                    SELECT   MONTHS_BETWEEN (
                                                TO_DATE (
                                                   TO_CHAR (
                                                      ADD_MONTHS (
                                                         REC_C_POLICY.LAST_PAID_DATE,
                                                         1
                                                      ),
                                                      'DD-MON-'
                                                   )
                                                   || TO_CHAR (I + 1),
                                                   'DD-MM-RRRR'
                                                ),
                                                REC_C_POLICY.COMM_DATE
                                             )
                                      INTO   V_RUNNING_AGE
                                      FROM   DUAL;
                                 END IF;
                              END IF;

                              V_RUNNING_AGE := (V_RUNNING_AGE - V_REDUCE_YR);


                              SELECT   COUNT (1)
                                INTO   V_COUNT
                                FROM   INS_BONUS_AVAILABLE
                               WHERE   BONUS_CD = P_BONUS_CD
                                       AND TERM = REC_C_POLICY.TERM
                                       AND MIN_RUNNING_AGE <=
                                             V_TOTAL_RUNNING_AGE
                                       AND PRODUCT_CD =
                                             REC_C_POLICY.PRODUCT_CD
                                       AND ( (ANF_LOAN_USE = '0'
                                              AND ANF_LOAN_USE =
                                                    DECODE (
                                                       TO_CHAR (
                                                          P_NO_OF_ANF_LOAN_YR
                                                       ),
                                                       '0',
                                                       '0',
                                                       '1'
                                                    ))
                                            OR (ANF_LOAN_USE = '1'));

                              IF V_COUNT > 0
                              THEN
                                 IF P_BONUS_CD = '01'
                                 THEN
                                    IF REC_C_POLICY.POLICY_TP_CD != '04'
                                    THEN
                                       V_PAID_BONUS_AMT := 0;
                                    ELSE
                                       V_DEDUCT_BONUS_AMOUNT := 0;
                                       V_RUNNING_AGE_BONUS_AMOUNT := 0;

                                       DECLARE
                                          CURSOR C_SB
                                          IS
                                               SELECT   DISTINCT
                                                        PERCENTAGE,
                                                        PAYMENT_YEAR
                                                 FROM   CLM_PRODUCT_CLAIM_DETL
                                                WHERE   PRODUCT_CD =
                                                           REC_C_POLICY.PRODUCT_CD
                                                        AND CLM_CAUSE_CD = '02'
                                                        AND CLM_DETL_CD = '02'
                                                        AND BEN_PARTY_CD = '03'
                                                        AND REC_C_POLICY.TERM BETWEEN POLICY_TERM_FR
                                                                                  AND  POLICY_TERM_TO
                                                        AND PAYMENT_YEAR <
                                                              V_RUNNING_AGE
                                             ORDER BY   PAYMENT_YEAR ASC;

                                          REC_C_SB     C_SB%ROWTYPE;
                                          V_SB_COUNT   NUMBER := 0;
                                          V_SB_SL      NUMBER := 0;
                                       BEGIN
                                          SELECT   COUNT (
                                                      DISTINCT PERCENTAGE
                                                               || PAYMENT_YEAR
                                                   )
                                            INTO   V_SB_COUNT
                                            FROM   CLM_PRODUCT_CLAIM_DETL
                                           WHERE   PRODUCT_CD =
                                                      REC_C_POLICY.PRODUCT_CD
                                                   AND CLM_CAUSE_CD = '02'
                                                   AND CLM_DETL_CD = '02'
                                                   AND BEN_PARTY_CD = '03'
                                                   AND REC_C_POLICY.TERM BETWEEN POLICY_TERM_FR
                                                                             AND  POLICY_TERM_TO
                                                   AND PAYMENT_YEAR <
                                                         V_RUNNING_AGE;

                                          OPEN C_SB;

                                          LOOP
                                             FETCH C_SB INTO   REC_C_SB;

                                             EXIT WHEN C_SB%NOTFOUND;
                                             V_SB_SL := V_SB_SL + 1;


                                             IF V_RUNNING_AGE >
                                                   REC_C_SB.PAYMENT_YEAR
                                             THEN
                                                V_DEDUCT_BONUS_AMOUNT :=
                                                   V_DEDUCT_BONUS_AMOUNT
                                                   + ( (POWER (
                                                           (1
                                                            + (V_BONUS_RATE
                                                               / V_CAL_PARA)),
                                                           V_RUNNING_AGE
                                                           - REC_C_SB.PAYMENT_YEAR
                                                        ))
                                                      - 1)
                                                     * (REC_C_SB.PERCENTAGE
                                                        / 100)
                                                     * V_SUM_ASSURED; --REC_C_POLICY.SUM_ASSURED;
                                             END IF;

                                             V_SB_COUNT := V_SB_COUNT - 1;
                                          END LOOP;

                                          CLOSE C_SB;
                                       END;
                                    END IF;

                                    IF REC_C_POLICY.POLICY_TP_CD != '06'
                                    THEN
                                       V_RUNNING_AGE_BONUS_AMOUNT :=
                                          ROUND( (REC_C_POLICY.Paidup_value -- V_SUM_ASSURED ---REC_C_POLICY.SUM_ASSURED
                                                  * ( ( ( ( ( (POWER (
                                                                  (1
                                                                   + (V_BONUS_RATE
                                                                      / V_CAL_PARA)),
                                                                  V_RUNNING_AGE
                                                               ))
                                                             - 1)
                                                           / (V_BONUS_RATE
                                                              / V_CAL_PARA))
                                                         * (1
                                                            + (V_BONUS_RATE
                                                               / V_CAL_PARA)))
                                                       - V_RUNNING_AGE)
                                                     / REC_C_POLICY.TERM))
                                                - V_DEDUCT_BONUS_AMOUNT);
                                    ELSE
                                       IF P_APPLICABLE_ON = '4'
                                       THEN
                                          V_RUNNING_AGE_BONUS_AMOUNT :=
                                             ROUND(REC_C_POLICY.Paidup_value -- V_SUM_ASSURED  ---REC_C_POLICY.SUM_ASSURED
                                                   * ( ( ( ( ( (POWER (
                                                                   (1
                                                                    + (V_BONUS_RATE
                                                                       / V_CAL_PARA)),
                                                                   FLOOR(V_RUNNING_AGE
                                                                         / 12)
                                                                )
                                                                - 1)
                                                              / (V_BONUS_RATE
                                                                 / V_CAL_PARA))
                                                            * (1
                                                               + (V_BONUS_RATE
                                                                  / V_CAL_PARA)))
                                                          - FLOOR(V_RUNNING_AGE
                                                                  / 12))
                                                        / REC_C_POLICY.TERM)
                                                      + ( ( ( ( ( ( (POWER (
                                                                        (1
                                                                         + (V_BONUS_RATE
                                                                            / V_CAL_PARA)),
                                                                        (FLOOR(V_RUNNING_AGE
                                                                               / 12)
                                                                         + 1)
                                                                     )
                                                                     - 1)
                                                                   / (V_BONUS_RATE
                                                                      / V_CAL_PARA))
                                                                 * (1
                                                                    + (V_BONUS_RATE
                                                                       / V_CAL_PARA)))
                                                               - (FLOOR(V_RUNNING_AGE
                                                                        / 12)
                                                                  + 1))
                                                             / REC_C_POLICY.TERM)
                                                           - ( ( ( ( (POWER (
                                                                         (1
                                                                          + (V_BONUS_RATE
                                                                             / V_CAL_PARA)),
                                                                         FLOOR(V_RUNNING_AGE
                                                                               / 12)
                                                                      )
                                                                      - 1)
                                                                    / (V_BONUS_RATE
                                                                       / V_CAL_PARA))
                                                                  * (1
                                                                     + (V_BONUS_RATE
                                                                        / V_CAL_PARA)))
                                                                - FLOOR(V_RUNNING_AGE
                                                                        / 12))
                                                              / REC_C_POLICY.TERM))
                                                         / 12)
                                                        * (V_RUNNING_AGE
                                                           - (FLOOR(V_RUNNING_AGE
                                                                    / 12)
                                                              * 12))));
                                       ELSIF P_APPLICABLE_ON IN ('1', '2', '3', '5', '6')
                                       THEN
                                          V_RUNNING_AGE_BONUS_AMOUNT :=
                                             ROUND( (REC_C_POLICY.Paidup_value -- V_SUM_ASSURED   ---REC_C_POLICY.SUM_ASSURED
                                                     * ( ( ( ( ( (POWER (
                                                                     (1
                                                                      + (V_BONUS_RATE
                                                                         / V_CAL_PARA)),
                                                                     FLOOR(V_RUNNING_AGE
                                                                           / 12)
                                                                  ))
                                                                - 1)
                                                              / (V_BONUS_RATE
                                                                 / V_CAL_PARA))
                                                            * (1
                                                               + (V_BONUS_RATE
                                                                  / V_CAL_PARA)))
                                                          - FLOOR(V_RUNNING_AGE
                                                                  / 12))
                                                        / REC_C_POLICY.TERM))
                                                   - V_DEDUCT_BONUS_AMOUNT);
                                       END IF;
                                    END IF;

                                    BEGIN
                                       SELECT   RUNNING_AGE_BONUS
                                         INTO   V_PRE_YR_BONUS_AMOUNT
                                         FROM   INS_POLICY_BONUS
                                        WHERE   PGID = P_PGID
                                                AND BONUS_RECEIVING_YR =
                                                      (I - 1)
                                                AND BONUS_CD = P_BONUS_CD;
                                    EXCEPTION
                                       WHEN OTHERS
                                       THEN
                                          V_PRE_YR_BONUS_AMOUNT := 0;
                                    END;

                                    V_BONUS_AMOUNT :=
                                       V_RUNNING_AGE_BONUS_AMOUNT
                                       - V_PRE_YR_BONUS_AMOUNT;
                                 ELSIF P_BONUS_CD = '02'
                                 THEN
                                    BEGIN
                                       SELECT   RUNNING_AGE_BONUS
                                         INTO   V_PRE_RUNNING_AGE_BONUS
                                         FROM   INS_POLICY_BONUS
                                        WHERE   PGID = P_PGID
                                                AND BONUS_RECEIVING_YR =
                                                      (I - 1)
                                                AND BONUS_CD = P_BONUS_CD;
                                    EXCEPTION
                                       WHEN OTHERS
                                       THEN
                                          V_PRE_YR_BONUS_AMOUNT := 0;
                                    END;

                                    IF V_CAL_METHOD = 1
                                    THEN
                                       V_BONUS_AMOUNT :=
                                          ROUND( (V_SUM_ASSURED -----REC_C_POLICY.SUM_ASSURED
                                                  * V_BONUS_RATE)
                                                / V_CAL_PARA);
                                       V_RUNNING_AGE_BONUS_AMOUNT :=
                                          V_BONUS_AMOUNT
                                          + V_PRE_RUNNING_AGE_BONUS;
                                    ELSIF V_CAL_METHOD = 2
                                    THEN
                                       BEGIN
                                          SELECT   BONUS_AMT
                                            INTO   V_PRE_YR_BONUS_AMOUNT
                                            FROM   INS_POLICY_BONUS
                                           WHERE   PGID = P_PGID
                                                   AND BONUS_RECEIVING_YR =
                                                         (I - 1)
                                                   AND BONUS_CD = P_BONUS_CD;
                                       EXCEPTION
                                          WHEN OTHERS
                                          THEN
                                             V_PRE_YR_BONUS_AMOUNT := 0;
                                       END;

                                       V_BONUS_AMOUNT :=
                                          ROUND( ( (V_SUM_ASSURED ----REC_C_POLICY.SUM_ASSURED
                                                    + V_PRE_YR_BONUS_AMOUNT)
                                                  * V_BONUS_RATE)
                                                / V_CAL_PARA);
                                       V_RUNNING_AGE_BONUS_AMOUNT :=
                                          V_BONUS_AMOUNT;
                                    ELSE
                                       NULL;
                                    END IF;
                                 ELSIF P_BONUS_CD = '03'
                                 THEN
                                    IF V_CAL_METHOD = 1
                                    THEN
                                       V_BONUS_AMOUNT :=
                                          ROUND( (REC_C_POLICY.SUM_ASSURED
                                                  * V_BONUS_RATE)
                                                / V_CAL_PARA);
                                    ELSIF V_CAL_METHOD = 2
                                    THEN
                                       BEGIN
                                          SELECT   BONUS_AMT
                                            INTO   V_PRE_YR_BONUS_AMOUNT
                                            FROM   INS_POLICY_BONUS
                                           WHERE   PGID = P_PGID
                                                   AND BONUS_RECEIVING_YR =
                                                         (I - 1)
                                                   AND BONUS_CD = P_BONUS_CD;
                                       EXCEPTION
                                          WHEN OTHERS
                                          THEN
                                             V_PRE_YR_BONUS_AMOUNT := 0;
                                       END;

                                       V_BONUS_AMOUNT :=
                                          ROUND( ( (V_SUM_ASSURED -----REC_C_POLICY.SUM_ASSURED
                                                    + V_PRE_YR_BONUS_AMOUNT)
                                                  * V_BONUS_RATE)
                                                / V_CAL_PARA);
                                    ELSE
                                       NULL;
                                    END IF;

                                    V_RUNNING_AGE_BONUS_AMOUNT :=
                                       V_BONUS_AMOUNT;
                                 ELSE
                                    NULL;
                                 END IF;

                                 IF V_BONUS_AMOUNT > 0
                                 THEN
                                    INSERT INTO INS_POLICY_BONUS (
                                                                     BONUS_RECEIVING_YR,
                                                                     BONUS_ALLOCATION_DT,
                                                                     PGID,
                                                                     PRODUCT_CD,
                                                                     SUM_ASSURED,
                                                                     POLICY_AGE,
                                                                     BONUS_PERC,
                                                                     BONUS_YR,
                                                                     BONUS_AMT,
                                                                     I_USR,
                                                                     I_DT,
                                                                     APPLICABLE_ON,
                                                                     BONUS_CD,
                                                                     RUNNING_AGE_BONUS
                                               )
                                      VALUES   (I,
                                                TRUNC (SYSDATE),
                                                REC_C_POLICY.PGID,
                                                REC_C_POLICY.PRODUCT_CD,
                                                V_SUM_ASSURED, ---REC_C_POLICY.SUM_ASSURED,
                                                V_RUNNING_AGE,
                                                V_BONUS_RATE,
                                                I,
                                                V_BONUS_AMOUNT,
                                                P_USR,
                                                SYSDATE,
                                                P_APPLICABLE_ON,
                                                P_BONUS_CD,
                                                V_RUNNING_AGE_BONUS_AMOUNT);

                                    V_COMPLETE_RECORD := V_COMPLETE_RECORD + 1;
                                 END IF;
                              ELSE
                                 V_UNAVAILABLE_BONUS :=
                                    V_UNAVAILABLE_BONUS + 1;
                              END IF;
                           EXCEPTION
                              WHEN OTHERS
                              THEN
                                 V_UNAVAILABLE_BONUS_RATE :=
                                    V_UNAVAILABLE_BONUS_RATE + 1;
                           END;
                        END IF;
                     END IF;
                  ELSE
                     NULL;
                  END IF;
               END IF;
            END LOOP;

            IF P_BONUS_YR IS NULL
            THEN
               V_CALCULATED_BONUS_YR :=
                  V_BONUS_YR_FROM || '-' || V_BONUS_YR_TO;
            ELSE
               V_CALCULATED_BONUS_YR := P_BONUS_YR;
            END IF;
         END IF;

         V_COUNTER := V_COUNTER + 1;
      END LOOP;

      CLOSE C_POLICY;

      P_PROCESS_ST := '1';
      P_OUTPUT :=
            V_BONUS_NM
         || ' Calculation has been completed on year of:'
         || V_CALCULATED_BONUS_YR
         || '.'
         || 'Total fetch record is: '
         || V_COUNTER
         || ',Bonus calculated record is: '
         || V_COMPLETE_RECORD
         || ',Failed due to unavailable bonus is: '
         || V_UNAVAILABLE_BONUS
         || ',Failed Due to bonus rate is: '
         || V_UNAVAILABLE_BONUS_RATE
         || '.';
   ELSE
      P_PROCESS_ST := '0';
      P_OUTPUT :=
         'There is no circular of reagrding bonus on year of '
         || V_CALCULATED_BONUS_YR;
   END IF;
END;
/


--
-- PRO_POLICY_BONUS_CAL_OLD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_bonus_cal_old (
   P_PGID                 IN       VARCHAR2,
   P_BONUS_YR             IN       NUMBER,
   P_BONUS_CD             IN       VARCHAR2,
   P_APPLICABLE_ON        IN       CHAR,
   P_NO_OF_ANF_LOAN_YR    IN       NUMBER,
   P_USR                  IN       VARCHAR2,
   P_IRG_BONUS_BAR_DATE   IN       DATE,
   P_OUTPUT               OUT      VARCHAR2,
   P_PROCESS_ST           OUT      CHAR
)
IS
   CURSOR C_POLICY
   IS
      SELECT PGID, SUM_ASSURED, S.PRODUCT_CD, TERM,
             DECODE
                (P.POLICY_TP_CD,
                 '10', CASE
                    WHEN TO_DATE (   TO_CHAR (S.COMM_DATE, 'DD-MON')
                                  || TO_CHAR (SYSDATE, 'RRRR'),
                                  'DD-MM-RRRR'
                                 ) > TRUNC (SYSDATE)
                       THEN TO_DATE (   TO_CHAR (S.COMM_DATE, 'DD-MON')
                                     || TO_CHAR (  TO_NUMBER
                                                            (TO_CHAR (SYSDATE,
                                                                      'RRRR'
                                                                     )
                                                            )
                                                 - 1
                                                ),
                                     'DD-MM-RRRR'
                                    )
                    ELSE TO_DATE (   TO_CHAR (S.COMM_DATE, 'DD-MON')
                                  || TO_CHAR (SYSDATE, 'RRRR'),
                                  'DD-MM-RRRR'
                                 )
                 END,
                 ADD_MONTHS (LAST_PAID_DATE, (P_NO_OF_ANF_LOAN_YR * 12))
                ) LAST_PAID_DATE,
             DECODE (TO_CHAR (S.COMM_DATE, 'DDMM'),
                     '2902', TO_DATE (   '28-FEB-'
                                      || TO_CHAR (S.COMM_DATE, 'RRRR'),
                                      'DD-MON-RRRR'
                                     ),
                     S.COMM_DATE
                    ) COMM_DATE,
             P.POLICY_TP_CD, S.PAY_MODE_CD, S.LAST_PAID_INST_NO,
             S.MATURITY_DATE, S.POLICY_STATUS
        FROM INS_P_SUMMERY S, INS_PRODUCT P
       WHERE (   (P_PGID IS NULL AND POLICY_STATUS NOT IN ('02', '04', '10')
                 )
              OR (P_PGID IS NOT NULL AND 1 = 1)
             )
         AND PGID = NVL (P_PGID, PGID)
         AND (   (    P_PGID IS NULL
                  AND P_BONUS_YR <=
                         TO_NUMBER
                            (TO_CHAR
                                  (DECODE (P.POLICY_TP_CD,
                                           '10', TO_DATE
                                                     (   TO_CHAR (S.COMM_DATE,
                                                                  'DD-MON'
                                                                 )
                                                      || TO_CHAR (P_BONUS_YR),
                                                      'DD-MM-RRRR'
                                                     ),
                                           ADD_MONTHS (LAST_PAID_DATE,
                                                       (  P_NO_OF_ANF_LOAN_YR
                                                        * 12
                                                       )
                                                      )
                                          ),
                                   'RRRR'
                                  )
                            )
                 )
              OR (P_PGID IS NOT NULL AND 1 = 1)
             )
         AND (   (    P_PGID IS NULL
                  AND S.COMM_DATE <=
                         TO_DATE
                              (   TO_CHAR (ADD_MONTHS (LAST_PAID_DATE,
                                                       (  P_NO_OF_ANF_LOAN_YR
                                                        * 12
                                                       )
                                                      ),
                                           'DD-MON'
                                          )
                               || TO_CHAR (P_BONUS_YR),
                               'DD-MM-RRRR'
                              )
                 )
              OR (P_PGID IS NOT NULL AND 1 = 1)
             )
         AND S.PRODUCT_CD = P.PRODUCT_CD;

   REC_C_POLICY                 C_POLICY%ROWTYPE;
   V_COUNTER                    NUMBER                                    := 0;
   
   V_COUNT                      NUMBER                                    := 0;
   
   V_UNAVAILABLE_BONUS          NUMBER                                    := 0;
   
   V_BONUS_RATE                 INS_YR_BONUS.BONUS_RATE%TYPE;
   V_UNAVAILABLE_BONUS_RATE     NUMBER                                    := 0;
   
   V_CAL_PARA                   INS_BONUS_TYPE.CAL_PARA%TYPE;
   V_CAL_METHOD                 INS_BONUS_TYPE.CAL_METHOD%TYPE;
   V_BONUS_AMOUNT               NUMBER;
   
   V_PRE_YR_BONUS_AMOUNT        INS_POLICY_BONUS.BONUS_AMT%TYPE;
   
   V_DEDUCT_BONUS_AMOUNT        INS_POLICY_BONUS.BONUS_AMT%TYPE           := 0;
   V_RUNNING_AGE_BONUS_AMOUNT   NUMBER (10)                               := 0;
   V_PAID_BONUS_AMT             NUMBER (10);
   V_BONUS_NM                   INS_BONUS_TYPE.BONUS_NM%TYPE;
   V_COMPLETE_RECORD            NUMBER                                    := 0;
   V_BON_CAL_MODE               VARCHAR2 (2);
   V_RUNNING_AGE                NUMBER (10);
   V_PRE_RUNNING_AGE_BONUS      NUMBER                                    := 0;
   V_DIFF_TYPE                  INS_POL_BONUS_IRGLR_POLICY.DIFF_TYPE%TYPE;
   V_DIFF_DEP_ON_FR             INS_POL_BONUS_IRGLR_POLICY.DIFF_DEP_ON_FR%TYPE;
   V_DIFF_DEP_ON_TO             INS_POL_BONUS_IRGLR_POLICY.DIFF_DEP_ON_TO%TYPE;
   V_DURATION                   INS_POL_BONUS_IRGLR_POLICY.DURATION%TYPE;
   V_NO_OF_BONUS_YR             INS_POL_BONUS_IRGLR_POLICY.NO_OF_BONUS_YR%TYPE;
   V_IRREGUAL_PAID_INST         NUMBER (10)                               := 0;
   V_REGUAL_PAID_INST           NUMBER (10)                               := 0;
   V_REGUALR_BONUS_YEAR         NUMBER (10)                               := 0;
   V_REGUALR_PAID_AC_INST       NUMBER (10)                               := 0;
   V_IRRG_BONUS_YR              NUMBER (10)                               := 0;
   V_BONUS_YR_FROM              NUMBER (4);
   V_BONUS_YR_TO                NUMBER (4);
   V_TOTAL_RUNNING_AGE          NUMBER (10);
   V_ERROR_IRG                  CHAR (1)                                := '0';
   V_YR_WISE_BON                NUMBER                                    := 0;
   V_CALCULATED_BONUS_YR        VARCHAR2 (20);
   V_REDUCE_YR                  NUMBER;
   V_POLICY_STATUS              VARCHAR2 (2);
   V_MAX_PAYMENT_DT             DATE;
   V_DOD                        DATE;
   V_DOD_TOT_RUNNING_AGE        NUMBER (10);
   V_SUM_ASSURED                NUMBER (10);
   v_paidup_value        NUMBER (15);
BEGIN
   IF P_BONUS_YR IS NOT NULL
   THEN
      SELECT COUNT (1)
        INTO V_COUNT
        FROM INS_POL_BONUS_APPLICABLE
       WHERE BONUS_YR = P_BONUS_YR
         AND BONUS_CD = P_BONUS_CD
         AND APPLICABLE_ON IN (P_APPLICABLE_ON, '6')
         AND STATUS = '1';

      V_BONUS_YR_FROM := P_BONUS_YR;
      V_BONUS_YR_TO := P_BONUS_YR;
   ELSE
      V_COUNT := 1;
   END IF;

   IF V_COUNT > 0
   THEN
      BEGIN
         SELECT BONUS_NM
           INTO V_BONUS_NM
           FROM INS_BONUS_TYPE
          WHERE BONUS_CD = P_BONUS_CD;
      EXCEPTION
         WHEN OTHERS
         THEN
            V_BONUS_NM := P_BONUS_CD;
      END;

      OPEN C_POLICY;

      LOOP
         FETCH C_POLICY
          INTO REC_C_POLICY;

         EXIT WHEN C_POLICY%NOTFOUND;

         
         IF REC_C_POLICY.POLICY_STATUS = '03' THEN
            
         
            --ADD CODE --    
            
                DECLARE
                      
                      v_payable_amt         NUMBER (15, 2);
                      v_suspense_amt        NUMBER (15, 2);
                      v_bonus_amt           NUMBER (15, 2);
                      v_loan_amt            NUMBER (15, 2);
                      v_interest_amt        NUMBER (15, 2);
                      v_premium_amt         NUMBER (15, 2);
                      v_late_fee            NUMBER (15, 2);
                      v_cnt                 NUMBER (10)                                  := 0;
                      v_no_of_anf_instl     NUMBER (5)                                   := 0;
                      v_payable_no          clm_claim_payable_gen.payable_no%TYPE;
                      v_account_no          clm_client_account.account_no%TYPE;
                      v_bank_cd             clm_client_account.bank_cd%TYPE;
                      v_br_cd               clm_client_account.br_cd%TYPE;
                      v_br_address          clm_client_account.address%TYPE;
                      v_paid_amt            clm_claim_payable_gen.net_payable_amt%TYPE;
                      v_ded_amt             NUMBER (15, 2)                               := 0;
                      v_anf_error           VARCHAR2 (1000);
                ---------------------
                      v_loan_sl_no          VARCHAR2 (10);
                      v_loan_reco_locking   NUMBER (1);
                      v_loan_rec_loc_err    VARCHAR2 (100);
                      v_source_tax          NUMBER (12, 2)                               := 0;
                      v_source_tax_err      VARCHAR2 (200);
                      v_prem_due_late_fee   NUMBER (12, 2)                               := 0;
                      v_paid_prem_late_fee  NUMBER (12, 2)                               := 0;
                      v_unadj_coll_amt      NUMBER (12, 2)                               := 0;
                      v_tot_paid_amt        NUMBER (12, 2)                               := 0;
                      
                      v_no_of_anf_loan      NUMBER (5)      := 0;
                      v_no_of_anf_loan_yr   NUMBER (2)      := 0;
                      v_anf_loan_amount     NUMBER (12, 2)  := 0;
                      v_interest_amount     NUMBER (12, 2)  := 0;
                      v_alt_due_amount      clm_claim_appl.alt_due_amount%TYPE;
                      ---Add by Musha on 15.07.2018
                      v_extra_bonus_amt     NUMBER (15, 2)                               := 0;
                      v_extra_bonus_error   VARCHAR2 (200);
                      v_bonus_amt_temp      NUMBER (15, 2);

                      CURSOR cur_paidup_policy
                      IS
                         SELECT s.pgid, s.maturity_date, s.sum_assured, s.product_cd,
                                
                                
                                s.comm_date, s.age age_entry,
                                  s.age
                                + ROUND ((s.maturity_date - s.comm_date) / 365) age_maturity,
                                s.last_paid_inst_no, s.policy_installment, s.term, d.sl_no,
                                d.ben_party_cd, d.payment_type, d.installment_type,
                                  s.last_paid_inst_no
                                / (s.policy_installment / s.term) no_of_paid_year, s.option_cd,
                                s.pay_mode_cd, l.clm_cause_cd, l.clm_detl_cd, d.pay_basis_cd,
                                d.percentage
                           FROM ins_p_summery s,
                                ins_product p,
                                clm_product_claim_detl d,
                                clm_product_claim_mst l
                          WHERE s.product_cd = p.product_cd
                            AND s.product_cd = d.product_cd
                            AND NVL (s.active_status, '1') = '1'
                            AND p.policy_tp_cd <> '02'
                            AND (   s.policy_status = '03'
                                 OR (    s.policy_status = '01'
                                     AND s.maturity_date <= TRUNC (ADD_MONTHS (SYSDATE, 1))
                                     AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) = '0'
                                    )
                                 OR (s.policy_status = '01' AND pkg_clm_cal.fun_adv_clm_stat (s.pgid) =
                                                                                           '2'
                                    )
                                )
                            --AND s.paid_up_status       = 1
                            AND NVL (p.paidup_age, 0) <=
                                                  ((s.last_paid_date - s.comm_date) / 365
                                                  ) + 1
                            AND d.clm_cause_cd = '06'
                            AND s.pgid = REC_C_POLICY.PGID
                            AND TO_NUMBER (s.term) <> 0
                            AND s.product_cd = REC_C_POLICY.PRODUCT_CD
                            AND fun_policy_surrendered (s.pgid) = '0'
                            AND d.product_cd = l.product_cd
                            AND d.clm_cause_cd = l.clm_cause_cd
                            AND d.clm_detl_cd = l.clm_detl_cd
                            AND d.ben_party_cd = l.ben_party_cd
                            AND l.setup_id = d.setup_id
                            AND s.policy_status = NVL (l.policy_status, s.policy_status)
                            AND s.maturity_date = REC_C_POLICY.MATURITY_DATE
                             ----add tazmul
                            AND (NVL(l.app_req, '0') = '0' OR
                 (l.app_req = '1'
                  AND EXISTS (
                       SELECT 1
                         FROM clm_claim_appl a
                        WHERE a.pgid = s.pgid
                          AND a.clm_cause_cd = d.clm_cause_cd
                          AND a.clm_detl_cd = d.clm_detl_cd
                          AND a.party_cd = d.ben_party_cd
                          AND a.payable_dt= REC_C_POLICY.MATURITY_DATE
                          AND a.apprv_status = '1')
                 ));
                            
                                 
                   BEGIN
                      FOR j IN cur_paidup_policy
                      LOOP
                         

                        
                            -----------Calculate previously paid amount-----------
                            BEGIN
                               SELECT NVL (SUM (  NVL (p.actual_payable_amt,
                                                       p.gross_payable_amt
                                                      )
                                                + NVL (actual_bonus_amt,
                                                       NVL (p.bonus_payable, 0)
                                                      )
                                               ),
                                           0
                                          )
                                 INTO v_paid_amt
                                 FROM clm_claim_payable_gen p
                                WHERE p.pgid = j.pgid
                                  AND p.clm_cause_cd NOT IN ('04', '05')
                                ;
                            EXCEPTION
                               WHEN OTHERS
                               THEN
                                  v_paid_amt := 0;
                                  NULL;
                            END;

                            BEGIN
                               ---Chekc deductable amount
                                 pro_anf_loan_payable_info
                                                         (p_pgid                   => p_pgid,
                                                          p_appl_date              => j.maturity_date,
                                                          p_no_of_anf_loan         => v_no_of_anf_loan,
                                                          p_no_of_anf_loan_yr      => v_no_of_anf_loan_yr,
                                                          p_anf_loan_amount        => v_anf_loan_amount,
                                                          p_interest_amount        => v_interest_amount,
                                                          p_error                  => v_anf_error
                                                         );
                               
                               v_no_of_anf_instl := NVL(v_no_of_anf_loan,0);
                               
                               IF j.pay_mode_cd = '01'
                               THEN
                                  v_no_of_anf_instl := v_no_of_anf_instl / 1;
                               ELSIF j.pay_mode_cd = '02'
                               THEN
                                  v_no_of_anf_instl := v_no_of_anf_instl / 2;
                               ELSIF j.pay_mode_cd = '03'
                               THEN
                                  v_no_of_anf_instl := v_no_of_anf_instl / 4;
                               ELSIF j.pay_mode_cd = '04'
                               THEN
                                  v_no_of_anf_instl := v_no_of_anf_instl / 12;
                               END IF;
                            EXCEPTION
                               WHEN OTHERS
                               THEN
                                  NULL;
                            END;
                            ---End of finding no of installment adjusted by ANF loan---
                            
                            IF j.pay_basis_cd = '12'
                            THEN
                               BEGIN
                                  SELECT ROUND ((last_paid_inst_no * installment_premium), 2)
                                                                                 tot_paid_amt
                                    INTO v_tot_paid_amt
                                    FROM ins_p_summery
                                   WHERE pgid = j.pgid;
                               EXCEPTION
                                  WHEN OTHERS
                                  THEN
                                    null;
                                    
                               END;

                               v_paidup_value :=
                                        (NVL (v_tot_paid_amt, 0) * NVL (j.percentage, 0)
                                        ) / 100;
                            ELSE
                               v_paidup_value :=
                                  ROUND (  (  (  j.sum_assured
                                               * j.no_of_paid_year
                                              )
                                            / j.term
                                           )
                                         - NVL (v_paid_amt, 0)
                                        ); ----Musha on 30.11.2015
                               IF v_paidup_value >= v_anf_loan_amount + v_interest_amount THEN               
                                   v_paidup_value :=
                                      ROUND (  (  (  j.sum_assured
                                                   * (j.no_of_paid_year + v_no_of_anf_instl)
                                                  )
                                                / j.term
                                               )
                                             - NVL (v_paid_amt, 0)
                                            );
                               ELSE
                                    v_no_of_anf_loan        := 0;
                                    v_no_of_anf_loan_yr     := 0;
                                    v_anf_loan_amount       := 0;
                                    v_interest_amount       := 0;
                               END IF;
                            END IF;

                            ----------------------------------- 
                            ---Musha on 20.12.2015--
                            IF ((j.option_cd IN ('1', '2') AND NVL(v_no_of_anf_loan,0) = 0) OR
                               (     j.option_cd = '2' AND NVL(v_no_of_anf_loan,0) > 0 
                                AND (j.last_paid_inst_no + NVL(v_no_of_anf_loan,0)) < j.policy_installment))
                            THEN
                                v_paidup_value := 0;
                            END IF;
                            ------------------------------------
                            
                                    
                            
                         
                      END LOOP;

                   EXCEPTION
                      WHEN OTHERS
                      THEN
                         v_paidup_value := 0;
                   END;
            ---=================================================-- 
         
            V_SUM_ASSURED := v_paidup_value;
         ELSE
            V_SUM_ASSURED := REC_C_POLICY.SUM_ASSURED;  ---NOT CHANGED CHANGE AFTER THIS WITH V_SUM_ASSURED
         END IF;
         
         
         
         IF P_APPLICABLE_ON = '1'                   
         THEN
            BEGIN
               SELECT POLICY_STATUS
                 INTO V_POLICY_STATUS
                 FROM CLM_CLAIM_MST
                WHERE PGID = REC_C_POLICY.PGID;
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_POLICY_STATUS := REC_C_POLICY.POLICY_STATUS;
            END;
         ELSE
            V_POLICY_STATUS := REC_C_POLICY.POLICY_STATUS;
         END IF;

         
         BEGIN
            SELECT   MAX (NEXT_DUE_DT)
                INTO V_MAX_PAYMENT_DT
                FROM INS_PREM_ACC_RECEIVABLE
               WHERE PGID = REC_C_POLICY.PGID
                 AND PAY_STATUS = '1'
                 AND NVL (RETURN_ST, '0') = '0'          
            GROUP BY PGID;

            IF REC_C_POLICY.LAST_PAID_DATE < V_MAX_PAYMENT_DT
            THEN
               V_IRREGUAL_PAID_INST := 0;
            ELSE
               SELECT DIFF_TYPE, DIFF_DEP_ON_FR, DIFF_DEP_ON_TO,
                      DURATION, NO_OF_BONUS_YR
                 INTO V_DIFF_TYPE, V_DIFF_DEP_ON_FR, V_DIFF_DEP_ON_TO,
                      V_DURATION, V_NO_OF_BONUS_YR
                 FROM INS_POL_BONUS_IRGLR_POLICY
                WHERE BONUS_CD = P_BONUS_CD
                  AND PAYMENT_TYPE = '1'
                  AND PAY_MODE_CD = REC_C_POLICY.PAY_MODE_CD
                  AND APPLICABLE_ON IN (P_APPLICABLE_ON, '6');

               SELECT COUNT (1)
                 INTO V_IRREGUAL_PAID_INST
                 FROM INS_PREM_ACC_RECEIVABLE
                WHERE PGID = REC_C_POLICY.PGID
                AND NVL (RETURN_ST, '0') = '0'          
                  AND PAYMENT_DATE >
                         CASE
                            WHEN V_DIFF_TYPE = '1'
                               THEN (P_IRG_BONUS_BAR_DATE - V_DURATION)
                            WHEN V_DIFF_TYPE = '2'
                               THEN ADD_MONTHS (P_IRG_BONUS_BAR_DATE,
                                                -V_DURATION
                                               )
                            ELSE ADD_MONTHS (P_IRG_BONUS_BAR_DATE,
                                             - (V_DURATION * 12)
                                            )
                         END;
            END IF;

            IF V_IRREGUAL_PAID_INST > 1
            THEN
               V_REGUAL_PAID_INST :=
                        REC_C_POLICY.LAST_PAID_INST_NO - V_IRREGUAL_PAID_INST;

               SELECT DECODE (REC_C_POLICY.PAY_MODE_CD,
                              '01', V_REGUAL_PAID_INST / 1,
                              '02', FLOOR (V_REGUAL_PAID_INST / 2),
                              '03', FLOOR (V_REGUAL_PAID_INST / 4),
                              '04', FLOOR (V_REGUAL_PAID_INST / 12),
                              V_REGUAL_PAID_INST / 1
                             ),
                      DECODE (REC_C_POLICY.PAY_MODE_CD,
                              '01', (V_REGUAL_PAID_INST / 1) * 1,
                              '02', FLOOR (V_REGUAL_PAID_INST / 2) * 2,
                              '03', FLOOR (V_REGUAL_PAID_INST / 4) * 4,
                              '04', FLOOR (V_REGUAL_PAID_INST / 12) * 12,
                              (V_REGUAL_PAID_INST / 1
                              ) * 1
                             )
                 INTO V_REGUALR_BONUS_YEAR,
                      V_REGUALR_PAID_AC_INST
                 FROM DUAL;

               SELECT DECODE (REC_C_POLICY.PAY_MODE_CD,
                              '01', (  (  REC_C_POLICY.LAST_PAID_INST_NO
                                        - V_REGUALR_PAID_AC_INST
                                       )
                                     / 1
                               ),
                              '02', FLOOR (  (  REC_C_POLICY.LAST_PAID_INST_NO
                                              - V_REGUALR_PAID_AC_INST
                                             )
                                           / 2
                                          ),
                              '03', FLOOR (  (  REC_C_POLICY.LAST_PAID_INST_NO
                                              - V_REGUALR_PAID_AC_INST
                                             )
                                           / 4
                                          ),
                              '04', FLOOR (  (  REC_C_POLICY.LAST_PAID_INST_NO
                                              - V_REGUALR_PAID_AC_INST
                                             )
                                           / 12
                                          ),
                              (  (  REC_C_POLICY.LAST_PAID_INST_NO
                                  - V_REGUALR_PAID_AC_INST
                                 )
                               / 1
                              )
                             )
                 INTO V_IRRG_BONUS_YR
                 FROM DUAL;

               IF V_IRRG_BONUS_YR >= V_NO_OF_BONUS_YR
               THEN
                  V_BONUS_YR_FROM :=
                         TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'));
                  V_BONUS_YR_TO :=
                     (  TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'))
                      + V_REGUALR_BONUS_YEAR
                      - 1
                     );
                  V_TOTAL_RUNNING_AGE :=
                                  ((V_BONUS_YR_TO - V_BONUS_YR_FROM) + 1
                                  ) * 12;
               ELSE
                  V_BONUS_YR_FROM :=
                         TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'));
                  V_BONUS_YR_TO :=
                     (  TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'))
                      + V_REGUALR_BONUS_YEAR
                      - 1
                     );
                  V_TOTAL_RUNNING_AGE :=
                                  ((V_BONUS_YR_TO - V_BONUS_YR_FROM) + 1
                                  ) * 12;
               END IF;

               IF V_TOTAL_RUNNING_AGE > REC_C_POLICY.TERM * 12
               THEN
                  V_TOTAL_RUNNING_AGE := TO_NUMBER (REC_C_POLICY.TERM) * 12;
                  V_BONUS_YR_TO :=
                     (V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12)
                     ) - 1;
               END IF;
            ELSE
               V_BONUS_YR_FROM :=
                         TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'));

               IF REC_C_POLICY.POLICY_TP_CD <> 10
               THEN
                  
                                    SELECT MONTHS_BETWEEN
                               (ADD_MONTHS (REC_C_POLICY.LAST_PAID_DATE,
                                            DECODE (REC_C_POLICY.PAY_MODE_CD,
                                                    '01', 12,
                                                    '02', 6,
                                                    '03', 3,
                                                    '04', 1,
                                                    '05', 12
                                                   )
                                           ),
                                REC_C_POLICY.COMM_DATE
                               )
                    INTO V_TOTAL_RUNNING_AGE
                    FROM DUAL;

                  V_BONUS_YR_TO :=
                      (V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12)
                      ) - 1;
               ELSE
                  V_BONUS_YR_TO :=
                     TO_NUMBER (TO_CHAR (REC_C_POLICY.LAST_PAID_DATE, 'RRRR'));
                  V_TOTAL_RUNNING_AGE :=
                                 ((V_BONUS_YR_TO - V_BONUS_YR_FROM) + 1
                                 ) * 12;

                  IF V_TOTAL_RUNNING_AGE > REC_C_POLICY.TERM * 12
                  THEN
                     V_TOTAL_RUNNING_AGE := TO_NUMBER (REC_C_POLICY.TERM)
                                            * 12;
                     V_BONUS_YR_TO :=
                          (V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12)
                          )
                        - 1;
                  END IF;
               END IF;
            END IF;

            V_ERROR_IRG := 0;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               V_BONUS_YR_FROM :=
                         TO_NUMBER (TO_CHAR (REC_C_POLICY.COMM_DATE, 'RRRR'));

               IF REC_C_POLICY.POLICY_TP_CD <> 10
               THEN
                  SELECT MONTHS_BETWEEN
                               (ADD_MONTHS (REC_C_POLICY.LAST_PAID_DATE,
                                            DECODE (REC_C_POLICY.PAY_MODE_CD,
                                                    '01', 12,
                                                    '02', 6,
                                                    '03', 3,
                                                    '04', 1,
                                                    '05', 12
                                                   )
                                           ),
                                REC_C_POLICY.COMM_DATE
                               )
                    INTO V_TOTAL_RUNNING_AGE
                    FROM DUAL;

                  V_BONUS_YR_TO :=
                         V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12)
                         - 1;
               ELSE
                  V_BONUS_YR_TO :=
                     TO_NUMBER (TO_CHAR (REC_C_POLICY.LAST_PAID_DATE, 'RRRR'));
                  V_TOTAL_RUNNING_AGE :=
                                 ((V_BONUS_YR_TO - V_BONUS_YR_FROM) + 1
                                 ) * 12;

                  IF V_TOTAL_RUNNING_AGE > REC_C_POLICY.TERM * 12
                  THEN
                     V_TOTAL_RUNNING_AGE := TO_NUMBER (REC_C_POLICY.TERM)
                                            * 12;
                     V_BONUS_YR_TO :=
                          (V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12)
                          )
                        - 1;
                  END IF;
               END IF;

               V_ERROR_IRG := 0;
            WHEN OTHERS
            THEN
               V_ERROR_IRG := 1;
         END;

         IF P_APPLICABLE_ON <> 1
         THEN
            NULL;
         ELSE
            BEGIN
               SELECT DOD
                 INTO V_DOD
                 FROM CLM_APPLICATION
                WHERE PGID = P_PGID;

               V_DOD_TOT_RUNNING_AGE :=
                        FLOOR (MONTHS_BETWEEN (V_DOD, REC_C_POLICY.COMM_DATE));

               IF V_TOTAL_RUNNING_AGE <= V_DOD_TOT_RUNNING_AGE
               THEN
                  V_TOTAL_RUNNING_AGE := V_TOTAL_RUNNING_AGE;
               ELSE
                  V_TOTAL_RUNNING_AGE := V_DOD_TOT_RUNNING_AGE;
               END IF;

               
               V_BONUS_YR_TO :=
                      (V_BONUS_YR_FROM + FLOOR (V_TOTAL_RUNNING_AGE / 12)
                      ) - 1;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END IF;

         
         IF V_ERROR_IRG = '0'
         THEN
            V_TOTAL_RUNNING_AGE := FLOOR ((V_TOTAL_RUNNING_AGE) / 12);

            
            IF V_BONUS_YR_FROM < 1997
            THEN
               V_REDUCE_YR := (1997 - V_BONUS_YR_FROM);
            ELSE
               V_REDUCE_YR := 0;
            END IF;

            FOR I IN V_BONUS_YR_FROM .. V_BONUS_YR_TO
            LOOP
               IF    (P_BONUS_CD = '03' AND I = V_BONUS_YR_TO)
                  OR P_BONUS_CD != '03'
               THEN
                  IF (   (P_BONUS_YR IS NOT NULL AND I = P_BONUS_YR)
                      OR (P_BONUS_YR IS NULL)
                     )
                  THEN
                     SELECT COUNT (1)
                       INTO V_YR_WISE_BON
                       FROM INS_POLICY_BONUS
                      WHERE PGID = REC_C_POLICY.PGID
                        AND BONUS_RECEIVING_YR = I
                        AND BONUS_CD = P_BONUS_CD;

                     IF V_YR_WISE_BON = 0
                     THEN
                        
                        SELECT COUNT (1)
                          INTO V_COUNT
                          FROM INS_POL_BONUS_APPLICABLE
                         WHERE BONUS_YR = I
                           AND BONUS_CD = P_BONUS_CD
                           AND APPLICABLE_ON IN (P_APPLICABLE_ON, '6')
                           AND STATUS = '1'
                           AND (   (    STATUS_DEP = '1'
                                    AND STATUS_CD = V_POLICY_STATUS
                                   )
                                OR (STATUS_DEP = '0')
                               );

                        
                        IF V_COUNT > 0
                        THEN
                           
                           BEGIN
                              SELECT R.BONUS_RATE, T.CAL_PARA, T.CAL_METHOD,
                                     R.BON_CAL_MODE
                                INTO V_BONUS_RATE, V_CAL_PARA, V_CAL_METHOD,
                                     V_BON_CAL_MODE
                                FROM INS_YR_BONUS R, INS_BONUS_TYPE T
                               WHERE (   (P_BONUS_CD = '01' AND R.BONUS_YR = I
                                         )
                                      OR (P_BONUS_CD = '02' AND R.BONUS_YR = I
                                         )
                                      OR (    P_BONUS_CD = '03'
                                          AND R.BONUS_YR = V_BONUS_YR_TO
                                                                                                                           

                                         )
                                     )
                                 AND R.BONUS_CD = P_BONUS_CD
                                 AND R.PRODUCT_CD = REC_C_POLICY.PRODUCT_CD
                                 AND REC_C_POLICY.TERM BETWEEN R.TERM_FROM
                                                           AND R.TERM_TO
                                 AND R.STATUS = '1'
                                 AND R.BONUS_CD = T.BONUS_CD;

                              IF V_BON_CAL_MODE = '01'
                              THEN
                                 V_RUNNING_AGE :=
                                    FLOOR
                                       (  (MONTHS_BETWEEN
                                              (TO_DATE
                                                  (   TO_CHAR
                                                         (REC_C_POLICY.COMM_DATE,
                                                          'DD-MON-'
                                                         )
                                                   || TO_CHAR (I + 1),
                                                   'DD-MM-RRRR'
                                                  ),
                                               REC_C_POLICY.COMM_DATE
                                              )
                                          )
                                        / 12
                                       );
                              ELSIF V_BON_CAL_MODE = '02'
                              THEN
                                 IF TO_DATE
                                         (   TO_CHAR (REC_C_POLICY.COMM_DATE,
                                                      'DD-MON-'
                                                     )
                                          || TO_CHAR (I + 1),
                                          'DD-MM-RRRR'
                                         ) <= REC_C_POLICY.LAST_PAID_DATE
                                 THEN
                                    V_RUNNING_AGE :=
                                       FLOOR
                                          (  (MONTHS_BETWEEN
                                                 (TO_DATE
                                                     (   TO_CHAR
                                                            (REC_C_POLICY.COMM_DATE,
                                                             'DD-MON-'
                                                            )
                                                      || TO_CHAR (I + 1),
                                                      'DD-MM-RRRR'
                                                     ),
                                                  REC_C_POLICY.COMM_DATE
                                                 )
                                             )
                                           / 6
                                          );
                                 ELSE
                                    V_RUNNING_AGE :=
                                       FLOOR
                                          (  (MONTHS_BETWEEN
                                                 (TO_DATE
                                                     (   TO_CHAR
                                                            (ADD_MONTHS
                                                                (REC_C_POLICY.LAST_PAID_DATE,
                                                                 6
                                                                ),
                                                             'DD-MON-'
                                                            )
                                                      || TO_CHAR (I + 1),
                                                      'DD-MM-RRRR'
                                                     ),
                                                  REC_C_POLICY.COMM_DATE
                                                 )
                                             )
                                           / 6
                                          );
                                 END IF;
                              ELSIF V_BON_CAL_MODE = '03'
                              THEN
                                 IF TO_DATE
                                         (   TO_CHAR (REC_C_POLICY.COMM_DATE,
                                                      'DD-MON-'
                                                     )
                                          || TO_CHAR (I + 1),
                                          'DD-MM-RRRR'
                                         ) <= REC_C_POLICY.LAST_PAID_DATE
                                 THEN
                                    V_RUNNING_AGE :=
                                       FLOOR
                                          (  (MONTHS_BETWEEN
                                                 (TO_DATE
                                                     (   TO_CHAR
                                                            (REC_C_POLICY.COMM_DATE,
                                                             'DD-MON-'
                                                            )
                                                      || TO_CHAR (I + 1),
                                                      'DD-MM-RRRR'
                                                     ),
                                                  REC_C_POLICY.COMM_DATE
                                                 )
                                             )
                                           / 3
                                          );
                                 ELSE
                                    SELECT FLOOR
                                              (  (MONTHS_BETWEEN
                                                     (TO_DATE
                                                         (   TO_CHAR
                                                                (ADD_MONTHS
                                                                    (REC_C_POLICY.LAST_PAID_DATE,
                                                                     3
                                                                    ),
                                                                 'DD-MON-'
                                                                )
                                                          || TO_CHAR (I + 1),
                                                          'DD-MM-RRRR'
                                                         ),
                                                      REC_C_POLICY.COMM_DATE
                                                     )
                                                 )
                                               / 3
                                              )
                                      INTO V_RUNNING_AGE
                                      FROM DUAL;
                                 END IF;
                              ELSIF V_BON_CAL_MODE = '04'
                              THEN
                                 IF TO_DATE
                                         (   TO_CHAR (REC_C_POLICY.COMM_DATE,
                                                      'DD-MON-'
                                                     )
                                          || TO_CHAR (I + 1),
                                          'DD-MM-RRRR'
                                         ) <= REC_C_POLICY.LAST_PAID_DATE
                                 THEN
                                    V_RUNNING_AGE :=
                                       MONTHS_BETWEEN
                                          (TO_DATE
                                              (   TO_CHAR
                                                      (REC_C_POLICY.COMM_DATE,
                                                       'DD-MON-'
                                                      )
                                               || TO_CHAR (I + 1),
                                               'DD-MM-RRRR'
                                              ),
                                           REC_C_POLICY.COMM_DATE
                                          );
                                 ELSE
                                    SELECT MONTHS_BETWEEN
                                              (TO_DATE
                                                  (   TO_CHAR
                                                         (ADD_MONTHS
                                                             (REC_C_POLICY.LAST_PAID_DATE,
                                                              1
                                                             ),
                                                          'DD-MON-'
                                                         )
                                                   || TO_CHAR (I + 1),
                                                   'DD-MM-RRRR'
                                                  ),
                                               REC_C_POLICY.COMM_DATE
                                              )
                                      INTO V_RUNNING_AGE
                                      FROM DUAL;
                                 END IF;
                              END IF;

                              V_RUNNING_AGE := (V_RUNNING_AGE - V_REDUCE_YR);

                              
                              SELECT COUNT (1)
                                INTO V_COUNT
                                FROM INS_BONUS_AVAILABLE
                               WHERE BONUS_CD = P_BONUS_CD
                                 AND TERM = REC_C_POLICY.TERM
                                 AND MIN_RUNNING_AGE <= V_TOTAL_RUNNING_AGE
                                 
                                 AND PRODUCT_CD = REC_C_POLICY.PRODUCT_CD
                                 AND (   (    ANF_LOAN_USE = '0'
                                          AND ANF_LOAN_USE =
                                                 DECODE
                                                    (TO_CHAR
                                                          (P_NO_OF_ANF_LOAN_YR),
                                                     '0', '0',
                                                     '1'
                                                    )
                                         )
                                      OR (ANF_LOAN_USE = '1')
                                     );

                              IF V_COUNT > 0
                              THEN
                                 IF P_BONUS_CD = '01'
                                 THEN
                                    
                                    IF REC_C_POLICY.POLICY_TP_CD != '04'
                                    
                                    THEN
                                       V_PAID_BONUS_AMT := 0;
                                    ELSE
                                       
                                       V_DEDUCT_BONUS_AMOUNT := 0;
                                       V_RUNNING_AGE_BONUS_AMOUNT := 0;

                                       DECLARE
                                          CURSOR C_SB
                                          IS
                                             SELECT DISTINCT PERCENTAGE,
                                                             PAYMENT_YEAR
                                                        FROM CLM_PRODUCT_CLAIM_DETL
                                                       WHERE PRODUCT_CD =
                                                                REC_C_POLICY.PRODUCT_CD
                                                         AND CLM_CAUSE_CD =
                                                                          '02'
                                                         AND CLM_DETL_CD =
                                                                          '02'
                                                         AND BEN_PARTY_CD =
                                                                          '03'
                                                         AND REC_C_POLICY.TERM
                                                                BETWEEN POLICY_TERM_FR
                                                                    AND POLICY_TERM_TO
                                                         AND PAYMENT_YEAR <
                                                                 V_RUNNING_AGE
                                                    ORDER BY PAYMENT_YEAR ASC;

                                          REC_C_SB     C_SB%ROWTYPE;
                                          V_SB_COUNT   NUMBER         := 0;
                                          V_SB_SL      NUMBER         := 0;
                                       BEGIN
                                          SELECT COUNT (DISTINCT PERCENTAGE
                                                         || PAYMENT_YEAR
                                                       )
                                            INTO V_SB_COUNT
                                            FROM CLM_PRODUCT_CLAIM_DETL
                                           WHERE PRODUCT_CD =
                                                       REC_C_POLICY.PRODUCT_CD
                                             AND CLM_CAUSE_CD = '02'
                                             AND CLM_DETL_CD = '02'
                                             AND BEN_PARTY_CD = '03'
                                             AND REC_C_POLICY.TERM
                                                    BETWEEN POLICY_TERM_FR
                                                        AND POLICY_TERM_TO
                                             AND PAYMENT_YEAR < V_RUNNING_AGE;

                                          OPEN C_SB;

                                          LOOP
                                             FETCH C_SB
                                              INTO REC_C_SB;

                                             EXIT WHEN C_SB%NOTFOUND;
                                             V_SB_SL := V_SB_SL + 1;

                                            
                                             IF V_RUNNING_AGE >
                                                        REC_C_SB.PAYMENT_YEAR
                                             THEN
                                                V_DEDUCT_BONUS_AMOUNT :=
                                                     V_DEDUCT_BONUS_AMOUNT
                                                   +   (  (POWER
                                                              ((  1
                                                                + (  V_BONUS_RATE
                                                                   / V_CAL_PARA
                                                                  )
                                                               ),
                                                                 V_RUNNING_AGE
                                                               - REC_C_SB.PAYMENT_YEAR
                                                              )
                                                          )
                                                        - 1
                                                       )
                                                     * (  REC_C_SB.PERCENTAGE
                                                        / 100
                                                       )
                                                     * V_SUM_ASSURED; --REC_C_POLICY.SUM_ASSURED;
                                             END IF;

                                             V_SB_COUNT := V_SB_COUNT - 1;
                                          END LOOP;

                                          CLOSE C_SB;
                                       END;
                                    END IF;

                                    IF REC_C_POLICY.POLICY_TP_CD != '06'
                                    THEN
                                       V_RUNNING_AGE_BONUS_AMOUNT :=
                                          ROUND
                                             (  (  V_SUM_ASSURED ---REC_C_POLICY.SUM_ASSURED
                                                 * (  (  (  (  (  (POWER
                                                                      ((  1
                                                                        + (  V_BONUS_RATE
                                                                           / V_CAL_PARA
                                                                          )
                                                                       ),
                                                                       V_RUNNING_AGE
                                                                      )
                                                                  )
                                                                - 1
                                                               )
                                                             / (  V_BONUS_RATE
                                                                / V_CAL_PARA
                                                               )
                                                            )
                                                          * (  1
                                                             + (  V_BONUS_RATE
                                                                / V_CAL_PARA
                                                               )
                                                            )
                                                         )
                                                       - V_RUNNING_AGE
                                                      )
                                                    / REC_C_POLICY.TERM
                                                   )
                                                )
                                              - V_DEDUCT_BONUS_AMOUNT
                                             );
                                    ELSE
                                       
                                       IF P_APPLICABLE_ON = '4'
                                       THEN
                                          
                                          V_RUNNING_AGE_BONUS_AMOUNT :=
                                             ROUND
                                                (  V_SUM_ASSURED  ---REC_C_POLICY.SUM_ASSURED
                                                 * (  (  (  (  (  (  POWER
                                                                        ((  1
                                                                          + (  V_BONUS_RATE
                                                                             / V_CAL_PARA
                                                                            )
                                                                         ),
                                                                         FLOOR
                                                                            (  V_RUNNING_AGE
                                                                             / 12
                                                                            )
                                                                        )
                                                                   - 1
                                                                  )
                                                                / (  V_BONUS_RATE
                                                                   / V_CAL_PARA
                                                                  )
                                                               )
                                                             * (  1
                                                                + (  V_BONUS_RATE
                                                                   / V_CAL_PARA
                                                                  )
                                                               )
                                                            )
                                                          - FLOOR
                                                               (  V_RUNNING_AGE
                                                                / 12
                                                               )
                                                         )
                                                       / REC_C_POLICY.TERM
                                                      )
                                                    +   (  (  (  (  (  (  (  POWER
                                                                                ((  1
                                                                                  + (  V_BONUS_RATE
                                                                                     / V_CAL_PARA
                                                                                    )
                                                                                 ),
                                                                                 (  FLOOR
                                                                                       (  V_RUNNING_AGE
                                                                                        / 12
                                                                                       )
                                                                                  + 1
                                                                                 )
                                                                                )
                                                                           - 1
                                                                          )
                                                                        / (  V_BONUS_RATE
                                                                           / V_CAL_PARA
                                                                          )
                                                                       )
                                                                     * (  1
                                                                        + (  V_BONUS_RATE
                                                                           / V_CAL_PARA
                                                                          )
                                                                       )
                                                                    )
                                                                  - (  FLOOR
                                                                          (  V_RUNNING_AGE
                                                                           / 12
                                                                          )
                                                                     + 1
                                                                    )
                                                                 )
                                                               / REC_C_POLICY.TERM
                                                              )
                                                            - (  (  (  (  (  POWER
                                                                                ((  1
                                                                                  + (  V_BONUS_RATE
                                                                                     / V_CAL_PARA
                                                                                    )
                                                                                 ),
                                                                                 FLOOR
                                                                                    (  V_RUNNING_AGE
                                                                                     / 12
                                                                                    )
                                                                                )
                                                                           - 1
                                                                          )
                                                                        / (  V_BONUS_RATE
                                                                           / V_CAL_PARA
                                                                          )
                                                                       )
                                                                     * (  1
                                                                        + (  V_BONUS_RATE
                                                                           / V_CAL_PARA
                                                                          )
                                                                       )
                                                                    )
                                                                  - FLOOR
                                                                       (  V_RUNNING_AGE
                                                                        / 12
                                                                       )
                                                                 )
                                                               / REC_C_POLICY.TERM
                                                              )
                                                           )
                                                         / 12
                                                        )
                                                      * (  V_RUNNING_AGE
                                                         - (  FLOOR
                                                                 (  V_RUNNING_AGE
                                                                  / 12
                                                                 )
                                                            * 12
                                                           )
                                                        )
                                                   )
                                                );
                                       ELSIF P_APPLICABLE_ON IN
                                                    ('1', '2', '3', '5', '6')
                                       THEN
                                          
                                          V_RUNNING_AGE_BONUS_AMOUNT :=
                                             ROUND
                                                (  (  V_SUM_ASSURED   ---REC_C_POLICY.SUM_ASSURED
                                                    * (  (  (  (  (  (POWER
                                                                         ((  1
                                                                           + (  V_BONUS_RATE
                                                                              / V_CAL_PARA
                                                                             )
                                                                          ),
                                                                          FLOOR
                                                                             (  V_RUNNING_AGE
                                                                              / 12
                                                                             )
                                                                         )
                                                                     )
                                                                   - 1
                                                                  )
                                                                / (  V_BONUS_RATE
                                                                   / V_CAL_PARA
                                                                  )
                                                               )
                                                             * (  1
                                                                + (  V_BONUS_RATE
                                                                   / V_CAL_PARA
                                                                  )
                                                               )
                                                            )
                                                          - FLOOR
                                                               (  V_RUNNING_AGE
                                                                / 12
                                                               )
                                                         )
                                                       / REC_C_POLICY.TERM
                                                      )
                                                   )
                                                 - V_DEDUCT_BONUS_AMOUNT
                                                );
                                       END IF;
                                    END IF;

                                    BEGIN
                                       SELECT RUNNING_AGE_BONUS
                                         INTO V_PRE_YR_BONUS_AMOUNT
                                         FROM INS_POLICY_BONUS
                                        WHERE PGID = P_PGID
                                          AND BONUS_RECEIVING_YR = (I - 1)
                                          AND BONUS_CD = P_BONUS_CD;
                                    EXCEPTION
                                       WHEN OTHERS
                                       THEN
                                          V_PRE_YR_BONUS_AMOUNT := 0;
                                    END;

                                    V_BONUS_AMOUNT :=
                                         V_RUNNING_AGE_BONUS_AMOUNT
                                       - V_PRE_YR_BONUS_AMOUNT;
                                 ELSIF P_BONUS_CD = '02'
                                 THEN
                                    
                                    BEGIN
                                       SELECT RUNNING_AGE_BONUS
                                         INTO V_PRE_RUNNING_AGE_BONUS
                                         FROM INS_POLICY_BONUS
                                        WHERE PGID = P_PGID
                                          AND BONUS_RECEIVING_YR = (I - 1)
                                          AND BONUS_CD = P_BONUS_CD;
                                    EXCEPTION
                                       WHEN OTHERS
                                       THEN
                                          V_PRE_YR_BONUS_AMOUNT := 0;
                                    END;

                                    IF V_CAL_METHOD = 1
                                    THEN
                                       
                                       V_BONUS_AMOUNT :=
                                          ROUND (  (  V_SUM_ASSURED  -----REC_C_POLICY.SUM_ASSURED
                                                    * V_BONUS_RATE
                                                   )
                                                 / V_CAL_PARA
                                                );
                                       V_RUNNING_AGE_BONUS_AMOUNT :=
                                            V_BONUS_AMOUNT
                                          + V_PRE_RUNNING_AGE_BONUS;
                                    ELSIF V_CAL_METHOD = 2
                                    THEN
                                       
                                       BEGIN
                                          SELECT BONUS_AMT
                                            INTO V_PRE_YR_BONUS_AMOUNT
                                            FROM INS_POLICY_BONUS
                                           WHERE PGID = P_PGID
                                             AND BONUS_RECEIVING_YR = (I - 1)
                                             AND BONUS_CD = P_BONUS_CD;
                                       EXCEPTION
                                          WHEN OTHERS
                                          THEN
                                             V_PRE_YR_BONUS_AMOUNT := 0;
                                       END;

                                       V_BONUS_AMOUNT :=
                                          ROUND
                                               (  (  (  V_SUM_ASSURED  ----REC_C_POLICY.SUM_ASSURED
                                                      + V_PRE_YR_BONUS_AMOUNT
                                                     )
                                                   * V_BONUS_RATE
                                                  )
                                                / V_CAL_PARA
                                               );
                                       V_RUNNING_AGE_BONUS_AMOUNT :=
                                                                V_BONUS_AMOUNT;
                                    ELSE
                                       NULL;
                                    END IF;
                                 ELSIF P_BONUS_CD = '03'
                                 THEN
                                    
                                    IF V_CAL_METHOD = 1
                                    THEN
                                       
                                       V_BONUS_AMOUNT :=
                                          ROUND (  (  V_SUM_ASSURED -----REC_C_POLICY.SUM_ASSURED
                                                    * V_BONUS_RATE
                                                   )
                                                 / V_CAL_PARA
                                                );
                                    ELSIF V_CAL_METHOD = 2
                                    THEN
                                       
                                       BEGIN
                                          SELECT BONUS_AMT
                                            INTO V_PRE_YR_BONUS_AMOUNT
                                            FROM INS_POLICY_BONUS
                                           WHERE PGID = P_PGID
                                             AND BONUS_RECEIVING_YR = (I - 1)
                                             AND BONUS_CD = P_BONUS_CD;
                                       EXCEPTION
                                          WHEN OTHERS
                                          THEN
                                             V_PRE_YR_BONUS_AMOUNT := 0;
                                       END;

                                       V_BONUS_AMOUNT :=
                                          ROUND
                                               (  (  (  V_SUM_ASSURED   -----REC_C_POLICY.SUM_ASSURED
                                                      + V_PRE_YR_BONUS_AMOUNT
                                                     )
                                                   * V_BONUS_RATE
                                                  )
                                                / V_CAL_PARA
                                               );
                                    ELSE
                                       NULL;
                                    END IF;

                                    V_RUNNING_AGE_BONUS_AMOUNT :=
                                                                V_BONUS_AMOUNT;
                                 ELSE
                                    NULL;
                                 END IF;

                                 IF V_BONUS_AMOUNT > 0
                                 THEN
                                    INSERT INTO INS_POLICY_BONUS
                                                (BONUS_RECEIVING_YR,
                                                 BONUS_ALLOCATION_DT,
                                                 PGID,
                                                 PRODUCT_CD,
                                                 SUM_ASSURED,
                                                 POLICY_AGE,
                                                 BONUS_PERC, BONUS_YR,
                                                 BONUS_AMT, I_USR,
                                                 I_DT, APPLICABLE_ON,
                                                 BONUS_CD,
                                                 RUNNING_AGE_BONUS
                                                )
                                         VALUES (I,
                                                 TRUNC (SYSDATE),
                                                 REC_C_POLICY.PGID,
                                                 REC_C_POLICY.PRODUCT_CD,
                                                 V_SUM_ASSURED,  ---REC_C_POLICY.SUM_ASSURED,
                                                 V_RUNNING_AGE,
                                                 V_BONUS_RATE, I,
                                                 V_BONUS_AMOUNT, P_USR,
                                                 SYSDATE, P_APPLICABLE_ON,
                                                 P_BONUS_CD,
                                                 V_RUNNING_AGE_BONUS_AMOUNT
                                                );

                                    V_COMPLETE_RECORD := V_COMPLETE_RECORD + 1;
                                 END IF;
                              ELSE
                                 V_UNAVAILABLE_BONUS :=
                                                      V_UNAVAILABLE_BONUS + 1;
                              END IF;
                           EXCEPTION
                              WHEN OTHERS
                              THEN
                                 V_UNAVAILABLE_BONUS_RATE :=
                                                 V_UNAVAILABLE_BONUS_RATE + 1;
                           END;
                        END IF;
                     END IF;
                  ELSE
                     NULL;
                  END IF;
               END IF;
            END LOOP;

            IF P_BONUS_YR IS NULL
            THEN
               V_CALCULATED_BONUS_YR :=
                                      V_BONUS_YR_FROM || '-' || V_BONUS_YR_TO;
            ELSE
               V_CALCULATED_BONUS_YR := P_BONUS_YR;
            END IF;
         END IF;

         V_COUNTER := V_COUNTER + 1;
      END LOOP;

      CLOSE C_POLICY;

      P_PROCESS_ST := '1';
      P_OUTPUT :=
            V_BONUS_NM
         || ' Calculation has been completed on year of:'
         || V_CALCULATED_BONUS_YR
         || '.'
         || 'Total fetch record is: '
         || V_COUNTER
         || ',Bonus calculated record is: '
         || V_COMPLETE_RECORD
         || ',Failed due to unavailable bonus is: '
         || V_UNAVAILABLE_BONUS
         || ',Failed Due to bonus rate is: '
         || V_UNAVAILABLE_BONUS_RATE
         || '.';
   ELSE
      P_PROCESS_ST := '0';
      P_OUTPUT :=
            'There is no circular of reagrding bonus on year of '
         || V_CALCULATED_BONUS_YR;
   END IF;
END;
/


--
-- PRO_POLICY_BONUS_CAL_SETL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_bonus_cal_setl (
   P_PGID                 IN     VARCHAR2,
   P_BONUS_YR             IN     NUMBER,
   P_APPLICABLE_ON        IN     CHAR,
   P_NO_OF_ANF_LOAN_YR    IN     NUMBER,
   P_USR                  IN     VARCHAR2,
   P_IRG_BONUS_BAR_DATE   IN     DATE,
   P_OUTPUT                  OUT VARCHAR2,
   P_PROCESS_ST              OUT CHAR
)
IS
   CURSOR C_BONUS
   IS
        SELECT   BONUS_CD
          FROM   INS_BONUS_TYPE
         WHERE   STATUS = '1'
      ORDER BY   BONUS_CD;

   REC_C_BONUS    C_BONUS%ROWTYPE;
   V_OUTPUT       VARCHAR2 (400);
   V_PROCESS_ST   CHAR (1);
BEGIN
   OPEN C_BONUS;

   LOOP
      FETCH C_BONUS INTO   REC_C_BONUS;

      EXIT WHEN C_BONUS%NOTFOUND;
      PRO_POLICY_BONUS_CAL (P_PGID                 => P_PGID,
                            P_BONUS_YR             => P_BONUS_YR,
                            P_BONUS_CD             => REC_C_BONUS.BONUS_CD,
                            P_APPLICABLE_ON        => P_APPLICABLE_ON,
                            P_NO_OF_ANF_LOAN_YR    => P_NO_OF_ANF_LOAN_YR,
                            P_USR                  => P_USR,
                            P_IRG_BONUS_BAR_DATE   => P_IRG_BONUS_BAR_DATE,
                            P_OUTPUT               => V_OUTPUT,
                            P_PROCESS_ST           => V_PROCESS_ST);
   END LOOP;

   CLOSE C_BONUS;

   COMMIT;
END;
/


--
-- PRO_POLICY_BONUS_CAL_VAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_bonus_cal_val (
   p_pgid                 IN     VARCHAR2,
   p_comm_date            IN     DATE,
   p_term                 IN     NUMBER,
   p_product_cd           IN     VARCHAR2,
   p_sum_assured          IN     NUMBER,
   p_paidup_value         IN     NUMBER,
   p_policy_tp_cd         IN     VARCHAR2,
   p_applicable_on        IN     CHAR,
   ---Here 1= Death Claim, 2=Matured Calim,3=Paidup Maturity, 4 = Surrender
   p_no_of_anf_loan_yr    IN     NUMBER:= 0,
   p_policy_status        IN     VARCHAR2,
   p_max_payment_dt       IN     DATE,
   p_irg_bonus_bar_date   IN     DATE,             --same as  p_max_payment_dt
   p_last_paid_date       IN     DATE,
   p_pay_mode_cd          IN     VARCHAR2,
   p_last_paid_inst_no    IN     NUMBER,
   p_rb_bonus                OUT NUMBER,
   p_arb_bonus               OUT NUMBER,
   p_tb_bonus                OUT NUMBER
)
IS
   v_count                      NUMBER := 0;
   --v_unavailable_bonus          NUMBER                                   := 0;
   v_bonus_rate                 ins_yr_bonus.bonus_rate%TYPE;
   --v_unavailable_bonus_rate     NUMBER                                   := 0;
   v_cal_para                   ins_bonus_type.cal_para%TYPE;
   v_cal_method                 ins_bonus_type.cal_method%TYPE;
   v_bonus_amount               NUMBER;
   v_pre_yr_bonus_amount        ins_policy_bonus.bonus_amt%TYPE := 0;
   v_deduct_bonus_amount        ins_policy_bonus.bonus_amt%TYPE := 0;
   v_running_age_bonus_amount   NUMBER (10) := 0;
   v_paid_bonus_amt             NUMBER (10);
   --v_bonus_nm                   ins_bonus_type.bonus_nm%TYPE;
   v_complete_record            NUMBER := 0;
   v_bon_cal_mode               VARCHAR2 (2);
   v_running_age                NUMBER (10);
   v_pre_running_age_bonus      NUMBER := 0;
   v_diff_type                  ins_pol_bonus_irglr_policy.diff_type%TYPE;
   v_diff_dep_on_fr             ins_pol_bonus_irglr_policy.diff_dep_on_fr%TYPE;
   v_diff_dep_on_to             ins_pol_bonus_irglr_policy.diff_dep_on_to%TYPE;
   v_duration                   ins_pol_bonus_irglr_policy.DURATION%TYPE;
   v_no_of_bonus_yr             ins_pol_bonus_irglr_policy.no_of_bonus_yr%TYPE;
   v_irregual_paid_inst         NUMBER (10) := 0;
   v_regual_paid_inst           NUMBER (10) := 0;
   v_regualr_bonus_year         NUMBER (10) := 0;
   v_regualr_paid_ac_inst       NUMBER (10) := 0;
   v_irrg_bonus_yr              NUMBER (10) := 0;
   v_bonus_yr_from              NUMBER (4);
   v_bonus_yr_to                NUMBER (4);
   v_total_running_age          NUMBER (10);
   v_error_irg                  CHAR (1) := '0';
   v_yr_wise_bon                NUMBER := 0;
   v_calculated_bonus_yr        VARCHAR2 (20);
   v_reduce_yr                  NUMBER;
   v_dod                        DATE;
   v_dod_tot_running_age        NUMBER (10);
   p_bonus_cd                   VARCHAR2 (2);
   v_rb_bonus                   NUMBER (10) := 0;
   v_arb_bonus                  NUMBER (10) := 0;
   v_tb_bonus                   NUMBER (10) := 0;
   p_bonus_yr                   NUMBER := NULL;
BEGIN
   FOR i IN (  SELECT   bonus_cd
                 FROM   ins_bonus_type
                WHERE   bonus_cd IN ('01', '02', '03')
             ORDER BY   bonus_cd)
   LOOP
      p_bonus_cd := i.bonus_cd;

      BEGIN
         IF p_last_paid_date < p_max_payment_dt
         THEN
            v_irregual_paid_inst := 0;
         ELSE
            SELECT   diff_type,
                     diff_dep_on_fr,
                     diff_dep_on_to,
                     DURATION,
                     no_of_bonus_yr
              INTO   v_diff_type,
                     v_diff_dep_on_fr,
                     v_diff_dep_on_to,
                     v_duration,
                     v_no_of_bonus_yr
              FROM   ins_pol_bonus_irglr_policy
             WHERE       bonus_cd = p_bonus_cd
                     AND payment_type = '1'
                     AND pay_mode_cd = p_pay_mode_cd
                     AND applicable_on IN (p_applicable_on, '6');

            SELECT   COUNT (1)
              INTO   v_irregual_paid_inst
              FROM   ins_prem_acc_receivable
             WHERE   pgid = p_pgid AND NVL (return_st, '0') = '0'
                     AND payment_date >
                           CASE
                              WHEN v_diff_type = '1'
                              THEN
                                 (p_irg_bonus_bar_date - v_duration)
                              WHEN v_diff_type = '2'
                              THEN
                                 ADD_MONTHS (p_irg_bonus_bar_date,
                                             -v_duration)
                              ELSE
                                 ADD_MONTHS (p_irg_bonus_bar_date,
                                             - (v_duration * 12))
                           END;
         END IF;

         IF v_irregual_paid_inst > 1
         THEN
            v_regual_paid_inst := p_last_paid_inst_no - v_irregual_paid_inst;

            SELECT   DECODE (p_pay_mode_cd,
                             '01', v_regual_paid_inst / 1,
                             '02', FLOOR (v_regual_paid_inst / 2),
                             '03', FLOOR (v_regual_paid_inst / 4),
                             '04', FLOOR (v_regual_paid_inst / 12),
                             v_regual_paid_inst / 1),
                     DECODE (p_pay_mode_cd,
                             '01', (v_regual_paid_inst / 1) * 1,
                             '02', FLOOR (v_regual_paid_inst / 2) * 2,
                             '03', FLOOR (v_regual_paid_inst / 4) * 4,
                             '04', FLOOR (v_regual_paid_inst / 12) * 12,
                             (v_regual_paid_inst / 1) * 1)
              INTO   v_regualr_bonus_year, v_regualr_paid_ac_inst
              FROM   DUAL;

            SELECT   DECODE (
                        p_pay_mode_cd,
                        '01',
                        ( (p_last_paid_inst_no - v_regualr_paid_ac_inst) / 1),
                        '02',
                        FLOOR (
                           (p_last_paid_inst_no - v_regualr_paid_ac_inst) / 2
                        ),
                        '03',
                        FLOOR (
                           (p_last_paid_inst_no - v_regualr_paid_ac_inst) / 4
                        ),
                        '04',
                        FLOOR( (p_last_paid_inst_no - v_regualr_paid_ac_inst)
                              / 12),
                        ( (p_last_paid_inst_no - v_regualr_paid_ac_inst) / 1)
                     )
              INTO   v_irrg_bonus_yr
              FROM   DUAL;

            IF v_irrg_bonus_yr >= v_no_of_bonus_yr
            THEN
               v_bonus_yr_from := TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'));
               v_bonus_yr_to :=
                  (  TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'))
                   + v_regualr_bonus_year
                   - 1);
               v_total_running_age :=
                  ( (v_bonus_yr_to - v_bonus_yr_from) + 1) * 12;
            ELSE
               v_bonus_yr_from := TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'));
               v_bonus_yr_to :=
                  (  TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'))
                   + v_regualr_bonus_year
                   - 1);
               v_total_running_age :=
                  ( (v_bonus_yr_to - v_bonus_yr_from) + 1) * 12;
            END IF;

            IF v_total_running_age > p_term * 12
            THEN
               v_total_running_age := TO_NUMBER (p_term) * 12;
               v_bonus_yr_to :=
                  (v_bonus_yr_from + FLOOR (v_total_running_age / 12)) - 1;
            END IF;
         ELSE
            v_bonus_yr_from := TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'));

            IF p_policy_tp_cd <> 10
            THEN
               SELECT   MONTHS_BETWEEN (
                           ADD_MONTHS (p_last_paid_date,
                                       DECODE (p_pay_mode_cd,
                                               '01',
                                               12,
                                               '02',
                                               6,
                                               '03',
                                               3,
                                               '04',
                                               1,
                                               '05',
                                               12)),
                           p_comm_date
                        )
                 INTO   v_total_running_age
                 FROM   DUAL;

               v_bonus_yr_to :=
                  (v_bonus_yr_from + FLOOR (v_total_running_age / 12)) - 1;
            ELSE
               v_bonus_yr_to := TO_NUMBER (TO_CHAR (p_last_paid_date, 'RRRR'));
               v_total_running_age :=
                  ( (v_bonus_yr_to - v_bonus_yr_from) + 1) * 12;

               IF v_total_running_age > p_term * 12
               THEN
                  v_total_running_age := TO_NUMBER (p_term) * 12;
                  v_bonus_yr_to :=
                     (v_bonus_yr_from + FLOOR (v_total_running_age / 12)) - 1;
               END IF;
            END IF;
         END IF;

         v_error_irg := 0;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_bonus_yr_from := TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'));

            IF p_policy_tp_cd <> 10
            THEN
               SELECT   MONTHS_BETWEEN (
                           ADD_MONTHS (p_last_paid_date,
                                       DECODE (p_pay_mode_cd,
                                               '01',
                                               12,
                                               '02',
                                               6,
                                               '03',
                                               3,
                                               '04',
                                               1,
                                               '05',
                                               12)),
                           p_comm_date
                        )
                 INTO   v_total_running_age
                 FROM   DUAL;

               v_bonus_yr_to :=
                  v_bonus_yr_from + FLOOR (v_total_running_age / 12) - 1;
            ELSE
               v_bonus_yr_to := TO_NUMBER (TO_CHAR (p_last_paid_date, 'RRRR'));
               v_total_running_age :=
                  ( (v_bonus_yr_to - v_bonus_yr_from) + 1) * 12;

               IF v_total_running_age > p_term * 12
               THEN
                  v_total_running_age := TO_NUMBER (p_term) * 12;
                  v_bonus_yr_to :=
                     (v_bonus_yr_from + FLOOR (v_total_running_age / 12)) - 1;
               END IF;
            END IF;

            v_error_irg := 0;
         WHEN OTHERS
         THEN
            v_error_irg := 1;
      END;

      IF v_error_irg = '0'
      THEN
         v_total_running_age := FLOOR ( (v_total_running_age) / 12);

         IF v_bonus_yr_from < 1997
         THEN
            v_reduce_yr := (1997 - v_bonus_yr_from);
         ELSE
            v_reduce_yr := 0;
         END IF;

         FOR i IN v_bonus_yr_from .. v_bonus_yr_to
         LOOP
            IF (p_bonus_cd = '03' AND i = v_bonus_yr_to)
               OR p_bonus_cd != '03'
            THEN
               IF ( (p_bonus_yr IS NOT NULL AND i = p_bonus_yr)
                   OR (p_bonus_yr IS NULL))
               THEN
                  SELECT   COUNT (1)
                    INTO   v_count
                    FROM   ins_pol_bonus_applicable
                   WHERE       bonus_yr = i
                           AND bonus_cd = p_bonus_cd
                           AND applicable_on IN (p_applicable_on, '6')
                           AND status = '1'
                           AND ( (status_dep = '1'
                                  AND status_cd = p_policy_status)
                                OR (status_dep = '0'));

                  IF v_count > 0
                  THEN
                     BEGIN
                        SELECT   r.bonus_rate,
                                 t.cal_para,
                                 t.cal_method,
                                 r.bon_cal_mode
                          INTO   v_bonus_rate,
                                 v_cal_para,
                                 v_cal_method,
                                 v_bon_cal_mode
                          FROM   ins_yr_bonus r, ins_bonus_type t
                         WHERE   ( (p_bonus_cd = '01' AND r.bonus_yr = i)
                                  OR (p_bonus_cd = '02' AND r.bonus_yr = i)
                                  OR (p_bonus_cd = '03'
                                      AND r.bonus_yr = v_bonus_yr_to))
                                 AND r.bonus_cd = p_bonus_cd
                                 AND r.product_cd = p_product_cd
                                 AND p_term BETWEEN r.term_from AND r.term_to
                                 AND r.status = '1'
                                 AND r.bonus_cd = t.bonus_cd;

                        IF v_bon_cal_mode = '01'
                        THEN
                           v_running_age :=
                              FLOOR( (MONTHS_BETWEEN (
                                         TO_DATE (
                                            TO_CHAR (p_comm_date, 'DD-MON-')
                                            || TO_CHAR (i + 1),
                                            'DD-MM-RRRR'
                                         ),
                                         p_comm_date
                                      ))
                                    / 12);
                        ELSIF v_bon_cal_mode = '02'
                        THEN
                           IF TO_DATE (
                                 TO_CHAR (p_comm_date, 'DD-MON-')
                                 || TO_CHAR (i + 1),
                                 'DD-MM-RRRR'
                              ) <= p_last_paid_date
                           THEN
                              v_running_age :=
                                 FLOOR( (MONTHS_BETWEEN (
                                            TO_DATE (
                                               TO_CHAR (p_comm_date,
                                                        'DD-MON-')
                                               || TO_CHAR (i + 1),
                                               'DD-MM-RRRR'
                                            ),
                                            p_comm_date
                                         ))
                                       / 6);
                           ELSE
                              v_running_age :=
                                 FLOOR( (MONTHS_BETWEEN (
                                            TO_DATE (
                                               TO_CHAR (
                                                  ADD_MONTHS (
                                                     p_last_paid_date,
                                                     6
                                                  ),
                                                  'DD-MON-'
                                               )
                                               || TO_CHAR (i + 1),
                                               'DD-MM-RRRR'
                                            ),
                                            p_comm_date
                                         ))
                                       / 6);
                           END IF;
                        ELSIF v_bon_cal_mode = '03'
                        THEN
                           IF TO_DATE (
                                 TO_CHAR (p_comm_date, 'DD-MON-')
                                 || TO_CHAR (i + 1),
                                 'DD-MM-RRRR'
                              ) <= p_last_paid_date
                           THEN
                              v_running_age :=
                                 FLOOR( (MONTHS_BETWEEN (
                                            TO_DATE (
                                               TO_CHAR (p_comm_date,
                                                        'DD-MON-')
                                               || TO_CHAR (i + 1),
                                               'DD-MM-RRRR'
                                            ),
                                            p_comm_date
                                         ))
                                       / 3);
                           ELSE
                              SELECT   FLOOR( (MONTHS_BETWEEN (
                                                  TO_DATE (
                                                     TO_CHAR (
                                                        ADD_MONTHS (
                                                           p_last_paid_date,
                                                           3
                                                        ),
                                                        'DD-MON-'
                                                     )
                                                     || TO_CHAR (i + 1),
                                                     'DD-MM-RRRR'
                                                  ),
                                                  p_comm_date
                                               ))
                                             / 3)
                                INTO   v_running_age
                                FROM   DUAL;
                           END IF;
                        ELSIF v_bon_cal_mode = '04'
                        THEN
                           IF TO_DATE (
                                 TO_CHAR (p_comm_date, 'DD-MON-')
                                 || TO_CHAR (i + 1),
                                 'DD-MM-RRRR'
                              ) <= p_last_paid_date
                           THEN
                              v_running_age :=
                                 MONTHS_BETWEEN (
                                    TO_DATE (
                                       TO_CHAR (p_comm_date, 'DD-MON-')
                                       || TO_CHAR (i + 1),
                                       'DD-MM-RRRR'
                                    ),
                                    p_comm_date
                                 );
                           ELSE
                              SELECT   MONTHS_BETWEEN (
                                          TO_DATE (
                                             TO_CHAR (
                                                ADD_MONTHS (p_last_paid_date,
                                                            1),
                                                'DD-MON-'
                                             )
                                             || TO_CHAR (i + 1),
                                             'DD-MM-RRRR'
                                          ),
                                          p_comm_date
                                       )
                                INTO   v_running_age
                                FROM   DUAL;
                           END IF;
                        END IF;

                        v_running_age := (v_running_age - v_reduce_yr);

                        SELECT   COUNT (1)
                          INTO   v_count
                          FROM   ins_bonus_available
                         WHERE       bonus_cd = p_bonus_cd
                                 AND term = p_term
                                 AND min_running_age <= v_total_running_age
                                 AND product_cd = p_product_cd
                                 AND ( (anf_loan_use = '0'
                                        AND anf_loan_use =
                                              DECODE (
                                                 TO_CHAR (
                                                    p_no_of_anf_loan_yr
                                                 ),
                                                 '0',
                                                 '0',
                                                 '1'
                                              ))
                                      OR (anf_loan_use = '1'));

                        IF v_count > 0
                        THEN
                           IF p_bonus_cd = '01'
                           THEN
                              IF p_policy_tp_cd != '04'
                              THEN
                                 v_paid_bonus_amt := 0;
                              ELSE
                                 v_deduct_bonus_amount := 0;
                                 v_running_age_bonus_amount := 0;

                                 DECLARE
                                    CURSOR c_sb
                                    IS
                                         SELECT   DISTINCT
                                                  percentage, payment_year
                                           FROM   clm_product_claim_detl
                                          WHERE       product_cd = p_product_cd
                                                  AND clm_cause_cd = '02'
                                                  AND clm_detl_cd = '02'
                                                  AND ben_party_cd = '03'
                                                  AND p_term BETWEEN policy_term_fr
                                                                 AND  policy_term_to
                                                  AND payment_year <
                                                        v_running_age
                                       ORDER BY   payment_year ASC;

                                    rec_c_sb     c_sb%ROWTYPE;
                                    v_sb_count   NUMBER := 0;
                                    v_sb_sl      NUMBER := 0;
                                 BEGIN
                                    SELECT   COUNT (
                                                DISTINCT percentage
                                                         || payment_year
                                             )
                                      INTO   v_sb_count
                                      FROM   clm_product_claim_detl
                                     WHERE       product_cd = p_product_cd
                                             AND clm_cause_cd = '02'
                                             AND clm_detl_cd = '02'
                                             AND ben_party_cd = '03'
                                             AND p_term BETWEEN policy_term_fr
                                                            AND  policy_term_to
                                             AND payment_year < v_running_age;

                                    OPEN c_sb;

                                    LOOP
                                       FETCH c_sb INTO   rec_c_sb;

                                       EXIT WHEN c_sb%NOTFOUND;
                                       v_sb_sl := v_sb_sl + 1;

                                       IF v_running_age >
                                             rec_c_sb.payment_year
                                       THEN
                                          v_deduct_bonus_amount :=
                                             v_deduct_bonus_amount
                                             + ( (POWER (
                                                     (1
                                                      + (v_bonus_rate
                                                         / v_cal_para)),
                                                     v_running_age
                                                     - rec_c_sb.payment_year
                                                  ))
                                                - 1)
                                               * (rec_c_sb.percentage / 100)
                                               * p_sum_assured;
                                       END IF;

                                       v_sb_count := v_sb_count - 1;
                                    END LOOP;

                                    CLOSE c_sb;
                                 END;
                              END IF;

                              IF p_policy_tp_cd != '06'
                              THEN
                                 v_running_age_bonus_amount :=
                                    ROUND( (p_paidup_value
                                            * ( ( ( ( ( (POWER (
                                                            (1
                                                             + (v_bonus_rate
                                                                / v_cal_para)),
                                                            v_running_age
                                                         ))
                                                       - 1)
                                                     / (v_bonus_rate
                                                        / v_cal_para))
                                                   * (1
                                                      + (v_bonus_rate
                                                         / v_cal_para)))
                                                 - v_running_age)
                                               / p_term))
                                          - v_deduct_bonus_amount);
                              ELSE
                                 IF p_applicable_on = '4'
                                 THEN
                                    v_running_age_bonus_amount :=
                                       ROUND(p_paidup_value
                                             * ( ( ( ( ( (POWER (
                                                             (1
                                                              + (v_bonus_rate
                                                                 / v_cal_para)),
                                                             FLOOR(v_running_age
                                                                   / 12)
                                                          )
                                                          - 1)
                                                        / (v_bonus_rate
                                                           / v_cal_para))
                                                      * (1
                                                         + (v_bonus_rate
                                                            / v_cal_para)))
                                                    - FLOOR (
                                                         v_running_age / 12
                                                      ))
                                                  / p_term)
                                                + ( ( ( ( ( ( (POWER (
                                                                  (1
                                                                   + (v_bonus_rate
                                                                      / v_cal_para)),
                                                                  (FLOOR(v_running_age
                                                                         / 12)
                                                                   + 1)
                                                               )
                                                               - 1)
                                                             / (v_bonus_rate
                                                                / v_cal_para))
                                                           * (1
                                                              + (v_bonus_rate
                                                                 / v_cal_para)))
                                                         - (FLOOR(v_running_age
                                                                  / 12)
                                                            + 1))
                                                       / p_term)
                                                     - ( ( ( ( (POWER (
                                                                   (1
                                                                    + (v_bonus_rate
                                                                       / v_cal_para)),
                                                                   FLOOR(v_running_age
                                                                         / 12)
                                                                )
                                                                - 1)
                                                              / (v_bonus_rate
                                                                 / v_cal_para))
                                                            * (1
                                                               + (v_bonus_rate
                                                                  / v_cal_para)))
                                                          - FLOOR(v_running_age
                                                                  / 12))
                                                        / p_term))
                                                   / 12)
                                                  * (v_running_age
                                                     - (FLOOR (
                                                           v_running_age / 12
                                                        )
                                                        * 12))));
                                 ELSIF p_applicable_on IN ('1', '2', '3', '5', '6')
                                 THEN
                                    v_running_age_bonus_amount :=
                                       ROUND( (p_paidup_value
                                               * ( ( ( ( ( (POWER (
                                                               (1
                                                                + (v_bonus_rate
                                                                   / v_cal_para)),
                                                               FLOOR(v_running_age
                                                                     / 12)
                                                            ))
                                                          - 1)
                                                        / (v_bonus_rate
                                                           / v_cal_para))
                                                      * (1
                                                         + (v_bonus_rate
                                                            / v_cal_para)))
                                                    - FLOOR (
                                                         v_running_age / 12
                                                      ))
                                                  / p_term))
                                             - v_deduct_bonus_amount);
                                 END IF;
                              END IF;

                              v_bonus_amount :=
                                 v_running_age_bonus_amount
                                 - v_pre_yr_bonus_amount;
                           ELSIF p_bonus_cd = '02'
                           THEN
                              IF v_cal_method = 1
                              THEN
                                 v_bonus_amount :=
                                    ROUND( (p_sum_assured * v_bonus_rate)
                                          / v_cal_para);
                                 v_running_age_bonus_amount :=
                                    v_bonus_amount + v_pre_running_age_bonus;
                              ELSIF v_cal_method = 2
                              THEN
                                 v_bonus_amount :=
                                    ROUND( ( (p_sum_assured
                                              + v_pre_yr_bonus_amount)
                                            * v_bonus_rate)
                                          / v_cal_para);
                                 v_running_age_bonus_amount := v_bonus_amount;
                              ELSE
                                 NULL;
                              END IF;
                           ELSIF p_bonus_cd = '03'
                           THEN
                              IF v_cal_method = 1
                              THEN
                                 v_bonus_amount :=
                                    ROUND( (p_sum_assured * v_bonus_rate)
                                          / v_cal_para);
                              ELSIF v_cal_method = 2
                              THEN
                                 v_bonus_amount :=
                                    ROUND( ( (p_sum_assured
                                              + v_pre_yr_bonus_amount)
                                            * v_bonus_rate)
                                          / v_cal_para);
                              ELSE
                                 NULL;
                              END IF;

                              v_running_age_bonus_amount := v_bonus_amount;
                           ELSE
                              NULL;
                           END IF;

                           IF v_bonus_amount > 0
                           THEN
                              IF p_bonus_cd = '01'
                              THEN
                                 v_rb_bonus :=
                                    v_rb_bonus + NVL (v_bonus_amount, 0);
                                 v_pre_yr_bonus_amount :=
                                    NVL (v_running_age_bonus_amount, 0);
                              ELSIF p_bonus_cd = '02'
                              THEN
                                 v_arb_bonus :=
                                    v_arb_bonus + NVL (v_bonus_amount, 0);
                                 v_pre_yr_bonus_amount :=
                                    NVL (v_running_age_bonus_amount, 0);
                              ELSIF p_bonus_cd = '03'
                              THEN
                                 v_tb_bonus :=
                                    v_tb_bonus + NVL (v_bonus_amount, 0);
                              END IF;

                              v_bonus_amount := 0;
                           END IF;
                        END IF;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           NULL;
                     END;
                  END IF;
               ELSE
                  NULL;
               END IF;
            END IF;
         END LOOP;
      END IF;
   END LOOP;

   p_rb_bonus := v_rb_bonus;
   p_arb_bonus := v_arb_bonus;
   p_tb_bonus := v_tb_bonus;
END;
/


--
-- PRO_POLICY_BONUS_CAL_VAL_ORG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_bonus_cal_val_org (
   p_pgid                 IN     VARCHAR2,
   p_comm_date            IN     DATE,
   p_term                 IN     NUMBER,
   p_product_cd           IN     VARCHAR2,
   p_sum_assured          IN     NUMBER,
   p_paidup_value         IN     NUMBER,
   p_policy_tp_cd         IN     VARCHAR2,
   p_applicable_on        IN     CHAR,
   ---Here 1= Death Claim, 2=Matured Calim,3=Paidup Maturity, 4 = Surrender
   p_no_of_anf_loan_yr    IN     NUMBER:= 0,
   p_policy_status        IN     VARCHAR2,
   p_max_payment_dt       IN     DATE,
   p_irg_bonus_bar_date   IN     DATE,             --same as  p_max_payment_dt
   p_last_paid_date       IN     DATE,
   p_pay_mode_cd          IN     VARCHAR2,
   p_last_paid_inst_no    IN     NUMBER,
   p_rb_bonus                OUT NUMBER,
   p_arb_bonus               OUT NUMBER,
   p_tb_bonus                OUT NUMBER
)
IS
   v_count                      NUMBER := 0;
   --v_unavailable_bonus          NUMBER                                   := 0;
   v_bonus_rate                 ins_yr_bonus.bonus_rate%TYPE;
   --v_unavailable_bonus_rate     NUMBER                                   := 0;
   v_cal_para                   ins_bonus_type.cal_para%TYPE;
   v_cal_method                 ins_bonus_type.cal_method%TYPE;
   v_bonus_amount               NUMBER;
   v_pre_yr_bonus_amount        ins_policy_bonus.bonus_amt%TYPE := 0;
   v_deduct_bonus_amount        ins_policy_bonus.bonus_amt%TYPE := 0;
   v_running_age_bonus_amount   NUMBER (10) := 0;
   v_paid_bonus_amt             NUMBER (10);
   --v_bonus_nm                   ins_bonus_type.bonus_nm%TYPE;
   v_complete_record            NUMBER := 0;
   v_bon_cal_mode               VARCHAR2 (2);
   v_running_age                NUMBER (10);
   v_pre_running_age_bonus      NUMBER := 0;
   v_diff_type                  ins_pol_bonus_irglr_policy.diff_type%TYPE;
   v_diff_dep_on_fr             ins_pol_bonus_irglr_policy.diff_dep_on_fr%TYPE;
   v_diff_dep_on_to             ins_pol_bonus_irglr_policy.diff_dep_on_to%TYPE;
   v_duration                   ins_pol_bonus_irglr_policy.DURATION%TYPE;
   v_no_of_bonus_yr             ins_pol_bonus_irglr_policy.no_of_bonus_yr%TYPE;
   v_irregual_paid_inst         NUMBER (10) := 0;
   v_regual_paid_inst           NUMBER (10) := 0;
   v_regualr_bonus_year         NUMBER (10) := 0;
   v_regualr_paid_ac_inst       NUMBER (10) := 0;
   v_irrg_bonus_yr              NUMBER (10) := 0;
   v_bonus_yr_from              NUMBER (4);
   v_bonus_yr_to                NUMBER (4);
   v_total_running_age          NUMBER (10);
   v_error_irg                  CHAR (1) := '0';
   v_yr_wise_bon                NUMBER := 0;
   v_calculated_bonus_yr        VARCHAR2 (20);
   v_reduce_yr                  NUMBER;
   v_dod                        DATE;
   v_dod_tot_running_age        NUMBER (10);
   p_bonus_cd                   VARCHAR2 (2);
   v_rb_bonus                   NUMBER (10) := 0;
   v_arb_bonus                  NUMBER (10) := 0;
   v_tb_bonus                   NUMBER (10) := 0;
   p_bonus_yr                   NUMBER := NULL;
BEGIN
   FOR i IN (  SELECT   bonus_cd
                 FROM   ins_bonus_type
                WHERE   bonus_cd IN ('01', '02', '03')
             ORDER BY   bonus_cd)
   LOOP
      p_bonus_cd := i.bonus_cd;

      BEGIN
         IF p_last_paid_date < p_max_payment_dt
         THEN
            v_irregual_paid_inst := 0;
         ELSE
            SELECT   diff_type,
                     diff_dep_on_fr,
                     diff_dep_on_to,
                     DURATION,
                     no_of_bonus_yr
              INTO   v_diff_type,
                     v_diff_dep_on_fr,
                     v_diff_dep_on_to,
                     v_duration,
                     v_no_of_bonus_yr
              FROM   ins_pol_bonus_irglr_policy
             WHERE       bonus_cd = p_bonus_cd
                     AND payment_type = '1'
                     AND pay_mode_cd = p_pay_mode_cd
                     AND applicable_on IN (p_applicable_on, '6');

            SELECT   COUNT (1)
              INTO   v_irregual_paid_inst
              FROM   ins_prem_acc_receivable
             WHERE   pgid = p_pgid AND NVL (return_st, '0') = '0'
                     AND payment_date >
                           CASE
                              WHEN v_diff_type = '1'
                              THEN
                                 (p_irg_bonus_bar_date - v_duration)
                              WHEN v_diff_type = '2'
                              THEN
                                 ADD_MONTHS (p_irg_bonus_bar_date,
                                             -v_duration)
                              ELSE
                                 ADD_MONTHS (p_irg_bonus_bar_date,
                                             - (v_duration * 12))
                           END;
         END IF;

         IF v_irregual_paid_inst > 1
         THEN
            v_regual_paid_inst := p_last_paid_inst_no - v_irregual_paid_inst;

            SELECT   DECODE (p_pay_mode_cd,
                             '01', v_regual_paid_inst / 1,
                             '02', FLOOR (v_regual_paid_inst / 2),
                             '03', FLOOR (v_regual_paid_inst / 4),
                             '04', FLOOR (v_regual_paid_inst / 12),
                             v_regual_paid_inst / 1),
                     DECODE (p_pay_mode_cd,
                             '01', (v_regual_paid_inst / 1) * 1,
                             '02', FLOOR (v_regual_paid_inst / 2) * 2,
                             '03', FLOOR (v_regual_paid_inst / 4) * 4,
                             '04', FLOOR (v_regual_paid_inst / 12) * 12,
                             (v_regual_paid_inst / 1) * 1)
              INTO   v_regualr_bonus_year, v_regualr_paid_ac_inst
              FROM   DUAL;

            SELECT   DECODE (
                        p_pay_mode_cd,
                        '01',
                        ( (p_last_paid_inst_no - v_regualr_paid_ac_inst) / 1),
                        '02',
                        FLOOR (
                           (p_last_paid_inst_no - v_regualr_paid_ac_inst) / 2
                        ),
                        '03',
                        FLOOR (
                           (p_last_paid_inst_no - v_regualr_paid_ac_inst) / 4
                        ),
                        '04',
                        FLOOR( (p_last_paid_inst_no - v_regualr_paid_ac_inst)
                              / 12),
                        ( (p_last_paid_inst_no - v_regualr_paid_ac_inst) / 1)
                     )
              INTO   v_irrg_bonus_yr
              FROM   DUAL;

            IF v_irrg_bonus_yr >= v_no_of_bonus_yr
            THEN
               v_bonus_yr_from := TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'));
               v_bonus_yr_to :=
                  (  TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'))
                   + v_regualr_bonus_year
                   - 1);
               v_total_running_age :=
                  ( (v_bonus_yr_to - v_bonus_yr_from) + 1) * 12;
            ELSE
               v_bonus_yr_from := TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'));
               v_bonus_yr_to :=
                  (  TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'))
                   + v_regualr_bonus_year
                   - 1);
               v_total_running_age :=
                  ( (v_bonus_yr_to - v_bonus_yr_from) + 1) * 12;
            END IF;

            IF v_total_running_age > p_term * 12
            THEN
               v_total_running_age := TO_NUMBER (p_term) * 12;
               v_bonus_yr_to :=
                  (v_bonus_yr_from + FLOOR (v_total_running_age / 12)) - 1;
            END IF;
         ELSE
            v_bonus_yr_from := TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'));

            IF p_policy_tp_cd <> 10
            THEN
               SELECT   MONTHS_BETWEEN (
                           ADD_MONTHS (p_last_paid_date,
                                       DECODE (p_pay_mode_cd,
                                               '01',
                                               12,
                                               '02',
                                               6,
                                               '03',
                                               3,
                                               '04',
                                               1,
                                               '05',
                                               12)),
                           p_comm_date
                        )
                 INTO   v_total_running_age
                 FROM   DUAL;

               v_bonus_yr_to :=
                  (v_bonus_yr_from + FLOOR (v_total_running_age / 12)) - 1;
            ELSE
               v_bonus_yr_to := TO_NUMBER (TO_CHAR (p_last_paid_date, 'RRRR'));
               v_total_running_age :=
                  ( (v_bonus_yr_to - v_bonus_yr_from) + 1) * 12;

               IF v_total_running_age > p_term * 12
               THEN
                  v_total_running_age := TO_NUMBER (p_term) * 12;
                  v_bonus_yr_to :=
                     (v_bonus_yr_from + FLOOR (v_total_running_age / 12)) - 1;
               END IF;
            END IF;
         END IF;

         v_error_irg := 0;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_bonus_yr_from := TO_NUMBER (TO_CHAR (p_comm_date, 'RRRR'));

            IF p_policy_tp_cd <> 10
            THEN
               SELECT   MONTHS_BETWEEN (
                           ADD_MONTHS (p_last_paid_date,
                                       DECODE (p_pay_mode_cd,
                                               '01',
                                               12,
                                               '02',
                                               6,
                                               '03',
                                               3,
                                               '04',
                                               1,
                                               '05',
                                               12)),
                           p_comm_date
                        )
                 INTO   v_total_running_age
                 FROM   DUAL;

               v_bonus_yr_to :=
                  v_bonus_yr_from + FLOOR (v_total_running_age / 12) - 1;
            ELSE
               v_bonus_yr_to := TO_NUMBER (TO_CHAR (p_last_paid_date, 'RRRR'));
               v_total_running_age :=
                  ( (v_bonus_yr_to - v_bonus_yr_from) + 1) * 12;

               IF v_total_running_age > p_term * 12
               THEN
                  v_total_running_age := TO_NUMBER (p_term) * 12;
                  v_bonus_yr_to :=
                     (v_bonus_yr_from + FLOOR (v_total_running_age / 12)) - 1;
               END IF;
            END IF;

            v_error_irg := 0;
         WHEN OTHERS
         THEN
            v_error_irg := 1;
      END;

      IF v_error_irg = '0'
      THEN
         v_total_running_age := FLOOR ( (v_total_running_age) / 12);

         IF v_bonus_yr_from < 1997
         THEN
            v_reduce_yr := (1997 - v_bonus_yr_from);
         ELSE
            v_reduce_yr := 0;
         END IF;

         FOR i IN v_bonus_yr_from .. v_bonus_yr_to
         LOOP
            IF (p_bonus_cd = '03' AND i = v_bonus_yr_to)
               OR p_bonus_cd != '03'
            THEN
               IF ( (p_bonus_yr IS NOT NULL AND i = p_bonus_yr)
                   OR (p_bonus_yr IS NULL))
               THEN
                  SELECT   COUNT (1)
                    INTO   v_count
                    FROM   ins_pol_bonus_applicable
                   WHERE       bonus_yr = i
                           AND bonus_cd = p_bonus_cd
                           AND applicable_on IN (p_applicable_on, '6')
                           AND status = '1'
                           AND ( (status_dep = '1'
                                  AND status_cd = p_policy_status)
                                OR (status_dep = '0'));

                  IF v_count > 0
                  THEN
                     BEGIN
                        SELECT   r.bonus_rate,
                                 t.cal_para,
                                 t.cal_method,
                                 r.bon_cal_mode
                          INTO   v_bonus_rate,
                                 v_cal_para,
                                 v_cal_method,
                                 v_bon_cal_mode
                          FROM   ins_yr_bonus r, ins_bonus_type t
                         WHERE   ( (p_bonus_cd = '01' AND r.bonus_yr = i)
                                  OR (p_bonus_cd = '02' AND r.bonus_yr = i)
                                  OR (p_bonus_cd = '03'
                                      AND r.bonus_yr = v_bonus_yr_to))
                                 AND r.bonus_cd = p_bonus_cd
                                 AND r.product_cd = p_product_cd
                                 AND p_term BETWEEN r.term_from AND r.term_to
                                 AND r.status = '1'
                                 AND r.bonus_cd = t.bonus_cd;

                        IF v_bon_cal_mode = '01'
                        THEN
                           v_running_age :=
                              FLOOR( (MONTHS_BETWEEN (
                                         TO_DATE (
                                            TO_CHAR (p_comm_date, 'DD-MON-')
                                            || TO_CHAR (i + 1),
                                            'DD-MM-RRRR'
                                         ),
                                         p_comm_date
                                      ))
                                    / 12);
                        ELSIF v_bon_cal_mode = '02'
                        THEN
                           IF TO_DATE (
                                 TO_CHAR (p_comm_date, 'DD-MON-')
                                 || TO_CHAR (i + 1),
                                 'DD-MM-RRRR'
                              ) <= p_last_paid_date
                           THEN
                              v_running_age :=
                                 FLOOR( (MONTHS_BETWEEN (
                                            TO_DATE (
                                               TO_CHAR (p_comm_date,
                                                        'DD-MON-')
                                               || TO_CHAR (i + 1),
                                               'DD-MM-RRRR'
                                            ),
                                            p_comm_date
                                         ))
                                       / 6);
                           ELSE
                              v_running_age :=
                                 FLOOR( (MONTHS_BETWEEN (
                                            TO_DATE (
                                               TO_CHAR (
                                                  ADD_MONTHS (
                                                     p_last_paid_date,
                                                     6
                                                  ),
                                                  'DD-MON-'
                                               )
                                               || TO_CHAR (i + 1),
                                               'DD-MM-RRRR'
                                            ),
                                            p_comm_date
                                         ))
                                       / 6);
                           END IF;
                        ELSIF v_bon_cal_mode = '03'
                        THEN
                           IF TO_DATE (
                                 TO_CHAR (p_comm_date, 'DD-MON-')
                                 || TO_CHAR (i + 1),
                                 'DD-MM-RRRR'
                              ) <= p_last_paid_date
                           THEN
                              v_running_age :=
                                 FLOOR( (MONTHS_BETWEEN (
                                            TO_DATE (
                                               TO_CHAR (p_comm_date,
                                                        'DD-MON-')
                                               || TO_CHAR (i + 1),
                                               'DD-MM-RRRR'
                                            ),
                                            p_comm_date
                                         ))
                                       / 3);
                           ELSE
                              SELECT   FLOOR( (MONTHS_BETWEEN (
                                                  TO_DATE (
                                                     TO_CHAR (
                                                        ADD_MONTHS (
                                                           p_last_paid_date,
                                                           3
                                                        ),
                                                        'DD-MON-'
                                                     )
                                                     || TO_CHAR (i + 1),
                                                     'DD-MM-RRRR'
                                                  ),
                                                  p_comm_date
                                               ))
                                             / 3)
                                INTO   v_running_age
                                FROM   DUAL;
                           END IF;
                        ELSIF v_bon_cal_mode = '04'
                        THEN
                           IF TO_DATE (
                                 TO_CHAR (p_comm_date, 'DD-MON-')
                                 || TO_CHAR (i + 1),
                                 'DD-MM-RRRR'
                              ) <= p_last_paid_date
                           THEN
                              v_running_age :=
                                 MONTHS_BETWEEN (
                                    TO_DATE (
                                       TO_CHAR (p_comm_date, 'DD-MON-')
                                       || TO_CHAR (i + 1),
                                       'DD-MM-RRRR'
                                    ),
                                    p_comm_date
                                 );
                           ELSE
                              SELECT   MONTHS_BETWEEN (
                                          TO_DATE (
                                             TO_CHAR (
                                                ADD_MONTHS (p_last_paid_date,
                                                            1),
                                                'DD-MON-'
                                             )
                                             || TO_CHAR (i + 1),
                                             'DD-MM-RRRR'
                                          ),
                                          p_comm_date
                                       )
                                INTO   v_running_age
                                FROM   DUAL;
                           END IF;
                        END IF;

                        v_running_age := (v_running_age - v_reduce_yr);

                        SELECT   COUNT (1)
                          INTO   v_count
                          FROM   ins_bonus_available
                         WHERE       bonus_cd = p_bonus_cd
                                 AND term = p_term
                                 AND min_running_age <= v_total_running_age
                                 AND product_cd = p_product_cd
                                 AND ( (anf_loan_use = '0'
                                        AND anf_loan_use =
                                              DECODE (
                                                 TO_CHAR (
                                                    p_no_of_anf_loan_yr
                                                 ),
                                                 '0',
                                                 '0',
                                                 '1'
                                              ))
                                      OR (anf_loan_use = '1'));

                        IF v_count > 0
                        THEN
                           IF p_bonus_cd = '01'
                           THEN
                              IF p_policy_tp_cd != '04'
                              THEN
                                 v_paid_bonus_amt := 0;
                              ELSE
                                 v_deduct_bonus_amount := 0;
                                 v_running_age_bonus_amount := 0;

                                 DECLARE
                                    CURSOR c_sb
                                    IS
                                         SELECT   DISTINCT
                                                  percentage, payment_year
                                           FROM   clm_product_claim_detl
                                          WHERE       product_cd = p_product_cd
                                                  AND clm_cause_cd = '02'
                                                  AND clm_detl_cd = '02'
                                                  AND ben_party_cd = '03'
                                                  AND p_term BETWEEN policy_term_fr
                                                                 AND  policy_term_to
                                                  AND payment_year <
                                                        v_running_age
                                       ORDER BY   payment_year ASC;

                                    rec_c_sb     c_sb%ROWTYPE;
                                    v_sb_count   NUMBER := 0;
                                    v_sb_sl      NUMBER := 0;
                                 BEGIN
                                    SELECT   COUNT (
                                                DISTINCT percentage
                                                         || payment_year
                                             )
                                      INTO   v_sb_count
                                      FROM   clm_product_claim_detl
                                     WHERE       product_cd = p_product_cd
                                             AND clm_cause_cd = '02'
                                             AND clm_detl_cd = '02'
                                             AND ben_party_cd = '03'
                                             AND p_term BETWEEN policy_term_fr
                                                            AND  policy_term_to
                                             AND payment_year < v_running_age;

                                    OPEN c_sb;

                                    LOOP
                                       FETCH c_sb INTO   rec_c_sb;

                                       EXIT WHEN c_sb%NOTFOUND;
                                       v_sb_sl := v_sb_sl + 1;

                                       IF v_running_age >
                                             rec_c_sb.payment_year
                                       THEN
                                          v_deduct_bonus_amount :=
                                             v_deduct_bonus_amount
                                             + ( (POWER (
                                                     (1
                                                      + (v_bonus_rate
                                                         / v_cal_para)),
                                                     v_running_age
                                                     - rec_c_sb.payment_year
                                                  ))
                                                - 1)
                                               * (rec_c_sb.percentage / 100)
                                               * p_sum_assured;
                                       END IF;

                                       v_sb_count := v_sb_count - 1;
                                    END LOOP;

                                    CLOSE c_sb;
                                 END;
                              END IF;

                              IF p_policy_tp_cd != '06'
                              THEN
                                 v_running_age_bonus_amount :=
                                    ROUND( (p_paidup_value
                                            * ( ( ( ( ( (POWER (
                                                            (1
                                                             + (v_bonus_rate
                                                                / v_cal_para)),
                                                            v_running_age
                                                         ))
                                                       - 1)
                                                     / (v_bonus_rate
                                                        / v_cal_para))
                                                   * (1
                                                      + (v_bonus_rate
                                                         / v_cal_para)))
                                                 - v_running_age)
                                               / p_term))
                                          - v_deduct_bonus_amount);
                              ELSE
                                 IF p_applicable_on = '4'
                                 THEN
                                    v_running_age_bonus_amount :=
                                       ROUND(p_paidup_value
                                             * ( ( ( ( ( (POWER (
                                                             (1
                                                              + (v_bonus_rate
                                                                 / v_cal_para)),
                                                             FLOOR(v_running_age
                                                                   / 12)
                                                          )
                                                          - 1)
                                                        / (v_bonus_rate
                                                           / v_cal_para))
                                                      * (1
                                                         + (v_bonus_rate
                                                            / v_cal_para)))
                                                    - FLOOR (
                                                         v_running_age / 12
                                                      ))
                                                  / p_term)
                                                + ( ( ( ( ( ( (POWER (
                                                                  (1
                                                                   + (v_bonus_rate
                                                                      / v_cal_para)),
                                                                  (FLOOR(v_running_age
                                                                         / 12)
                                                                   + 1)
                                                               )
                                                               - 1)
                                                             / (v_bonus_rate
                                                                / v_cal_para))
                                                           * (1
                                                              + (v_bonus_rate
                                                                 / v_cal_para)))
                                                         - (FLOOR(v_running_age
                                                                  / 12)
                                                            + 1))
                                                       / p_term)
                                                     - ( ( ( ( (POWER (
                                                                   (1
                                                                    + (v_bonus_rate
                                                                       / v_cal_para)),
                                                                   FLOOR(v_running_age
                                                                         / 12)
                                                                )
                                                                - 1)
                                                              / (v_bonus_rate
                                                                 / v_cal_para))
                                                            * (1
                                                               + (v_bonus_rate
                                                                  / v_cal_para)))
                                                          - FLOOR(v_running_age
                                                                  / 12))
                                                        / p_term))
                                                   / 12)
                                                  * (v_running_age
                                                     - (FLOOR (
                                                           v_running_age / 12
                                                        )
                                                        * 12))));
                                 ELSIF p_applicable_on IN ('1', '2', '3', '5', '6')
                                 THEN
                                    v_running_age_bonus_amount :=
                                       ROUND( (p_paidup_value
                                               * ( ( ( ( ( (POWER (
                                                               (1
                                                                + (v_bonus_rate
                                                                   / v_cal_para)),
                                                               FLOOR(v_running_age
                                                                     / 12)
                                                            ))
                                                          - 1)
                                                        / (v_bonus_rate
                                                           / v_cal_para))
                                                      * (1
                                                         + (v_bonus_rate
                                                            / v_cal_para)))
                                                    - FLOOR (
                                                         v_running_age / 12
                                                      ))
                                                  / p_term))
                                             - v_deduct_bonus_amount);
                                 END IF;
                              END IF;

                              v_bonus_amount :=
                                 v_running_age_bonus_amount
                                 - v_pre_yr_bonus_amount;
                           ELSIF p_bonus_cd = '02'
                           THEN
                              IF v_cal_method = 1
                              THEN
                                 v_bonus_amount :=
                                    ROUND( (p_sum_assured * v_bonus_rate)
                                          / v_cal_para);
                                 v_running_age_bonus_amount :=
                                    v_bonus_amount + v_pre_running_age_bonus;
                              ELSIF v_cal_method = 2
                              THEN
                                 v_bonus_amount :=
                                    ROUND( ( (p_sum_assured
                                              + v_pre_yr_bonus_amount)
                                            * v_bonus_rate)
                                          / v_cal_para);
                                 v_running_age_bonus_amount := v_bonus_amount;
                              ELSE
                                 NULL;
                              END IF;
                           ELSIF p_bonus_cd = '03'
                           THEN
                              IF v_cal_method = 1
                              THEN
                                 v_bonus_amount :=
                                    ROUND( (p_sum_assured * v_bonus_rate)
                                          / v_cal_para);
                              ELSIF v_cal_method = 2
                              THEN
                                 v_bonus_amount :=
                                    ROUND( ( (p_sum_assured
                                              + v_pre_yr_bonus_amount)
                                            * v_bonus_rate)
                                          / v_cal_para);
                              ELSE
                                 NULL;
                              END IF;

                              v_running_age_bonus_amount := v_bonus_amount;
                           ELSE
                              NULL;
                           END IF;

                           IF v_bonus_amount > 0
                           THEN
                              IF p_bonus_cd = '01'
                              THEN
                                 v_rb_bonus :=
                                    v_rb_bonus + NVL (v_bonus_amount, 0);
                                 v_pre_yr_bonus_amount :=
                                    NVL (v_running_age_bonus_amount, 0);
                              ELSIF p_bonus_cd = '02'
                              THEN
                                 v_arb_bonus :=
                                    v_arb_bonus + NVL (v_bonus_amount, 0);
                                 v_pre_yr_bonus_amount :=
                                    NVL (v_running_age_bonus_amount, 0);
                              ELSIF p_bonus_cd = '03'
                              THEN
                                 v_tb_bonus :=
                                    v_tb_bonus + NVL (v_bonus_amount, 0);
                              END IF;

                              v_bonus_amount := 0;
                           END IF;
                        END IF;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           NULL;
                     END;
                  END IF;
               ELSE
                  NULL;
               END IF;
            END IF;
         END LOOP;
      END IF;
   END LOOP;

   p_rb_bonus := v_rb_bonus;
   p_arb_bonus := v_arb_bonus;
   p_tb_bonus := v_tb_bonus;
END;
/


--
-- PRO_POLICY_DUE_CREATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_due_creation (
   --p_policy_no   IN       ins_p_proposal.policy_no%TYPE,
   p_pgid     IN       ins_p_summery.pgid%TYPE,
   p_usr      IN       VARCHAR2,
   p_dt       IN       DATE,
   p_errm     OUT      VARCHAR2,
   p_record   OUT      NUMBER
)
IS
   v_yrly_no_inst               ins_pay_mode.yrly_no_inst%TYPE;
   v_due_cnt                    NUMBER (2)                       := 0;

   /******************************************************************************
      NAME:       pro_demand_notc_prep
      PURPOSE:

      REVISIONS:
      Ver        Date          Author                    Description
      ---------  ----------    ------------------------  -------------------------
      1.0        10/18/2009    1.Mohammad Arifur Rahman  Created this procedure.
      2.0        04/28/2010    1.Mohammad Arifur Rahman  Updated this procedure.
      3.0        05/26/2010    1.Mohammad Arifur Rahman  Updated this procedure.
      4.0        12-Oct-2010   1.Mohammad Arifur Rahman  Updated this procedure.
      5.0        26-Jun-2012   Md. Sayadur Rahaman         Update this procedure
      6.0        28-Feb-2015    Syed Md. Musha            Update due date creation

      NOTES:

      Automatically available Auto Replace Keywords:
         Object Name:     pro_demand_notc_prep
         Sysdate:         10/18/2009
         Date and Time:   10/18/2009, 11:31:36 AM, and 10/18/2009 11:31:36 AM
         Username:         (set in TOAD Options, Procedure Editor)
         Table Name:       (set in the "New PL/SQL Object" dialog)

   ******************************************************************************/
   CURSOR policy_due_record
   IS
      SELECT ips.pgid, fun_ins_pgid_to_policy_no (ips.pgid) policy_no,
             ips.installment_premium, ips.policy_status, ipm.yrly_no_inst,
             ips.life_premium, ips.policy_installment, ips.comm_date,
             ips.last_paid_date, ips.sum_assured, ips.product_cd, ips.term,
             ipm.pay_mode_sh_nm pay_mode,
             fun_ins_option (ips.option_cd) option_nm, ips.do_gid do_id,
             ips.dm_gid dm_id, ips.branch_off, ips.sales_off, ips.zonal_off,
             ips.regional_off, ips.agent_id, ips.office_cd,
             ips.next_due_date, ips.last_paid_inst_no, ips.extra_premium,
             ips.pay_mode_cd
        FROM ins_p_summery ips, ins_pay_mode ipm
       WHERE ips.pgid = NVL (p_pgid, ips.pgid)
         AND (   (    p_pgid IS NOT NULL
                  AND ips.policy_status IN
                                         ('00', '01', '03', '06', '08', '09')
                 )
              OR (    p_pgid IS NULL
                  AND (   ips.policy_status IN ('00', '01', '09')
                       OR (    ips.policy_status = '00'
                           AND TO_CHAR (ips.proposal_date, 'rrrr') = '2014'
                          )
                      )
                 )
             )
         AND ips.pay_mode_cd = ipm.pay_mode_cd
                                              --AND TO_char (ips.proposal_date, 'rrrr') < '2014'
                                              /*AND (   p_pgid IS NOT NULL
                                                   OR (    p_pgid IS NULL
                                                       AND NOT EXISTS (SELECT 1
                                                                         FROM ins_prem_acc_receivable r
                                                                        WHERE r.pgid = ips.pgid
                                                                       HAVING MAX (next_due_dt) >= (p_dt + 30))
                                                      )
                                                  )*/
                                                   /*AND ips.pgid NOT IN (SELECT   pgid
                                                       FROM ins_prem_acc_receivable r
                                                   GROUP BY pgid
                                                     HAVING MAX (next_due_dt) >= (p_dt + 30))*/
   ;

   v_policy_due_record          policy_due_record%ROWTYPE;
   v_next_due_date              DATE;
   v_comm_date                  DATE;
   v_total_policy_installment   NUMBER (3);
   v_next_due_inst_no           NUMBER (3);
   v_extra_prem                 NUMBER (10, 2);
   v_due_check                  NUMBER (2)                       := 0;
   v_month_last_day             NUMBER (2)                       := 0;
   v_cur_month_last_day         NUMBER (2)                       := 0;
BEGIN
   p_record := 0;

   IF p_pgid IS NOT NULL
   THEN
      DELETE FROM ins_prem_acc_receivable
            WHERE pgid = p_pgid
              AND pay_status = '0'
              AND proposed_status = '0'
              AND proposer_pk IS NULL
              AND fp_receive_id IS NULL;
   END IF;

   OPEN policy_due_record;

   LOOP
      BEGIN
         FETCH policy_due_record
          INTO v_policy_due_record;

         EXIT WHEN policy_due_record%NOTFOUND;

         ---Musha on 29.03.2017---
         IF p_pgid IS NULL
         THEN
            SELECT COUNT (*)
              INTO v_due_cnt
              FROM ins_prem_acc_receivable r
             WHERE r.pgid = v_policy_due_record.pgid
               AND r.proposed_status = '0'
               AND r.proposer_pk IS NULL
               AND r.fp_receive_id IS NULL
               AND next_due_dt >
                           ADD_MONTHS (v_policy_due_record.last_paid_date, 12);
         END IF;

--------------------------
         IF p_pgid IS NOT NULL OR v_due_cnt = 0
         THEN                                           ---Musha on 29.03.2017
            v_comm_date := v_policy_due_record.comm_date;
            
            SELECT ADD_MONTHS (v_policy_due_record.last_paid_date,
                               DECODE (v_policy_due_record.yrly_no_inst,
                                       1, 12,
                                       2, 6,
                                       4, 3,
                                       12, 1
                                      )
                              )
              INTO v_next_due_date
              FROM DUAL;

            IF TO_NUMBER (TO_CHAR (v_next_due_date, 'DD')) >
                                       TO_NUMBER (TO_CHAR (v_comm_date, 'DD'))
            THEN
               v_next_due_date :=
                  TO_DATE (   TO_CHAR (v_next_due_date, 'RRRRMM')
                           || TO_CHAR (v_comm_date, 'DD'),
                           'RRRRMMDD'
                          );
            END IF;

            v_next_due_inst_no := v_policy_due_record.last_paid_inst_no + 1;
            --v_comm_date := v_policy_due_record.comm_date;
            v_total_policy_installment :=
                                        v_policy_due_record.policy_installment;
            p_errm := 'Success';

            WHILE v_next_due_inst_no <= v_total_policy_installment
             AND (   (    p_pgid IS NOT NULL
                      AND TRUNC (v_next_due_date) <= TRUNC (SYSDATE) + 750
                     )
                  OR (    p_pgid IS NULL
                      AND TRUNC (v_next_due_date) <= TRUNC (SYSDATE) + 400
                     )
                 )
             AND (   p_pgid IS NOT NULL
                  OR (    p_pgid IS NULL
                      AND TRUNC (v_next_due_date) <=
                                      v_policy_due_record.last_paid_date + 365
                     )
                 )
            --"AND TRUNC (v_next_due_date) <=TRUNC (SYSDATE)+ 731" This part is added by Md. Syadur rahaman on 23-Nov-11
            LOOP
               BEGIN
                  SELECT COUNT (1)
                    INTO v_due_check
                    FROM ins_prem_acc_receivable
                   WHERE pgid = v_policy_due_record.pgid
                     AND (   installment_no = v_next_due_inst_no
                          OR next_due_dt = v_next_due_date
                         )
                     AND alt_serail_no = '0';

                  IF v_due_check = 0
                  THEN
                     SELECT   NVL
                                 (fun_supp_product_prem
                                             (v_policy_due_record.pgid,
                                              v_next_due_inst_no,
                                              v_policy_due_record.yrly_no_inst
                                             ),
                                  0
                                 )
                            + NVL
                                 (fun_supp_benifit_prem
                                             (v_policy_due_record.pgid,
                                              v_next_due_inst_no,
                                              v_policy_due_record.yrly_no_inst
                                             ),
                                  0
                                 )
                            + NVL (v_policy_due_record.extra_premium, 0)
                       INTO v_extra_prem
                       FROM DUAL;

                     IF     v_policy_due_record.pay_mode_cd = '05'
                        AND v_next_due_inst_no > 1
                     THEN
                        NULL;
                     ELSE
                        INSERT INTO ins_prem_acc_receivable
                                    (pgid,
                                     installment_premium,
                                     paid_amount,
                                     balance,
                                     pay_status, i_usr, i_dt,
                                     prem_year_status,
                                     sl_no,
                                     policy_status,
                                     installment_no, next_due_dt,
                                     total_installment,
                                     proposed_status, date_of_com,
                                     last_paid_dt,
                                     sum_assured,
                                     pid_term,
                                     pay_mode,
                                     pol_option,
                                     do_id,
                                     dm_id,
                                     branch_off,
                                     sales_off,
                                     zonal_off,
                                     regional_off,
                                     agent_id,
                                     office_cd,
                                     policy_no
                                    )
                             VALUES (v_policy_due_record.pgid,
                                     ROUND (  v_policy_due_record.life_premium
                                            + v_extra_prem
                                           -- this is omitted for alignment with initial due calculation process on 14/03/2018 as per OTRS ticket 2018030644000083- .01
                                           ),
                                     0,
                                     ROUND (  v_policy_due_record.life_premium
                                            + v_extra_prem
                                           -- this is omitted for alignment with initial due calculation process on 14/03/2018 as per OTRS ticket 2018030644000083- .01
                                           ),
                                     0, p_usr, SYSDATE,
                                     DECODE
                                        (CEIL
                                             (  v_next_due_inst_no
                                              / v_policy_due_record.yrly_no_inst
                                             ),
                                         1, 'F',
                                         2, 'S',
                                         'R'
                                        ),
                                     demand_notice_seq.NEXTVAL,
                                     v_policy_due_record.policy_status,
                                     v_next_due_inst_no, v_next_due_date,
                                     v_policy_due_record.policy_installment,
                                     '0', v_policy_due_record.comm_date,
                                     v_policy_due_record.last_paid_date,
                                     v_policy_due_record.sum_assured,
                                        v_policy_due_record.product_cd
                                     || v_policy_due_record.term,
                                     v_policy_due_record.pay_mode,
                                     v_policy_due_record.option_nm,
                                     v_policy_due_record.do_id,
                                     v_policy_due_record.dm_id,
                                     v_policy_due_record.branch_off,
                                     v_policy_due_record.sales_off,
                                     v_policy_due_record.zonal_off,
                                     v_policy_due_record.regional_off,
                                     v_policy_due_record.agent_id,
                                     v_policy_due_record.office_cd,
                                     v_policy_due_record.policy_no
                                    );
                     END IF;
                  END IF;

                  v_next_due_inst_no := v_next_due_inst_no + 1;

                  ---Add Musha on 28-02-2015
                  SELECT TO_NUMBER
                            (TO_CHAR
                                (LAST_DAY
                                    (TO_DATE
                                        (   TO_CHAR
                                               (ADD_MONTHS
                                                   (v_next_due_date,
                                                    DECODE
                                                       (v_policy_due_record.yrly_no_inst,
                                                        1, 12,
                                                        2, 6,
                                                        4, 3,
                                                        12, 1
                                                       )
                                                   ),
                                                'RRRRMM'
                                               )
                                         || '01',
                                         'RRRRMMDD'
                                        )
                                    ),
                                 'DD'
                                )
                            )
                    INTO v_month_last_day
                    FROM DUAL;

                  IF v_month_last_day >=
                                       TO_NUMBER (TO_CHAR (v_comm_date, 'DD'))
                  THEN
                     SELECT TO_DATE
                               (   TO_CHAR (v_comm_date, 'DD')
                                || '-'
                                || TO_CHAR
                                      (ADD_MONTHS
                                          (v_next_due_date,
                                           DECODE
                                              (v_policy_due_record.yrly_no_inst,
                                               1, 12,
                                               2, 6,
                                               4, 3,
                                               12, 1
                                              )
                                          ),
                                       'MON-RRRR'
                                      )
                               )
                       INTO v_next_due_date
                       FROM DUAL;
                  ELSE
                     SELECT TO_DATE
                               (   v_month_last_day
                                || '-'
                                || TO_CHAR
                                      (ADD_MONTHS
                                          (v_next_due_date,
                                           DECODE
                                              (v_policy_due_record.yrly_no_inst,
                                               1, 12,
                                               2, 6,
                                               4, 3,
                                               12, 1
                                              )
                                          ),
                                       'MON-RRRR'
                                      )
                               )
                       INTO v_next_due_date
                       FROM DUAL;
                  END IF;                                --Musha on 19-02-2015
               END;
            END LOOP;

            IF p_errm != 'Fail'
            THEN
               COMMIT;
               p_record := p_record + 1;
            END IF;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;
   END LOOP;

   CLOSE policy_due_record;
END pro_policy_due_creation;
/


--
-- PRO_POLICY_DUE_CREATION_DMG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_due_creation_dmg wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
2980 91b
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
/


--
-- PRO_POLICY_DUE_CREATION_TEST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_due_creation_test (
   --p_policy_no   IN       ins_p_proposal.policy_no%TYPE,
   p_pgid     IN       ins_p_summery.pgid%TYPE,
   p_usr      IN       VARCHAR2,
   p_dt       IN       DATE,
   p_errm     OUT      VARCHAR2,
   p_record   OUT      NUMBER
)
IS
   v_yrly_no_inst               ins_pay_mode.yrly_no_inst%TYPE;
   v_due_cnt                    NUMBER (2)                       := 0;

   /******************************************************************************
      NAME:       pro_demand_notc_prep
      PURPOSE:

      REVISIONS:
      Ver        Date          Author                    Description
      ---------  ----------    ------------------------  -------------------------
      1.0        10/18/2009    1.Mohammad Arifur Rahman  Created this procedure.
      2.0        04/28/2010    1.Mohammad Arifur Rahman  Updated this procedure.
      3.0        05/26/2010    1.Mohammad Arifur Rahman  Updated this procedure.
      4.0        12-Oct-2010   1.Mohammad Arifur Rahman  Updated this procedure.
      5.0        26-Jun-2012   Md. Sayadur Rahaman         Update this procedure
      6.0        28-Feb-2015    Syed Md. Musha            Update due date creation

      NOTES:

      Automatically available Auto Replace Keywords:
         Object Name:     pro_demand_notc_prep
         Sysdate:         10/18/2009
         Date and Time:   10/18/2009, 11:31:36 AM, and 10/18/2009 11:31:36 AM
         Username:         (set in TOAD Options, Procedure Editor)
         Table Name:       (set in the "New PL/SQL Object" dialog)

   ******************************************************************************/
   CURSOR policy_due_record
   IS
      SELECT ips.pgid, fun_ins_pgid_to_policy_no (ips.pgid) policy_no,
             ips.installment_premium, ips.policy_status, ipm.yrly_no_inst,
             ips.life_premium, ips.policy_installment, ips.comm_date,
             ips.last_paid_date, ips.sum_assured, ips.product_cd, ips.term,
             ipm.pay_mode_sh_nm pay_mode,
             fun_ins_option (ips.option_cd) option_nm, ips.do_gid do_id,
             ips.dm_gid dm_id, ips.branch_off, ips.sales_off, ips.zonal_off,
             ips.regional_off, ips.agent_id, ips.office_cd,
             ips.next_due_date, ips.last_paid_inst_no, ips.extra_premium
        FROM ins_p_summery ips, ins_pay_mode ipm
       WHERE ips.pgid = NVL (p_pgid, ips.pgid)
         AND (   (    p_pgid IS NOT NULL
                  AND ips.policy_status IN
                                         ('00', '01', '03', '06', '08', '09')
                 )
              OR (    p_pgid IS NULL
                  AND (   ips.policy_status IN ('00', '01', '09')
                       OR (    ips.policy_status = '00'
                           AND TO_CHAR (ips.proposal_date, 'rrrr') = '2014'
                          )
                      )
                 )
             )
         AND ips.pay_mode_cd = ipm.pay_mode_cd
                                              --AND TO_char (ips.proposal_date, 'rrrr') < '2014'
                                              /*AND (   p_pgid IS NOT NULL
                                                   OR (    p_pgid IS NULL
                                                       AND NOT EXISTS (SELECT 1
                                                                         FROM ins_prem_acc_receivable r
                                                                        WHERE r.pgid = ips.pgid
                                                                       HAVING MAX (next_due_dt) >= (p_dt + 30))
                                                      )
                                                  )*/
                                                   /*AND ips.pgid NOT IN (SELECT   pgid
                                                       FROM ins_prem_acc_receivable r
                                                   GROUP BY pgid
                                                     HAVING MAX (next_due_dt) >= (p_dt + 30))*/
   ;

   v_policy_due_record          policy_due_record%ROWTYPE;
   v_next_due_date              DATE;
   v_comm_date                  DATE;
   v_total_policy_installment   NUMBER (3);
   v_next_due_inst_no           NUMBER (3);
   v_extra_prem                 NUMBER (10, 2);
   v_due_check                  NUMBER (2)                       := 0;
   v_month_last_day             NUMBER (2)                       := 0;
   v_cur_month_last_day         NUMBER (2)                       := 0;
BEGIN
   p_record := 0;

   IF p_pgid IS NOT NULL
   THEN
      DELETE FROM ins_prem_acc_receivable
            WHERE pgid = p_pgid
              AND pay_status = '0'
              AND proposed_status = '0'
              AND proposer_pk IS NULL
              AND fp_receive_id IS NULL;
   END IF;

   OPEN policy_due_record;

   LOOP
      BEGIN
         FETCH policy_due_record
          INTO v_policy_due_record;

         EXIT WHEN policy_due_record%NOTFOUND;

         ---Musha on 29.03.2017---
         IF p_pgid IS NULL
         THEN
            SELECT COUNT (*)
              INTO v_due_cnt
              FROM ins_prem_acc_receivable r
             WHERE r.pgid = v_policy_due_record.pgid
               AND r.proposed_status = '0'
               AND r.proposer_pk IS NULL
               AND r.fp_receive_id IS NULL
               AND next_due_dt >
                           ADD_MONTHS (v_policy_due_record.last_paid_date, 12);
         END IF;

--------------------------
         IF p_pgid IS NOT NULL OR v_due_cnt = 0
         THEN                                           ---Musha on 29.03.2017
            SELECT ADD_MONTHS (v_policy_due_record.last_paid_date,
                               DECODE (v_policy_due_record.yrly_no_inst,
                                       1, 12,
                                       2, 6,
                                       4, 3,
                                       12, 1
                                      )
                              )
              INTO v_next_due_date
              FROM DUAL;

            IF TO_NUMBER (TO_CHAR (v_next_due_date, 'DD')) >
                                       TO_NUMBER (TO_CHAR (v_comm_date, 'DD'))
            THEN
               v_next_due_date :=
                  TO_DATE (   TO_CHAR (v_next_due_date, 'RRRRMM')
                           || TO_CHAR (v_comm_date, 'DD'),
                           'RRRRMMDD'
                          );
            END IF;

            v_next_due_inst_no := v_policy_due_record.last_paid_inst_no + 1;
            v_comm_date := v_policy_due_record.comm_date;
            v_total_policy_installment :=
                                        v_policy_due_record.policy_installment;
            p_errm := 'Success';

            WHILE v_next_due_inst_no <= v_total_policy_installment
             AND (   (    p_pgid IS NOT NULL
                      AND TRUNC (v_next_due_date) <= TRUNC (SYSDATE) + 750
                     )
                  OR (    p_pgid IS NULL
                      AND TRUNC (v_next_due_date) <= TRUNC (SYSDATE) + 400
                     )
                 )
             AND (   p_pgid IS NOT NULL
                  OR (    p_pgid IS NULL
                      AND TRUNC (v_next_due_date) <=
                                      v_policy_due_record.last_paid_date + 365
                     )
                 )
            --"AND TRUNC (v_next_due_date) <=TRUNC (SYSDATE)+ 731" This part is added by Md. Syadur rahaman on 23-Nov-11
            LOOP
               BEGIN
                  SELECT COUNT (1)
                    INTO v_due_check
                    FROM ins_prem_acc_receivable
                   WHERE pgid = v_policy_due_record.pgid
                     AND (   installment_no = v_next_due_inst_no
                          OR next_due_dt = v_next_due_date
                         )
                     AND alt_serail_no = '0';

                  IF v_due_check = 0
                  THEN
                     SELECT   NVL
                                 (fun_supp_product_prem
                                             (v_policy_due_record.pgid,
                                              v_next_due_inst_no,
                                              v_policy_due_record.yrly_no_inst
                                             ),
                                  0
                                 )
                            + NVL
                                 (fun_supp_benifit_prem
                                             (v_policy_due_record.pgid,
                                              v_next_due_inst_no,
                                              v_policy_due_record.yrly_no_inst
                                             ),
                                  0
                                 )
                            + NVL (v_policy_due_record.extra_premium, 0)
                       INTO v_extra_prem
                       FROM DUAL;

                     INSERT INTO ins_prem_acc_receivable
                                 (pgid,
                                  installment_premium,
                                  paid_amount,
                                  balance,
                                  pay_status, i_usr, i_dt,
                                  prem_year_status,
                                  sl_no,
                                  policy_status,
                                  installment_no, next_due_dt,
                                  total_installment,
                                  proposed_status, date_of_com,
                                  last_paid_dt,
                                  sum_assured,
                                  pid_term,
                                  pay_mode,
                                  pol_option,
                                  do_id,
                                  dm_id,
                                  branch_off,
                                  sales_off,
                                  zonal_off,
                                  regional_off,
                                  agent_id,
                                  office_cd,
                                  policy_no
                                 )
                          VALUES (v_policy_due_record.pgid,
                                  ROUND (  v_policy_due_record.life_premium
                                         + v_extra_prem
                                        -- this is omitted for alignment with initial due calculation process on 14/03/2018 as per OTRS ticket 2018030644000083- .01
                                        ),
                                  0,
                                  ROUND (  v_policy_due_record.life_premium
                                         + v_extra_prem
                                        -- this is omitted for alignment with initial due calculation process on 14/03/2018 as per OTRS ticket 2018030644000083- .01
                                        ),
                                  0, p_usr, SYSDATE,
                                  DECODE
                                      (CEIL (  v_next_due_inst_no
                                             / v_policy_due_record.yrly_no_inst
                                            ),
                                       1, 'F',
                                       2, 'S',
                                       'R'
                                      ),
                                  demand_notice_seq.NEXTVAL,
                                  v_policy_due_record.policy_status,
                                  v_next_due_inst_no, v_next_due_date,
                                  v_policy_due_record.policy_installment,
                                  '0', v_policy_due_record.comm_date,
                                  v_policy_due_record.last_paid_date,
                                  v_policy_due_record.sum_assured,
                                     v_policy_due_record.product_cd
                                  || v_policy_due_record.term,
                                  v_policy_due_record.pay_mode,
                                  v_policy_due_record.option_nm,
                                  v_policy_due_record.do_id,
                                  v_policy_due_record.dm_id,
                                  v_policy_due_record.branch_off,
                                  v_policy_due_record.sales_off,
                                  v_policy_due_record.zonal_off,
                                  v_policy_due_record.regional_off,
                                  v_policy_due_record.agent_id,
                                  v_policy_due_record.office_cd,
                                  v_policy_due_record.policy_no
                                 );
                  END IF;

                  v_next_due_inst_no := v_next_due_inst_no + 1;

                  ---Add Musha on 28-02-2015
                  SELECT TO_NUMBER
                            (TO_CHAR
                                (LAST_DAY
                                    (TO_DATE
                                        (   TO_CHAR
                                               (ADD_MONTHS
                                                   (v_next_due_date,
                                                    DECODE
                                                       (v_policy_due_record.yrly_no_inst,
                                                        1, 12,
                                                        2, 6,
                                                        4, 3,
                                                        12, 1
                                                       )
                                                   ),
                                                'RRRRMM'
                                               )
                                         || '01',
                                         'RRRRMMDD'
                                        )
                                    ),
                                 'DD'
                                )
                            )
                    INTO v_month_last_day
                    FROM DUAL;

                  IF v_month_last_day >=
                                       TO_NUMBER (TO_CHAR (v_comm_date, 'DD'))
                  THEN
                     SELECT TO_DATE
                               (   TO_CHAR (v_comm_date, 'DD')
                                || '-'
                                || TO_CHAR
                                      (ADD_MONTHS
                                          (v_next_due_date,
                                           DECODE
                                              (v_policy_due_record.yrly_no_inst,
                                               1, 12,
                                               2, 6,
                                               4, 3,
                                               12, 1
                                              )
                                          ),
                                       'MON-RRRR'
                                      )
                               )
                       INTO v_next_due_date
                       FROM DUAL;
                  ELSE
                     SELECT TO_DATE
                               (   v_month_last_day
                                || '-'
                                || TO_CHAR
                                      (ADD_MONTHS
                                          (v_next_due_date,
                                           DECODE
                                              (v_policy_due_record.yrly_no_inst,
                                               1, 12,
                                               2, 6,
                                               4, 3,
                                               12, 1
                                              )
                                          ),
                                       'MON-RRRR'
                                      )
                               )
                       INTO v_next_due_date
                       FROM DUAL;
                  END IF;                                --Musha on 19-02-2015
               END;
            END LOOP;

            IF p_errm != 'Fail'
            THEN
               COMMIT;
               p_record := p_record + 1;
            END IF;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;
   END LOOP;

   CLOSE policy_due_record;
END pro_policy_due_creation_test;
/


--
-- PRO_POLICY_DUE_CREATION_TMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_due_creation_tmp wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
28f2 975
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
zEwQ/niGGrOa
/


--
-- PRO_POLICY_DUE_PREP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_due_prep (
   P_POLICY_NO   IN     INS_P_PROPOSAL.POLICY_NO%TYPE,
   P_USR         IN     VARCHAR2,
   P_DT          IN     DATE,
   P_ERRM           OUT VARCHAR2,
   P_RECORD         OUT NUMBER
)
IS
   V_YRLY_NO_INST               INS_PAY_MODE.YRLY_NO_INST%TYPE;



   CURSOR DEMAND_NOTICE 
   IS
      SELECT   IPS.PGID,
               FUN_INS_PGID_TO_POLICY_NO (IPS.PGID) POLICY_NO,
               IPS.INSTALLMENT_PREMIUM,
               IPS.POLICY_STATUS,
               (TO_CHAR (IPS.COMM_DATE, 'DD') || '-'
                || TO_CHAR (
                      ADD_MONTHS (IPS.LAST_PAID_DATE,
                                  DECODE (IPM.YRLY_NO_INST,
                                          1,
                                          12,
                                          2,
                                          6,
                                          4,
                                          3,
                                          12,
                                          1)),
                      'MON-RRRR'
                   ))
                  NEXT_DUE_DATE,
               IPM.YRLY_NO_INST,
               IPS.POLICY_INSTALLMENT,
               IPS.COMM_DATE,
               IPS.LAST_PAID_DATE,
               IPS.SUM_ASSURED,
               IPS.PRODUCT_CD,
               IPS.TERM,
               FUN_INS_PAY_MODE (IPS.PAY_MODE_CD) PAY_MODE,
               FUN_INS_OPTION (IPS.OPTION_CD) OPTION_NM,
               F_EMP_ID (IPS.DO_GID) DO_ID,
               F_EMP_ID (IPS.DM_GID) DM_ID,
               IPS.BRANCH_OFF,
               IPS.SALES_OFF,
               IPS.ZONAL_OFF,
               IPS.REGIONAL_OFF,
               IPS.AGENT_ID,
               IPS.OFFICE_CD,
               IPS.LAST_PAID_INST_NO
        FROM   INS_P_SUMMERY IPS, INS_POLICY_STATUS_SETUP J, INS_PAY_MODE IPM
       WHERE       IPS.PGID = FUN_INS_POLICY_NO_TO_PGID (P_POLICY_NO)
               AND IPS.POLICY_INSTALLMENT > IPS.LAST_PAID_INST_NO
               AND IPS.POLICY_STATUS = J.STATUS_CD
               AND IPS.PRODUCT_CD = J.PRODUCT_CD
               AND J.PREPARE_DEMAND_NOTICE = '1'
               AND IPS.PAY_MODE_CD = IPM.PAY_MODE_CD;

   V_DEMAND_NOTICE              DEMAND_NOTICE%ROWTYPE;
   V_NEXT_DUE_DATE              DATE;
   V_COMM_DATE                  DATE;
   V_TOTAL_POLICY_INSTALLMENT   NUMBER (3);

   V_NEXT_DUE_INST_NO           NUMBER (3);
   V_COUNT                      NUMBER (10) := 0;
BEGIN
   P_RECORD := 0;

   OPEN DEMAND_NOTICE;

   LOOP
      FETCH DEMAND_NOTICE INTO   V_DEMAND_NOTICE;

      EXIT WHEN DEMAND_NOTICE%NOTFOUND;
      V_NEXT_DUE_DATE := V_DEMAND_NOTICE.NEXT_DUE_DATE;
      V_NEXT_DUE_INST_NO := V_DEMAND_NOTICE.LAST_PAID_INST_NO + 1;
      V_COMM_DATE := V_DEMAND_NOTICE.COMM_DATE;
      V_TOTAL_POLICY_INSTALLMENT := V_DEMAND_NOTICE.POLICY_INSTALLMENT;

      WHILE V_NEXT_DUE_INST_NO <= V_TOTAL_POLICY_INSTALLMENT
            AND TRUNC (V_NEXT_DUE_DATE) <= TRUNC (SYSDATE) + 731
      LOOP
         BEGIN
            SELECT   COUNT (1)
              INTO   V_COUNT
              FROM   INS_PREM_ACC_RECEIVABLE
             WHERE   PGID = V_DEMAND_NOTICE.PGID
                     AND INSTALLMENT_NO = V_NEXT_DUE_INST_NO;

            BEGIN
               IF V_COUNT = 0
               THEN
                  INSERT INTO INS_PREM_ACC_RECEIVABLE (
                                                          PGID,
                                                          INSTALLMENT_PREMIUM,
                                                          PAID_AMOUNT,
                                                          BALANCE,
                                                          PAY_STATUS,
                                                          I_USR,
                                                          I_DT,
                                                          PREM_YEAR_STATUS,
                                                          SL_NO,
                                                          POLICY_STATUS,
                                                          INSTALLMENT_NO,
                                                          NEXT_DUE_DT,
                                                          TOTAL_INSTALLMENT,
                                                          PROPOSED_STATUS,
                                                          DATE_OF_COM,
                                                          LAST_PAID_DT,
                                                          SUM_ASSURED,
                                                          PID_TERM,
                                                          PAY_MODE,
                                                          POL_OPTION,
                                                          DO_ID,
                                                          DM_ID,
                                                          BRANCH_OFF,
                                                          SALES_OFF,
                                                          ZONAL_OFF,
                                                          REGIONAL_OFF,
                                                          AGENT_ID,
                                                          POLICY_NO,
                                                          OFFICE_CD
                             )
                    VALUES   (
                                 V_DEMAND_NOTICE.PGID,
                                 V_DEMAND_NOTICE.INSTALLMENT_PREMIUM,
                                 0,
                                 V_DEMAND_NOTICE.INSTALLMENT_PREMIUM,
                                 0,
                                 P_USR,
                                 P_DT,
                                 DECODE (
                                    CEIL(V_NEXT_DUE_INST_NO
                                         / V_DEMAND_NOTICE.YRLY_NO_INST),
                                    1,
                                    'F',
                                    2,
                                    'S',
                                    'R'
                                 ),
                                 DEMAND_NOTICE_SEQ.NEXTVAL,
                                 V_DEMAND_NOTICE.POLICY_STATUS,
                                 V_NEXT_DUE_INST_NO,
                                 V_NEXT_DUE_DATE,
                                 V_DEMAND_NOTICE.POLICY_INSTALLMENT,
                                 '0',
                                 V_DEMAND_NOTICE.COMM_DATE,
                                 V_DEMAND_NOTICE.LAST_PAID_DATE,
                                 V_DEMAND_NOTICE.SUM_ASSURED,
                                 V_DEMAND_NOTICE.PRODUCT_CD
                                 || V_DEMAND_NOTICE.TERM,
                                 V_DEMAND_NOTICE.PAY_MODE,
                                 V_DEMAND_NOTICE.OPTION_NM,
                                 V_DEMAND_NOTICE.DO_ID,
                                 V_DEMAND_NOTICE.DM_ID,
                                 V_DEMAND_NOTICE.BRANCH_OFF,
                                 V_DEMAND_NOTICE.SALES_OFF,
                                 V_DEMAND_NOTICE.ZONAL_OFF,
                                 V_DEMAND_NOTICE.REGIONAL_OFF,
                                 V_DEMAND_NOTICE.AGENT_ID,
                                 V_DEMAND_NOTICE.POLICY_NO,
                                 V_DEMAND_NOTICE.OFFICE_CD
                             );
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  P_ERRM := 'Fail';
                  EXIT;
            END;
         END;

         V_NEXT_DUE_INST_NO := V_NEXT_DUE_INST_NO + 1;

         SELECT   TO_DATE(TO_CHAR (V_COMM_DATE, 'DD') || '-'
                          || TO_CHAR (
                                ADD_MONTHS (
                                   V_NEXT_DUE_DATE,
                                   DECODE (V_DEMAND_NOTICE.YRLY_NO_INST,
                                           1,
                                           12,
                                           2,
                                           6,
                                           4,
                                           3,
                                           12,
                                           1)
                                ),
                                'MON-RRRR'
                             ))
           INTO   V_NEXT_DUE_DATE
           FROM   DUAL;
      END LOOP;

      IF P_ERRM = 'Fail'
      THEN
         ROLLBACK;
      ELSE
         COMMIT;
         P_RECORD := P_RECORD + 1;
         P_ERRM := 'Success';
      END IF;
   END LOOP;

   CLOSE DEMAND_NOTICE;
EXCEPTION
   WHEN OTHERS
   THEN
      P_ERRM := SQLERRM;
      ROLLBACK;
END PRO_POLICY_DUE_PREP;
/


--
-- PRO_POLICY_INFO_UPD_ST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_info_upd_st wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
12a6 587
q3clYCSiaJczj6mkNZZ+x/jH+Kwwg83qefYe344ZF7UYAyiM+pWJHqBDh297aX5sKlfxF/op
kqFxg2gqaQYlY9a5sa7CjrqW3AnUhwQTIjbvT8F9NHrB914rIZWTTDgwP97bx06gvqq2E82x
YDQiJOMPn3wYpg6OQ2Zy3Q+tKRx1yN+UYj6Elb5l+UqajVc8j5TFm3RSVougnq/Vw2N4TewE
hvFvQiNJwGWwUdGCr1No6CosIYfg1FDhmDhE1MwhSsDoL8waP+pRFTTi49aD/WoWiGotgXMq
z24neD7u+boJlhdTrLNdU7axsmxOz6hpl06UPL27VRSG3egKUeV7mAt2ltcFx7FNeTc3Hpvq
9d6/cge/YPvxXsS71lrceXZrrP9skkqkr4Fg33caOOwTdtcyIPUEJEIoP8AEqggc5JU45EMS
pZwHCOq7rw+I5HSWwCVlTDeL+aVDWWUKFmciIyDi7latXso/1rpbwDL/0uBT3T5bnJF/9dh/
0G7UUP4qSs8GEvBt7fD0nVJSl5Vj0FMYqPR2vPL5ku+OBV7z/qLQpLlAF1vSX4TUArofsKRM
QE0KMGekfoDNoltoqXfCvu2vCVXrAA8aXw9qSWcUHdTzZFi55HfKpa4+0ULcO2EMW6Iqwzxb
+hU9FB6ak5EI8fyV2LZ7Q0GR64V6DJ/LVL96dDSAzJGkKmfZo+UIWlUAhhaKAC0ePKd5kamS
vJ6DC9gl5isNZzoJDsJWDufN9TcNH4i8vNUdA+yFUeHF5lsbdPVldJRnQWYZe3uOW8CGBK47
USkY2cVzpizQM1Bx0J/B0vwgcTrRdUY+dIFbH3Qs0k9U+WytkeOkXHa0yskofb0yZ7mOBdoo
sUybSIvWTxx57KsR6fxIVFIF8ykJHqtgpQeOQpudZrWAjjpOncz3TEM7chDNpG8PTGZA1Sog
rGNYhVNnX0OZ4TJp6IM9A2FZk//JMpWl07YZ6c7Enkwg+HIKBXD2+Vl/HTtMzJpStP56f81I
/bKfCteq8DNPOGzBpmMmenuVOp7Xnn6LNcRUYP1xkOXXJwEN7nAGfh6d7FQBARuLt+s2AYAW
nGq3gv9u6iPwRVnxN8QQ5Ei0flA82WYA9feY7mPBwt9xPy+gVhvDJ9qdlcBLVc0rdNB72iMY
u/Drtzf69fjCG4sdURMWxxKjfsdcj2q02nBUHTOUYEQfgTvggPqV5skPjOkhaUy+EOQdDOni
bkLTJ0eKpRCkBBwiv9goxQKMthcDgbGLAbKKeRK1ziV+eJ0QMXnsYjQqZN0cE7GwW1M6mx6r
n7Ia1+vrkj9bmMYqiR7Nasn4gpFk9s4zfhEv+HA5HTptrKWLtaAaV+pcEqHMkx4YQkZSFQEk
b1Plp9NWrrcLALiF0hOa+1WOV5M=
/


--
-- PRO_POLICY_LIST_CREATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_list_creation wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
11ae 4bc
MBvPRVV01R2AECPC6zA1JyIvE/Ywg81UVSCDfC+ax/kYBWqOyFEYM1KUKN7g3Sf8kWGEsUkK
1Vnm/FrpKRqh+Ia/YbePz2mUUGGco2ZX/3L+CJiCaGyG3qIGbrYwg478JjBxAOQJ0ArBOyO0
VrvECuCyHSimZZTrrZQhAcUYOHiLqNDJqJ3nVlov3PQR5kUOoi4wIx3Xr5sT1RW/L1jhNDn6
RAe5ESYYhKFFyu2j4YWx45Hym3xFG6OH7NlhZhW+Rajmw5hiGgldsgDFIbiH2QlK9skuZnmc
q4zp6d5ZpRWLRimBy8lKQfNt8uf2RYfhIdk4USyuQ9goyAJSWTHD+pjYnw+6mdZO7mOxJOKF
iWXt7UGPLxSo9zaxUaar/B24jUKN35d8Py7qrGFDNdklIwP6Sj44n9UMpEXFR81fcP/swSFA
f84fvAFTBiUKUnQJ9BHM4o80p+HdhMVaD3HYIW/vTAD0m0J07/iR8cD13xXQtzEXF1zL9lrx
6JMms0M8S0ZGWgwrYL6XJUZgv8Vr5iNQeDn/PqA3fLCysCsDWIUh3REPhvSQCYjSmawJlIR+
AFzmQGUf+2kQRdLqVh2FzS5KeGpASzVYpPh+5Trnxd+S8FhdWai2xez3TaAj0LNMe+PL/XTs
9I40UhIA5NsoyjXzB0jYit3QahX3CY/+u6QQSYVXr/eXLEd9jyHzkGo/UVOz3vgHgB4gc+NC
tbT5arL+rRuCqq6Lg0/+kZ/kzp36inOk5BzmSjq/TbWecKaAkNYLm7xHxxPlVWXe0jOpLIiP
s96isV1cJAC7XYH3waT/2CSbHQWKNgHatnAmTxQzgxngGK6wyI69bzJrL/WXo2m6JJgAVVMx
hjLYvZM0bfA1u9CJ1Lnl7tVmIL2n7j3t98OUxnP4Sxwifpw7cbNW64930H0225xdtgxDFNdY
CxEDmakZnrXkwjdLO6wFi61yoWZp6rqFtNfwSpd6gs0pEwYCdwxV0/NKusPNO6q5ErCVgalL
p/N8swS7Bh7Cqed7Jm9Z/sPi/Bx9Jfb1F+gqhKr3Rmk97lJUI2IU3LpK2SLVcFKd7QehCMKH
tNxQ47+MPY0ZiUsCPZJCvjHRH1cxb8hYnKjI2EHESttBKwgyr8wtVObD5HHi1wWJKvw64jvb
HjmKmR9UneTOYWjPoirsCl+wSElNZtzm6/E/zh0L5XFj
/


--
-- PRO_POLICY_TOT_PAYABLE_COMM  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_tot_payable_comm wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
25f3 917
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
/


--
-- PRO_POL_LOAN_COLL_SL_NO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_pol_loan_coll_sl_no wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
7fb 2c5
jecVxyES0cTnAkNbUQATpQEWYo0wg81e2iAFfC+52A9S/bYOFtPQf2VQdz7JDPcYWq36ogRK
X29pY3fQa2c/z6HZ8T6EPp6OTKwZZ/Q0mLuHmgG+4AQfrRXZ6C2WLgEKyZMFXF5cn7oxRTdt
56ZlCvFGgqBWQIdvIRfH7K4iYW+9sV+eoK46um8mGLPsdOEI/IynPqjYbyvFv1wCUrBWJYif
kkew5Q096LG/zrMB2w3Eo1Tw/kTynCZZHR1TdXFMTBXXO9aO4CMhKndwGCV0wKQqAa17uij5
2uuIGVIppDDTwxKZXezO6oKAvapszPgphqBRzMqCDslPVcby7OCOzrjed0uWa9/6XJ4IX4M8
ultFB617o3bM115AvPHLQEbKZwF2QFuvnXTABPNmjo3NR42OcVFspZJ7yuyY8bmBouLe9ebL
F33oZ2EBXOKfuKWICa8LEPHOEW/D3SPrzwfBc8JmqAQiZtV04a5eX77Wsu6aTYtQaMhFqI+p
wiIATHyqbOtNbYV8gnFEA8+ldveX1HdpE03m1EmQwXLK0AOm763xYcR4ReQtlh5cvcIxr0Ux
sXK5aMjH0O6mYKCiPUv4oxWSBZ8N2PLOk9F4UNg4dj52g0vmQyf6gU+cOZKHcEGwEMGRz87p
a3K/eSW7g/gxp7iT8V21YeQDed4T+D+xlX/QSeuFmiTk4XY6cr8=
/


--
-- PRO_POL_SCH_DT_ASGN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_pol_sch_dt_asgn wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
907 39c
ZT/o9e1EkXIr2hexvwvKB9NQx0Awg+2nmiCDfC/G/m6dBsMmrBGzNo0zCdsayATjibRBqlCb
kXmOeY1Frw4QdXckvGGG5EZnBaFODKy7z62quR6CiffnlfGotLnfJ5hCafg9rjL+TbzNquRA
vFumwwgR4uD7Q+OEN6xoohehdA33cOLSVu+JpXxzkUec4KEMv3OtbBEpvOeTISgxjYIMSlQA
o9lZGg4lizWKjHwSvJy4hsJpelx1fXhWA/RKPbWKaoEEOe8grMm9SEazTgD5oKM7/vgZhYLo
kaMMzLpbAILVi+dqmECcJBQq3We7LszxJ+wt6Cbm/7eIM/IXSjYEUDP47DNTNiww8E3iq5Cf
Jn9l9t9XKF+fPg+bwuMNhWZHTQxZUvfvETrbvU9a1MxASxYQnpwTrSXywL0bceqoLqjbf1RY
X/uWCX3BUb2Kbk/WcjFOZClsG+DyFEpV2Di7PZUCdctfRK2AAyKSOv7YIeGcTHDf1RQoyn9T
R2rcK0TnSlv2hJ6DouTUe0oJjr0WM3p05eWTU+mNe8UGFnz0733aH5o72FK/C5dai9zKnJNA
tMIpyJzGPWau3l16yNEJZQ2daZcFWzjOlltrxUv2H2AEolRSdmIDC8mV8QLEI4bowCMF1jkF
RdGgypfruw30breXzFYNfevCZM83NSqaWZJzm89j5tofLPe5k/efOU4oYm18jePqwWGpCC1j
izhji7lxmVido+sNd2CNofaOc4AzrQa2mCOZ+B3b6dBLQnEyfwAxqKYZ4dJxT6m3O+GrVQYO
BPD4gaxIHLnqqvsg0Y+x6/nzvGQ4xPlO9Z26moFKgRz+GEjvounmfjFIWZqoklN/Evqx/0yG
ugVV5XNbi6sjpeR+0W/bVOhq7Arj87BKQuJKiBwQMPshToEV
/


--
-- PRO_POL_SURRENDER_VALUE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_pol_surrender_value wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
6e6a 13bd
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
KkfKL45PCCb8s
KTZ1Ug0oUSlfXVN3wNnhCFA+XE5FuANSjp3U6weMd7Cn4IidzEKtjWwKCdOfiOumHks5Wvey
CH/J4yBx+ftCROcjJA7hKnnoqzaZivJ1YT1zlWoPIzmwPbZXkmNJuMMAN4ZPITf8WvNk8DoC
lcTMnNszxebrdaVvLxCZ47yUGcNvGeM6KO4btLvXl+6dz/rLwzmPl8XfDsnNy7SxeWdzJbJL
5RmppD0IqQHzW4ro7FuKJ61wE+wcTRYppl5u2EFNVD3+3ZYUxbo8kmcuoTHiBlv8vZcbMiRL
Jm60H6av0SepcIABZ0sybC/DE0J5e9wQpH5AYSnJB5dPEVfREvhRswH4e2a06fW+2A7nS1Nl
Bmm6y5MoobvooiZgTAkM9FY+PrEQVvEClzwKjoiIG1x7sLEcz/enYf1zHtE1CKDOw6eP0fpI
6uhhDJuDg9SNvLRsHla2sTkzVwEFjioa9qqxLI4uQg0BGGh7JEicdmSNiGT3b5pmSbwKRs7R
ymGF1iATNmT/qYyVg6e+IE5Kwll5sUf2tdLxAfiiM99s2T069q7tKJKnTUC116IyOO5DLbDe
QpWgmwYdrFE9DAogNhQxniF36tWqdUa15vDlHSFROmIjRpytkzq87aNVbqyhnTRus+v+W5LE
IgRTK9luFR8FGrSCLKvxBnDak/io6EA09wOd8OaqKt5F5J+/TqS5QY84OnRtIL8Pu/lOefsP
p9WFtbj/IHHhV3k6SfdWFiQvo/40l26fCAKKU7r0ZjMDW2BF8TDfXi7Ip6DBXTGlLJO1+k/Z
INIgtS+UNdR3aRq1aLdBIe7syrev4uq/cpoyMAgnJKzO/ga5Hk9ybbpne2qqJWcb5qaRGlZN
qO6FbmpImrplrti1waqroclw1FtnQuqvbcY9m58QTtiGPpXvvmk4ktng04PtQKS9r07gMmRq
lysOfDGVc1WSImuc0fG7bR49DDsim4Ypp8/Zcrzz1GHNPPkqMzc/4z044Rv5uBD4sYFq1+FI
sdVhoV9ePr3qjdyAare/RqP5kXg+3y3D/kFkpx7GWcSZE6y7LlOTGdGS1/F5JhNKp19DYZxh
77X5xy2jZ36+DU0W6R4HB5gHZI8/jdHvf3TX0MiASojo1O4XhDyfamL3bcFsfNHX+QAbpbbA
XdMewSy1RAzABxM=
/


--
-- PRO_PREMIUM_COLL_SUMMERY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_premium_coll_summery (
   P_USER          VARCHAR2,

   P_ERROR   OUT   VARCHAR2
)
IS
   V_NO_OF_INST                NUMBER                          := 0;
   V_AMOUNT_TYPE               CHAR (1);
   V_TOT_PREMIUM_AMOUNT        NUMBER (15, 2)                  := 0;
   V_TOT_LATE_FEE              NUMBER (15, 2)                  := 0;
   V_TOT_SUSPENSE_AMT          NUMBER (15, 2)                  := 0;
   V_COLL_AMOUNT               NUMBER (15, 2)                  := 0;
   V_LATE_FEE_AMOUNT           NUMBER (15, 2)                  := 0;
   V_SUSPENSE_AMT              NUMBER (15, 2)                  := 0;
   V_REC_COUNTER               NUMBER (10)                     := 0;
   V_STATEMENT                 VARCHAR2 (100);
   V_DUE_DATE                  DATE                            := NULL;
   V_BUSINESS_YR               NUMBER (4);
   V_FY_CLOSE_DT               DATE;
   V_FY_CLOSE                  CHAR (1);
   V_FY_ED_DT                  DATE;
   V_FY_ST_DT                  DATE;
   V_MIN_FY_ED_DT              DATE;
   V_STATUS                    CHAR (1);
   V_RECEIVE_ID                NUMBER                          := 0;
   V_TOT_CNT                   NUMBER                          := 0;
   V_BUSINESS_AMOUNT           NUMBER (10, 2)                  := 0;
   V_NO_TIMES                  NUMBER (10)                     := 0;


   CURSOR C_FPR_COLL (V_DATE_FROM DATE, V_DATE_TO DATE)
   IS
      SELECT AR.RECEIVE_ID, AR.PGID, AR.COLLECTION_TYPE,
             NVL (FUN_AGENT_OFFICE_CD (AP.AGENT_ID, AR.ACTUAL_COLL_DATE),
                  NVL (AP.OFFICE_CD, '07001')
                 ) OFFICE_CODE,
             AR.RECEIVE_MODE, AR.COLL_AMOUNT,
             TRUNC (AR.RECEIVE_DATE) RECEIVE_DATE, AR.STATUS,
             NVL (AR.ACTIVE_OFFICE_CD, '07001') ACTIVE_OFFICE_CD,
             1 INSTALLMENT_NO_FROM, 1 INSTALLMENT_NO_TO, AP.COMM_DATE,
             AP.PAY_MODE_CD, AP.LAST_PAID_DATE, AP.INSTALLMENT_PREMIUM,
               NVL (AP.LIFE_PREMIUM, 0)
             + NVL (AP.SUPPL_BEN_PREMIUM, 0)
             + NVL (AP.SUPPL_PRODUCT_PREMIUM, 0) BUSINESS_AMOUNT,
             AP.AGENT_ID, AP.DO_GID, AP.DM_GID, TRUNC (AP.I_DT) I_DT,
             0 SUSPENSE, AR.DATE_BACK_LATE_FEE, AR.ACTUAL_COLL_DATE,
             AP.INS_TP_CD, AP.PPS_CD,
             (CASE
                 WHEN AR.POL_FRM_PREV_POL_ST = '1'
                    THEN '1'
                 WHEN AP.PAY_MODE_CD = '05'
                    THEN '2'
                 ELSE '0'
              END
             ) POLICY_FILE_TP
        FROM V_ADVANCE_COLL_SUMMARY AR, INS_P_SUMMERY AP
       WHERE AR.ACTUAL_COLL_DATE BETWEEN V_DATE_FROM AND V_DATE_TO

         AND STATUS = '1'
         AND AR.PGID = AP.PGID

         AND NOT EXISTS (
                SELECT 1
                  FROM ACC_COLL_SUMMERY C
                 WHERE C.PGID = AR.PGID
                   AND C.RECEIVE_ID = AR.RECEIVE_ID
                   AND C.RECEIVE_MODE = AR.RECEIVE_MODE
                   AND C.COLL_FROM = 'F');



   CURSOR C_OTHERS_COLL (V_DATE_FROM DATE , V_DATE_TO DATE )
   IS
      SELECT R.RECEIVE_ID, R.PGID, R.COLLECTION_TYPE,
             NVL
                (FUN_AGENT_OFFICE_CD
                    (S.AGENT_ID,
                     CASE
                        WHEN R.RECEIVE_DATE < TO_DATE ('16-mar-2016')
                           THEN DECODE (R.MODE_TP,
                                        1, R.RECEIVE_DATE,
                                        R.COLL_SLIP_REC_DT
                                       )
                        ELSE R.RECEIVE_DATE
                     END
                    ),
                 NVL (S.OFFICE_CD, '07001')
                ) OFFICE_CODE,
             R.RECEIVE_MODE, R.COLL_AMOUNT,
             ROUND (R.TOT_PREMIUM_AMT) TOT_PREMIUM_AMT,
             (NVL (R.LATE_FEE, 0) - NVL (R.LATEFEE_WAIVER, 0)
             ) ACTUAL_LATE_FEE, TRUNC (R.RECEIVE_DATE) RECEIVE_DATE,
             DECODE (R.STATUS,
                     '1', NVL (TRUNC (ADJUSTMENT_DATE),
                               TRUNC (R.RECEIVE_DATE)),
                     TRUNC (ADJUSTMENT_DATE)
                    ) ADJUSTMENT_DT,
             R.STATUS, NVL (R.ACTIVE_OFFICE_CD, '07001') ACTIVE_OFFICE_CD,
             R.INSTALLMENT_NO_FROM, R.INSTALLMENT_NO_TO, R.DUE_DT_FROM,
             R.DUE_DT_TO, S.INSTALLMENT_PREMIUM,
               (  NVL (S.LIFE_PREMIUM, 0)
                + NVL (S.SUPPL_BEN_PREMIUM, 0)
                + NVL (S.SUPPL_PRODUCT_PREMIUM, 0)
               )
             * ((R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) + 1)
                                                              BUSINESS_AMOUNT,
             S.PAY_MODE_CD, S.LAST_PAID_DATE, S.AGENT_ID, S.DO_GID, S.DM_GID,
             DECODE (S.I_USR, 'SLICL', 0, R.AVL_SUS_AMT) AVL_SUS_AMT,
             NVL (R.ADV_STATUS, 0) ADV_STATUS,
             NVL (R.MAN_ADJUSTED, '0') MAN_ADJUSTED, TRUNC (R.I_DT)
                                                                   ENTRY_DATE,
             R.COLL_SLIP_REC_DT, TRUNC (R.I_DT) I_DT,
             CASE
                WHEN R.RECEIVE_DATE <
                                     TO_DATE ('16-mar-2016')
                   THEN DECODE (R.MODE_TP,
                                1, R.RECEIVE_DATE,
                                R.COLL_SLIP_REC_DT
                               )
                ELSE R.RECEIVE_DATE
             END ACTUAL_COLL_DATE,
             S.COMM_DATE, S.INS_TP_CD, S.PPS_CD, TRIM(R.COLL_FROM) COLL_FROM
        FROM ACC_RECEIVABLES R, INS_P_SUMMERY S
       WHERE (   (    R.MODE_TP = '1'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
              OR (    R.MODE_TP = '2'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
             )
         AND (R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) >= 0
         AND R.REC_STATUS = '1'
         AND NVL (R.CHEQUE_DEPOSIT, 'N') != 'R'
         AND R.PGID = S.PGID

         AND NOT EXISTS (
                SELECT 1
                  FROM ACC_COLL_SUMMERY C
                 WHERE C.PGID = R.PGID
                   AND C.RECEIVE_ID = R.RECEIVE_ID
                   AND C.COLL_FROM = 'R');


   CURSOR C_PARTIAL_COLL (V_DATE_FROM DATE, V_DATE_TO DATE)
   IS
      SELECT   PR.PGID, PRF.RECEIVE_ID, PR.COLL_AMOUNT PAR_COLL_AMOUNT,
               PR.DUE_DATE_FROM, PR.DUE_DATE_TO, PR.COLL_MEDIA,
               NVL (FUN_AGENT_OFFICE_CD (S.AGENT_ID, TRUNC (PR.RECEIVE_DATE)),
                    NVL (S.OFFICE_CD, '07001')
                   ) OFFICE_CODE,
               PR.MODE_TP, TRUNC (PR.RECEIVE_DATE) RECEIVE_DATE, PR.MEDIA_DT,
               DECODE (R.STATUS,
                       '1', NVL (TRUNC (R.ADJUSTMENT_DATE),
                                 TRUNC (PR.RECEIVE_DATE)
                                ),
                       TRUNC (R.ADJUSTMENT_DATE)
                      ) ADJUSTMENT_DT,
               PR.STATUS, NVL (PR.ACTIVE_OFFICE_CD, '07001') ACTIVE_OFFICE_CD,
               PR.COLL_TYPE,
               (NVL (PR.LATE_FEE, 0) - NVL (PR.LATEFEE_WAIVER, 0)
               ) PAR_ACTUAL_LATE_FEE,
               R.COLL_AMOUNT MAIN_COLL, R.INSTALLMENT_NO_FROM,
               R.INSTALLMENT_NO_TO, ROUND (R.TOT_PREMIUM_AMT) TOT_PREMIUM_AMT,
               S.PAY_MODE_CD, S.LAST_PAID_DATE, S.AGENT_ID, S.DO_GID,
               S.DM_GID, R.STATUS FINAL_STAUS, TRUNC (PR.I_DT) I_DT,
               CASE
                  WHEN R.RECEIVE_DATE <
                                     TO_DATE ('16-mar-2016')
                     THEN DECODE (R.MODE_TP,
                                  1, R.RECEIVE_DATE,
                                  R.COLL_SLIP_REC_DT
                                 )
                  ELSE R.RECEIVE_DATE
               END ACTUAL_COLL_DATE,
               S.COMM_DATE, S.INS_TP_CD, S.INSTALLMENT_PREMIUM,
                 (  NVL (S.LIFE_PREMIUM, 0)
                  + NVL (S.SUPPL_BEN_PREMIUM, 0)
                  + NVL (S.SUPPL_PRODUCT_PREMIUM, 0)
                 )
               * ((R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) + 1)
                                                              BUSINESS_AMOUNT,
               S.PPS_CD
          FROM ACC_PARTIAL_RECEIVABLES PR,
               ACC_PARTIAL_RECEIVABLES_REF PRF,
               INS_P_SUMMERY S,
               ACC_RECEIVABLES R
         WHERE (   (    R.MODE_TP = '1'
                    AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                   )
                OR (    R.MODE_TP = '2'
                   AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                   )
               )
           AND PR.RECEIVE_ID = PRF.RECEIVE_ID
           AND PR.PGID = S.PGID
           AND PRF.RECEIVE_ID_REF = R.RECEIVE_ID
           AND PR.REC_STATUS = '1'
           AND (R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) >= 0
           AND NOT EXISTS (
                  SELECT 1
                    FROM ACC_COLL_SUMMERY C
                   WHERE C.PGID = R.PGID
                     AND C.RECEIVE_ID = PR.RECEIVE_ID
                     AND C.COLL_FROM = 'P')
      ORDER BY PR.PGID, PRF.RECEIVE_ID;

   CURSOR C_OTHERS_INVALID (V_DATE_FROM DATE, V_DATE_TO DATE)
   IS
      SELECT R.RECEIVE_ID, R.PGID, R.COLL_AMOUNT
        FROM ACC_RECEIVABLES R, INS_P_SUMMERY S
       WHERE (   (    R.MODE_TP = '1'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
              OR (    R.MODE_TP = '2'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
             )
         AND (R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) >= 0
         AND R.REC_STATUS = '0'
         AND R.PGID = S.PGID
         AND EXISTS (
                SELECT 1
                  FROM ACC_COLL_SUMMERY C
                 WHERE C.PGID = R.PGID
                   AND C.RECEIVE_ID = R.RECEIVE_ID
                   AND C.COLL_FROM = 'R'
                   AND C.REC_STATUS = '1');

   CURSOR C_OTHERS_ADJUSTED (V_DATE_FROM DATE, V_DATE_TO DATE)
   IS
      SELECT R.RECEIVE_ID, R.PGID,
             DECODE (R.STATUS,
                     '1', NVL (TRUNC (ADJUSTMENT_DATE),
                               TRUNC (R.RECEIVE_DATE)),
                     TRUNC (ADJUSTMENT_DATE)
                    ) ADJUSTMENT_DT
        FROM ACC_RECEIVABLES R, INS_P_SUMMERY S
       WHERE (   (    R.MODE_TP = '1'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
              OR (    R.MODE_TP = '2'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
             )
         AND (R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) >= 0
         AND R.REC_STATUS = '1'
         AND R.STATUS = '1'
         AND R.PGID = S.PGID
         AND EXISTS (
                SELECT 1
                  FROM ACC_COLL_SUMMERY C
                 WHERE C.PGID = R.PGID
                   AND C.RECEIVE_ID = R.RECEIVE_ID
                   AND C.COLL_FROM = 'R'
                   AND REC_STATUS = '1'
                   AND C.STATUS = '0');

   CURSOR C_OFF_WISE_SUS_LEDGER (V_COLL_DATE DATE)
   IS
      SELECT   ACTIVE_OFFICE_CD, COLL_DATE, INS_TP_CD,
               SUM (COLL_AMOUNT) COLLECTION_AMT, SUM (ADJUST_AMT)
                                                                 ADJUSTED_AMT,
               SUM (INVALID_AMT) INVALID_AMT
          FROM (SELECT AR.ACTIVE_OFFICE_CD, AR.RECEIVE_DATE COLL_DATE,
                       AP.INS_TP_CD, AR.COLL_AMOUNT,
                       DECODE (AR.STATUS, '1', COLL_AMOUNT, 0) ADJUST_AMT,
                       0 INVALID_AMT
                  FROM ACC_ADVANCE_RECEIVABLES AR, INS_P_PROPOSAL AP
                 WHERE AR.RECEIVE_DATE = V_COLL_DATE
                   AND AR.PGID = AP.PGID
                   AND AR.REC_STATUS = '1'
                   AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT AR.ACTIVE_OFFICE_CD,
                       TRUNC (AR.ADJUSTMENT_DATE) COLL_DATE, AP.INS_TP_CD,
                       0 COLL_AMOUNT,
                       DECODE (AR.STATUS, '1', COLL_AMOUNT, 0) ADJUST_AMT,
                       0 INVALID_AMT
                  FROM ACC_ADVANCE_RECEIVABLES AR, INS_P_PROPOSAL AP
                 WHERE TRUNC (AR.ADJUSTMENT_DATE) = V_COLL_DATE
                   AND AR.RECEIVE_DATE < V_COLL_DATE
                   AND AR.PGID = AP.PGID
                   AND AR.REC_STATUS = '1'
                   AND AR.STATUS = '1'
                   AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT AR.ACTIVE_OFFICE_CD, TRUNC (AR.U_DT) COLL_DATE,
                       AP.INS_TP_CD, 0 COLL_AMOUNT, 0 ADJUST_AMT,
                       AR.COLL_AMOUNT INVALID_AMT
                  FROM ACC_ADVANCE_RECEIVABLES AR, INS_P_PROPOSAL AP
                 WHERE TRUNC (AR.U_DT) = V_COLL_DATE
                   AND AR.RECEIVE_DATE < V_COLL_DATE
                   AND AR.PGID = AP.PGID
                   AND AR.REC_STATUS = '0'
                   AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT AR.ACTIVE_OFFICE_CD, AR.RECEIVE_DATE COLL_DATE,
                       AP.INS_TP_CD, AR.COLL_AMOUNT,
                       CASE
                          WHEN AR.COLL_AMOUNT >=
                                                AR.TOT_PREMIUM_AMT
                             THEN AR.COLL_AMOUNT
                          WHEN AR.STATUS = '1'
                             THEN AR.COLL_AMOUNT
                          ELSE 0
                       END ADJUST_AMT,
                       0 INVALID_AMT
                  FROM ACC_RECEIVABLES AR, INS_P_SUMMERY AP
                 WHERE AR.RECEIVE_DATE = V_COLL_DATE
                   AND AR.PGID = AP.PGID
                   AND AR.REC_STATUS = '1'
                   AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT AR.ACTIVE_OFFICE_CD, TRUNC (AR.U_DT) COLL_DATE,
                       AP.INS_TP_CD, 0 COLL_AMOUNT, 0 ADJUST_AMT,
                       AR.COLL_AMOUNT INVALID_AMT
                  FROM ACC_RECEIVABLES AR, INS_P_SUMMERY AP
                 WHERE TRUNC (AR.U_DT) = V_COLL_DATE
                   AND AR.RECEIVE_DATE < V_COLL_DATE
                   AND AR.PGID = AP.PGID
                   AND AR.REC_STATUS = '0'
                   AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT DISTINCT AR.ACTIVE_OFFICE_CD,
                                AR.RECEIVE_DATE COLL_DATE, AP.INS_TP_CD,
                                AR.COLL_AMOUNT,
                                CASE
                                   WHEN AR.COLL_AMOUNT >=
                                               AR.TOT_REQUIRED_AMT
                                      THEN AR.COLL_AMOUNT
                                   WHEN R.STATUS = '1'
                                      THEN AR.COLL_AMOUNT
                                   ELSE 0
                                END ADJUST_AMT,
                                0 INVALID_AMT
                           FROM ACC_PARTIAL_RECEIVABLES AR,
                                ACC_PARTIAL_RECEIVABLES_REF PRF,
                                INS_P_SUMMERY AP,
                                ACC_RECEIVABLES R
                          WHERE AR.RECEIVE_ID = PRF.RECEIVE_ID
                            AND AR.PGID = AP.PGID
                            AND PRF.RECEIVE_ID_REF = R.RECEIVE_ID
                            AND AR.RECEIVE_DATE = V_COLL_DATE
                            AND AR.PGID = AP.PGID
                            AND AR.REC_STATUS = '1'
                            AND NVL (AR.COLL_AMOUNT, 0) > 0
                            AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT DISTINCT AR.ACTIVE_OFFICE_CD, TRUNC (AR.U_DT)
                                                                    COLL_DATE,
                                AP.INS_TP_CD, 0 COLL_AMOUNT, 0 ADJUST_AMT,
                                AR.COLL_AMOUNT INVALID_AMT
                           FROM ACC_PARTIAL_RECEIVABLES AR,
                                ACC_PARTIAL_RECEIVABLES_REF PRF,
                                INS_P_SUMMERY AP,
                                ACC_RECEIVABLES R
                          WHERE AR.RECEIVE_ID = PRF.RECEIVE_ID
                            AND AR.PGID = AP.PGID
                            AND PRF.RECEIVE_ID_REF = R.RECEIVE_ID
                            AND TRUNC (AR.U_DT) = V_COLL_DATE
                            AND AR.RECEIVE_DATE < V_COLL_DATE
                            AND AR.PGID = AP.PGID
                            AND AR.REC_STATUS = '0'
                            AND AR.I_USR <> 'SLICL') A
      GROUP BY ACTIVE_OFFICE_CD, COLL_DATE, INS_TP_CD
      ORDER BY ACTIVE_OFFICE_CD, COLL_DATE, INS_TP_CD;

   CURSOR C_COM_WISE_BUS_SUMM
   IS
      SELECT S.RECEIVE_ID, S.COLL_FROM, S.INSTALLMENT_NO, DET.PGID,
             DET.COM_EXE_DATE, B.BILL_DATE, S.DUE_DATE, B.OFFICE_CD
        FROM ACC_COLL_SUMMERY S,
             COM_AGENT_COM_DETAIL DET,
             (SELECT M.BILL_NO, M.BILL_DATE, D.PGID, D.PREM_DUE_DT,
                     M.OFFICE_CD
                FROM COM_AGENT_COM_BILL_MST M, COM_AGENT_COM_BILL_DTL D
               WHERE M.BILL_NO = D.BILL_NO
                 AND D.EARNING_CD IN ('01', '02', '03')) B
       WHERE S.DUE_DATE = DET.PREM_DUE_DT
         AND S.PGID = DET.PGID
         AND (   (S.COM_BILL_DATE IS NULL AND B.BILL_DATE IS NOT NULL)
              OR (S.COM_EXE_DATE IS NULL AND DET.COM_EXE_DATE IS NOT NULL)
             )
         AND DET.EARNING_CD IN ('01', '02', '03')
         AND DET.PGID = B.PGID(+)
         AND DET.PREM_DUE_DT = B.PREM_DUE_DT(+);

   REC_C_OTHERS_COLL           C_OTHERS_COLL%ROWTYPE;
   REC_C_FPR_COLL              C_FPR_COLL%ROWTYPE;
   REC_C_PARTIAL_COLL          C_PARTIAL_COLL%ROWTYPE;
   REC_C_OTHERS_INVALID        C_OTHERS_INVALID%ROWTYPE;
   REC_C_OTHERS_ADJUSTED       C_OTHERS_ADJUSTED%ROWTYPE;
   REC_C_OFF_WISE_SUS_LEDGER   C_OFF_WISE_SUS_LEDGER%ROWTYPE;
   REC_C_COM_WISE_BUS_SUMM     C_COM_WISE_BUS_SUMM%ROWTYPE;
   V_LAST_PROCESS_DT           DATE;
   V_DATE_FROM                 DATE;
   V_DATE_TO                   DATE;
   V_EXTRA_AMOUNT              NUMBER (10, 2)                  := 0;
   V_BUSINESS_REC              NUMBER (10)                     := 0;
   V_ACTIVE_BRANCH_CD          HRM_OFFICE.OFFICE_CD%TYPE;
   V_ACTIVE_SALES_CD           HRM_OFFICE.OFFICE_CD%TYPE;
   V_ACTIVE_ZONAL_CD           HRM_OFFICE.OFFICE_CD%TYPE;
   V_ACTIVE_REGIONAL_CD        HRM_OFFICE.OFFICE_CD%TYPE;
   V_OFF_CATG                  VARCHAR2 (3);
   V_ACTUAL_COLL_AMOUNT        NUMBER (15, 2)                  := 0;
   V_DUE_WISE_COLL_AMOUNT      NUMBER (15, 2)                  := 0;
   V_AVL_SUS_AMT               NUMBER (15, 2)                  := 0;
   V_BUSINESS_DATE             DATE                            := NULL;
   V_COLL_OF_ORGANOGRAM        VARCHAR2 (50);
   V_USE_CODE_LEN              NUMBER;
   V_POL_OF_ORGANOGRAM         VARCHAR2 (50);
   V_POL_BRANCH_CD             VARCHAR2 (10);
   V_POL_SALES_CD              VARCHAR2 (10);
   V_POL_ZONAL_CD              VARCHAR2 (10);
   V_POL_REGIONAL_CD           VARCHAR2 (10);
   V_FA_BUS_ORGANOGRAM         VARCHAR2 (200);
   V_EMP_CODE_LEN              NUMBER (20);
   V_idra_CODE_LEN              NUMBER (20);
   V_UM_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_BM_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_BC_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_DC_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_RC_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;

   V_AGM_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_DGM_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_GM_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;

   V_CUR_MONTH_LAST_DAY        NUMBER (3);
   V_HEAD_OFFICE               VARCHAR2 (10);
   V_ACTIVE_OFFICE_CD          VARCHAR2 (10);
   V_PROJECT_CD                VARCHAR2 (2);
   V_FPR_RECORD                NUMBER (10)                     := 0;
   V_OTHER_RECORD              NUMBER (10)                     := 0;
   V_PARTIAL_RECORD            NUMBER (10)                     := 0;
   V_INVALID_RECORD            NUMBER (10)                     := 0;
   V_INVALID_AMOUNT            NUMBER (10)                     := 0;
   V_SL_NO                     NUMBER (10);
   V_PROCESS_DT                DATE;
   V_COLL_DATE                 DATE;
   V_CLOSING_SUS_AMT           NUMBER                          := 0;
   V_PRE_CLOSING_SUS_AMT       NUMBER                          := 0;
   V_YEAR_MONTH                VARCHAR2 (6);
   V_TOT_BUSINESS_AMOUNT       NUMBER (15, 2)                  := 0;
BEGIN
   SELECT SYSDATE
     INTO V_PROCESS_DT
     FROM DUAL;

   SELECT USE_CODE_LEN
     INTO V_USE_CODE_LEN
     FROM GEN_CODE_NO_CONVENTION
    WHERE CODE_ID = 1;

   SELECT USE_CODE_LEN
     INTO V_EMP_CODE_LEN
     FROM GEN_CODE_NO_CONVENTION
    WHERE CODE_ID = 6;


   SELECT MIN (FY_ST_DT), TRUNC (SYSDATE)
     INTO V_DATE_FROM, V_DATE_TO
     FROM ACC_FISCAL_YEAR
    WHERE NVL (FY_CLOSE, '0') = '0';

   V_DATE_FROM := TO_DATE ('01/01/2015', 'dd/mm/rrrr');


   BEGIN
      SELECT OFFICE_CD
        INTO V_HEAD_OFFICE
        FROM HRM_OFFICE
       WHERE OFF_CATG_CD = '01';
   EXCEPTION
      WHEN OTHERS
      THEN
         V_HEAD_OFFICE := '07001';
   END;

   OPEN C_OTHERS_COLL (V_DATE_FROM, V_DATE_TO);

   LOOP
      FETCH C_OTHERS_COLL
       INTO REC_C_OTHERS_COLL;

      EXIT WHEN C_OTHERS_COLL%NOTFOUND;



      BEGIN

         PRO_CONTROL_OFFICE
                          (V_OFFICE_CD               => REC_C_OTHERS_COLL.ACTIVE_OFFICE_CD,
                           V_DATE                    => REC_C_OTHERS_COLL.ACTUAL_COLL_DATE,
                           P_ACTIVE_BRANCH_CD        => V_ACTIVE_BRANCH_CD,
                           P_ACTIVE_SALES_CD         => V_ACTIVE_SALES_CD,
                           P_ACTIVE_ZONAL_CD         => V_ACTIVE_ZONAL_CD,
                           P_ACTIVE_REGIONAL_CD      => V_ACTIVE_REGIONAL_CD
                          );

         PRO_CONTROL_OFFICE (V_OFFICE_CD               => REC_C_OTHERS_COLL.OFFICE_CODE,
                             V_DATE                    => REC_C_OTHERS_COLL.ACTUAL_COLL_DATE,
                             P_ACTIVE_BRANCH_CD        => V_POL_BRANCH_CD,
                             P_ACTIVE_SALES_CD         => V_POL_SALES_CD,
                             P_ACTIVE_ZONAL_CD         => V_POL_ZONAL_CD,
                             P_ACTIVE_REGIONAL_CD      => V_POL_REGIONAL_CD
                            );
         V_FA_BUS_ORGANOGRAM := FUN_FA_ORGANOGRAM (REC_C_OTHERS_COLL.AGENT_ID);

         BEGIN
           SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '06')
           INTO V_UM_GID
           FROM DUAL;
         EXCEPTION
            WHEN OTHERS
            THEN
               V_UM_GID := 0;
         END;

         BEGIN
           SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '07')
           INTO V_BM_GID
           FROM DUAL;

         EXCEPTION
            WHEN OTHERS
            THEN
               V_BM_GID := 0;
         END;

         BEGIN
            V_BC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 3 + 4
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_BC_GID := 0;
         END;

         BEGIN
            V_DC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 4 + 5
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_DC_GID := 0;
         END;

         --Add by Musha on 05.04.2022
         SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '14')
           INTO V_AGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '15')
           INTO V_DGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '16')
           INTO V_GM_GID
           FROM DUAL;

         IF V_UM_GID IS NULL
         THEN
            V_UM_GID := 0;
         END IF;

         IF V_BM_GID IS NULL
         THEN
            V_BM_GID := 0;
         END IF;

         IF V_BC_GID IS NULL
         THEN
            V_BC_GID := 0;
         END IF;

         IF V_DC_GID IS NULL
         THEN
            V_DC_GID := 0;
         END IF;

         BEGIN
            IF V_DC_GID IS NOT NULL
            THEN
               SELECT S.H_EMPLOYEE_GID
                 INTO V_RC_GID
                 FROM HRM_EMPLOYEE_SETUP S, HRM_EMPLOYEE E, HRM_EMP_TYPE T
                WHERE S.EMPLOYEE_GID = V_DC_GID
                  AND E.EMP_GID = S.EMPLOYEE_GID
                  AND T.EMP_TYPE_CD = '11'
                  AND S.STATUS = '1';
            ELSE
               V_RC_GID := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               V_RC_GID := 0;
         END;
      END;






      IF REC_C_OTHERS_COLL.COLL_AMOUNT + REC_C_OTHERS_COLL.AVL_SUS_AMT <=
                                             REC_C_OTHERS_COLL.BUSINESS_AMOUNT
      THEN
         V_TOT_BUSINESS_AMOUNT :=
                REC_C_OTHERS_COLL.COLL_AMOUNT + REC_C_OTHERS_COLL.AVL_SUS_AMT;
      ELSE
         V_TOT_BUSINESS_AMOUNT := REC_C_OTHERS_COLL.BUSINESS_AMOUNT;
      END IF;

      IF REC_C_OTHERS_COLL.ACTUAL_LATE_FEE <= 0
      THEN
         IF REC_C_OTHERS_COLL.COLL_AMOUNT + REC_C_OTHERS_COLL.AVL_SUS_AMT <=
                                            REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
         THEN
            V_TOT_PREMIUM_AMOUNT :=
                REC_C_OTHERS_COLL.COLL_AMOUNT + REC_C_OTHERS_COLL.AVL_SUS_AMT;
            V_TOT_SUSPENSE_AMT := 0;
         ELSE
            V_TOT_PREMIUM_AMOUNT := REC_C_OTHERS_COLL.TOT_PREMIUM_AMT;
            V_TOT_SUSPENSE_AMT :=
                 REC_C_OTHERS_COLL.COLL_AMOUNT
               + REC_C_OTHERS_COLL.AVL_SUS_AMT
               - REC_C_OTHERS_COLL.TOT_PREMIUM_AMT;
         END IF;

         V_TOT_LATE_FEE := 0;
      ELSE
         IF REC_C_OTHERS_COLL.COLL_AMOUNT > REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
         THEN
            V_TOT_PREMIUM_AMOUNT := REC_C_OTHERS_COLL.TOT_PREMIUM_AMT;
            V_EXTRA_AMOUNT :=
               (  REC_C_OTHERS_COLL.COLL_AMOUNT
                - REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
               );

            IF V_EXTRA_AMOUNT > REC_C_OTHERS_COLL.ACTUAL_LATE_FEE
            THEN
               V_TOT_SUSPENSE_AMT :=
                    (V_EXTRA_AMOUNT - REC_C_OTHERS_COLL.ACTUAL_LATE_FEE
                    )
                  + REC_C_OTHERS_COLL.AVL_SUS_AMT;
               V_TOT_LATE_FEE := REC_C_OTHERS_COLL.ACTUAL_LATE_FEE;
            ELSE
               V_TOT_SUSPENSE_AMT := REC_C_OTHERS_COLL.AVL_SUS_AMT;
               V_TOT_LATE_FEE := V_EXTRA_AMOUNT;
            END IF;
         ELSE
            IF REC_C_OTHERS_COLL.COLL_AMOUNT + REC_C_OTHERS_COLL.AVL_SUS_AMT >=
                                            REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
            THEN
               V_TOT_PREMIUM_AMOUNT := REC_C_OTHERS_COLL.COLL_AMOUNT;
               V_TOT_SUSPENSE_AMT :=
                    (  REC_C_OTHERS_COLL.COLL_AMOUNT
                     + REC_C_OTHERS_COLL.AVL_SUS_AMT
                    )
                  - REC_C_OTHERS_COLL.TOT_PREMIUM_AMT;
               V_TOT_LATE_FEE := 0;
            ELSE
               V_TOT_PREMIUM_AMOUNT :=
                    REC_C_OTHERS_COLL.COLL_AMOUNT
                  + REC_C_OTHERS_COLL.AVL_SUS_AMT;
               V_TOT_SUSPENSE_AMT := 0;
               V_TOT_LATE_FEE := 0;
            END IF;
         END IF;
      END IF;

      IF REC_C_OTHERS_COLL.COLL_AMOUNT > REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
      THEN
         IF (REC_C_OTHERS_COLL.COLL_AMOUNT - REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
            ) >= REC_C_OTHERS_COLL.ACTUAL_LATE_FEE
         THEN
            V_ACTUAL_COLL_AMOUNT :=
               (  REC_C_OTHERS_COLL.COLL_AMOUNT
                - V_TOT_LATE_FEE
                - CASE
                     WHEN V_TOT_SUSPENSE_AMT > REC_C_OTHERS_COLL.AVL_SUS_AMT
                        THEN V_TOT_SUSPENSE_AMT
                             - REC_C_OTHERS_COLL.AVL_SUS_AMT
                     ELSE 0
                  END
               );
         ELSE
            V_ACTUAL_COLL_AMOUNT := REC_C_OTHERS_COLL.TOT_PREMIUM_AMT;
         END IF;
      ELSE
         V_ACTUAL_COLL_AMOUNT := REC_C_OTHERS_COLL.COLL_AMOUNT;
      END IF;

      V_NO_OF_INST :=
           (  REC_C_OTHERS_COLL.INSTALLMENT_NO_TO
            - REC_C_OTHERS_COLL.INSTALLMENT_NO_FROM
           )
         + 1;
      V_LATE_FEE_AMOUNT := ROUND ((V_TOT_LATE_FEE / V_NO_OF_INST), 2);
      V_SUSPENSE_AMT := ROUND ((V_TOT_SUSPENSE_AMT / V_NO_OF_INST), 2);
      V_AVL_SUS_AMT :=
                    ROUND ((REC_C_OTHERS_COLL.AVL_SUS_AMT / V_NO_OF_INST), 2);

      FOR I IN
         REC_C_OTHERS_COLL.INSTALLMENT_NO_FROM .. REC_C_OTHERS_COLL.INSTALLMENT_NO_TO
      LOOP
         IF REC_C_OTHERS_COLL.PAY_MODE_CD = '01'
         THEN
            IF V_DUE_DATE IS NULL
            THEN
               V_DUE_DATE := REC_C_OTHERS_COLL.DUE_DT_FROM;
            ELSE
               SELECT TO_NUMBER
                         (TO_CHAR
                             (LAST_DAY
                                 (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  12
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                 ),
                              'DD'
                             )
                         )
                 INTO V_CUR_MONTH_LAST_DAY
                 FROM DUAL;

               IF V_CUR_MONTH_LAST_DAY >=
                       TO_NUMBER (TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE, 'DD'))
               THEN
                  SELECT TO_DATE (   TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE,
                                              'DD'
                                             )
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 12),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               ELSE
                  SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 12),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               END IF;
            END IF;

            IF I = 1
            THEN
               V_AMOUNT_TYPE := 'F';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I = 2
            THEN
               V_AMOUNT_TYPE := 'S';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSE
               V_AMOUNT_TYPE := 'R';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            END IF;
         ELSIF REC_C_OTHERS_COLL.PAY_MODE_CD = '02'
         THEN
            IF V_DUE_DATE IS NULL
            THEN
               V_DUE_DATE := REC_C_OTHERS_COLL.DUE_DT_FROM;
            ELSE
               SELECT TO_NUMBER
                         (TO_CHAR
                             (LAST_DAY
                                 (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  6
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                 ),
                              'DD'
                             )
                         )
                 INTO V_CUR_MONTH_LAST_DAY
                 FROM DUAL;

               IF V_CUR_MONTH_LAST_DAY >=
                       TO_NUMBER (TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE, 'DD'))
               THEN
                  SELECT TO_DATE (   TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE,
                                              'DD'
                                             )
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 6),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               ELSE
                  SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 6),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               END IF;
            END IF;

            IF I = 1
            THEN
               V_AMOUNT_TYPE := 'F';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I = 2
            THEN
               V_AMOUNT_TYPE := 'D';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I IN (3, 4)
            THEN
               V_AMOUNT_TYPE := 'S';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSE
               V_AMOUNT_TYPE := 'R';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            END IF;
         ELSIF REC_C_OTHERS_COLL.PAY_MODE_CD = '03'
         THEN
            IF V_DUE_DATE IS NULL
            THEN
               V_DUE_DATE := REC_C_OTHERS_COLL.DUE_DT_FROM;
            ELSE
               SELECT TO_NUMBER
                         (TO_CHAR
                             (LAST_DAY
                                 (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  3
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                 ),
                              'DD'
                             )
                         )
                 INTO V_CUR_MONTH_LAST_DAY
                 FROM DUAL;

               IF V_CUR_MONTH_LAST_DAY >=
                       TO_NUMBER (TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE, 'DD'))
               THEN
                  SELECT TO_DATE (   TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE,
                                              'DD'
                                             )
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 3),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               ELSE
                  SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 3),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               END IF;
            END IF;

            IF I = 1
            THEN
               V_AMOUNT_TYPE := 'F';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I >= 2 AND I <= 4
            THEN
               V_AMOUNT_TYPE := 'D';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I >= 5 AND I <= 8
            THEN
               V_AMOUNT_TYPE := 'S';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSE
               V_AMOUNT_TYPE := 'R';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            END IF;
         ELSIF REC_C_OTHERS_COLL.PAY_MODE_CD = '04'
         THEN
            IF V_DUE_DATE IS NULL
            THEN
               V_DUE_DATE := REC_C_OTHERS_COLL.DUE_DT_FROM;
            ELSE
               SELECT TO_NUMBER
                         (TO_CHAR
                             (LAST_DAY
                                 (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  1
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                 ),
                              'DD'
                             )
                         )
                 INTO V_CUR_MONTH_LAST_DAY
                 FROM DUAL;

               IF V_CUR_MONTH_LAST_DAY >=
                       TO_NUMBER (TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE, 'DD'))
               THEN
                  SELECT TO_DATE (   TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE,
                                              'DD'
                                             )
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 1),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               ELSE
                  SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 1),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               END IF;
            END IF;

            IF I = 1
            THEN
               V_AMOUNT_TYPE := 'F';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I >= 2 AND I <= 12
            THEN
               V_AMOUNT_TYPE := 'D';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I >= 13 AND I <= 24
            THEN
               V_AMOUNT_TYPE := 'S';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSE
               V_AMOUNT_TYPE := 'R';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            END IF;
         END IF;


         V_BUSINESS_YR := NULL;
         V_BUSINESS_DATE := NULL;
         V_BUSINESS_DATE := REC_C_OTHERS_COLL.ACTUAL_COLL_DATE;
         V_BUSINESS_YR :=
              TO_NUMBER (TO_CHAR (REC_C_OTHERS_COLL.ACTUAL_COLL_DATE, 'RRRR'));




         IF V_DUE_DATE <= REC_C_OTHERS_COLL.LAST_PAID_DATE
         THEN
            V_STATUS := '1';
         ELSE
            V_STATUS := '0';
         END IF;

         SELECT COUNT (1)
           INTO V_BUSINESS_REC
           FROM ACC_COLL_SUMMERY
          WHERE RECEIVE_ID = REC_C_OTHERS_COLL.RECEIVE_ID
            AND PGID = REC_C_OTHERS_COLL.PGID
            AND COLL_FROM = 'R'
            AND INSTALLMENT_NO = I;

         IF V_BUSINESS_REC = 0
         THEN
            IF     V_ACTIVE_REGIONAL_CD IS NULL
               AND V_HEAD_OFFICE <> REC_C_OTHERS_COLL.ACTIVE_OFFICE_CD
            THEN
               V_ACTIVE_OFFICE_CD := V_HEAD_OFFICE;
            ELSE
               V_ACTIVE_OFFICE_CD := REC_C_OTHERS_COLL.ACTIVE_OFFICE_CD;
            END IF;

            IF REC_C_OTHERS_COLL.PPS_CD IS NOT NULL
            THEN
               BEGIN
                  SELECT DISTINCT S.PROJECT_CD
                             INTO V_PROJECT_CD
                             FROM INS_PROJECT_SETUP S
                            WHERE S.PPS_CD = REC_C_OTHERS_COLL.PPS_CD;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     V_PROJECT_CD := SUBSTR (REC_C_OTHERS_COLL.PPS_CD, 1, 2);
               END;
            ELSE
               V_PROJECT_CD := NULL;
            END IF;

            INSERT INTO ACC_COLL_SUMMERY
                        (RECEIVE_ID,
                         PGID, COLL_FROM, INSTALLMENT_NO, ACTIVE_OFFICE_CD,
                         ACTIVE_BRANCH_CD, ACTIVE_SALES_CD,
                         ACTIVE_ZONAL_CD, ACTIVE_REGIONAL_CD,
                         OFFICE_CODE,
                         RECEIVE_DT, AMOUNT_TYPE,
                         STATUS, COLLECTION_TYPE,
                         RECEIVE_MODE, PROCESS_DATE,
                         FIRST_PREM,
                         DEFFERED,
                         SECOND_YR,
                         RENEWAL,
                         F_COLL_AMOUNT,
                         D_COLL_AMOUNT,
                         S_COLL_AMOUNT,
                         R_COLL_AMOUNT,
                         DUE_DATE,
                         BUSINESS_YR,
                         BUSINESS_DATE,
                         AGENT_ID, UM_GID, BM_GID,
                         BC_GID, DC_GID, RC_GID, BRANCH_OFF,
                         SALES_OFF, ZONAL_OFF, REGIONAL_OFF,
                         SERVICING_OFF, LATE_FEE,
                         SUSPENSE_AMT, AVL_SUS_AMT,
                         INS_TP_CD, PROJECT_CD,
                         COLL_FROM_DEPT, POLICY_FILE_TP,
                         AGM_GID, DGM_GID, GM_GID
                        )
                 VALUES (REC_C_OTHERS_COLL.RECEIVE_ID,
                         REC_C_OTHERS_COLL.PGID, 'R', I, V_ACTIVE_OFFICE_CD,
                         V_ACTIVE_BRANCH_CD, V_ACTIVE_SALES_CD,
                         V_ACTIVE_ZONAL_CD, V_ACTIVE_REGIONAL_CD,
                         REC_C_OTHERS_COLL.OFFICE_CODE,
                         REC_C_OTHERS_COLL.ACTUAL_COLL_DATE, V_AMOUNT_TYPE,
                         V_STATUS, REC_C_OTHERS_COLL.COLLECTION_TYPE,
                         REC_C_OTHERS_COLL.RECEIVE_MODE, TRUNC (SYSDATE),
                         DECODE (V_AMOUNT_TYPE, 'F', V_BUSINESS_AMOUNT, 0),
                         DECODE (V_AMOUNT_TYPE, 'D', V_BUSINESS_AMOUNT, 0),
                         DECODE (V_AMOUNT_TYPE, 'S', V_BUSINESS_AMOUNT, 0),
                         DECODE (V_AMOUNT_TYPE, 'R', V_BUSINESS_AMOUNT, 0),
                         DECODE (V_AMOUNT_TYPE,
                                 'F', V_DUE_WISE_COLL_AMOUNT,
                                 0
                                ),
                         DECODE (V_AMOUNT_TYPE,
                                 'D', V_DUE_WISE_COLL_AMOUNT,
                                 0
                                ),
                         DECODE (V_AMOUNT_TYPE,
                                 'S', V_DUE_WISE_COLL_AMOUNT,
                                 0
                                ),
                         DECODE (V_AMOUNT_TYPE,
                                 'R', V_DUE_WISE_COLL_AMOUNT,
                                 0
                                ),
                         V_DUE_DATE,
                         DECODE (V_STATUS, 1, V_BUSINESS_YR, NULL),
                         DECODE (V_STATUS, 1, V_BUSINESS_DATE, NULL),
                         REC_C_OTHERS_COLL.AGENT_ID, V_UM_GID, V_BM_GID,
                         V_BC_GID, V_DC_GID, V_RC_GID, V_POL_BRANCH_CD,
                         V_POL_SALES_CD, V_POL_ZONAL_CD, V_POL_REGIONAL_CD,
                         V_POL_REGIONAL_CD, V_LATE_FEE_AMOUNT,
                         V_SUSPENSE_AMT, V_AVL_SUS_AMT,
                         REC_C_OTHERS_COLL.INS_TP_CD, V_PROJECT_CD,
                         REC_C_OTHERS_COLL.COLL_FROM, '0',
                         V_AGM_GID, V_DGM_GID, V_GM_GID
                        );

            COMMIT;
            V_OTHER_RECORD := V_OTHER_RECORD + 1;
         END IF;

      END LOOP;

      V_DUE_DATE := NULL;

      IF V_REC_COUNTER = 200
      THEN
         COMMIT;
         V_REC_COUNTER := 0;
      ELSE
         V_REC_COUNTER := V_REC_COUNTER + 1;
      END IF;

      V_TOT_CNT := V_TOT_CNT + 1;
   END LOOP;

   CLOSE C_OTHERS_COLL;

   COMMIT;



   OPEN C_FPR_COLL (V_DATE_FROM, V_DATE_TO);

   LOOP
      FETCH C_FPR_COLL
       INTO REC_C_FPR_COLL;

      EXIT WHEN C_FPR_COLL%NOTFOUND;


      BEGIN
         PRO_CONTROL_OFFICE (V_OFFICE_CD               => REC_C_FPR_COLL.ACTIVE_OFFICE_CD,
                             V_DATE                    => REC_C_FPR_COLL.ACTUAL_COLL_DATE,
                             P_ACTIVE_BRANCH_CD        => V_ACTIVE_BRANCH_CD,
                             P_ACTIVE_SALES_CD         => V_ACTIVE_SALES_CD,
                             P_ACTIVE_ZONAL_CD         => V_ACTIVE_ZONAL_CD,
                             P_ACTIVE_REGIONAL_CD      => V_ACTIVE_REGIONAL_CD
                            );
         PRO_CONTROL_OFFICE (V_OFFICE_CD               => REC_C_FPR_COLL.OFFICE_CODE,
                             V_DATE                    => REC_C_FPR_COLL.ACTUAL_COLL_DATE,
                             P_ACTIVE_BRANCH_CD        => V_POL_BRANCH_CD,
                             P_ACTIVE_SALES_CD         => V_POL_SALES_CD,
                             P_ACTIVE_ZONAL_CD         => V_POL_ZONAL_CD,
                             P_ACTIVE_REGIONAL_CD      => V_POL_REGIONAL_CD
                            );
         V_FA_BUS_ORGANOGRAM := FUN_FA_ORGANOGRAM (REC_C_FPR_COLL.AGENT_ID);

         BEGIN
            SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '06')
           INTO V_UM_GID
           FROM DUAL;

         EXCEPTION
            WHEN OTHERS
            THEN
               V_UM_GID := 0;
         END;

         BEGIN
            SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '07')
           INTO V_BM_GID
           FROM DUAL;

         EXCEPTION
            WHEN OTHERS
            THEN
               V_BM_GID := 0;
         END;

         BEGIN
            V_BC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 3 + 4
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_BC_GID := 0;
         END;

         BEGIN
            V_DC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 4 + 5
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_DC_GID := 0;
         END;

         --Add by Musha on 05.04.2022
         SELECT fun_fa_emp_type_emp_gid (REC_C_FPR_COLL.AGENT_ID, '14')
           INTO V_AGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_FPR_COLL.AGENT_ID, '15')
           INTO V_DGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_FPR_COLL.AGENT_ID, '16')
           INTO V_GM_GID
           FROM DUAL;

         IF V_UM_GID IS NULL
         THEN
            V_UM_GID := 0;
         END IF;

         IF V_BM_GID IS NULL
         THEN
            V_BM_GID := 0;
         END IF;

         IF V_BC_GID IS NULL
         THEN
            V_BC_GID := 0;
         END IF;

         IF V_DC_GID IS NULL
         THEN
            V_DC_GID := 0;
         END IF;

         BEGIN
            IF V_DC_GID IS NOT NULL
            THEN
               SELECT S.H_EMPLOYEE_GID
                 INTO V_RC_GID
                 FROM HRM_EMPLOYEE_SETUP S, HRM_EMPLOYEE E, HRM_EMP_TYPE T
                WHERE S.EMPLOYEE_GID = V_DC_GID
                  AND E.EMP_GID = S.EMPLOYEE_GID
                  AND T.EMP_TYPE_CD = '11'
                  AND S.STATUS = '1';
            ELSE
               V_RC_GID := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               V_RC_GID := 0;
         END;
      END;

      IF REC_C_FPR_COLL.COLL_AMOUNT >= REC_C_FPR_COLL.BUSINESS_AMOUNT
      THEN
         V_BUSINESS_AMOUNT := REC_C_FPR_COLL.BUSINESS_AMOUNT;
      ELSE
         V_BUSINESS_AMOUNT := REC_C_FPR_COLL.COLL_AMOUNT;
      END IF;

      IF REC_C_FPR_COLL.COLL_AMOUNT > REC_C_FPR_COLL.INSTALLMENT_PREMIUM
      THEN
         V_COLL_AMOUNT := REC_C_FPR_COLL.INSTALLMENT_PREMIUM;

         IF REC_C_FPR_COLL.DATE_BACK_LATE_FEE > 0
         THEN
            IF (REC_C_FPR_COLL.COLL_AMOUNT
                - REC_C_FPR_COLL.INSTALLMENT_PREMIUM
               ) >= REC_C_FPR_COLL.DATE_BACK_LATE_FEE
            THEN
               V_LATE_FEE_AMOUNT := REC_C_FPR_COLL.DATE_BACK_LATE_FEE;
            ELSE
               V_LATE_FEE_AMOUNT :=
                  (  REC_C_FPR_COLL.COLL_AMOUNT
                   - REC_C_FPR_COLL.INSTALLMENT_PREMIUM
                  );
            END IF;

            V_SUSPENSE_AMT :=
                 REC_C_FPR_COLL.COLL_AMOUNT
               - REC_C_FPR_COLL.INSTALLMENT_PREMIUM
               - V_LATE_FEE_AMOUNT;
         ELSE
            V_LATE_FEE_AMOUNT := 0;
            V_SUSPENSE_AMT :=
               REC_C_FPR_COLL.COLL_AMOUNT
               - REC_C_FPR_COLL.INSTALLMENT_PREMIUM;
         END IF;
      ELSE
         V_COLL_AMOUNT := REC_C_FPR_COLL.COLL_AMOUNT;
         V_LATE_FEE_AMOUNT := 0;
         V_SUSPENSE_AMT := 0;
      END IF;

      V_AMOUNT_TYPE := 'F';
      V_DUE_DATE := REC_C_FPR_COLL.COMM_DATE;

      V_BUSINESS_YR := NULL;
      V_BUSINESS_DATE := NULL;
      V_BUSINESS_DATE := REC_C_FPR_COLL.ACTUAL_COLL_DATE;
      V_BUSINESS_YR :=
                 TO_NUMBER (TO_CHAR (REC_C_FPR_COLL.ACTUAL_COLL_DATE, 'RRRR'));

      SELECT COUNT (1)
        INTO V_BUSINESS_REC
        FROM ACC_COLL_SUMMERY
       WHERE RECEIVE_ID = REC_C_FPR_COLL.RECEIVE_ID
         AND PGID = REC_C_FPR_COLL.PGID
         AND RECEIVE_MODE = REC_C_FPR_COLL.RECEIVE_MODE
         AND COLL_FROM = 'F'
         AND INSTALLMENT_NO = 1;

      IF V_BUSINESS_REC = 0
      THEN
         IF     V_ACTIVE_REGIONAL_CD IS NULL
            AND V_HEAD_OFFICE <> REC_C_FPR_COLL.ACTIVE_OFFICE_CD
         THEN
            V_ACTIVE_OFFICE_CD := V_HEAD_OFFICE;
         ELSE
            V_ACTIVE_OFFICE_CD := REC_C_FPR_COLL.ACTIVE_OFFICE_CD;
         END IF;

         IF REC_C_FPR_COLL.PPS_CD IS NOT NULL
         THEN
            BEGIN
               SELECT DISTINCT S.PROJECT_CD
                          INTO V_PROJECT_CD
                          FROM INS_PROJECT_SETUP S
                         WHERE S.PPS_CD = REC_C_FPR_COLL.PPS_CD;
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_PROJECT_CD := SUBSTR (REC_C_FPR_COLL.PPS_CD, 1, 2);
            END;
         ELSE
            V_PROJECT_CD := NULL;
         END IF;

         INSERT INTO ACC_COLL_SUMMERY
                     (RECEIVE_ID, PGID, COLL_FROM, INSTALLMENT_NO,
                      ACTIVE_OFFICE_CD, ACTIVE_BRANCH_CD,
                      ACTIVE_SALES_CD, ACTIVE_ZONAL_CD,
                      ACTIVE_REGIONAL_CD, OFFICE_CODE,
                      RECEIVE_DT, AMOUNT_TYPE, STATUS,
                      COLLECTION_TYPE,
                      RECEIVE_MODE, PROCESS_DATE,
                      FIRST_PREM, DEFFERED, SECOND_YR, RENEWAL,
                      F_COLL_AMOUNT, D_COLL_AMOUNT, S_COLL_AMOUNT,
                      R_COLL_AMOUNT, DUE_DATE, BUSINESS_YR, BUSINESS_DATE,
                      AGENT_ID, UM_GID, BM_GID, BC_GID,
                      DC_GID, RC_GID, BRANCH_OFF, SALES_OFF,
                      ZONAL_OFF, REGIONAL_OFF, SERVICING_OFF,
                      LATE_FEE, SUSPENSE_AMT, AVL_SUS_AMT,
                      INS_TP_CD, PROJECT_CD,
                      POLICY_FILE_TP,
                      AGM_GID, DGM_GID, GM_GID
                     )
              VALUES (REC_C_FPR_COLL.RECEIVE_ID, REC_C_FPR_COLL.PGID, 'F', 1,
                      V_ACTIVE_OFFICE_CD, V_ACTIVE_BRANCH_CD,
                      V_ACTIVE_SALES_CD, V_ACTIVE_ZONAL_CD,
                      V_ACTIVE_REGIONAL_CD, REC_C_FPR_COLL.OFFICE_CODE,
                      REC_C_FPR_COLL.ACTUAL_COLL_DATE, 'F', '1',
                      REC_C_FPR_COLL.COLLECTION_TYPE,
                      REC_C_FPR_COLL.RECEIVE_MODE, TRUNC (SYSDATE),
                      V_BUSINESS_AMOUNT, 0, 0, 0,
                      V_COLL_AMOUNT

         ,            0, 0,
                      0, V_DUE_DATE, V_BUSINESS_YR, V_BUSINESS_DATE,
                      REC_C_FPR_COLL.AGENT_ID, V_UM_GID, V_BM_GID, V_BC_GID,
                      V_DC_GID, V_RC_GID, V_POL_BRANCH_CD, V_POL_SALES_CD,
                      V_POL_ZONAL_CD, V_POL_REGIONAL_CD, V_POL_REGIONAL_CD,
                      V_LATE_FEE_AMOUNT, V_SUSPENSE_AMT, 0,
                      REC_C_FPR_COLL.INS_TP_CD, V_PROJECT_CD,
                      REC_C_FPR_COLL.POLICY_FILE_TP,
                      V_AGM_GID, V_DGM_GID, V_GM_GID
                     );

         V_FPR_RECORD := V_FPR_RECORD + 1;
      END IF;

      IF V_REC_COUNTER = 200
      THEN
         COMMIT;
         V_REC_COUNTER := 0;
      ELSE
         V_REC_COUNTER := V_REC_COUNTER + 1;
      END IF;

      V_TOT_CNT := V_TOT_CNT + 1;
   END LOOP;

   CLOSE C_FPR_COLL;

   COMMIT;


   V_REC_COUNTER := 0;

   OPEN C_PARTIAL_COLL (V_DATE_FROM, V_DATE_TO);

   LOOP
      FETCH C_PARTIAL_COLL
       INTO REC_C_PARTIAL_COLL;

      EXIT WHEN C_PARTIAL_COLL%NOTFOUND;


      BEGIN
         PRO_CONTROL_OFFICE
                         (V_OFFICE_CD               => REC_C_PARTIAL_COLL.ACTIVE_OFFICE_CD,
                          V_DATE                    => REC_C_PARTIAL_COLL.ACTUAL_COLL_DATE,
                          P_ACTIVE_BRANCH_CD        => V_ACTIVE_BRANCH_CD,
                          P_ACTIVE_SALES_CD         => V_ACTIVE_SALES_CD,
                          P_ACTIVE_ZONAL_CD         => V_ACTIVE_ZONAL_CD,
                          P_ACTIVE_REGIONAL_CD      => V_ACTIVE_REGIONAL_CD
                         );
         PRO_CONTROL_OFFICE (V_OFFICE_CD               => REC_C_PARTIAL_COLL.OFFICE_CODE,
                             V_DATE                    => REC_C_PARTIAL_COLL.ACTUAL_COLL_DATE,
                             P_ACTIVE_BRANCH_CD        => V_POL_BRANCH_CD,
                             P_ACTIVE_SALES_CD         => V_POL_SALES_CD,
                             P_ACTIVE_ZONAL_CD         => V_POL_ZONAL_CD,
                             P_ACTIVE_REGIONAL_CD      => V_POL_REGIONAL_CD
                            );
         V_FA_BUS_ORGANOGRAM :=
                               FUN_FA_ORGANOGRAM (REC_C_PARTIAL_COLL.AGENT_ID);

         BEGIN
            SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '06')
           INTO V_UM_GID
           FROM DUAL;
         EXCEPTION
            WHEN OTHERS
            THEN
               V_UM_GID := 0;
         END;

         BEGIN
           SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '07')
           INTO V_BM_GID
           FROM DUAL;
         EXCEPTION
            WHEN OTHERS
            THEN
               V_BM_GID := 0;
         END;

         BEGIN
            V_BC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 3 + 4
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_BC_GID := 0;
         END;

         BEGIN
            V_DC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 4 + 5
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_DC_GID := 0;
         END;

         --Add by Musha on 05.04.2022
         SELECT fun_fa_emp_type_emp_gid (REC_C_PARTIAL_COLL.AGENT_ID, '14')
           INTO V_AGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_PARTIAL_COLL.AGENT_ID, '15')
           INTO V_DGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_PARTIAL_COLL.AGENT_ID, '16')
           INTO V_GM_GID
           FROM DUAL;

         IF V_UM_GID IS NULL
         THEN
            V_UM_GID := 0;
         END IF;

         IF V_BM_GID IS NULL
         THEN
            V_BM_GID := 0;
         END IF;

         IF V_BC_GID IS NULL
         THEN
            V_BC_GID := 0;
         END IF;

         IF V_DC_GID IS NULL
         THEN
            V_DC_GID := 0;
         END IF;

         BEGIN
            IF V_DC_GID IS NOT NULL
            THEN
               SELECT S.H_EMPLOYEE_GID
                 INTO V_RC_GID
                 FROM HRM_EMPLOYEE_SETUP S, HRM_EMPLOYEE E, HRM_EMP_TYPE T
                WHERE S.EMPLOYEE_GID = V_DC_GID
                  AND E.EMP_GID = S.EMPLOYEE_GID
                  AND T.EMP_TYPE_CD = '11'
                  AND S.STATUS = '1';
            ELSE
               V_RC_GID := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               V_RC_GID := 0;
         END;
      END;

      IF V_RECEIVE_ID <> REC_C_PARTIAL_COLL.RECEIVE_ID
      THEN
         IF REC_C_PARTIAL_COLL.MAIN_COLL + REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT >
                                            REC_C_OTHERS_COLL.BUSINESS_AMOUNT
         THEN
            IF REC_C_PARTIAL_COLL.MAIN_COLL >=
                                            REC_C_OTHERS_COLL.BUSINESS_AMOUNT
            THEN
               V_TOT_BUSINESS_AMOUNT := 0;
            ELSE
               IF REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT >
                       REC_C_OTHERS_COLL.BUSINESS_AMOUNT
                     - REC_C_PARTIAL_COLL.MAIN_COLL
               THEN
                  V_TOT_BUSINESS_AMOUNT :=
                       REC_C_OTHERS_COLL.BUSINESS_AMOUNT
                     - REC_C_PARTIAL_COLL.MAIN_COLL;
               END IF;
            END IF;
         ELSE
            V_TOT_BUSINESS_AMOUNT := REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT;
         END IF;

         IF REC_C_PARTIAL_COLL.MAIN_COLL + REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT >
                                            REC_C_PARTIAL_COLL.TOT_PREMIUM_AMT
         THEN
            IF REC_C_PARTIAL_COLL.MAIN_COLL >=
                                           REC_C_PARTIAL_COLL.TOT_PREMIUM_AMT
            THEN
               IF REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE <= 0
               THEN
                  V_TOT_SUSPENSE_AMT := REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT;
                  V_TOT_LATE_FEE := 0;
               ELSE
                  IF REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT >
                                       REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE
                  THEN
                     V_TOT_SUSPENSE_AMT :=
                          REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT
                        - REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE;
                     V_TOT_LATE_FEE := REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE;
                  ELSE
                     V_TOT_SUSPENSE_AMT := 0;
                     V_TOT_LATE_FEE := REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT;
                  END IF;
               END IF;

               V_TOT_PREMIUM_AMOUNT := 0;
            ELSE
               IF REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT >
                       REC_C_PARTIAL_COLL.TOT_PREMIUM_AMT
                     - REC_C_PARTIAL_COLL.MAIN_COLL
               THEN
                  V_TOT_PREMIUM_AMOUNT :=
                       REC_C_PARTIAL_COLL.TOT_PREMIUM_AMT
                     - REC_C_PARTIAL_COLL.MAIN_COLL;

                  IF REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE <= 0
                  THEN
                     V_TOT_SUSPENSE_AMT :=
                          REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT
                        - V_TOT_PREMIUM_AMOUNT;
                     V_TOT_LATE_FEE := 0;
                  ELSE
                     IF   REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT
                        - V_TOT_PREMIUM_AMOUNT >
                                        REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE
                     THEN
                        V_TOT_SUSPENSE_AMT :=
                             (  REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT
                              - V_TOT_PREMIUM_AMOUNT
                             )
                           - REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE;
                        V_TOT_LATE_FEE :=
                                        REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE;
                     ELSE
                        V_TOT_SUSPENSE_AMT := 0;
                        V_TOT_LATE_FEE :=
                             REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT
                           - V_TOT_PREMIUM_AMOUNT;
                     END IF;
                  END IF;
               END IF;
            END IF;
         ELSE
            V_TOT_PREMIUM_AMOUNT := REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT;
            V_TOT_SUSPENSE_AMT := 0;
            V_TOT_LATE_FEE := 0;
         END IF;

         V_NO_OF_INST :=
              (  REC_C_PARTIAL_COLL.INSTALLMENT_NO_TO
               - REC_C_PARTIAL_COLL.INSTALLMENT_NO_FROM
              )
            + 1;
         V_LATE_FEE_AMOUNT := ROUND ((V_TOT_LATE_FEE / V_NO_OF_INST), 2);
         V_SUSPENSE_AMT := ROUND ((V_TOT_SUSPENSE_AMT / V_NO_OF_INST), 2);

         FOR I IN
            REC_C_PARTIAL_COLL.INSTALLMENT_NO_FROM .. REC_C_PARTIAL_COLL.INSTALLMENT_NO_TO
         LOOP
            IF REC_C_PARTIAL_COLL.PAY_MODE_CD = '01'
            THEN
               IF V_DUE_DATE IS NULL
               THEN
                  V_DUE_DATE := REC_C_PARTIAL_COLL.DUE_DATE_FROM;
               ELSE
                  SELECT TO_NUMBER
                            (TO_CHAR
                                (LAST_DAY
                                    (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  12
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                    ),
                                 'DD'
                                )
                            )
                    INTO V_CUR_MONTH_LAST_DAY
                    FROM DUAL;

                  IF V_CUR_MONTH_LAST_DAY >=
                        TO_NUMBER (TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                            'DD')
                                  )
                  THEN
                     SELECT TO_DATE (   TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                                 'DD'
                                                )
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 12),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  ELSE
                     SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 12),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  END IF;
               END IF;

               IF I = 1
               THEN
                  V_AMOUNT_TYPE := 'F';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I = 2
               THEN
                  V_AMOUNT_TYPE := 'S';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSE
                  V_AMOUNT_TYPE := 'R';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               END IF;
            ELSIF REC_C_PARTIAL_COLL.PAY_MODE_CD = '02'
            THEN
               IF V_DUE_DATE IS NULL
               THEN
                  V_DUE_DATE := REC_C_PARTIAL_COLL.DUE_DATE_FROM;
               ELSE
                  SELECT TO_NUMBER
                            (TO_CHAR
                                (LAST_DAY
                                    (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  6
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                    ),
                                 'DD'
                                )
                            )
                    INTO V_CUR_MONTH_LAST_DAY
                    FROM DUAL;

                  IF V_CUR_MONTH_LAST_DAY >=
                        TO_NUMBER (TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                            'DD')
                                  )
                  THEN
                     SELECT TO_DATE (   TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                                 'DD'
                                                )
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 6),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  ELSE
                     SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 6),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  END IF;
               END IF;

               IF I = 1
               THEN
                  V_AMOUNT_TYPE := 'F';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I = 2
               THEN
                  V_AMOUNT_TYPE := 'D';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I IN (3, 4)
               THEN
                  V_AMOUNT_TYPE := 'S';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSE
                  V_AMOUNT_TYPE := 'R';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               END IF;
            ELSIF REC_C_PARTIAL_COLL.PAY_MODE_CD = '03'
            THEN
               IF V_DUE_DATE IS NULL
               THEN
                  V_DUE_DATE := REC_C_PARTIAL_COLL.DUE_DATE_FROM;
               ELSE
                  SELECT TO_NUMBER
                            (TO_CHAR
                                (LAST_DAY
                                    (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  3
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                    ),
                                 'DD'
                                )
                            )
                    INTO V_CUR_MONTH_LAST_DAY
                    FROM DUAL;

                  IF V_CUR_MONTH_LAST_DAY >=
                        TO_NUMBER (TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                            'DD')
                                  )
                  THEN
                     SELECT TO_DATE (   TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                                 'DD'
                                                )
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 3),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  ELSE
                     SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 3),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  END IF;
               END IF;

               IF I = 1
               THEN
                  V_AMOUNT_TYPE := 'F';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I >= 2 AND I <= 4
               THEN
                  V_AMOUNT_TYPE := 'D';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I >= 5 AND I <= 8
               THEN
                  V_AMOUNT_TYPE := 'S';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSE
                  V_AMOUNT_TYPE := 'R';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               END IF;
            ELSIF REC_C_PARTIAL_COLL.PAY_MODE_CD = '04'
            THEN
               IF V_DUE_DATE IS NULL
               THEN
                  V_DUE_DATE := REC_C_PARTIAL_COLL.DUE_DATE_FROM;
               ELSE
                  SELECT TO_NUMBER
                            (TO_CHAR
                                (LAST_DAY
                                    (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  1
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                    ),
                                 'DD'
                                )
                            )
                    INTO V_CUR_MONTH_LAST_DAY
                    FROM DUAL;

                  IF V_CUR_MONTH_LAST_DAY >=
                        TO_NUMBER (TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                            'DD')
                                  )
                  THEN
                     SELECT TO_DATE (   TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                                 'DD'
                                                )
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 1),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  ELSE
                     SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 1),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  END IF;
               END IF;

               IF I = 1
               THEN
                  V_AMOUNT_TYPE := 'F';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I >= 2 AND I <= 12
               THEN
                  V_AMOUNT_TYPE := 'D';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I >= 13 AND I <= 24
               THEN
                  V_AMOUNT_TYPE := 'S';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSE
                  V_AMOUNT_TYPE := 'R';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               END IF;
            END IF;


            V_BUSINESS_YR := NULL;
            V_BUSINESS_DATE := NULL;
            V_BUSINESS_DATE := REC_C_PARTIAL_COLL.ACTUAL_COLL_DATE;
            V_BUSINESS_YR :=
               TO_NUMBER (TO_CHAR (REC_C_PARTIAL_COLL.ACTUAL_COLL_DATE,
                                   'RRRR')
                         );

            IF V_DUE_DATE <= REC_C_PARTIAL_COLL.LAST_PAID_DATE
            THEN
               V_STATUS := '1';
            ELSE
               V_STATUS := '0';
            END IF;

            V_BUSINESS_REC := 0;

            SELECT COUNT (1)
              INTO V_BUSINESS_REC
              FROM ACC_COLL_SUMMERY
             WHERE PGID = REC_C_PARTIAL_COLL.PGID
               AND INSTALLMENT_NO = I
               AND RECEIVE_ID = REC_C_PARTIAL_COLL.RECEIVE_ID;

            IF V_BUSINESS_REC = 0
            THEN
               IF     V_ACTIVE_REGIONAL_CD IS NULL
                  AND V_HEAD_OFFICE <> REC_C_PARTIAL_COLL.ACTIVE_OFFICE_CD
               THEN
                  V_ACTIVE_OFFICE_CD := V_HEAD_OFFICE;
               ELSE
                  V_ACTIVE_OFFICE_CD := REC_C_PARTIAL_COLL.ACTIVE_OFFICE_CD;
               END IF;

               IF REC_C_PARTIAL_COLL.PPS_CD IS NOT NULL
               THEN
                  BEGIN
                     SELECT DISTINCT S.PROJECT_CD
                                INTO V_PROJECT_CD
                                FROM INS_PROJECT_SETUP S
                               WHERE S.PPS_CD = REC_C_PARTIAL_COLL.PPS_CD;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        V_PROJECT_CD :=
                                     SUBSTR (REC_C_PARTIAL_COLL.PPS_CD, 1, 2);
                  END;
               ELSE
                  V_PROJECT_CD := NULL;
               END IF;

               INSERT INTO ACC_COLL_SUMMERY
                           (RECEIVE_ID,
                            PGID, COLL_FROM, INSTALLMENT_NO,
                            ACTIVE_OFFICE_CD, ACTIVE_BRANCH_CD,
                            ACTIVE_SALES_CD, ACTIVE_ZONAL_CD,
                            ACTIVE_REGIONAL_CD,
                            OFFICE_CODE,
                            RECEIVE_DT,
                            AMOUNT_TYPE, STATUS,
                            COLLECTION_TYPE,
                            RECEIVE_MODE, PROCESS_DATE,
                            FIRST_PREM,
                            DEFFERED,
                            SECOND_YR,
                            RENEWAL,
                            F_COLL_AMOUNT,
                            D_COLL_AMOUNT,
                            S_COLL_AMOUNT,
                            R_COLL_AMOUNT,
                            DUE_DATE,
                            BUSINESS_YR,
                            BUSINESS_DATE,
                            AGENT_ID, UM_GID, BM_GID,
                            BC_GID, DC_GID, RC_GID, BRANCH_OFF,
                            SALES_OFF, ZONAL_OFF,
                            REGIONAL_OFF, SERVICING_OFF,
                            LATE_FEE, SUSPENSE_AMT, AVL_SUS_AMT,
                            INS_TP_CD, PROJECT_CD, POLICY_FILE_TP,
                            AGM_GID, DGM_GID, GM_GID
                           )
                    VALUES (REC_C_PARTIAL_COLL.RECEIVE_ID,
                            REC_C_PARTIAL_COLL.PGID, 'P', I,
                            V_ACTIVE_OFFICE_CD, V_ACTIVE_BRANCH_CD,
                            V_ACTIVE_SALES_CD, V_ACTIVE_ZONAL_CD,
                            V_ACTIVE_REGIONAL_CD,
                            REC_C_PARTIAL_COLL.OFFICE_CODE,
                            REC_C_PARTIAL_COLL.ACTUAL_COLL_DATE,
                            V_AMOUNT_TYPE, V_STATUS,
                            REC_C_PARTIAL_COLL.COLL_MEDIA,
                            REC_C_PARTIAL_COLL.COLL_TYPE, TRUNC (SYSDATE),
                            DECODE (V_AMOUNT_TYPE, 'F', V_BUSINESS_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'D', V_BUSINESS_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'S', V_BUSINESS_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'R', V_BUSINESS_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'F', V_COLL_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'D', V_COLL_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'S', V_COLL_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'R', V_COLL_AMOUNT, 0),
                            V_DUE_DATE,
                            DECODE (V_STATUS, 1, V_BUSINESS_YR, NULL),
                            DECODE (V_STATUS, 1, V_BUSINESS_DATE, NULL),
                            REC_C_PARTIAL_COLL.AGENT_ID, V_UM_GID, V_BM_GID,
                            V_BC_GID, V_DC_GID, V_RC_GID, V_POL_BRANCH_CD,
                            V_POL_SALES_CD, V_POL_ZONAL_CD,
                            V_POL_REGIONAL_CD, V_POL_REGIONAL_CD,
                            V_LATE_FEE_AMOUNT, V_SUSPENSE_AMT, 0,
                            REC_C_PARTIAL_COLL.INS_TP_CD, V_PROJECT_CD, '0',
                            V_AGM_GID, V_DGM_GID, V_GM_GID
                           );

               COMMIT;
               V_PARTIAL_RECORD := V_PARTIAL_RECORD + 1;
            END IF;
         END LOOP;

         V_DUE_DATE := NULL;

         IF V_REC_COUNTER = 200
         THEN
            COMMIT;
            V_REC_COUNTER := 0;
         ELSE
            V_REC_COUNTER := V_REC_COUNTER + 1;
         END IF;

         V_TOT_CNT := V_TOT_CNT + 1;
      ELSE
         NULL;
      END IF;

      V_RECEIVE_ID := REC_C_PARTIAL_COLL.RECEIVE_ID;
   END LOOP;

   CLOSE C_PARTIAL_COLL;

   OPEN C_OTHERS_INVALID (V_DATE_FROM, V_DATE_TO);

   LOOP
      FETCH C_OTHERS_INVALID
       INTO REC_C_OTHERS_INVALID;

      EXIT WHEN C_OTHERS_INVALID%NOTFOUND;

      UPDATE ACC_COLL_SUMMERY C
         SET REC_STATUS = '0',
             STATUS = '0',
             BUSINESS_YR = NULL,
             BUSINESS_DATE = NULL
       WHERE C.PGID = REC_C_OTHERS_INVALID.PGID
         AND C.RECEIVE_ID = REC_C_OTHERS_INVALID.RECEIVE_ID
         AND C.COLL_FROM = 'R'
         AND REC_STATUS = '1';

      COMMIT;
      V_INVALID_RECORD := V_INVALID_RECORD + 1;
      V_INVALID_AMOUNT := V_INVALID_AMOUNT + REC_C_OTHERS_INVALID.COLL_AMOUNT;
   END LOOP;

   CLOSE C_OTHERS_INVALID;

   OPEN C_OTHERS_ADJUSTED (V_DATE_FROM, V_DATE_TO);

   LOOP
      FETCH C_OTHERS_ADJUSTED
       INTO REC_C_OTHERS_ADJUSTED;

      EXIT WHEN C_OTHERS_ADJUSTED%NOTFOUND;

      UPDATE ACC_COLL_SUMMERY C
         SET STATUS = '1',
             BUSINESS_YR =
                         TO_CHAR (REC_C_OTHERS_ADJUSTED.ADJUSTMENT_DT, 'RRRR'),
             BUSINESS_DATE = REC_C_OTHERS_ADJUSTED.ADJUSTMENT_DT
       WHERE C.PGID = REC_C_OTHERS_ADJUSTED.PGID
         AND C.RECEIVE_ID = REC_C_OTHERS_ADJUSTED.RECEIVE_ID
         AND C.COLL_FROM = 'R'
         AND STATUS = '0';

      COMMIT;
   END LOOP;

   CLOSE C_OTHERS_ADJUSTED;

   SELECT NVL (MAX (COLL_DATE) + 1, TO_DATE ('01-NOV-2016'))
     INTO V_COLL_DATE
     FROM ACC_OFF_SUSP_LEDGER;

   IF V_COLL_DATE > TRUNC (SYSDATE)
   THEN
      V_COLL_DATE := NULL;
   END IF;

   IF V_COLL_DATE IS NOT NULL
   THEN
      SELECT ROUND (TRUNC (SYSDATE) - V_COLL_DATE) + 1
        INTO V_NO_TIMES
        FROM DUAL;

      FOR I IN 1 .. V_NO_TIMES
      LOOP
         SELECT NVL (MAX (COLL_DATE) + 1, TO_DATE ('01-NOV-2016'))
           INTO V_COLL_DATE
           FROM ACC_OFF_SUSP_LEDGER;

         IF V_COLL_DATE > TRUNC (SYSDATE)
         THEN
            V_COLL_DATE := NULL;
         END IF;



         OPEN C_OFF_WISE_SUS_LEDGER (V_COLL_DATE);

         LOOP
            FETCH C_OFF_WISE_SUS_LEDGER
             INTO REC_C_OFF_WISE_SUS_LEDGER;

            EXIT WHEN C_OFF_WISE_SUS_LEDGER%NOTFOUND;
            PRO_CONTROL_OFFICE
                  (V_OFFICE_CD               => REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD,
                   V_DATE                    => REC_C_OFF_WISE_SUS_LEDGER.COLL_DATE,
                   P_ACTIVE_BRANCH_CD        => V_ACTIVE_BRANCH_CD,
                   P_ACTIVE_SALES_CD         => V_ACTIVE_SALES_CD,
                   P_ACTIVE_ZONAL_CD         => V_ACTIVE_ZONAL_CD,
                   P_ACTIVE_REGIONAL_CD      => V_ACTIVE_REGIONAL_CD
                  );

            DECLARE
               V_MAX_COLL_DT   DATE;
            BEGIN
               BEGIN
                  SELECT MAX (COLL_DATE)
                    INTO V_MAX_COLL_DT
                    FROM ACC_OFF_SUSP_LEDGER
                   WHERE ACTIVE_OFFICE_CD =
                                    REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD
                     AND INS_TP_CD = REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD
                     AND COLL_DATE < REC_C_OFF_WISE_SUS_LEDGER.COLL_DATE;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     V_MAX_COLL_DT := REC_C_OFF_WISE_SUS_LEDGER.COLL_DATE - 1;
               END;

               SELECT NVL (CLOSING_SUS_AMT, 0)
                 INTO V_PRE_CLOSING_SUS_AMT
                 FROM ACC_OFF_SUSP_LEDGER
                WHERE ACTIVE_OFFICE_CD =
                                    REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD
                  AND INS_TP_CD = REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD
                  AND COLL_DATE = V_MAX_COLL_DT;
            EXCEPTION
               WHEN OTHERS
               THEN
                  BEGIN
                     SELECT   NVL (SUM (COLL_AMOUNT), 0)
                            - (  NVL (SUM (ADJUST_AMT), 0)
                               + NVL (SUM (INVALID_AMT), 0)
                              )
                       INTO V_PRE_CLOSING_SUS_AMT
                       FROM (SELECT AR.ACTIVE_OFFICE_CD,
                                    AR.RECEIVE_DATE COLL_DATE, AP.INS_TP_CD,
                                    AR.COLL_AMOUNT,
                                    DECODE (AR.STATUS,
                                            '1', COLL_AMOUNT,
                                            0
                                           ) ADJUST_AMT,
                                    0 INVALID_AMT
                               FROM ACC_ADVANCE_RECEIVABLES AR,
                                    INS_P_PROPOSAL AP
                              WHERE AR.RECEIVE_DATE >= TO_DATE ('01-jan-2015')
                                AND AR.RECEIVE_DATE < V_COLL_DATE
                                AND AR.PGID = AP.PGID
                                AND AR.REC_STATUS = '1'
                                AND AR.ACTIVE_OFFICE_CD =
                                       REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD
                                AND AP.INS_TP_CD =
                                           REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD
                                AND AR.I_USR <> 'SLICL'
                             UNION ALL
                             SELECT AR.ACTIVE_OFFICE_CD,
                                    AR.RECEIVE_DATE COLL_DATE, AP.INS_TP_CD,
                                    AR.COLL_AMOUNT,
                                    CASE
                                       WHEN AR.COLL_AMOUNT >=
                                                AR.TOT_PREMIUM_AMT
                                          THEN AR.COLL_AMOUNT
                                       WHEN STATUS = '1'
                                          THEN AR.COLL_AMOUNT
                                       ELSE 0
                                    END ADJUST_AMT,
                                    0 INVALID_AMT
                               FROM ACC_RECEIVABLES AR, INS_P_SUMMERY AP
                              WHERE AR.RECEIVE_DATE >= TO_DATE ('01-jan-2015')
                                AND AR.RECEIVE_DATE < V_COLL_DATE
                                AND AR.PGID = AP.PGID
                                AND AR.REC_STATUS = '1'
                                AND AR.ACTIVE_OFFICE_CD =
                                       REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD
                                AND AP.INS_TP_CD =
                                           REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD
                                AND AR.I_USR <> 'SLICL'
                             UNION ALL
                             SELECT DISTINCT AR.ACTIVE_OFFICE_CD,
                                             AR.RECEIVE_DATE COLL_DATE,
                                             AP.INS_TP_CD, AR.COLL_AMOUNT,
                                             CASE
                                                WHEN AR.COLL_AMOUNT >=
                                                       AR.TOT_REQUIRED_AMT
                                                   THEN AR.COLL_AMOUNT
                                                WHEN R.STATUS =
                                                               '1'
                                                   THEN AR.COLL_AMOUNT
                                                ELSE 0
                                             END ADJUST_AMT,
                                             0 INVALID_AMT
                                        FROM ACC_PARTIAL_RECEIVABLES AR,
                                             ACC_PARTIAL_RECEIVABLES_REF PRF,
                                             INS_P_SUMMERY AP,
                                             ACC_RECEIVABLES R
                                       WHERE AR.RECEIVE_ID = PRF.RECEIVE_ID
                                         AND AR.PGID = AP.PGID
                                         AND PRF.RECEIVE_ID_REF = R.RECEIVE_ID
                                         AND AR.RECEIVE_DATE >=
                                                       TO_DATE ('01-jan-2015')
                                         AND AR.RECEIVE_DATE < V_COLL_DATE
                                         AND AR.PGID = AP.PGID
                                         AND AR.REC_STATUS = '1'
                                         AND NVL (AR.COLL_AMOUNT, 0) > 0
                                         AND AR.ACTIVE_OFFICE_CD =
                                                REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD
                                         AND AP.INS_TP_CD =
                                                REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD
                                         AND AR.I_USR <> 'SLICL') A;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        V_PRE_CLOSING_SUS_AMT := 0;
                  END;
            END;

            V_CLOSING_SUS_AMT :=
                 (  V_PRE_CLOSING_SUS_AMT
                  + REC_C_OFF_WISE_SUS_LEDGER.COLLECTION_AMT
                 )
               - (  REC_C_OFF_WISE_SUS_LEDGER.ADJUSTED_AMT
                  + REC_C_OFF_WISE_SUS_LEDGER.INVALID_AMT
                 );

            IF V_CLOSING_SUS_AMT < 0
            THEN
               V_CLOSING_SUS_AMT := 0;
            END IF;

            INSERT INTO ACC_OFF_SUSP_LEDGER
                        (ACTIVE_OFFICE_CD,
                         ACTIVE_BRANCH_CD, ACTIVE_SALES_CD,
                         ACTIVE_ZONAL_CD, ACTIVE_REGIONAL_CD,
                         COLL_DATE,
                         INS_TP_CD,
                         OPENING_SUS_AMT,
                         COLLECTION_AMT,
                         ADJUSTED_AMT,
                         INVALID_AMT,
                         CLOSING_SUS_AMT
                        )
                 VALUES (REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD,
                         V_ACTIVE_BRANCH_CD, V_ACTIVE_SALES_CD,
                         V_ACTIVE_ZONAL_CD, V_ACTIVE_REGIONAL_CD,
                         REC_C_OFF_WISE_SUS_LEDGER.COLL_DATE,
                         REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD,
                         V_PRE_CLOSING_SUS_AMT,
                         REC_C_OFF_WISE_SUS_LEDGER.COLLECTION_AMT,
                         REC_C_OFF_WISE_SUS_LEDGER.ADJUSTED_AMT,
                         REC_C_OFF_WISE_SUS_LEDGER.INVALID_AMT,
                         V_CLOSING_SUS_AMT
                        );

            COMMIT;
         END LOOP;

         DECLARE
            V_SUS_COUNT   NUMBER (10);
         BEGIN
            SELECT COUNT (1)
              INTO V_SUS_COUNT
              FROM ACC_OFF_SUSP_LEDGER
             WHERE COLL_DATE = V_COLL_DATE;

            IF V_SUS_COUNT = 0
            THEN
               INSERT INTO ACC_OFF_SUSP_LEDGER
                           (ACTIVE_OFFICE_CD, ACTIVE_BRANCH_CD,
                            ACTIVE_SALES_CD, ACTIVE_ZONAL_CD,
                            ACTIVE_REGIONAL_CD, COLL_DATE, INS_TP_CD,
                            OPENING_SUS_AMT, COLLECTION_AMT, ADJUSTED_AMT,
                            INVALID_AMT, CLOSING_SUS_AMT)
                  (SELECT ACTIVE_OFFICE_CD, ACTIVE_BRANCH_CD,
                          ACTIVE_SALES_CD, ACTIVE_ZONAL_CD,
                          ACTIVE_REGIONAL_CD, V_COLL_DATE, INS_TP_CD,
                          CLOSING_SUS_AMT, 0, 0, 0, CLOSING_SUS_AMT
                     FROM ACC_OFF_SUSP_LEDGER L
                    WHERE COLL_DATE = V_COLL_DATE - 1
                      AND NOT EXISTS (
                             SELECT 1
                               FROM ACC_OFF_SUSP_LEDGER
                              WHERE ACTIVE_OFFICE_CD = L.ACTIVE_OFFICE_CD
                                AND INS_TP_CD = L.INS_TP_CD
                                AND COLL_DATE = V_COLL_DATE));
            END IF;
         END;

         COMMIT;

         CLOSE C_OFF_WISE_SUS_LEDGER;
      END LOOP;
   END IF;



   OPEN C_COM_WISE_BUS_SUMM;

   LOOP
      FETCH C_COM_WISE_BUS_SUMM
       INTO REC_C_COM_WISE_BUS_SUMM;

      EXIT WHEN C_COM_WISE_BUS_SUMM%NOTFOUND;
      PRO_CONTROL_OFFICE (V_OFFICE_CD               => REC_C_COM_WISE_BUS_SUMM.OFFICE_CD,
                          V_DATE                    => REC_C_COM_WISE_BUS_SUMM.BILL_DATE,
                          P_ACTIVE_BRANCH_CD        => V_POL_BRANCH_CD,
                          P_ACTIVE_SALES_CD         => V_POL_SALES_CD,
                          P_ACTIVE_ZONAL_CD         => V_POL_ZONAL_CD,
                          P_ACTIVE_REGIONAL_CD      => V_POL_REGIONAL_CD
                         );

      UPDATE ACC_COLL_SUMMERY
         SET COM_BILL_DATE = REC_C_COM_WISE_BUS_SUMM.BILL_DATE,
             COM_EXE_DATE = REC_C_COM_WISE_BUS_SUMM.COM_EXE_DATE,
             BRANCH_OFF = V_POL_BRANCH_CD,
             SALES_OFF = V_POL_SALES_CD,
             ZONAL_OFF = V_POL_ZONAL_CD,
             SERVICING_OFF = V_POL_REGIONAL_CD,
             REGIONAL_OFF = V_POL_REGIONAL_CD
       WHERE PGID = REC_C_COM_WISE_BUS_SUMM.PGID
         AND RECEIVE_ID = REC_C_COM_WISE_BUS_SUMM.RECEIVE_ID
         AND COLL_FROM = REC_C_COM_WISE_BUS_SUMM.COLL_FROM
         AND INSTALLMENT_NO = REC_C_COM_WISE_BUS_SUMM.INSTALLMENT_NO
         AND DUE_DATE = REC_C_COM_WISE_BUS_SUMM.DUE_DATE;

      COMMIT;
   END LOOP;

   CLOSE C_COM_WISE_BUS_SUMM;

   SELECT NVL (MAX (SL_NO), 0) + 1
     INTO V_SL_NO
     FROM ACC_COLL_SUMMERY_PRO_LOG;

   INSERT INTO ACC_COLL_SUMMERY_PRO_LOG
               (PROCESS_DATE, PRO_EXE_STATUS, EXE_USER, FPR_RECORD,
                OTHER_RECORD, PARTIAL_RECORD, INVALID_RECORD,
                INVALID_AMOUNT, SL_NO, TOTAL_TIME_IN_MINUTES
               )
        VALUES (V_PROCESS_DT, '0', P_USER, V_FPR_RECORD,
                V_OTHER_RECORD, V_PARTIAL_RECORD, V_INVALID_RECORD,
                V_INVALID_AMOUNT, V_SL_NO, (SYSDATE - V_PROCESS_DT) * 24 * 60
               );

   COMMIT;
   P_ERROR := 'Success' || ' -v_tot_cnt ' || V_TOT_CNT;
EXCEPTION
   WHEN OTHERS
   THEN
      P_ERROR := SQLERRM || ' -v_tot_cnt ' || V_TOT_CNT;
      ROLLBACK;
END;
/


--
-- PRO_PREMIUM_COLL_SUMMERY_BKP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_premium_coll_summery_BKP (
   P_USER          VARCHAR2,

   P_ERROR   OUT   VARCHAR2
)
IS
   V_NO_OF_INST                NUMBER                          := 0;
   V_AMOUNT_TYPE               CHAR (1);
   V_TOT_PREMIUM_AMOUNT        NUMBER (15, 2)                  := 0;
   V_TOT_LATE_FEE              NUMBER (15, 2)                  := 0;
   V_TOT_SUSPENSE_AMT          NUMBER (15, 2)                  := 0;
   V_COLL_AMOUNT               NUMBER (15, 2)                  := 0;
   V_LATE_FEE_AMOUNT           NUMBER (15, 2)                  := 0;
   V_SUSPENSE_AMT              NUMBER (15, 2)                  := 0;
   V_REC_COUNTER               NUMBER (10)                     := 0;
   V_STATEMENT                 VARCHAR2 (100);
   V_DUE_DATE                  DATE                            := NULL;
   V_BUSINESS_YR               NUMBER (4);
   V_FY_CLOSE_DT               DATE;
   V_FY_CLOSE                  CHAR (1);
   V_FY_ED_DT                  DATE;
   V_FY_ST_DT                  DATE;
   V_MIN_FY_ED_DT              DATE;
   V_STATUS                    CHAR (1);
   V_RECEIVE_ID                NUMBER                          := 0;
   V_TOT_CNT                   NUMBER                          := 0;
   V_BUSINESS_AMOUNT           NUMBER (10, 2)                  := 0;
   V_NO_TIMES                  NUMBER (10)                     := 0;


   CURSOR C_FPR_COLL (V_DATE_FROM DATE, V_DATE_TO DATE)
   IS
      SELECT AR.RECEIVE_ID, AR.PGID, AR.COLLECTION_TYPE,
             NVL (FUN_AGENT_OFFICE_CD (AP.AGENT_ID, AR.ACTUAL_COLL_DATE),
                  NVL (AP.OFFICE_CD, '07001')
                 ) OFFICE_CODE,
             AR.RECEIVE_MODE, AR.COLL_AMOUNT,
             TRUNC (AR.RECEIVE_DATE) RECEIVE_DATE, AR.STATUS,
             NVL (AR.ACTIVE_OFFICE_CD, '07001') ACTIVE_OFFICE_CD,
             1 INSTALLMENT_NO_FROM, 1 INSTALLMENT_NO_TO, AP.COMM_DATE,
             AP.PAY_MODE_CD, AP.LAST_PAID_DATE, AP.INSTALLMENT_PREMIUM,
               NVL (AP.LIFE_PREMIUM, 0)
             + NVL (AP.SUPPL_BEN_PREMIUM, 0)
             + NVL (AP.SUPPL_PRODUCT_PREMIUM, 0) BUSINESS_AMOUNT,
             AP.AGENT_ID, AP.DO_GID, AP.DM_GID, TRUNC (AP.I_DT) I_DT,
             0 SUSPENSE, AR.DATE_BACK_LATE_FEE, AR.ACTUAL_COLL_DATE,
             AP.INS_TP_CD, AP.PPS_CD,
             (CASE
                 WHEN AR.POL_FRM_PREV_POL_ST = '1'
                    THEN '1'
                 WHEN AP.PAY_MODE_CD = '05'
                    THEN '2'
                 ELSE '0'
              END
             ) POLICY_FILE_TP
        FROM V_ADVANCE_COLL_SUMMARY AR, INS_P_SUMMERY AP
       WHERE AR.ACTUAL_COLL_DATE BETWEEN V_DATE_FROM AND V_DATE_TO

         AND STATUS = '1'
         AND AR.PGID = AP.PGID

         AND NOT EXISTS (
                SELECT 1
                  FROM ACC_COLL_SUMMERY C
                 WHERE C.PGID = AR.PGID
                   AND C.RECEIVE_ID = AR.RECEIVE_ID
                   AND C.RECEIVE_MODE = AR.RECEIVE_MODE
                   AND C.COLL_FROM = 'F');



   CURSOR C_OTHERS_COLL (V_DATE_FROM DATE , V_DATE_TO DATE )
   IS
      SELECT R.RECEIVE_ID, R.PGID, R.COLLECTION_TYPE,
             NVL
                (FUN_AGENT_OFFICE_CD
                    (S.AGENT_ID,
                     CASE
                        WHEN R.RECEIVE_DATE < TO_DATE ('16-mar-2016')
                           THEN DECODE (R.MODE_TP,
                                        1, R.RECEIVE_DATE,
                                        R.COLL_SLIP_REC_DT
                                       )
                        ELSE R.RECEIVE_DATE
                     END
                    ),
                 NVL (S.OFFICE_CD, '07001')
                ) OFFICE_CODE,
             R.RECEIVE_MODE, R.COLL_AMOUNT,
             ROUND (R.TOT_PREMIUM_AMT) TOT_PREMIUM_AMT,
             (NVL (R.LATE_FEE, 0) - NVL (R.LATEFEE_WAIVER, 0)
             ) ACTUAL_LATE_FEE, TRUNC (R.RECEIVE_DATE) RECEIVE_DATE,
             DECODE (R.STATUS,
                     '1', NVL (TRUNC (ADJUSTMENT_DATE),
                               TRUNC (R.RECEIVE_DATE)),
                     TRUNC (ADJUSTMENT_DATE)
                    ) ADJUSTMENT_DT,
             R.STATUS, NVL (R.ACTIVE_OFFICE_CD, '07001') ACTIVE_OFFICE_CD,
             R.INSTALLMENT_NO_FROM, R.INSTALLMENT_NO_TO, R.DUE_DT_FROM,
             R.DUE_DT_TO, S.INSTALLMENT_PREMIUM,
               (  NVL (S.LIFE_PREMIUM, 0)
                + NVL (S.SUPPL_BEN_PREMIUM, 0)
                + NVL (S.SUPPL_PRODUCT_PREMIUM, 0)
               )
             * ((R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) + 1)
                                                              BUSINESS_AMOUNT,
             S.PAY_MODE_CD, S.LAST_PAID_DATE, S.AGENT_ID, S.DO_GID, S.DM_GID,
             DECODE (S.I_USR, 'SLICL', 0, R.AVL_SUS_AMT) AVL_SUS_AMT,
             NVL (R.ADV_STATUS, 0) ADV_STATUS,
             NVL (R.MAN_ADJUSTED, '0') MAN_ADJUSTED, TRUNC (R.I_DT)
                                                                   ENTRY_DATE,
             R.COLL_SLIP_REC_DT, TRUNC (R.I_DT) I_DT,
             CASE
                WHEN R.RECEIVE_DATE <
                                     TO_DATE ('16-mar-2016')
                   THEN DECODE (R.MODE_TP,
                                1, R.RECEIVE_DATE,
                                R.COLL_SLIP_REC_DT
                               )
                ELSE R.RECEIVE_DATE
             END ACTUAL_COLL_DATE,
             S.COMM_DATE, S.INS_TP_CD, S.PPS_CD, TRIM(R.COLL_FROM) COLL_FROM
        FROM ACC_RECEIVABLES R, INS_P_SUMMERY S
       WHERE (   (    R.MODE_TP = '1'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
              OR (    R.MODE_TP = '2'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
             )
         AND (R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) >= 0
         AND R.REC_STATUS = '1'
         AND NVL (R.CHEQUE_DEPOSIT, 'N') != 'R'
         AND R.PGID = S.PGID

         AND NOT EXISTS (
                SELECT 1
                  FROM ACC_COLL_SUMMERY C
                 WHERE C.PGID = R.PGID
                   AND C.RECEIVE_ID = R.RECEIVE_ID
                   AND C.COLL_FROM = 'R');


   CURSOR C_PARTIAL_COLL (V_DATE_FROM DATE, V_DATE_TO DATE)
   IS
      SELECT   PR.PGID, PRF.RECEIVE_ID, PR.COLL_AMOUNT PAR_COLL_AMOUNT,
               PR.DUE_DATE_FROM, PR.DUE_DATE_TO, PR.COLL_MEDIA,
               NVL (FUN_AGENT_OFFICE_CD (S.AGENT_ID, TRUNC (PR.RECEIVE_DATE)),
                    NVL (S.OFFICE_CD, '07001')
                   ) OFFICE_CODE,
               PR.MODE_TP, TRUNC (PR.RECEIVE_DATE) RECEIVE_DATE, PR.MEDIA_DT,
               DECODE (R.STATUS,
                       '1', NVL (TRUNC (R.ADJUSTMENT_DATE),
                                 TRUNC (PR.RECEIVE_DATE)
                                ),
                       TRUNC (R.ADJUSTMENT_DATE)
                      ) ADJUSTMENT_DT,
               PR.STATUS, NVL (PR.ACTIVE_OFFICE_CD, '07001') ACTIVE_OFFICE_CD,
               PR.COLL_TYPE,
               (NVL (PR.LATE_FEE, 0) - NVL (PR.LATEFEE_WAIVER, 0)
               ) PAR_ACTUAL_LATE_FEE,
               R.COLL_AMOUNT MAIN_COLL, R.INSTALLMENT_NO_FROM,
               R.INSTALLMENT_NO_TO, ROUND (R.TOT_PREMIUM_AMT) TOT_PREMIUM_AMT,
               S.PAY_MODE_CD, S.LAST_PAID_DATE, S.AGENT_ID, S.DO_GID,
               S.DM_GID, R.STATUS FINAL_STAUS, TRUNC (PR.I_DT) I_DT,
               CASE
                  WHEN R.RECEIVE_DATE <
                                     TO_DATE ('16-mar-2016')
                     THEN DECODE (R.MODE_TP,
                                  1, R.RECEIVE_DATE,
                                  R.COLL_SLIP_REC_DT
                                 )
                  ELSE R.RECEIVE_DATE
               END ACTUAL_COLL_DATE,
               S.COMM_DATE, S.INS_TP_CD, S.INSTALLMENT_PREMIUM,
                 (  NVL (S.LIFE_PREMIUM, 0)
                  + NVL (S.SUPPL_BEN_PREMIUM, 0)
                  + NVL (S.SUPPL_PRODUCT_PREMIUM, 0)
                 )
               * ((R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) + 1)
                                                              BUSINESS_AMOUNT,
               S.PPS_CD
          FROM ACC_PARTIAL_RECEIVABLES PR,
               ACC_PARTIAL_RECEIVABLES_REF PRF,
               INS_P_SUMMERY S,
               ACC_RECEIVABLES R
         WHERE (   (    R.MODE_TP = '1'
                    AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                   )
                OR (    R.MODE_TP = '2'
                   AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                   )
               )
           AND PR.RECEIVE_ID = PRF.RECEIVE_ID
           AND PR.PGID = S.PGID
           AND PRF.RECEIVE_ID_REF = R.RECEIVE_ID
           AND PR.REC_STATUS = '1'
           AND (R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) >= 0
           AND NOT EXISTS (
                  SELECT 1
                    FROM ACC_COLL_SUMMERY C
                   WHERE C.PGID = R.PGID
                     AND C.RECEIVE_ID = PR.RECEIVE_ID
                     AND C.COLL_FROM = 'P')
      ORDER BY PR.PGID, PRF.RECEIVE_ID;

   CURSOR C_OTHERS_INVALID (V_DATE_FROM DATE, V_DATE_TO DATE)
   IS
      SELECT R.RECEIVE_ID, R.PGID, R.COLL_AMOUNT
        FROM ACC_RECEIVABLES R, INS_P_SUMMERY S
       WHERE (   (    R.MODE_TP = '1'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
              OR (    R.MODE_TP = '2'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
             )
         AND (R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) >= 0
         AND R.REC_STATUS = '0'
         AND R.PGID = S.PGID
         AND EXISTS (
                SELECT 1
                  FROM ACC_COLL_SUMMERY C
                 WHERE C.PGID = R.PGID
                   AND C.RECEIVE_ID = R.RECEIVE_ID
                   AND C.COLL_FROM = 'R'
                   AND C.REC_STATUS = '1');

   CURSOR C_OTHERS_ADJUSTED (V_DATE_FROM DATE, V_DATE_TO DATE)
   IS
      SELECT R.RECEIVE_ID, R.PGID,
             DECODE (R.STATUS,
                     '1', NVL (TRUNC (ADJUSTMENT_DATE),
                               TRUNC (R.RECEIVE_DATE)),
                     TRUNC (ADJUSTMENT_DATE)
                    ) ADJUSTMENT_DT
        FROM ACC_RECEIVABLES R, INS_P_SUMMERY S
       WHERE (   (    R.MODE_TP = '1'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
              OR (    R.MODE_TP = '2'
                  AND NVL(R.RECEIVE_DATE,R.COLL_SLIP_REC_DT) BETWEEN V_DATE_FROM AND V_DATE_TO
                 )
             )
         AND (R.INSTALLMENT_NO_TO - R.INSTALLMENT_NO_FROM) >= 0
         AND R.REC_STATUS = '1'
         AND R.STATUS = '1'
         AND R.PGID = S.PGID
         AND EXISTS (
                SELECT 1
                  FROM ACC_COLL_SUMMERY C
                 WHERE C.PGID = R.PGID
                   AND C.RECEIVE_ID = R.RECEIVE_ID
                   AND C.COLL_FROM = 'R'
                   AND REC_STATUS = '1'
                   AND C.STATUS = '0');

   CURSOR C_OFF_WISE_SUS_LEDGER (V_COLL_DATE DATE)
   IS
      SELECT   ACTIVE_OFFICE_CD, COLL_DATE, INS_TP_CD,
               SUM (COLL_AMOUNT) COLLECTION_AMT, SUM (ADJUST_AMT)
                                                                 ADJUSTED_AMT,
               SUM (INVALID_AMT) INVALID_AMT
          FROM (SELECT AR.ACTIVE_OFFICE_CD, AR.RECEIVE_DATE COLL_DATE,
                       AP.INS_TP_CD, AR.COLL_AMOUNT,
                       DECODE (AR.STATUS, '1', COLL_AMOUNT, 0) ADJUST_AMT,
                       0 INVALID_AMT
                  FROM ACC_ADVANCE_RECEIVABLES AR, INS_P_PROPOSAL AP
                 WHERE AR.RECEIVE_DATE = V_COLL_DATE
                   AND AR.PGID = AP.PGID
                   AND AR.REC_STATUS = '1'
                   AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT AR.ACTIVE_OFFICE_CD,
                       TRUNC (AR.ADJUSTMENT_DATE) COLL_DATE, AP.INS_TP_CD,
                       0 COLL_AMOUNT,
                       DECODE (AR.STATUS, '1', COLL_AMOUNT, 0) ADJUST_AMT,
                       0 INVALID_AMT
                  FROM ACC_ADVANCE_RECEIVABLES AR, INS_P_PROPOSAL AP
                 WHERE TRUNC (AR.ADJUSTMENT_DATE) = V_COLL_DATE
                   AND AR.RECEIVE_DATE < V_COLL_DATE
                   AND AR.PGID = AP.PGID
                   AND AR.REC_STATUS = '1'
                   AND AR.STATUS = '1'
                   AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT AR.ACTIVE_OFFICE_CD, TRUNC (AR.U_DT) COLL_DATE,
                       AP.INS_TP_CD, 0 COLL_AMOUNT, 0 ADJUST_AMT,
                       AR.COLL_AMOUNT INVALID_AMT
                  FROM ACC_ADVANCE_RECEIVABLES AR, INS_P_PROPOSAL AP
                 WHERE TRUNC (AR.U_DT) = V_COLL_DATE
                   AND AR.RECEIVE_DATE < V_COLL_DATE
                   AND AR.PGID = AP.PGID
                   AND AR.REC_STATUS = '0'
                   AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT AR.ACTIVE_OFFICE_CD, AR.RECEIVE_DATE COLL_DATE,
                       AP.INS_TP_CD, AR.COLL_AMOUNT,
                       CASE
                          WHEN AR.COLL_AMOUNT >=
                                                AR.TOT_PREMIUM_AMT
                             THEN AR.COLL_AMOUNT
                          WHEN AR.STATUS = '1'
                             THEN AR.COLL_AMOUNT
                          ELSE 0
                       END ADJUST_AMT,
                       0 INVALID_AMT
                  FROM ACC_RECEIVABLES AR, INS_P_SUMMERY AP
                 WHERE AR.RECEIVE_DATE = V_COLL_DATE
                   AND AR.PGID = AP.PGID
                   AND AR.REC_STATUS = '1'
                   AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT AR.ACTIVE_OFFICE_CD, TRUNC (AR.U_DT) COLL_DATE,
                       AP.INS_TP_CD, 0 COLL_AMOUNT, 0 ADJUST_AMT,
                       AR.COLL_AMOUNT INVALID_AMT
                  FROM ACC_RECEIVABLES AR, INS_P_SUMMERY AP
                 WHERE TRUNC (AR.U_DT) = V_COLL_DATE
                   AND AR.RECEIVE_DATE < V_COLL_DATE
                   AND AR.PGID = AP.PGID
                   AND AR.REC_STATUS = '0'
                   AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT DISTINCT AR.ACTIVE_OFFICE_CD,
                                AR.RECEIVE_DATE COLL_DATE, AP.INS_TP_CD,
                                AR.COLL_AMOUNT,
                                CASE
                                   WHEN AR.COLL_AMOUNT >=
                                               AR.TOT_REQUIRED_AMT
                                      THEN AR.COLL_AMOUNT
                                   WHEN R.STATUS = '1'
                                      THEN AR.COLL_AMOUNT
                                   ELSE 0
                                END ADJUST_AMT,
                                0 INVALID_AMT
                           FROM ACC_PARTIAL_RECEIVABLES AR,
                                ACC_PARTIAL_RECEIVABLES_REF PRF,
                                INS_P_SUMMERY AP,
                                ACC_RECEIVABLES R
                          WHERE AR.RECEIVE_ID = PRF.RECEIVE_ID
                            AND AR.PGID = AP.PGID
                            AND PRF.RECEIVE_ID_REF = R.RECEIVE_ID
                            AND AR.RECEIVE_DATE = V_COLL_DATE
                            AND AR.PGID = AP.PGID
                            AND AR.REC_STATUS = '1'
                            AND NVL (AR.COLL_AMOUNT, 0) > 0
                            AND AR.I_USR <> 'SLICL'
                UNION ALL
                SELECT DISTINCT AR.ACTIVE_OFFICE_CD, TRUNC (AR.U_DT)
                                                                    COLL_DATE,
                                AP.INS_TP_CD, 0 COLL_AMOUNT, 0 ADJUST_AMT,
                                AR.COLL_AMOUNT INVALID_AMT
                           FROM ACC_PARTIAL_RECEIVABLES AR,
                                ACC_PARTIAL_RECEIVABLES_REF PRF,
                                INS_P_SUMMERY AP,
                                ACC_RECEIVABLES R
                          WHERE AR.RECEIVE_ID = PRF.RECEIVE_ID
                            AND AR.PGID = AP.PGID
                            AND PRF.RECEIVE_ID_REF = R.RECEIVE_ID
                            AND TRUNC (AR.U_DT) = V_COLL_DATE
                            AND AR.RECEIVE_DATE < V_COLL_DATE
                            AND AR.PGID = AP.PGID
                            AND AR.REC_STATUS = '0'
                            AND AR.I_USR <> 'SLICL') A
      GROUP BY ACTIVE_OFFICE_CD, COLL_DATE, INS_TP_CD
      ORDER BY ACTIVE_OFFICE_CD, COLL_DATE, INS_TP_CD;

   CURSOR C_COM_WISE_BUS_SUMM
   IS
      SELECT S.RECEIVE_ID, S.COLL_FROM, S.INSTALLMENT_NO, DET.PGID,
             DET.COM_EXE_DATE, B.BILL_DATE, S.DUE_DATE, B.OFFICE_CD
        FROM ACC_COLL_SUMMERY S,
             COM_AGENT_COM_DETAIL DET,
             (SELECT M.BILL_NO, M.BILL_DATE, D.PGID, D.PREM_DUE_DT,
                     M.OFFICE_CD
                FROM COM_AGENT_COM_BILL_MST M, COM_AGENT_COM_BILL_DTL D
               WHERE M.BILL_NO = D.BILL_NO
                 AND D.EARNING_CD IN ('01', '02', '03')) B
       WHERE S.DUE_DATE = DET.PREM_DUE_DT
         AND S.PGID = DET.PGID
         AND (   (S.COM_BILL_DATE IS NULL AND B.BILL_DATE IS NOT NULL)
              OR (S.COM_EXE_DATE IS NULL AND DET.COM_EXE_DATE IS NOT NULL)
             )
         AND DET.EARNING_CD IN ('01', '02', '03')
         AND DET.PGID = B.PGID(+)
         AND DET.PREM_DUE_DT = B.PREM_DUE_DT(+);

   REC_C_OTHERS_COLL           C_OTHERS_COLL%ROWTYPE;
   REC_C_FPR_COLL              C_FPR_COLL%ROWTYPE;
   REC_C_PARTIAL_COLL          C_PARTIAL_COLL%ROWTYPE;
   REC_C_OTHERS_INVALID        C_OTHERS_INVALID%ROWTYPE;
   REC_C_OTHERS_ADJUSTED       C_OTHERS_ADJUSTED%ROWTYPE;
   REC_C_OFF_WISE_SUS_LEDGER   C_OFF_WISE_SUS_LEDGER%ROWTYPE;
   REC_C_COM_WISE_BUS_SUMM     C_COM_WISE_BUS_SUMM%ROWTYPE;
   V_LAST_PROCESS_DT           DATE;
   V_DATE_FROM                 DATE;
   V_DATE_TO                   DATE;
   V_EXTRA_AMOUNT              NUMBER (10, 2)                  := 0;
   V_BUSINESS_REC              NUMBER (10)                     := 0;
   V_ACTIVE_BRANCH_CD          HRM_OFFICE.OFFICE_CD%TYPE;
   V_ACTIVE_SALES_CD           HRM_OFFICE.OFFICE_CD%TYPE;
   V_ACTIVE_ZONAL_CD           HRM_OFFICE.OFFICE_CD%TYPE;
   V_ACTIVE_REGIONAL_CD        HRM_OFFICE.OFFICE_CD%TYPE;
   V_OFF_CATG                  VARCHAR2 (3);
   V_ACTUAL_COLL_AMOUNT        NUMBER (15, 2)                  := 0;
   V_DUE_WISE_COLL_AMOUNT      NUMBER (15, 2)                  := 0;
   V_AVL_SUS_AMT               NUMBER (15, 2)                  := 0;
   V_BUSINESS_DATE             DATE                            := NULL;
   V_COLL_OF_ORGANOGRAM        VARCHAR2 (50);
   V_USE_CODE_LEN              NUMBER;
   V_POL_OF_ORGANOGRAM         VARCHAR2 (50);
   V_POL_BRANCH_CD             VARCHAR2 (10);
   V_POL_SALES_CD              VARCHAR2 (10);
   V_POL_ZONAL_CD              VARCHAR2 (10);
   V_POL_REGIONAL_CD           VARCHAR2 (10);
   V_FA_BUS_ORGANOGRAM         VARCHAR2 (200);
   V_EMP_CODE_LEN              NUMBER (20);
   V_UM_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_BM_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_BC_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_DC_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_RC_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;

   V_AGM_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_DGM_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;
   V_GM_GID                    HRM_EMPLOYEE.EMP_GID%TYPE;

   V_CUR_MONTH_LAST_DAY        NUMBER (3);
   V_HEAD_OFFICE               VARCHAR2 (10);
   V_ACTIVE_OFFICE_CD          VARCHAR2 (10);
   V_PROJECT_CD                VARCHAR2 (2);
   V_FPR_RECORD                NUMBER (10)                     := 0;
   V_OTHER_RECORD              NUMBER (10)                     := 0;
   V_PARTIAL_RECORD            NUMBER (10)                     := 0;
   V_INVALID_RECORD            NUMBER (10)                     := 0;
   V_INVALID_AMOUNT            NUMBER (10)                     := 0;
   V_SL_NO                     NUMBER (10);
   V_PROCESS_DT                DATE;
   V_COLL_DATE                 DATE;
   V_CLOSING_SUS_AMT           NUMBER                          := 0;
   V_PRE_CLOSING_SUS_AMT       NUMBER                          := 0;
   V_YEAR_MONTH                VARCHAR2 (6);
   V_TOT_BUSINESS_AMOUNT       NUMBER (15, 2)                  := 0;
BEGIN
   SELECT SYSDATE
     INTO V_PROCESS_DT
     FROM DUAL;

   SELECT USE_CODE_LEN
     INTO V_USE_CODE_LEN
     FROM GEN_CODE_NO_CONVENTION
    WHERE CODE_ID = 1;

   SELECT USE_CODE_LEN
     INTO V_EMP_CODE_LEN
     FROM GEN_CODE_NO_CONVENTION
    WHERE CODE_ID = 6;

   SELECT MIN (FY_ST_DT), TRUNC (SYSDATE)
     INTO V_DATE_FROM, V_DATE_TO
     FROM ACC_FISCAL_YEAR
    WHERE NVL (FY_CLOSE, '0') = '0';

   V_DATE_FROM := TO_DATE ('01/01/2015', 'dd/mm/rrrr');


   BEGIN
      SELECT OFFICE_CD
        INTO V_HEAD_OFFICE
        FROM HRM_OFFICE
       WHERE OFF_CATG_CD = '01';
   EXCEPTION
      WHEN OTHERS
      THEN
         V_HEAD_OFFICE := '07001';
   END;

   OPEN C_OTHERS_COLL (V_DATE_FROM, V_DATE_TO);

   LOOP
      FETCH C_OTHERS_COLL
       INTO REC_C_OTHERS_COLL;

      EXIT WHEN C_OTHERS_COLL%NOTFOUND;



      BEGIN

         PRO_CONTROL_OFFICE
                          (V_OFFICE_CD               => REC_C_OTHERS_COLL.ACTIVE_OFFICE_CD,
                           V_DATE                    => REC_C_OTHERS_COLL.ACTUAL_COLL_DATE,
                           P_ACTIVE_BRANCH_CD        => V_ACTIVE_BRANCH_CD,
                           P_ACTIVE_SALES_CD         => V_ACTIVE_SALES_CD,
                           P_ACTIVE_ZONAL_CD         => V_ACTIVE_ZONAL_CD,
                           P_ACTIVE_REGIONAL_CD      => V_ACTIVE_REGIONAL_CD
                          );

         PRO_CONTROL_OFFICE (V_OFFICE_CD               => REC_C_OTHERS_COLL.OFFICE_CODE,
                             V_DATE                    => REC_C_OTHERS_COLL.ACTUAL_COLL_DATE,
                             P_ACTIVE_BRANCH_CD        => V_POL_BRANCH_CD,
                             P_ACTIVE_SALES_CD         => V_POL_SALES_CD,
                             P_ACTIVE_ZONAL_CD         => V_POL_ZONAL_CD,
                             P_ACTIVE_REGIONAL_CD      => V_POL_REGIONAL_CD
                            );
         V_FA_BUS_ORGANOGRAM := FUN_FA_ORGANOGRAM (REC_C_OTHERS_COLL.AGENT_ID);

         BEGIN
            V_UM_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 1 + 2
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_UM_GID := 0;
         END;

         BEGIN
            V_BM_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 2 + 3
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_BM_GID := 0;
         END;

         BEGIN
            V_BC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 3 + 4
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_BC_GID := 0;
         END;

         BEGIN
            V_DC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 4 + 5
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_DC_GID := 0;
         END;

         --Add by Musha on 05.04.2022
         SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '14')
           INTO V_AGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '15')
           INTO V_DGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_OTHERS_COLL.AGENT_ID, '16')
           INTO V_GM_GID
           FROM DUAL;

         IF V_UM_GID IS NULL
         THEN
            V_UM_GID := 0;
         END IF;

         IF V_BM_GID IS NULL
         THEN
            V_BM_GID := 0;
         END IF;

         IF V_BC_GID IS NULL
         THEN
            V_BC_GID := 0;
         END IF;

         IF V_DC_GID IS NULL
         THEN
            V_DC_GID := 0;
         END IF;

         BEGIN
            IF V_DC_GID IS NOT NULL
            THEN
               SELECT S.H_EMPLOYEE_GID
                 INTO V_RC_GID
                 FROM HRM_EMPLOYEE_SETUP S, HRM_EMPLOYEE E, HRM_EMP_TYPE T
                WHERE S.EMPLOYEE_GID = V_DC_GID
                  AND E.EMP_GID = S.EMPLOYEE_GID
                  AND T.EMP_TYPE_CD = '11'
                  AND S.STATUS = '1';
            ELSE
               V_RC_GID := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               V_RC_GID := 0;
         END;
      END;






      IF REC_C_OTHERS_COLL.COLL_AMOUNT + REC_C_OTHERS_COLL.AVL_SUS_AMT <=
                                             REC_C_OTHERS_COLL.BUSINESS_AMOUNT
      THEN
         V_TOT_BUSINESS_AMOUNT :=
                REC_C_OTHERS_COLL.COLL_AMOUNT + REC_C_OTHERS_COLL.AVL_SUS_AMT;
      ELSE
         V_TOT_BUSINESS_AMOUNT := REC_C_OTHERS_COLL.BUSINESS_AMOUNT;
      END IF;

      IF REC_C_OTHERS_COLL.ACTUAL_LATE_FEE <= 0
      THEN
         IF REC_C_OTHERS_COLL.COLL_AMOUNT + REC_C_OTHERS_COLL.AVL_SUS_AMT <=
                                            REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
         THEN
            V_TOT_PREMIUM_AMOUNT :=
                REC_C_OTHERS_COLL.COLL_AMOUNT + REC_C_OTHERS_COLL.AVL_SUS_AMT;
            V_TOT_SUSPENSE_AMT := 0;
         ELSE
            V_TOT_PREMIUM_AMOUNT := REC_C_OTHERS_COLL.TOT_PREMIUM_AMT;
            V_TOT_SUSPENSE_AMT :=
                 REC_C_OTHERS_COLL.COLL_AMOUNT
               + REC_C_OTHERS_COLL.AVL_SUS_AMT
               - REC_C_OTHERS_COLL.TOT_PREMIUM_AMT;
         END IF;

         V_TOT_LATE_FEE := 0;
      ELSE
         IF REC_C_OTHERS_COLL.COLL_AMOUNT > REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
         THEN
            V_TOT_PREMIUM_AMOUNT := REC_C_OTHERS_COLL.TOT_PREMIUM_AMT;
            V_EXTRA_AMOUNT :=
               (  REC_C_OTHERS_COLL.COLL_AMOUNT
                - REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
               );

            IF V_EXTRA_AMOUNT > REC_C_OTHERS_COLL.ACTUAL_LATE_FEE
            THEN
               V_TOT_SUSPENSE_AMT :=
                    (V_EXTRA_AMOUNT - REC_C_OTHERS_COLL.ACTUAL_LATE_FEE
                    )
                  + REC_C_OTHERS_COLL.AVL_SUS_AMT;
               V_TOT_LATE_FEE := REC_C_OTHERS_COLL.ACTUAL_LATE_FEE;
            ELSE
               V_TOT_SUSPENSE_AMT := REC_C_OTHERS_COLL.AVL_SUS_AMT;
               V_TOT_LATE_FEE := V_EXTRA_AMOUNT;
            END IF;
         ELSE
            IF REC_C_OTHERS_COLL.COLL_AMOUNT + REC_C_OTHERS_COLL.AVL_SUS_AMT >=
                                            REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
            THEN
               V_TOT_PREMIUM_AMOUNT := REC_C_OTHERS_COLL.COLL_AMOUNT;
               V_TOT_SUSPENSE_AMT :=
                    (  REC_C_OTHERS_COLL.COLL_AMOUNT
                     + REC_C_OTHERS_COLL.AVL_SUS_AMT
                    )
                  - REC_C_OTHERS_COLL.TOT_PREMIUM_AMT;
               V_TOT_LATE_FEE := 0;
            ELSE
               V_TOT_PREMIUM_AMOUNT :=
                    REC_C_OTHERS_COLL.COLL_AMOUNT
                  + REC_C_OTHERS_COLL.AVL_SUS_AMT;
               V_TOT_SUSPENSE_AMT := 0;
               V_TOT_LATE_FEE := 0;
            END IF;
         END IF;
      END IF;

      IF REC_C_OTHERS_COLL.COLL_AMOUNT > REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
      THEN
         IF (REC_C_OTHERS_COLL.COLL_AMOUNT - REC_C_OTHERS_COLL.TOT_PREMIUM_AMT
            ) >= REC_C_OTHERS_COLL.ACTUAL_LATE_FEE
         THEN
            V_ACTUAL_COLL_AMOUNT :=
               (  REC_C_OTHERS_COLL.COLL_AMOUNT
                - V_TOT_LATE_FEE
                - CASE
                     WHEN V_TOT_SUSPENSE_AMT > REC_C_OTHERS_COLL.AVL_SUS_AMT
                        THEN V_TOT_SUSPENSE_AMT
                             - REC_C_OTHERS_COLL.AVL_SUS_AMT
                     ELSE 0
                  END
               );
         ELSE
            V_ACTUAL_COLL_AMOUNT := REC_C_OTHERS_COLL.TOT_PREMIUM_AMT;
         END IF;
      ELSE
         V_ACTUAL_COLL_AMOUNT := REC_C_OTHERS_COLL.COLL_AMOUNT;
      END IF;

      V_NO_OF_INST :=
           (  REC_C_OTHERS_COLL.INSTALLMENT_NO_TO
            - REC_C_OTHERS_COLL.INSTALLMENT_NO_FROM
           )
         + 1;
      V_LATE_FEE_AMOUNT := ROUND ((V_TOT_LATE_FEE / V_NO_OF_INST), 2);
      V_SUSPENSE_AMT := ROUND ((V_TOT_SUSPENSE_AMT / V_NO_OF_INST), 2);
      V_AVL_SUS_AMT :=
                    ROUND ((REC_C_OTHERS_COLL.AVL_SUS_AMT / V_NO_OF_INST), 2);

      FOR I IN
         REC_C_OTHERS_COLL.INSTALLMENT_NO_FROM .. REC_C_OTHERS_COLL.INSTALLMENT_NO_TO
      LOOP
         IF REC_C_OTHERS_COLL.PAY_MODE_CD = '01'
         THEN
            IF V_DUE_DATE IS NULL
            THEN
               V_DUE_DATE := REC_C_OTHERS_COLL.DUE_DT_FROM;
            ELSE
               SELECT TO_NUMBER
                         (TO_CHAR
                             (LAST_DAY
                                 (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  12
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                 ),
                              'DD'
                             )
                         )
                 INTO V_CUR_MONTH_LAST_DAY
                 FROM DUAL;

               IF V_CUR_MONTH_LAST_DAY >=
                       TO_NUMBER (TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE, 'DD'))
               THEN
                  SELECT TO_DATE (   TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE,
                                              'DD'
                                             )
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 12),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               ELSE
                  SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 12),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               END IF;
            END IF;

            IF I = 1
            THEN
               V_AMOUNT_TYPE := 'F';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I = 2
            THEN
               V_AMOUNT_TYPE := 'S';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSE
               V_AMOUNT_TYPE := 'R';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            END IF;
         ELSIF REC_C_OTHERS_COLL.PAY_MODE_CD = '02'
         THEN
            IF V_DUE_DATE IS NULL
            THEN
               V_DUE_DATE := REC_C_OTHERS_COLL.DUE_DT_FROM;
            ELSE
               SELECT TO_NUMBER
                         (TO_CHAR
                             (LAST_DAY
                                 (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  6
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                 ),
                              'DD'
                             )
                         )
                 INTO V_CUR_MONTH_LAST_DAY
                 FROM DUAL;

               IF V_CUR_MONTH_LAST_DAY >=
                       TO_NUMBER (TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE, 'DD'))
               THEN
                  SELECT TO_DATE (   TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE,
                                              'DD'
                                             )
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 6),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               ELSE
                  SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 6),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               END IF;
            END IF;

            IF I = 1
            THEN
               V_AMOUNT_TYPE := 'F';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I = 2
            THEN
               V_AMOUNT_TYPE := 'D';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I IN (3, 4)
            THEN
               V_AMOUNT_TYPE := 'S';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSE
               V_AMOUNT_TYPE := 'R';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            END IF;
         ELSIF REC_C_OTHERS_COLL.PAY_MODE_CD = '03'
         THEN
            IF V_DUE_DATE IS NULL
            THEN
               V_DUE_DATE := REC_C_OTHERS_COLL.DUE_DT_FROM;
            ELSE
               SELECT TO_NUMBER
                         (TO_CHAR
                             (LAST_DAY
                                 (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  3
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                 ),
                              'DD'
                             )
                         )
                 INTO V_CUR_MONTH_LAST_DAY
                 FROM DUAL;

               IF V_CUR_MONTH_LAST_DAY >=
                       TO_NUMBER (TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE, 'DD'))
               THEN
                  SELECT TO_DATE (   TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE,
                                              'DD'
                                             )
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 3),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               ELSE
                  SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 3),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               END IF;
            END IF;

            IF I = 1
            THEN
               V_AMOUNT_TYPE := 'F';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I >= 2 AND I <= 4
            THEN
               V_AMOUNT_TYPE := 'D';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I >= 5 AND I <= 8
            THEN
               V_AMOUNT_TYPE := 'S';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSE
               V_AMOUNT_TYPE := 'R';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            END IF;
         ELSIF REC_C_OTHERS_COLL.PAY_MODE_CD = '04'
         THEN
            IF V_DUE_DATE IS NULL
            THEN
               V_DUE_DATE := REC_C_OTHERS_COLL.DUE_DT_FROM;
            ELSE
               SELECT TO_NUMBER
                         (TO_CHAR
                             (LAST_DAY
                                 (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  1
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                 ),
                              'DD'
                             )
                         )
                 INTO V_CUR_MONTH_LAST_DAY
                 FROM DUAL;

               IF V_CUR_MONTH_LAST_DAY >=
                       TO_NUMBER (TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE, 'DD'))
               THEN
                  SELECT TO_DATE (   TO_CHAR (REC_C_OTHERS_COLL.COMM_DATE,
                                              'DD'
                                             )
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 1),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               ELSE
                  SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                  || '-'
                                  || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 1),
                                              'MON-RRRR'
                                             )
                                 )
                    INTO V_DUE_DATE
                    FROM DUAL;
               END IF;
            END IF;

            IF I = 1
            THEN
               V_AMOUNT_TYPE := 'F';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I >= 2 AND I <= 12
            THEN
               V_AMOUNT_TYPE := 'D';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSIF I >= 13 AND I <= 24
            THEN
               V_AMOUNT_TYPE := 'S';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            ELSE
               V_AMOUNT_TYPE := 'R';
               V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
               V_DUE_WISE_COLL_AMOUNT :=
                            ROUND ((V_ACTUAL_COLL_AMOUNT / V_NO_OF_INST), 2);
               V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
            END IF;
         END IF;


         V_BUSINESS_YR := NULL;
         V_BUSINESS_DATE := NULL;
         V_BUSINESS_DATE := REC_C_OTHERS_COLL.ACTUAL_COLL_DATE;
         V_BUSINESS_YR :=
              TO_NUMBER (TO_CHAR (REC_C_OTHERS_COLL.ACTUAL_COLL_DATE, 'RRRR'));




         IF V_DUE_DATE <= REC_C_OTHERS_COLL.LAST_PAID_DATE
         THEN
            V_STATUS := '1';
         ELSE
            V_STATUS := '0';
         END IF;

         SELECT COUNT (1)
           INTO V_BUSINESS_REC
           FROM ACC_COLL_SUMMERY
          WHERE RECEIVE_ID = REC_C_OTHERS_COLL.RECEIVE_ID
            AND PGID = REC_C_OTHERS_COLL.PGID
            AND COLL_FROM = 'R'
            AND INSTALLMENT_NO = I;

         IF V_BUSINESS_REC = 0
         THEN
            IF     V_ACTIVE_REGIONAL_CD IS NULL
               AND V_HEAD_OFFICE <> REC_C_OTHERS_COLL.ACTIVE_OFFICE_CD
            THEN
               V_ACTIVE_OFFICE_CD := V_HEAD_OFFICE;
            ELSE
               V_ACTIVE_OFFICE_CD := REC_C_OTHERS_COLL.ACTIVE_OFFICE_CD;
            END IF;

            IF REC_C_OTHERS_COLL.PPS_CD IS NOT NULL
            THEN
               BEGIN
                  SELECT DISTINCT S.PROJECT_CD
                             INTO V_PROJECT_CD
                             FROM INS_PROJECT_SETUP S
                            WHERE S.PPS_CD = REC_C_OTHERS_COLL.PPS_CD;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     V_PROJECT_CD := SUBSTR (REC_C_OTHERS_COLL.PPS_CD, 1, 2);
               END;
            ELSE
               V_PROJECT_CD := NULL;
            END IF;

            INSERT INTO ACC_COLL_SUMMERY
                        (RECEIVE_ID,
                         PGID, COLL_FROM, INSTALLMENT_NO, ACTIVE_OFFICE_CD,
                         ACTIVE_BRANCH_CD, ACTIVE_SALES_CD,
                         ACTIVE_ZONAL_CD, ACTIVE_REGIONAL_CD,
                         OFFICE_CODE,
                         RECEIVE_DT, AMOUNT_TYPE,
                         STATUS, COLLECTION_TYPE,
                         RECEIVE_MODE, PROCESS_DATE,
                         FIRST_PREM,
                         DEFFERED,
                         SECOND_YR,
                         RENEWAL,
                         F_COLL_AMOUNT,
                         D_COLL_AMOUNT,
                         S_COLL_AMOUNT,
                         R_COLL_AMOUNT,
                         DUE_DATE,
                         BUSINESS_YR,
                         BUSINESS_DATE,
                         AGENT_ID, UM_GID, BM_GID,
                         BC_GID, DC_GID, RC_GID, BRANCH_OFF,
                         SALES_OFF, ZONAL_OFF, REGIONAL_OFF,
                         SERVICING_OFF, LATE_FEE,
                         SUSPENSE_AMT, AVL_SUS_AMT,
                         INS_TP_CD, PROJECT_CD,
                         COLL_FROM_DEPT, POLICY_FILE_TP,
                         AGM_GID, DGM_GID, GM_GID
                        )
                 VALUES (REC_C_OTHERS_COLL.RECEIVE_ID,
                         REC_C_OTHERS_COLL.PGID, 'R', I, V_ACTIVE_OFFICE_CD,
                         V_ACTIVE_BRANCH_CD, V_ACTIVE_SALES_CD,
                         V_ACTIVE_ZONAL_CD, V_ACTIVE_REGIONAL_CD,
                         REC_C_OTHERS_COLL.OFFICE_CODE,
                         REC_C_OTHERS_COLL.ACTUAL_COLL_DATE, V_AMOUNT_TYPE,
                         V_STATUS, REC_C_OTHERS_COLL.COLLECTION_TYPE,
                         REC_C_OTHERS_COLL.RECEIVE_MODE, TRUNC (SYSDATE),
                         DECODE (V_AMOUNT_TYPE, 'F', V_BUSINESS_AMOUNT, 0),
                         DECODE (V_AMOUNT_TYPE, 'D', V_BUSINESS_AMOUNT, 0),
                         DECODE (V_AMOUNT_TYPE, 'S', V_BUSINESS_AMOUNT, 0),
                         DECODE (V_AMOUNT_TYPE, 'R', V_BUSINESS_AMOUNT, 0),
                         DECODE (V_AMOUNT_TYPE,
                                 'F', V_DUE_WISE_COLL_AMOUNT,
                                 0
                                ),
                         DECODE (V_AMOUNT_TYPE,
                                 'D', V_DUE_WISE_COLL_AMOUNT,
                                 0
                                ),
                         DECODE (V_AMOUNT_TYPE,
                                 'S', V_DUE_WISE_COLL_AMOUNT,
                                 0
                                ),
                         DECODE (V_AMOUNT_TYPE,
                                 'R', V_DUE_WISE_COLL_AMOUNT,
                                 0
                                ),
                         V_DUE_DATE,
                         DECODE (V_STATUS, 1, V_BUSINESS_YR, NULL),
                         DECODE (V_STATUS, 1, V_BUSINESS_DATE, NULL),
                         REC_C_OTHERS_COLL.AGENT_ID, V_UM_GID, V_BM_GID,
                         V_BC_GID, V_DC_GID, V_RC_GID, V_POL_BRANCH_CD,
                         V_POL_SALES_CD, V_POL_ZONAL_CD, V_POL_REGIONAL_CD,
                         V_POL_REGIONAL_CD, V_LATE_FEE_AMOUNT,
                         V_SUSPENSE_AMT, V_AVL_SUS_AMT,
                         REC_C_OTHERS_COLL.INS_TP_CD, V_PROJECT_CD,
                         REC_C_OTHERS_COLL.COLL_FROM, '0',
                         V_AGM_GID, V_DGM_GID, V_GM_GID
                        );

            COMMIT;
            V_OTHER_RECORD := V_OTHER_RECORD + 1;
         END IF;

      END LOOP;

      V_DUE_DATE := NULL;

      IF V_REC_COUNTER = 200
      THEN
         COMMIT;
         V_REC_COUNTER := 0;
      ELSE
         V_REC_COUNTER := V_REC_COUNTER + 1;
      END IF;

      V_TOT_CNT := V_TOT_CNT + 1;
   END LOOP;

   CLOSE C_OTHERS_COLL;

   COMMIT;



   OPEN C_FPR_COLL (V_DATE_FROM, V_DATE_TO);

   LOOP
      FETCH C_FPR_COLL
       INTO REC_C_FPR_COLL;

      EXIT WHEN C_FPR_COLL%NOTFOUND;


      BEGIN
         PRO_CONTROL_OFFICE (V_OFFICE_CD               => REC_C_FPR_COLL.ACTIVE_OFFICE_CD,
                             V_DATE                    => REC_C_FPR_COLL.ACTUAL_COLL_DATE,
                             P_ACTIVE_BRANCH_CD        => V_ACTIVE_BRANCH_CD,
                             P_ACTIVE_SALES_CD         => V_ACTIVE_SALES_CD,
                             P_ACTIVE_ZONAL_CD         => V_ACTIVE_ZONAL_CD,
                             P_ACTIVE_REGIONAL_CD      => V_ACTIVE_REGIONAL_CD
                            );
         PRO_CONTROL_OFFICE (V_OFFICE_CD               => REC_C_FPR_COLL.OFFICE_CODE,
                             V_DATE                    => REC_C_FPR_COLL.ACTUAL_COLL_DATE,
                             P_ACTIVE_BRANCH_CD        => V_POL_BRANCH_CD,
                             P_ACTIVE_SALES_CD         => V_POL_SALES_CD,
                             P_ACTIVE_ZONAL_CD         => V_POL_ZONAL_CD,
                             P_ACTIVE_REGIONAL_CD      => V_POL_REGIONAL_CD
                            );
         V_FA_BUS_ORGANOGRAM := FUN_FA_ORGANOGRAM (REC_C_FPR_COLL.AGENT_ID);

         BEGIN
            V_UM_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 1 + 2
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_UM_GID := 0;
         END;

         BEGIN
            V_BM_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 2 + 3
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_BM_GID := 0;
         END;

         BEGIN
            V_BC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 3 + 4
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_BC_GID := 0;
         END;

         BEGIN
            V_DC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 4 + 5
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_DC_GID := 0;
         END;

         --Add by Musha on 05.04.2022
         SELECT fun_fa_emp_type_emp_gid (REC_C_FPR_COLL.AGENT_ID, '14')
           INTO V_AGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_FPR_COLL.AGENT_ID, '15')
           INTO V_DGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_FPR_COLL.AGENT_ID, '16')
           INTO V_GM_GID
           FROM DUAL;

         IF V_UM_GID IS NULL
         THEN
            V_UM_GID := 0;
         END IF;

         IF V_BM_GID IS NULL
         THEN
            V_BM_GID := 0;
         END IF;

         IF V_BC_GID IS NULL
         THEN
            V_BC_GID := 0;
         END IF;

         IF V_DC_GID IS NULL
         THEN
            V_DC_GID := 0;
         END IF;

         BEGIN
            IF V_DC_GID IS NOT NULL
            THEN
               SELECT S.H_EMPLOYEE_GID
                 INTO V_RC_GID
                 FROM HRM_EMPLOYEE_SETUP S, HRM_EMPLOYEE E, HRM_EMP_TYPE T
                WHERE S.EMPLOYEE_GID = V_DC_GID
                  AND E.EMP_GID = S.EMPLOYEE_GID
                  AND T.EMP_TYPE_CD = '11'
                  AND S.STATUS = '1';
            ELSE
               V_RC_GID := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               V_RC_GID := 0;
         END;
      END;

      IF REC_C_FPR_COLL.COLL_AMOUNT >= REC_C_FPR_COLL.BUSINESS_AMOUNT
      THEN
         V_BUSINESS_AMOUNT := REC_C_FPR_COLL.BUSINESS_AMOUNT;
      ELSE
         V_BUSINESS_AMOUNT := REC_C_FPR_COLL.COLL_AMOUNT;
      END IF;

      IF REC_C_FPR_COLL.COLL_AMOUNT > REC_C_FPR_COLL.INSTALLMENT_PREMIUM
      THEN
         V_COLL_AMOUNT := REC_C_FPR_COLL.INSTALLMENT_PREMIUM;

         IF REC_C_FPR_COLL.DATE_BACK_LATE_FEE > 0
         THEN
            IF (REC_C_FPR_COLL.COLL_AMOUNT
                - REC_C_FPR_COLL.INSTALLMENT_PREMIUM
               ) >= REC_C_FPR_COLL.DATE_BACK_LATE_FEE
            THEN
               V_LATE_FEE_AMOUNT := REC_C_FPR_COLL.DATE_BACK_LATE_FEE;
            ELSE
               V_LATE_FEE_AMOUNT :=
                  (  REC_C_FPR_COLL.COLL_AMOUNT
                   - REC_C_FPR_COLL.INSTALLMENT_PREMIUM
                  );
            END IF;

            V_SUSPENSE_AMT :=
                 REC_C_FPR_COLL.COLL_AMOUNT
               - REC_C_FPR_COLL.INSTALLMENT_PREMIUM
               - V_LATE_FEE_AMOUNT;
         ELSE
            V_LATE_FEE_AMOUNT := 0;
            V_SUSPENSE_AMT :=
               REC_C_FPR_COLL.COLL_AMOUNT
               - REC_C_FPR_COLL.INSTALLMENT_PREMIUM;
         END IF;
      ELSE
         V_COLL_AMOUNT := REC_C_FPR_COLL.COLL_AMOUNT;
         V_LATE_FEE_AMOUNT := 0;
         V_SUSPENSE_AMT := 0;
      END IF;

      V_AMOUNT_TYPE := 'F';
      V_DUE_DATE := REC_C_FPR_COLL.COMM_DATE;

      V_BUSINESS_YR := NULL;
      V_BUSINESS_DATE := NULL;
      V_BUSINESS_DATE := REC_C_FPR_COLL.ACTUAL_COLL_DATE;
      V_BUSINESS_YR :=
                 TO_NUMBER (TO_CHAR (REC_C_FPR_COLL.ACTUAL_COLL_DATE, 'RRRR'));

      SELECT COUNT (1)
        INTO V_BUSINESS_REC
        FROM ACC_COLL_SUMMERY
       WHERE RECEIVE_ID = REC_C_FPR_COLL.RECEIVE_ID
         AND PGID = REC_C_FPR_COLL.PGID
         AND RECEIVE_MODE = REC_C_FPR_COLL.RECEIVE_MODE
         AND COLL_FROM = 'F'
         AND INSTALLMENT_NO = 1;

      IF V_BUSINESS_REC = 0
      THEN
         IF     V_ACTIVE_REGIONAL_CD IS NULL
            AND V_HEAD_OFFICE <> REC_C_FPR_COLL.ACTIVE_OFFICE_CD
         THEN
            V_ACTIVE_OFFICE_CD := V_HEAD_OFFICE;
         ELSE
            V_ACTIVE_OFFICE_CD := REC_C_FPR_COLL.ACTIVE_OFFICE_CD;
         END IF;

         IF REC_C_FPR_COLL.PPS_CD IS NOT NULL
         THEN
            BEGIN
               SELECT DISTINCT S.PROJECT_CD
                          INTO V_PROJECT_CD
                          FROM INS_PROJECT_SETUP S
                         WHERE S.PPS_CD = REC_C_FPR_COLL.PPS_CD;
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_PROJECT_CD := SUBSTR (REC_C_FPR_COLL.PPS_CD, 1, 2);
            END;
         ELSE
            V_PROJECT_CD := NULL;
         END IF;

         INSERT INTO ACC_COLL_SUMMERY
                     (RECEIVE_ID, PGID, COLL_FROM, INSTALLMENT_NO,
                      ACTIVE_OFFICE_CD, ACTIVE_BRANCH_CD,
                      ACTIVE_SALES_CD, ACTIVE_ZONAL_CD,
                      ACTIVE_REGIONAL_CD, OFFICE_CODE,
                      RECEIVE_DT, AMOUNT_TYPE, STATUS,
                      COLLECTION_TYPE,
                      RECEIVE_MODE, PROCESS_DATE,
                      FIRST_PREM, DEFFERED, SECOND_YR, RENEWAL,
                      F_COLL_AMOUNT, D_COLL_AMOUNT, S_COLL_AMOUNT,
                      R_COLL_AMOUNT, DUE_DATE, BUSINESS_YR, BUSINESS_DATE,
                      AGENT_ID, UM_GID, BM_GID, BC_GID,
                      DC_GID, RC_GID, BRANCH_OFF, SALES_OFF,
                      ZONAL_OFF, REGIONAL_OFF, SERVICING_OFF,
                      LATE_FEE, SUSPENSE_AMT, AVL_SUS_AMT,
                      INS_TP_CD, PROJECT_CD,
                      POLICY_FILE_TP,
                      AGM_GID, DGM_GID, GM_GID
                     )
              VALUES (REC_C_FPR_COLL.RECEIVE_ID, REC_C_FPR_COLL.PGID, 'F', 1,
                      V_ACTIVE_OFFICE_CD, V_ACTIVE_BRANCH_CD,
                      V_ACTIVE_SALES_CD, V_ACTIVE_ZONAL_CD,
                      V_ACTIVE_REGIONAL_CD, REC_C_FPR_COLL.OFFICE_CODE,
                      REC_C_FPR_COLL.ACTUAL_COLL_DATE, 'F', '1',
                      REC_C_FPR_COLL.COLLECTION_TYPE,
                      REC_C_FPR_COLL.RECEIVE_MODE, TRUNC (SYSDATE),
                      V_BUSINESS_AMOUNT, 0, 0, 0,
                      V_COLL_AMOUNT

         ,            0, 0,
                      0, V_DUE_DATE, V_BUSINESS_YR, V_BUSINESS_DATE,
                      REC_C_FPR_COLL.AGENT_ID, V_UM_GID, V_BM_GID, V_BC_GID,
                      V_DC_GID, V_RC_GID, V_POL_BRANCH_CD, V_POL_SALES_CD,
                      V_POL_ZONAL_CD, V_POL_REGIONAL_CD, V_POL_REGIONAL_CD,
                      V_LATE_FEE_AMOUNT, V_SUSPENSE_AMT, 0,
                      REC_C_FPR_COLL.INS_TP_CD, V_PROJECT_CD,
                      REC_C_FPR_COLL.POLICY_FILE_TP,
                      V_AGM_GID, V_DGM_GID, V_GM_GID
                     );

         V_FPR_RECORD := V_FPR_RECORD + 1;
      END IF;

      IF V_REC_COUNTER = 200
      THEN
         COMMIT;
         V_REC_COUNTER := 0;
      ELSE
         V_REC_COUNTER := V_REC_COUNTER + 1;
      END IF;

      V_TOT_CNT := V_TOT_CNT + 1;
   END LOOP;

   CLOSE C_FPR_COLL;

   COMMIT;


   V_REC_COUNTER := 0;

   OPEN C_PARTIAL_COLL (V_DATE_FROM, V_DATE_TO);

   LOOP
      FETCH C_PARTIAL_COLL
       INTO REC_C_PARTIAL_COLL;

      EXIT WHEN C_PARTIAL_COLL%NOTFOUND;


      BEGIN
         PRO_CONTROL_OFFICE
                         (V_OFFICE_CD               => REC_C_PARTIAL_COLL.ACTIVE_OFFICE_CD,
                          V_DATE                    => REC_C_PARTIAL_COLL.ACTUAL_COLL_DATE,
                          P_ACTIVE_BRANCH_CD        => V_ACTIVE_BRANCH_CD,
                          P_ACTIVE_SALES_CD         => V_ACTIVE_SALES_CD,
                          P_ACTIVE_ZONAL_CD         => V_ACTIVE_ZONAL_CD,
                          P_ACTIVE_REGIONAL_CD      => V_ACTIVE_REGIONAL_CD
                         );
         PRO_CONTROL_OFFICE (V_OFFICE_CD               => REC_C_PARTIAL_COLL.OFFICE_CODE,
                             V_DATE                    => REC_C_PARTIAL_COLL.ACTUAL_COLL_DATE,
                             P_ACTIVE_BRANCH_CD        => V_POL_BRANCH_CD,
                             P_ACTIVE_SALES_CD         => V_POL_SALES_CD,
                             P_ACTIVE_ZONAL_CD         => V_POL_ZONAL_CD,
                             P_ACTIVE_REGIONAL_CD      => V_POL_REGIONAL_CD
                            );
         V_FA_BUS_ORGANOGRAM :=
                               FUN_FA_ORGANOGRAM (REC_C_PARTIAL_COLL.AGENT_ID);

         BEGIN
            V_UM_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 1 + 2
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_UM_GID := 0;
         END;

         BEGIN
            V_BM_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 2 + 3
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_BM_GID := 0;
         END;

         BEGIN
            V_BC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 3 + 4
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_BC_GID := 0;
         END;

         BEGIN
            V_DC_GID :=
               F_EMP_GID (SUBSTR (V_FA_BUS_ORGANOGRAM,
                                  (V_EMP_CODE_LEN * 4 + 5
                                  ),
                                  V_EMP_CODE_LEN
                                 )
                         );
         EXCEPTION
            WHEN OTHERS
            THEN
               V_DC_GID := 0;
         END;

         --Add by Musha on 05.04.2022
         SELECT fun_fa_emp_type_emp_gid (REC_C_PARTIAL_COLL.AGENT_ID, '14')
           INTO V_AGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_PARTIAL_COLL.AGENT_ID, '15')
           INTO V_DGM_GID
           FROM DUAL;

         SELECT fun_fa_emp_type_emp_gid (REC_C_PARTIAL_COLL.AGENT_ID, '16')
           INTO V_GM_GID
           FROM DUAL;

         IF V_UM_GID IS NULL
         THEN
            V_UM_GID := 0;
         END IF;

         IF V_BM_GID IS NULL
         THEN
            V_BM_GID := 0;
         END IF;

         IF V_BC_GID IS NULL
         THEN
            V_BC_GID := 0;
         END IF;

         IF V_DC_GID IS NULL
         THEN
            V_DC_GID := 0;
         END IF;

         BEGIN
            IF V_DC_GID IS NOT NULL
            THEN
               SELECT S.H_EMPLOYEE_GID
                 INTO V_RC_GID
                 FROM HRM_EMPLOYEE_SETUP S, HRM_EMPLOYEE E, HRM_EMP_TYPE T
                WHERE S.EMPLOYEE_GID = V_DC_GID
                  AND E.EMP_GID = S.EMPLOYEE_GID
                  AND T.EMP_TYPE_CD = '11'
                  AND S.STATUS = '1';
            ELSE
               V_RC_GID := 0;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               V_RC_GID := 0;
         END;
      END;

      IF V_RECEIVE_ID <> REC_C_PARTIAL_COLL.RECEIVE_ID
      THEN
         IF REC_C_PARTIAL_COLL.MAIN_COLL + REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT >
                                            REC_C_OTHERS_COLL.BUSINESS_AMOUNT
         THEN
            IF REC_C_PARTIAL_COLL.MAIN_COLL >=
                                            REC_C_OTHERS_COLL.BUSINESS_AMOUNT
            THEN
               V_TOT_BUSINESS_AMOUNT := 0;
            ELSE
               IF REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT >
                       REC_C_OTHERS_COLL.BUSINESS_AMOUNT
                     - REC_C_PARTIAL_COLL.MAIN_COLL
               THEN
                  V_TOT_BUSINESS_AMOUNT :=
                       REC_C_OTHERS_COLL.BUSINESS_AMOUNT
                     - REC_C_PARTIAL_COLL.MAIN_COLL;
               END IF;
            END IF;
         ELSE
            V_TOT_BUSINESS_AMOUNT := REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT;
         END IF;

         IF REC_C_PARTIAL_COLL.MAIN_COLL + REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT >
                                            REC_C_PARTIAL_COLL.TOT_PREMIUM_AMT
         THEN
            IF REC_C_PARTIAL_COLL.MAIN_COLL >=
                                           REC_C_PARTIAL_COLL.TOT_PREMIUM_AMT
            THEN
               IF REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE <= 0
               THEN
                  V_TOT_SUSPENSE_AMT := REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT;
                  V_TOT_LATE_FEE := 0;
               ELSE
                  IF REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT >
                                       REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE
                  THEN
                     V_TOT_SUSPENSE_AMT :=
                          REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT
                        - REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE;
                     V_TOT_LATE_FEE := REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE;
                  ELSE
                     V_TOT_SUSPENSE_AMT := 0;
                     V_TOT_LATE_FEE := REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT;
                  END IF;
               END IF;

               V_TOT_PREMIUM_AMOUNT := 0;
            ELSE
               IF REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT >
                       REC_C_PARTIAL_COLL.TOT_PREMIUM_AMT
                     - REC_C_PARTIAL_COLL.MAIN_COLL
               THEN
                  V_TOT_PREMIUM_AMOUNT :=
                       REC_C_PARTIAL_COLL.TOT_PREMIUM_AMT
                     - REC_C_PARTIAL_COLL.MAIN_COLL;

                  IF REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE <= 0
                  THEN
                     V_TOT_SUSPENSE_AMT :=
                          REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT
                        - V_TOT_PREMIUM_AMOUNT;
                     V_TOT_LATE_FEE := 0;
                  ELSE
                     IF   REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT
                        - V_TOT_PREMIUM_AMOUNT >
                                        REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE
                     THEN
                        V_TOT_SUSPENSE_AMT :=
                             (  REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT
                              - V_TOT_PREMIUM_AMOUNT
                             )
                           - REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE;
                        V_TOT_LATE_FEE :=
                                        REC_C_PARTIAL_COLL.PAR_ACTUAL_LATE_FEE;
                     ELSE
                        V_TOT_SUSPENSE_AMT := 0;
                        V_TOT_LATE_FEE :=
                             REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT
                           - V_TOT_PREMIUM_AMOUNT;
                     END IF;
                  END IF;
               END IF;
            END IF;
         ELSE
            V_TOT_PREMIUM_AMOUNT := REC_C_PARTIAL_COLL.PAR_COLL_AMOUNT;
            V_TOT_SUSPENSE_AMT := 0;
            V_TOT_LATE_FEE := 0;
         END IF;

         V_NO_OF_INST :=
              (  REC_C_PARTIAL_COLL.INSTALLMENT_NO_TO
               - REC_C_PARTIAL_COLL.INSTALLMENT_NO_FROM
              )
            + 1;
         V_LATE_FEE_AMOUNT := ROUND ((V_TOT_LATE_FEE / V_NO_OF_INST), 2);
         V_SUSPENSE_AMT := ROUND ((V_TOT_SUSPENSE_AMT / V_NO_OF_INST), 2);

         FOR I IN
            REC_C_PARTIAL_COLL.INSTALLMENT_NO_FROM .. REC_C_PARTIAL_COLL.INSTALLMENT_NO_TO
         LOOP
            IF REC_C_PARTIAL_COLL.PAY_MODE_CD = '01'
            THEN
               IF V_DUE_DATE IS NULL
               THEN
                  V_DUE_DATE := REC_C_PARTIAL_COLL.DUE_DATE_FROM;
               ELSE
                  SELECT TO_NUMBER
                            (TO_CHAR
                                (LAST_DAY
                                    (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  12
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                    ),
                                 'DD'
                                )
                            )
                    INTO V_CUR_MONTH_LAST_DAY
                    FROM DUAL;

                  IF V_CUR_MONTH_LAST_DAY >=
                        TO_NUMBER (TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                            'DD')
                                  )
                  THEN
                     SELECT TO_DATE (   TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                                 'DD'
                                                )
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 12),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  ELSE
                     SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 12),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  END IF;
               END IF;

               IF I = 1
               THEN
                  V_AMOUNT_TYPE := 'F';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I = 2
               THEN
                  V_AMOUNT_TYPE := 'S';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSE
                  V_AMOUNT_TYPE := 'R';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               END IF;
            ELSIF REC_C_PARTIAL_COLL.PAY_MODE_CD = '02'
            THEN
               IF V_DUE_DATE IS NULL
               THEN
                  V_DUE_DATE := REC_C_PARTIAL_COLL.DUE_DATE_FROM;
               ELSE
                  SELECT TO_NUMBER
                            (TO_CHAR
                                (LAST_DAY
                                    (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  6
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                    ),
                                 'DD'
                                )
                            )
                    INTO V_CUR_MONTH_LAST_DAY
                    FROM DUAL;

                  IF V_CUR_MONTH_LAST_DAY >=
                        TO_NUMBER (TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                            'DD')
                                  )
                  THEN
                     SELECT TO_DATE (   TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                                 'DD'
                                                )
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 6),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  ELSE
                     SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 6),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  END IF;
               END IF;

               IF I = 1
               THEN
                  V_AMOUNT_TYPE := 'F';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I = 2
               THEN
                  V_AMOUNT_TYPE := 'D';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I IN (3, 4)
               THEN
                  V_AMOUNT_TYPE := 'S';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSE
                  V_AMOUNT_TYPE := 'R';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               END IF;
            ELSIF REC_C_PARTIAL_COLL.PAY_MODE_CD = '03'
            THEN
               IF V_DUE_DATE IS NULL
               THEN
                  V_DUE_DATE := REC_C_PARTIAL_COLL.DUE_DATE_FROM;
               ELSE
                  SELECT TO_NUMBER
                            (TO_CHAR
                                (LAST_DAY
                                    (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  3
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                    ),
                                 'DD'
                                )
                            )
                    INTO V_CUR_MONTH_LAST_DAY
                    FROM DUAL;

                  IF V_CUR_MONTH_LAST_DAY >=
                        TO_NUMBER (TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                            'DD')
                                  )
                  THEN
                     SELECT TO_DATE (   TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                                 'DD'
                                                )
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 3),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  ELSE
                     SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 3),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  END IF;
               END IF;

               IF I = 1
               THEN
                  V_AMOUNT_TYPE := 'F';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I >= 2 AND I <= 4
               THEN
                  V_AMOUNT_TYPE := 'D';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I >= 5 AND I <= 8
               THEN
                  V_AMOUNT_TYPE := 'S';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSE
                  V_AMOUNT_TYPE := 'R';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               END IF;
            ELSIF REC_C_PARTIAL_COLL.PAY_MODE_CD = '04'
            THEN
               IF V_DUE_DATE IS NULL
               THEN
                  V_DUE_DATE := REC_C_PARTIAL_COLL.DUE_DATE_FROM;
               ELSE
                  SELECT TO_NUMBER
                            (TO_CHAR
                                (LAST_DAY
                                    (TO_DATE
                                         (   TO_CHAR (ADD_MONTHS (V_DUE_DATE,
                                                                  1
                                                                 ),
                                                      'RRRRMM'
                                                     )
                                          || '01',
                                          'RRRRMMDD'
                                         )
                                    ),
                                 'DD'
                                )
                            )
                    INTO V_CUR_MONTH_LAST_DAY
                    FROM DUAL;

                  IF V_CUR_MONTH_LAST_DAY >=
                        TO_NUMBER (TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                            'DD')
                                  )
                  THEN
                     SELECT TO_DATE (   TO_CHAR (REC_C_PARTIAL_COLL.COMM_DATE,
                                                 'DD'
                                                )
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 1),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  ELSE
                     SELECT TO_DATE (   V_CUR_MONTH_LAST_DAY
                                     || '-'
                                     || TO_CHAR (ADD_MONTHS (V_DUE_DATE, 1),
                                                 'MON-RRRR'
                                                )
                                    )
                       INTO V_DUE_DATE
                       FROM DUAL;
                  END IF;
               END IF;

               IF I = 1
               THEN
                  V_AMOUNT_TYPE := 'F';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I >= 2 AND I <= 12
               THEN
                  V_AMOUNT_TYPE := 'D';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSIF I >= 13 AND I <= 24
               THEN
                  V_AMOUNT_TYPE := 'S';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               ELSE
                  V_AMOUNT_TYPE := 'R';
                  V_COLL_AMOUNT :=
                            ROUND ((V_TOT_PREMIUM_AMOUNT / V_NO_OF_INST), 2);
                  V_BUSINESS_AMOUNT :=
                           ROUND ((V_TOT_BUSINESS_AMOUNT / V_NO_OF_INST), 2);
               END IF;
            END IF;


            V_BUSINESS_YR := NULL;
            V_BUSINESS_DATE := NULL;
            V_BUSINESS_DATE := REC_C_PARTIAL_COLL.ACTUAL_COLL_DATE;
            V_BUSINESS_YR :=
               TO_NUMBER (TO_CHAR (REC_C_PARTIAL_COLL.ACTUAL_COLL_DATE,
                                   'RRRR')
                         );

            IF V_DUE_DATE <= REC_C_PARTIAL_COLL.LAST_PAID_DATE
            THEN
               V_STATUS := '1';
            ELSE
               V_STATUS := '0';
            END IF;

            V_BUSINESS_REC := 0;

            SELECT COUNT (1)
              INTO V_BUSINESS_REC
              FROM ACC_COLL_SUMMERY
             WHERE PGID = REC_C_PARTIAL_COLL.PGID
               AND INSTALLMENT_NO = I
               AND RECEIVE_ID = REC_C_PARTIAL_COLL.RECEIVE_ID;

            IF V_BUSINESS_REC = 0
            THEN
               IF     V_ACTIVE_REGIONAL_CD IS NULL
                  AND V_HEAD_OFFICE <> REC_C_PARTIAL_COLL.ACTIVE_OFFICE_CD
               THEN
                  V_ACTIVE_OFFICE_CD := V_HEAD_OFFICE;
               ELSE
                  V_ACTIVE_OFFICE_CD := REC_C_PARTIAL_COLL.ACTIVE_OFFICE_CD;
               END IF;

               IF REC_C_PARTIAL_COLL.PPS_CD IS NOT NULL
               THEN
                  BEGIN
                     SELECT DISTINCT S.PROJECT_CD
                                INTO V_PROJECT_CD
                                FROM INS_PROJECT_SETUP S
                               WHERE S.PPS_CD = REC_C_PARTIAL_COLL.PPS_CD;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        V_PROJECT_CD :=
                                     SUBSTR (REC_C_PARTIAL_COLL.PPS_CD, 1, 2);
                  END;
               ELSE
                  V_PROJECT_CD := NULL;
               END IF;

               INSERT INTO ACC_COLL_SUMMERY
                           (RECEIVE_ID,
                            PGID, COLL_FROM, INSTALLMENT_NO,
                            ACTIVE_OFFICE_CD, ACTIVE_BRANCH_CD,
                            ACTIVE_SALES_CD, ACTIVE_ZONAL_CD,
                            ACTIVE_REGIONAL_CD,
                            OFFICE_CODE,
                            RECEIVE_DT,
                            AMOUNT_TYPE, STATUS,
                            COLLECTION_TYPE,
                            RECEIVE_MODE, PROCESS_DATE,
                            FIRST_PREM,
                            DEFFERED,
                            SECOND_YR,
                            RENEWAL,
                            F_COLL_AMOUNT,
                            D_COLL_AMOUNT,
                            S_COLL_AMOUNT,
                            R_COLL_AMOUNT,
                            DUE_DATE,
                            BUSINESS_YR,
                            BUSINESS_DATE,
                            AGENT_ID, UM_GID, BM_GID,
                            BC_GID, DC_GID, RC_GID, BRANCH_OFF,
                            SALES_OFF, ZONAL_OFF,
                            REGIONAL_OFF, SERVICING_OFF,
                            LATE_FEE, SUSPENSE_AMT, AVL_SUS_AMT,
                            INS_TP_CD, PROJECT_CD, POLICY_FILE_TP,
                            AGM_GID, DGM_GID, GM_GID
                           )
                    VALUES (REC_C_PARTIAL_COLL.RECEIVE_ID,
                            REC_C_PARTIAL_COLL.PGID, 'P', I,
                            V_ACTIVE_OFFICE_CD, V_ACTIVE_BRANCH_CD,
                            V_ACTIVE_SALES_CD, V_ACTIVE_ZONAL_CD,
                            V_ACTIVE_REGIONAL_CD,
                            REC_C_PARTIAL_COLL.OFFICE_CODE,
                            REC_C_PARTIAL_COLL.ACTUAL_COLL_DATE,
                            V_AMOUNT_TYPE, V_STATUS,
                            REC_C_PARTIAL_COLL.COLL_MEDIA,
                            REC_C_PARTIAL_COLL.COLL_TYPE, TRUNC (SYSDATE),
                            DECODE (V_AMOUNT_TYPE, 'F', V_BUSINESS_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'D', V_BUSINESS_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'S', V_BUSINESS_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'R', V_BUSINESS_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'F', V_COLL_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'D', V_COLL_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'S', V_COLL_AMOUNT, 0),
                            DECODE (V_AMOUNT_TYPE, 'R', V_COLL_AMOUNT, 0),
                            V_DUE_DATE,
                            DECODE (V_STATUS, 1, V_BUSINESS_YR, NULL),
                            DECODE (V_STATUS, 1, V_BUSINESS_DATE, NULL),
                            REC_C_PARTIAL_COLL.AGENT_ID, V_UM_GID, V_BM_GID,
                            V_BC_GID, V_DC_GID, V_RC_GID, V_POL_BRANCH_CD,
                            V_POL_SALES_CD, V_POL_ZONAL_CD,
                            V_POL_REGIONAL_CD, V_POL_REGIONAL_CD,
                            V_LATE_FEE_AMOUNT, V_SUSPENSE_AMT, 0,
                            REC_C_PARTIAL_COLL.INS_TP_CD, V_PROJECT_CD, '0',
                            V_AGM_GID, V_DGM_GID, V_GM_GID
                           );

               COMMIT;
               V_PARTIAL_RECORD := V_PARTIAL_RECORD + 1;
            END IF;
         END LOOP;

         V_DUE_DATE := NULL;

         IF V_REC_COUNTER = 200
         THEN
            COMMIT;
            V_REC_COUNTER := 0;
         ELSE
            V_REC_COUNTER := V_REC_COUNTER + 1;
         END IF;

         V_TOT_CNT := V_TOT_CNT + 1;
      ELSE
         NULL;
      END IF;

      V_RECEIVE_ID := REC_C_PARTIAL_COLL.RECEIVE_ID;
   END LOOP;

   CLOSE C_PARTIAL_COLL;

   OPEN C_OTHERS_INVALID (V_DATE_FROM, V_DATE_TO);

   LOOP
      FETCH C_OTHERS_INVALID
       INTO REC_C_OTHERS_INVALID;

      EXIT WHEN C_OTHERS_INVALID%NOTFOUND;

      UPDATE ACC_COLL_SUMMERY C
         SET REC_STATUS = '0',
             STATUS = '0',
             BUSINESS_YR = NULL,
             BUSINESS_DATE = NULL
       WHERE C.PGID = REC_C_OTHERS_INVALID.PGID
         AND C.RECEIVE_ID = REC_C_OTHERS_INVALID.RECEIVE_ID
         AND C.COLL_FROM = 'R'
         AND REC_STATUS = '1';

      COMMIT;
      V_INVALID_RECORD := V_INVALID_RECORD + 1;
      V_INVALID_AMOUNT := V_INVALID_AMOUNT + REC_C_OTHERS_INVALID.COLL_AMOUNT;
   END LOOP;

   CLOSE C_OTHERS_INVALID;

   OPEN C_OTHERS_ADJUSTED (V_DATE_FROM, V_DATE_TO);

   LOOP
      FETCH C_OTHERS_ADJUSTED
       INTO REC_C_OTHERS_ADJUSTED;

      EXIT WHEN C_OTHERS_ADJUSTED%NOTFOUND;

      UPDATE ACC_COLL_SUMMERY C
         SET STATUS = '1',
             BUSINESS_YR =
                         TO_CHAR (REC_C_OTHERS_ADJUSTED.ADJUSTMENT_DT, 'RRRR'),
             BUSINESS_DATE = REC_C_OTHERS_ADJUSTED.ADJUSTMENT_DT
       WHERE C.PGID = REC_C_OTHERS_ADJUSTED.PGID
         AND C.RECEIVE_ID = REC_C_OTHERS_ADJUSTED.RECEIVE_ID
         AND C.COLL_FROM = 'R'
         AND STATUS = '0';

      COMMIT;
   END LOOP;

   CLOSE C_OTHERS_ADJUSTED;

   SELECT NVL (MAX (COLL_DATE) + 1, TO_DATE ('01-NOV-2016'))
     INTO V_COLL_DATE
     FROM ACC_OFF_SUSP_LEDGER;

   IF V_COLL_DATE > TRUNC (SYSDATE)
   THEN
      V_COLL_DATE := NULL;
   END IF;

   IF V_COLL_DATE IS NOT NULL
   THEN
      SELECT ROUND (TRUNC (SYSDATE) - V_COLL_DATE) + 1
        INTO V_NO_TIMES
        FROM DUAL;

      FOR I IN 1 .. V_NO_TIMES
      LOOP
         SELECT NVL (MAX (COLL_DATE) + 1, TO_DATE ('01-NOV-2016'))
           INTO V_COLL_DATE
           FROM ACC_OFF_SUSP_LEDGER;

         IF V_COLL_DATE > TRUNC (SYSDATE)
         THEN
            V_COLL_DATE := NULL;
         END IF;



         OPEN C_OFF_WISE_SUS_LEDGER (V_COLL_DATE);

         LOOP
            FETCH C_OFF_WISE_SUS_LEDGER
             INTO REC_C_OFF_WISE_SUS_LEDGER;

            EXIT WHEN C_OFF_WISE_SUS_LEDGER%NOTFOUND;
            PRO_CONTROL_OFFICE
                  (V_OFFICE_CD               => REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD,
                   V_DATE                    => REC_C_OFF_WISE_SUS_LEDGER.COLL_DATE,
                   P_ACTIVE_BRANCH_CD        => V_ACTIVE_BRANCH_CD,
                   P_ACTIVE_SALES_CD         => V_ACTIVE_SALES_CD,
                   P_ACTIVE_ZONAL_CD         => V_ACTIVE_ZONAL_CD,
                   P_ACTIVE_REGIONAL_CD      => V_ACTIVE_REGIONAL_CD
                  );

            DECLARE
               V_MAX_COLL_DT   DATE;
            BEGIN
               BEGIN
                  SELECT MAX (COLL_DATE)
                    INTO V_MAX_COLL_DT
                    FROM ACC_OFF_SUSP_LEDGER
                   WHERE ACTIVE_OFFICE_CD =
                                    REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD
                     AND INS_TP_CD = REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD
                     AND COLL_DATE < REC_C_OFF_WISE_SUS_LEDGER.COLL_DATE;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     V_MAX_COLL_DT := REC_C_OFF_WISE_SUS_LEDGER.COLL_DATE - 1;
               END;

               SELECT NVL (CLOSING_SUS_AMT, 0)
                 INTO V_PRE_CLOSING_SUS_AMT
                 FROM ACC_OFF_SUSP_LEDGER
                WHERE ACTIVE_OFFICE_CD =
                                    REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD
                  AND INS_TP_CD = REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD
                  AND COLL_DATE = V_MAX_COLL_DT;
            EXCEPTION
               WHEN OTHERS
               THEN
                  BEGIN
                     SELECT   NVL (SUM (COLL_AMOUNT), 0)
                            - (  NVL (SUM (ADJUST_AMT), 0)
                               + NVL (SUM (INVALID_AMT), 0)
                              )
                       INTO V_PRE_CLOSING_SUS_AMT
                       FROM (SELECT AR.ACTIVE_OFFICE_CD,
                                    AR.RECEIVE_DATE COLL_DATE, AP.INS_TP_CD,
                                    AR.COLL_AMOUNT,
                                    DECODE (AR.STATUS,
                                            '1', COLL_AMOUNT,
                                            0
                                           ) ADJUST_AMT,
                                    0 INVALID_AMT
                               FROM ACC_ADVANCE_RECEIVABLES AR,
                                    INS_P_PROPOSAL AP
                              WHERE AR.RECEIVE_DATE >= TO_DATE ('01-jan-2015')
                                AND AR.RECEIVE_DATE < V_COLL_DATE
                                AND AR.PGID = AP.PGID
                                AND AR.REC_STATUS = '1'
                                AND AR.ACTIVE_OFFICE_CD =
                                       REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD
                                AND AP.INS_TP_CD =
                                           REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD
                                AND AR.I_USR <> 'SLICL'
                             UNION ALL
                             SELECT AR.ACTIVE_OFFICE_CD,
                                    AR.RECEIVE_DATE COLL_DATE, AP.INS_TP_CD,
                                    AR.COLL_AMOUNT,
                                    CASE
                                       WHEN AR.COLL_AMOUNT >=
                                                AR.TOT_PREMIUM_AMT
                                          THEN AR.COLL_AMOUNT
                                       WHEN STATUS = '1'
                                          THEN AR.COLL_AMOUNT
                                       ELSE 0
                                    END ADJUST_AMT,
                                    0 INVALID_AMT
                               FROM ACC_RECEIVABLES AR, INS_P_SUMMERY AP
                              WHERE AR.RECEIVE_DATE >= TO_DATE ('01-jan-2015')
                                AND AR.RECEIVE_DATE < V_COLL_DATE
                                AND AR.PGID = AP.PGID
                                AND AR.REC_STATUS = '1'
                                AND AR.ACTIVE_OFFICE_CD =
                                       REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD
                                AND AP.INS_TP_CD =
                                           REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD
                                AND AR.I_USR <> 'SLICL'
                             UNION ALL
                             SELECT DISTINCT AR.ACTIVE_OFFICE_CD,
                                             AR.RECEIVE_DATE COLL_DATE,
                                             AP.INS_TP_CD, AR.COLL_AMOUNT,
                                             CASE
                                                WHEN AR.COLL_AMOUNT >=
                                                       AR.TOT_REQUIRED_AMT
                                                   THEN AR.COLL_AMOUNT
                                                WHEN R.STATUS =
                                                               '1'
                                                   THEN AR.COLL_AMOUNT
                                                ELSE 0
                                             END ADJUST_AMT,
                                             0 INVALID_AMT
                                        FROM ACC_PARTIAL_RECEIVABLES AR,
                                             ACC_PARTIAL_RECEIVABLES_REF PRF,
                                             INS_P_SUMMERY AP,
                                             ACC_RECEIVABLES R
                                       WHERE AR.RECEIVE_ID = PRF.RECEIVE_ID
                                         AND AR.PGID = AP.PGID
                                         AND PRF.RECEIVE_ID_REF = R.RECEIVE_ID
                                         AND AR.RECEIVE_DATE >=
                                                       TO_DATE ('01-jan-2015')
                                         AND AR.RECEIVE_DATE < V_COLL_DATE
                                         AND AR.PGID = AP.PGID
                                         AND AR.REC_STATUS = '1'
                                         AND NVL (AR.COLL_AMOUNT, 0) > 0
                                         AND AR.ACTIVE_OFFICE_CD =
                                                REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD
                                         AND AP.INS_TP_CD =
                                                REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD
                                         AND AR.I_USR <> 'SLICL') A;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        V_PRE_CLOSING_SUS_AMT := 0;
                  END;
            END;

            V_CLOSING_SUS_AMT :=
                 (  V_PRE_CLOSING_SUS_AMT
                  + REC_C_OFF_WISE_SUS_LEDGER.COLLECTION_AMT
                 )
               - (  REC_C_OFF_WISE_SUS_LEDGER.ADJUSTED_AMT
                  + REC_C_OFF_WISE_SUS_LEDGER.INVALID_AMT
                 );

            IF V_CLOSING_SUS_AMT < 0
            THEN
               V_CLOSING_SUS_AMT := 0;
            END IF;

            INSERT INTO ACC_OFF_SUSP_LEDGER
                        (ACTIVE_OFFICE_CD,
                         ACTIVE_BRANCH_CD, ACTIVE_SALES_CD,
                         ACTIVE_ZONAL_CD, ACTIVE_REGIONAL_CD,
                         COLL_DATE,
                         INS_TP_CD,
                         OPENING_SUS_AMT,
                         COLLECTION_AMT,
                         ADJUSTED_AMT,
                         INVALID_AMT,
                         CLOSING_SUS_AMT
                        )
                 VALUES (REC_C_OFF_WISE_SUS_LEDGER.ACTIVE_OFFICE_CD,
                         V_ACTIVE_BRANCH_CD, V_ACTIVE_SALES_CD,
                         V_ACTIVE_ZONAL_CD, V_ACTIVE_REGIONAL_CD,
                         REC_C_OFF_WISE_SUS_LEDGER.COLL_DATE,
                         REC_C_OFF_WISE_SUS_LEDGER.INS_TP_CD,
                         V_PRE_CLOSING_SUS_AMT,
                         REC_C_OFF_WISE_SUS_LEDGER.COLLECTION_AMT,
                         REC_C_OFF_WISE_SUS_LEDGER.ADJUSTED_AMT,
                         REC_C_OFF_WISE_SUS_LEDGER.INVALID_AMT,
                         V_CLOSING_SUS_AMT
                        );

            COMMIT;
         END LOOP;

         DECLARE
            V_SUS_COUNT   NUMBER (10);
         BEGIN
            SELECT COUNT (1)
              INTO V_SUS_COUNT
              FROM ACC_OFF_SUSP_LEDGER
             WHERE COLL_DATE = V_COLL_DATE;

            IF V_SUS_COUNT = 0
            THEN
               INSERT INTO ACC_OFF_SUSP_LEDGER
                           (ACTIVE_OFFICE_CD, ACTIVE_BRANCH_CD,
                            ACTIVE_SALES_CD, ACTIVE_ZONAL_CD,
                            ACTIVE_REGIONAL_CD, COLL_DATE, INS_TP_CD,
                            OPENING_SUS_AMT, COLLECTION_AMT, ADJUSTED_AMT,
                            INVALID_AMT, CLOSING_SUS_AMT)
                  (SELECT ACTIVE_OFFICE_CD, ACTIVE_BRANCH_CD,
                          ACTIVE_SALES_CD, ACTIVE_ZONAL_CD,
                          ACTIVE_REGIONAL_CD, V_COLL_DATE, INS_TP_CD,
                          CLOSING_SUS_AMT, 0, 0, 0, CLOSING_SUS_AMT
                     FROM ACC_OFF_SUSP_LEDGER L
                    WHERE COLL_DATE = V_COLL_DATE - 1
                      AND NOT EXISTS (
                             SELECT 1
                               FROM ACC_OFF_SUSP_LEDGER
                              WHERE ACTIVE_OFFICE_CD = L.ACTIVE_OFFICE_CD
                                AND INS_TP_CD = L.INS_TP_CD
                                AND COLL_DATE = V_COLL_DATE));
            END IF;
         END;

         COMMIT;

         CLOSE C_OFF_WISE_SUS_LEDGER;
      END LOOP;
   END IF;



   OPEN C_COM_WISE_BUS_SUMM;

   LOOP
      FETCH C_COM_WISE_BUS_SUMM
       INTO REC_C_COM_WISE_BUS_SUMM;

      EXIT WHEN C_COM_WISE_BUS_SUMM%NOTFOUND;
      PRO_CONTROL_OFFICE (V_OFFICE_CD               => REC_C_COM_WISE_BUS_SUMM.OFFICE_CD,
                          V_DATE                    => REC_C_COM_WISE_BUS_SUMM.BILL_DATE,
                          P_ACTIVE_BRANCH_CD        => V_POL_BRANCH_CD,
                          P_ACTIVE_SALES_CD         => V_POL_SALES_CD,
                          P_ACTIVE_ZONAL_CD         => V_POL_ZONAL_CD,
                          P_ACTIVE_REGIONAL_CD      => V_POL_REGIONAL_CD
                         );

      UPDATE ACC_COLL_SUMMERY
         SET COM_BILL_DATE = REC_C_COM_WISE_BUS_SUMM.BILL_DATE,
             COM_EXE_DATE = REC_C_COM_WISE_BUS_SUMM.COM_EXE_DATE,
             BRANCH_OFF = V_POL_BRANCH_CD,
             SALES_OFF = V_POL_SALES_CD,
             ZONAL_OFF = V_POL_ZONAL_CD,
             SERVICING_OFF = V_POL_REGIONAL_CD,
             REGIONAL_OFF = V_POL_REGIONAL_CD
       WHERE PGID = REC_C_COM_WISE_BUS_SUMM.PGID
         AND RECEIVE_ID = REC_C_COM_WISE_BUS_SUMM.RECEIVE_ID
         AND COLL_FROM = REC_C_COM_WISE_BUS_SUMM.COLL_FROM
         AND INSTALLMENT_NO = REC_C_COM_WISE_BUS_SUMM.INSTALLMENT_NO
         AND DUE_DATE = REC_C_COM_WISE_BUS_SUMM.DUE_DATE;

      COMMIT;
   END LOOP;

   CLOSE C_COM_WISE_BUS_SUMM;

   SELECT NVL (MAX (SL_NO), 0) + 1
     INTO V_SL_NO
     FROM ACC_COLL_SUMMERY_PRO_LOG;

   INSERT INTO ACC_COLL_SUMMERY_PRO_LOG
               (PROCESS_DATE, PRO_EXE_STATUS, EXE_USER, FPR_RECORD,
                OTHER_RECORD, PARTIAL_RECORD, INVALID_RECORD,
                INVALID_AMOUNT, SL_NO, TOTAL_TIME_IN_MINUTES
               )
        VALUES (V_PROCESS_DT, '0', P_USER, V_FPR_RECORD,
                V_OTHER_RECORD, V_PARTIAL_RECORD, V_INVALID_RECORD,
                V_INVALID_AMOUNT, V_SL_NO, (SYSDATE - V_PROCESS_DT) * 24 * 60
               );

   COMMIT;
   P_ERROR := 'Success' || ' -v_tot_cnt ' || V_TOT_CNT;
EXCEPTION
   WHEN OTHERS
   THEN
      P_ERROR := SQLERRM || ' -v_tot_cnt ' || V_TOT_CNT;
      ROLLBACK;
END;
/


--
-- PRO_PREMIUM_COLL_SUMMERY_TEST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_premium_coll_summery_test wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
17f7c a0a3
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
VU/dehIRMrXxcwvwnWQk
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
slzx4OLZjlb34OLR2a/A51ziwFmcOATHlAUzh
JSY0bEBnh7hpqampqZUd4FRpqampqamCuGm
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
ebqmppe838HZaTw6M4sGJL
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
XYGnpqa
mps6f6Uz+FhDls/yLlvmVZPkq+6ampqVzp6ampqZTUeISiSI9ETIMpqamprxJpqam
miy9Z3MSJvhUkqemj9BkRSmGChwX4akIXMQ2plMGA9v2WM96czAUpjITHD77zthkAQymuJXD
Bg1ZIkG9pnyATP4wYrcgwfhOdgcg6ketIpoX0oaNxPl7myMMpqamps+YUeISiSI9ETJOH7X8
6rUq+6ampqVzp6ampqZTUeISiSI9ETIMpqamprxJpqammiy9Z3MSJvhUkqemj9BkRSmGChwX
4akIXMQ2plPgxQijGyyuJBy9Z1XogPKmpzGUuyqH2ZGtebs806kIXMQ2puo0sTBit9CwLNA2
Dki3AT8aNnBYTAi+1PZYVrDNVaPhfLz8p6aPGHIqh9ldhinG7/tNBZFYLD77VMnqz6cwYrdD
oO26DKbU6lXTpnEIkwYNWSJBP3rTqUUupzr306kBn5XDBg1Zp+szSGL7BA8yDKa4lcMGDVki
QT9606lFLqc699OpcpKjYTam2YoYJtv2WFawOygFmA02poYKSL2muDwr2aW1x2j5nRVSusmA
YszgGdAW7Q0SKTvph/gS/T8ipA2i9EIkUdIzqpygMzoinDtBF10NncTuhilNbPJH+PNjxJ+1
z0/ZK3KCm4OaBTAUDmEDG6bqz7xyAQrBiELNu3nOMHsn9NNOP6IpO1UMIGKbg5oFMBQOSLcB
Pxo2VgOMpxZ/u4CJGYPt0jxmZHPtsiSkDaL0QiRR0jy52Z9KaIOjxPP4zLFD7Rtwzz1i+1NR
0jxmZHPtsiyugGLM4BnQFu0N+MKQ78RhPHnbP3cyQmTQiaZWA4ynFn+7gIkZgxCXjNQX0bVi
oxwqi6Nz0u/7BA8yDKZLR7ykDaL0QiRR0jy5Y8RvQs27eRSmj6pw/Ytz4yW6mJYFrcD29lVg
ioBMnP7spqaac897J/TTTj+iKTtVsHonz4ubmlFDzAviKvvdzuW64aZxs5tNf7GrQs27ec4w
eyf0004/oik7VbB6J8+Lm5pRQ8wL4oH3pg5hAxum3ZRi0KvHO/ex+RlA0Bfhpo/9gGLM4BnQ
Fu0NEik76Yf4Ev29pqadrSf0004/oik7VZzNdr4NDUjvM4zi2RIupqbPqhSmTQWRWCw++92U
wfhoHp88hR6lCFmmpkqjUds0LMwj9v4lum00M/7f06aPeIBizOAZ0BbtDfjCkO/EYTx52z93
MkJkvaalE9WjHCqLo+9kc+3wgOFpBZO2pnGzm01/satCzbt5zjCSCFqmuJU6Iv5FkCqbe896
tqaPTWzyR/jzY8Sflu0NhfaqIO/7pj/Hd9Nsi3PjJbqYlgWtwPb2VWCKgEyc/pJapvzfk4uA
4Sfa9uG46Sk76Yf4Ev0iQUqjUds0LMwj9v4lum00M/7fHL3dlGLQq8c797H5GUDQsCzQNo8Y
ThC5Mtr2XTLOMJIIWmdVG9nkWr1TZmRz7fAEqrk9xuuWTpbQNnF/7fZZQsMsroBizOAZ0Bbt
DRIpHqteHIH3qTZxCDoinDtBF+RCzjCDGTsA07iVwfhxYSNBf0PMEHp5uzwcvVMGThDRugBy
dZtNIkFKo1HbNCzMI/b+cdTaxBbtDXWbTdA2cQg6Ipw7QRfkQs4wG6amjMYzhyQe7gV9zLyb
7gXMDIl1/u/yIM1B2TDBb2PEb14cgYuchldKD7yqqho2bg09ZYn5GUAgnaquptnfRdUimsHC
PU5fjKc2fCwQjQz0JbptTu3igc6C+/nO5YAydwmcCtRlQnsn9NNOP6IpO1XQo/zAPVToNsog
t3MNWUFKo1HbNCzMI/b+cw1ZvWcZG4BiMr4n2BDlQUqjUds0LMwj9v6Mp0VxKjwiPTbKILcl
um06fQqwD4sP06k0LqfNdr4NDUjvYbkp/oDy3WWYBk4Q0boAclcnCNLv+4YKSL3dZdbVwIjZ
XIZNZGMgvulYVrDNVaPhqTQu4s7lQhgicgwm+c2wjKcWf7uAiRmDAJwtcSqSepZjYFjTqQhc
xDam6l1lpwpgT8Fjdxa30LDVvCdBUXJOCfzv+03N2L2m4oUBVurwInIMJswbLK6AYszgGdAW
7Q0S0Qu+J9JCh/LwZQDTqUUupzr306kBn3fTbItz4yW6mLv4iAHCbmEifrs806kIXMQ2pk+B
DX69prg8K9l8YsFUYWVu/nN9qgoBoljTpqam2d9F1TOMtTun8wHypqamR4APYgWI+LO1K9nj
A0r+uVmmpqb5zuWAMhn+c19lQnsn9NNOP6IpO1X+c19lANOmd52cRdBjIL2mpcbqVdIIXNCC
+6bU6lXTpqbqioC1umLvl12GKc+qQYalzU1s8kf482PEn5r+gpf1TvjXD50k06Z3eSMUpg2Q
KvvdlPiztSvZ42U6MIMZOwDTqUUupzr306kB2h5/VgV9wD7MI/ZSvLENHKobpqalzU1j0erw
AUUxD9n1XiP2fywQ7ZNhx108PEXwtJJi+6amvl9D5bPBQj4ql/W32VTiq0+AGZfqiSmnpqap
cdTAPVfHCheJKRucLXEq+bPEaFFZxDampl1lpwrUzA8MmsBtZVXSQofy8CWwIwympt3MDEzi
q+tT+vaqIO/UTxLtrYAcu06npqapJboKAVYQbQjBhyC9pqZXJybZXAvNXu0x0If8QtSJgO1s
pqZwh0rH2z93gcnlTnHQe1VuDdJ5GCTQE4xIgdBoSL2mpnWM0jxmZHPt8BM+8iBim4OaBVOt
jNI8ZmRz7fC64aamShbtDYX2qiCGySOxdZtNeE+7xzH8QtRPxtfB+HFhI0F/Q8wgvaamhWRF
8FToE/6rZAFFOnGGDVl4T2yH2fUMpqbdwwYNWXiA9LFlVc8cQtUPs8E6i0c7QbPBOqempqmq
0mLEfU7Px3exJcRoUXJO15PQ9j7ZMxgicsQ2pqageidHDRluu8dkBZPvZIYbD2L//ohCpMQ2
pqZWBYgL0GVVioC1umLvl/UMpqbdGQUJ+V9C3irUQaam3f42pnG+7R4pBcwMiXX+7/IgzT93
CZwK1GVVdg2i9EIkUdI8ufj2WEg/WKq+OnOnpqap1cCI2VyMck4JJ4kpixhx1MA9znqbK7xR
WcQ2pqZx99lU4qsXSIFfZVVx99lU4qu1fbpIzOi64aam4oUBVurwjLynvENvAUWtJ/TTTj+i
KTtV+HqWY2ApXu1spqaPTWzyR/jzY8SfcgE0x20lum0+0CNO2eTZ15adtcAMpqbdzAyJdf7v
8iDNhyP2DV9jIH/5aB5i+6amgGLM4BnQFu0N+MwMTOKr9k/811cZugjN5E5um02aIL2mplMG
ThDRugByhfaqIIaLxtfQEyzENqamccwj9vex+Rlg4aampmfhuB2pLHgkSL2mps5Sx5XS4n9D
zCDizs9P2Stygvl6SOLOz0/ZK3KC6Hr8YvumpoBizOAZ0BbtDRI/PXnbZVVxCIeGDVl46s/i
CKPoE9UiDDSnKaempqnV6NNkAUW+BhYIo+gT1TMZBk6FujoYZVVxLf5vF0iBX2VV06amuJUZ
uuSMIL7pWEjitBJtjLynvENvAUW+4LtiSpKjkqe6iSmnpqap1aMcKouj72Rz7fAT1f/+vrHN
2PexUk6Gp6amqYynFn+7gIkZgxAx/wQSiSmLGHN9qgoBolhIvaamVyf0004/oik7Vf4Zp5sX
RwwKfzM2pqa8JAnhuJU0LFJ3JdD6xuuUTj/bzAwkG52Sc/epRS6nOvfTS0fiVyf0JZoFTQew
nfnO96kIXMQ2DtIyTNTv+1MGTWzyqiCMHCJBP3rTaQWTtqnVSqNR0v7f/O6GKRiMpxZz7fAj
zj270DZ3ecJH0Imp1WAszGHuhikYs4CJec49u9BGRS6ju/jvbIk8cuXbNCzMI/bQiWmSRdGG
98jIuJXMDIn5GWAAz3pzMBpGvLEu9AAsC/pi8iDXxNXoeidHgA8g4nWbTX+S/oDyE
e27vXUe
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
WRWCy9j0/w//jMsUPtYIf4
EviqIdxMf5K1d5vqXyL53kwmBZFYte1XtSRhKZIwG6bOF0INfsGFtcbGNAQA+6Y/x3fTbDPP
X2zEFu0N+MKQ78RhPHnbPLWYSJCmjyTJ650PoFLp2YzUcfZdDZ3E7oYpfbt5m80FlIzQEUJ3
dfZzT4rnvAbPTxJV/6tCpCJBSvkZG5q8TH+S404QuTLa9l0yzppxLYF9x1YFrbya5IH472ym
xyT52lyt+93MDIm0Tn+naFHSPLnZn0pog6PE87rQOn0K+FXMDIm0Tn+naFHSPLnZn0pog6PE
87rQs7aPmt6S3WXaJ/TTEiLU8bqJGYNzJGYSP7Vs+6Wumi+xtSpTW4YKSL2mqdXov/A+0PyG
KU1s8oo6BAxIzCP2/ilMC5eM1M/kgKwoJ9r24abOcrjPpc2qSbvLn27qJWp0ux7FQZAUZ6r+
rQC27xHwOU0bDIB2yFzhkxqzGc94JR8sMPfKfHoL2mfC+hA0ME8Z4DCLKvumpqZuwTSBBE6/
4aampqnHIH+Lh9OmpqamqYIjbe5Y6rV4NU/QNqampqampqaPwC6mpqampqbd3ky1nbYQuL4b
pqamprBSemympqapDOGmpqkM4aapJjOL4zgPC96BJFGuHPb4EtQo6AfvQBDwYz35X60gANTk
0HUs7elVnGTCe/5vaoJk//aI4OPqh/iJwQSD5KpZpW7UCPWhpqampnHTpqZzkyfhpqa6WNlQ
gW8LuZWI7ZWlRwpOo0AEBo2xIkOtQN9yIIS6pwTHlrE2pqampqaPIUqwNqampqamuKGmpqam
j8HGKbE++6ampqlPLO2VpUcKxxzGVKPNctc641KWf4uH4j+1U3G2pqampqap6yX8ZDJzlvgq
UxSmpqamUxSmpt3DEsfbU5wEx5a9pqalVAXgaE7PDKamiULVvaamfgHRhLG6X74fF3Z/ivZW
OzMXR0Ief4u7NqampqY/P24/kNOmpqamzjqzunRyNHvBUl9jPflobtAE/tMLuUP8/tDZKvum
pqampldiO/mjsTIAbKampqamqQzhpqamqQzhpqZZDXiAXxL0f/7xpqam0A1i1AByxDamZyaM
KVIMpqkJgOuGp9OmcCN1aHNBpqZzkyfhpo/jNKDtM6pNL+7ja9fHXWPNDfg0SaamplQFh4DB
TvPtgTA7AVgzbJslM4Pt2lFhEdB1/DyW6iycuuGmj7V/9zdlIOtqXbnv+6aSA3c2pt3zQt4S
zbOdD5XBVZ2w2Y/ja9fHXWPNDfg0SaamplQFh4DBTvPtgTA7AVgzbJslM4Pt2lFhEdB1/DyW
6iycuuGmj+NkEBMnMWGFDAX2/kKupqamVAWHgMFO8+2BzoPEJqd5bTSg7Z+7Sk1ig+/oRYHZ
PcZDp6amARny4aaP4zSg7TN9mmQGTrmgQUi9pqnvQN9y95xhsblOQaampnB5EqSQcoDSPIYN
pwGDnIUMBfb+ueODUQDg5bqdcRBxSL2mqe+8M3nlAQVmlnlkVcEA+6amcHkSpJBygNI8hvaa
6KNhYpslM4Pt2lFhEdB1/DyW6iycuuGmiXvsHMQ2pgEZ6AcNdH/b1WQQl8d0eUGahzrap9+n
BGC/sJoi3L2mkgN3NqZ1HEoE/tMLuZWgJvh6SaZnqqfspqZX4GgMX74fT7/2iODj6of4icEE
g3qd8BL0f/7T0A1ixDamFk4r06amuljZUIFvMg+8l+ympqaPaLp0cjQbpqamqU5uxBwL+dym
pqamuLli1GgM4aampqa4YCB/ek78bsZ/pyv4x8ci4GgMX76c9uGmpqampqamj0/Tpqampqam
pqnZKvumpqampqawMkyxAa1spqampqamuKGmpqampuTkV3Mz+CnspqampqZXOx5F0dlXQdOm
pqamqQzhpqamqdkq+6amplfwhj77pqamcdOmpqZx06amWQ14gHT4qwwKc4jHGSNfOtr7pt0L
eW1Sck5ibKam6AfvQBDwYz35X60gANTkzWT+NqamULp3EDrFCscgf3pO/DSnqEAwQw2uQkpr
104FUKds1GjZKvumpqam3d52rpw2pqam3Wz7plBPYxumpkuNvnRMIH+Lh26zunRyNHtkAeOo
h0LNXkELEU7k36AB9H/+wC6mpqampqbchjDypqampqamnDampqamPz9uP5DTpqamps46s7p0
cjR7wVJfYz35aG7QBP7TC7lD/E/RsTampqampo+goJL2TLGBiaampqamptG9pqamptG9pqZ8
PRl2f7ls1GgM4aamejxhBP56mtOmpgEZ8uGmprpY2VCBbwu5lYiAdPirDApziMcZI1862vum
pqapTyywD7A2pqampj8/0m9qgmT/QnYL3g0keMHv1O3bdRK+krDZKvumpqampldiO/mjsTIA
bKampqamqQzhpqamqQzhpqZZDXiAXxL0f/7xpqam0A1i1AByxDamZyaMKVIMpqkJgOuGp9Om
cCN1aHNBpqZzkyfhpo/jNKDtM32aZAZOudJXVdOmpoB0eUHvlnlkVcEA+6am3YMze3tP0H07
xvZi2aCW95xhsblV8w3pEtvDxD++klNo06amgM/NBcPZYemHg4eYchLhpqbdgzN7e0/QfTvG
sbwuDX66XWPNDRK/onmzHH89Ow/iItHENqYWTt8AWbki06YOJAwupqZ295xhsRxz+FzPGZDU
62L7prjbUIutmyUzgxAZtqampth5ZIxOOuMZIzQ8wln400LeEs0ZpMy6oIBZMh6cCtDZYvum
uNuxvC4NfrpdY80N+DRJpqam2HlkjE464xkjz80Fw9lh6YeDh5i/gHdvzfNeVZJD/IbADKap
ZSDrapHl/6pFkk5s+6aSA3c2pt3zQt4SzbOdD5XBVd7aVdOmpoB0eUHvlnlkVcEA+6am3YMz
e3tP0H07xvZi2aCW95xhsblV8w3pEtvDxD++klNo06amgM/NBcPZYemHg4eYchLhpqbdgzN7
e0/QfTvGsbwuDX66XWPNDRK/onmzHH89Ow/iItHENqYWTivTpqaAXWPNDYC1P5RPv7CB9Qym
pnZ/oEJKNKDtn0/+NqampvYFHn3PIlHEHGQNVuu8ooeDh5i/gHdvzfNeVZJD/IbADKamdggN
IF5iBW9C3hLNIru9pqam9gUefc8iUcQcD/jfPcJ595xhsblV8w3pEtvDxD++klNo06YOd7PS
U2ymFk7fANgB46iHQs1eQQsRTuQzl5otoC3bfEXaczOwXuGp+VYq+6boB+/U7dt1En95/CJy
vaZQT2MbpqZKBP7TC7mVwVWjQAQGjbEiQ61A33IghofgR+3bC3nZYvumlzSNNqbdK4tl9e3p
VZxkwhumpqZX/m9qgmS9pqamj3rBO8Z1nbampqambhJtf/7xpqampqZus7p0cjR7wVJfYz35
aG7QBP7TC7lD7Kampqampqamzl7hpqampqampri+G6ampqampo+g4h5FVrA2pqampqam0b2m
pqamqU8ssJo/JEy2pqampqawMkyxAYjGXuGmpqamuKGmpqamuL4bpqamprBSemympqapDOGm
pqkM4aapJjOL4zgPC94NJAv/utB/qkmmpjDYeX+5QrxjNqbd0rjbS2QtoINPf8E7xnWdc4FB
pqamI21Flg8BMrliQBeHkLFl2y9kNDM+cn+gQj/9g8LbdRK+G6ampqamV/CGKfGmpqamUxSm
ppIDdzampmFlnGseYtRobYIjbe5Y6sENdH/b1WQQl8d0eUGaQGFWf4uH4r2mpqampt3edq69
pqampqaP8aampqbdctDrZF7hpqampiQkI23uWOrBekotoINPE07zhofgR+1xcynALqampqam
ptwMCp08Mkyuvaampqamj/Gmpqamj/GmpqZezdfzhofgR+0UpqbdC3ltUnJOYvumaYs7FKam
S42+dEwgf4uHblLbS2QtoINPf8E7xnWdtqa
mpqbOOlKSMvKmpqamj8GAIH96Tvxuxn+nK/jH
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
sxzQCqreKnKzHND24aam
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
8yl/H
6amxO0kNEpFPHpjc+ybfhfwP5gNce+cbaAP/uz22vaJIQposSry7IHCpqampilCeQXj
Ol9x0SU/1xBM7wCSLdfZ4aamponsEiaH6z+kgtcLcW+mpqamj0PB2em5Hqsps9B5h2+mpqam
j8bhpqamphkam/h/yRrGNFampqbdKHna64PyGsZxpqamaDP5yMBKw/+gQ6sS1w2QKcc7hIOW
g98GiHLtJPhaCtJxpqamvJ38h2NzRbFxBZOMGpNzMzgzFt4rZJYkP/mblrXSZJ3kgcZyqs9C
uqamplq69zMeh8d5F/DxyYF4F1284swl2Jmmpqbe1SU/EBm6CKgAZHIS1Zmmpqbe1SU/VfZK
f+t6QCiWJA9vpqamJSsac+ybfhfwP5gNce8fLJmmpqamiiqASj+Ylb/9KtR/4DtDh/72lwOQ
KpLNPMDwcW+mpqYlKxrBDXnvi4LACC2mpqampnBkrcDSBWK8BU1/SvP2Yv5FDwXf4CLvnESm
pqmglN6dYVfUuSCdQoj22R7Z4aamV2E8eN5MH6am3U32116DZD5ynzx9xLrZKsC+WvgyZL5h
A2ChA5cQTIwak5aZpqamyEGxYfB1coVDZs2xaLEqJYwsBTRWpqamZ9yM0aampqa8nfwbzbFo
sSoljCwF0gXG4aampqamyDMeioJBEhCghvMpfx+mpqamdQ8ytzP2uR6rKbPQedGmpqamvJ38
yUch0O5q2XKcRKampqaL6lUac+z4RWAj0gsTmaampqlFSvzG4aampnc7WkP+C0da0EKTpqam
qSyDn+gNjVrQvqamplPNc6hDdhLXDZApxzuEg5aD3waIhjB6/Pmw0nGmpqa8nfyHY3NFsXEF
k4wak3MzODMW3itkliQ/+ZuWtdJkneSBxnKqz0K6pqamWrr3Mx6Hx3kX8PHJgXgXXbzizCXY
maampt7VJT8QGboIqABkchLVmaampt7VJT9V9kp/63pAKJYkD2+mpqYlKxpz7Jt+F/A/mA1x
7x8smaampqaKKoBKP5iVv/0q1H/gO0OH/vaXA5Aqks08wPBxb6ampiUrGsENee+LgsAILaam
pqamcGStwNIFYrwFTX9K8/Zi/kUPBd/gIu+cRKamqaCU3p1hV9S5IJ1CiPbZHtnhpqZXYTx4
3kwfpqbdTfbXXt4LYWKu3p3oegWTjJpIYrGFQ8KmpqampiU/VfbizdjMJdjAD7EW3jzZ4aam
pqZacvYFYEcXXcD3M/a5Hqsps9B5h2+mpqamZ9yM0aampqamz6o9LoNkvmT2GoAkYSnE0ESm
pqampmeDZANytB6qe4OHDBrGcaampqam3eTlE6APxw+xWtA/fsf7pqampo/4CkgzHnXeHGoH
nE+WmaampqamdQ8ytzP2uR6rKbPQedGmpqampncywyRvpqampmdVGMM/JNRf0nWcRKampqal
hAX/oGHTKX8fpqampkgSqlqtxoLNA2MqM+z22uvBowegD2+mpqamZ5etQd5PYjstsXEFWCKx
e+BkeHJzn5Ompqampnn9CF9SehwytV4jh2+mpqamZ5etM+z22uvBowcQ+6ampqVzXP7FzbHt
i4P/qzvOpWggse2Lg/+rO1ampqamWrr3Mx5OGRgoKUIQGbqTpqampshhBr6a4hLXDZAqo/Tt
Gc+0ZBLXDZAqo5OmpqamyGFmzbHti4P/q2zX/MTQRKampqampnwSiSEKsZwsJKo6nKqSsQ/5
kobBJLw0YqampqZauvczHofHeRfw8cmBeBddvOLMJdiZpqampiUrGnOSNMQGhCOHT/4rb6am
pqYaO1r4MmSt1FlOBCI05M+Tpqampshh4NrqZN6di7zi9xxztIuV0HidOi2mpqamynnpg2Q+
cp88fcS62SrACC2mpqampkuxdq2SzW+aeXcExuMNpxJVZD5ynzx9xLrZKsCTpqampshhZgBk
ef1/T/dt0ESmpqamphLX94yaSAhVYPBSX1T2vrFzg2HzToi+VqampqZauvcz9m0LivkzE5wt
YTS8NKG7maZ3JMAQ/zzERKalc1x4ED89EFamqTpcxESmqYJBEvA0M7NhEl8LoiNZnT/OCLym
Z1WX+OF3OzSWmbhgh/gRBQDUf2YA6A8kb6Y0QQho9l0N0GFVC3bvJQuSbe2LhbMgxM5IjNRX
YNgNaB4/1xBM9kE7IPccx/vdBeGPH2SKKoBKP5iVv/0q1H/gO0OH/vbFnSwLPNMpfx+mzm3t
i4WzIMTOSIzUV2DYDWgeP3kFWDwrZgCL4anE/gH7g9eIQs2Mef4ExuPSdfmLxuFHZEVipv+F
9ix5mMZXYBrG0h4HLLuZacRRVRmcRBEFTfh3YTFjboyaSH9KCF8NpxJVH6amh15BzdizIMSn
9l3Ak6amyJt+F/ByAHk61cC+WkJhA9Ra9qT32emXA5Aq+RnEoGDRnESmpj5ynzy0Hu2BYjv3
2em5Hqts1yOTpqZQYfNOiL5xb6am0hdVg5/QUl9a0EKTpqbI+EU8erqaZgCLAfumZ8WdLAs8
0yl/lpmmpoOf6A2NWtBC97Eig5/QUl9a0L6mpqVhpo9ZHswHse2LhbMgxM5IjNRXYNgNaB4/
LkJhA2CdVaPi99kB+6bdiD5ynzzOaOunnWacbYIJQc3YfyWjgF3AUmCXA5Aq+RnEoGDRnESm
phcaegWTC2T+PMSgYNEfEtf3jJpICFVg8FJfVPa+sXPs+EVgoQOHb6amiiqASj+Ylb/9KtR/
4DtDh/72BWBHF13Ak6amuNTHZPexIoOf0FJfWtBCk6amS7F2rZLNb5p5dwTG4w2nElVkvmT2
1wOBYiULh2+mpooqgEo/mJW//SrUf+A7Q4f+9sWdLAs80yl/lpmmpjPs74CdVQaY8KuGBC08
wGT4DXkXo7r00nUfF10N0GFVC3bvJQvRpqY07ZaZyPiGs4v4rEWU9rty/gE1JkIuEkypgtR/
Zv4LE7RKxhdV7fnkCDO8jwMZBWGmjOIqrr4sBdKSTnn7EQWK/wTG42jQedGmxO0kGm6Mmkh/
SghfDacSVR/d/upVCmixKvLsPQeCwA+xFt48/gH7g9eIhgT3+C0uLD9W3eTlBeEOeYy5XgXJ
nMBKP5iVV9SCPKO5Mg+mpt32lwOQKpLNPMDwcdEJQc3YCL6wYqrp0R8+cp88BN4778C+Vqam
Z5cDkCr5GcSgYNEfPnKfPLQe7YFiO/fZ6bkeq2zXI5Ompqlh8HVyhUNRJB48YRJfC6IjR21o
sQ2LMZJvKX+WmaamyJe7xnUNoiNHbWGQ3nlsJQuHXQ3QYVULdu8lC7xipqV7/KNOiZt+F/A/
mA1x75xtiRfa9s+53tkP99nplwOQKmCjHuNx0Zmmphp6BZOGuxAM9l3A95t+F/DtGbqaJau+
cV284swl2JxEpqaD3+Ai75xtNDOzYRJfC6IjR20sHyTRP3FdDdBhVQt27yUL0aapBRksCf+z
IMQExjDUo9ntuTxEps755RKN+EVgoQOSuGC5Hqts1/wfJB+mqaCUuk/8LHlH7jL7pqZfRTx6
c3GmpqZoM/nIwEo/mJVX1II8o7kyD6ampryd/IdjegWTjJpIYrGFlQeB7Jt+F/A/mA1x75xE
pqapoJR5/X9P920oHg1574uCwJOmpqZauvf4RWChA5K4YLkeq2zXkjMzvKYy1YPNEDVVl/jC
yv7GjNf+ATWH+E3A0gVivAVNf0rz9mL+RZ2WmUtWfXJF+vf477wFTQhCXwTGhgi8VlQSqtHd
O//kbIC50M5IjNTBf+B20MbhEQWKM+zvgLnQzkiM1MF/4HbQxvjCpoHQ3xCqPS5KaCwIVWDw
cgvbVxzQqrSSNIEL1buZpWgSXbzX7WSzIMSnCrGCks08wPBxpqYsnTH2Sna+JAaY8KtPxuNS
ehyxP5gNce+c2eGmpt2IbNeepqYsnTH2Sna+JAaY8KtPxuNSehyxcmHizCXYnES
mpqkXGnoF
k4bHrrr5GHGmIj/H1ANkCL6wYqrp0ZxEpqapFxp6BZMLGg1KhUTdxiD/MDMqYKMe43HRmaam
pnJaQmED1Jr4pzyFRN3GIP8wMyr5GcSgYNGcRKamqRcaegWTC2T+PMSgYNHdxiD/MDMqMyMg
EAz2XcKmpqYwEg9vjzCnIQqJx1284n9Kxoy5qtGmYJDAqtsXurEW3issM+zvgLnQzkiM1MF/
4HbQxoEDO/aJIR4B+6a+JFH5zIwakxC09kp2viQGmPCrT8bjUnocsWgszLVNzCXYnESmz7ne
2Q+zIHgs/zAzKiL+oENkhUPCpqn3PHtRmkgibgiK9l+gPPO+cW+mpf68YyqSzYtqiHK81Jr4
pzyFQ8Kmqcz+A0NhVYyaSCJuCIr2ioEZkqc8hUPCpqntGbqaJatzn07uXxcPC2T+PMSgYNGZ
j/gKuT1OGRgoEtf37/6Az8TMhk4Ef0rGhpI0xMKmWrotsXEFk4yULDPs74C50M5IjNTBf+B2
0MYyZL5hA2DVmamglL5k9mgz+aU4ZK3AXfnju98nzxzv1AgwcccPsVPNcy2mWrqzYX/rRSL8
3wseIooqgEpoLAhVYPByC9tXHND2BdRZHpJNBV87lqYlK4mMYKEDkkuxdq3Aqtu//Soi0POG
MHriQ03MJdi72eFd+TCgOrwOSJWD+E4Qk8ixIuV2viQGmPCrT8bjUnocu9mszLHssM1x7SIl
LIfGq7qqmM4Ii5Y/0Q55A9oL2C2BRGgz+cjASmixKtQIMHdzcjC5ADw/qg9voHl3ECcFign/
9/hF1Fcc0EW1iHLtxoO7maaPgb7+ccbj8cntMLkA/Cwq1FlOBB+B0KvGTfiVzb7Gh8ea2QH7
pn1OCrktsWj+wAhZ+H7e8O2LvJxtYZDeeWwz7PiH0ZmmZwX/oGHTKbPQeYdfKmE/f/hZ9kcz
TbNhMKDNdTJWpqnERI9ZHswHsYJBEnIyXxZOBkPG2ZWCSsz+bYJIcgAz7PiH0Zmm3YgQPz0A
M+z4h9H/MOgQYaDUh8ea2ZWIedrrg/KKKv7tcW+mqYKDn+gNjVrQP35OBl8t1DyWh8ZPjBqT
cwZfwRnHpO+Xz04s5IGqgSzkxiyZpo/NEJPI+Iazi/isF3cQu5gPJDRftU5PtTqqtXK1OpWq
OpaH5JuqlZ1zLLVvteRktYu1+uSxW6n+Q7XBmXO/h1Cqx2i1eIOGJDu1HCT5sJe1u3E6/tH4
WTqq+P7ytbxLtZy1/QXOF5Y=
/


--
-- PRO_PREMIUM_COLL_SUMM_FA_NEW  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_premium_coll_summ_fa_new wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
120c5 6882
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
a5yIKrRsiQMk5sjdVaB
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
WgEE3OxMHLF9BYNvBxCKkmFhlZUinxC66qampm
FTWi0eBYNveRhMmjxhdV6KkmFhlcNAU3UT
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
4um3CRpldC12M/h6quWmpt2
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
sXWjO7ty
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
YbM04CLyR0KJNqamU/5h7NBxZL2mqcLXp/gq+6aX37q5sYmmptlVBovq4aZfgDHTpqZkhfba
YfOGHpPPaG65sPbhpo+UXgoqm4NKec5TbKampn3NtMnBTtVg/QiKAUxKKpuDSnnO2dVhb80c
2WHQ2ROanPbhpolFlr9tE5q9pnwcAQympjRmZM20YF9kFwhSx4OusTam3dXoK/ZdDaQFpVIM
pqamUAUt1//B6l/fBjHZRXb2XQ2kBaWc6n5igwCneSyceJ2WsTamFjKWvaap6l0NpAXjCIFW
Ikjcc/UupqY04CcNYIcFLbIsxDampqbtpAWKzz+VEe9B7djZLWCHBS2yqkKVPFFVCzEzUkJO
+MAupqnC16f4KvtnJvjAsdmOXnrHLAzifw2jmk861TzfnHXJeLBPna69ptSMfr2mS2jt4CLy
R0KO2UjaJy6mqQgWuuGmj5ROzOD/jM5TKQEYPkG+0GyxdaM7u07M4P+M2+3EgeympmO5bPum
S5yj6DigtEqBrim9pqam/4yV0oUA+6ampm72GYBHOtX7pqam3UKgdU4WvaampqbdiIyV0oVV
rXLH2Hn90FU6lE7M4P+MNGympqampqampvl4+6ampqampqZTNGympqampqaPdxK7HiPypqam
pqamj/Gmpqamps75n5I6HtKnpqampqZXgRn4Rf9OPvumpqamUxSmpqamUzRspqamprBCImym
pqapDOGmpqkM4aapAf3X1eiMxoNhCOPs/vPH+fKmpri7eSosvode4aZwvhKV9dJUBd8czE4i
4P8P+bxspqaps+DaPCRj2tBv6++/wYfodQZY+FTA8CY9kiINMvCt0JunpqampqaPIXKwDOGm
pqaP8aamBNDCbKamS5yj6DigdU4W/wRi6IC5/+1Zf5WC/i1dq14KgRAnHqvHHENi+6ampqam
V9dOPvumpqampnHTpqamps75n5JS8qampqaP+AURfwDAv/9OdvYF1Au/P5XPiXVOFiD5/pun
pqampqambjxhc33t/l7hpqampqZTFKampqZTFKam3cLwi5ROzOD/jBSmpt3txD3PXSMupqaJ
RZw2pqYzCdkhX2/HHJWIZHVKHPYF1O8nGYBHOtX7pqamqbsgsCywNqampqa8nfBv6++/wXpy
LWF5ep/B6keA9K3Qm4uqliC9pqampqbd3nkF0BkSJGympqampqkM4aampqkM4aamVgURh38s
bIt68uGmpmgSuteA4rE2pmcxydlz7KamARNi/vbypqlDSFJO1fum1Ix+vaap6l0NpAXjCIFW
Ikjc/usq+6alGCY9q0J5xt/PaNOmpqbSn34DTjqUjPAwM8LRxqtCecbf5EOUum2f0AEFxkPX
u9kq+6byVZyYlde7NqYE0MJspqaH97Gffu/UsQPOU63XsPbhpo+UXgoqm4NKec5TbKampn3N
tMnBTtVg/QiKAUxKKpuDSnnO2dVhb80c2WHQ2ROanPbhpolFlr9tAcf5wROqTNOmcH
qXp6am
MOmHBS3wBA9yBoaLoE/ivaap6lk7PIX22mHuhqempqYOxAsTkHJkBHnbA5wyrTyF9tph7pZk
tKOgElYFItEgPw/ivaZp/IfTpqZkhfbaYfOGHpPPaG6SKeympjCVdyfwNGEL/SJIvaampiPa
YTE65BizYHoSk5wL8DRhC/35mxg76ZjGws2Gm4v+Q+ympgETYv724akJ/kPinD7oMIsip3EL
Jw28JE7q2HnRf9dI3CS1QvKmfBwBDKapQ7mUTszg/4xUnwXM9uGmX4Ax06amZHXQ08cclcYu
ll5ZCEcQVr7UdycQT9DTxxxsue07sTamFjKWvaap7XdlsoyVn9iq8q6mpqa4HGLogLm9pqam
j3FOIuD/D72mpqam/4yVboChpqampqb/BGLogLn/QkELeQUwiv9kddDTxxxDYvumpqampqam
pXI2pqampqampo+bp6ampqampqleu+1kHj77pqampqapDOGmpqamj/gFKcFk67rhpqampo93
Ersee3KwNqampqaP8aampqaPm6empqambos6iaampqbRvaamptG9pqaneSFkdUoc9gXU7ycZ
gEc61fum3e3EPc9dIy69pqlDuZTrswt5BTCi1/jjrao6+KempqZgbc1UtYm5eqNZ0GiQEljg
GBe5C/oq6Cse+Hc8Kot6l7rhpqampqnrek/RvaampqkM4aZwepenpqbdhydYQLPg/4xXC6B1
HL7a/mWVjnJoxvH2WTs8/iY79kdCicQ2pqampqaPIXKwNqampqamuKGmpqamj/gFKcY++6am
pqm7IIyV0oVVrXLH2Hn90FU6lE7M4P+MNDrBQ2L7pqampqZXO3n4sxK7sDampqamprihpqam
prihpqapAf3X1YuM226AoaamqRIgCjqFgeymphYylr2mpopjp94EYot6GIKHf6QAPGHwgHc0
0HVO6uGmpqammprcJNy9pqamps+q/WLogLn/QkELeQUwiv9kddDTxxxD1ySWIL2mpqampt3e
eQXQGRIkbKampqamqQzhpqamqQzhpqZWBRGHfyxsi3ry4aamaBK614DisTamZzHJ2XPspqYB
E2L+9vKmqUNIUk7V+6bUjH69pqnqXQ2kBeMIgVYiSNz+6yr7pqUYJj2rQnnG389o06amptKf
fgNOOpSM8DAzwtHGq0J5xt/kQ5S6bZ/QAQXGQ9e72Sr7pvJVnJiVmnidQ3lhzv7XndOmcHqX
p6amMOmHBS3wBA9yBoaLIU/ivaap6lk7PIX22mHuhqempqYOxAsTkHJkBHnbA5wyrTyF9tph
7pZktKOgElYFItEgPw/ivaZp/LxoYvm8OiSb37rk+Iu1G6bdMIli+6alGDRhC/1/vEGVxtfe
JEy2pqZkdaM797GffmrGYvumpmcgxt/aTw9/g+MXlh7A2Pexn35qD4ctDRH+VGEQcRnkvHG2
pg537RSmpof3sZ9+79SxA85TrYHrKvumpRgmPatCecbfz2jTpqam0p9+A046lIzwMDPC0car
QnnG3+RDlLptn9ABBcZD17vZKvuml9+6ubE2pmO52UyWXlkIRxBWvtR3JxCqi2RUBXHg7FVu
P/keiaZwepenpqbZVdWLjNtugC2KYYw8NqYE0MJspqaHfyxsi3oY0BOH6HUGWPhUwPAmPZIi
LGyLevJoErpkvaZp/IfTpqYSJgGrYG3NVLWJQaampo96o1nQaLampqbdvosQ226d06ampqZu
gG2t0PGmpqampm5/o1nQaJBOesaDYQi0kA9/LGyLepe64aampqampqaP6uGmpqampqamuEIM
pqampqam3Sb+GbGBiaampqampt1s+6ampqalc83STrEpYvumpqamuPzt/jKQwV7hpqamprih
pqamprhCDKampqbcTs/ypqamppw2pqamnDamptnf7OpZgNANeYbzKrvvi+SNpqaPGQUnIsDt
6Dam3cD+GCl9LWF5elGLENtuneQQDKampoyVn9iq8r8cYuiAuf/tWX+Vgv4tXateCoEQJx6r
xxxDYvumpqam3d5Brpw2pqam3Wz7pnwcAQympnCWDVlqEX/BzG5/o1nQaJASWOAYF7kL+iro
Kx74dzwqi3qXuuGmpqamprjswV7hpqampqZTFKampqalc83Shommpqam3f7Es+AjXbluwa08
YfDGueQYOhZ/wcwZ5EU0bKampqamprANeSQju3OJpqampqam0b2mpqam0b2mpkt+jEJzJM1V
LfHRvkIccMYQlK5R7IgtrSKYK61XnRvdNYYk68bO/XkhRb8H+h9LbvI3PBgzBnkDFG/Xm/EK
R/tSmeel7USPQgutDFbeib2mpri7zTitXu0upqaJI4m9pqZ2Y6d6X28Mq5WC4oUX0IAF1BJ3
9V9UJcY2pqampj/5MesgTxumpqampU5yYG3kQUXBoOR5sPl5c2LRfm0kXzyaECT7ptQSMRum
puJa0J9I79TGh88/+LXRls/+Dxp5LZLGeJq1ajamBLsBE6amU2YAg77wBCwSCDrNIPRrejxO
8ymz/3nOcuK0o6AS2AV/h8manWgbpmcxbx5z3/tnMW8ec98upuQmmgedWrod6s+t0DLVxgi1
NuI31bxuxkWNhuNs8AZOEw9rIVUbplMG2ULYuq1Kzn0inS6mqbPg+JReoZeGWSrACiqn0tUo
zrAZEqojWKampjRo6L2mPJjV+XXW+Qgulq3AiibQKj2FOzyxJG5JEqOcVCUWtqZf/sIupqnV
SvfUQs7kM/Ykmyzv8E6lOs2qKP+uxL2ml2FUu8Te4anVvG7GRY2G44fCcqqOHqaqNR1bPHkh
6s+t0DLVxvPtXb2m+Rh0y7XcFooPsZUTh8BdtF4s9uX3unPHu/1aBeBVSvf5jn2HSaZng2/t
XSS/xv53xuwnXSse9pa+2Or0Mr4utqbYv+rPrdAy1cbz7ZEgIi6mfBnZ3/umPNpTZkMth2wj
OtmPeMhhlZS7bGIIwYr+QZJUXvBoJxAuQtjq9J+dZL6ihxum3TCWBTam3ZQ+0IHFs7n+KpyF
bXIg4jCW3vSfnWS+aBumZyaAWKamU2ZDLYdsg3O8i9NCCDoulq3AiibQKj2FOzyxicYjjRH+
+OwMXUPf+6aXYVS7xN7hpti/7V2FLbAiPMPvxKMP/nPjNFQouv1hAzy9pnwZ2d/7puThiMt2
Y6fkLAdqNzL915QSIJryHPecvaampo8ZBWpFpC3+Mztd86qU81s/MJbtV4f+c+M0MOsMSnYS
/AsuKsAKgTKa0IXZeeGmpdlNV6VqEjpso3YEuwETpqam4rQS+Cub4zTO5N/7pqamqYbkm0lv
OkGSVF7waCcQVf7vm2X4SDNz2Xnhpg5+2Xnhpokjib2mqdUzGbyNemaWIp0x/6MgtqYOfm2B
PxMbpt1FpGMoHt/sicddK/Z2wYbMksY2pqapwYfAk2TTHmWupqamS6pMnJNIDdTtxMZ+VUr3
JxCJeds8i72mpqYJHB5cUVW79tH3nJOXC+3y5PJjfEMth0MkSBMdPtCBxbPZsQ15JmCHi72m
pqaDc7yL075iAUGmpqYOnHE8CuQsHRDhpqap0hHB3+DPigGfXyE/MYBbwAoNXS1hYtTGh4u9
pqamI/oB7fJ6gwnJEiC+doBW3olC4aamqfiD0PMSltBC4aamqSQn/LampqZ2bMR59NAirqam
plDZD8O0NxJdK/YagNrEf66mpqZLokgNYCOgx/1ONqampoBdK/YagNrEf66mpqbOgvoQ4aam
qUNWLRrMi72mpqa8bsZFjYbj0CKupqampUN6PDt2gFbeiULhpqapDyEGSaampuSYLLWcGs69
pqamSsPZ880/T3PieSZgmJrBvaampiM6RWFiPRH++IrOKqd6aesWUpYBn27Gh2GMoiNfk0Un
dsHzKX+LvaampjzN4y2Ah8kSIJryHPecvaamppa2pqZxJkFDpWg
MSnYS/AsuKsAKgQ2ccTwK
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
g+M08AU20isenIm1BXnFBcD4rrWZR6VG+Q==
/


--
-- PRO_PREMIUM_COLL_SUM_TEST  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_premium_coll_sum_test wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
544d 11ea
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
dYMGjuliPXd+8+6
9FbA9zJy0uYqlvvudXPvwpViNeeQ4YbLbsnKS7Rz4dGmp3ZmmNiPtZt01S+lwm5wU3YCAnZG
u7BckUXrHsUjyVzDjwk1PyURO5/YQNGjujL9ll+teO537Ah1A44bBEpfzL4wOH7Onuul0X8P
lZlcWVeeagoPLzHNnUYkeJhzXnFqz7VznCCaPzrL8ToYkKtxVRuqWFch3bj05eOx5aicRx8Y
DE1snUXCD8DrjGReowrLHDOKlSNwha/tzgLfgNmIqnPmvKSBbpzA9ENLTKmdCLXlOff7S5ZN
3FxsrmFKoC674AWZ5c33bALlt7z/urNfUOGM2IPvvEfSzw5A+qwrPN92paVgO/9rtK/rbZwt
/MS3/xP/EHQF8Fo8EnTv8R597PsU2ud58XYoaz6twpHxBChFPn/CkfEEKOs+f2ChcVCjk4Dq
TvO4eAIh1Yxis9rV4PYLuYV1uivvijz/p2I4BNV8xbxPrd/P4FdZl4Wm9Mt4ve+E3RHH/15f
Fxsts7PL7cX0yAwn7uNdlINasM4fEs3ZoPNhUEB/nVv2cQrw0Nb4ZiQXDf4WgM555rrjLTVv
C5wUl2AI6b40lLmIog4Hdt9wOrC1Uf9yj7dPtKJb1z9CTosH/rucXcSahfF6Og21pesH+deq
JC9BjLzo/s84leFJLwTM3cjXvNqvx1LMm3BJUHLOvYJNvXalD/lb1WX/0A==
/


--
-- PRO_PRE_LOAN_POSTING  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_pre_loan_posting wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
c15 515
FsB4U0HznuHv8FBeUAM/Jqz2VPIwgw0rTK4FfI5Vxz+VEPaXZStwHmpU9zTbYzzT2sKkYSKT
5+U3RhbFzRpz+ExJ/7CCtByLW1qGhoYSrkoQINHpWbfmCTCDedfrSAscYbHQi974NJ2q5Ps4
pqa++paT4YaGGIUw6V3ew6hcJ1MEgJtm+OZjamOsuIRlzLhzZtE+EfA9ZO4EsQuJAHbgTRry
/aEhEDfQXUIn0ygLBxAeaeniAqG9JZWRprsOdT6J5NWBwPgqiWXlEzcW9VuIWR3oVuzy3sD3
wjDwoWL21yn+dYvsvT9If+rJ+hRgxlf53hUDKEijmfg/eTzATR1GF15bJyEe47rW3Mnzbjxn
lGRQDD6VZDeb4C8LfoizApEjedNVtvZXVbPdG0q6qGofI/pTRN8oV44u3thrbGBhDodtr235
4td3CRh0wY01BW+TYENFQZJhFUZr9XMVMbV6uLd+rVqsPlllLlWgh8wZiqbxfOkHT/xo1+vD
DVKSNB+ZUMKPf0YnO37c629ompW2uevhG0m3Tm+zmieOJB7uQqz7KjdhnauqRPAJdlNL7LYD
ohIUtU0dwOolkoeVTVrxdVm47QkvSqTE54vrJ76CNeYL92nngvdn432DP85UvoUFG6z6y8aR
e/CPaiGe5IQYbyQTcsbJ/4ssc8S5gq2GDUlWES6cjhQ7FdGdknwIcpmaLaQAxsuDsJVaMCrP
hbXisApkhSwmh/27iz0+u7Syts9CgpjnGRX6ETxB9/l//jc9CMNz/mg4MIPUhEAxtCnA0PCC
5I0ffE6KfDQOmKzbiWMvrAAi7aOSPNXs6zj8gJ/MnXAc8JVdYs8gHhXYNsQzLFF6sF9D7sP8
KRWUjUV7hzBYU19LcQN19dHoyUYzM0oOfllm3Z4Tjn+Hys7yiR+TOhZYkhi5Z1T3iFGO36L0
IES/vz7wPwlDReUu3TIBjnuWD4t1lhkkoODoiPcPja4rLaJpn1szD74QO3mV77MDM72CvOB/
hpxgVpwilK+P+Jp89bE4XJhRRX+E6Ibi4fxTjDd74sMErUT8UwptbCnF8zL4bDTcF0m2+P71
ZRpYfZj4F1otrzbkIBJH12KKu58FatDaiiR4JLvEBxdLshZ3shGvVrFb0JcyXAQMXP0FeXIb
39284HNAA2Ob2qZp14pato8nLqUlqTXvF/YKxeD4ttV+ZD+nlcdpjlsHBYyX4v4HVXP5HxSx
+LKlzRynBWqGeVw0DOY32WMj8IBVaHlIKCj9MKIYE1U5MVb0YsYgPx0XmjTD
/


--
-- PRO_PROPOSAL_ACCPTBLE_STAT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_proposal_accptble_stat (
   p_pgid            IN       ins_p_proposal.pgid%TYPE,
   p_instl_premium   IN       ins_p_basic.installment_premium%TYPE,
   p_accptble_stat   OUT      ins_policy_category.policy_catg_cd%TYPE,
   --Return '1' if acceptable, '2' if conditionally acceptable and '0' if not acceptable
   p_reason_stat     OUT      VARCHAR2,
   --Return null if acceptable, return reason if conditionally acceptable or not acceptable
   p_error           OUT      VARCHAR2
)
AS
   v_policy_catg_cd        ins_policy_category.policy_catg_cd%TYPE;
   v_gender_cd             ins_p_personal.sex_cd%TYPE;
   v_edu_ins_qualified     ins_edu_qualification.edu_ins_qualified%TYPE;
   v_occu_cd               ins_p_personal.occu_cd%TYPE;
   v_occu_scope_cd         ins_p_personal.occu_scope_cd%TYPE;
   v_occu_class_cd         ins_occu_setup.occu_class_cd%TYPE;
                                       -- Added by Md Zahid Hasan 26-Jan-2014
   v_product_cd            ins_product.product_cd%TYPE;
   v_policy_group          ins_policy_type.policy_tp_cd%TYPE;
   v_sum_assured           ins_p_basic.sum_assured%TYPE;
   v_installment_premium   ins_p_basic.installment_premium%TYPE;
   v_age                   ins_p_basic.age%TYPE;
   v_min_age               ins_p_basic.age%TYPE;
   v_max_age               ins_p_basic.age%TYPE;
   v_party_cd              ins_ownership.ownership_cd%TYPE;
   v_coll_proposal_amt     acc_advance_receivables.coll_amount%TYPE;
   v_req_proposal_amt      acc_advance_receivables.coll_amount%TYPE;
   v_cnt_diag_doc          NUMBER (2)                                    := 0;
   v_cnt_nonmed_doc        NUMBER (2)                                    := 0;
   v_cnt_tot_req_doc       NUMBER (2)                                    := 0;
   v_cnt_tot_coll_doc      NUMBER (2)                                    := 0;
   --v_late_fee              NUMBER (12, 2);
BEGIN
   SELECT b.sum_assured, b.product_cd, b.installment_premium
     INTO v_sum_assured, v_product_cd, v_installment_premium
     FROM ins_p_basic b
    WHERE pgid = p_pgid;

   pkg_newbusiness.pro_client_age (p_pgid            => p_pgid,
                                   p_product_cd      => v_product_cd,
                                   p_age             => v_age,
                                   p_min_age         => v_min_age,
                                   p_max_age         => v_max_age
                                  );

   /*Musha on 19-01-2014
   v_age :=
      pkg_newbusiness.fun_client_age (p_pgid            => p_pgid,
                                      p_product_cd      => v_product_cd
                                     );*/
   SELECT po.policy_tp_cd
     INTO v_policy_group
     FROM ins_product p, ins_policy_type po
    WHERE p.policy_tp_cd = po.policy_tp_cd AND p.product_cd = v_product_cd;

   IF v_policy_group = '03'
   THEN
      v_party_cd := '02';
   ELSE
      v_party_cd := '03';
   END IF;

   BEGIN
      SELECT pe.sex_cd, eq.edu_ins_qualified, pe.occu_cd, pe.occu_class_cd
        --pe.occu_scope_cd
      INTO   v_gender_cd, v_edu_ins_qualified, v_occu_cd, v_occu_class_cd
        --v_occu_scope_cd
      FROM   ins_p_personal pe, ins_edu_qualification eq, ins_occu_setup oc
       WHERE pe.pgid = p_pgid
         AND pe.party_cd = v_party_cd
         AND pe.sl_no = 1
         AND pe.edu_qual_cd = eq.edu_qual_cd
         AND pe.occu_cd = oc.occu_cd(+)
         AND pe.occu_scope_cd = oc.occu_scope_cd(+);

      /*
            -- 26-JAN-2013: Added by Md Zahid Hasan
            Required Document: No of Medical Doc
      */
      SELECT COUNT (s.diag_req_cd)
        INTO v_cnt_diag_doc
        FROM ins_diag_req_setup s, ins_diag_requirement d
       WHERE s.gender_cd = v_gender_cd
         AND s.edu_qualified = v_edu_ins_qualified
         AND v_age BETWEEN s.age_from AND s.age_to
         AND v_sum_assured BETWEEN s.sum_a_from AND s.sum_a_to
         AND s.diag_req_cd != '01'
         AND s.occu_dependency = '1'
         AND (   NVL (s.occu_dependency, '0') = '0'
              OR (    NVL (s.occu_dependency, '0') = '1'
                  AND s.occu_class_cd = v_occu_class_cd
                 )
             )
         AND s.diag_req_cd = d.diag_req_cd;
   /* 26-JAN-2014: Disable by Md. Zahid Hasan
   SELECT COUNT (s.diag_req_cd)
     INTO v_cnt_diag_doc
     FROM ins_diag_req_setup s, ins_diag_requirement d
    WHERE s.gender_cd = v_gender_cd
      AND s.edu_qualified = v_edu_ins_qualified
      AND v_age BETWEEN s.age_from AND s.age_to
      AND v_sum_assured BETWEEN s.sum_a_from AND s.sum_a_to
      AND d.policy_catg_cd = '02'
      AND s.diag_req_cd = d.diag_req_cd;  */
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         p_error :=
            'Acceptance Validation Cannot Done Because of Personal Information As Per Occupation Setup Is Not Found';
   END;

   /*
         Required Document: No of Non Medical Doc
   */
   SELECT COUNT (d.docu_cd)
     INTO v_cnt_nonmed_doc
     FROM ins_gen_req_doc_mst m, ins_gen_req_doc_dtl d
    WHERE m.gender_cd = v_gender_cd
      AND m.edu_qualified = v_edu_ins_qualified
      AND m.setup_id = d.setup_id;

   v_cnt_tot_req_doc := v_cnt_diag_doc + v_cnt_nonmed_doc;

   SELECT NVL (SUM (r.coll_amount), 0)
     INTO v_coll_proposal_amt
     FROM acc_advance_receivables r
    WHERE r.proposal_no = fun_ins_pgid_to_proposal_no (p_pgid)
      AND r.rec_status = '1'
      AND NVL (r.cheque_deposit, 'N') =
             DECODE (receive_mode,
                     '1', NVL (r.cheque_deposit, 'N'),
                     '3', NVL (r.cheque_deposit, 'N'),
                     '4', NVL (r.cheque_deposit, 'N'),
                     '5', NVL (r.cheque_deposit, 'N'),
                     '7', NVL (r.cheque_deposit, 'N'),
                     'Y'
                    )
      AND NVL (r.coll_check_status, '0') = DECODE (r.mode_tp, '1', '0', '1')
      AND EXISTS (
             SELECT 1
               FROM acc_bank_tran_mst m, acc_bank_tran_dtl d
              WHERE m.coll_purpose = '1'
                AND d.pgid = r.pgid
                AND d.receive_id = r.receive_id
                AND d.slno = r.slno
                AND NVL (d.deposit_st, '0') = '1'
                AND m.tran_id = d.tran_id);

   --PKG_NEWBUSINESS.pro_fp_late_fee (p_pgid, v_late_fee);
   
   IF v_coll_proposal_amt >= NVL (p_instl_premium, v_installment_premium) ---+ NVL(v_late_fee, 0)
   THEN
      v_req_proposal_amt := 0;
   ELSE
      v_req_proposal_amt :=
            NVL (p_instl_premium, v_installment_premium)
            - v_coll_proposal_amt;
   END IF;

   IF v_cnt_tot_req_doc > 0
   THEN
      SELECT COUNT (c.pgid)
        INTO v_cnt_tot_coll_doc
        FROM ins_doc_coll_info c
       WHERE c.pgid = p_pgid
         AND c.collection_dt IS NOT NULL
         AND c.checked_dt IS NOT NULL;

      IF v_cnt_tot_coll_doc >= v_cnt_tot_req_doc
      THEN
         IF v_req_proposal_amt = 0
         THEN
            p_accptble_stat := '1';
         ELSE
            p_accptble_stat := '2';
            p_reason_stat := 'Required Proposal Amount is not Collected.';
         END IF;
      ELSE
         p_accptble_stat := '2';

         IF v_req_proposal_amt = 0
         THEN
            p_reason_stat := 'All Required Documents are not Collected.';
         ELSE
            p_reason_stat :=
                  'Required Proposal Amount and Documents are not Collected.';
         END IF;
      END IF;
   ELSE
      IF v_req_proposal_amt = 0
      THEN
         p_accptble_stat := '1';
      ELSE
         p_accptble_stat := '2';
         p_reason_stat := 'Required Proposal Amount is not Collected.';
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := 'pro_proposal_accptble_stat Error: ' || SQLERRM;
END pro_proposal_accptble_stat;
/


--
-- PRO_PROPOSAL_ADV_COLL_ADJ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_proposal_adv_coll_adj wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
1d85 786
uxlyxL3L7TqaFZgfoYFckBmtbM0wg82TDNAF3y+5k53g0QLYw59+ILoOTFOmYrOY8oHF6ULN
ty+gsGbdOWJQXj/PBxoUt44B+hMiafW9FNX0mnT6WO6l/UWR6aKG7MzOzgXH1rUiIrX5+YRO
+Zwk7E9PJOMHDzju+2cxiSihXyjIXQ6j8eqyP8npk8MUTPT5ljq+GmsVsZQdHaoUViMUfgUz
XtSeNxYnSDMSN5zD4cd+BPARwBrwq772FBiDHMKu3g1FDl3O/vLfsEkZ2yp54BXeltWHo2fD
AxvVwPm0GhrmFq2ZZ4cXEpdwLbKPI/g/Wx7cXvcBi3w8aRHF3CUhjK2A1rNWJgMZqVyQAYmQ
6stfvHbTbVIloKiInV+z158Dsjj9V2DZbUAfOdLi1qEFpYvdGEcAHm9QlxOpABBawPsKEfLv
GTo2EEvTQCTxd/bt0AZF7z0XrRFxt9IZ64nDChnxqLxXVtMjnPRLXPbQUf+tVlXhDgUunIeP
FCXh7y8sbwPDREHVdBlFr9HYa4/VtBFk+3Ru6K6n2y2ePZ5vRfd6vxHUIcXgnm3xbsxW6C6O
0DWYi2R4P+cTzSFIbVMgsDi/55gTQBBiYJCsO2T+mKTW3z1m5JotizZ0Gd0G00Yroq76q3mt
JJ4goFEK7XNHs8l0lEd02z4uZG8cAkdoal7sh2J6nlhY+egh7aMwjpt4T3Y0aamnlRGK2/op
0jF1X9eKviM8/dtHMbPX8vEW1qLmAWlupytrTZHBhSbIL2JKI+Q2uGx1XaasMe4JWhzMkDJq
s+YkAAlW70qs8HhTeofqSx2qhh36hp/hzjU980V9HdX80zPBb7amTtH8xV7c/PydfzoOBJHA
S62bKNrEtzbsJCU0kB2em1EphX8iGKs2bxChS3zk80aPxi0sNk0/ycqYoP1rGo5hg6BYNXJt
zNwrH5ljSFnGzkYiEOGqKQ/NsdL8CFsiZWNsap/pnbPruZQu9BcHiWb5/B0u1fy+1g+JVAs/
fZV/yvHWGDcTNPptH86bnR5ZR39PHpfRzWiLWnePn+97cEf0QumI6oy6DbwLGZmNg9GUi0OT
WF6RNiHPCV0uqgA4xAa4WnydvVGq83JdE1kWXOyJdeWEALp7lExQZijUdsfiRwJrTI8xMUyC
RRBXBDJ0EctD6U89ioToIDbqSvYpbwRtbJEuoiVN3LN6ztwGvzKVQzCMAVBsJsSLPkK10cJI
nVpSze/527kxhZL0nKjjLRMdY/y9LOxJrE6R6JjxX98B9/KBr3BJLTPD62QfUBbY/+96+P+N
VPC0XR4gz1KQDlim0GPu0pt7LmIgZLKqBeP/atx5BVBCULrGmLyuQHtoH4Ag2xurGQhWOIYO
hH4qdKYk/kzJ02z2tZpnzCZ6BQYHc/2gK1PLc4G/YCfx3gbJZsDwPAFdFKLNAUTWWr8eU/Tr
TTMJyYyDyJp06hf3V3IcBenWVP47JREvYUWJxm3D9PPrdYiO3JLfBrijjRT0mBNkpLyupaN+
sD1BGhWf4w8okvLAuce94YpXx92yjMv7m6xY1ANp2D6qRpBY81kRYpbov3l6BRAtSzXa6nK4
r95HchUf6D2b4TOJJMzsaiuVhbiYg5ucBScZmRORWj78A+m7u7nhK5h3RezDkjOsEmJ1qszn
A7ueODMyqEe8f0b6JSjilHX7BJ0c0lOnL77aTENUsSlo1MRLKwuFtVvHKqfkch9mi7uAbwcq
VX8VC4FZaAeiJhONhL7xJwHTSIKLzrk9r2aM41kDE0WuyMCL4J8zm9QI6gfzJOB0ogpFxT5l
MJNGmBXr2OtbqWMuIMmlQY+W8ptj7TUqsCVeogw1DABEcmvdTBVdb7FhDP5qGzlZgV4YcogY
UZ56DpKa8iod27u5nc62uX2ZDA==
/


--
-- PRO_PR_BOOK_VLIDATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_pr_book_vlidation wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
4ae 278
f592+tdPHf3ZpP/JT3gOiKUhz4Awg42JLvaGfC9A/ooPf5wGNqcl0lS3rGbw/cy6wGy+LEn3
bAF4fvQMCZ4C5M6NVu7ULjx5MmWCuzSbR4KfYxTpK9VGwS4LT3gz6uvkDWSuCkMGAT3YOImm
ZwFkidjV1fzAQJ7k7uEVqImjxW0Vp4VXLUeOsPgGtk5p7nJwCT7at5uDnoj2B1kZlcZWoKjo
PNEU9rZWSPRRx1H/uu5JSTBrCQnNByg08VIVDR+anx9e7ipSL4z6VwzJMJUCH95WyKsOwp/s
8x7wOG7bQPCKEwIw4pFCkefdg9JVdqRPvKhZJGn0ebavbsAgJesZjxLlV9s+GregnGkwC60d
4kyM6bMM+nrBjmLNwpMGTnq1fIwMV05SgoDzHiiPTFNtciVHsC1QVxQTGu7s/j4dhoO47kEJ
ThcNAvKvR3nRyLDXhuA6OZGYTHOHJNHuYzegndOYpF0NSy22AB9jsD0q37l3YjtTSUy4BD14
3hCItC8DC7QaMYD+LCPMjudTenIDNrs+K0DZp+z26VdYAdsvE5jtyVtZaoBdiAiBHhVz3+E5
s245wjsC9WzyKHccc/5xZ0UFKRMV+vL+4KwBJPn7RcoU5w==
/


--
-- PRO_PUSH_PULL_SMS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_push_pull_sms
IS
   v_client_name       VARCHAR2 (200);
   v_tot_coll_amount   NUMBER (12, 2);
   v_party_id          VARCHAR2 (30);
   v_mobile_no         VARCHAR2 (30);

   CURSOR c_pol
   IS
      SELECT   s.pgid,
               s.sum_assured,
               s.installment_premium,
               s.next_due_inst_no,
               s.next_due_date,
               s.policy_status,
               p.sum_assured sum_assured_sms,
               p.install_premium install_premium_sms,
               p.next_prem_due_date next_prem_due_date_sms,
               p.policy_status policy_status_sms               
        FROM   ins_p_summery s, push_pull_sms@dbl_smsdb p
       WHERE   s.pgid = p.pgid
               AND (   s.sum_assured <> p.sum_assured
                    OR s.installment_premium <> p.install_premium
                    OR s.next_due_date <> p.next_prem_due_date
                    OR s.policy_status <> p.policy_status);
   
   CURSOR c_change_mob_no
   IS
      SELECT p.pgid
        FROM push_pull_sms@dbl_smsdb p
       WHERE p.mobile_no IS NULL
       and exists (SELECT 1
            FROM ins_p_address a
           WHERE a.pgid = p.pgid
           and a.mobile_no is not null);

   CURSOR c_no_mob_no
   IS
      SELECT p.pgid
        FROM push_pull_sms@dbl_smsdb p
       WHERE p.mobile_no IS NULL
       and exists (SELECT 1
            FROM ins_p_address a
           WHERE a.pgid = p.pgid
           and a.mobile_no is not null);

   CURSOR c_no_pol_no
   IS
    SELECT p.pgid, fun_ins_pgid_to_policy_no (pgid) policy_no
      FROM push_pull_sms@dbl_smsdb p
     WHERE p.policy_no IS NULL
       AND EXISTS (SELECT 1
                     FROM ins_p_proposal s
                    WHERE s.pgid = p.pgid AND s.policy_no IS NOT NULL);
                    
BEGIN
   INSERT INTO push_pull_sms@dbl_smsdb (pgid,
                              client_name,
                              sum_assured,
                              install_premium,
                              tot_coll_amount,
                              next_prem_due_date,
                              next_prem_due_instl_no,
                              policy_status,
                              sms_text,
                              i_dt,
                              policy_no)
      SELECT   s.pgid,
               NULL,
               s.sum_assured,
               s.installment_premium,
               NULL,
               s.next_due_date,
               s.next_due_inst_no,
               s.policy_status,
               (CASE
                   WHEN s.policy_status = '10'
                   THEN
                      'Please contact with Sandhani HO'
                   WHEN s.policy_status IN ('02', '03', '04', '08')
                   THEN
                      'Your Policy Benefit is Already Settled'
                   ELSE
                      NULL
                END),
               SYSDATE,
               --fun_ins_pgid_to_policy_no (pgid) 
               null policy_no
        FROM   ins_p_summery s
       WHERE   NOT EXISTS (SELECT   1
                             FROM   push_pull_sms@dbl_smsdb p
                            WHERE   p.pgid = s.pgid);
commit;
   --update client name and total collection amount
   FOR i
   IN (SELECT   p.pgid,
                p.assurance_type,
                m.client_name,
                m.tot_coll_amount
         FROM   ins_p_proposal p, push_pull_sms@dbl_smsdb m
        WHERE   m.pgid = p.pgid
                AND (m.client_name IS NULL OR m.tot_coll_amount IS NULL)
                AND p.I_DT >= TO_DATE ('01/01/2021', 'DD/MM/RRRR')
                )
   LOOP
      v_client_name := NULL;
      v_tot_coll_amount := NULL;

      BEGIN
         IF i.client_name IS NULL
         THEN
            SELECT   party_name, party_id
              INTO   v_client_name, v_party_id
              FROM   ins_p_personal
             WHERE   pgid = i.pgid
                     AND party_cd =
                           DECODE (i.assurance_type, '03', '02', '03')
                     AND sl_no = 1;
                     
             BEGIN
                SELECT MAX (mobile_no)
                  INTO v_mobile_no
                  FROM ins_p_address
                 WHERE pgid = i.pgid 
                   AND party_id = v_party_id;
             EXCEPTION
                WHEN OTHERS THEN
                    v_mobile_no := NULL;
             END;
         END IF;

         IF i.tot_coll_amount IS NULL
         THEN
            SELECT   SUM (coll_amount)
              INTO   v_tot_coll_amount
              FROM   (SELECT   coll_amount
                        FROM   acc_advance_receivables
                       WHERE   pgid = i.pgid AND rec_status = 1
                      UNION ALL
                      SELECT   coll_amount
                        FROM   acc_receivables
                       WHERE   pgid = i.pgid AND rec_status = 1
                      UNION ALL
                      SELECT   coll_amount
                        FROM   acc_partial_receivables
                       WHERE   pgid = i.pgid AND rec_status = 1);
         END IF;

         UPDATE   push_pull_sms@dbl_smsdb
            SET   client_name = NVL (v_client_name, client_name),
                  mobile_no = NVL (v_mobile_no, mobile_no),
                  tot_coll_amount = NVL (v_tot_coll_amount, tot_coll_amount),
                  sms_text =
                     NVL (
                        sms_text,
                           NVL (v_client_name, client_name)
                        || CHR (10)
                        || 'SA: '
                        || sum_assured
                        || CHR (10)
                        || 'Pre (TK): '
                        || install_premium
                        || CHR (10)
                        || 'T. Collection (TK): '
                        || NVL (v_tot_coll_amount, tot_coll_amount)
                        || CHR (10)
                        || 'Next Prem Due: '
                        || next_prem_due_date
                     )
          WHERE   pgid = i.pgid;
          
          commit;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;
   END LOOP;

   --update information from summary update
   FOR r_pol IN c_pol
   LOOP
      UPDATE   push_pull_sms@dbl_smsdb
         SET   sum_assured = r_pol.sum_assured,
               install_premium = r_pol.installment_premium,
               next_prem_due_date = r_pol.next_due_date,
               next_prem_due_instl_no = r_pol.next_due_inst_no,
               policy_status = r_pol.policy_status,
               sms_text =
                  (CASE
                      WHEN policy_status = '10'
                      THEN
                         'Please contact with Sandhani HO'
                      WHEN policy_status IN ('02', '03', '04', '08')
                      THEN
                         'Your Policy Benefit is Already Settled'
                      ELSE
                            client_name
                         || CHR (10)
                         || 'SA: '
                         || r_pol.sum_assured
                         || CHR (10)
                         || 'Pre (TK): '
                         || r_pol.installment_premium
                         || CHR (10)
                         || 'T. Collection (TK): '
                         || tot_coll_amount
                         || CHR (10)
                         || 'Next Prem Due: '
                         || r_pol.next_due_date
                   END),
               u_dt = SYSDATE
       WHERE   pgid = r_pol.pgid;
       
       commit;
   END LOOP;

   --Collection info update
   FOR k IN (SELECT   DISTINCT pgid
               FROM   (SELECT   pgid
                         FROM   acc_receivables r
                        WHERE   TRUNC (r.i_dt) = TRUNC (SYSDATE - 1)
                          AND rec_status = 1
                       UNION ALL
                       SELECT   pgid
                         FROM   acc_partial_receivables r
                        WHERE   TRUNC (r.i_dt) = TRUNC (SYSDATE - 1)
                          AND rec_status = 1
                       UNION ALL
                       SELECT   pgid
                         FROM   acc_receivables r
                        WHERE   TRUNC (r.u_dt) = TRUNC (SYSDATE - 1)
                          AND rec_status = 0
                       UNION ALL
                       SELECT   pgid
                         FROM   acc_partial_receivables r
                        WHERE   TRUNC (r.u_dt) = TRUNC (SYSDATE - 1)
                          AND rec_status = 0))
   LOOP
      v_tot_coll_amount := NULL;

      BEGIN
         SELECT   SUM (coll_amount)
           INTO   v_tot_coll_amount
           FROM   (SELECT   coll_amount
                     FROM   acc_advance_receivables
                    WHERE   pgid = k.pgid AND rec_status = 1
                   UNION ALL
                   SELECT   coll_amount
                     FROM   acc_receivables
                    WHERE   pgid = k.pgid AND rec_status = 1
                   UNION ALL
                   SELECT   coll_amount
                     FROM   acc_partial_receivables
                    WHERE   pgid = k.pgid AND rec_status = 1);

         UPDATE   push_pull_sms@dbl_smsdb
            SET   tot_coll_amount = NVL (v_tot_coll_amount, tot_coll_amount),
                  sms_text =
                        client_name
                     || CHR (10)
                     || 'SA: '
                     || sum_assured
                     || CHR (10)
                     || 'Pre (TK): '
                     || install_premium
                     || CHR (10)
                     || 'T. Collection (TK): '
                     || NVL (v_tot_coll_amount, tot_coll_amount)
                     || CHR (10)
                     || 'Next Prem Due: '
                     || next_prem_due_date
          WHERE   pgid = k.pgid;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;
      
      commit;
   END LOOP;
   
   COMMIT;
   
   --upate mobile no
   FOR i IN c_change_mob_no
   LOOP
            
      BEGIN
          SELECT party_id
            INTO v_party_id
            FROM ins_p_personal n, ins_p_proposal p
           WHERE n.pgid = i.pgid
             AND p.pgid = i.pgid
             AND n.party_cd = DECODE (p.assurance_type, '03', '02', '03')
             AND n.pgid = p.pgid
             AND n.sl_no = 1;

          SELECT MAX (mobile_no)
            INTO v_mobile_no
            FROM ins_p_address
           WHERE pgid = i.pgid
             AND party_id = v_party_id;
        
        if v_mobile_no is not null then
          UPDATE push_pull_sms@dbl_smsdb
             SET mobile_no = v_mobile_no
           WHERE pgid = i.pgid;
        
          COMMIT;
        end if;
      EXCEPTION
        WHEN OTHERS THEN
            NULL;
      END;
   END LOOP;
   
   --add mobile no if null
   FOR i IN c_no_mob_no
   LOOP
      BEGIN
          SELECT party_id
            INTO v_party_id
            FROM ins_p_personal n, ins_p_proposal p
           WHERE n.pgid = i.pgid
             AND p.pgid = i.pgid
             AND n.party_cd = DECODE (p.assurance_type, '03', '02', '03')
             AND n.pgid = p.pgid
             AND n.sl_no = 1;

          SELECT MAX (mobile_no)
            INTO v_mobile_no
            FROM ins_p_address
           WHERE pgid = i.pgid
             AND party_id = v_party_id;
        
        if v_mobile_no is not null then
          UPDATE push_pull_sms@dbl_smsdb
             SET mobile_no = v_mobile_no
           WHERE pgid = i.pgid;
        
          COMMIT;
        end if;
      EXCEPTION
        WHEN OTHERS THEN
            NULL;
      END;
   END LOOP;
   
   FOR i IN c_no_pol_no
   LOOP
       BEGIN   
          UPDATE push_pull_sms@dbl_smsdb
             SET policy_no = i.policy_no
           WHERE pgid = i.pgid;
           
           COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
            NULL;
      END;
   END LOOP;   
       
       
--EXCEPTION
--   WHEN OTHERS THEN
--      NULL;
END;
/


--
-- PRO_REBUILD_INDEXES  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_rebuild_indexes
IS
   v_indx_rebuild_sql   VARCHAR2 (2000);

   CURSOR c_indexes_to_rebuild
   IS
      SELECT   owner, index_name, tablespace_name
          FROM SYS.dba_indexes
         WHERE owner = 'INS' AND index_type = 'NORMAL'
      ORDER BY table_name;
BEGIN
   FOR indexes_to_rebuild IN c_indexes_to_rebuild
   LOOP
      BEGIN
         v_indx_rebuild_sql :=
               'alter index '
            || indexes_to_rebuild.owner
            || '.'
            || indexes_to_rebuild.index_name
            || ' rebuild nocompress noparallel tablespace '
            || indexes_to_rebuild.tablespace_name;

         EXECUTE IMMEDIATE v_indx_rebuild_sql;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;
   END LOOP;
END;
/


--
-- PRO_REP_SERVICE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_rep_service wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
4a7 233
rFNed9RotDyQWjxglfashMDB7KUwgzteLUgVfC/NbmRTY+Ea42vvXECPdo8YtCmVUJ/CxYny
dGwW6ZDOzoO9f9yp5YQgezoZTk7t2hcUiBvV5rTqY+IY7fnF5bvN6Kk4pqZY6HFe4Ye4UvLn
gqHywVr2Gi2vCF2H7QEE36KtEOboIQzR48eOeY1tWHbaGq4XCX02x2B6XvFH93EmQLxK9GLg
I1f7OyIXTelu4Ey/3bkdEG6WkWkrWhcto3FDlmxtlJzgWVhlQtD280A/CZ3Xzcpz2shNuXKV
6YyvFo9CfJWtH6cG07at0fAyUKC0VLh6rGZBFVCeSg4eC+e8sq9CIfKHMBwzRzJ9iPqg9ki6
I5MOMRojlMonnMGzKwiNOMmQ53YJqcM5T0/cWdFuRk4B06+pGBCTpMp4bZPD3b8sAYE6P7Sn
mL10fpg6TiWp62CABO390UxPF+dVMdIuCP7vNHU6XF6jAkFiDW5zL/N0BUkNF/vk04FV7Q9O
/Wuz2qrdhbVKjLXsxsJod17O2aJ7wABiroVeUupU+VUoOh0Ujg==
/


--
-- PRO_REVERSE_VOUCHER  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_reverse_voucher wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
1617 621
0Pb/m2wRjMVnHNev8Pik117ws+Qwg1VUDCCG3y+5k53g0ZkFqXAamdIJ75kW041L96FioUJ4
SWaF5XmmZO3IzaZz/mw+9Kg7gH6wB2Ed25+F7jTB/fKtjH/ynkCPgA2NXDoJK5gJvH4orqqn
lFkdpoVDGG8IkF+2UEa9d6AYVM8fLdA418O42w5jqBvTf2+9WfoEXhhCdgFaIkvzGyNO/Rjp
C3cvt392f6FNkpxvUZy9f2GgQL91rJOpvsl3qtXV9+g+SvejGAZUGckJS+O4vl3gh7sWaiLj
B3Zi5AvUL+p6WSSH16sbY9ogPb91VupZvsD987NAmAs3au6DaYKP2xi7dn6taF5UO+M0Lj+a
PtnuHNkyTFLRvgQzRBDXbIyTn7aV/rIfkquMcbHGZn2M/fVt9CInP93aPqW8e75zgata9wGX
8eyvxSDjjFlcyrTPB482Ikbfdai0pkTin1k2zRayczYH3IPmeIhBGomzAUli0cYfY6Y1VZXl
4WSQp4c2gDe/ZuDL08rDG/fjkfKZ8alpDEEzqr8EXaQiJG8ULaEorLyj+rsgDafUfb7Fn8Rq
sL6gsxGgh6r8kgRuwxqAuFTZwB+up4ZrMGIXwIHZXV1OHN3En32VgmJLBH2AAlC3Q3bWbfde
jMGhZsnf7VcQlUxHLp142j+QEoyi+9b2YZQ5TF+4I/pN78VxUeI6LUCBEfygK/2vM+pmYKw8
G3o20WbMpS9IZsCWiBg+zC1O/TJUX5CgSIIFNeKSo5SvtELYO3Z9P5bVVZBciZTjaqBtKEjm
oExE9DiXLFPmxSH9f9TDelk/PCzqtwtuiCLBcVfPIcC5Ie4Fc1BUV3Tgh2dol+Fe2JzrLW/5
rfhnTXwOuc0ypofzbXyAGTSHMFaef40ybf6ji+FkxPcJOVSam+hV3mqCXuHEk47Zkv64zqjM
DU/KdRtZ1CfYWdNMWy1zWhuCEWH8dIDZLTnWzrkDlzgRvA3zktqIfV25MPKiPNl7ZVGSzplR
xp+JAVDE+CSZVBdBDwQqW35l8scwW0IlW/M/FjHskvP5bnoywHwvKcx1PHxIUCPI3jZRCGhS
FYAXeiBxr063bq9O1KR6v3YVTjxjkupipS7Eq1pI97+0DbV0tKy8Owuzbd28KBkkAL883wsh
8ekiq5Co/J38RQ24YVqNLbHFUqJBQOrWZXlsvslBRpPWZi6Ne9VgkUxFnOMKZNIz7KruAJqc
OhnamJY7/hlzRTBhhUFBThl2ff2tlLk7NOiqRfaPZp56fyMYcRbnbhYhZIx379RGLEFBl1VI
4CwMgkqSBAVbBMEIPWf7V66B1yv+QiJ9bU0L2+VCtlphEs4QErTPXk+UIbu9+3kzPQ/Jlj0S
x/YKzJFg1m/pMQEndbAbQmgk4eXleTIagGnFnPNCaVi1Fa49iZ9dqiTY/nKlm1MiiWD4uUJO
xkVGPYYtIsSFIz2Bww4LNQoNIaN4l4YsAWOOP5adOiNN8ZcZ9RYZ4rFD6/lCmDc4mmESDbzW
CYBkK+C5g0XD0spwEWMha59XVj+S/cEP9Aw=
/


--
-- PRO_REVERSE_VOUCHER_SPECIFIC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_reverse_voucher_specific (
   p_vouch_cd     IN       VARCHAR2,
   p_trans_amt    IN       NUMBER,
   p_user         IN       VARCHAR2,
   p_narration    IN       VARCHAR2,
   p_fiscale_yr   IN       VARCHAR2,
   p_object_cd    IN       VARCHAR2,
   p_voucher_no   OUT      VARCHAR2,
   p_errm         OUT      VARCHAR2
)
IS
   v_voucher_office   acc_gl_trans_mst.office_cd%TYPE;
   v_voucher_no       VARCHAR2 (20);
   v_output           VARCHAR2 (200);
   v_cost_center      acc_gl_trans_mst.cost_center%TYPE;
   v_trans_id         acc_gl_trans_mst.trans_id%TYPE;
   v_ins_tp_cd        acc_gl_trans_mst.ins_tp_cd%TYPE;
   v_process_st       VARCHAR2 (200);
   v_vouch_dt         DATE;
   exp_rollback       EXCEPTION;
/******************************************************************************
   NAME:       pro_reverse_voucher_specific
   PURPOSE:

   REVISIONS:
   Ver        Date          Author              Description
   ---------  ----------    ---------------     ------------------------------------
   1.0        30-MAR-2015    Md Zahid Hasan     1. Created this procedure.


******************************************************************************/
BEGIN
   BEGIN                                                                --090
      v_voucher_office := NULL;

      BEGIN
         SELECT office_cd, cost_center, trans_id, ins_tp_cd,
                vouch_dt
           INTO v_voucher_office, v_cost_center, v_trans_id, v_ins_tp_cd,
                v_vouch_dt
           FROM acc_gl_trans_mst
          WHERE vouch_no = p_vouch_cd;
      EXCEPTION                    --Add this exception by Musha on 18.04.2017
         WHEN NO_DATA_FOUND
         THEN
            SELECT office_cd, cost_center, trans_id, ins_tp_cd,
                   vouch_dt
              INTO v_voucher_office, v_cost_center, v_trans_id, v_ins_tp_cd,
                   v_vouch_dt
              FROM acc_gl_trans_mst_hist
             WHERE vouch_no = p_vouch_cd;
      END;

      IF v_vouch_dt >= TO_DATE ('01/01/2019', 'dd/mm/rrrr')
      THEN
          --Add this condition by Musha on 19.06.2019 as per SLICL requirments
         pkg_gl_voucher.pro_voucher_no (p_office_cd       => v_voucher_office,
                                        p_fiscale_yr      => p_fiscale_yr,
                                        p_vouch_cd        => '05',
                                        p_user            => p_user,
                                        p_vouch_no        => v_voucher_no,
                                        p_process_st      => v_output
                                       );

         IF v_output IS NULL
         THEN
            p_voucher_no := v_voucher_no;

            BEGIN
               --insert voucher master
               INSERT INTO acc_gl_trans_mst
                           (office_cd, vouch_no, vouch_dt,
                            vouch_cd, status, bank_recon_st, cost_center,
                            object_cd, trans_id, narration, i_usr,
                            i_dt, ins_tp_cd, source_vouch_no
                           )
                    VALUES (v_voucher_office, p_voucher_no, TRUNC (SYSDATE),
                            '05', '1', '0', v_cost_center,
                            p_object_cd, v_trans_id, p_narration, p_user,
                            SYSDATE, v_ins_tp_cd, p_vouch_cd
                           );

               IF                                                        --444
                  SQL%NOTFOUND
               THEN
                  RAISE exp_rollback;
               END IF;                                                   --444
            END;

            --voucher detail entry
            FOR i IN (SELECT office_cd, sl_no, glac_sl_no,
                             DECODE (dr_cr, 'D', 'C', 'C', 'D') dr_cr,
                             trans_amt, chq_tp, chq_no, chq_dt
                        FROM acc_gl_trans_dtl
                       WHERE vouch_no = p_vouch_cd
                      UNION ALL                   --Add by Musha on 18.04.2017
                      SELECT office_cd, sl_no, glac_sl_no,
                             DECODE (dr_cr, 'D', 'C', 'C', 'D') dr_cr,
                             trans_amt, chq_tp, chq_no, chq_dt
                        FROM acc_gl_trans_dtl_hist
                       WHERE vouch_no = p_vouch_cd)
            LOOP                                                         --ZZZ
               INSERT INTO acc_gl_trans_dtl
                           (office_cd, vouch_no, sl_no,
                            glac_sl_no, dr_cr, trans_amt, chq_tp,
                            chq_no, chq_dt, i_usr, i_dt
                           )
                    VALUES (i.office_cd, p_voucher_no, i.sl_no,
                            i.glac_sl_no, i.dr_cr, i.trans_amt, i.chq_tp,
                            i.chq_no, i.chq_dt, p_user, SYSDATE
                           );

               IF                                                        --555
                  SQL%NOTFOUND
               THEN
                  RAISE exp_rollback;
                  EXIT;
               END IF;

               --Update the offic wise chart of accounts as per posted amount
               pkg_gl_voucher.pro_office_coa_update
                                                (p_office_cd       => i.office_cd,
                                                 p_glac_sl_no      => i.glac_sl_no,
                                                 p_trans_amt       => i.trans_amt,
                                                 p_dr_cr           => i.dr_cr,
                                                 p_fiscal_yr       => p_fiscale_yr,
                                                 p_user            => p_user,
                                                 p_process_st      => v_process_st
                                                );

               IF v_process_st IS NOT NULL
               THEN
                  RAISE exp_rollback;
                  EXIT;
               END IF;                                                   --555
            END LOOP;                                                    --ZZZ

            p_errm := 'Success';
         ELSE
            p_errm := v_output;
         END IF;
      ELSE
         p_errm := 'Success';
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         p_errm := 'Voucher Not found for reverse Entry Not Found.';
      WHEN VALUE_ERROR
      THEN
         p_errm := 'Voucher Not found for Reverse Entry Data Error.';
      WHEN TOO_MANY_ROWS
      THEN
         p_errm := 'Voucher For Reverse Entry multi value for single Var.';
      WHEN exp_rollback
      THEN
         ROLLBACK;
         p_errm := 'Reverse entry not performed';
      WHEN OTHERS
      THEN
         p_errm := 'Collection Voucher For Reverse Entry others error';
   END;
END pro_reverse_voucher_specific;
/


--
-- PRO_RE_INSUR_LAPSE_STATEMENT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_re_insur_lapse_statement wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
ab3 4a8
abzBgwukit6Bzlioa0+KTr1cpsQwg/ArDCAFVy8ZA6qV0hSZPaufwlQO18n77JF2UdM+yIkF
buN+5eFENN73xmtnqs8HGticAZh6tGY618aI/21jK4kD8sfO+dLXAD25HoZOHrcFVaqq4lVO
2XMMc6pzzuFOiKaJ/1RROwvbwG6evVLOQm/7ccJzMyFnU5d9yb4dfvToxKIPIcpezJfw9BLl
woRQVpC9hje6gFxsYtJA2BgqsXydWmRm5sflIRNn2Kc+NJ1AAW3HiVogDjKsDVMKk3g8z+8a
gJoWshVD8o0vH7hHsnKtDXAybD7/uV94ewIilgOIdem+81bWgRW6Fon1CQGCBHQDUBXP5/4E
NsPRfUwOTUeo30nURfHjiwZbfbiRwlndMMZ2OOPlUelHn7p4o5QRkFIZ/emvgaR2WpJ5oCi1
xS4UQ0tB5omjLZ4g6HYgi2NSra8sanlcFehV+TDZfxyxhGruq7JCnNJX45HXMgYZe892udRq
pIF1wnikqEPfgLBiw97tDBZ7Fr5ZCYkx9fYHXV3/lBgIhbwpcrApvQ3g2f4/qZGUSt2d3jAL
JIdRbEKHuPT/201zH6fvNFxILDzOKbfbbV5cji4vbOmvVPHo7yiPVMf498etobNy/l52sHd9
8hUU1h9qkqmhlzB8vpgVfpLKdvrAjZFnBIRNoMTUmcsDytY96SMYjwZWr5pJQ5Zylw9BibUe
NPtJXQGNwcbfxvlCmU7X4Iy9Q+JdoxZA1QqO+b4cnOXKfW2jhFCOoFTgwQpK6loKMw3ETH4e
6VbnebOGIn7+TXW0LtTUnqslbwqKj0cvtUQ6Nk6HLtyEpYybC+lAY/j+ISeujnh5/b5ITpcZ
wDFM757HeYbewVZ2SrySiHSSZ33hgM+0HnRqwEpVDmIegJH4AhzmA9fmASRAINrXisRR3gyb
GAs0SiAABZjHaLsjhyLo5h0pupBWnKFJ2rkRsEI5eFB6V6PRUof5aPCga9aMxQsedioVMVDv
b8vaMcIPTnKLRNJBZc4R3p1//eKr56Pwr3bJ+evHoggv7rL5LraG7aa7h7oQBk8kqPtMtT7k
9qX5nUyyQ8RVsQcsSyYsHknPlD85TpKlaSSqQlXNPxQItGilPgkPO6PtNBjktkNrJv9RzdOO
xRrXPtdmvWVxcwiZDT0PKw==
/


--
-- PRO_RE_INSUR_POLICY_INFO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_re_insur_policy_info (
   V_DATE          DATE,
   V_SUCCESS   OUT VARCHAR2
)
IS
   V_COUNT    NUMBER (2);
   V_RECORD   NUMBER (10) := 0;
BEGIN
   FOR I_LOOP
   IN (SELECT   U.PGID,
                S.COMM_DATE,
                S.SERVICING_OFF,
                DECODE (T.POLICY_TP_CD,
                        '03',
                        (S.SUM_ASSURED + NVL (B.OTH_SUM_ASSURED, 0)) * 2,
                        S.SUM_ASSURED + NVL (B.OTH_SUM_ASSURED, 0))
                   TOT_SUM_ASSURED
         FROM   INS_UNACCPTED_POLICY U,
                INS_P_SUMMERY S,
                (  SELECT   PGID, SUM (SUM_ASSURED) OTH_SUM_ASSURED
                     FROM   INS_P_O_POLICY
                    WHERE   PARTY_CD = '03'
                            AND COMPANY_CD = (SELECT   COMPANY_CD
                                                FROM   INS_INSURANCE_COMPANY
                                               WHERE   OWN_STATUS = '1')
                 GROUP BY   PGID) B,
                INS_PRODUCT T
        WHERE       U.PGID = S.PGID
                AND U.PGID = B.PGID(+)
                AND S.PRODUCT_CD = T.PRODUCT_CD
                AND NVL (S.RE_INS_STATUS, '0') = '0'
                AND DECODE (T.POLICY_TP_CD,
                            '03',
                            (S.SUM_ASSURED + NVL (B.OTH_SUM_ASSURED, 0)) * 2,
                            S.SUM_ASSURED + NVL (B.OTH_SUM_ASSURED, 0)) >
                      (SELECT   MAX_INSUR_AMOUNT
                         FROM   INS_RE_INSUR_SETUP
                        WHERE   S.COMM_DATE BETWEEN VALID_DT_FR
                                                AND  NVL (VALID_DT_TO,
                                                          TRUNC (SYSDATE))
                                AND STATUS = '1')
                AND NOT EXISTS (SELECT   1
                                  FROM   INS_RE_INSUR_POLICY_INFO
                                 WHERE   PGID = U.PGID))
   LOOP
      SELECT   COUNT (1)
        INTO   V_COUNT
        FROM   INS_RE_INSUR_POLICY_INFO
       WHERE   PGID = I_LOOP.PGID;

      IF V_COUNT = 0
      THEN
         INSERT INTO INS_RE_INSUR_POLICY_INFO (PGID,
                                               POLICY_NO,
                                               COMM_DATE,
                                               SERVICING_OFF,
                                               TOT_SUM_ASSURED,
                                               STATUS,
                                               I_DT)
           VALUES   (I_LOOP.PGID,
                     FUN_INS_PGID_TO_POLICY_NO (I_LOOP.PGID),
                     I_LOOP.COMM_DATE,
                     I_LOOP.SERVICING_OFF,
                     I_LOOP.TOT_SUM_ASSURED,
                     '0',
                     V_DATE);

         V_RECORD := V_RECORD + 1;
      END IF;
   END LOOP;

   IF V_RECORD != 0
   THEN
      V_SUCCESS := V_RECORD || ' Re-Insurable Policy Generated Succesfully';
   ELSE
      V_SUCCESS := NULL;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      V_SUCCESS := NULL;
END;
/


--
-- PRO_RE_INSUR_STATEMENT_ADVICE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_re_insur_statement_advice wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
907 3cd
+65Pmcz1i9cFDx1ARPAv/K+WdvYwg5Aruq4FfI4Zxz+VMV62YoSpM2XlZkPADvfT2ptj3beV
8huoMnyUdUbb0E+kwQZGoPVODAv+2k9yQ9pJPogufI107v4zzHnVMrWl0sJcrnLEcj1k/O6T
VRlzvg/qjxKmSwlxollNIdNNxIj7mEcioKYU3vj+Icpe8QOLU1vYZqdW75+DqVNZ011o+YBj
BKw03dlTRBvD0/v/ZsLj9zeqq0dirDjmk3s3V63Lj377xqTcbPN/+56NY6RIuYHV1NlfBNJE
AcgmbiUloo/HR3/zynUU9BlVuLZIptELxebjSpfZVjvvbocI9717jKLzo2reQWx4Kjddu8t0
wUjiMQh0Uz5g9lVTY3PfvNuApPoUxkSMAkrwCgmxURbIVWeOPFt7xU7rYEBE/OHbXhTqDHfC
q0Kymc2D/jGghvOhE1beVHEkikRKJft/GNWiZXcmrzNFaMaApaMFWqCfwVuTlInjbOrN1/mi
92iRW7i8tEygtVSwmvmoUZXKgjctIWZIBKuIBaebrqxKV++sYe2L7V5a7+eAzQ0bNDee7OyD
6CaZCv32uGKTQ48fsyrOatx05lDwkkTc1Ll0OFv4PVUTTPVOhK43i2lW99K9PTOFRu2lqWkH
9o6AzkgcihM5ucoESjekOUpoOXkP0AVMYJ9v0hjna5TP50LDwGjv+XD1NBjA9HbkUjgVYX2G
paRiijNkQFP6ETvL+vqOPO0jyE2L19L7nNd1Belrghsji+1qlKzcRiP6Jf9D3A/x6RSIyZCM
qQgEkBj/f5JLu91C2kFikhdVJ045UYYleQm7R4zuS4syuyHOci7+Vzvrnd1MBsR4dfsKvMmL
mYYzxuism1LHnT8C2fxrg/y78NqPlh4ygdJOAQNCkDH2x0peGqKLQsGcUvNktlYCK/QXC0ln
DYRfu05H8RFAOrCd7ZCZJQ==
/


--
-- PRO_RE_INSUR_STATUS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_re_insur_status wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
93c 3f1
tPHGtxBiOX0OVKEDXAZL0916QmYwgwIrLiAGfC9Vxz+VcSup7DvC7WLjjWjboPfT2g2kFkmZ
zCvloJnj0IS1c4PcbrSho1bzrHOL8MFCyVmvEV+38ThXQcuboLe7+E6BFHKc10MjQFKmpgJW
QSU2NPfTgVRmbyTvMy8rTXWLvlnI3Q9RMFgM276bdVMWCYvQdT0ENelbgAyzr3xWfPM+bNND
FaXSf02Ow3n2MWc5QgkVbB9aieSCX+w+8u7UIHzfwnDTGnHvnBAald3OqBgbA55jicUvk9lT
jakMgT6IZn9h2f5iiphUHwToxw07VgqhI+Yn04wgSjGSGZNI2IyDoLCQ3wFTg6xdVImVEEqH
HpoWsGzzQJF70OwvVOxpmFdZ7gt7Nu0DiMq4fzs67z/y9Bveh3ePV2otGyfpmYMhjqCMEgNh
cCG1iqZWEYFfWNwnRWbfzIt8kq1l94+xBB+j2Q77tsrDH+HxmZRTgWx35lCLAi6UMlaMge4j
rM6lu1Mxqk27xKTIakRvBx75OzPg9ERjZbGofEUGxPS3Hgi7+J/HMa8rA/mzX/xCrCjNUrpC
0gBp6cZIXk6cdIKn6tPIkW99nPXuSb+XjdMVFHmPAyrG6aeIX1zi7AcutKHnsza55EizJP9r
6cF6XFWXrMneaNpaAFmuE7HXYqWY/crxZzd1fMwWpIwHs8rbS9qt83Or263xRwACxTF7JoqX
6zsVL+RRnq8787G/jPHqijhk9WrcYkV2SnU/AXvKCia6BEyy2HH/lAjjlZ4K9bpRVi6RZl2s
iF+XB1KCSRF9tFmrDX7lvmKlv2RkVYHgeddz20AZ6Xx5mTSrV4bOpzVdiE1wJQKQfZ+9zlHM
dHlyCidh+DhIKdc/mNZOucAAFfiIM+UBdeG/vwje61MpGnmkjQdhv252/gAPh/hTQ9t5Zmn+
84BFpkDRmik07nVc47maRNa4GydU/jyCfCDCOZ9kGx31SRc3GfzEteRqIug=
/


--
-- PRO_RE_PRINT_STATUS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_re_print_status (
   p_report_type           IN       CHAR,
   p_gid                   IN       VARCHAR2,
   p_p_rec_id              IN       NUMBER,
   p_sl_no                 IN       NUMBER,
   p_req_id                OUT      NUMBER,
   p_req_app_st            OUT      CHAR,
   p_direct_print_st       OUT      CHAR,
   p_reprint_app_need_st   OUT      CHAR,
   p_error                 OUT      VARCHAR2
)
IS
   v_error                       VARCHAR2 (200);
   v_direct_print_st_error       EXCEPTION;
   v_reprint_app_need_st_error   EXCEPTION;
   v_req_app_st_error            EXCEPTION;
BEGIN
   BEGIN
      --Checking the configuration. is it available or not?
      SELECT status
        INTO p_direct_print_st
        FROM ins_system_config
       WHERE config_id = 22;            --Here 22 means "Direct PR Print" flag
   EXCEPTION
      WHEN OTHERS
      THEN
         RAISE v_direct_print_st_error;
   END;

   BEGIN
      --Checking the configuration. is it available or not?
      SELECT status
        INTO p_reprint_app_need_st
        FROM ins_system_config
       WHERE config_id = 23;        --Here 23 means "PR Re-Print Aproval" flag
   EXCEPTION
      WHEN OTHERS
      THEN
         RAISE v_reprint_app_need_st_error;
   END;

   IF p_reprint_app_need_st = '1'
   THEN
      BEGIN
         SELECT req_id
           INTO p_req_id
           FROM acc_pr_reprint_req
          WHERE report_type = p_report_type
            AND pgid = p_gid
            AND receive_id = p_p_rec_id
            AND ((p_report_type = 1 AND slno = p_sl_no) OR (1 = 1))
            AND req_status = '2';

         p_req_app_st := '1';
      EXCEPTION
         WHEN OTHERS
         THEN
            p_req_app_st := '0';
            RAISE v_req_app_st_error;
      END;
   ELSE
      p_req_app_st := '1';
   END IF;
EXCEPTION
   WHEN v_direct_print_st_error
   THEN
      p_error := 'System configuration missing for 22=Direct PR Print!';
   WHEN v_reprint_app_need_st_error
   THEN
      p_error := 'System configuration missing for 23=PR Re-Print Aproval!';
   WHEN v_req_app_st_error
   THEN
      p_error :=
         'PR Print Requisition is not found or already approved or not approved!If you want to print it again please apply for REPRINT';
END;
/


--
-- PRO_RISK_DATE_VALIDATE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_risk_date_validate wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
5ea 32b
XpBPquiwdt7AJxCg2EEZ4DTAQkswgwLDLtCDfC/NrZ3g0VxnozUF74nWsX9weUteBaG/riug
osXFyJeZAM3QZJAEWm5VO5b0ACAiGc7wgq9/ocA1j9AmDTHt5DwFm8MpnUM/wT9wjvtn6AOU
Lo/CFpj5Wnl5rBdxUfUGZ089XmC5o0k1Q9bcw4+JyjL7yl+CY2Pmy2rH0FbI3fYUvCoOKCv9
1uevlUMRL++rgMN7cGu2SoE5ACdH63fqQ/JYxDxZyC5wSDv+kelYalrx09jd4HBGScvJxImC
mRyAQVEGaqI7eT7O6CmcA99vl6d2uAtzvhszObjrZ1TOnxIz42wvGh3FN1JEVq7rIicupR2h
4YV6ntkftjV8a0SzSgudkkvzkJvNMt6JjuM4UQWmfSJs06IHRnVxXQ6IxHGnrevwWVbvO1O5
o4Bis1IHhF6TjONxo7vO9mgrrpykABAPqdOtanzxrpuXZzu9bUiXUxA5W3Nw3Rj1IV0Qv2pf
r8V+ffNox7GvSfyJd7P8fvOe2m+fpcpSTkDZhi0i+z7XP+qIaZ2X7xpD2b3xkjrPTUqw3snl
arnPpnG7/j1O3uos/XKhLG/sFy/+wry8rO2yeO+lb40wmJAcy14L6nrLpIa/8s5Xxkuv7RTH
u/LYnn3CMffD8RaKVf3Xo1iXuc8DpTEExpr7Bt9f0DA9zP2XLuMsDv8AgRxjWOpwVAymOiVy
hBx/+mhNYM3DfI/fN8i12V1qNn6aQpz0fw0tsr8upyQJbZq0R2Hh2nCHQJ989TcJgzQLT/n7
YYcQ5Q==
/


--
-- PRO_SCD_DASHBOARD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_scd_dashboard
IS
BEGIN
   pkg_dashboard.pro_coll_deposit_dashboard (TRUNC (SYSDATE), 'INS');
   /*pro_adv_adjust_upd (NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL);*/
END;
/


--
-- PRO_SERVICE_ID  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_service_id wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
408 27c
9NxW1A+KxcBDckRrRBeNFPURsmgwgxAJLtCDfC/NrZ3g0Vxn4AqU7TdXV/oaHt8tA2FqwkmZ
N8z3Ft4dw+WgJLyfIp8LtDwHohztQk4Z/R+sxnWJ4e4XTCm3Jqq7eGC7xHyepg5Qei7eX3vc
j4FW9OMs43Xco6LyAVlld3IGD+f04ClaTe/uY0XpjtwCiaPl/aJ8y031TWNDQlb3k2anKKZ8
7Bma0DhhpivJMTTWxVF8gOh6ALuEgtfOCvUri/MYQi/uH5d2Z+BALeEcEA0k11pKNR0aWVIP
XrquRHKo9ONI2qsppdKp3+5KhAAf55nn+DxLeTYV8e4EhX3ESDyYSeTOpwrL7kOVBaftQBCB
eYROj3scE+kwZVsDrYTWM16fVk8E4nfxkUsKCixL7dgoOAzW1V8MAmdOdrYnvQfbeBX4NHGD
eZ3+fMmZZIaDl0zv3Kf3w+FghAy2zno3KVOEQhQ7kJ+PgYLHvAGImAoN1goEmelCA1KYVjlf
HkYWUV6HwttcjTs57VfQhROIn0GpG4LeP0xHUgupXBe0XJyGPD/2BOPSnIs9hD9GTr8dmHPe
AyIEzgs8KsOYE7nuwBIIaBiUm7XlNSLJFqJI1wOR+e6Wi5XkSQ==
/


--
-- PRO_SETTELMENT_LATE_FEE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_settelment_late_fee wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
1437 629
WqvFVTCokRC8pRUfcpr5wXPQFEswgw1ULscF3y/NWJ3glohtKoaX8htb2pt0Lmd/F1qsRDXG
ezgjaa4pxqD5tetE+/Gm52lht+Ah8ec0TNG/mtGnEa3VFimtAp21Ogz5EiM/IhD4htLBA+Qz
BU6h+T97rxv7qSthD/Lha8zfi3IL/20Hbrtl78gsTvgY8mbg4RQfd6lOYTuXZh9s9nE3L1PX
DGa63PaT7hp6aSd82HhRLg+aXhwC2ewqzFcpJmDBDfY6iFMXDDZKA3mW4Uhuj7z9XKlF3J9m
Gw5QydGht8JewOly2tQ9cuTOSzV5dFXPiVGNRDWan/IAKZlSAZY0tsan6PLwK0CMjJRiNqXV
6dZ0qq1iETpaY7wJ3MrmHFcKOwyvwtt/WA+U2OWR6o07okTjWDyNFl3pqA3glW7LzlPkgTdm
hIFVOCC0Vx7//VEu5pZDUbsvwFIQ7mRkO5Mopk/+yxJMfWBblZ/vxWg/RVo0faX7/AskmgLd
ONq5M8i2UVPFHEWoMLcuiDSaEFmcozQm0t/MttDisjME+jkTpKwq3yQGAL2Ba6iK9+qAMXz0
WcApJq0gqJRmZOXs3+DKCzGx0ZsjEzcBhBRq1hGvolRm42DHMTVJNjZ5+XxmW3KEcFbIrDxi
NOeTwa7Ca67m/FpyWlyaYFkx2Di5KZzCzIUpKFm98m6i/92eyTk3BFnPPv2velGR0YjCuI5J
sh0XB/FmmLziPiTmnDEqOehfPSlovil6kab/3kvcVuBMJ9Fy0CfHcqpfj4N+DkIWsXYT/hL+
s7C6LHw7XFhY9sW5rof3MpBXyZGVVNpJF0KmkDybQRhkid9LUnfR/JGn3Ze4ATurwhuNFaRx
cqYIZ/1bHEcVE+1km1B4woUKvcInFkouDo20mojLkcEaB7Kz5Rxge4VHnBYDHs1NVvzX6hai
bxVFFZWLBMMHQZWljPaM/FHaJ5F95hpbO3t4h/d1ajxvFSFiKF7y3fJEh0tjQtjDrEbuiH5z
Ys3AieeMee98Y1GfTS6xg8cfw7/RWUI16BVYFBDpFMYI6FkyFR/7+eFGb1Q7iQOK/JyvKj+f
U7UBpT7W0IjP3R7jp4/SY0xsoAoy95B4CSAQhRslwY2kLJrXJFM2Pwcg7ebn+6zdoPqWmcp0
WbNPlLBUhheUFAqyQiyy42DHPAr/TiMHzJ+M/R9tTpGcNHGPmwIoKjHO1oT80Fr57Qku7DTe
ACF56l7njsNL44bDzOeUCXWY/xNzFjCt/0Qnpc9jkm2hXP0+hi3hQphmeDTVKMLU59YqAdP4
k1+bjT3i6I+BU4eJLZhM8lOkZEl/ivu0XsUt3SJPe/0HPtwe31YjfiBVAER1PIvLwFRSGSsP
OsIYEHnZe/LYeDzNBjt3P70EXpetVMx8taXb4K+bfhXRD9a6czPNtSlycaq8DX/aHw0q6dyE
n0ocNelrK0f+c60qJqqMOxKQ/1gRyxh8Tuy85dh0kHLWSECMXzj0IpSgXGAEdsBL+0D4BCyu
uGgA1zyac6PM/x4F271Rx5w7vgzWZOb8HrC1psuF6aU=
/


--
-- PRO_SHORT_PREMIUM  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_short_premium (
   p_pgid                IN       VARCHAR2,
   p_short_premium       OUT      NUMBER,
   p_par_instl_no_from   OUT      NUMBER,
   p_par_instl_no_to     OUT      NUMBER,
   p_par_due_dt_to       OUT      DATE,
   p_par_due_dt_from     OUT      DATE
)
IS
   /*****************************************************************************************
   NAME:       fun_short_premium
   PURPOSE:    this function will be used for calculate the short premium for adjusted premium.
     Ver        Date        Author                  Description
   ---------  ----------  ---------------         ------------------------------------
    1.0        27/03/2018 1. Md. Sayadur Rahaman    Created this function.
   ******************************************************************************************/
   v_short_premium       NUMBER (10, 2) := 0;
   v_par_collection      NUMBER (10, 2) := 0;
   v_suspense_amt        NUMBER (10, 2) := 0;
   v_proposal_coll_amt   NUMBER (10, 2) := 0;
   v_prem_coll_amt       NUMBER (10, 2) := 0;
   v_proposal_amt        NUMBER (10, 2) := 0;
   v_alt_amt             NUMBER (10, 2) := 0;
   v_req_prem            NUMBER (10, 2) := 0;
   v_sys_config_st       NUMBER;
   v_upd_message         VARCHAR2 (200);
BEGIN
   BEGIN
      pro_get_sys_config_st (p_pgid               => p_pgid,
                             p_config_id          => 21,
                             p_sys_config_st      => v_sys_config_st,
                             p_upd_message        => v_upd_message
                            );

      IF v_sys_config_st = 1
      THEN
         SELECT   SUM (ROUND (s.installment_premium))
                - SUM (ROUND (r.paid_amount)),
                MIN (r.installment_no), MIN (r.next_due_dt),
                MAX (r.installment_no), MAX (r.next_due_dt),
                NVL (MAX (s.suspense_amt), 0),
                MAX (s.installment_premium * s.last_paid_inst_no) req_prem
           INTO v_short_premium,
                p_par_instl_no_from, p_par_due_dt_from,
                p_par_instl_no_to, p_par_due_dt_to,
                v_suspense_amt,
                v_req_prem
           FROM ins_prem_acc_receivable r, ins_p_summery s
          WHERE pay_status = '1'
            AND r.pgid = s.pgid
            --AND r.paid_amount <> s.installment_premium
            AND s.pgid = p_pgid;

         SELECT NVL (SUM (r.coll_amount), 0)
           INTO v_proposal_coll_amt
           FROM acc_advance_receivables r
          WHERE r.pgid = p_pgid AND r.status = '1' AND r.rec_status = '1';

         SELECT SUM (r.coll_amount - NVL ((r.late_fee - r.latefee_waiver), 0))
           INTO v_prem_coll_amt
           FROM acc_receivables r
          WHERE r.pgid = p_pgid AND r.status = '1' AND r.rec_status = '1';

         SELECT DECODE (p.installment_no, 1, 0, p.installment_premium)
           INTO v_proposal_amt
           FROM ins_prem_acc_receivable p
          WHERE p.pgid = p_pgid
            AND p.installment_no =
                   (SELECT MIN (installment_no)
                      FROM ins_prem_acc_receivable
                     WHERE pgid = p.pgid
                       AND (   fp_receive_id IS NOT NULL
                            OR proposer_pk IS NOT NULL
                           )
                       AND pay_status = '1');

         SELECT SUM (pr.coll_amount)
           INTO v_par_collection
           FROM acc_partial_receivables pr
          WHERE pr.pgid = p_pgid AND pr.rec_status = '1';

         --AND pr.status = '1'
         SELECT SUM ((CASE
                         WHEN pr.coll_amount >= pr.par_prem_due_amt
                            THEN pr.par_prem_due_amt
                         ELSE pr.coll_amount
                      END
                     )
                    )
           INTO v_alt_amt
           FROM acc_alt_receivables pr
          WHERE pr.pgid = p_pgid AND pr.rec_status = '1';

         /*AND TRUNC (pr.i_dt) >
                NVL ((SELECT TRUNC (pr.i_dt)
                        FROM clm_claim_appl ca
                       WHERE ca.pgid = pr.pgid
                         AND NVL (ca.alt_due_amount, 0) > 0
                         AND ca.short_prem_instl_no_from IS NOT NULL),
                     TRUNC (pr.i_dt) - 1
                    )*/

         /*p_short_premium :=
                   v_short_premium - NVL (v_par_collection, 0)
                   - v_suspense_amt;*/
         p_short_premium :=
              v_req_prem
            - v_prem_coll_amt
            - v_proposal_coll_amt
            - v_proposal_amt
            - NVL (v_par_collection, 0)
            - NVL (v_alt_amt, 0)
            - NVL (v_suspense_amt, 0);

         IF p_short_premium <= 0
         THEN
            p_short_premium := 0;
            p_par_instl_no_from := NULL;
            p_par_instl_no_to := NULL;
            p_par_due_dt_to := NULL;
            p_par_due_dt_from := NULL;
         END IF;
      ELSE
         p_short_premium := 0;
         p_par_instl_no_from := NULL;
         p_par_instl_no_to := NULL;
         p_par_due_dt_to := NULL;
         p_par_due_dt_from := NULL;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_short_premium := 0;
         p_par_instl_no_from := NULL;
         p_par_instl_no_to := NULL;
         p_par_due_dt_to := NULL;
         p_par_due_dt_from := NULL;
   END;
END pro_short_premium;
/


--
-- PRO_SHORT_PREMIUM11  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_short_premium11 (
   p_pgid                IN       VARCHAR2,
   p_short_premium       OUT      NUMBER,
   p_par_instl_no_from   OUT      NUMBER,
   p_par_instl_no_to     OUT      NUMBER,
   p_par_due_dt_to       OUT      DATE,
   p_par_due_dt_from     OUT      DATE
)
IS
/*****************************************************************************************
NAME:       fun_short_premium
PURPOSE:    this function will be used for calculate the short premium for adjusted premium.
  Ver        Date        Author                  Description
---------  ----------  ---------------         ------------------------------------
 1.0        27/03/2018 1. Md. Sayadur Rahaman    Created this function.
******************************************************************************************/
   v_short_premium    NUMBER (10, 2) := 0;
   v_par_collection   NUMBER (10, 2) := 0;
   v_suspense_amt     NUMBER (10, 2) := 0;
   v_prem_coll_amt    NUMBER (10, 2) := 0;
   v_proposal_amt     NUMBER (10, 2) := 0;
   v_req_prem         NUMBER (10, 2) := 0;
   v_sys_config_st    NUMBER;
   v_upd_message      VARCHAR2 (200);
BEGIN
   BEGIN
      pro_get_sys_config_st (p_pgid               => p_pgid,
                             p_config_id          => 21,
                             p_sys_config_st      => v_sys_config_st,
                             p_upd_message        => v_upd_message
                            );

      IF v_sys_config_st = 1
      THEN
         SELECT   SUM (ROUND (s.installment_premium))
                - SUM (ROUND (r.paid_amount)),
                MIN (r.installment_no), MIN (r.next_due_dt),
                MAX (r.installment_no), MAX (r.next_due_dt),
                NVL (MAX (s.suspense_amt), 0),
                MAX (s.installment_premium * s.last_paid_inst_no) req_prem
           INTO v_short_premium,
                p_par_instl_no_from, p_par_due_dt_from,
                p_par_instl_no_to, p_par_due_dt_to,
                v_suspense_amt,
                v_req_prem
           FROM ins_prem_acc_receivable r, ins_p_summery s
          WHERE pay_status = '1'
            AND r.pgid = s.pgid
            AND r.paid_amount <> s.installment_premium
            AND s.pgid = p_pgid;

         SELECT SUM (r.coll_amount - NVL ((r.late_fee - r.latefee_waiver), 0))
           INTO v_prem_coll_amt
           FROM acc_receivables r
          WHERE r.pgid = p_pgid AND r.status = '1' AND r.rec_status = '1';

         SELECT DECODE (p.installment_no, 1, 0, p.installment_premium)
           INTO v_proposal_amt
           FROM ins_prem_acc_receivable p
          WHERE p.pgid = p_pgid
            AND p.installment_no =
                   (SELECT MIN (installment_no)
                      FROM ins_prem_acc_receivable
                     WHERE pgid = p.pgid
                       AND (   p.fp_receive_id IS NOT NULL
                            OR p.proposer_pk IS NOT NULL
                           )
                       AND pay_status = '1');

         SELECT SUM (pr.coll_amount)
           INTO v_par_collection
           FROM acc_partial_receivables pr
          WHERE pr.pgid = p_pgid AND pr.rec_status = '1' AND pr.status = '1'
                                                                            /*AND TRUNC (pr.i_dt) >
                                                                                   NVL ((SELECT TRUNC (pr.i_dt)
                                                                                           FROM clm_claim_appl ca
                                                                                          WHERE ca.pgid = pr.pgid
                                                                                            AND NVL (ca.alt_due_amount, 0) > 0
                                                                                            AND ca.short_prem_instl_no_from IS NOT NULL),
                                                                                        TRUNC (pr.i_dt) - 1
                                                                                       )*/
         ;

         /*p_short_premium :=
                   v_short_premium - NVL (v_par_collection, 0)
                   - v_suspense_amt;*/
         p_short_premium :=
              v_req_prem
            - v_prem_coll_amt
            - NVL (v_par_collection, 0)
            - NVL (v_suspense_amt, 0);

         IF p_short_premium < 0
         THEN
            v_short_premium := 0;
            p_par_instl_no_from := NULL;
            p_par_instl_no_to := NULL;
            p_par_due_dt_to := NULL;
            p_par_due_dt_from := NULL;
         END IF;
      ELSE
         v_short_premium := 0;
         p_par_instl_no_from := NULL;
         p_par_instl_no_to := NULL;
         p_par_due_dt_to := NULL;
         p_par_due_dt_from := NULL;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_short_premium := 0;
         p_par_instl_no_from := NULL;
         p_par_instl_no_to := NULL;
         p_par_due_dt_to := NULL;
         p_par_due_dt_from := NULL;
   END;
END pro_short_premium11;
/


--
-- PRO_SINGLE_DEMAND_NOTC_PREP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_single_demand_notc_prep (
   P_POLICY_NO   IN     INS_P_PROPOSAL.POLICY_NO%TYPE,
   P_USR         IN     VARCHAR2,
   P_DT          IN     DATE,
   P_ERRM           OUT VARCHAR2,
   P_RECORD         OUT NUMBER
)
IS
   V_YRLY_NO_INST               INS_PAY_MODE.YRLY_NO_INST%TYPE;



   CURSOR DEMAND_NOTICE
   IS
      SELECT   IPS.PGID,
               FUN_INS_PGID_TO_POLICY_NO (IPS.PGID) POLICY_NO,
               IPS.INSTALLMENT_PREMIUM,
               IPS.POLICY_STATUS,
               (TO_CHAR (IPS.COMM_DATE, 'DD') || '-'
                || TO_CHAR (
                      ADD_MONTHS (IPS.LAST_PAID_DATE,
                                  DECODE (IPM.YRLY_NO_INST,
                                          1,
                                          12,
                                          2,
                                          6,
                                          4,
                                          3,
                                          12,
                                          1)),
                      'MON-RRRR'
                   ))
                  NEXT_DUE_DATE,
               IPM.YRLY_NO_INST,
               IPS.POLICY_INSTALLMENT,
               IPS.COMM_DATE,
               IPS.LAST_PAID_DATE,
               IPS.SUM_ASSURED,
               IPS.PRODUCT_CD,
               IPS.TERM,
               FUN_INS_PAY_MODE (IPS.PAY_MODE_CD) PAY_MODE,
               FUN_INS_OPTION (IPS.OPTION_CD) OPTION_NM,
               F_EMP_ID (IPS.DO_GID) DO_ID,
               F_EMP_ID (IPS.DM_GID) DM_ID,
               IPS.BRANCH_OFF,
               IPS.SALES_OFF,
               IPS.ZONAL_OFF,
               IPS.REGIONAL_OFF,
               IPS.AGENT_ID,
               IPS.OFFICE_CD,
               IPS.LAST_PAID_INST_NO
        FROM   INS_P_SUMMERY IPS, INS_POLICY_STATUS_SETUP J, INS_PAY_MODE IPM
       WHERE       IPS.PGID = FUN_INS_POLICY_NO_TO_PGID (P_POLICY_NO)
               AND IPS.POLICY_INSTALLMENT > IPS.LAST_PAID_INST_NO
               AND IPS.POLICY_STATUS = J.STATUS_CD
               AND IPS.PRODUCT_CD = J.PRODUCT_CD
               AND J.PREPARE_DEMAND_NOTICE = '1'
               AND IPS.PAY_MODE_CD = IPM.PAY_MODE_CD;

   V_DEMAND_NOTICE              DEMAND_NOTICE%ROWTYPE;
   V_NEXT_DUE_DATE              DATE;
   V_COMM_DATE                  DATE;
   V_TOTAL_POLICY_INSTALLMENT   NUMBER (3);

   V_NEXT_DUE_INST_NO           NUMBER (3);
   V_COUNT                      NUMBER (10) := 0;
BEGIN
   UPDATE   INS_P_SUMMERY
      SET   NEXT_DUE_INST_NO = (LAST_PAID_INST_NO + 1),
            NEXT_DUE_DATE =
               TO_CHAR (COMM_DATE, 'dd')
               || TO_CHAR (
                     ADD_MONTHS (
                        LAST_PAID_DATE,
                        DECODE (PAY_MODE_CD, '01', 12, '02', 6, '03', 3, 1)
                     ),
                     '-MON-RRRR'
                  )
    WHERE   PGID = FUN_INS_POLICY_NO_TO_PGID (P_POLICY_NO);


   P_RECORD := 0;

   OPEN DEMAND_NOTICE;

   LOOP
      FETCH DEMAND_NOTICE INTO   V_DEMAND_NOTICE;

      EXIT WHEN DEMAND_NOTICE%NOTFOUND;
      V_NEXT_DUE_DATE := V_DEMAND_NOTICE.NEXT_DUE_DATE;
      V_NEXT_DUE_INST_NO := V_DEMAND_NOTICE.LAST_PAID_INST_NO + 1;
      V_COMM_DATE := V_DEMAND_NOTICE.COMM_DATE;
      V_TOTAL_POLICY_INSTALLMENT := V_DEMAND_NOTICE.POLICY_INSTALLMENT;

      WHILE V_NEXT_DUE_INST_NO <= V_TOTAL_POLICY_INSTALLMENT
            AND TRUNC (V_NEXT_DUE_DATE) <= TRUNC (SYSDATE) + 731
      LOOP
         BEGIN
            SELECT   COUNT (1)
              INTO   V_COUNT
              FROM   INS_PREM_ACC_RECEIVABLE
             WHERE   PGID = V_DEMAND_NOTICE.PGID
                     AND INSTALLMENT_NO = V_NEXT_DUE_INST_NO;

            BEGIN
               IF V_COUNT = 0
               THEN
                  INSERT INTO INS_PREM_ACC_RECEIVABLE (
                                                          PGID,
                                                          INSTALLMENT_PREMIUM,
                                                          PAID_AMOUNT,
                                                          BALANCE,
                                                          PAY_STATUS,
                                                          I_USR,
                                                          I_DT,
                                                          PREM_YEAR_STATUS,
                                                          SL_NO,
                                                          POLICY_STATUS,
                                                          INSTALLMENT_NO,
                                                          NEXT_DUE_DT,
                                                          TOTAL_INSTALLMENT,
                                                          PROPOSED_STATUS,
                                                          DATE_OF_COM,
                                                          LAST_PAID_DT,
                                                          SUM_ASSURED,
                                                          PID_TERM,
                                                          PAY_MODE,
                                                          POL_OPTION,
                                                          DO_ID,
                                                          DM_ID,
                                                          BRANCH_OFF,
                                                          SALES_OFF,
                                                          ZONAL_OFF,
                                                          REGIONAL_OFF,
                                                          AGENT_ID,
                                                          POLICY_NO,
                                                          OFFICE_CD
                             )
                    VALUES   (
                                 V_DEMAND_NOTICE.PGID,
                                 V_DEMAND_NOTICE.INSTALLMENT_PREMIUM,
                                 0,
                                 V_DEMAND_NOTICE.INSTALLMENT_PREMIUM,
                                 0,
                                 P_USR,
                                 P_DT,
                                 DECODE (
                                    CEIL(V_NEXT_DUE_INST_NO
                                         / V_DEMAND_NOTICE.YRLY_NO_INST),
                                    1,
                                    'F',
                                    2,
                                    'S',
                                    'R'
                                 ),
                                 DEMAND_NOTICE_SEQ.NEXTVAL,
                                 V_DEMAND_NOTICE.POLICY_STATUS,
                                 V_NEXT_DUE_INST_NO,
                                 V_NEXT_DUE_DATE,
                                 V_DEMAND_NOTICE.POLICY_INSTALLMENT,
                                 '0',
                                 V_DEMAND_NOTICE.COMM_DATE,
                                 V_DEMAND_NOTICE.LAST_PAID_DATE,
                                 V_DEMAND_NOTICE.SUM_ASSURED,
                                 V_DEMAND_NOTICE.PRODUCT_CD
                                 || V_DEMAND_NOTICE.TERM,
                                 V_DEMAND_NOTICE.PAY_MODE,
                                 V_DEMAND_NOTICE.OPTION_NM,
                                 V_DEMAND_NOTICE.DO_ID,
                                 V_DEMAND_NOTICE.DM_ID,
                                 V_DEMAND_NOTICE.BRANCH_OFF,
                                 V_DEMAND_NOTICE.SALES_OFF,
                                 V_DEMAND_NOTICE.ZONAL_OFF,
                                 V_DEMAND_NOTICE.REGIONAL_OFF,
                                 V_DEMAND_NOTICE.AGENT_ID,
                                 V_DEMAND_NOTICE.POLICY_NO,
                                 V_DEMAND_NOTICE.OFFICE_CD
                             );
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  P_ERRM := 'Fail';
                  EXIT;
            END;
         END;

         V_NEXT_DUE_INST_NO := V_NEXT_DUE_INST_NO + 1;

         SELECT   TO_DATE(TO_CHAR (V_COMM_DATE, 'DD') || '-'
                          || TO_CHAR (
                                ADD_MONTHS (
                                   V_NEXT_DUE_DATE,
                                   DECODE (V_DEMAND_NOTICE.YRLY_NO_INST,
                                           1,
                                           12,
                                           2,
                                           6,
                                           4,
                                           3,
                                           12,
                                           1)
                                ),
                                'MON-RRRR'
                             ))
           INTO   V_NEXT_DUE_DATE
           FROM   DUAL;
      END LOOP;

      IF P_ERRM = 'Fail'
      THEN
         ROLLBACK;
      ELSE
         COMMIT;
         P_RECORD := P_RECORD + 1;
         P_ERRM := 'Success';
      END IF;
   END LOOP;

   CLOSE DEMAND_NOTICE;
EXCEPTION
   WHEN OTHERS
   THEN
      P_ERRM := SQLERRM;
      ROLLBACK;
END PRO_SINGLE_DEMAND_NOTC_PREP;
/


--
-- PRO_SMS_SCHEDULE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_sms_schedule
/*=======================================================================
    || Creation History ||
-----------------------------------------------------------------------
    Author      :
    Purpose      :
    Creation Date :

-----------------------------------------------------------------------
     || Modification History ||
-----------------------------------------------------------------------
     Version No.    Date:        Author:                  Ver:     Area of Change:
-----------------------------------------------------------------------
     1.0            31/07/2016   Sharmin sultana Prite
=======================================================================
*/
IS
v_message varchar2(200);
BEGIN
   PRO_DATA_PREPARE_SMS (p_pgid          => NULL,
                         p_data_tp       => NULL,
                         p_schedule_tp   => NULL,
                         p_date_from     => NULL,
                         p_date_to       => NULL,
                         p_error_msg     => v_message);
END pro_sms_schedule;
/


--
-- PRO_SUR_APP_SL_NO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_sur_app_sl_no wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
3eb 268
U+ffD2cB38NsWklXJFEBQA5mzagwg/AJLiAGfC/NrZ3gSDkmgysArFd1MBHtMop3LFYSwuXf
AC1G5r6Bxr/m5rg2B6Q+SopCTovXgN4uSmZURs3iSvhq0bxIxFKdShOrYIimibNWb2XGdZla
fvp5+dvNanltUq+jd+F5jrzG57kIitDc6Xmj0L358Yx+GlcfkJ2s+tRY9bJIiKS8NncaWh+9
pmAo/v4LdUdnW2PopHe3RuENLBG84WJeMpF7jseg635K0Al4qYselpHLlIscR+R4c1GLRMmw
VCbtiJeKTJn2ni/HHAVXv8DkQubsZ4CLtafngnBJ4TwHHbFmLr3yIu/7Jr40Vly6hJGlc5BK
eewyNt4kTTBhZDw9BR92CGphJR34Y1JDnHGvxuL5W7sHsSoeWLgCQqXnwhZpWgZZvoJToAuu
RRv+VimjWcnBS/VDq2y/TOliwhCtjCm5Ln45mYzuZhnhA6fwsBBFkWrskkyFE9Xa4biNCylj
rbJ1YFE3RaEMR4YVNmJ7B0mA5TJnIzszhqmjzKDfK8AqUj3Ba4M0XA4els5NKBO/e7+4rb6i
bWvbPHPQ57iWnjtig0UhsyHG1yh6bwjT
/


--
-- PRO_SUR_OFF_CODE_UPDATE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_sur_off_code_update wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
3c6 1ea
DFybLDFAD/Ue/qIPd/OEREwr1mIwgw1e2UgVfC+KMQ8teNMm5cVK8FcEFx2ndgWB1qfr5QZS
RDU6tXu9oGsWB2HlY1r0ANragv26Fzans6iKKNp7QcugBUjeDbogfaAPne0gygumcPqrbJXx
oDdyDY/cR779mr/nXlwJyvTALzgTyRm3KCnr21CES26hmg5vkRfCipBn3z9Hmd+VWHey3Yzm
8w4Y7BozD0UWdeIhHvTXkwqE/HD/R1VgQ1myAV3lcNdgoGwo53Hn7D6eSkkGgwfLE3s5L9Rb
000de3XS12F1nK3oNh8bGEK3yHfIkAGjvF1eAndBawt8oKPpInsnHK+N4xhb3tJw6bEDMnqt
EtlkaHS3MkD1uGCB6N+RHuWVqsFc8rXW2NMjq0yd/pbHRWySx2AVdw10lddPtSE39yQ7KxOG
CDjDfM+UEZYDoZGrWVqJzUxalpz3ELClcp6QCl7t0W2YKPzJKag=
/


--
-- PRO_SYNC_COMMISSION_INFO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_sync_commission_info (
   p_pgid    IN       VARCHAR2,
   p_error   OUT      VARCHAR2
)
IS
   v_cnt               NUMBER (2)    := 0;
   v_pgid              VARCHAR2 (16);
   v_max_prem_due_dt   DATE;
   v_mm_cnt            NUMBER (3)    := 1;
   v_count             NUMBER (3)    := 0;
BEGIN
   UPDATE com_agent_com_detail
      SET prev_prem_due_dt = NULL
    WHERE pgid = p_pgid;

   UPDATE com_agent_com_bill_dtl
      SET prev_prem_due_dt = NULL
    WHERE pgid = p_pgid;

   UPDATE com_dev_emp_comm
      SET prev_prem_due_dt = NULL
    WHERE pgid = p_pgid;

   UPDATE com_emp_com_bill_dtl
      SET prev_prem_due_dt = NULL
    WHERE pgid = p_pgid;

   FOR i IN (SELECT   r.receive_id, r.pgid, p.installment_no, r.receive_date,
                      p.next_due_dt, p.pre_next_due_dt
                 FROM acc_receivables r, ins_prem_acc_receivable p
                WHERE r.pgid = p_pgid
                  AND EXISTS (SELECT 1
                                FROM com_agent_com_detail
                               WHERE pgid = r.pgid)
                  AND r.rec_status = '1'
                  AND r.status = '1'
                  AND r.com_calculated = 'Y'
                  AND r.i_usr <> 'SLICL'
                  AND r.pgid = p.pgid
                  AND r.receive_id = p.proposer_pk
                  AND p.installment_no > 1
                  AND p.pre_next_due_dt IS NOT NULL
             ORDER BY r.pgid, p.next_due_dt)
   LOOP
      --Synchronize with com_agent_com_detail
      v_count := 0;

      SELECT COUNT (1)
        INTO v_count
        FROM com_agent_com_detail
       WHERE pgid = i.pgid AND prem_due_dt = i.pre_next_due_dt;

      IF v_count > 0
      THEN
         SELECT COUNT (1)
           INTO v_count
           FROM com_agent_com_detail
          WHERE pgid = i.pgid AND prem_due_dt = i.next_due_dt;

         IF v_count = 0
         THEN
            UPDATE com_agent_com_detail
               SET prem_due_dt = i.next_due_dt,
                   prev_prem_due_dt = i.pre_next_due_dt
             WHERE pgid = i.pgid AND prem_due_dt = i.pre_next_due_dt;
         END IF;
      END IF;

      --Synchronize with com_agent_com_bill_dtl
      v_count := 0;

      SELECT COUNT (1)
        INTO v_count
        FROM com_agent_com_bill_dtl
       WHERE pgid = i.pgid AND prem_due_dt = i.pre_next_due_dt;

      IF v_count > 0
      THEN
         SELECT COUNT (1)
           INTO v_count
           FROM com_agent_com_bill_dtl
          WHERE pgid = i.pgid AND prem_due_dt = i.next_due_dt;

         IF v_count = 0
         THEN
            UPDATE com_agent_com_bill_dtl
               SET prem_due_dt = i.next_due_dt,
                   prev_prem_due_dt = i.pre_next_due_dt
             WHERE pgid = i.pgid AND prem_due_dt = i.pre_next_due_dt;
         END IF;
      END IF;

      --Synchronize with com_agent_com_bill_dtl
      v_count := 0;

      SELECT COUNT (1)
        INTO v_count
        FROM com_dev_emp_comm
       WHERE pgid = i.pgid AND prem_due_dt = i.pre_next_due_dt;

      IF v_count > 0
      THEN
         SELECT COUNT (1)
           INTO v_count
           FROM com_dev_emp_comm
          WHERE pgid = i.pgid AND prem_due_dt = i.next_due_dt;

         IF v_count = 0
         THEN
            UPDATE com_dev_emp_comm
               SET prem_due_dt = i.next_due_dt,
                   prev_prem_due_dt = i.pre_next_due_dt
             WHERE pgid = i.pgid AND prem_due_dt = i.pre_next_due_dt;
         END IF;
      END IF;

      --Synchronize with com_emp_com_bill_dtl
      v_count := 0;

      SELECT COUNT (1)
        INTO v_count
        FROM com_emp_com_bill_dtl
       WHERE pgid = i.pgid AND prem_due_dt = i.pre_next_due_dt;

      IF v_count > 0
      THEN
         SELECT COUNT (1)
           INTO v_count
           FROM com_emp_com_bill_dtl
          WHERE pgid = i.pgid AND prem_due_dt = i.next_due_dt;

         IF v_count = 0
         THEN
            UPDATE com_emp_com_bill_dtl
               SET prem_due_dt = i.next_due_dt,
                   prev_prem_due_dt = i.pre_next_due_dt
             WHERE pgid = i.pgid AND prem_due_dt = i.pre_next_due_dt;
         END IF;
      END IF;
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END pro_sync_commission_info;
/


--
-- PRO_SYNC_POLICY_DUE_CREATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_sync_policy_due_creation (
   p_pgid           IN       ins_p_summery.pgid%TYPE,
   p_inst_no_from   IN       NUMBER,
   p_inst_no_to     IN       NUMBER,
   p_usr            IN       VARCHAR2,
   p_dt             IN       DATE,
   p_errm           OUT      VARCHAR2,
   p_record         OUT      NUMBER
)
IS
   v_yrly_no_inst               ins_pay_mode.yrly_no_inst%TYPE;

   CURSOR policy_due_record
   IS
      SELECT ips.pgid, fun_ins_pgid_to_policy_no (ips.pgid) policy_no,
             ips.installment_premium, ips.policy_status, ipm.yrly_no_inst,
             ips.life_premium, ips.policy_installment, ips.comm_date,
             ips.last_paid_date, ips.sum_assured, ips.product_cd, ips.term,
             ipm.pay_mode_sh_nm pay_mode,
             fun_ins_option (ips.option_cd) option_nm, ips.do_gid do_id,
             ips.dm_gid dm_id, ips.branch_off, ips.sales_off, ips.zonal_off,
             ips.regional_off, ips.agent_id, ips.office_cd,
             ips.next_due_date, ips.last_paid_inst_no, ips.extra_premium
        FROM ins_p_summery ips, ins_pay_mode ipm
       WHERE ips.pgid = p_pgid AND ips.pay_mode_cd = ipm.pay_mode_cd;

   v_policy_due_record          policy_due_record%ROWTYPE;
   v_next_due_date              DATE;
   --v_comm_date                  DATE;
   v_total_policy_installment   NUMBER (3);
   v_next_due_inst_no           NUMBER (3);
   v_extra_prem                 NUMBER (10, 2);
   v_due_check                  NUMBER (2)                       := 0;
   v_month_last_day             NUMBER (2)                       := 0;
   v_cur_month_last_day         NUMBER (2)                       := 0;
BEGIN
   p_record := 0;
   v_next_due_inst_no := p_inst_no_from;

   OPEN policy_due_record;

   LOOP
      FETCH policy_due_record
       INTO v_policy_due_record;

      EXIT WHEN policy_due_record%NOTFOUND;

      SELECT ADD_MONTHS (v_policy_due_record.comm_date,
                           (v_next_due_inst_no - 1
                           )
                         * DECODE (v_policy_due_record.yrly_no_inst,
                                   1, 12,
                                   2, 6,
                                   4, 3,
                                   12, 1
                                  )
                        )
        INTO v_next_due_date
        FROM DUAL;

      SELECT TO_NUMBER (TO_CHAR (LAST_DAY (v_next_due_date), 'DD'))
        INTO v_cur_month_last_day
        FROM DUAL;

      IF v_cur_month_last_day >=
                     TO_NUMBER (TO_CHAR (v_policy_due_record.comm_date, 'DD'))
      THEN
         SELECT TO_DATE (   TO_CHAR (v_policy_due_record.comm_date, 'DD')
                         || '-'
                         || TO_CHAR (v_next_due_date, 'MON-RRRR')
                        )
           INTO v_next_due_date
           FROM DUAL;
      ELSE
         SELECT TO_DATE (   v_cur_month_last_day
                         || '-'
                         || TO_CHAR (v_next_due_date, 'MON-RRRR')
                        )
           INTO v_next_due_date
           FROM DUAL;
      END IF;

      --v_comm_date := v_policy_due_record.comm_date;
      v_total_policy_installment := v_policy_due_record.policy_installment;
      p_errm := 'Success';

      WHILE v_next_due_inst_no <= p_inst_no_to
       AND v_next_due_inst_no <
              v_policy_due_record.policy_installment
   ---Musha on 06.06.2016 add the AND condition due to create more premium due
      LOOP
         BEGIN
            SELECT COUNT (1)
              INTO v_due_check
              FROM ins_prem_acc_receivable
             WHERE pgid = v_policy_due_record.pgid
               AND installment_no = v_next_due_inst_no
               AND (   installment_no = v_next_due_inst_no
                    OR next_due_dt = v_next_due_date
                   )
               AND alt_serail_no = '0';

            /*IF v_due_check > 0 THEN
                DELETE FROM ins_prem_acc_receivable
                             WHERE pgid = v_policy_due_record.pgid
                               AND installment_no = v_next_due_inst_no
                               AND next_due_dt <> v_next_due_date;
                      IF SQL%FOUND THEN
                          v_due_check := 0;
                      END IF;
            END IF;*/
            IF v_due_check = 0
            THEN
               SELECT   NVL
                           (fun_supp_product_prem
                                             (v_policy_due_record.pgid,
                                              v_next_due_inst_no,
                                              v_policy_due_record.yrly_no_inst
                                             ),
                            0
                           )
                      + NVL
                           (fun_supp_benifit_prem
                                             (v_policy_due_record.pgid,
                                              v_next_due_inst_no,
                                              v_policy_due_record.yrly_no_inst
                                             ),
                            0
                           )
                      + NVL (v_policy_due_record.extra_premium, 0)
                 INTO v_extra_prem
                 FROM DUAL;

               INSERT INTO ins_prem_acc_receivable
                           (pgid,
                            installment_premium,
                            paid_amount,
                            balance,
                            pay_status, i_usr, i_dt,
                            prem_year_status,
                            sl_no,
                            policy_status,
                            installment_no, next_due_dt,
                            total_installment, proposed_status,
                            date_of_com,
                            last_paid_dt,
                            sum_assured,
                            pid_term,
                            pay_mode,
                            pol_option,
                            do_id,
                            dm_id,
                            branch_off,
                            sales_off,
                            zonal_off,
                            regional_off,
                            agent_id,
                            office_cd,
                            policy_no
                           )
                    VALUES (v_policy_due_record.pgid,
                            ROUND (  v_policy_due_record.life_premium
                                   + v_extra_prem
                                   - .01
                                  ),
                            0,
                            ROUND (  v_policy_due_record.life_premium
                                   + v_extra_prem
                                   - .01
                                  ),
                            0, p_usr, SYSDATE,
                            DECODE (CEIL (  v_next_due_inst_no
                                          / v_policy_due_record.yrly_no_inst
                                         ),
                                    1, 'F',
                                    2, 'S',
                                    'R'
                                   ),
                            demand_notice_seq.NEXTVAL,
                            v_policy_due_record.policy_status,
                            v_next_due_inst_no, v_next_due_date,
                            v_policy_due_record.policy_installment, '0',
                            v_policy_due_record.comm_date,
                            v_policy_due_record.last_paid_date,
                            v_policy_due_record.sum_assured,
                               v_policy_due_record.product_cd
                            || v_policy_due_record.term,
                            v_policy_due_record.pay_mode,
                            v_policy_due_record.option_nm,
                            v_policy_due_record.do_id,
                            v_policy_due_record.dm_id,
                            v_policy_due_record.branch_off,
                            v_policy_due_record.sales_off,
                            v_policy_due_record.zonal_off,
                            v_policy_due_record.regional_off,
                            v_policy_due_record.agent_id,
                            v_policy_due_record.office_cd,
                            v_policy_due_record.policy_no
                           );
            END IF;

------------------------------------------------------
            v_next_due_inst_no := v_next_due_inst_no + 1;

            SELECT ADD_MONTHS (v_policy_due_record.comm_date,
                                 (v_next_due_inst_no - 1
                                 )
                               * DECODE (v_policy_due_record.yrly_no_inst,
                                         1, 12,
                                         2, 6,
                                         4, 3,
                                         12, 1
                                        )
                              )
              INTO v_next_due_date
              FROM DUAL;

            SELECT TO_NUMBER (TO_CHAR (LAST_DAY (v_next_due_date), 'DD'))
              INTO v_cur_month_last_day
              FROM DUAL;

            IF v_cur_month_last_day >=
                     TO_NUMBER (TO_CHAR (v_policy_due_record.comm_date, 'DD'))
            THEN
               SELECT TO_DATE (   TO_CHAR (v_policy_due_record.comm_date,
                                           'DD')
                               || '-'
                               || TO_CHAR (v_next_due_date, 'MON-RRRR')
                              )
                 INTO v_next_due_date
                 FROM DUAL;
            ELSE
               SELECT TO_DATE (   v_cur_month_last_day
                               || '-'
                               || TO_CHAR (v_next_due_date, 'MON-RRRR')
                              )
                 INTO v_next_due_date
                 FROM DUAL;
            END IF;
------------------------------------------------------
         END;
      END LOOP;

      IF p_errm != 'Fail'
      THEN
         --COMMIT;
         p_record := p_record + 1;
      END IF;
   END LOOP;

   CLOSE policy_due_record;
END pro_sync_policy_due_creation;
/


--
-- PRO_SYNC_UPD_COMM_PREM_DUE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_sync_upd_comm_prem_due (
   p_pgid               IN     ins_p_summery.pgid%TYPE,
   p_prev_prem_due_dt   IN     DATE,
   p_new_prem_due_dt    IN     DATE,
   p_error                 OUT VARCHAR2
)
IS
BEGIN
   UPDATE   com_agent_com_detail
      SET   temp_prem_due_dt = prem_due_dt, prem_due_dt = NULL
    WHERE   pgid = p_pgid AND prem_due_dt = p_new_prem_due_dt;

   UPDATE   com_agent_com_detail
      SET   prem_due_dt = p_new_prem_due_dt
    WHERE   pgid = p_pgid
            AND NVL (prem_due_dt, temp_prem_due_dt) = p_prev_prem_due_dt;

   UPDATE   com_agent_com_bill_dtl
      SET   temp_prem_due_dt = prem_due_dt, prem_due_dt = NULL
    WHERE   pgid = p_pgid AND prem_due_dt = p_new_prem_due_dt;

   UPDATE   com_agent_com_bill_dtl
      SET   prem_due_dt = p_new_prem_due_dt
    WHERE   pgid = p_pgid
            AND NVL (prem_due_dt, temp_prem_due_dt) = p_prev_prem_due_dt;

   UPDATE   com_dev_emp_comm
      SET   prem_due_dt = p_new_prem_due_dt
    WHERE   pgid = p_pgid AND prem_due_dt = p_prev_prem_due_dt;

   UPDATE   com_emp_com_bill_dtl
      SET   prem_due_dt = p_new_prem_due_dt
    WHERE   pgid = p_pgid AND prem_due_dt = p_prev_prem_due_dt;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END;
/


--
-- PRO_TEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_temp
IS
   v_indx_rebuild_sql   VARCHAR2 (2000);
BEGIN
   BEGIN
      v_indx_rebuild_sql :=
          'ALTER TABLE ins.ins_prem_acc_receivable DROP COLUMN alt_serail_no';

      EXECUTE IMMEDIATE v_indx_rebuild_sql;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;

   BEGIN
      v_indx_rebuild_sql :=
         'ALTER TABLE INS_PREM_ACC_RECEIVABLE ADD (ALT_SERAIL_NO NUMBER(2) DEFAULT 0)';

      EXECUTE IMMEDIATE v_indx_rebuild_sql;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;

   BEGIN
      v_indx_rebuild_sql :=
         'ALTER TABLE ins_prem_acc_receivable drop CONSTRAINT pk_ins_prem_rec_pgid_instno';

      EXECUTE IMMEDIATE v_indx_rebuild_sql;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;

   BEGIN
      v_indx_rebuild_sql := 'DROP INDEX PK_INS_PREM_REC_PGID_INSTNO';

      EXECUTE IMMEDIATE v_indx_rebuild_sql;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;

   BEGIN
      v_indx_rebuild_sql :=
         'ALTER TABLE ins_prem_acc_receivable ADD CONSTRAINT pk_ins_prem_rec_pgid_instno PRIMARY KEY (pgid, installment_no, alt_serail_no)';

      EXECUTE IMMEDIATE v_indx_rebuild_sql;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;
END;
/


--
-- PRO_TEMP_COLL_UPD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.PRO_TEMP_COLL_UPD
IS
BEGIN
FOR k IN (SELECT   DISTINCT pgid
               FROM   (SELECT   pgid
                         FROM   acc_receivables r
                        WHERE   r.i_dt > TO_DATE ('01/02/2021', 'DD/MM/RRRR')
                          AND rec_status = 1
                       UNION ALL
                       SELECT   pgid
                         FROM   acc_partial_receivables r
                        WHERE   r.i_dt > TO_DATE ('01/02/2021', 'DD/MM/RRRR')
                          AND rec_status = 1
                       UNION ALL
                       SELECT   pgid
                         FROM   acc_receivables r
                        WHERE   r.i_dt > TO_DATE ('01/02/2021', 'DD/MM/RRRR')
                          AND rec_status = 0
                       UNION ALL
                       SELECT   pgid
                         FROM   acc_partial_receivables r
                        WHERE   r.i_dt > TO_DATE ('01/02/2021', 'DD/MM/RRRR')
                          AND rec_status = 0
                       ))
   LOOP
      DECLARE
        v_tot_coll_amount NUMBER := NULL;
      BEGIN
         SELECT   SUM (coll_amount)
           INTO   v_tot_coll_amount
           FROM   (SELECT   coll_amount
                     FROM   acc_advance_receivables
                    WHERE   pgid = k.pgid AND rec_status = 1
                   UNION ALL
                   SELECT   coll_amount
                     FROM   acc_receivables
                    WHERE   pgid = k.pgid AND rec_status = 1
                   UNION ALL
                   SELECT   coll_amount
                     FROM   acc_partial_receivables
                    WHERE   pgid = k.pgid AND rec_status = 1);

         UPDATE   push_pull_sms@dbl_smsdb
            SET   tot_coll_amount = NVL (v_tot_coll_amount, tot_coll_amount),
                  sms_text =
                        client_name
                     || CHR (10)
                     || 'SA: '
                     || sum_assured
                     || CHR (10)
                     || 'Pre (TK): '
                     || install_premium
                     || CHR (10)
                     || 'T. Collection (TK): '
                     || NVL (v_tot_coll_amount, tot_coll_amount)
                     || CHR (10)
                     || 'Next Prem Due: '
                     || next_prem_due_date
          WHERE   pgid = k.pgid;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;
      
      COMMIT;
   END LOOP;
END;
/


--
-- PRO_TEMP_SINGLE_DUE_PREP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_temp_single_due_prep wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
1c85 7aa
lBKgXJ4TmL8wPhL4nML/3kQ7zZIwg9dUDCCG3y+5MZ2snAJWohPUobPR/OipViUtafJ38QnT
/uaOEw5UcOs5of5hJLyE7VnM717LIxY3VYVdeIT/1k5wqOkVEWyIQj86urVOztLYDyS1gcGc
gHOlgcwknXoit0OsLyVz1fVStwmsSiG7JIk5Do4CaX8keI67lxCvqTXDffKhKHN5VrdMVpb9
emL0W66GwkPXGkdp2E3yX8SR9MjSBCJkwrK37mZcYOS67ZzPZMdrNdTAz8rI2hkeWWmfSB32
KbFt7qasGvHyWuaTb8GO3QHsBDVaA4h0lVcM8vFv5TwGFRl5pe9lLwNcR0LUm9OgcsKgl9QO
5qUhMfZnp42r0bds5A+eeY6ipzlu41brYO3zvRayFQLvCMQgFDAsygMAnHUJUICHucNq98ae
yx+ww8QrE4Jmnp9RR7iFORiQoZpOk+mRMkLFswGiP3qNiwfjcZDPV7QRlPGl50yOqdGaDAT7
pqH/uQwu1d88AfXDXmHvVNyC21a3VGs5RQUtz4MuHByPEZ3x2Si24IliDTe3Abg6qATObdm5
KSlDbOf2vNdJ1KdSlYWpwEbgrTLB5qxq79BPPB7ll/XYjqLcGE0rnqNsY9zIDfGhwStICnEF
a4zM5v6ZdUYa+De2GFFZ6RnIKpoqzPhY7zWpns1At8kiasF4Zf+3kG8FYlH0dYIClnPRm3WG
DPFVGusKCPD0OLShpss10z2Kr5HUsK8IuoUrGF/1k72Kp3++eBllj49LA9f76ia6RLGc2CjG
XSPIKB/nA4YPL4H0C/aP3uLiKgPiXpU7HJG9ZXbWDb8JaCq9sOj9Nr2cy+ijVKofhTBUSwln
oFCGtDhwLuIU2QpQVUUq49fHNtyiPUs1YFuHTEZdwfbALYd+3arAhFfy5YDCI4QnZ1GpFiFQ
o4JyAhZ7xDgBwv3ByQmYCT5xbSHSfLQQo99/wBGUzgNE8ylFlaQtdG7r7j/jfue+CkzKD6Rw
t0CQxNkar/Obf+Wxl1XRQ3Ta0paxgN+TVB9jiVxByGOMYVB8EZx3hypeF12wClwM9pOOYLvf
cxEM2NT4p9V4naDo4pyQY3vid/fhJ2KkSfRSeqcZ1P25XU8bfqCoCxoheAZhm4M9dn0pq8yH
ZFU+7l+mBflIN/6xKb9/vIjdyPrC95+nWowt2124YF0KafPxew7GiFG18/W2x1peR3LzYqot
huzJlShRGbc9/GgDVP9oVAiEkuzJe5P6C7B2MLcoEFPgh7PsCtpc6VFFfBCojIIoSEghjr0b
XzoOK9eLAJXDc0CkBARK5d90B5TeBNylYZFOl9Ggtdw114tbLo64deBQwMv7BpWk4W5WgS9W
o87wB9AuD2zc317Ef2R1ZSnbLPBMudHX/VGDlbU40ODcMNXJcejiAAfDr1uIRQybmtDCQVUT
QBz5cyJQvFsFcNGrgyln12BbZedzwKNmEZUiQf2hr43PRrYCJTTnVzzBvY6Ch5NmqojBhi9x
NrBIZVXlEueuIzWrzE8v/saNo5o8E0mZvzLcGARSblhlcXs0DU814yH5x03CxGnXcq3v79fX
NdHuim5d00HxjHGDtRYX8H5owUsNDJdZEkuk3AP4Rmvp6VUYnk34Y+zl+fcm7yApUM5EBSQi
qr0855ApP5DWpKMZubHuwQjRb5MAgjvNN7zNGZL+ouAAcLo7u9tOgTiPKDHWMtKh+KBabVTt
DJDGm4b6cRK5IEK7YYWapZt5zJ3usmgiRbUqaOYoGZV58WGqT6AJVdvrxYuQ0OyYARl0I5bW
OUXtdJCa2rFanv94Upu6cjcFu4vUW1vqBs74w50jnzBqqBkeTbw/ktLOkqu05qD74BauFWuB
wCy8OWsLZnFWi26EEF3JvtqVNX+LL8gAa/CXnjsl5EADg6tp+m8eu/lE0s0C6w==
/


--
-- PRO_TEMP_SMS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_temp_sms
IS
   v_party_id  VARCHAR2(30);
   v_mobile_no  VARCHAR2(30);
   
   CURSOR c_pol
   IS
      SELECT p.pgid--, fun_ins_pgid_to_policy_no (pgid) policy_no
        FROM push_pull_sms@dbl_smsdb p
       WHERE p.mobile_no IS NULL
       and exists (SELECT 1
            FROM ins_p_address a
           WHERE a.pgid = p.pgid
           and a.mobile_no is not null);
BEGIN
   FOR i IN c_pol
   LOOP
      /*UPDATE push_pull_sms@dbl_smsdb
         SET policy_no = i.policy_no
       WHERE pgid = i.pgid;*/
      
      BEGIN
          SELECT party_id
            INTO v_party_id
            FROM ins_p_personal n, ins_p_proposal p
           WHERE n.pgid = i.pgid
             AND p.pgid = i.pgid
             AND n.party_cd = DECODE (p.assurance_type, '03', '02', '03')
             AND n.pgid = p.pgid
             AND n.sl_no = 1;

          SELECT MAX (mobile_no)
            INTO v_mobile_no
            FROM ins_p_address
           WHERE pgid = i.pgid
             AND party_id = v_party_id;
        
        if v_mobile_no is not null then
          UPDATE push_pull_sms@dbl_smsdb
             SET mobile_no = v_mobile_no
           WHERE pgid = i.pgid;
        
          COMMIT;
        end if;
      EXCEPTION
        WHEN OTHERS THEN
            NULL;
      END;
   END LOOP;
END;
/


--
-- PRO_UNADJ_COLL_DUE_CALC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_unadj_coll_due_calc wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
6700 12da
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
qX5s9JQ2FH7Ry
mti+ljj0VoGCVrHxmirUorJGBn4HTw2zg9ZOYAL+VbmxWa9mULZKs1YANWrGdluA6Y4dH6pa
YL9Vhgjqn9WIO7Hl98dP+Cdp0eP9IWLO/UW+vMkkEjjqO+XEcjsZk+swGXr5brZCPFn5dF6T
miGssLOywTr/UmWEuUD/9Ib90jwBTfawIxvALQUcfDeCFWp0jL1UqUq4AjyZxjj9hT3TOuz1
38fEmY2aaPhmE5EeqW7WBVTUSKvkQ+lz2PE/VQUjaXBu8kFZFcQqHq09Jxzzdz6shCsO+r7M
il2ELnQHhhWSIGL0MbIb+nVBEuTwcklGUv7iC7Pl8FfBeUYHsn8tZcHsB0mYjNBX+mX4zpcB
ev1vTEBlYRH/FwjtynpYX9ow5zHj6LwRHGjojlJF4SZB65vWh9IdmPT6EGCXH98O/mlRFL+4
uDuLoYrpXgDudjjvKqCKzuPTKvgqq/Ukr/axKrvwE3YGwmP+RcgWO1M/seZs7kXpGpr8w7/Q
VB7txA32SgEViSJx+ZEq4Qj8P3jRZ7QSlofqMQjo1pAoIYTiByz7BGVp9RW75FMV9FkVeoh1
/Iw7s4MyGKf0h+x/D5W6swBIVcud/gSbPkKcQ1JwD6t22zDdOlZXmMS9yeKZ+5R/bZht47NL
TpP7g2c0wGTxp5BwemI8EsDMYx2xMH7nDAvttbinJDUNys+vVLtDzxyGnE5dzX+wcpCUtKeU
Lei8vm0t1Dq+FYr0uVec6tpyQ0JHvWXT7A8Xo33wT/8D29bToFqPHmIBWckbe7BWC18piBLy
OpcQWuspFBUHmx+Q1J1fAZW/L5IoRYkmhkpYW3nb5UVkS4mt3sCQllut3qPpkXRATNuRshhI
yVkKhe9Vx2VblcMkmqCbUiK3wWc8SxEr127q1Eeef1JAyHL5JWwSqlZSkj8vthNBvf+3mJ3k
KOcys+A=
/


--
-- PRO_UNADJ_PREM_INFO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_unadj_prem_info (
   p_pgid                  ins_p_proposal.pgid%TYPE,
   p_instl_no_from   OUT   NUMBER,
   p_instl_no_to     OUT   NUMBER,
   p_due_dt_from     OUT   DATE,
   p_due_dt_to       OUT   DATE,
   p_coll_amount     OUT   NUMBER,
   p_error           OUT   VARCHAR2
)
IS
   v_instl_no_from       NUMBER (3);
   v_instl_no_to         NUMBER (30);
   v_due_dt_from         DATE;
   v_due_dt_to           DATE;
   v_coll_amount         NUMBER (12, 2);
   v_ret_instl_no_from   NUMBER (3);
   v_ret_instl_no_to     NUMBER (30);
   v_ret_due_dt_from     DATE;
   v_ret_due_dt_to       DATE;
   v_tot_coll_amount     NUMBER (12, 2) := 0;
BEGIN
   SELECT MIN (installment_no_from) installment_no_from,
          MAX (installment_no_to) installment_no_to,
          MIN (due_dt_from) due_dt_from, MAX (due_dt_to) due_dt_to
     INTO v_instl_no_from,
          v_instl_no_to,
          v_due_dt_from, v_due_dt_to
     FROM (                                 /*Collection after maturity date*/
           SELECT MIN (r.installment_no_from) installment_no_from,
                  MAX (r.installment_no_to) installment_no_to,
                  MIN (r.due_dt_from) due_dt_from, MAX (r.due_dt_to)
                                                                    due_dt_to
             FROM acc_receivables r, ins_p_summery s
            WHERE r.pgid = p_pgid
              AND r.rec_status = '1'
              AND (   NVL (r.coll_slip_rec_dt, r.receive_date) >=
                                                               s.maturity_date
                   OR r.due_dt_from >= s.maturity_date
                  )
              AND r.pgid = s.pgid
           UNION ALL              --All Collection after 5 year gap collection
           SELECT MIN (r.installment_no_from) installment_no_from,
                  MAX (r.installment_no_to) installment_no_to,
                  MIN (r.due_dt_from) due_dt_from, MAX (r.due_dt_to)
                                                                    due_dt_to
             FROM acc_receivables r, ins_p_summery s
            WHERE r.pgid = p_pgid
              AND r.rec_status = '1'
              AND (   NVL (r.coll_slip_rec_dt, r.receive_date) <
                                                               s.maturity_date
                   OR r.due_dt_to < s.maturity_date
                  )
              AND NVL (r.coll_slip_rec_dt, r.receive_date) <
                     ADD_MONTHS (s.comm_date,
                                   (s.policy_installment - 1)
                                 * DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           12
                                          )
                                )
              AND MONTHS_BETWEEN (NVL (r.coll_slip_rec_dt, r.receive_date),
                                  r.due_dt_from
                                 ) >= 5 * 12
              AND r.pgid = s.pgid);

   SELECT SUM (r.coll_amount) coll_amount,
          MIN (r.installment_no_from) installment_no_from,
          MAX (r.installment_no_to) installment_no_to,
          MIN (r.due_dt_from) due_dt_from, MAX (r.due_dt_to) due_dt_to
     INTO v_coll_amount,
          v_instl_no_from,
          v_instl_no_to,
          v_due_dt_from, v_due_dt_to
     FROM acc_receivables r
    WHERE r.pgid = p_pgid
      AND r.rec_status = '1'
      AND r.due_dt_from >= v_due_dt_from;

   v_ret_instl_no_from := v_instl_no_from;
   v_ret_instl_no_to := v_instl_no_to;
   v_ret_due_dt_from := v_due_dt_from;
   v_ret_due_dt_to := v_due_dt_to;
   v_tot_coll_amount := v_coll_amount;

   /* Last year collection 2 or more years then all collectin excluding one year will retrun*/
   SELECT installment_no_from, installment_no_to,
          (SELECT next_due_dt
             FROM ins_prem_acc_receivable
            WHERE pgid = p_pgid AND installment_no = installment_no_from)
                                                                  due_dt_from,
          due_dt_to, coll_amount
     INTO v_instl_no_from, v_instl_no_to,
          v_due_dt_from,
          v_due_dt_to, v_coll_amount
     FROM (SELECT   SUM (coll_amount)
                  - (  DECODE (MIN(pay_mode_cd),
                               '01', 1,
                               '02', 2,
                               '03', 4,
                               '04', 12,
                               0
                              )
                     * MIN (installment_premium)
                    ) coll_amount,
                  (  MIN (installment_no_from)
                   + DECODE (MIN(pay_mode_cd),
                             '01', 1,
                             '02', 2,
                             '03', 4,
                             '04', 12,
                             0
                            )
                  ) installment_no_from,
                  MAX (installment_no_to) installment_no_to, NULL due_dt_from,
                  MAX (due_dt_to) due_dt_to
             FROM (SELECT   r.pgid, r.coll_amount, r.installment_no_from,
                            r.installment_no_to, r.due_dt_from, r.due_dt_to,
                            r.tot_premium_amt, s.installment_premium,
                            s.pay_mode_cd, s.comm_date, s.maturity_date,
                            r.coll_slip_rec_dt
                       FROM acc_receivables r, ins_p_summery s
                      WHERE r.pgid = p_pgid
                        AND r.rec_status = '1'
                        AND r.pgid = s.pgid
                        AND NVL (r.coll_slip_rec_dt, r.receive_date) >=
                                              ADD_MONTHS (s.maturity_date,
                                                          -12)
                        AND NVL (r.coll_slip_rec_dt, r.receive_date) <
                                                               s.maturity_date
                        AND r.installment_no_from <= s.policy_installment
                        AND 2 <=
                               (SELECT     (  MAX (r.installment_no_to)
                                            - MIN (r.installment_no_from)
                                            + 1
                                           )
                                         / DECODE (s.pay_mode_cd,
                                                   '01', 1,
                                                   '02', 2,
                                                   '03', 4,
                                                   '04', 12,
                                                   0
                                                  )
                                    FROM acc_receivables r, ins_p_summery s
                                   WHERE r.pgid = p_pgid
                                     AND r.rec_status = '1'
                                     AND r.pgid = s.pgid
                                     AND NVL (r.coll_slip_rec_dt,
                                              r.receive_date
                                             ) >=
                                              ADD_MONTHS (s.maturity_date,
                                                          -12)
                                     AND NVL (r.coll_slip_rec_dt,
                                              r.receive_date
                                             ) < s.maturity_date
                                     AND r.installment_no_from <=
                                                          s.policy_installment
                                     /*AND r.due_dt_from <=
                                            NVL (r.coll_slip_rec_dt,
                                                 r.receive_date
                                                )*/ --Musha on 24.01.2021
                                GROUP BY s.pay_mode_cd)
                   ORDER BY r.installment_no_from)
            WHERE     /*installment_no_to >
                         (  MIN (installment_no_from)
                          - DECODE (s.pay_mode_cd,
                                    '01', 1,
                                    '02', 2,
                                    '03', 4,
                                    '04', 12,
                                    0
                                   )
                         )
                  AND*/ (   v_ret_instl_no_from IS NULL
                         OR (    installment_no_from < v_ret_instl_no_from
                             AND installment_no_to < v_ret_instl_no_from
                            )
                   ));

   IF NVL (v_coll_amount, 0) > 0
   THEN
      IF v_ret_instl_no_from IS NULL OR v_ret_instl_no_from > v_instl_no_from
      THEN
         v_ret_instl_no_from := v_instl_no_from;
         v_ret_due_dt_from := v_due_dt_from;
      END IF;

      IF v_ret_instl_no_to IS NULL OR v_ret_instl_no_to < v_instl_no_to
      THEN
         v_ret_instl_no_to := v_instl_no_to;
         v_ret_due_dt_to := v_due_dt_to;
      END IF;

      v_tot_coll_amount := NVL(v_tot_coll_amount, 0) + v_coll_amount;
   END IF;

   p_instl_no_from := v_ret_instl_no_from;
   p_instl_no_to := v_ret_instl_no_to;
   p_due_dt_from := v_ret_due_dt_from;
   p_due_dt_to := v_ret_due_dt_to;
   p_coll_amount := v_tot_coll_amount;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := 'pro_unadj_prem_info:- ' || SQLERRM;
END pro_unadj_prem_info;
/


--
-- PRO_UNADJ_PREM_INFO1  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_unadj_prem_info1 wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
22d0 71c
AdmzBYt3s01+swtS3YZVvHPjreswg82jDNAF3y+5MZ3g0TdD2595u2EHEDbIbLninqHDFicD
Ir1Eg+FiUBTnULo/z0AjYg/CWhJeoOnBS6mVIEBOBkfItKyz49uU76UpTsaSZCgktZuAcylO
ZKo8narOzYZvrIimjjJST9twafGcKuJ/o1BlWbHh0hgsnsJ+WLhYsDLcHtpgguTm1UqqTsUF
tuiEV3kUo8pS6fx1/mUjWnbAUeF7vW9nouugy4KjQ89+thUEAfEBYl1/kbOEhZ8DlVY+RKWz
S705oS9xVuIqUA63NoPSFlV8faArnGzzl8JIiTTGn8RGTJ2y72hQg1BU+zK67KuZieINGvGg
ehFiYseXsjsy8P5dIvpENBQ+9FeRocs3aVZZ619dNMQ4+6fQLlbalxVJ1vde1vBeAqGKG4hT
pinGwo2tBFdWwHse3B2jOwHjVkz6mTI1MWCeEJknz6TdjqHTlP4tgT7Lw3be43X1YwYJYUG4
/KZnvoIw+yV6tF6G+nwYfFzv8XpA+ImJ3adMqNUKVu+KpmMV0vk3cFKRLjLWBeJvJ/JAQl/n
jqOMDDBcZki8kLpnZhg6C8VWSErmWBsCaTmNTGHTaWLDpK7X4RkZQR5twJBre1buB2AaLnan
AGx6UwodBRX8qf/pQ6O/zI1JIVtZb40MQORPLbU3X+2tsZRBvW1E/ovbfgCx6HxKHl+L5GtG
DqJ/kyso78aOqIQ16xR7dwlgFZ5hyybSq+DTs3Uh5hUd/C+3exicIkFPIGFObHBygQuDqOvQ
QXofhcfu+sc+iU4GMbl6UOvcYUMM/R4jrs4S5kvmU4vQbaTyDVjUbf+mJHAbBMm6l3zLXOF3
jepWBNY8zQRhpikHf3SQK/Su2N35jb+RNv0tfRPXyWAQSDxKje6MQ8RMdyPCUVr9XgV+qjIK
E61l7gpn3IBg5NULF3yAEIghWiXGczkUEBF5yMDrp8PGtht9V8ebdwqMHOPURuhcZfE9J3WO
kf3VbAkuBHfNUtefdnbczo76od+CIow9mz5cwEwu3rGiYWLjTInnoYgZEquDnmaxKG2B1edw
EV4w5R0mzC4f2+LarY+ihIOtj6K2RfXdTEUyldc2cBSohxPEk/enoSrxNYyNvrCm1LvG3/QK
XgsGb/PEMFPpan9vxu84x6yaYhUm1jWH7pXJXfU+BtT96q6DOPYTB3U+XcOm9uoiucUMeIfl
Lsk+0D1eFaJSu/EfDeaNlw1sZNAMzMHqyAcREOhPCYBPFdSPsGjoQfpDh4FZ3HhWpCIj1t9L
mrmUNe0xMNvuVzthmJXZVNK/aGVjdVT/q2ghf2W5uIBszcj28k7BjJqn/riRyDOb3fy0Vrts
KbJ+EKUcFZ2qN/Z5ruIdRpCxeU1LTkWyq58ZDLXVQq4TtnVo4MeHr8OFZCPFXZPyYjRIMj1w
dtWhQfkrmXUsTp0aqbWCTL+Gcfyyc8b8+YjL0vwEbwJdEr6wZpaOsleWyo8Jn7mIO560LHc6
UJeAk1l1qXugYWHk5+yyNvu0D8zxwoj8xjJj2O5E9kq0ohx4Bc8nEU9hEEST7aB9Qaa3mN+y
d/5/tHAC3trnqspCSaYt3500PSx2e1PbvYe7CWVqXQO20/NKRfbNLeUxvi6SzVEGtBJ16QD4
x5wmg4UddfkI8PkW6KHFfj8haBI7NRJsKu/ade4R1/jFWadjq0xZ7L8A767zPjDm/ZqGiEc3
4BRUJkO6tSwEFpFIOiSJCpRH7tkfFppj44REAm2eYB7FKIZPg7HtFJ2MBR67vOGouJ5z
/


--
-- PRO_UPDATE_CLEARING_ACC_TEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_update_clearing_acc_temp (
   p_cost_center         VARCHAR2,
   p_glsl_no             VARCHAR2,
   p_vouch_dt_fr         DATE,
   p_vouch_dt_to         DATE,
   p_output        OUT   VARCHAR2
)
IS
   CURSOR cur_gl_info
   IS
      (SELECT m.vouch_no, m.office_cd, d.glac_sl_no, c.glac_no,
              m.cost_center
         FROM acc_gl_trans_mst m, acc_gl_trans_dtl d, acc_gl_coa c
        WHERE m.vouch_no = d.vouch_no
          AND m.office_cd = d.office_cd
          -- AND m.cost_center = p_cost_center
          /*AND m.cost_center IN (
                 SELECT office_cd
                   FROM hrm_office
                  WHERE fun_find_service_off (office_cd) = '00001'
                    AND office_status != '03')*/
          AND m.vouch_dt BETWEEN p_vouch_dt_fr AND p_vouch_dt_to
          AND d.glac_sl_no <> '101811'
          AND c.glac_sl_no IN (SELECT glac_sl_no
                                 FROM acc_gl_coa
                                WHERE cntrl_glac_sl_no = '100001')
          AND d.glac_sl_no = c.glac_sl_no
          AND m.object_cd = '03860'
          AND m.vouch_dt >= TO_DATE ('01-Jan-2021'));

   rec_c     cur_gl_info%ROWTYPE;
   v_count   NUMBER                := 0;
   v_sl_no   NUMBER                := 0;
BEGIN
   OPEN cur_gl_info;

   LOOP
      FETCH cur_gl_info
       INTO rec_c;

      EXIT WHEN cur_gl_info%NOTFOUND;

      UPDATE acc_gl_trans_mst
         SET narration = 'Bank Clearing'
       WHERE vouch_no = rec_c.vouch_no AND office_cd = rec_c.office_cd;

      UPDATE acc_gl_trans_dtl
         SET glac_sl_no = '101811'
       WHERE vouch_no = rec_c.vouch_no
         AND office_cd = rec_c.office_cd
         AND glac_sl_no = rec_c.glac_sl_no;

      INSERT INTO acc_update_clearing_acc_temp
                  (office_cd, glsl_no, vouch_dt_fr,
                   vouch_dt_to, output, i_usr, i_dt, vouch_no
                  )
           VALUES (rec_c.cost_center, rec_c.glac_no, p_vouch_dt_fr,
                   p_vouch_dt_to, p_output, USER, SYSDATE, rec_c.vouch_no
                  );

      v_sl_no := v_sl_no + 1;

      IF v_count = 100
      THEN
         COMMIT;
         v_count := 0;
      ELSE
         v_count := v_count + 1;
      END IF;

      COMMIT;
   END LOOP;

   CLOSE cur_gl_info;

   COMMIT;
   p_output := 'Total Processed Record ' || v_sl_no;
/*INSERT INTO acc_update_clearing_acc_temp
             (office_cd, glsl_no, vouch_dt_fr, vouch_dt_to,
              output, i_usr, i_dt
             )
      VALUES (p_cost_center, p_glsl_no, p_vouch_dt_fr, p_vouch_dt_to,
              p_output, USER, SYSDATE
             );*/
END;
/


--
-- PRO_USER_APPROVAL_PRIV  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_user_approval_priv wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
956 3ac
rCdTYajDV5j5uMFqzLtlcuiM4N0wg5ArLtAFyi/NMZ2sDI0NjumhKAB+ifKHW0la30vPGhO2
oybMDSXl8Akyqqpb/XxXn3dM3EZCIHX+cLhTcGwZJzezOpsF5HPHRXXBglmaQQ/XOpubQLll
Ri94o+A4EdbkyncuywIW/gLOZbu42OVa9C6+pAYzUVKv6d3PK4BKpC1QJyCX5kInyqcytqxt
543IrR+KaXfoEcPm6EVC3WbmpHQfXXAaAn87YCr1E37WPKmZY1BRr+KnGstouAPv71kKHKwq
2uA0uE2of8D+OfcVIEUMU+Z8N2BThyunF6Kjiqjx3zsBVTUSYreVgIXizro9e0vDAiXCMrYn
hL8Kz5AAj6Rr33YbfBTiUiZpB3KSErBUhdMr1a+r56Hv0Anu1IlfK5HBapr+BLm/xMlnsznX
vP88FhxvGE/yR5Q4vKYOzNuOyHNgfLA4cofZABRx/6MQdUixWJDI5dCEMCrZCbxewWh2l/3R
xJIU0Q3K/FOpobHQRitWlCatxnDlHjx2YZ/Va9ZO4rw3MRDpaJoCrRjQfG1HwOk5bp37f+g7
tBl/BUga1Np+Nedy6+nb7wlJ+5Z+nKczdVMT1PTMNcQWP1bfKYZSAoH+MIIGCsZQhLJvYuwG
+lqyEKhsNOMOfr3LG3B4uW6TYihU711owsZTLCFb7bGwKKMz3P75moUgEz5R/aR4QtnBeNOL
OoNsdt/RwO0MWDFv5XyU6yHle83gjiRtUPrDsTJaipiIvkAzV2aovictMVQl7sQ5m+I8oVOa
fJEuphn++IXO1aZ6RajcE2kyYgjXCadeY9uDB1xf1EXh4oTNH/oibZKcc7YImyOSQpI3IeSY
dekZrLBVjDEfet5uB0kXADBrjIJTYyMJmxoZPi33CTpUanb/3RlYrrWmfqioSg==
/


--
-- PRO_UTS_ELEC_BILL_CAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_uts_elec_bill_cal wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
3ef3 d32
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
CAaoLpeYquT7nqMSqg==
/


--
-- PRO_UTS_RENT_CAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_uts_rent_cal wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
2d61 a17
IZU8Uy4E5tf8CUffC7k9t/Elqm4wg5WrMUj9eEtykp68jvHgNWEdFEQGxd0cie3NHMWcHlSu
bVF9hDcbPmjSYiyaqP4GKnHipMQ2dLoGR7jR/+lPVI1QoDiJ5IHOvnPB2ZrNhrtPvKCdc5JJ
MdjnqLBhexwDRmGh8l+NjXMs/vMMuWYzI7GoGqDcEVhgbB9T++dSt0PeE5NbDuezYoz1veZu
Q0ITmzOFnjao8FcqqULprDe9/xi9z+CheeBTqRPs88EVRhpfXNyJ5e57FSeYl/yNcQYFp8xL
jZHiIQEbsmSNc1GLEpSSEj8isxNK8hAY3a5dSMMEqz4TZuhffuIPu4UeYkK/yup4lzF6I7h/
Sgs+F5CXbk8fbmytxATSkOkx7TT7v4phAXAOylaHUsPvP9h0oO5wuDkM5Tj3ceGZzNRuceNg
elTK8Wt712pd8NFGUUYHAe800paNaUnoE4kuEaxh5yo+uTNhcv1Q7QWZ8gZJ3lSy6ig/smsm
eivgHUiTgC3orS5XPjOEfYM7oLZtcwTJO5D/2YzHusM+DZ8DZSaexZQ5fHf7fMXrg+x3C3m9
goA6j2o8nx/6UceOwaAujMcA4XaTXLSnypWmpe5K5sI+u8fCiKDMTuN4gUrYKSMMy5GkO7CG
UWWkDWAs3IiMZp+8sQtFvdEqOcOIH90kJ39VLkVybFuvtMnyfNpEcAoLJQfYizKcFA09E5Ij
AdpNhHjGNOFyrYPdkEFKtqpbAh9befp3OT8giUbsPRrYV2jZepz4xnNTMmnTZG1oS2F9G6Vi
/+/UQrin0BnbsM7Kc91WiN22l/+2lw2ciTiXJgmtRms+CheRRQLF7XkvvqZNNQGC4E9PFt/D
ORPp8f68xZMTfVYrh7sxv9gEjlReGW5aDV+IUjj6B1+aJkd6r6dKY1Sf874axQxra85Z3FYd
ThCC/+UAUIvYlwUgucmH5/XH9jZX81dBlF2gdPLg/aCZUgjCLx+7sN0oW6RLWak4NVyqUNMV
PFjGmCUuXQjMkja72tQBnModSlaIK9b7RxXK7GYD9/Y4gIvnwdyJbY5VzZjTgecGhQjrHEsn
u5MqGZdlS1iVUX/wMqfwoIoqJrvpc9i0iA/oicEUlTRkUIOIcII9vN3kJmlsXl3b7k8GDUS5
DQTyeyMMxrSlvTR66MSTPqV6O6NaC28lQAIhTKjXCVr2jiXnAqAAqC7cW++pSo+lXxvyr5Yl
ZFXhqfmu7S3mXXSOKmmDLzcSU/nqqu4wPcvXds+9T9toqX78x2JJjpFz5x6GxipBJ7w/bDo+
7Nlh/ZOZ16aBDp6u6dKmRyFS1+6E2JruTC8q9XNLVUgdoXHX6AaZwAAMHs1W2z10qfG+A9Nm
AiJQiP5L236gydl3GPr+PDoNTUgA/5F7jAlP4qoYtwxFsJxH5fASru8T4iZfw7F8/f5s/1IQ
DTaSLldWVwTOSpqtGY+6Tdp+pOyTD0XSQ0v71mNMwRmNdETFpk4CQe5pRSQ30iDE4fypLV6O
YQyRbNsBGX8XkM1pR8k8kqgcrFl5RWzzIAytft37kne7RI+56+s5Ja4rjf8uGeq4ZkWMppRb
DIVZQKx0OjlEBIKynn8UiHHUEkDeU+ELwBZwg1eXkKZYBOPv2ibZm4N5U9CbQOY3JgfUpAhi
sZM8ELSoqSPefPBzp3boJARWFysKf3N9gs7PYFwERH907MbS61ODc+rOtbsplsDkZR00Nlub
qPb7skZZT4iFx70uvQEWj43cnZaPPRksvsaEuMzlEtM8VLLITs2N1hslkd4h7Ts8pvS8xlTI
fdZt10kz3MlnOfzZ30F11x5vx3RnDksjAoSXrYU9XTZLwgt4SipWee0KZ72DLhe+Ccw1h2Iq
YHPlpM4JclhBFzYPe2LQt7T8NacmXXDb6mZMSiVx5gDYf1rZjvUXEcDYXUdoDdxeUBkSnDnY
xBqQg1StIYrHoVsQQ43ZPEvBwDuHw50JmBgU+5KBh38etBdVbx7KhiUwC9cn9EUOsgnk5BUB
8ZmcXXt4vDeyYW3IKiZmhqvBuQJsQekoEx4EmOUrVqu0UMZoMt7rZkDwQF9VmeuL5fvonaX5
WUc4VUEtvSlQ96jOU0V4D8Z0cQe4dBUyptiq88I4lik5Rgc2kgZIZzBaNtLH1lYZQF/SAFgw
nN1Dr+zRrDNM2xyiVrm8aWugyipF24IRtKgI3o4aodZYfIxGgJQcq4x48VgCCQRmR1ZEbkYG
s64acGBNVbZaVCknJtPUCsKliiq6ctVyruDeB0bIkxmovr3wKuMWZ6Kqx4SnO6iWZ60RXcj+
hooJZPzoney3ia8kMQo+sdSHBtq/5mGEnFis19se1Gm24o3JVRYnoyq3Jv0LnvxqJGaIa4f/
X5X+Wukdpt8BMks8CGYWEYbf4C8cMXccV0U44gij5YD1DRSpuSaF1JsHi4HSqVlUjcFSieTY
I+wWMk/u9RVtfYTmruBpRfy0YvTDQc8n6nb/elVOTwNpOTsphobBgJvGSR4sGpr3DXVjsZ1d
qQ9o2DYeSSsNjE4bzD9OVZ2PVTGG
/


--
-- PRO_UTS_WATER_BILL_CAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_uts_water_bill_cal wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
248b 8c6
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
/


--
-- PRO_VALUATION_FINALIZE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_valuation_finalize wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
a7e 416
qkGUHTB9CuXbnRwTjxfZTyNO0pswg5ArTCCDfI5Vxz+VEB0aEcW3MyUYoUjgTcQU/+Svl7eV
g8OE4GmU3yZequTihi9uiaZ5GuXUvCIi/m4e0HGl49SjaTDPoxOdTkNPOp8th1gHlSe8ceTV
DiymZ0joFH9/zHdfRHdPzee6hhgsdk/n08y3Xq8wcdAXe+3oURhQ8SNQPXhsZkWoBl6U1qnb
TTSICx3lUsU2/mdTKxxgfOd1oFJet8hxZv1BSxErTt3UQ+fR4nFa2zLoDukNiODHpxgWYvYc
UCzL4qz2eziTcNZx2TVa7FBarz8rSx0XiOWLhj3vC6/rwDn53lEEcl933vKVfh+bhkBRQt+R
YFJz8xZIdrdAPqjSNj/tNfqQGWAhxBE1svH76ucNuqsFk0vEr3KUlIX18VcOVrzFtgGGyVDn
Ix/tDr1GfxKZgHzkz7g78huwJJeIMCvq5o0LP6pityDY9KAW6QhmmuI8P8BYUYyBRNEzcy6S
bAxWAVz3efeeDoYewbZvB49R5pgyZkFAynXkK0jvhbbxAg5N3Rl1DweQWmcbBEoB5hr1tY3p
vTddIYIUXJ+NJRAFbBEjNsVJA4nG55xLf5VUbZycx0tAibjrzKIy4UltKjsluETT4SUlrCaT
X89G/8nhMdsP1YNVWr33l11GldTuzTT1O/zjBsZTMCIog8xz5ZIZJ2AmQrHxIC1RKzSZilbv
MyO/r24XhLrNj+MaB1mlDSJ8/s5heX4i5FCsiSYrF18/PiPhJh1Nud1edL/ELDJ0b/GfxbnD
a8RZxZOcUEuY4boxmXsB67dbRp2JYq56NPHQYbNQKQ1ae8Q5dp2icVgJtcDCSc5LH6DqP5qz
OvIIVVwQrSfBBRO5Gcp8nyAv/oaxzx0kbeBEvx6a0Nngumhqkvsj8CmWlhdVP2Sk/s6zohxT
2UDNmNjvN7eKwdmw4D+1aFiVWD7KDCPft+TeEOp+30u03SftAsHg9iwSYR5V2eqbKhnzO4Db
NS1nP65LkAbDz63PzijgIwt4
/


--
-- PRO_VALUATION_SUMMERY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_valuation_summery (
   p_val_date_fr        DATE,
   p_val_date_to        DATE,
   p_grace_period       NUMBER,
   p_user               VARCHAR2,
   p_process_tp         CHAR,
   --here 1=Ony for summery report , 2=Summery report   Preparation
   p_data_tp            CHAR,
   p_error          OUT VARCHAR2
)
IS
   v_inforce_policy           NUMBER := 0;
   v_paidup_policy            NUMBER := 0;
   v_new_policy               NUMBER := 0;
   v_deffered_policy          NUMBER := 0;
   v_second_yr_policy         NUMBER := 0;
   v_ren_policy               NUMBER := 0;
   v_revive_policy            NUMBER := 0;
   v_matured_policy           NUMBER := 0;
   v_surrendered_policy       NUMBER := 0;
   v_death_policy             NUMBER := 0;
   v_lapse_policy             NUMBER := 0;
   v_op_inf_paidup_pol        NUMBER := 0;
   v_val_status               CHAR (1);
   v_lapse_in_2014_data       NUMBER := 0;
   v_count                    NUMBER := 0;
   v_inforce_policy_sum       NUMBER := 0;
   v_paidup_policy_sum        NUMBER := 0;
   v_new_policy_sum           NUMBER := 0;
   v_deffered_policy_sum      NUMBER := 0;
   v_second_yr_policy_sum     NUMBER := 0;
   v_renewal_yr_policy_sum    NUMBER := 0;
   v_revive_policy_sum        NUMBER := 0;
   v_matured_policy_sum       NUMBER := 0;
   v_surrendered_policy_sum   NUMBER := 0;
   v_death_policy_sum         NUMBER := 0;
   v_lapse_policy_sum         NUMBER := 0;
   v_matinforce_policy        NUMBER := 0;
   v_matpaidup_policy         NUMBER := 0;
   v_total_policy             NUMBER := 0;
   v_total_claim_policy       NUMBER := 0;
   v_curlpase_policy          NUMBER := 0;
   v_counter                  NUMBER := 1;
   v_matinforce_sum           NUMBER := 0;
   v_matpaidup_sum            NUMBER := 0;
BEGIN
   IF TO_CHAR (p_val_date_to, 'RRRR') != '2016'
   THEN
      BEGIN
         SELECT   val_status
           INTO   v_val_status
           FROM   val_valuation_summery
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');
      EXCEPTION
         WHEN OTHERS
         THEN
            v_val_status := NULL;
      END;

      IF NVL (v_val_status, '0') != '1'
      THEN
         IF p_process_tp = '2'
         THEN
            --New Policy
            IF p_data_tp IN (1, 4)
            THEN
               SELECT   COUNT (1)
                 INTO   v_count
                 FROM   val_new_policy
                WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               IF v_count > 0
               THEN
                  DELETE FROM   val_new_policy
                        WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

                  COMMIT;
               END IF;

               INSERT INTO val_new_policy (pgid,
                                           POLICY,
                                           datcom,
                                           riskdate,
                                           PLAN,
                                           term,
                                           dob,
                                           age,
                                           sumass,
                                           sumatrisk,
                                           apen_amt,
                                           poption,
                                           aprem,
                                           paymode,
                                           lifepre,
                                           supprem,
                                           extraprem,
                                           totprem,
                                           nduedate,
                                           pstatus,
                                           maturitydt,
                                           runyr,
                                           adjsumass,
                                           last_paid_date,
                                           val_year,
                                           val_date_from,
                                           val_date_to,
                                           last_paid_instl_no,
                                           policy_installment,
                                           policy_status,
                                           pay_mode_cd,
                                           policy_option)
                  (SELECT   s.pgid,
                            fun_ins_pgid_to_policy_no (s.pgid),
                            s.comm_date,
                            s.risk_date,
                            s.product_cd,
                            s.term,
                            s.dob,
                            s.age,
                            s.sum_assured,
                            fun_sum_at_risk (s.pgid),
                            CASE
                               WHEN s.product_cd = '07'
                               THEN
                                  (s.sum_assured / 10)
                               ELSE
                                  0
                            END,
                            s.option_cd,
                            s.total_yearly_premium,
                            s.pay_mode_cd,
                            s.life_premium,
                            NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                            + NVL (s.suppl_ben_premium, 0),
                            ROUND (NVL (s.extra_premium, 0)),
                              ROUND (s.life_premium)
                            + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                            + NVL (s.suppl_ben_premium, 0)
                            + ROUND (NVL (s.extra_premium, 0)),
                            ADD_MONTHS (
                               s.last_paid_date,
                               DECODE (s.pay_mode_cd,
                                       '01', 12,
                                       '02', 6,
                                       '03', 3,
                                       '04', 1,
                                       s.term * 12)
                            ),
                            s.policy_status,
                            ADD_MONTHS (s.comm_date, s.term * 12),
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            fun_paidup_value_val (s.pgid)
                            - fun_sb_available_amt (
                                 s.term,
                                 ROUND (
                                    s.last_paid_inst_no
                                    / DECODE (s.pay_mode_cd,
                                              '01', 1,
                                              '02', 2,
                                              '03', 4,
                                              '04', 12,
                                              1),
                                    2
                                 ),
                                 s.product_cd,
                                 s.sum_assured
                              ),
                            s.last_paid_date,
                            TO_CHAR (p_val_date_to, 'RRRR'),
                            p_val_date_fr,
                            p_val_date_to,
                            s.last_paid_inst_no,
                            s.term
                            * DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            rep_fun_ins_policy_status (s.policy_status),
                            DECODE (s.pay_mode_cd,
                                    '01', 'Yearly',
                                    '02', 'Half-yearly',
                                    '03', 'Quarterly',
                                    '04', 'Monthly',
                                    'Single'),
                            DECODE (s.option_cd, '1', 'A', '2', 'B', 'C')
                     FROM   ins_p_summery s, ins_p_proposal p
                    WHERE       s.pgid = p.pgid
                            AND p.policy_no IS NOT NULL
                            AND s.i_dt <= p_val_date_to
                            AND s.comm_date BETWEEN p_val_date_fr
                                                AND  p_val_date_to);

               COMMIT;
            END IF;
         END IF;

         --Death Policy
         IF p_data_tp IN (1, 13)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_death_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_death_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_death_policy (pgid,
                                          POLICY,
                                          datcom,
                                          riskdate,
                                          PLAN,
                                          term,
                                          dob,
                                          age,
                                          sumass,
                                          sumatrisk,
                                          apen_amt,
                                          poption,
                                          aprem,
                                          paymode,
                                          lifepre,
                                          supprem,
                                          extraprem,
                                          totprem,
                                          nduedate,
                                          pstatus,
                                          maturitydt,
                                          runyr,
                                          adjsumass,
                                          last_paid_date,
                                          val_year,
                                          val_date_from,
                                          val_date_to,
                                          sb_amount,
                                          paidup_sumass,
                                          paidup_adjsumass,
                                          last_paid_instl_no,
                                          policy_installment,
                                          policy_status,
                                          pay_mode_cd,
                                          policy_option)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         ROUND (s.life_premium),
                         NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0),
                         ROUND (NVL (s.extra_premium, 0)),
                           ROUND (s.life_premium)
                         + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0)
                         + ROUND (NVL (s.extra_premium, 0)),
                         CASE
                            WHEN (ADD_MONTHS (
                                     s.last_paid_date,
                                     DECODE (s.pay_mode_cd,
                                             '01', 12,
                                             '02', 6,
                                             '03', 3,
                                             '04', 1,
                                             s.term * 12)
                                  )) > s.maturity_date
                            THEN
                               s.maturity_date
                            ELSE
                               (ADD_MONTHS (
                                   s.last_paid_date,
                                   DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           s.term * 12)
                                ))
                         END,
                         '02' policy_status,
                         ADD_MONTHS (s.comm_date, s.term * 12),
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         ),
                         fun_paidup_value_val (s.pgid),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_inst_no,
                         s.term
                         * DECODE (s.pay_mode_cd,
                                   '01', 1,
                                   '02', 2,
                                   '03', 4,
                                   '04', 12,
                                   1),
                         rep_fun_ins_policy_status ('02'),
                         DECODE (s.pay_mode_cd,
                                 '01', 'Yearly',
                                 '02', 'Half-yearly',
                                 '03', 'Quarterly',
                                 '04', 'Monthly',
                                 'Single'),
                         DECODE (s.option_cd, '1', 'A', '2', 'B', 'C')
                  FROM   clm_claim_payable_gen p, ins_p_summery s
                 WHERE --p.approved_dt BETWEEN p_val_date_fr AND p_val_date_to
                      s  .pgid = p.pgid
                         AND ( (p.vouch_no IS NOT NULL
                                AND vouch_dt BETWEEN NVL (p_val_date_fr,
                                                          vouch_dt)
                                                 AND  NVL (p_val_date_to,
                                                           vouch_dt))
                              OR (p.vouch_no_2nd IS NOT NULL
                                  AND vouch_no_2nd IN
                                           (SELECT   vouch_no
                                              FROM   acc_gl_trans_mst
                                             WHERE   vouch_dt BETWEEN NVL (
                                                                         p_val_date_fr,
                                                                         vouch_dt
                                                                      )
                                                                  AND  NVL (
                                                                          p_val_date_to,
                                                                          vouch_dt
                                                                       ))))
                         AND clm_cause_cd = '01'
                         AND approved_flag = 'Y'
                         AND p.pgid = s.pgid
                         --AND s.policy_status = '02'
                         AND comm_date <= p_val_date_to);

            COMMIT;

            --Update the bonus amount in  val_death_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_death_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '1',
                     ---Here 1 = death claim,  2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_death_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_inforce_policy
         END IF;

         --matured Inforce Policy
         IF p_data_tp IN (1, 11)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_inforce_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_inforce_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_inforce_policy (pgid,
                                                    POLICY,
                                                    datcom,
                                                    riskdate,
                                                    PLAN,
                                                    term,
                                                    dob,
                                                    age,
                                                    sumass,
                                                    sumatrisk,
                                                    apen_amt,
                                                    poption,
                                                    aprem,
                                                    paymode,
                                                    lifepre,
                                                    supprem,
                                                    extraprem,
                                                    totprem,
                                                    nduedate,
                                                    pstatus,
                                                    maturitydt,
                                                    runyr,
                                                    adjsumass,
                                                    last_paid_date,
                                                    val_year,
                                                    val_date_from,
                                                    val_date_to,
                                                    sb_amount,
                                                    paidup_sumass,
                                                    paidup_adjsumass,
                                                    last_paid_instl_no,
                                                    policy_installment,
                                                    policy_status,
                                                    pay_mode_cd,
                                                    policy_option)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         ROUND (s.life_premium),
                         NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0),
                         ROUND (NVL (s.extra_premium, 0)),
                           ROUND (s.life_premium)
                         + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0)
                         + ROUND (NVL (s.extra_premium, 0)),
                         CASE
                            WHEN (ADD_MONTHS (
                                     s.last_paid_date,
                                     DECODE (s.pay_mode_cd,
                                             '01', 12,
                                             '02', 6,
                                             '03', 3,
                                             '04', 1,
                                             s.term * 12)
                                  )) > s.maturity_date
                            THEN
                               s.maturity_date
                            ELSE
                               (ADD_MONTHS (
                                   s.last_paid_date,
                                   DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           s.term * 12)
                                ))
                         END,
                         s.policy_status,
                         ADD_MONTHS (s.comm_date, s.term * 12),
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         ),
                         fun_paidup_value_val (s.pgid),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_inst_no,
                         s.term
                         * DECODE (s.pay_mode_cd,
                                   '01', 1,
                                   '02', 2,
                                   '03', 4,
                                   '04', 12,
                                   1),
                         rep_fun_ins_policy_status (s.policy_status),
                         DECODE (s.pay_mode_cd,
                                 '01', 'Yearly',
                                 '02', 'Half-yearly',
                                 '03', 'Quarterly',
                                 '04', 'Monthly',
                                 'Single'),
                         DECODE (s.option_cd, '1', 'A', '2', 'B', 'C')
                  FROM   ins_p_summery s, ins_p_proposal p
                 WHERE       s.pgid = p.pgid
                         AND p.policy_no IS NOT NULL
                         AND s.i_dt <= p_val_date_to
                         AND s.maturity_date BETWEEN p_val_date_fr
                                                 AND  p_val_date_to
                         AND s.policy_status IN ('09', '07', '08', '11')
                         AND s.comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;

            --Update the bonus amount in  val_matured_inforce_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_matured_inforce_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '2',
                     ---Here 1 = death claim,  2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_matured_inforce_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_matured_inforce_policy
         END IF;

         --matured paidup Policy
         IF p_data_tp IN (1, 11)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_paidup_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_paidup_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_paidup_policy (pgid,
                                                   POLICY,
                                                   datcom,
                                                   riskdate,
                                                   PLAN,
                                                   term,
                                                   dob,
                                                   age,
                                                   sumass,
                                                   sumatrisk,
                                                   apen_amt,
                                                   poption,
                                                   aprem,
                                                   paymode,
                                                   lifepre,
                                                   supprem,
                                                   extraprem,
                                                   totprem,
                                                   nduedate,
                                                   pstatus,
                                                   maturitydt,
                                                   runyr,
                                                   adjsumass,
                                                   last_paid_date,
                                                   val_year,
                                                   val_date_from,
                                                   val_date_to,
                                                   sb_amount,
                                                   paidup_sumass,
                                                   paidup_adjsumass,
                                                   last_paid_instl_no,
                                                   policy_installment,
                                                   policy_status,
                                                   pay_mode_cd,
                                                   policy_option)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         ROUND (s.life_premium),
                         NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0),
                         ROUND (NVL (s.extra_premium, 0)),
                           ROUND (s.life_premium)
                         + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0)
                         + ROUND (NVL (s.extra_premium, 0)),
                         CASE
                            WHEN (ADD_MONTHS (
                                     s.last_paid_date,
                                     DECODE (s.pay_mode_cd,
                                             '01', 12,
                                             '02', 6,
                                             '03', 3,
                                             '04', 1,
                                             s.term * 12)
                                  )) > s.maturity_date
                            THEN
                               s.maturity_date
                            ELSE
                               (ADD_MONTHS (
                                   s.last_paid_date,
                                   DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           s.term * 12)
                                ))
                         END,
                         s.policy_status,
                         ADD_MONTHS (s.comm_date, s.term * 12),
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         ),
                         fun_paidup_value_val (s.pgid),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_inst_no,
                         s.term
                         * DECODE (s.pay_mode_cd,
                                   '01', 1,
                                   '02', 2,
                                   '03', 4,
                                   '04', 12,
                                   1),
                         rep_fun_ins_policy_status (s.policy_status),
                         DECODE (s.pay_mode_cd,
                                 '01', 'Yearly',
                                 '02', 'Half-yearly',
                                 '03', 'Quarterly',
                                 '04', 'Monthly',
                                 'Single'),
                         DECODE (s.option_cd, '1', 'A', '2', 'B', 'C')
                  FROM   ins_p_summery s, ins_p_proposal p
                 WHERE       s.pgid = p.pgid
                         AND p.policy_no IS NOT NULL
                         AND s.i_dt <= p_val_date_to
                         AND s.maturity_date BETWEEN p_val_date_fr
                                                 AND  p_val_date_to
                         AND s.policy_status IN ('01', '03')
                         AND s.comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;

            --Update the bonus amount in  val_matured_paidup_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_matured_paidup_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '3',
                     ---Here 1 = death claim,  2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_matured_paidup_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_matured_paidup_policy
         END IF;

         -- 4 surrender Policy
         IF p_data_tp IN (1, 12)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_surrender_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_surrender_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_surrender_policy (pgid,
                                              POLICY,
                                              datcom,
                                              riskdate,
                                              PLAN,
                                              term,
                                              dob,
                                              age,
                                              sumass,
                                              sumatrisk,
                                              apen_amt,
                                              poption,
                                              aprem,
                                              paymode,
                                              lifepre,
                                              supprem,
                                              extraprem,
                                              totprem,
                                              nduedate,
                                              pstatus,
                                              maturitydt,
                                              runyr,
                                              adjsumass,
                                              last_paid_date,
                                              val_year,
                                              val_date_from,
                                              val_date_to,
                                              last_paid_instl_no,
                                              policy_installment,
                                              policy_status,
                                              pay_mode_cd,
                                              policy_option)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         ROUND (s.life_premium),
                         NVL (s.suppl_product_premium, 0)
                         + NVL (s.suppl_ben_premium, 0),
                         ROUND (NVL (s.extra_premium, 0)),
                           ROUND (s.life_premium)
                         + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0)
                         + ROUND (NVL (s.extra_premium, 0)),
                         CASE
                            WHEN (ADD_MONTHS (
                                     s.last_paid_date,
                                     DECODE (s.pay_mode_cd,
                                             '01', 12,
                                             '02', 6,
                                             '03', 3,
                                             '04', 1,
                                             s.term * 12)
                                  )) > s.maturity_date
                            THEN
                               s.maturity_date
                            ELSE
                               (ADD_MONTHS (
                                   s.last_paid_date,
                                   DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           s.term * 12)
                                ))
                         END,
                         '04' policy_status,
                         ADD_MONTHS (s.comm_date, s.term * 12),
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         s.last_paid_inst_no,
                         s.term
                         * DECODE (s.pay_mode_cd,
                                   '01', 1,
                                   '02', 2,
                                   '03', 4,
                                   '04', 12,
                                   1),
                         rep_fun_ins_policy_status ('04'),
                         DECODE (s.pay_mode_cd,
                                 '01', 'Yearly',
                                 '02', 'Half-yearly',
                                 '03', 'Quarterly',
                                 '04', 'Monthly',
                                 'Single'),
                         DECODE (s.option_cd, '1', 'A', '2', 'B', 'C')
                  FROM   sur_disburs_mst p,
                         ins_p_summery s,
                         ins_p_proposal pp
                 WHERE       s.pgid = pp.pgid
                         AND pp.policy_no IS NOT NULL
                         AND s.i_dt <= p_val_date_to
                         AND p.disbursment_date BETWEEN p_val_date_fr
                                                    AND  p_val_date_to
                         AND s.pgid = p.pgid
                         -- AND s.policy_status = '04'
                         AND s.comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;

            --Update the bonus amount in  val_surrender_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_surrender_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '4',
                     ---Here 1 = death claim,  2=Matured Calim,3=Paidup Maturity , 4 = Surrender Claim
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_surrender_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_surrender_policy
         END IF;

         --Maturity Lapse Policy
         IF p_data_tp IN (1, 14)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_lapse_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_lapse_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_lapse_policy (pgid,
                                                  POLICY,
                                                  datcom,
                                                  riskdate,
                                                  PLAN,
                                                  term,
                                                  dob,
                                                  age,
                                                  sumass,
                                                  sumatrisk,
                                                  apen_amt,
                                                  poption,
                                                  aprem,
                                                  paymode,
                                                  lifepre,
                                                  supprem,
                                                  extraprem,
                                                  totprem,
                                                  nduedate,
                                                  pstatus,
                                                  maturitydt,
                                                  runyr,
                                                  adjsumass,
                                                  last_paid_date,
                                                  val_year,
                                                  val_date_from,
                                                  val_date_to,
                                                  sb_amount,
                                                  paidup_sumass,
                                                  paidup_adjsumass,
                                                  last_paid_instl_no,
                                                  policy_installment,
                                                  policy_status,
                                                  pay_mode_cd,
                                                  policy_option)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         ROUND (s.life_premium),
                         NVL (s.suppl_product_premium, 0)
                         + NVL (s.suppl_ben_premium, 0),
                         ROUND (NVL (s.extra_premium, 0)),
                           ROUND (s.life_premium)
                         + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0)
                         + ROUND (NVL (s.extra_premium, 0)),
                         CASE
                            WHEN (ADD_MONTHS (
                                     s.last_paid_date,
                                     DECODE (s.pay_mode_cd,
                                             '01', 12,
                                             '02', 6,
                                             '03', 3,
                                             '04', 1,
                                             s.term * 12)
                                  )) > s.maturity_date
                            THEN
                               s.maturity_date
                            ELSE
                               (ADD_MONTHS (
                                   s.last_paid_date,
                                   DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           s.term * 12)
                                ))
                         END,
                         '10' policy_status,
                         ADD_MONTHS (s.comm_date, s.term * 12),
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         ),
                         fun_paidup_value_val (s.pgid),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_inst_no,
                         s.term
                         * DECODE (s.pay_mode_cd,
                                   '01', 1,
                                   '02', 2,
                                   '03', 4,
                                   '04', 12,
                                   1),
                         rep_fun_ins_policy_status ('10'),
                         DECODE (s.pay_mode_cd,
                                 '01', 'Yearly',
                                 '02', 'Half-yearly',
                                 '03', 'Quarterly',
                                 '04', 'Monthly',
                                 'Single'),
                         DECODE (s.option_cd, '1', 'A', '2', 'B', 'C')
                  FROM   ins_p_summery s, ins_p_proposal p
                 WHERE       s.pgid = p.pgid
                         AND p.policy_no IS NOT NULL
                         AND s.i_dt <= p_val_date_to
                         AND s.policy_status = '10'
                         AND s.maturity_date < TO_DATE (p_val_date_to + 1)
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   clm_claim_payable_gen
                                 WHERE       pgid = s.pgid
                                         AND clm_cause_cd IN ('02', '06')
                                         AND clm_detl_cd = '01'
                                         AND NVL (payment_status, 'N') = 'Y')
                         AND s.comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_surrender_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         --Update the bonus amount in  val_death_policy
         /* DECLARE
             v_rb_bonus            NUMBER (10);
             v_arb_bonus           NUMBER (10);
             v_tb_bonus            NUMBER (10);
             v_inforce_bon_count   NUMBER := 0;
          BEGIN
             FOR x
             IN (SELECT   v.pgid,
                          v.datcom,
                          v.term,
                          v.PLAN,
                          v.sumass,
                          v.pstatus,
                          v.last_paid_date,
                          v.paymode,
                          s.last_paid_inst_no,
                          p.policy_tp_cd
                   FROM   val_death_policy v,
                          ins_p_summery s,
                          ins_product p
                  WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                          AND val_date_from = p_val_date_fr
                          AND val_date_to = p_val_date_to
                          AND v.pgid = s.pgid
                          AND s.product_cd = p.product_cd
                          AND v.last_paid_date IS NOT NULL)
             LOOP
                pro_policy_bonus_cal_val (
                   p_pgid                 => x.pgid,
                   p_comm_date            => x.datcom,
                   p_term                 => x.term,
                   p_product_cd           => x.PLAN,
                   p_sum_assured          => x.sumass,
                   p_policy_tp_cd         => x.policy_tp_cd,
                   p_applicable_on        => '1',
                   ---Here 1 = death claim,  2=Matured Calim,3=Paidup Maturity
                   p_no_of_anf_loan_yr    => 0,
                   p_policy_status        => x.pstatus,
                   p_max_payment_dt       => x.last_paid_date,
                   p_irg_bonus_bar_date   => x.last_paid_date,
                   --same as  p_max_payment_dt
                   p_last_paid_date       => x.last_paid_date,
                   p_pay_mode_cd          => x.paymode,
                   p_last_paid_inst_no    => x.last_paid_inst_no,
                   p_rb_bonus             => v_rb_bonus,
                   p_arb_bonus            => v_arb_bonus,
                   p_tb_bonus             => v_tb_bonus
                );

                UPDATE   val_death_policy
                   SET   rb_amount = v_rb_bonus,
                         arb_amount = v_arb_bonus,
                         total_bonus = v_rb_bonus + v_arb_bonus
                 WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                         AND val_date_from = p_val_date_fr
                         AND val_date_to = p_val_date_to
                         AND pgid = x.pgid;

                IF v_inforce_bon_count = 500
                THEN
                   COMMIT;
                   v_inforce_bon_count := 0;
                ELSE
                   v_inforce_bon_count := v_inforce_bon_count + 1;
                END IF;
             END LOOP;

             COMMIT;
          END;   */
         ---End of val_inforce_policy
         END IF;

         --Inforce policy
         IF p_data_tp IN (1, 2)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_inforce_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_inforce_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO INS.VAL_INFORCE_POLICY (pgid,
                                                POLICY,
                                                datcom,
                                                riskdate,
                                                PLAN,
                                                term,
                                                dob,
                                                age,
                                                sumass,
                                                sumatrisk,
                                                apen_amt,
                                                poption,
                                                aprem,
                                                paymode,
                                                lifepre,
                                                supprem,
                                                extraprem,
                                                totprem,
                                                nduedate,
                                                pstatus,
                                                maturitydt,
                                                runyr,
                                                adjsumass,
                                                last_paid_date,
                                                val_year,
                                                val_date_from,
                                                val_date_to,
                                                sb_amount,
                                                paidup_sumass,
                                                last_paid_instl_no,
                                                policy_installment,
                                                policy_status,
                                                pay_mode_cd,
                                                policy_option)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         NVL (s.total_yearly_premium, 0),
                         s.pay_mode_cd,
                         ROUND (s.life_premium),
                         NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0),
                         ROUND (NVL (s.extra_premium, 0)),
                           ROUND (s.life_premium)
                         + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0)
                         + ROUND (NVL (s.extra_premium, 0)),
                         CASE
                            WHEN (ADD_MONTHS (
                                     s.last_paid_date,
                                     DECODE (s.pay_mode_cd,
                                             '01', 12,
                                             '02', 6,
                                             '03', 3,
                                             '04', 1,
                                             s.term * 12)
                                  )) > s.maturity_date
                            THEN
                               s.maturity_date
                            ELSE
                               (ADD_MONTHS (
                                   s.last_paid_date,
                                   DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           s.term * 12)
                                ))
                         END,
                         '09' policy_status,
                         ADD_MONTHS (s.comm_date, s.term * 12),
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         /*  fun_paidup_value_val (s.pgid)   "Only for Inforce Policies ( Full Sum Assured - SB)"   */
                         s.sum_assured
                         - NVL (
                              fun_sb_available_amt (
                                 s.term,
                                 ROUND (
                                    ( (CASE
                                          WHEN s.last_paid_date >
                                                  p_val_date_to
                                          THEN
                                             p_val_date_to
                                          ELSE
                                             s.last_paid_date
                                       END
                                       - s.comm_date)
                                     / 365.242199),
                                    2
                                 ),
                                 s.product_cd,
                                 s.sum_assured
                              ),
                              0
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         NVL (
                            fun_sb_available_amt (
                               s.term,
                               ROUND (
                                  ( (CASE
                                        WHEN s.last_paid_date > p_val_date_to
                                        THEN
                                           p_val_date_to
                                        ELSE
                                           s.last_paid_date
                                     END
                                     - s.comm_date)
                                   / 365.242199),
                                  2
                               ),
                               s.product_cd,
                               s.sum_assured
                            ),
                            0
                         ),
                         NVL (fun_paidup_value_val (s.pgid), 0),
                         s.last_paid_inst_no,
                         s.term
                         * DECODE (s.pay_mode_cd,
                                   '01', 1,
                                   '02', 2,
                                   '03', 4,
                                   '04', 12,
                                   1),
                         rep_fun_ins_policy_status ('09'),
                         DECODE (s.pay_mode_cd,
                                 '01', 'Yearly',
                                 '02', 'Half-yearly',
                                 '03', 'Quarterly',
                                 '04', 'Monthly',
                                 'Single'),
                         DECODE (s.option_cd, '1', 'A', '2', 'B', 'C')
                  FROM   ins_p_summery s
                 WHERE       ADD_MONTHS (
                                s.last_paid_date,
                                DECODE (s.pay_mode_cd,
                                        '01', 12,
                                        '02', 6,
                                        '03', 3,
                                        '04', 1,
                                        s.term * 12)
                             ) > p_val_date_to
                         AND NVL (s.policy_installment, 0) > 0
                         AND s.comm_date <= p_val_date_to
                         --AND s.policy_status != '04'
                         AND s.maturity_date > p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_surrender_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_lapse_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;

            --Update the bonus amount in  val_inforce_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_inforce_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '2',
                     ---Here 2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => '09',
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_inforce_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           tb_amount = v_tb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus + v_tb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_inforce_policy
         END IF;

         --Paidup_policy
         IF p_data_tp IN (1, 3)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_paidup_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_paidup_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO INS.VAL_PAIDUP_POLICY (pgid,
                                               POLICY,
                                               datcom,
                                               riskdate,
                                               PLAN,
                                               term,
                                               dob,
                                               age,
                                               sumass,
                                               sumatrisk,
                                               apen_amt,
                                               poption,
                                               aprem,
                                               paymode,
                                               lifepre,
                                               supprem,
                                               extraprem,
                                               totprem,
                                               nduedate,
                                               pstatus,
                                               maturitydt,
                                               runyr,
                                               adjsumass,
                                               last_paid_date,
                                               val_year,
                                               val_date_from,
                                               val_date_to,
                                               sb_amount,
                                               paidup_sumass,
                                               paidup_adjsumass,
                                               last_paid_instl_no,
                                               policy_installment,
                                               policy_status,
                                               pay_mode_cd,
                                               policy_option)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         NVL (s.total_yearly_premium, 0),
                         s.pay_mode_cd,
                         ROUND (s.life_premium),
                         NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0),
                         ROUND (NVL (s.extra_premium, 0)),
                           ROUND (s.life_premium)
                         + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0)
                         + ROUND (NVL (s.extra_premium, 0)),
                         CASE
                            WHEN (ADD_MONTHS (
                                     s.last_paid_date,
                                     DECODE (s.pay_mode_cd,
                                             '01', 12,
                                             '02', 6,
                                             '03', 3,
                                             '04', 1,
                                             s.term * 12)
                                  )) > s.maturity_date
                            THEN
                               s.maturity_date
                            ELSE
                               (ADD_MONTHS (
                                   s.last_paid_date,
                                   DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           s.term * 12)
                                ))
                         END,
                         '01' policy_status,
                         ADD_MONTHS (s.comm_date, s.term * 12),
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         /*  fun_paidup_value_val (s.pgid)   "Only for paidup Policies ( Full paidup value - SB)"   */
                         NVL (fun_paidup_value_val (s.pgid), 0)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         NVL (
                            fun_sb_available_amt (
                               s.term,
                               ROUND (
                                  s.last_paid_inst_no
                                  / DECODE (s.pay_mode_cd,
                                            '01', 1,
                                            '02', 2,
                                            '03', 4,
                                            '04', 12,
                                            1),
                                  2
                               ),
                               s.product_cd,
                               s.sum_assured
                            ),
                            0
                         ),
                         NVL (fun_paidup_value_val (s.pgid), 0),
                         NVL (fun_paidup_value_val (s.pgid), 0)
                         - NVL (
                              fun_sb_available_amt (
                                 s.term,
                                 ROUND (
                                    s.last_paid_inst_no
                                    / DECODE (s.pay_mode_cd,
                                              '01', 1,
                                              '02', 2,
                                              '03', 4,
                                              '04', 12,
                                              1),
                                    2
                                 ),
                                 s.product_cd,
                                 s.sum_assured
                              ),
                              0
                           ),
                         s.last_paid_inst_no,
                         s.term
                         * DECODE (s.pay_mode_cd,
                                   '01', 1,
                                   '02', 2,
                                   '03', 4,
                                   '04', 12,
                                   1),
                         rep_fun_ins_policy_status ('01'),
                         DECODE (s.pay_mode_cd,
                                 '01', 'Yearly',
                                 '02', 'Half-yearly',
                                 '03', 'Quarterly',
                                 '04', 'Monthly',
                                 'Single'),
                         DECODE (s.option_cd, '1', 'A', '2', 'B', 'C')
                  FROM   ins_p_summery s, ins_p_proposal p
                 WHERE       s.pgid = p.pgid
                         AND p.policy_no IS NOT NULL
                         AND s.i_dt <= p_val_date_to
                         AND ADD_MONTHS (
                               s.last_paid_date,
                               DECODE (s.pay_mode_cd,
                                       '01', 12,
                                       '02', 6,
                                       '03', 3,
                                       '04', 1,
                                       s.term * 12)
                            ) <= p_val_date_to
                         AND NVL (s.policy_installment, 0) > 0
                         AND s.comm_date <= p_val_date_to
                         AND s.maturity_date > p_val_date_to
                         -- AND pay_mode_cd = '01'
                         AND s.LAST_PAID_INST_NO >=
                               DECODE (s.pay_mode_cd,
                                       '01', 2,
                                       '02', 4,
                                       '03', 8,
                                       '04', 24,
                                       1)
                         AND s.policy_status NOT IN
                                  ('04', '02', '10', '03', '08')
                         AND s.POLICY_STATUS_DT <= p_val_date_to
                UNION ALL
                SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         NVL (s.total_yearly_premium, 0),
                         s.pay_mode_cd,
                         ROUND (s.life_premium),
                         NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0),
                         ROUND (NVL (s.extra_premium, 0)),
                           ROUND (s.life_premium)
                         + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0)
                         + ROUND (NVL (s.extra_premium, 0)),
                         CASE
                            WHEN (ADD_MONTHS (
                                     s.last_paid_date,
                                     DECODE (s.pay_mode_cd,
                                             '01', 12,
                                             '02', 6,
                                             '03', 3,
                                             '04', 1,
                                             s.term * 12)
                                  )) > s.maturity_date
                            THEN
                               s.maturity_date
                            ELSE
                               (ADD_MONTHS (
                                   s.last_paid_date,
                                   DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           s.term * 12)
                                ))
                         END,
                         '01' policy_status,
                         ADD_MONTHS (s.comm_date, s.term * 12),
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         /*  fun_paidup_value_val (s.pgid)   "Only for paidup Policies ( Full paidup value - SB)"   */
                         NVL (fun_paidup_value_val (s.pgid), 0)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         NVL (
                            fun_sb_available_amt (
                               s.term,
                               ROUND (
                                  s.last_paid_inst_no
                                  / DECODE (s.pay_mode_cd,
                                            '01', 1,
                                            '02', 2,
                                            '03', 4,
                                            '04', 12,
                                            1),
                                  2
                               ),
                               s.product_cd,
                               s.sum_assured
                            ),
                            0
                         ),
                         NVL (fun_paidup_value_val (s.pgid), 0),
                         NVL (fun_paidup_value_val (s.pgid), 0)
                         - NVL (
                              fun_sb_available_amt (
                                 s.term,
                                 ROUND (
                                    s.last_paid_inst_no
                                    / DECODE (s.pay_mode_cd,
                                              '01', 1,
                                              '02', 2,
                                              '03', 4,
                                              '04', 12,
                                              1),
                                    2
                                 ),
                                 s.product_cd,
                                 s.sum_assured
                              ),
                              0
                           ),
                         s.last_paid_inst_no,
                         s.term
                         * DECODE (s.pay_mode_cd,
                                   '01', 1,
                                   '02', 2,
                                   '03', 4,
                                   '04', 12,
                                   1),
                         rep_fun_ins_policy_status ('01'),
                         DECODE (s.pay_mode_cd,
                                 '01', 'Yearly',
                                 '02', 'Half-yearly',
                                 '03', 'Quarterly',
                                 '04', 'Monthly',
                                 'Single'),
                         DECODE (s.option_cd, '1', 'A', '2', 'B', 'C')
                  FROM   ins_p_summery s, ins_p_proposal p
                 WHERE       s.pgid = p.pgid
                         AND p.policy_no IS NOT NULL
                         AND ADD_MONTHS (
                               s.last_paid_date,
                               DECODE (s.pay_mode_cd,
                                       '01', 12,
                                       '02', 6,
                                       '03', 3,
                                       '04', 1,
                                       s.term * 12)
                            ) <= p_val_date_to
                         AND NVL (s.policy_installment, 0) > 0
                         AND s.comm_date <= p_val_date_to
                         AND s.maturity_date > p_val_date_to
                         AND s.last_paid_inst_no >=
                               DECODE (s.pay_mode_cd,
                                       '01', 2,
                                       '02', 4,
                                       '03', 8,
                                       '04', 24,
                                       1)
                         AND s.policy_status_dt > p_val_date_to);

            COMMIT;

            --Update the bonus amount in  val_paidup_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_paidup_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '3',
                     ---Here 2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => '01',
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_paidup_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           tb_amount = v_tb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus + v_tb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_paidup_policy
         END IF;

         --revive  policy--
         IF p_data_tp IN (1, 10)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_revive_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_revive_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_revive_policy (pgid,
                                           POLICY,
                                           datcom,
                                           riskdate,
                                           PLAN,
                                           term,
                                           dob,
                                           age,
                                           sumass,
                                           sumatrisk,
                                           apen_amt,
                                           poption,
                                           aprem,
                                           paymode,
                                           lifepre,
                                           supprem,
                                           extraprem,
                                           totprem,
                                           nduedate,
                                           pstatus,
                                           maturitydt,
                                           runyr,
                                           adjsumass,
                                           last_paid_date,
                                           val_year,
                                           val_date_from,
                                           val_date_to,
                                           sb_amount,
                                           PAIDUP_SUMASS,
                                           paidup_adjsumass,
                                           last_paid_instl_no,
                                           policy_installment,
                                           policy_status,
                                           pay_mode_cd,
                                           policy_option)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         ROUND (s.life_premium),
                         NVL (s.suppl_product_premium, 0)
                         + NVL (s.suppl_ben_premium, 0),
                         ROUND (NVL (s.extra_premium, 0)),
                           ROUND (s.life_premium)
                         + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0)
                         + ROUND (NVL (s.extra_premium, 0)),
                         CASE
                            WHEN (ADD_MONTHS (
                                     s.last_paid_date,
                                     DECODE (s.pay_mode_cd,
                                             '01', 12,
                                             '02', 6,
                                             '03', 3,
                                             '04', 1,
                                             s.term * 12)
                                  )) > s.maturity_date
                            THEN
                               s.maturity_date
                            ELSE
                               (ADD_MONTHS (
                                   s.last_paid_date,
                                   DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           s.term * 12)
                                ))
                         END,
                         s.policy_status,
                         ADD_MONTHS (s.comm_date, s.term * 12),
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         NVL (
                            fun_sb_available_amt (
                               s.term,
                               ROUND (
                                  s.last_paid_inst_no
                                  / DECODE (s.pay_mode_cd,
                                            '01', 1,
                                            '02', 2,
                                            '03', 4,
                                            '04', 12,
                                            1),
                                  2
                               ),
                               s.product_cd,
                               s.sum_assured
                            ),
                            0
                         ),
                         NVL (fun_paidup_value_val (s.pgid), 0),
                         NVL (fun_paidup_value_val (s.pgid), 0)
                         - NVL (
                              fun_sb_available_amt (
                                 s.term,
                                 ROUND (
                                    s.last_paid_inst_no
                                    / DECODE (s.pay_mode_cd,
                                              '01', 1,
                                              '02', 2,
                                              '03', 4,
                                              '04', 12,
                                              1),
                                    2
                                 ),
                                 s.product_cd,
                                 s.sum_assured
                              ),
                              0
                           ),
                         s.last_paid_inst_no,
                         s.term
                         * DECODE (s.pay_mode_cd,
                                   '01', 1,
                                   '02', 2,
                                   '03', 4,
                                   '04', 12,
                                   1),
                         rep_fun_ins_policy_status (s.policy_status),
                         DECODE (s.pay_mode_cd,
                                 '01', 'Yearly',
                                 '02', 'Half-yearly',
                                 '03', 'Quarterly',
                                 '04', 'Monthly',
                                 'Single'),
                         DECODE (s.option_cd, '1', 'A', '2', 'B', 'C')
                  FROM   ins_p_summery s, ins_p_proposal p
                 WHERE       s.pgid = p.pgid
                         AND p.policy_no IS NOT NULL
                         AND s.i_dt <= p_val_date_to
                         AND EXISTS
                               (SELECT   1
                                  FROM   acc_receivables
                                 WHERE   receive_date BETWEEN p_val_date_fr
                                                          AND  p_val_date_to
                                         AND pgid = s.pgid)
                         AND EXISTS (SELECT   1
                                       FROM   val_lapse_policy_total
                                      WHERE   pgid = s.pgid));

            COMMIT;
         END IF;

         --Lapse Policy
         IF p_data_tp IN (1, 14)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_lapse_policy_cur_year
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_lapse_policy_cur_year
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_lapse_policy_cur_year (pgid,
                                                   POLICY,
                                                   datcom,
                                                   riskdate,
                                                   PLAN,
                                                   term,
                                                   dob,
                                                   age,
                                                   sumass,
                                                   sumatrisk,
                                                   apen_amt,
                                                   poption,
                                                   aprem,
                                                   paymode,
                                                   lifepre,
                                                   supprem,
                                                   extraprem,
                                                   totprem,
                                                   nduedate,
                                                   pstatus,
                                                   maturitydt,
                                                   runyr,
                                                   adjsumass,
                                                   last_paid_date,
                                                   val_year,
                                                   val_date_from,
                                                   val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         ROUND (s.life_premium),
                         NVL (s.suppl_product_premium, 0)
                         + NVL (s.suppl_ben_premium, 0),
                         ROUND (NVL (s.extra_premium, 0)),
                           ROUND (s.life_premium)
                         + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0)
                         + ROUND (NVL (s.extra_premium, 0)),
                         CASE
                            WHEN (ADD_MONTHS (
                                     s.last_paid_date,
                                     DECODE (s.pay_mode_cd,
                                             '01', 12,
                                             '02', 6,
                                             '03', 3,
                                             '04', 1,
                                             s.term * 12)
                                  )) > s.maturity_date
                            THEN
                               s.maturity_date
                            ELSE
                               (ADD_MONTHS (
                                   s.last_paid_date,
                                   DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           s.term * 12)
                                ))
                         END,
                         '00' policy_status,
                         ADD_MONTHS (s.comm_date, s.term * 12),
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   ins_p_summery s, ins_product p, ins_p_proposal pp
                 WHERE       s.pgid = pp.pgid
                         AND pp.policy_no IS NOT NULL
                         AND s.i_dt <= p_val_date_to
                         AND s.maturity_date > p_val_date_to
                         AND NVL (s.policy_installment, 0) > 0
                         AND (s.last_paid_inst_no * s.term)
                            / NVL (s.policy_installment, 1) <
                               NVL (p.paidup_age, 2)
                         AND DECODE (s.pay_mode_cd,
                                     '01', ADD_MONTHS (s.last_paid_date, 12),
                                     '02', ADD_MONTHS (s.last_paid_date, 6),
                                     '03', ADD_MONTHS (s.last_paid_date, 3),
                                     '04', ADD_MONTHS (s.last_paid_date, 1),
                                     NULL)
                            + (p_grace_period + 1) BETWEEN p_val_date_fr
                                                       AND  p_val_date_to
                         AND s.product_cd = p.product_cd
                         AND comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_surrender_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         END IF;

         --Modification of current year lapse data and input into to VAL_LAPSE_POLICY_TOTAL
         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_new_policy, v_new_policy_sum
           FROM   val_new_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (1), SUM (sumass)
           INTO   v_revive_policy, v_revive_policy_sum
           FROM   val_revive_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (DISTINCT pgid), SUM (sumass)
           INTO   v_death_policy, v_death_policy_sum
           FROM   val_death_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_matinforce_policy, v_matinforce_sum
           FROM   val_matured_inforce_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_matpaidup_policy, v_matpaidup_sum
           FROM   val_matured_paidup_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         v_matured_policy_sum := v_matinforce_sum + v_matpaidup_sum;
         v_matured_policy := v_matinforce_policy + v_matpaidup_policy;

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_surrendered_policy, v_surrendered_policy_sum
           FROM   val_surrender_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_inforce_policy, v_inforce_policy_sum
           FROM   val_inforce_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_paidup_policy, v_paidup_policy_sum
           FROM   val_paidup_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid)
           INTO   v_curlpase_policy
           FROM   val_lapse_policy_cur_year
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         BEGIN
            SELECT   (opening_inf_paidup + new_policy + revive_policy)
                     - (  matured_policy
                        + surrendered_policy
                        + death_policy
                        + lapse_policy
                        + lapse_in_2014_data)
              INTO   v_op_inf_paidup_pol
              FROM   val_valuation_summery
             WHERE   TO_NUMBER (val_year) =
                        TO_NUMBER (TO_CHAR (p_val_date_to, 'RRRR')) - 1;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_op_inf_paidup_pol := 0;
         END;

         v_total_policy :=
            (v_op_inf_paidup_pol + v_new_policy + v_revive_policy);
         v_total_claim_policy :=
            (  v_death_policy
             + v_matinforce_policy
             + v_matpaidup_policy
             + v_surrendered_policy
             + v_curlpase_policy);

         DELETE FROM   val_lapse_policy_total
               WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         IF v_total_policy - v_total_claim_policy !=
               v_inforce_policy + v_paidup_policy
         THEN
            IF (v_total_policy - v_total_claim_policy)
               - (v_inforce_policy + v_paidup_policy) < 0
            THEN
               --Delete data from  VAL_LAPSE_POLICY_CUR_YEAR and insert into VAL_LAPSE_POLICY_TOTALl
               BEGIN
                  FOR i
                  IN (  SELECT   pgid, val_year, last_paid_date
                          FROM   val_lapse_policy_cur_year
                         WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                      ORDER BY   last_paid_date)
                  LOOP
                     IF v_counter <=
                           ABS( (v_total_policy - v_total_claim_policy)
                               - (v_inforce_policy + v_paidup_policy))
                     THEN
                        v_counter := v_counter + 1;

                        INSERT INTO val_lapse_policy_total (pgid,
                                                            POLICY,
                                                            datcom,
                                                            riskdate,
                                                            PLAN,
                                                            term,
                                                            dob,
                                                            age,
                                                            sumass,
                                                            sumatrisk,
                                                            apen_amt,
                                                            poption,
                                                            aprem,
                                                            paymode,
                                                            lifepre,
                                                            supprem,
                                                            extraprem,
                                                            totprem,
                                                            nduedate,
                                                            pstatus,
                                                            maturitydt,
                                                            runyr,
                                                            adjsumass,
                                                            last_paid_date,
                                                            val_year,
                                                            val_date_from,
                                                            val_date_to)
                           (SELECT   pgid,
                                     POLICY,
                                     datcom,
                                     riskdate,
                                     PLAN,
                                     term,
                                     dob,
                                     age,
                                     sumass,
                                     sumatrisk,
                                     apen_amt,
                                     poption,
                                     aprem,
                                     paymode,
                                     lifepre,
                                     supprem,
                                     extraprem,
                                     totprem,
                                     nduedate,
                                     pstatus,
                                     maturitydt,
                                     runyr,
                                     adjsumass,
                                     last_paid_date,
                                     val_year,
                                     val_date_from,
                                     val_date_to
                              FROM   val_lapse_policy_cur_year
                             WHERE   val_year =
                                        TO_CHAR (p_val_date_to, 'RRRR')
                                     AND pgid = i.pgid
                                     AND val_year = i.val_year);

                        DELETE FROM   val_lapse_policy_cur_year
                              WHERE   val_year =
                                         TO_CHAR (p_val_date_to, 'RRRR')
                                      AND pgid = i.pgid
                                      AND val_year = i.val_year;
                     ELSE
                        EXIT;
                     END IF;
                  END LOOP;

                  COMMIT;
               END;
            ELSIF (v_total_policy - v_total_claim_policy) - (v_inforce_policy + v_paidup_policy) > 0
            THEN
               --add data into  VAL_LAPSE_POLICY_CUR_YEAR and delete data from  VAL_LAPSE_POLICY_TOTAL
               NULL;
            END IF;
         ELSE
            INSERT INTO val_lapse_policy_total (pgid,
                                                POLICY,
                                                datcom,
                                                riskdate,
                                                PLAN,
                                                term,
                                                dob,
                                                age,
                                                sumass,
                                                sumatrisk,
                                                apen_amt,
                                                poption,
                                                aprem,
                                                paymode,
                                                lifepre,
                                                supprem,
                                                extraprem,
                                                totprem,
                                                nduedate,
                                                pstatus,
                                                maturitydt,
                                                runyr,
                                                adjsumass,
                                                last_paid_date,
                                                val_year,
                                                val_date_from,
                                                val_date_to)
               (SELECT   pgid,
                         POLICY,
                         datcom,
                         riskdate,
                         PLAN,
                         term,
                         dob,
                         age,
                         sumass,
                         sumatrisk,
                         apen_amt,
                         poption,
                         aprem,
                         paymode,
                         lifepre,
                         supprem,
                         extraprem,
                         totprem,
                         nduedate,
                         pstatus,
                         maturitydt,
                         runyr,
                         adjsumass,
                         last_paid_date,
                         val_year,
                         val_date_from,
                         val_date_to
                  FROM   val_lapse_policy_cur_year
                 WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR'));

            DELETE FROM   val_lapse_policy_cur_year
                  WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');
         END IF;

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_lapse_policy, v_lapse_policy_sum
           FROM   val_lapse_policy_cur_year
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         IF v_val_status IS NULL
         THEN
            INSERT INTO val_valuation_summery (val_year,
                                               inforce_policy,
                                               paidup_policy,
                                               new_policy,
                                               deffered_policy,
                                               second_yr_policy,
                                               renewal_yr_policy,
                                               revive_policy,
                                               matured_policy,
                                               surrendered_policy,
                                               death_policy,
                                               lapse_policy,
                                               val_status,
                                               i_usr,
                                               i_dt,
                                               opening_inf_paidup,
                                               date_from,
                                               date_to,
                                               grace_period,
                                               lapse_in_2014_data,
                                               inforce_policy_sum,
                                               paidup_policy_sum,
                                               new_policy_sum,
                                               deffered_policy_sum,
                                               second_yr_policy_sum,
                                               renewal_yr_policy_sum,
                                               revive_policy_sum,
                                               matured_policy_sum,
                                               surrendered_policy_sum,
                                               death_policy_sum,
                                               lapse_policy_sum)
              VALUES   (TO_CHAR (p_val_date_to, 'RRRR'),
                        v_inforce_policy,
                        v_paidup_policy,
                        v_new_policy,
                        v_deffered_policy,
                        v_second_yr_policy,
                        v_ren_policy,
                        v_revive_policy,
                        v_matured_policy,
                        v_surrendered_policy,
                        v_death_policy,
                        v_lapse_policy,
                        '0',
                        p_user,
                        SYSDATE,
                        v_op_inf_paidup_pol,
                        p_val_date_fr,
                        p_val_date_to,
                        p_grace_period,
                        v_lapse_in_2014_data,
                        v_inforce_policy_sum,
                        v_paidup_policy_sum,
                        v_new_policy_sum,
                        v_deffered_policy_sum,
                        v_second_yr_policy_sum,
                        v_renewal_yr_policy_sum,
                        v_revive_policy_sum,
                        v_matured_policy_sum,
                        v_surrendered_policy_sum,
                        v_death_policy_sum,
                        v_lapse_policy_sum);

            p_error :=
               'Valuation data preparation has been successfully completed.';
         ELSIF v_val_status = '0'
         THEN
            UPDATE   val_valuation_summery
               SET   inforce_policy = v_inforce_policy,
                     paidup_policy = v_paidup_policy,
                     new_policy = v_new_policy,
                     deffered_policy = v_deffered_policy,
                     second_yr_policy = v_second_yr_policy,
                     renewal_yr_policy = v_ren_policy,
                     revive_policy = v_revive_policy,
                     matured_policy = v_matured_policy,
                     surrendered_policy = v_surrendered_policy,
                     death_policy = v_death_policy,
                     lapse_policy = v_lapse_policy,
                     u_usr = p_user,
                     u_dt = SYSDATE,
                     opening_inf_paidup = v_op_inf_paidup_pol,
                     date_from = p_val_date_fr,
                     date_to = p_val_date_to,
                     grace_period = p_grace_period,
                     lapse_in_2014_data = v_lapse_in_2014_data,
                     inforce_policy_sum = v_inforce_policy_sum,
                     paidup_policy_sum = v_paidup_policy_sum,
                     new_policy_sum = v_new_policy_sum,
                     deffered_policy_sum = v_deffered_policy_sum,
                     second_yr_policy_sum = v_second_yr_policy_sum,
                     renewal_yr_policy_sum = v_renewal_yr_policy_sum,
                     revive_policy_sum = v_revive_policy_sum,
                     matured_policy_sum = v_matured_policy_sum,
                     surrendered_policy_sum = v_surrendered_policy_sum,
                     death_policy_sum = v_death_policy_sum,
                     lapse_policy_sum = v_lapse_policy_sum
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            p_error :=
               'Valuation data modification has been successfully completed.';
         ELSE
            NULL;
         END IF;

         --matured due Policy
         IF p_data_tp IN (1, 11)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_due_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_due_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_due_policy (pgid,
                                                POLICY,
                                                datcom,
                                                riskdate,
                                                PLAN,
                                                term,
                                                dob,
                                                age,
                                                sumass,
                                                sumatrisk,
                                                apen_amt,
                                                poption,
                                                aprem,
                                                paymode,
                                                lifepre,
                                                supprem,
                                                extraprem,
                                                totprem,
                                                nduedate,
                                                pstatus,
                                                maturitydt,
                                                runyr,
                                                adjsumass,
                                                last_paid_date,
                                                val_year,
                                                val_date_from,
                                                val_date_to,
                                                sb_amount,
                                                PAIDUP_SUMASS,
                                                paidup_adjsumass,
                                                last_paid_instl_no,
                                                policy_installment,
                                                policy_status,
                                                pay_mode_cd,
                                                policy_option)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         ROUND (s.life_premium),
                         NVL (s.suppl_product_premium, 0)
                         + NVL (s.suppl_ben_premium, 0),
                         ROUND (NVL (s.extra_premium, 0)),
                           ROUND (s.life_premium)
                         + NVL (s.SUPPL_PRODUCT_PREMIUM, 0)
                         + NVL (s.suppl_ben_premium, 0)
                         + ROUND (NVL (s.extra_premium, 0)),
                         CASE
                            WHEN (ADD_MONTHS (
                                     s.last_paid_date,
                                     DECODE (s.pay_mode_cd,
                                             '01', 12,
                                             '02', 6,
                                             '03', 3,
                                             '04', 1,
                                             s.term * 12)
                                  )) > s.maturity_date
                            THEN
                               s.maturity_date
                            ELSE
                               (ADD_MONTHS (
                                   s.last_paid_date,
                                   DECODE (s.pay_mode_cd,
                                           '01', 12,
                                           '02', 6,
                                           '03', 3,
                                           '04', 1,
                                           s.term * 12)
                                ))
                         END,
                         s.policy_status,
                         ADD_MONTHS (s.comm_date, s.term * 12),
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value_val (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         NVL (
                            fun_sb_available_amt (
                               s.term,
                               ROUND (
                                  s.last_paid_inst_no
                                  / DECODE (s.pay_mode_cd,
                                            '01', 1,
                                            '02', 2,
                                            '03', 4,
                                            '04', 12,
                                            1),
                                  2
                               ),
                               s.product_cd,
                               s.sum_assured
                            ),
                            0
                         ),
                         NVL (fun_paidup_value_val (s.pgid), 0),
                         NVL (fun_paidup_value_val (s.pgid), 0)
                         - NVL (
                              fun_sb_available_amt (
                                 s.term,
                                 ROUND (
                                    s.last_paid_inst_no
                                    / DECODE (s.pay_mode_cd,
                                              '01', 1,
                                              '02', 2,
                                              '03', 4,
                                              '04', 12,
                                              1),
                                    2
                                 ),
                                 s.product_cd,
                                 s.sum_assured
                              ),
                              0
                           ),
                         s.last_paid_inst_no,
                         s.term
                         * DECODE (s.pay_mode_cd,
                                   '01', 1,
                                   '02', 2,
                                   '03', 4,
                                   '04', 12,
                                   1),
                         rep_fun_ins_policy_status (s.policy_status),
                         DECODE (s.pay_mode_cd,
                                 '01', 'Yearly',
                                 '02', 'Half-yearly',
                                 '03', 'Quarterly',
                                 '04', 'Monthly',
                                 'Single'),
                         DECODE (s.option_cd, '1', 'A', '2', 'B', 'C')
                  FROM   ins_p_summery s, ins_product p
                 WHERE   policy_status IN
                               ('01', '09', '07', '08', '11', '03')
                         AND NVL (s.policy_installment, 0) > 0
                         AND (s.last_paid_inst_no * s.term)
                            / NVL (s.policy_installment, 1) >=
                               NVL (p.paidup_age, 2)
                         AND s.product_cd = p.product_cd
                         AND maturity_date <= p_val_date_to
                         AND comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   clm_claim_payable_gen
                                 WHERE       pgid = s.pgid
                                         AND clm_cause_cd IN ('02', '06')
                                         AND clm_detl_cd = '01'
                                         AND NVL (approved_flag, 'N') = 'Y')
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_matured_lapse_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         END IF;

         --Status wise policy Summery preparation
         BEGIN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_status_wise_pol_sum
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_status_wise_pol_sum
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_status_wise_pol_sum (val_year,
                                                 comm_year,
                                                 new_policy,
                                                 inforce,
                                                 paidup,
                                                 lapse,
                                                 mat_lapse,
                                                 maturity_inforce,
                                                 maturity_paidup,
                                                 due_maturity,
                                                 death,
                                                 surrender,
                                                 total)
               (  SELECT   TO_CHAR (p_val_date_to, 'RRRR') val_year,
                           TO_CHAR (datcom, 'RRRR') comm_year,
                           COUNT (pgid) new_policy,
                           SUM (DECODE (status, '2', 1, 0)) inforce,
                           SUM (DECODE (status, '3', 1, 0)) paidup,
                           SUM (DECODE (status, '4', 1, 0)) lapse,
                           SUM (DECODE (status, '5', 1, 0)) mat_lapse,
                           SUM (DECODE (status, '6', 1, 0)) maturity_inforce,
                           SUM (DECODE (status, '7', 1, 0)) maturity_paidup,
                           SUM (DECODE (status, '8', 1, 0)) due_maturity,
                           SUM (DECODE (status, '9', 1, 0)) death,
                           SUM (DECODE (status, '10', 1, 0)) surrender,
                             SUM (DECODE (status, '2', 1, 0))
                           + SUM (DECODE (status, '3', 1, 0))
                           + SUM (DECODE (status, '4', 1, 0))
                           + SUM (DECODE (status, '5', 1, 0))
                           + SUM (DECODE (status, '6', 1, 0))
                           + SUM (DECODE (status, '7', 1, 0))
                           + SUM (DECODE (status, '8', 1, 0))
                           + SUM (DECODE (status, '9', 1, 0))
                           + SUM (DECODE (status, '10', 1, 0))
                              total
                    FROM   (SELECT   pgid, datcom, '2' status
                              --Here '2'= Inforce
                              FROM   val_inforce_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid, datcom, '3' status
                              --Here '3'= paidup
                              FROM   val_paidup_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid, datcom, '5' status
                              --Here '5'= mat_lapse
                              FROM   val_matured_lapse_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid, datcom, '8' status
                              --Here '2'= mat_due
                              FROM   val_matured_due_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid,
                                     comm_date datcom,
                                     CASE
                                        WHEN a.maturity_inforce = 1 THEN '6'
                                        WHEN a.maturity_paidup = 1 THEN '7'
                                        WHEN a.death = 1 THEN '9'
                                        WHEN a.surrender = 1 THEN '10'
                                        ELSE '4'
                                     END
                                        status
                              --here '4'=Lapse,'6'= maturity_inforce,'7'=maturity_paidup,'9'=Death,'10'=Surrender
                              FROM   (SELECT   s.pgid,
                                               s.comm_date,
                                               (SELECT   COUNT (DISTINCT pgid)
                                                  FROM   clm_claim_payable_gen
                                                 WHERE   clm_cause_cd = '02'
                                                         AND clm_detl_cd = '01'
                                                         AND NVL (
                                                               payment_status,
                                                               'N'
                                                            ) = 'Y'
                                                         AND pgid = s.pgid)
                                                  maturity_inforce,
                                               (SELECT   COUNT (DISTINCT pgid)
                                                  FROM   clm_claim_payable_gen
                                                 WHERE   clm_cause_cd = '06'
                                                         AND clm_detl_cd = '01'
                                                         AND NVL (
                                                               payment_status,
                                                               'N'
                                                            ) = 'Y'
                                                         AND pgid = s.pgid)
                                                  maturity_paidup,
                                               DECODE (policy_status,
                                                       '02', 1,
                                                       0)
                                                  death,
                                               DECODE (policy_status,
                                                       '04', 1,
                                                       0)
                                                  surrender
                                        FROM   ins_p_summery s
                                       WHERE   NOT EXISTS
                                                  (SELECT   1
                                                     FROM   (SELECT   pgid
                                                               FROM   val_inforce_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         )
                                                             UNION ALL
                                                             SELECT   pgid
                                                               FROM   val_paidup_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         )
                                                             UNION ALL
                                                             SELECT   pgid
                                                               FROM   val_matured_lapse_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         )
                                                             UNION ALL
                                                             SELECT   pgid
                                                               FROM   val_matured_due_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         ))
                                                    WHERE   pgid = s.pgid)) a)
                   WHERE   TO_NUMBER (TO_CHAR (datcom, 'RRRR')) BETWEEN 1990
                                                                    AND  TO_NUMBER(TO_CHAR (
                                                                                      p_val_date_to,
                                                                                      'RRRR'
                                                                                   ))
                GROUP BY   TO_CHAR (datcom, 'RRRR'));

            COMMIT;
         END;

         COMMIT;
         p_error :=
            'Valuation Summery Process has been completed of '
            || TO_CHAR (p_val_date_to, 'RRRR');
      ELSE
         p_error :=
            'Valuation Finalization has been completed of '
            || TO_CHAR (p_val_date_to, 'RRRR');
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END;
/


--
-- PRO_VALUATION_SUMMERY_BKP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_valuation_summery_bkp (
   p_val_date_fr        DATE,
   p_val_date_to        DATE,
   p_grace_period       NUMBER,
   p_user               VARCHAR2,
   p_process_tp         CHAR,
   --here 1=Ony for summery report , 2=Summery report   Preparation
   p_data_tp            CHAR,
   p_error          OUT VARCHAR2
)
IS
   v_inforce_policy           NUMBER := 0;
   v_paidup_policy            NUMBER := 0;
   v_new_policy               NUMBER := 0;
   v_deffered_policy          NUMBER := 0;
   v_second_yr_policy         NUMBER := 0;
   v_ren_policy               NUMBER := 0;
   v_revive_policy            NUMBER := 0;
   v_matured_policy           NUMBER := 0;
   v_surrendered_policy       NUMBER := 0;
   v_death_policy             NUMBER := 0;
   v_lapse_policy             NUMBER := 0;
   v_op_inf_paidup_pol        NUMBER := 0;
   v_val_status               CHAR (1);
   v_lapse_in_2014_data       NUMBER := 0;
   v_count                    NUMBER := 0;
   v_inforce_policy_sum       NUMBER := 0;
   v_paidup_policy_sum        NUMBER := 0;
   v_new_policy_sum           NUMBER := 0;
   v_deffered_policy_sum      NUMBER := 0;
   v_second_yr_policy_sum     NUMBER := 0;
   v_renewal_yr_policy_sum    NUMBER := 0;
   v_revive_policy_sum        NUMBER := 0;
   v_matured_policy_sum       NUMBER := 0;
   v_surrendered_policy_sum   NUMBER := 0;
   v_death_policy_sum         NUMBER := 0;
   v_lapse_policy_sum         NUMBER := 0;
   v_matinforce_policy        NUMBER := 0;
   v_matpaidup_policy         NUMBER := 0;
   v_total_policy             NUMBER := 0;
   v_total_claim_policy       NUMBER := 0;
   v_curlpase_policy          NUMBER := 0;
   v_counter                  NUMBER := 1;
   v_matinforce_sum           NUMBER := 0;
   v_matpaidup_sum            NUMBER := 0;
BEGIN
   IF TO_CHAR (p_val_date_to, 'RRRR') != '2016'
   THEN
      BEGIN
         SELECT   val_status
           INTO   v_val_status
           FROM   val_valuation_summery
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');
      EXCEPTION
         WHEN OTHERS
         THEN
            v_val_status := NULL;
      END;

      IF NVL (v_val_status, '0') != '1'
      THEN
         IF p_process_tp = '2'
         THEN
            --New Policy
            IF p_data_tp IN (1, 4)
            THEN
               SELECT   COUNT (1)
                 INTO   v_count
                 FROM   val_new_policy
                WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               IF v_count > 0
               THEN
                  DELETE FROM   val_new_policy
                        WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

                  COMMIT;
               END IF;

               INSERT INTO val_new_policy (pgid,
                                           POLICY,
                                           datcom,
                                           riskdate,
                                           PLAN,
                                           term,
                                           dob,
                                           age,
                                           sumass,
                                           sumatrisk,
                                           apen_amt,
                                           poption,
                                           aprem,
                                           paymode,
                                           lifepre,
                                           supprem,
                                           extraprem,
                                           totprem,
                                           nduedate,
                                           pstatus,
                                           maturitydt,
                                           runyr,
                                           adjsumass,
                                           last_paid_date,
                                           val_year,
                                           val_date_from,
                                           val_date_to)
                  (SELECT   s.pgid,
                            fun_ins_pgid_to_policy_no (s.pgid),
                            s.comm_date,
                            s.risk_date,
                            s.product_cd,
                            s.term,
                            s.dob,
                            s.age,
                            s.sum_assured,
                            fun_sum_at_risk (s.pgid),
                            CASE
                               WHEN s.product_cd = '07'
                               THEN
                                  (s.sum_assured / 10)
                               ELSE
                                  0
                            END,
                            s.option_cd,
                            s.total_yearly_premium,
                            s.pay_mode_cd,
                            s.life_premium,
                            s.suppl_ben_premium,
                            s.extra_premium,
                            s.installment_premium,
                            s.next_due_date,
                            s.policy_status,
                            s.maturity_date,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            fun_paidup_value (s.pgid)
                            - fun_sb_available_amt (
                                 s.term,
                                 ROUND (
                                    s.last_paid_inst_no
                                    / DECODE (s.pay_mode_cd,
                                              '01', 1,
                                              '02', 2,
                                              '03', 4,
                                              '04', 12,
                                              1),
                                    2
                                 ),
                                 s.product_cd,
                                 s.sum_assured
                              ),
                            s.last_paid_date,
                            TO_CHAR (p_val_date_to, 'RRRR'),
                            p_val_date_fr,
                            p_val_date_to
                     FROM   ins_p_summery s
                    WHERE   s.comm_date BETWEEN p_val_date_fr
                                            AND  p_val_date_to);

               COMMIT;
            END IF;
         END IF;

         --Death Policy
         IF p_data_tp IN (1, 13)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_death_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_death_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_death_policy (pgid,
                                          POLICY,
                                          datcom,
                                          riskdate,
                                          PLAN,
                                          term,
                                          dob,
                                          age,
                                          sumass,
                                          sumatrisk,
                                          apen_amt,
                                          poption,
                                          aprem,
                                          paymode,
                                          lifepre,
                                          supprem,
                                          extraprem,
                                          totprem,
                                          nduedate,
                                          pstatus,
                                          maturitydt,
                                          runyr,
                                          adjsumass,
                                          last_paid_date,
                                          val_year,
                                          val_date_from,
                                          val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   clm_claim_payable_gen p, ins_p_summery s
                 WHERE --p.approved_dt BETWEEN p_val_date_fr AND p_val_date_to
                       ( (p.vouch_no IS NOT NULL
                          AND vouch_dt BETWEEN NVL (p_val_date_fr,
                                                    vouch_dt)
                                           AND  NVL (p_val_date_to,
                                                     vouch_dt))
                         OR (p.vouch_no_2nd IS NOT NULL
                             AND vouch_no_2nd IN
                                      (SELECT   vouch_no
                                         FROM   acc_gl_trans_mst
                                        WHERE   vouch_dt BETWEEN NVL (
                                                                    p_val_date_fr,
                                                                    vouch_dt
                                                                 )
                                                             AND  NVL (
                                                                     p_val_date_to,
                                                                     vouch_dt
                                                                  ))))
                         AND clm_cause_cd = '01'
                         AND approved_flag = 'Y'
                         AND p.pgid = s.pgid
                         AND s.policy_status = '02'
                         AND comm_date <= p_val_date_to);

            COMMIT;
         END IF;

         --matured Inforce Policy
         IF p_data_tp IN (1, 11)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_inforce_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_inforce_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_inforce_policy (pgid,
                                                    POLICY,
                                                    datcom,
                                                    riskdate,
                                                    PLAN,
                                                    term,
                                                    dob,
                                                    age,
                                                    sumass,
                                                    sumatrisk,
                                                    apen_amt,
                                                    poption,
                                                    aprem,
                                                    paymode,
                                                    lifepre,
                                                    supprem,
                                                    extraprem,
                                                    totprem,
                                                    nduedate,
                                                    pstatus,
                                                    maturitydt,
                                                    runyr,
                                                    adjsumass,
                                                    last_paid_date,
                                                    val_year,
                                                    val_date_from,
                                                    val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   ins_p_summery s
                 WHERE   s.maturity_date BETWEEN p_val_date_fr
                                             AND  p_val_date_to
                         AND policy_status IN ('01', '09', '07', '08', '11')
                         AND comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         END IF;

         --matured paidup Policy
         IF p_data_tp IN (1, 11)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_paidup_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_paidup_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_paidup_policy (pgid,
                                                   POLICY,
                                                   datcom,
                                                   riskdate,
                                                   PLAN,
                                                   term,
                                                   dob,
                                                   age,
                                                   sumass,
                                                   sumatrisk,
                                                   apen_amt,
                                                   poption,
                                                   aprem,
                                                   paymode,
                                                   lifepre,
                                                   supprem,
                                                   extraprem,
                                                   totprem,
                                                   nduedate,
                                                   pstatus,
                                                   maturitydt,
                                                   runyr,
                                                   adjsumass,
                                                   last_paid_date,
                                                   val_year,
                                                   val_date_from,
                                                   val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   ins_p_summery s
                 WHERE   s.maturity_date BETWEEN p_val_date_fr
                                             AND  p_val_date_to
                         AND policy_status IN ('01', '09', '07', '03', '11')
                         AND comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         END IF;

         --surrender Policy
         IF p_data_tp IN (1, 12)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_surrender_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_surrender_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_surrender_policy (pgid,
                                              POLICY,
                                              datcom,
                                              riskdate,
                                              PLAN,
                                              term,
                                              dob,
                                              age,
                                              sumass,
                                              sumatrisk,
                                              apen_amt,
                                              poption,
                                              aprem,
                                              paymode,
                                              lifepre,
                                              supprem,
                                              extraprem,
                                              totprem,
                                              nduedate,
                                              pstatus,
                                              maturitydt,
                                              runyr,
                                              adjsumass,
                                              last_paid_date,
                                              val_year,
                                              val_date_from,
                                              val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   sur_disburs_mst p, ins_p_summery s
                 WHERE   p.disbursment_date BETWEEN p_val_date_fr
                                                AND  p_val_date_to
                         AND s.pgid = p.pgid
                         AND s.policy_status = '04'
                         AND s.comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         END IF;

         --Maturity Lapse Policy
         IF p_data_tp IN (1, 14)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_lapse_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_lapse_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_lapse_policy (pgid,
                                                  POLICY,
                                                  datcom,
                                                  riskdate,
                                                  PLAN,
                                                  term,
                                                  dob,
                                                  age,
                                                  sumass,
                                                  sumatrisk,
                                                  apen_amt,
                                                  poption,
                                                  aprem,
                                                  paymode,
                                                  lifepre,
                                                  supprem,
                                                  extraprem,
                                                  totprem,
                                                  nduedate,
                                                  pstatus,
                                                  maturitydt,
                                                  runyr,
                                                  adjsumass,
                                                  last_paid_date,
                                                  val_year,
                                                  val_date_from,
                                                  val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   ins_p_summery s
                 WHERE   s.policy_status = '10'
                         AND maturity_date < TO_DATE (p_val_date_to + 1)
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   clm_claim_payable_gen
                                 WHERE       pgid = s.pgid
                                         AND clm_cause_cd IN ('02', '06')
                                         AND clm_detl_cd = '01'
                                         AND NVL (payment_status, 'N') = 'Y')
                         AND s.comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_surrender_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         END IF;

         --Inforce policy
         IF p_data_tp IN (1, 2)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_inforce_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_inforce_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_inforce_policy (pgid,
                                            POLICY,
                                            datcom,
                                            riskdate,
                                            PLAN,
                                            term,
                                            dob,
                                            age,
                                            sumass,
                                            sumatrisk,
                                            apen_amt,
                                            poption,
                                            aprem,
                                            paymode,
                                            lifepre,
                                            supprem,
                                            extraprem,
                                            totprem,
                                            nduedate,
                                            pstatus,
                                            maturitydt,
                                            runyr,
                                            adjsumass,
                                            last_paid_date,
                                            val_year,
                                            val_date_from,
                                            val_date_to,
                                            sb_amount)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         )
                  FROM   ins_p_summery s
                 WHERE       NVL (s.policy_installment, 0) > 0
                         AND s.comm_date <= p_val_date_to
                         AND s.maturity_date > p_val_date_to
                         AND ( (s.pay_mode_cd != '05'
                                AND DECODE (
                                      s.pay_mode_cd,
                                      '01',
                                      ADD_MONTHS (s.last_paid_date, 12),
                                      '02',
                                      ADD_MONTHS (s.last_paid_date, 6),
                                      '03',
                                      ADD_MONTHS (s.last_paid_date, 3),
                                      '04',
                                      ADD_MONTHS (s.last_paid_date, 1)
                                   )
                                   + (p_grace_period + 1) >= p_val_date_to)
                              OR (s.pay_mode_cd = '05'))
                         AND policy_status IN ('01', '09', '00', '10')
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_surrender_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_lapse_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;

            --Update the bonus amount in  val_inforce_policy
            /*DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_inforce_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '2',
                     ---Here 2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_inforce_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           tb_amount = v_tb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;*/
         ---End of val_inforce_policy
         END IF;

         --Paidup_policy
         IF p_data_tp IN (1, 3)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_paidup_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_paidup_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_paidup_policy (pgid,
                                           POLICY,
                                           datcom,
                                           riskdate,
                                           PLAN,
                                           term,
                                           dob,
                                           age,
                                           sumass,
                                           sumatrisk,
                                           apen_amt,
                                           poption,
                                           aprem,
                                           paymode,
                                           lifepre,
                                           supprem,
                                           extraprem,
                                           totprem,
                                           nduedate,
                                           pstatus,
                                           maturitydt,
                                           runyr,
                                           adjsumass,
                                           last_paid_date,
                                           val_year,
                                           val_date_from,
                                           val_date_to,
                                           sb_amount)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         )
                  FROM   ins_p_summery s,
                         (SELECT   pgid
                            FROM   ins_p_summery s
                           WHERE       NVL (s.policy_installment, 0) > 0
                                   AND (s.last_paid_inst_no * s.term)
                                      / NVL (s.policy_installment, 1) >= 2
                                   AND s.pay_mode_cd != '05'
                                   AND s.maturity_date > p_val_date_to
                                   AND comm_date <= p_val_date_to
                                   AND policy_status IN
                                            ('01', '09', '00', '10')
                          MINUS
                          SELECT   pgid
                            FROM   ins_p_summery s
                           WHERE       NVL (s.policy_installment, 0) > 0
                                   AND s.comm_date <= p_val_date_to
                                   AND s.maturity_date > p_val_date_to
                                   AND ( (s.pay_mode_cd != '05'
                                          AND DECODE (
                                                s.pay_mode_cd,
                                                '01',
                                                ADD_MONTHS (s.last_paid_date,
                                                            12),
                                                '02',
                                                ADD_MONTHS (s.last_paid_date,
                                                            6),
                                                '03',
                                                ADD_MONTHS (s.last_paid_date,
                                                            3),
                                                '04',
                                                ADD_MONTHS (s.last_paid_date,
                                                            1)
                                             )
                                             + (p_grace_period + 1) >=
                                                p_val_date_to)
                                        OR (s.pay_mode_cd = '05'))
                                   AND policy_status IN
                                            ('01', '09', '00', '10')) p
                 WHERE   s.pgid = p.pgid
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_surrender_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_lapse_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;

            --Update the bonus amount in  val_paidup_policy
            /*DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_paidup_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '3',
                     ---Here 2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_paidup_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           tb_amount = v_tb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;*/
         ---End of val_paidup_policy
         END IF;

         --revive  policy--
         IF p_data_tp IN (1, 10)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_revive_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_revive_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_revive_policy (pgid,
                                           POLICY,
                                           datcom,
                                           riskdate,
                                           PLAN,
                                           term,
                                           dob,
                                           age,
                                           sumass,
                                           sumatrisk,
                                           apen_amt,
                                           poption,
                                           aprem,
                                           paymode,
                                           lifepre,
                                           supprem,
                                           extraprem,
                                           totprem,
                                           nduedate,
                                           pstatus,
                                           maturitydt,
                                           runyr,
                                           adjsumass,
                                           last_paid_date,
                                           val_year,
                                           val_date_from,
                                           val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   ins_p_summery s
                 WHERE   EXISTS
                            (SELECT   1
                               FROM   acc_receivables
                              WHERE   receive_date BETWEEN p_val_date_fr
                                                       AND  p_val_date_to
                                      AND pgid = s.pgid)
                         AND EXISTS (SELECT   1
                                       FROM   val_lapse_policy_total
                                      WHERE   pgid = s.pgid));

            COMMIT;
         END IF;

         --Lapse Policy
         IF p_data_tp IN (1, 14)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_lapse_policy_cur_year
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_lapse_policy_cur_year
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_lapse_policy_cur_year (pgid,
                                                   POLICY,
                                                   datcom,
                                                   riskdate,
                                                   PLAN,
                                                   term,
                                                   dob,
                                                   age,
                                                   sumass,
                                                   sumatrisk,
                                                   apen_amt,
                                                   poption,
                                                   aprem,
                                                   paymode,
                                                   lifepre,
                                                   supprem,
                                                   extraprem,
                                                   totprem,
                                                   nduedate,
                                                   pstatus,
                                                   maturitydt,
                                                   runyr,
                                                   adjsumass,
                                                   last_paid_date,
                                                   val_year,
                                                   val_date_from,
                                                   val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   ins_p_summery s, ins_product p
                 WHERE   s.maturity_date > p_val_date_to
                         AND NVL (s.policy_installment, 0) > 0
                         AND (s.last_paid_inst_no * s.term)
                            / NVL (s.policy_installment, 1) <
                               NVL (p.paidup_age, 2)
                         AND DECODE (s.pay_mode_cd,
                                     '01', ADD_MONTHS (s.last_paid_date, 12),
                                     '02', ADD_MONTHS (s.last_paid_date, 6),
                                     '03', ADD_MONTHS (s.last_paid_date, 3),
                                     '04', ADD_MONTHS (s.last_paid_date, 1),
                                     NULL)
                            + (p_grace_period + 1) BETWEEN p_val_date_fr
                                                       AND  p_val_date_to
                         AND s.product_cd = p.product_cd
                         AND comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_surrender_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         END IF;

         --Modification of current year lapse data and input into to VAL_LAPSE_POLICY_TOTAL
         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_new_policy, v_new_policy_sum
           FROM   val_new_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (1), SUM (sumass)
           INTO   v_revive_policy, v_revive_policy_sum
           FROM   val_revive_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_death_policy, v_death_policy_sum
           FROM   val_death_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_matinforce_policy, v_matinforce_sum
           FROM   val_matured_inforce_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_matpaidup_policy, v_matpaidup_sum
           FROM   val_matured_paidup_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         v_matured_policy_sum := v_matinforce_sum + v_matpaidup_sum;
         v_matured_policy := v_matinforce_policy + v_matpaidup_policy;

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_surrendered_policy, v_surrendered_policy_sum
           FROM   val_surrender_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_inforce_policy, v_inforce_policy_sum
           FROM   val_inforce_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_paidup_policy, v_paidup_policy_sum
           FROM   val_paidup_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid)
           INTO   v_curlpase_policy
           FROM   val_lapse_policy_cur_year
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         BEGIN
            SELECT   (opening_inf_paidup + new_policy + revive_policy)
                     - (  matured_policy
                        + surrendered_policy
                        + death_policy
                        + lapse_policy
                        + lapse_in_2014_data)
              INTO   v_op_inf_paidup_pol
              FROM   val_valuation_summery
             WHERE   TO_NUMBER (val_year) =
                        TO_NUMBER (TO_CHAR (p_val_date_to, 'RRRR')) - 1;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_op_inf_paidup_pol := 0;
         END;

         v_total_policy :=
            (v_op_inf_paidup_pol + v_new_policy + v_revive_policy);
         v_total_claim_policy :=
            (  v_death_policy
             + v_matinforce_policy
             + v_matpaidup_policy
             + v_surrendered_policy
             + v_curlpase_policy);

         DELETE FROM   val_lapse_policy_total
               WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         IF v_total_policy - v_total_claim_policy !=
               v_inforce_policy + v_paidup_policy
         THEN
            IF (v_total_policy - v_total_claim_policy)
               - (v_inforce_policy + v_paidup_policy) < 0
            THEN
               --Delete data from  VAL_LAPSE_POLICY_CUR_YEAR and insert into VAL_LAPSE_POLICY_TOTALl
               BEGIN
                  FOR i
                  IN (  SELECT   pgid, val_year, last_paid_date
                          FROM   val_lapse_policy_cur_year
                         WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                      ORDER BY   last_paid_date)
                  LOOP
                     IF v_counter <=
                           ABS( (v_total_policy - v_total_claim_policy)
                               - (v_inforce_policy + v_paidup_policy))
                     THEN
                        v_counter := v_counter + 1;

                        INSERT INTO val_lapse_policy_total (pgid,
                                                            POLICY,
                                                            datcom,
                                                            riskdate,
                                                            PLAN,
                                                            term,
                                                            dob,
                                                            age,
                                                            sumass,
                                                            sumatrisk,
                                                            apen_amt,
                                                            poption,
                                                            aprem,
                                                            paymode,
                                                            lifepre,
                                                            supprem,
                                                            extraprem,
                                                            totprem,
                                                            nduedate,
                                                            pstatus,
                                                            maturitydt,
                                                            runyr,
                                                            adjsumass,
                                                            last_paid_date,
                                                            val_year,
                                                            val_date_from,
                                                            val_date_to)
                           (SELECT   pgid,
                                     POLICY,
                                     datcom,
                                     riskdate,
                                     PLAN,
                                     term,
                                     dob,
                                     age,
                                     sumass,
                                     sumatrisk,
                                     apen_amt,
                                     poption,
                                     aprem,
                                     paymode,
                                     lifepre,
                                     supprem,
                                     extraprem,
                                     totprem,
                                     nduedate,
                                     pstatus,
                                     maturitydt,
                                     runyr,
                                     adjsumass,
                                     last_paid_date,
                                     val_year,
                                     val_date_from,
                                     val_date_to
                              FROM   val_lapse_policy_cur_year
                             WHERE   val_year =
                                        TO_CHAR (p_val_date_to, 'RRRR')
                                     AND pgid = i.pgid
                                     AND val_year = i.val_year);

                        DELETE FROM   val_lapse_policy_cur_year
                              WHERE   val_year =
                                         TO_CHAR (p_val_date_to, 'RRRR')
                                      AND pgid = i.pgid
                                      AND val_year = i.val_year;
                     ELSE
                        EXIT;
                     END IF;
                  END LOOP;

                  COMMIT;
               END;
            ELSIF (v_total_policy - v_total_claim_policy) - (v_inforce_policy + v_paidup_policy) > 0
            THEN
               --add data into  VAL_LAPSE_POLICY_CUR_YEAR and delete data from  VAL_LAPSE_POLICY_TOTAL
               NULL;
            END IF;
         ELSE
            INSERT INTO val_lapse_policy_total (pgid,
                                                POLICY,
                                                datcom,
                                                riskdate,
                                                PLAN,
                                                term,
                                                dob,
                                                age,
                                                sumass,
                                                sumatrisk,
                                                apen_amt,
                                                poption,
                                                aprem,
                                                paymode,
                                                lifepre,
                                                supprem,
                                                extraprem,
                                                totprem,
                                                nduedate,
                                                pstatus,
                                                maturitydt,
                                                runyr,
                                                adjsumass,
                                                last_paid_date,
                                                val_year,
                                                val_date_from,
                                                val_date_to)
               (SELECT   pgid,
                         POLICY,
                         datcom,
                         riskdate,
                         PLAN,
                         term,
                         dob,
                         age,
                         sumass,
                         sumatrisk,
                         apen_amt,
                         poption,
                         aprem,
                         paymode,
                         lifepre,
                         supprem,
                         extraprem,
                         totprem,
                         nduedate,
                         pstatus,
                         maturitydt,
                         runyr,
                         adjsumass,
                         last_paid_date,
                         val_year,
                         val_date_from,
                         val_date_to
                  FROM   val_lapse_policy_cur_year
                 WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR'));

            DELETE FROM   val_lapse_policy_cur_year
                  WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');
         END IF;

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_lapse_policy, v_lapse_policy_sum
           FROM   val_lapse_policy_cur_year
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         IF v_val_status IS NULL
         THEN
            INSERT INTO val_valuation_summery (val_year,
                                               inforce_policy,
                                               paidup_policy,
                                               new_policy,
                                               deffered_policy,
                                               second_yr_policy,
                                               renewal_yr_policy,
                                               revive_policy,
                                               matured_policy,
                                               surrendered_policy,
                                               death_policy,
                                               lapse_policy,
                                               val_status,
                                               i_usr,
                                               i_dt,
                                               opening_inf_paidup,
                                               date_from,
                                               date_to,
                                               grace_period,
                                               lapse_in_2014_data,
                                               inforce_policy_sum,
                                               paidup_policy_sum,
                                               new_policy_sum,
                                               deffered_policy_sum,
                                               second_yr_policy_sum,
                                               renewal_yr_policy_sum,
                                               revive_policy_sum,
                                               matured_policy_sum,
                                               surrendered_policy_sum,
                                               death_policy_sum,
                                               lapse_policy_sum)
              VALUES   (TO_CHAR (p_val_date_to, 'RRRR'),
                        v_inforce_policy,
                        v_paidup_policy,
                        v_new_policy,
                        v_deffered_policy,
                        v_second_yr_policy,
                        v_ren_policy,
                        v_revive_policy,
                        v_matured_policy,
                        v_surrendered_policy,
                        v_death_policy,
                        v_lapse_policy,
                        '0',
                        p_user,
                        SYSDATE,
                        v_op_inf_paidup_pol,
                        p_val_date_fr,
                        p_val_date_to,
                        p_grace_period,
                        v_lapse_in_2014_data,
                        v_inforce_policy_sum,
                        v_paidup_policy_sum,
                        v_new_policy_sum,
                        v_deffered_policy_sum,
                        v_second_yr_policy_sum,
                        v_renewal_yr_policy_sum,
                        v_revive_policy_sum,
                        v_matured_policy_sum,
                        v_surrendered_policy_sum,
                        v_death_policy_sum,
                        v_lapse_policy_sum);

            p_error :=
               'Valuation data preparation has been successfully completed.';
         ELSIF v_val_status = '0'
         THEN
            UPDATE   val_valuation_summery
               SET   inforce_policy = v_inforce_policy,
                     paidup_policy = v_paidup_policy,
                     new_policy = v_new_policy,
                     deffered_policy = v_deffered_policy,
                     second_yr_policy = v_second_yr_policy,
                     renewal_yr_policy = v_ren_policy,
                     revive_policy = v_revive_policy,
                     matured_policy = v_matured_policy,
                     surrendered_policy = v_surrendered_policy,
                     death_policy = v_death_policy,
                     lapse_policy = v_lapse_policy,
                     u_usr = p_user,
                     u_dt = SYSDATE,
                     opening_inf_paidup = v_op_inf_paidup_pol,
                     date_from = p_val_date_fr,
                     date_to = p_val_date_to,
                     grace_period = p_grace_period,
                     lapse_in_2014_data = v_lapse_in_2014_data,
                     inforce_policy_sum = v_inforce_policy_sum,
                     paidup_policy_sum = v_paidup_policy_sum,
                     new_policy_sum = v_new_policy_sum,
                     deffered_policy_sum = v_deffered_policy_sum,
                     second_yr_policy_sum = v_second_yr_policy_sum,
                     renewal_yr_policy_sum = v_renewal_yr_policy_sum,
                     revive_policy_sum = v_revive_policy_sum,
                     matured_policy_sum = v_matured_policy_sum,
                     surrendered_policy_sum = v_surrendered_policy_sum,
                     death_policy_sum = v_death_policy_sum,
                     lapse_policy_sum = v_lapse_policy_sum
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            p_error :=
               'Valuation data modification has been successfully completed.';
         ELSE
            NULL;
         END IF;

         --matured due Policy
         IF p_data_tp IN (1, 11)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_due_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_due_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_due_policy (pgid,
                                                POLICY,
                                                datcom,
                                                riskdate,
                                                PLAN,
                                                term,
                                                dob,
                                                age,
                                                sumass,
                                                sumatrisk,
                                                apen_amt,
                                                poption,
                                                aprem,
                                                paymode,
                                                lifepre,
                                                supprem,
                                                extraprem,
                                                totprem,
                                                nduedate,
                                                pstatus,
                                                maturitydt,
                                                runyr,
                                                adjsumass,
                                                last_paid_date,
                                                val_year,
                                                val_date_from,
                                                val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   ins_p_summery s, ins_product p
                 WHERE   policy_status IN
                               ('01', '09', '07', '08', '11', '03')
                         AND NVL (s.policy_installment, 0) > 0
                         AND (s.last_paid_inst_no * s.term)
                            / NVL (s.policy_installment, 1) >=
                               NVL (p.paidup_age, 2)
                         AND s.product_cd = p.product_cd
                         AND maturity_date <= p_val_date_to
                         AND comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   clm_claim_payable_gen
                                 WHERE       pgid = s.pgid
                                         AND clm_cause_cd IN ('02', '06')
                                         AND clm_detl_cd = '01'
                                         AND NVL (approved_flag, 'N') = 'Y')
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_matured_lapse_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         END IF;

         --Status wise policy Summery preparation
         BEGIN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_status_wise_pol_sum
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_status_wise_pol_sum
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_status_wise_pol_sum (val_year,
                                                 comm_year,
                                                 new_policy,
                                                 inforce,
                                                 paidup,
                                                 lapse,
                                                 mat_lapse,
                                                 maturity_inforce,
                                                 maturity_paidup,
                                                 due_maturity,
                                                 death,
                                                 surrender,
                                                 total)
               (  SELECT   TO_CHAR (p_val_date_to, 'RRRR') val_year,
                           TO_CHAR (datcom, 'RRRR') comm_year,
                           COUNT (pgid) new_policy,
                           SUM (DECODE (status, '2', 1, 0)) inforce,
                           SUM (DECODE (status, '3', 1, 0)) paidup,
                           SUM (DECODE (status, '4', 1, 0)) lapse,
                           SUM (DECODE (status, '5', 1, 0)) mat_lapse,
                           SUM (DECODE (status, '6', 1, 0)) maturity_inforce,
                           SUM (DECODE (status, '7', 1, 0)) maturity_paidup,
                           SUM (DECODE (status, '8', 1, 0)) due_maturity,
                           SUM (DECODE (status, '9', 1, 0)) death,
                           SUM (DECODE (status, '10', 1, 0)) surrender,
                             SUM (DECODE (status, '2', 1, 0))
                           + SUM (DECODE (status, '3', 1, 0))
                           + SUM (DECODE (status, '4', 1, 0))
                           + SUM (DECODE (status, '5', 1, 0))
                           + SUM (DECODE (status, '6', 1, 0))
                           + SUM (DECODE (status, '7', 1, 0))
                           + SUM (DECODE (status, '8', 1, 0))
                           + SUM (DECODE (status, '9', 1, 0))
                           + SUM (DECODE (status, '10', 1, 0))
                              total
                    FROM   (SELECT   pgid, datcom, '2' status --Here '2'= Inforce
                              FROM   val_inforce_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid, datcom, '3' status --Here '3'= paidup
                              FROM   val_paidup_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid, datcom, '5' status --Here '5'= mat_lapse
                              FROM   val_matured_lapse_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid, datcom, '8' status --Here '2'= mat_due
                              FROM   val_matured_due_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid,
                                     comm_date datcom,
                                     CASE
                                        WHEN a.maturity_inforce = 1 THEN '6'
                                        WHEN a.maturity_paidup = 1 THEN '7'
                                        WHEN a.death = 1 THEN '9'
                                        WHEN a.surrender = 1 THEN '10'
                                        ELSE '4'
                                     END
                                        status
                              --here '4'=Lapse,'6'= maturity_inforce,'7'=maturity_paidup,'9'=Death,'10'=Surrender
                              FROM   (SELECT   pgid,
                                               comm_date,
                                               (SELECT   COUNT (DISTINCT pgid)
                                                  FROM   clm_claim_payable_gen
                                                 WHERE   clm_cause_cd = '02'
                                                         AND clm_detl_cd = '01'
                                                         AND NVL (
                                                               payment_status,
                                                               'N'
                                                            ) = 'Y'
                                                         AND pgid = s.pgid)
                                                  maturity_inforce,
                                               (SELECT   COUNT (DISTINCT pgid)
                                                  FROM   clm_claim_payable_gen
                                                 WHERE   clm_cause_cd = '06'
                                                         AND clm_detl_cd = '01'
                                                         AND NVL (
                                                               payment_status,
                                                               'N'
                                                            ) = 'Y'
                                                         AND pgid = s.pgid)
                                                  maturity_paidup,
                                               DECODE (policy_status,
                                                       '02', 1,
                                                       0)
                                                  death,
                                               DECODE (policy_status,
                                                       '04', 1,
                                                       0)
                                                  surrender
                                        FROM   ins_p_summery s
                                       WHERE   NOT EXISTS
                                                  (SELECT   1
                                                     FROM   (SELECT   pgid
                                                               FROM   val_inforce_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         )
                                                             UNION ALL
                                                             SELECT   pgid
                                                               FROM   val_paidup_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         )
                                                             UNION ALL
                                                             SELECT   pgid
                                                               FROM   val_matured_lapse_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         )
                                                             UNION ALL
                                                             SELECT   pgid
                                                               FROM   val_matured_due_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         ))
                                                    WHERE   pgid = s.pgid)) a)
                   WHERE   TO_NUMBER (TO_CHAR (datcom, 'RRRR')) BETWEEN 1990
                                                                    AND  TO_NUMBER(TO_CHAR (
                                                                                      p_val_date_to,
                                                                                      'RRRR'
                                                                                   ))
                GROUP BY   TO_CHAR (datcom, 'RRRR'));

            COMMIT;
         END;

         COMMIT;
         p_error :=
            'Valuation Summery Process has been completed of '
            || TO_CHAR (p_val_date_to, 'RRRR');
      ELSE
         p_error :=
            'Valuation Finalization has been completed of '
            || TO_CHAR (p_val_date_to, 'RRRR');
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END;
/


--
-- PRO_VALUATION_SUMMERY_ORGNL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_valuation_summery_orgnl (
   p_val_date_fr        DATE,
   p_val_date_to        DATE,
   p_grace_period       NUMBER,
   p_user               VARCHAR2,
   p_process_tp         CHAR,
   --here 1=Ony for summery report , 2=Summery report   Preparation
   p_data_tp            CHAR,
   p_error          OUT VARCHAR2
)
IS
   v_inforce_policy           NUMBER := 0;
   v_paidup_policy            NUMBER := 0;
   v_new_policy               NUMBER := 0;
   v_deffered_policy          NUMBER := 0;
   v_second_yr_policy         NUMBER := 0;
   v_ren_policy               NUMBER := 0;
   v_revive_policy            NUMBER := 0;
   v_matured_policy           NUMBER := 0;
   v_surrendered_policy       NUMBER := 0;
   v_death_policy             NUMBER := 0;
   v_lapse_policy             NUMBER := 0;
   v_op_inf_paidup_pol        NUMBER := 0;
   v_val_status               CHAR (1);
   v_lapse_in_2014_data       NUMBER := 0;
   v_count                    NUMBER := 0;
   v_inforce_policy_sum       NUMBER := 0;
   v_paidup_policy_sum        NUMBER := 0;
   v_new_policy_sum           NUMBER := 0;
   v_deffered_policy_sum      NUMBER := 0;
   v_second_yr_policy_sum     NUMBER := 0;
   v_renewal_yr_policy_sum    NUMBER := 0;
   v_revive_policy_sum        NUMBER := 0;
   v_matured_policy_sum       NUMBER := 0;
   v_surrendered_policy_sum   NUMBER := 0;
   v_death_policy_sum         NUMBER := 0;
   v_lapse_policy_sum         NUMBER := 0;
   v_matinforce_policy        NUMBER := 0;
   v_matpaidup_policy         NUMBER := 0;
   v_total_policy             NUMBER := 0;
   v_total_claim_policy       NUMBER := 0;
   v_curlpase_policy          NUMBER := 0;
   v_counter                  NUMBER := 1;
   v_matinforce_sum           NUMBER := 0;
   v_matpaidup_sum            NUMBER := 0;
BEGIN
   IF TO_CHAR (p_val_date_to, 'RRRR') != '2016'
   THEN
      BEGIN
         SELECT   val_status
           INTO   v_val_status
           FROM   val_valuation_summery
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');
      EXCEPTION
         WHEN OTHERS
         THEN
            v_val_status := NULL;
      END;

      IF NVL (v_val_status, '0') != '1'
      THEN
         IF p_process_tp = '2'
         THEN
            --New Policy
            IF p_data_tp IN (1, 4)
            THEN
               SELECT   COUNT (1)
                 INTO   v_count
                 FROM   val_new_policy
                WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               IF v_count > 0
               THEN
                  DELETE FROM   val_new_policy
                        WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

                  COMMIT;
               END IF;

               INSERT INTO val_new_policy (pgid,
                                           POLICY,
                                           datcom,
                                           riskdate,
                                           PLAN,
                                           term,
                                           dob,
                                           age,
                                           sumass,
                                           sumatrisk,
                                           apen_amt,
                                           poption,
                                           aprem,
                                           paymode,
                                           lifepre,
                                           supprem,
                                           extraprem,
                                           totprem,
                                           nduedate,
                                           pstatus,
                                           maturitydt,
                                           runyr,
                                           adjsumass,
                                           last_paid_date,
                                           val_year,
                                           val_date_from,
                                           val_date_to)
                  (SELECT   s.pgid,
                            fun_ins_pgid_to_policy_no (s.pgid),
                            s.comm_date,
                            s.risk_date,
                            s.product_cd,
                            s.term,
                            s.dob,
                            s.age,
                            s.sum_assured,
                            fun_sum_at_risk (s.pgid),
                            CASE
                               WHEN s.product_cd = '07'
                               THEN
                                  (s.sum_assured / 10)
                               ELSE
                                  0
                            END,
                            s.option_cd,
                            s.total_yearly_premium,
                            s.pay_mode_cd,
                            s.life_premium,
                            s.suppl_ben_premium,
                            s.extra_premium,
                            s.installment_premium,
                            s.next_due_date,
                            s.policy_status,
                            s.maturity_date,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            fun_paidup_value (s.pgid)
                            - fun_sb_available_amt (
                                 s.term,
                                 ROUND (
                                    s.last_paid_inst_no
                                    / DECODE (s.pay_mode_cd,
                                              '01', 1,
                                              '02', 2,
                                              '03', 4,
                                              '04', 12,
                                              1),
                                    2
                                 ),
                                 s.product_cd,
                                 s.sum_assured
                              ),
                            s.last_paid_date,
                            TO_CHAR (p_val_date_to, 'RRRR'),
                            p_val_date_fr,
                            p_val_date_to
                     FROM   ins_p_summery s
                    WHERE   s.comm_date BETWEEN p_val_date_fr
                                            AND  p_val_date_to);

               COMMIT;
            END IF;
         END IF;

         --Death Policy
         IF p_data_tp IN (1, 13)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_death_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_death_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_death_policy (pgid,
                                          POLICY,
                                          datcom,
                                          riskdate,
                                          PLAN,
                                          term,
                                          dob,
                                          age,
                                          sumass,
                                          sumatrisk,
                                          apen_amt,
                                          poption,
                                          aprem,
                                          paymode,
                                          lifepre,
                                          supprem,
                                          extraprem,
                                          totprem,
                                          nduedate,
                                          pstatus,
                                          maturitydt,
                                          runyr,
                                          adjsumass,
                                          last_paid_date,
                                          val_year,
                                          val_date_from,
                                          val_date_to,
                                          sb_amount,
                                          paidup_sumass,
                                          paidup_adjsumass)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         ),
                         fun_paidup_value (s.pgid),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           )
                  FROM   clm_claim_payable_gen p, ins_p_summery s
                 WHERE --p.approved_dt BETWEEN p_val_date_fr AND p_val_date_to
                       ( (p.vouch_no IS NOT NULL
                          AND vouch_dt BETWEEN NVL (p_val_date_fr,
                                                    vouch_dt)
                                           AND  NVL (p_val_date_to,
                                                     vouch_dt))
                         OR (p.vouch_no_2nd IS NOT NULL
                             AND vouch_no_2nd IN
                                      (SELECT   vouch_no
                                         FROM   acc_gl_trans_mst
                                        WHERE   vouch_dt BETWEEN NVL (
                                                                    p_val_date_fr,
                                                                    vouch_dt
                                                                 )
                                                             AND  NVL (
                                                                     p_val_date_to,
                                                                     vouch_dt
                                                                  ))))
                         AND clm_cause_cd = '01'
                         AND approved_flag = 'Y'
                         AND p.pgid = s.pgid
                         AND s.policy_status = '02'
                         AND comm_date <= p_val_date_to);

            COMMIT;

            --Update the bonus amount in  val_death_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_death_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '1',
                     ---Here 1 = death claim,  2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_death_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_inforce_policy
         END IF;

         --matured Inforce Policy
         IF p_data_tp IN (1, 11)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_inforce_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_inforce_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_inforce_policy (pgid,
                                                    POLICY,
                                                    datcom,
                                                    riskdate,
                                                    PLAN,
                                                    term,
                                                    dob,
                                                    age,
                                                    sumass,
                                                    sumatrisk,
                                                    apen_amt,
                                                    poption,
                                                    aprem,
                                                    paymode,
                                                    lifepre,
                                                    supprem,
                                                    extraprem,
                                                    totprem,
                                                    nduedate,
                                                    pstatus,
                                                    maturitydt,
                                                    runyr,
                                                    adjsumass,
                                                    last_paid_date,
                                                    val_year,
                                                    val_date_from,
                                                    val_date_to,
                                                    sb_amount,
                                                    paidup_sumass,
                                                    paidup_adjsumass)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         ),
                         fun_paidup_value (s.pgid),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           )
                  FROM   ins_p_summery s
                 WHERE   s.maturity_date BETWEEN p_val_date_fr
                                             AND  p_val_date_to
                         AND policy_status IN ('01', '09', '07', '08', '11')
                         AND comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;

            --Update the bonus amount in  val_matured_inforce_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_matured_inforce_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '2',
                     ---Here 1 = death claim,  2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_matured_inforce_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_matured_inforce_policy
         END IF;

         --matured paidup Policy
         IF p_data_tp IN (1, 11)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_paidup_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_paidup_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_paidup_policy (pgid,
                                                   POLICY,
                                                   datcom,
                                                   riskdate,
                                                   PLAN,
                                                   term,
                                                   dob,
                                                   age,
                                                   sumass,
                                                   sumatrisk,
                                                   apen_amt,
                                                   poption,
                                                   aprem,
                                                   paymode,
                                                   lifepre,
                                                   supprem,
                                                   extraprem,
                                                   totprem,
                                                   nduedate,
                                                   pstatus,
                                                   maturitydt,
                                                   runyr,
                                                   adjsumass,
                                                   last_paid_date,
                                                   val_year,
                                                   val_date_from,
                                                   val_date_to,
                                                   sb_amount,
                                                   paidup_sumass,
                                                   paidup_adjsumass)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         ),
                         fun_paidup_value (s.pgid),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           )
                  FROM   ins_p_summery s
                 WHERE   s.maturity_date BETWEEN p_val_date_fr
                                             AND  p_val_date_to
                         AND policy_status IN ('01', '09', '07', '03', '11')
                         AND comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;

            --Update the bonus amount in  val_matured_paidup_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_matured_paidup_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '3',
                     ---Here 1 = death claim,  2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_matured_paidup_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_matured_paidup_policy
         END IF;

         -- 4 surrender Policy
         IF p_data_tp IN (1, 12)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_surrender_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_surrender_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_surrender_policy (pgid,
                                              POLICY,
                                              datcom,
                                              riskdate,
                                              PLAN,
                                              term,
                                              dob,
                                              age,
                                              sumass,
                                              sumatrisk,
                                              apen_amt,
                                              poption,
                                              aprem,
                                              paymode,
                                              lifepre,
                                              supprem,
                                              extraprem,
                                              totprem,
                                              nduedate,
                                              pstatus,
                                              maturitydt,
                                              runyr,
                                              adjsumass,
                                              last_paid_date,
                                              val_year,
                                              val_date_from,
                                              val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   sur_disburs_mst p, ins_p_summery s
                 WHERE   p.disbursment_date BETWEEN p_val_date_fr
                                                AND  p_val_date_to
                         AND s.pgid = p.pgid
                         AND s.policy_status = '04'
                         AND s.comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;

            --Update the bonus amount in  val_surrender_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_surrender_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '4',
                     ---Here 1 = death claim,  2=Matured Calim,3=Paidup Maturity , 4 = Surrender Claim
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_surrender_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_surrender_policy
         END IF;

         --Maturity Lapse Policy
         IF p_data_tp IN (1, 14)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_lapse_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_lapse_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_lapse_policy (pgid,
                                                  POLICY,
                                                  datcom,
                                                  riskdate,
                                                  PLAN,
                                                  term,
                                                  dob,
                                                  age,
                                                  sumass,
                                                  sumatrisk,
                                                  apen_amt,
                                                  poption,
                                                  aprem,
                                                  paymode,
                                                  lifepre,
                                                  supprem,
                                                  extraprem,
                                                  totprem,
                                                  nduedate,
                                                  pstatus,
                                                  maturitydt,
                                                  runyr,
                                                  adjsumass,
                                                  last_paid_date,
                                                  val_year,
                                                  val_date_from,
                                                  val_date_to,
                                                  sb_amount,
                                                  paidup_sumass,
                                                  paidup_adjsumass)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         ),
                         fun_paidup_value (s.pgid),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           )
                  FROM   ins_p_summery s
                 WHERE   s.policy_status = '10'
                         AND maturity_date < TO_DATE (p_val_date_to + 1)
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   clm_claim_payable_gen
                                 WHERE       pgid = s.pgid
                                         AND clm_cause_cd IN ('02', '06')
                                         AND clm_detl_cd = '01'
                                         AND NVL (payment_status, 'N') = 'Y')
                         AND s.comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_surrender_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         --Update the bonus amount in  val_death_policy
         /* DECLARE
             v_rb_bonus            NUMBER (10);
             v_arb_bonus           NUMBER (10);
             v_tb_bonus            NUMBER (10);
             v_inforce_bon_count   NUMBER := 0;
          BEGIN
             FOR x
             IN (SELECT   v.pgid,
                          v.datcom,
                          v.term,
                          v.PLAN,
                          v.sumass,
                          v.pstatus,
                          v.last_paid_date,
                          v.paymode,
                          s.last_paid_inst_no,
                          p.policy_tp_cd
                   FROM   val_death_policy v,
                          ins_p_summery s,
                          ins_product p
                  WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                          AND val_date_from = p_val_date_fr
                          AND val_date_to = p_val_date_to
                          AND v.pgid = s.pgid
                          AND s.product_cd = p.product_cd
                          AND v.last_paid_date IS NOT NULL)
             LOOP
                pro_policy_bonus_cal_val (
                   p_pgid                 => x.pgid,
                   p_comm_date            => x.datcom,
                   p_term                 => x.term,
                   p_product_cd           => x.PLAN,
                   p_sum_assured          => x.sumass,
                   p_policy_tp_cd         => x.policy_tp_cd,
                   p_applicable_on        => '1',
                   ---Here 1 = death claim,  2=Matured Calim,3=Paidup Maturity
                   p_no_of_anf_loan_yr    => 0,
                   p_policy_status        => x.pstatus,
                   p_max_payment_dt       => x.last_paid_date,
                   p_irg_bonus_bar_date   => x.last_paid_date,
                   --same as  p_max_payment_dt
                   p_last_paid_date       => x.last_paid_date,
                   p_pay_mode_cd          => x.paymode,
                   p_last_paid_inst_no    => x.last_paid_inst_no,
                   p_rb_bonus             => v_rb_bonus,
                   p_arb_bonus            => v_arb_bonus,
                   p_tb_bonus             => v_tb_bonus
                );

                UPDATE   val_death_policy
                   SET   rb_amount = v_rb_bonus,
                         arb_amount = v_arb_bonus,
                         total_bonus = v_rb_bonus + v_arb_bonus
                 WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                         AND val_date_from = p_val_date_fr
                         AND val_date_to = p_val_date_to
                         AND pgid = x.pgid;

                IF v_inforce_bon_count = 500
                THEN
                   COMMIT;
                   v_inforce_bon_count := 0;
                ELSE
                   v_inforce_bon_count := v_inforce_bon_count + 1;
                END IF;
             END LOOP;

             COMMIT;
          END;   */
         ---End of val_inforce_policy
         END IF;

         --Inforce policy
         IF p_data_tp IN (1, 2)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_inforce_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_inforce_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_inforce_policy (pgid,
                                            POLICY,
                                            datcom,
                                            riskdate,
                                            PLAN,
                                            term,
                                            dob,
                                            age,
                                            sumass,
                                            sumatrisk,
                                            apen_amt,
                                            poption,
                                            aprem,
                                            paymode,
                                            lifepre,
                                            supprem,
                                            extraprem,
                                            totprem,
                                            nduedate,
                                            pstatus,
                                            maturitydt,
                                            runyr,
                                            adjsumass,
                                            last_paid_date,
                                            val_year,
                                            val_date_from,
                                            val_date_to,
                                            sb_amount,
                                            PAIDUP_SUMASS)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         /*  fun_paidup_value (s.pgid)   "Only for Inforce Policies ( Full Sum Assured - SB)"   */
                         s.sum_assured
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         ),
                         fun_paidup_value (s.pgid)
                  FROM   ins_p_summery s
                 WHERE       NVL (s.policy_installment, 0) > 0
                         AND s.comm_date <= p_val_date_to
                         AND s.maturity_date > p_val_date_to
                         AND ( (s.pay_mode_cd != '05'
                                AND DECODE (
                                      s.pay_mode_cd,
                                      '01',
                                      ADD_MONTHS (s.last_paid_date, 12),
                                      '02',
                                      ADD_MONTHS (s.last_paid_date, 6),
                                      '03',
                                      ADD_MONTHS (s.last_paid_date, 3),
                                      '04',
                                      ADD_MONTHS (s.last_paid_date, 1)
                                   )
                                   + (p_grace_period + 1) >= p_val_date_to)
                              OR (s.pay_mode_cd = '05'))
                         AND policy_status IN ('01', '09', '00', '10')
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_surrender_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_lapse_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;

            --Update the bonus amount in  val_inforce_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_inforce_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '2',
                     ---Here 2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_inforce_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           tb_amount = v_tb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus + v_tb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_inforce_policy
         END IF;

         --Paidup_policy
         IF p_data_tp IN (1, 3)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_paidup_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_paidup_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_paidup_policy (pgid,
                                           POLICY,
                                           datcom,
                                           riskdate,
                                           PLAN,
                                           term,
                                           dob,
                                           age,
                                           sumass,
                                           sumatrisk,
                                           apen_amt,
                                           poption,
                                           aprem,
                                           paymode,
                                           lifepre,
                                           supprem,
                                           extraprem,
                                           totprem,
                                           nduedate,
                                           pstatus,
                                           maturitydt,
                                           runyr,
                                           adjsumass,
                                           last_paid_date,
                                           val_year,
                                           val_date_from,
                                           val_date_to,
                                           sb_amount,
                                           paidup_sumass,
                                           paidup_adjsumass)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to,
                         fun_sb_available_amt (
                            s.term,
                            ROUND (
                               s.last_paid_inst_no
                               / DECODE (s.pay_mode_cd,
                                         '01', 1,
                                         '02', 2,
                                         '03', 4,
                                         '04', 12,
                                         1),
                               2
                            ),
                            s.product_cd,
                            s.sum_assured
                         ),
                         fun_paidup_value (s.pgid),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           )
                  FROM   ins_p_summery s,
                         (SELECT   pgid
                            FROM   ins_p_summery s
                           WHERE       NVL (s.policy_installment, 0) > 0
                                   AND (s.last_paid_inst_no * s.term)
                                      / NVL (s.policy_installment, 1) >= 2
                                   AND s.pay_mode_cd != '05'
                                   AND s.maturity_date > p_val_date_to
                                   AND comm_date <= p_val_date_to
                                   AND policy_status IN
                                            ('01', '09', '00', '10')
                          MINUS
                          SELECT   pgid
                            FROM   ins_p_summery s
                           WHERE       NVL (s.policy_installment, 0) > 0
                                   AND s.comm_date <= p_val_date_to
                                   AND s.maturity_date > p_val_date_to
                                   AND ( (s.pay_mode_cd != '05'
                                          AND DECODE (
                                                s.pay_mode_cd,
                                                '01',
                                                ADD_MONTHS (s.last_paid_date,
                                                            12),
                                                '02',
                                                ADD_MONTHS (s.last_paid_date,
                                                            6),
                                                '03',
                                                ADD_MONTHS (s.last_paid_date,
                                                            3),
                                                '04',
                                                ADD_MONTHS (s.last_paid_date,
                                                            1)
                                             )
                                             + (p_grace_period + 1) >=
                                                p_val_date_to)
                                        OR (s.pay_mode_cd = '05'))
                                   AND policy_status IN
                                            ('01', '09', '00', '10')) p
                 WHERE   s.pgid = p.pgid
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_surrender_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_lapse_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;

            --Update the bonus amount in  val_paidup_policy
            DECLARE
               v_rb_bonus            NUMBER (10);
               v_arb_bonus           NUMBER (10);
               v_tb_bonus            NUMBER (10);
               v_inforce_bon_count   NUMBER := 0;
            BEGIN
               FOR x
               IN (SELECT   v.pgid,
                            v.datcom,
                            v.term,
                            v.PLAN,
                            v.sumass,
                            v.paidup_sumass,
                            v.pstatus,
                            v.last_paid_date,
                            v.paymode,
                            s.last_paid_inst_no,
                            p.policy_tp_cd
                     FROM   val_paidup_policy v,
                            ins_p_summery s,
                            ins_product p
                    WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            AND val_date_from = p_val_date_fr
                            AND val_date_to = p_val_date_to
                            AND v.pgid = s.pgid
                            AND s.product_cd = p.product_cd
                            AND v.last_paid_date IS NOT NULL)
               LOOP
                  pro_policy_bonus_cal_val (
                     p_pgid                 => x.pgid,
                     p_comm_date            => x.datcom,
                     p_term                 => x.term,
                     p_product_cd           => x.PLAN,
                     p_sum_assured          => x.sumass,
                     p_paidup_value         => x.paidup_sumass,
                     p_policy_tp_cd         => x.policy_tp_cd,
                     p_applicable_on        => '3',
                     ---Here 2=Matured Calim,3=Paidup Maturity
                     p_no_of_anf_loan_yr    => 0,
                     p_policy_status        => x.pstatus,
                     p_max_payment_dt       => x.last_paid_date,
                     p_irg_bonus_bar_date   => x.last_paid_date,
                     --same as  p_max_payment_dt
                     p_last_paid_date       => x.last_paid_date,
                     p_pay_mode_cd          => x.paymode,
                     p_last_paid_inst_no    => x.last_paid_inst_no,
                     p_rb_bonus             => v_rb_bonus,
                     p_arb_bonus            => v_arb_bonus,
                     p_tb_bonus             => v_tb_bonus
                  );

                  UPDATE   val_paidup_policy
                     SET   rb_amount = v_rb_bonus,
                           arb_amount = v_arb_bonus,
                           tb_amount = v_tb_bonus,
                           total_bonus = v_rb_bonus + v_arb_bonus + v_tb_bonus
                   WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                           AND val_date_from = p_val_date_fr
                           AND val_date_to = p_val_date_to
                           AND pgid = x.pgid;

                  IF v_inforce_bon_count = 500
                  THEN
                     COMMIT;
                     v_inforce_bon_count := 0;
                  ELSE
                     v_inforce_bon_count := v_inforce_bon_count + 1;
                  END IF;
               END LOOP;

               COMMIT;
            END;
         ---End of val_paidup_policy
         END IF;

         --revive  policy--
         IF p_data_tp IN (1, 10)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_revive_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_revive_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_revive_policy (pgid,
                                           POLICY,
                                           datcom,
                                           riskdate,
                                           PLAN,
                                           term,
                                           dob,
                                           age,
                                           sumass,
                                           sumatrisk,
                                           apen_amt,
                                           poption,
                                           aprem,
                                           paymode,
                                           lifepre,
                                           supprem,
                                           extraprem,
                                           totprem,
                                           nduedate,
                                           pstatus,
                                           maturitydt,
                                           runyr,
                                           adjsumass,
                                           last_paid_date,
                                           val_year,
                                           val_date_from,
                                           val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   ins_p_summery s
                 WHERE   EXISTS
                            (SELECT   1
                               FROM   acc_receivables
                              WHERE   receive_date BETWEEN p_val_date_fr
                                                       AND  p_val_date_to
                                      AND pgid = s.pgid)
                         AND EXISTS (SELECT   1
                                       FROM   val_lapse_policy_total
                                      WHERE   pgid = s.pgid));

            COMMIT;
         END IF;

         --Lapse Policy
         IF p_data_tp IN (1, 14)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_lapse_policy_cur_year
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_lapse_policy_cur_year
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_lapse_policy_cur_year (pgid,
                                                   POLICY,
                                                   datcom,
                                                   riskdate,
                                                   PLAN,
                                                   term,
                                                   dob,
                                                   age,
                                                   sumass,
                                                   sumatrisk,
                                                   apen_amt,
                                                   poption,
                                                   aprem,
                                                   paymode,
                                                   lifepre,
                                                   supprem,
                                                   extraprem,
                                                   totprem,
                                                   nduedate,
                                                   pstatus,
                                                   maturitydt,
                                                   runyr,
                                                   adjsumass,
                                                   last_paid_date,
                                                   val_year,
                                                   val_date_from,
                                                   val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   ins_p_summery s, ins_product p
                 WHERE   s.maturity_date > p_val_date_to
                         AND NVL (s.policy_installment, 0) > 0
                         AND (s.last_paid_inst_no * s.term)
                            / NVL (s.policy_installment, 1) <
                               NVL (p.paidup_age, 2)
                         AND DECODE (s.pay_mode_cd,
                                     '01', ADD_MONTHS (s.last_paid_date, 12),
                                     '02', ADD_MONTHS (s.last_paid_date, 6),
                                     '03', ADD_MONTHS (s.last_paid_date, 3),
                                     '04', ADD_MONTHS (s.last_paid_date, 1),
                                     NULL)
                            + (p_grace_period + 1) BETWEEN p_val_date_fr
                                                       AND  p_val_date_to
                         AND s.product_cd = p.product_cd
                         AND comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_death_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_matured_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_surrender_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         END IF;

         --Modification of current year lapse data and input into to VAL_LAPSE_POLICY_TOTAL
         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_new_policy, v_new_policy_sum
           FROM   val_new_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (1), SUM (sumass)
           INTO   v_revive_policy, v_revive_policy_sum
           FROM   val_revive_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_death_policy, v_death_policy_sum
           FROM   val_death_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_matinforce_policy, v_matinforce_sum
           FROM   val_matured_inforce_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_matpaidup_policy, v_matpaidup_sum
           FROM   val_matured_paidup_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         v_matured_policy_sum := v_matinforce_sum + v_matpaidup_sum;
         v_matured_policy := v_matinforce_policy + v_matpaidup_policy;

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_surrendered_policy, v_surrendered_policy_sum
           FROM   val_surrender_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_inforce_policy, v_inforce_policy_sum
           FROM   val_inforce_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_paidup_policy, v_paidup_policy_sum
           FROM   val_paidup_policy
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         SELECT   COUNT (pgid)
           INTO   v_curlpase_policy
           FROM   val_lapse_policy_cur_year
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         BEGIN
            SELECT   (opening_inf_paidup + new_policy + revive_policy)
                     - (  matured_policy
                        + surrendered_policy
                        + death_policy
                        + lapse_policy
                        + lapse_in_2014_data)
              INTO   v_op_inf_paidup_pol
              FROM   val_valuation_summery
             WHERE   TO_NUMBER (val_year) =
                        TO_NUMBER (TO_CHAR (p_val_date_to, 'RRRR')) - 1;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_op_inf_paidup_pol := 0;
         END;

         v_total_policy :=
            (v_op_inf_paidup_pol + v_new_policy + v_revive_policy);
         v_total_claim_policy :=
            (  v_death_policy
             + v_matinforce_policy
             + v_matpaidup_policy
             + v_surrendered_policy
             + v_curlpase_policy);

         DELETE FROM   val_lapse_policy_total
               WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         IF v_total_policy - v_total_claim_policy !=
               v_inforce_policy + v_paidup_policy
         THEN
            IF (v_total_policy - v_total_claim_policy)
               - (v_inforce_policy + v_paidup_policy) < 0
            THEN
               --Delete data from  VAL_LAPSE_POLICY_CUR_YEAR and insert into VAL_LAPSE_POLICY_TOTALl
               BEGIN
                  FOR i
                  IN (  SELECT   pgid, val_year, last_paid_date
                          FROM   val_lapse_policy_cur_year
                         WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                      ORDER BY   last_paid_date)
                  LOOP
                     IF v_counter <=
                           ABS( (v_total_policy - v_total_claim_policy)
                               - (v_inforce_policy + v_paidup_policy))
                     THEN
                        v_counter := v_counter + 1;

                        INSERT INTO val_lapse_policy_total (pgid,
                                                            POLICY,
                                                            datcom,
                                                            riskdate,
                                                            PLAN,
                                                            term,
                                                            dob,
                                                            age,
                                                            sumass,
                                                            sumatrisk,
                                                            apen_amt,
                                                            poption,
                                                            aprem,
                                                            paymode,
                                                            lifepre,
                                                            supprem,
                                                            extraprem,
                                                            totprem,
                                                            nduedate,
                                                            pstatus,
                                                            maturitydt,
                                                            runyr,
                                                            adjsumass,
                                                            last_paid_date,
                                                            val_year,
                                                            val_date_from,
                                                            val_date_to)
                           (SELECT   pgid,
                                     POLICY,
                                     datcom,
                                     riskdate,
                                     PLAN,
                                     term,
                                     dob,
                                     age,
                                     sumass,
                                     sumatrisk,
                                     apen_amt,
                                     poption,
                                     aprem,
                                     paymode,
                                     lifepre,
                                     supprem,
                                     extraprem,
                                     totprem,
                                     nduedate,
                                     pstatus,
                                     maturitydt,
                                     runyr,
                                     adjsumass,
                                     last_paid_date,
                                     val_year,
                                     val_date_from,
                                     val_date_to
                              FROM   val_lapse_policy_cur_year
                             WHERE   val_year =
                                        TO_CHAR (p_val_date_to, 'RRRR')
                                     AND pgid = i.pgid
                                     AND val_year = i.val_year);

                        DELETE FROM   val_lapse_policy_cur_year
                              WHERE   val_year =
                                         TO_CHAR (p_val_date_to, 'RRRR')
                                      AND pgid = i.pgid
                                      AND val_year = i.val_year;
                     ELSE
                        EXIT;
                     END IF;
                  END LOOP;

                  COMMIT;
               END;
            ELSIF (v_total_policy - v_total_claim_policy) - (v_inforce_policy + v_paidup_policy) > 0
            THEN
               --add data into  VAL_LAPSE_POLICY_CUR_YEAR and delete data from  VAL_LAPSE_POLICY_TOTAL
               NULL;
            END IF;
         ELSE
            INSERT INTO val_lapse_policy_total (pgid,
                                                POLICY,
                                                datcom,
                                                riskdate,
                                                PLAN,
                                                term,
                                                dob,
                                                age,
                                                sumass,
                                                sumatrisk,
                                                apen_amt,
                                                poption,
                                                aprem,
                                                paymode,
                                                lifepre,
                                                supprem,
                                                extraprem,
                                                totprem,
                                                nduedate,
                                                pstatus,
                                                maturitydt,
                                                runyr,
                                                adjsumass,
                                                last_paid_date,
                                                val_year,
                                                val_date_from,
                                                val_date_to)
               (SELECT   pgid,
                         POLICY,
                         datcom,
                         riskdate,
                         PLAN,
                         term,
                         dob,
                         age,
                         sumass,
                         sumatrisk,
                         apen_amt,
                         poption,
                         aprem,
                         paymode,
                         lifepre,
                         supprem,
                         extraprem,
                         totprem,
                         nduedate,
                         pstatus,
                         maturitydt,
                         runyr,
                         adjsumass,
                         last_paid_date,
                         val_year,
                         val_date_from,
                         val_date_to
                  FROM   val_lapse_policy_cur_year
                 WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR'));

            DELETE FROM   val_lapse_policy_cur_year
                  WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');
         END IF;

         SELECT   COUNT (pgid), SUM (sumass)
           INTO   v_lapse_policy, v_lapse_policy_sum
           FROM   val_lapse_policy_cur_year
          WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

         IF v_val_status IS NULL
         THEN
            INSERT INTO val_valuation_summery (val_year,
                                               inforce_policy,
                                               paidup_policy,
                                               new_policy,
                                               deffered_policy,
                                               second_yr_policy,
                                               renewal_yr_policy,
                                               revive_policy,
                                               matured_policy,
                                               surrendered_policy,
                                               death_policy,
                                               lapse_policy,
                                               val_status,
                                               i_usr,
                                               i_dt,
                                               opening_inf_paidup,
                                               date_from,
                                               date_to,
                                               grace_period,
                                               lapse_in_2014_data,
                                               inforce_policy_sum,
                                               paidup_policy_sum,
                                               new_policy_sum,
                                               deffered_policy_sum,
                                               second_yr_policy_sum,
                                               renewal_yr_policy_sum,
                                               revive_policy_sum,
                                               matured_policy_sum,
                                               surrendered_policy_sum,
                                               death_policy_sum,
                                               lapse_policy_sum)
              VALUES   (TO_CHAR (p_val_date_to, 'RRRR'),
                        v_inforce_policy,
                        v_paidup_policy,
                        v_new_policy,
                        v_deffered_policy,
                        v_second_yr_policy,
                        v_ren_policy,
                        v_revive_policy,
                        v_matured_policy,
                        v_surrendered_policy,
                        v_death_policy,
                        v_lapse_policy,
                        '0',
                        p_user,
                        SYSDATE,
                        v_op_inf_paidup_pol,
                        p_val_date_fr,
                        p_val_date_to,
                        p_grace_period,
                        v_lapse_in_2014_data,
                        v_inforce_policy_sum,
                        v_paidup_policy_sum,
                        v_new_policy_sum,
                        v_deffered_policy_sum,
                        v_second_yr_policy_sum,
                        v_renewal_yr_policy_sum,
                        v_revive_policy_sum,
                        v_matured_policy_sum,
                        v_surrendered_policy_sum,
                        v_death_policy_sum,
                        v_lapse_policy_sum);

            p_error :=
               'Valuation data preparation has been successfully completed.';
         ELSIF v_val_status = '0'
         THEN
            UPDATE   val_valuation_summery
               SET   inforce_policy = v_inforce_policy,
                     paidup_policy = v_paidup_policy,
                     new_policy = v_new_policy,
                     deffered_policy = v_deffered_policy,
                     second_yr_policy = v_second_yr_policy,
                     renewal_yr_policy = v_ren_policy,
                     revive_policy = v_revive_policy,
                     matured_policy = v_matured_policy,
                     surrendered_policy = v_surrendered_policy,
                     death_policy = v_death_policy,
                     lapse_policy = v_lapse_policy,
                     u_usr = p_user,
                     u_dt = SYSDATE,
                     opening_inf_paidup = v_op_inf_paidup_pol,
                     date_from = p_val_date_fr,
                     date_to = p_val_date_to,
                     grace_period = p_grace_period,
                     lapse_in_2014_data = v_lapse_in_2014_data,
                     inforce_policy_sum = v_inforce_policy_sum,
                     paidup_policy_sum = v_paidup_policy_sum,
                     new_policy_sum = v_new_policy_sum,
                     deffered_policy_sum = v_deffered_policy_sum,
                     second_yr_policy_sum = v_second_yr_policy_sum,
                     renewal_yr_policy_sum = v_renewal_yr_policy_sum,
                     revive_policy_sum = v_revive_policy_sum,
                     matured_policy_sum = v_matured_policy_sum,
                     surrendered_policy_sum = v_surrendered_policy_sum,
                     death_policy_sum = v_death_policy_sum,
                     lapse_policy_sum = v_lapse_policy_sum
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            p_error :=
               'Valuation data modification has been successfully completed.';
         ELSE
            NULL;
         END IF;

         --matured due Policy
         IF p_data_tp IN (1, 11)
         THEN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_matured_due_policy
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_matured_due_policy
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_matured_due_policy (pgid,
                                                POLICY,
                                                datcom,
                                                riskdate,
                                                PLAN,
                                                term,
                                                dob,
                                                age,
                                                sumass,
                                                sumatrisk,
                                                apen_amt,
                                                poption,
                                                aprem,
                                                paymode,
                                                lifepre,
                                                supprem,
                                                extraprem,
                                                totprem,
                                                nduedate,
                                                pstatus,
                                                maturitydt,
                                                runyr,
                                                adjsumass,
                                                last_paid_date,
                                                val_year,
                                                val_date_from,
                                                val_date_to)
               (SELECT   s.pgid,
                         fun_ins_pgid_to_policy_no (s.pgid),
                         s.comm_date,
                         s.risk_date,
                         s.product_cd,
                         s.term,
                         s.dob,
                         s.age,
                         s.sum_assured,
                         fun_sum_at_risk (s.pgid),
                         CASE
                            WHEN s.product_cd = '07'
                            THEN
                               (s.sum_assured / 10)
                            ELSE
                               0
                         END,
                         s.option_cd,
                         s.total_yearly_premium,
                         s.pay_mode_cd,
                         s.life_premium,
                         s.suppl_ben_premium,
                         s.extra_premium,
                         s.installment_premium,
                         s.next_due_date,
                         s.policy_status,
                         s.maturity_date,
                         ROUND (
                            s.last_paid_inst_no
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1),
                            2
                         ),
                         fun_paidup_value (s.pgid)
                         - fun_sb_available_amt (
                              s.term,
                              ROUND (
                                 s.last_paid_inst_no
                                 / DECODE (s.pay_mode_cd,
                                           '01', 1,
                                           '02', 2,
                                           '03', 4,
                                           '04', 12,
                                           1),
                                 2
                              ),
                              s.product_cd,
                              s.sum_assured
                           ),
                         s.last_paid_date,
                         TO_CHAR (p_val_date_to, 'RRRR'),
                         p_val_date_fr,
                         p_val_date_to
                  FROM   ins_p_summery s, ins_product p
                 WHERE   policy_status IN
                               ('01', '09', '07', '08', '11', '03')
                         AND NVL (s.policy_installment, 0) > 0
                         AND (s.last_paid_inst_no * s.term)
                            / NVL (s.policy_installment, 1) >=
                               NVL (p.paidup_age, 2)
                         AND s.product_cd = p.product_cd
                         AND maturity_date <= p_val_date_to
                         AND comm_date <= p_val_date_to
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   clm_claim_payable_gen
                                 WHERE       pgid = s.pgid
                                         AND clm_cause_cd IN ('02', '06')
                                         AND clm_detl_cd = '01'
                                         AND NVL (approved_flag, 'N') = 'Y')
                         AND NOT EXISTS
                               (SELECT   1
                                  FROM   val_matured_lapse_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_inforce_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid
                                UNION ALL
                                SELECT   1
                                  FROM   val_paidup_policy
                                 WHERE   val_year =
                                            TO_CHAR (p_val_date_to, 'RRRR')
                                         AND pgid = s.pgid));

            COMMIT;
         END IF;

         --Status wise policy Summery preparation
         BEGIN
            SELECT   COUNT (1)
              INTO   v_count
              FROM   val_status_wise_pol_sum
             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

            IF v_count > 0
            THEN
               DELETE FROM   val_status_wise_pol_sum
                     WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR');

               COMMIT;
            END IF;

            INSERT INTO val_status_wise_pol_sum (val_year,
                                                 comm_year,
                                                 new_policy,
                                                 inforce,
                                                 paidup,
                                                 lapse,
                                                 mat_lapse,
                                                 maturity_inforce,
                                                 maturity_paidup,
                                                 due_maturity,
                                                 death,
                                                 surrender,
                                                 total)
               (  SELECT   TO_CHAR (p_val_date_to, 'RRRR') val_year,
                           TO_CHAR (datcom, 'RRRR') comm_year,
                           COUNT (pgid) new_policy,
                           SUM (DECODE (status, '2', 1, 0)) inforce,
                           SUM (DECODE (status, '3', 1, 0)) paidup,
                           SUM (DECODE (status, '4', 1, 0)) lapse,
                           SUM (DECODE (status, '5', 1, 0)) mat_lapse,
                           SUM (DECODE (status, '6', 1, 0)) maturity_inforce,
                           SUM (DECODE (status, '7', 1, 0)) maturity_paidup,
                           SUM (DECODE (status, '8', 1, 0)) due_maturity,
                           SUM (DECODE (status, '9', 1, 0)) death,
                           SUM (DECODE (status, '10', 1, 0)) surrender,
                             SUM (DECODE (status, '2', 1, 0))
                           + SUM (DECODE (status, '3', 1, 0))
                           + SUM (DECODE (status, '4', 1, 0))
                           + SUM (DECODE (status, '5', 1, 0))
                           + SUM (DECODE (status, '6', 1, 0))
                           + SUM (DECODE (status, '7', 1, 0))
                           + SUM (DECODE (status, '8', 1, 0))
                           + SUM (DECODE (status, '9', 1, 0))
                           + SUM (DECODE (status, '10', 1, 0))
                              total
                    FROM   (SELECT   pgid, datcom, '2' status --Here '2'= Inforce
                              FROM   val_inforce_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid, datcom, '3' status --Here '3'= paidup
                              FROM   val_paidup_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid, datcom, '5' status --Here '5'= mat_lapse
                              FROM   val_matured_lapse_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid, datcom, '8' status --Here '2'= mat_due
                              FROM   val_matured_due_policy
                             WHERE   val_year = TO_CHAR (p_val_date_to, 'RRRR')
                            UNION ALL
                            SELECT   pgid,
                                     comm_date datcom,
                                     CASE
                                        WHEN a.maturity_inforce = 1 THEN '6'
                                        WHEN a.maturity_paidup = 1 THEN '7'
                                        WHEN a.death = 1 THEN '9'
                                        WHEN a.surrender = 1 THEN '10'
                                        ELSE '4'
                                     END
                                        status
                              --here '4'=Lapse,'6'= maturity_inforce,'7'=maturity_paidup,'9'=Death,'10'=Surrender
                              FROM   (SELECT   pgid,
                                               comm_date,
                                               (SELECT   COUNT (DISTINCT pgid)
                                                  FROM   clm_claim_payable_gen
                                                 WHERE   clm_cause_cd = '02'
                                                         AND clm_detl_cd = '01'
                                                         AND NVL (
                                                               payment_status,
                                                               'N'
                                                            ) = 'Y'
                                                         AND pgid = s.pgid)
                                                  maturity_inforce,
                                               (SELECT   COUNT (DISTINCT pgid)
                                                  FROM   clm_claim_payable_gen
                                                 WHERE   clm_cause_cd = '06'
                                                         AND clm_detl_cd = '01'
                                                         AND NVL (
                                                               payment_status,
                                                               'N'
                                                            ) = 'Y'
                                                         AND pgid = s.pgid)
                                                  maturity_paidup,
                                               DECODE (policy_status,
                                                       '02', 1,
                                                       0)
                                                  death,
                                               DECODE (policy_status,
                                                       '04', 1,
                                                       0)
                                                  surrender
                                        FROM   ins_p_summery s
                                       WHERE   NOT EXISTS
                                                  (SELECT   1
                                                     FROM   (SELECT   pgid
                                                               FROM   val_inforce_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         )
                                                             UNION ALL
                                                             SELECT   pgid
                                                               FROM   val_paidup_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         )
                                                             UNION ALL
                                                             SELECT   pgid
                                                               FROM   val_matured_lapse_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         )
                                                             UNION ALL
                                                             SELECT   pgid
                                                               FROM   val_matured_due_policy
                                                              WHERE   val_year =
                                                                         TO_CHAR (
                                                                            p_val_date_to,
                                                                            'RRRR'
                                                                         ))
                                                    WHERE   pgid = s.pgid)) a)
                   WHERE   TO_NUMBER (TO_CHAR (datcom, 'RRRR')) BETWEEN 1990
                                                                    AND  TO_NUMBER(TO_CHAR (
                                                                                      p_val_date_to,
                                                                                      'RRRR'
                                                                                   ))
                GROUP BY   TO_CHAR (datcom, 'RRRR'));

            COMMIT;
         END;

         COMMIT;
         p_error :=
            'Valuation Summery Process has been completed of '
            || TO_CHAR (p_val_date_to, 'RRRR');
      ELSE
         p_error :=
            'Valuation Finalization has been completed of '
            || TO_CHAR (p_val_date_to, 'RRRR');
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END;
/


--
-- PRO_VOUCHER_DELETE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_voucher_delete
AS
   CURSOR cur_voucher_dtl
   IS
      SELECT *
        FROM acc_gl_trans_dtl d
       WHERE EXISTS (
                SELECT 1
                  FROM acc_gl_trans_mst m
                 WHERE EXTRACT (YEAR FROM (vouch_dt)) <> '2020'
                   AND office_cd = '07001'
                   AND m.office_cd = d.office_cd
                   AND m.vouch_no = d.vouch_no);

   CURSOR cur_voucher
   IS
      SELECT *
        FROM acc_gl_trans_mst m
       WHERE EXTRACT (YEAR FROM (vouch_dt)) <> '2020' AND office_cd = '07001';

   rec_cur_voucher       cur_voucher%ROWTYPE;
   rec_cur_voucher_dtl   cur_voucher_dtl%ROWTYPE;
   v_rec_count           NUMBER (10)               := 0;
BEGIN
   OPEN cur_voucher_dtl;

   LOOP
      FETCH cur_voucher_dtl
       INTO rec_cur_voucher_dtl;

      EXIT WHEN cur_voucher_dtl%NOTFOUND;

      BEGIN
         DELETE FROM acc_gl_trans_dtl
               WHERE office_cd = rec_cur_voucher_dtl.office_cd
                 AND vouch_no = rec_cur_voucher_dtl.vouch_no
                 AND sl_no = rec_cur_voucher_dtl.sl_no;

         IF v_rec_count = 1000
         THEN
            COMMIT;
            v_rec_count := 0;
         ELSE
            v_rec_count := v_rec_count + 1;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            ROLLBACK;
      END;
   END LOOP;

   CLOSE cur_voucher_dtl;

   COMMIT;

   OPEN cur_voucher;

   LOOP
      FETCH cur_voucher
       INTO rec_cur_voucher;

      EXIT WHEN cur_voucher%NOTFOUND;

      BEGIN
         DELETE FROM acc_gl_trans_mst
               WHERE office_cd = rec_cur_voucher.office_cd
                 AND vouch_no = rec_cur_voucher.vouch_no;

         IF v_rec_count = 1000
         THEN
            COMMIT;
            v_rec_count := 0;
         ELSE
            v_rec_count := v_rec_count + 1;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            ROLLBACK;
      END;
   END LOOP;

   CLOSE cur_voucher;

   COMMIT;
END;
/


--
-- PRO_VOUCHER_POSTING_TEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_voucher_posting_temp (
   p_table          IN       PKG_GL_VOUCHER.t_trans_tab,
   p_object_cd      IN       VARCHAR2,
   p_vouch_cd       IN       VARCHAR2,
   p_inter_off_st   IN       CHAR,
   p_office_cd      IN       hrm_office.office_cd%TYPE,
   p_trans_id       IN       VARCHAR2,
   p_trans_date     IN       DATE,
   p_cost_center    IN       VARCHAR2,
   p_narration      IN       VARCHAR2,
   p_user           IN       VARCHAR2,
   p_ins_tp_cd      IN       NUMBER,
   p_voucher_no     IN       VARCHAR2,
   p_error          OUT      VARCHAR2
)
AS
   v_debit_amt                  NUMBER (15, 2)               := 0;
   v_credit_amt                 NUMBER (15, 2)               := 0;
   v_glac_sl_no                 acc_gl_coa.glac_sl_no%TYPE;
   v_trans_type                 CHAR (1);
   v_counter                    NUMBER (10)                  := 1;
   v_voucher_no                 VARCHAR2 (15);
   --v_vouch_sl_no                NUMBER (10);
   p_output                     VARCHAR2 (200)               := NULL;
   v_count                      NUMBER (1)                   := 0;
   v_process_st                 VARCHAR2 (200);
   --v_user                       VARCHAR2 (30)                := p_user;
   err_gl_tr_setup              EXCEPTION;
   err_gl_tr_amount             EXCEPTION;
   err_voucher_seq              EXCEPTION;
   err_office_wise_gl_account   EXCEPTION;
   err_unable_to_update         EXCEPTION;
   v_payabale_count             NUMBER (3)                   := 0;
   v_ledger_st                  CHAR (1)                     := '1';
   v_trans_date                 DATE                       := TRUNC (SYSDATE);
--this updated by md. Sayadur rahaman on 22/05/2019
BEGIN
   FOR i IN p_table.FIRST .. p_table.LAST
   LOOP
      BEGIN
         SELECT glac_sl_no, trans_type
           INTO v_glac_sl_no, v_trans_type
           FROM acc_gl_tr_setup_mst m, acc_gl_tr_setup_dtl d
          WHERE m.object_cd = p_object_cd
            AND m.vouch_cd = p_vouch_cd
            AND m.inter_off_st = p_inter_off_st
            AND d.trans_item_cd = p_table (i).trans_item_cd
            AND m.setup_id = d.setup_id;

         IF p_table (i).glac_sl_no IS NOT NULL
         THEN
            v_glac_sl_no := p_table (i).glac_sl_no;
         END IF;

         SELECT COUNT (1)
           INTO v_count
           FROM acc_gl_coa_mst
          WHERE office_cd = p_office_cd AND glac_sl_no = v_glac_sl_no;

         IF v_count = 0
         THEN
            RAISE err_office_wise_gl_account;
            EXIT;
         END IF;

         IF v_trans_type = 'D'
         THEN
            v_debit_amt := v_debit_amt + p_table (i).post_amount;
         ELSE
            v_credit_amt := v_credit_amt + p_table (i).post_amount;
         END IF;

         --Checking paybale voucher
         BEGIN
            IF v_ledger_st = '1'
            THEN
               SELECT COUNT (1)
                 INTO v_payabale_count
                 FROM acc_cash_book_divert
                WHERE glac_sl_no = v_glac_sl_no AND p_vouch_cd = '05';

               IF v_payabale_count > 0
               THEN
                  v_ledger_st := '0';
               END IF;
            END IF;
         END;
      EXCEPTION
         WHEN OTHERS
         THEN
            RAISE err_gl_tr_setup;
            EXIT;
      END;
   END LOOP;

   IF v_debit_amt <> v_credit_amt
   THEN
      RAISE err_gl_tr_amount;
   ELSE
      FOR i IN p_table.FIRST .. p_table.LAST
      LOOP
         SELECT glac_sl_no, trans_type
           INTO v_glac_sl_no, v_trans_type
           FROM acc_gl_tr_setup_mst m, acc_gl_tr_setup_dtl d
          WHERE m.object_cd = p_object_cd
            AND m.vouch_cd = p_vouch_cd
            AND m.inter_off_st = p_inter_off_st
            AND d.trans_item_cd = p_table (i).trans_item_cd
            AND m.setup_id = d.setup_id;

         IF p_table (i).glac_sl_no IS NOT NULL
         THEN
            v_glac_sl_no := p_table (i).glac_sl_no;
         END IF;

         IF v_counter = 1
         THEN
            v_voucher_no := p_voucher_no;
            p_output := NULL;

            IF p_output IS NOT NULL
            THEN
               RAISE err_voucher_seq;
               EXIT;
            END IF;

            INSERT INTO acc_gl_trans_mst
                        (office_cd, vouch_no, vouch_dt, vouch_cd,
                         status, bank_recon_st, cost_center, object_cd,
                         trans_id, narration, i_usr, i_dt,
                         ins_tp_cd, ledger_st, payable_st
                        )
                 VALUES (p_office_cd, v_voucher_no, v_trans_date, p_vouch_cd,
                         '1', '0', p_cost_center, p_object_cd,
                         p_trans_id, p_narration, p_user, SYSDATE,
                         NVL (p_ins_tp_cd, '1'), v_ledger_st, '0'
                        );

            IF p_table (i).post_amount > 0
            THEN
               INSERT INTO acc_gl_trans_dtl
                           (office_cd, vouch_no, sl_no,
                            glac_sl_no, dr_cr,
                            trans_amt, chq_tp,
                            chq_no, chq_dt, i_usr,
                            i_dt
                           )
                    VALUES (p_office_cd, v_voucher_no, v_counter,
                            v_glac_sl_no, v_trans_type,
                            p_table (i).post_amount, p_table (i).chq_tp,
                            p_table (i).chq_no, p_table (i).chq_dt, p_user,
                            SYSDATE
                           );

               v_counter := v_counter + 1;
            END IF;
         ELSE
            IF p_table (i).post_amount > 0
            THEN
               INSERT INTO acc_gl_trans_dtl
                           (office_cd, vouch_no, sl_no,
                            glac_sl_no, dr_cr,
                            trans_amt, chq_tp,
                            chq_no, chq_dt, i_usr,
                            i_dt
                           )
                    VALUES (p_office_cd, v_voucher_no, v_counter,
                            v_glac_sl_no, v_trans_type,
                            p_table (i).post_amount, p_table (i).chq_tp,
                            p_table (i).chq_no, p_table (i).chq_dt, p_user,
                            SYSDATE
                           );

               v_counter := v_counter + 1;
            END IF;
         END IF;

         v_process_st := NULL;

         IF v_process_st IS NOT NULL
         THEN
            RAISE err_unable_to_update;
            EXIT;
         END IF;
      END LOOP;
   END IF;

   p_error := NULL;
EXCEPTION
   WHEN err_office_wise_gl_account
   THEN
      p_error := 'GL account not found for the office of:' || p_office_cd;
   WHEN err_gl_tr_setup
   THEN
      p_error := 'Error found at GL trans setup due to ' || SQLERRM;
   WHEN err_gl_tr_amount
   THEN
      p_error :=
          'Failed to transaction due to Debit and Credit amount is not same!';
   WHEN err_voucher_seq
   THEN
      p_error := p_output;
   WHEN err_unable_to_update
   THEN
      p_error := v_process_st;
   WHEN OTHERS
   THEN
      p_error := SQLERRM;
END;
/


--
-- TEMP_DMG_DUE_UPD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.temp_dmg_due_upd wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
453 237
UGvhW7RZKwLMAQFc2PEP1hYydPEwgzteLiAVfHRVvp0VeGeEtn7Ef8jm4GCgz8OhRdC3lg6Q
G818+bV2oxGZX+tWY6GKsV06MT7WnE3lqaUDc5Lo17FJeZ+6gxAgnqSZphbcVphFSFdUUpWr
NtDq8dEIisWY26ZqB/N6/zhl1dwo14QrqJLISQmUGRfqLhhiUTVYymiNcqPwQjzRGzhf6ZyF
Ou9kXKVvV2ABZwzm8p4WzJ0YYzXnhnuiLcJvalvb30/EKsLFzz+lY9BN49CuXEatdBvWbznK
bic4N5cfG/o6iMfLo43XzVqjc7K6nu9uojCj3V0VLm58A+P4lUK07hKXwPfyS6ZrjpO7JXsV
fBmI87aN5tUJZu4E6P6Mky3bF80Y2Wx6ibKjaTyJbVGTvocBwoi72cvvlSryMA02TPmkMRN2
MpCKiE3/DQ8IADS77DKDAyl6SGEjUpnrh1Rk7N3gy+uh6jOgYLEXuHoY+GEfyBmjkEXcR3rq
gK4ZyfcnW7vJB5+1JNo0UOucIzWVMwgcJLgz2Sw7UvrA5nidfQKvLQ==
/


--
-- TEMP_PRO_CASH  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.temp_pro_cash
IS
   v_output   VARCHAR2 (200);
   v_date     DATE           := TO_DATE ('01-Oct-2019');
BEGIN
   FOR i IN 1 .. 15
   LOOP
      pkg_office_cash_bal.pro_cash_bal_insert (v_date, NULL, 'INS', v_output);
      v_date := v_date + 1;
   END LOOP;
END;
/


--
-- TEMP_PRO_CLAIM_GEN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.temp_pro_claim_gen
IS
   v_process_cnt   NUMBER;
   v_prc_error     VARCHAR2 (200);
   v_appl_no       clm_claim_appl.appl_no%TYPE;
   v_ud_appl_no    clm_claim_appl.ud_appl_no%TYPE;
   v_party_id      clm_claim_appl.party_id%TYPE;

/*Used for loc policy claim generation*/
   CURSOR cur_loc_pol
   IS
      SELECT s.pgid, s.product_cd, s.policy_status, s.maturity_date,
             s.office_cd,
             DECODE (s.policy_status, '03', '06', '02') clm_cause_cd,
             '03' payment_type
        FROM ins_p_summery s, ser_lock_policy l
       WHERE s.pgid = l.pgid
         and s.pgid = '9805200700100315'
         AND s.policy_status IN ('03')
         AND s.active_status = '1'
         AND s.paid_up_status = '1'
         AND l.status = '1'
         --AND TRUNC (l.i_dt) = to_date ('21/09/2016','dd/mm/rrrr')
         and s.pgid in (select fun_ins_policy_no_to_pgid(POLICY_NO) from lock_temp)
         and s.MATURITY_DATE >= to_date ('01/01/2014','dd/mm/rrrr')
         --and s.pgid = '0408150070411579'
         AND s.pgid NOT IN (
                  SELECT pgid
                    FROM clm_claim_payable_gen g
                   WHERE g.clm_cause_cd IN ('02', '06')
                     AND g.clm_detl_cd = '01')
         AND s.pgid IN (
                  SELECT pgid
                    FROM clm_claim_appl a
                   WHERE a.clm_cause_cd IN ('02', '06')
                     AND a.clm_detl_cd = '01')
         AND s.product_cd NOT IN (SELECT product_cd
                                    FROM ins_product
                                   WHERE policy_tp_cd = '02');
BEGIN
   FOR i IN cur_loc_pol
   LOOP
      BEGIN
         /*SELECT    TO_CHAR (SYSDATE, 'RRMM')
                || LPAD (NVL (MAX (SUBSTR (a.appl_no, 5)), 0) + 1, 6, 0)
           INTO v_appl_no
           FROM clm_claim_appl a
          WHERE SUBSTR (a.appl_no, 1, 4) = TO_CHAR (SYSDATE, 'RRMM');

         SELECT    TO_CHAR (SYSDATE, 'RRMM')
                || LPAD (NVL (MAX (TO_NUMBER (SUBSTR (ud_appl_no, 5))), 0) + 1,
                         8,
                         0
                        )
           INTO v_ud_appl_no
           FROM clm_claim_appl;

         SELECT party_id
           INTO v_party_id
           FROM ins_p_personal p
          WHERE p.pgid = i.pgid AND p.party_cd = '03' AND p.sl_no = '1';

         INSERT INTO clm_claim_appl
                     (appl_no, ud_appl_no,
                      application_dt, pgid,
                      party_id, party_cd, clm_cause_cd, clm_detl_cd,
                      apprv_status, apprv_by, apprv_dt,
                      payable_dt, paid_prem_late_fee, due_prem_amt,
                      due_prem_late_fee, tot_req_amt, paid_prem_late_fee_mon,
                      paid_prem_late_fee_disc, paid_prem_late_fee_after_disc,
                      unadj_coll_amt, appl_office_cd, i_usr,
                      i_dt
                     )
              VALUES (v_appl_no, v_ud_appl_no,
                      TO_DATE ('04/01/2016', 'dd/mm/rrrr'), i.pgid,
                      v_party_id, '03', i.clm_cause_cd, '01',
                      '1', 113, TO_DATE ('04/01/2016', 'dd/mm/rrrr'),
                      i.maturity_date, 0, 0,
                      0, 0, 0,
                      0, 0,
                      0, fun_find_service_off (i.office_cd), 'JOYNAL',
                      trunc(sysdate)
                     );*/

         IF i.policy_status = '08'
         THEN
            pkg_clm_cal.pro_clm_policy_list
                           (p_policy_no            => fun_ins_pgid_to_policy_no
                                                                       (i.pgid),
                            p_product_cd           => NULL,
                            p_office_cd            => NULL,
                            p_descendant_flag      => NULL,
                            p_cause_cd             => i.clm_cause_cd,
                            p_payment_type         => i.payment_type,
                            p_start_dt             => i.maturity_date,
                            p_end_dt               => i.maturity_date,
                            p_user                 => 'JOYNAL',
                            p_process_cnt          => v_process_cnt,
                            p_error                => v_prc_error
                           );
         ELSIF i.policy_status = '03'
         THEN
            pkg_clm_cal.pro_paidup_value (p_pgid                 => i.pgid,
                                          p_product_cd           => NULL,
                                          p_office_cd            => NULL,
                                          p_descendant_flag      => NULL,
                                          p_start_dt             => i.maturity_date,
                                          p_end_dt               => i.maturity_date,
                                          p_user                 => 'JOYNAL',
                                          p_process_cnt          => v_process_cnt,
                                          p_error                => v_prc_error
                                         );
         END IF;
      /*EXCEPTION
         WHEN OTHERS
         THEN
            NULL;*/
      END;
   END LOOP;
END;
/


--
-- PRO_CODE_NO_PADDING  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_CODE_NO_PADDING FOR INS.PRO_CODE_NO_PADDING;


--
-- PRO_COLL_MEDIA_NO_GEN  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_COLL_MEDIA_NO_GEN FOR INS.PRO_COLL_MEDIA_NO_GEN;


--
-- PRO_COLL_SL_NO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_COLL_SL_NO FOR INS.PRO_COLL_SL_NO;


--
-- PRO_COLL_SL_NO_TEMP  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_COLL_SL_NO_TEMP FOR INS.PRO_COLL_SL_NO_TEMP;


--
-- PRO_DEMAND_NOTICE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_DEMAND_NOTICE FOR INS.PRO_DEMAND_NOTICE;


--
-- PRO_DMG_UPD_PARTIAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_DMG_UPD_PARTIAL FOR INS.PRO_DMG_UPD_PARTIAL;


--
-- PRO_UNADJ_PREM_INFO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_UNADJ_PREM_INFO FOR INS.PRO_UNADJ_PREM_INFO;


--
-- PRO_RE_INSUR_STATEMENT_ADVICE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_RE_INSUR_STATEMENT_ADVICE FOR INS.PRO_RE_INSUR_STATEMENT_ADVICE;


--
-- PRO_RE_INSUR_LAPSE_STATEMENT  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_RE_INSUR_LAPSE_STATEMENT FOR INS.PRO_RE_INSUR_LAPSE_STATEMENT;


--
-- PRO_FIND_ADJ_DATE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_FIND_ADJ_DATE FOR INS.PRO_FIND_ADJ_DATE;


--
-- PRO_FIND_SOURCE_TAX  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_FIND_SOURCE_TAX FOR INS.PRO_FIND_SOURCE_TAX;


--
-- PRO_FP_COMM_BILL_NO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_FP_COMM_BILL_NO FOR INS.PRO_FP_COMM_BILL_NO;


--
-- PRO_FP_SINGLE_DEMAND_NOTC_PREP  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_FP_SINGLE_DEMAND_NOTC_PREP FOR INS.PRO_FP_SINGLE_DEMAND_NOTC_PREP;


--
-- PRO_GRATUITY_PROVISION_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_GRATUITY_PROVISION_CAL FOR INS.PRO_GRATUITY_PROVISION_CAL;


--
-- PRO_GRA_GRATUITY_ELIGIBLE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_GRA_GRATUITY_ELIGIBLE FOR INS.PRO_GRA_GRATUITY_ELIGIBLE;


--
-- PRO_GRP_AGENT_COMM_BILL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_GRP_AGENT_COMM_BILL FOR INS.PRO_GRP_AGENT_COMM_BILL;


--
-- PRO_GRP_AGENT_COMM_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_GRP_AGENT_COMM_CAL FOR INS.PRO_GRP_AGENT_COMM_CAL;


--
-- PRO_GRP_DEMAND_NOTC_PREP  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_GRP_DEMAND_NOTC_PREP FOR INS.PRO_GRP_DEMAND_NOTC_PREP;


--
-- PRO_GRP_PREMIUM_CALCULATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_GRP_PREMIUM_CALCULATION FOR INS.PRO_GRP_PREMIUM_CALCULATION;


--
-- PRO_GRP_PREM_COLL_ADJUSTMENT  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_GRP_PREM_COLL_ADJUSTMENT FOR INS.PRO_GRP_PREM_COLL_ADJUSTMENT;


--
-- PRO_GRP_RENEW_PREM_CALC  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_GRP_RENEW_PREM_CALC FOR INS.PRO_GRP_RENEW_PREM_CALC;


--
-- PRO_ID_GENERATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ID_GENERATION FOR INS.PRO_ID_GENERATION;


--
-- PRO_TEMP_SINGLE_DUE_PREP  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_TEMP_SINGLE_DUE_PREP FOR INS.PRO_TEMP_SINGLE_DUE_PREP;


--
-- PRO_UNADJ_COLL_DUE_CALC  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_UNADJ_COLL_DUE_CALC FOR INS.PRO_UNADJ_COLL_DUE_CALC;


--
-- PRO_INS_FIND_POLICY_CAT  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_INS_FIND_POLICY_CAT FOR INS.PRO_INS_FIND_POLICY_CAT;


--
-- PRO_INS_GET_MISSING_POLICY  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_INS_GET_MISSING_POLICY FOR INS.PRO_INS_GET_MISSING_POLICY;


--
-- PRO_INS_MISSING_POLICY  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_INS_MISSING_POLICY FOR INS.PRO_INS_MISSING_POLICY;


--
-- PRO_INS_TOTAL_AUTO_LOAN  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_INS_TOTAL_AUTO_LOAN FOR INS.PRO_INS_TOTAL_AUTO_LOAN;


--
-- PRO_LOAN_RE_SCHEDULE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_LOAN_RE_SCHEDULE FOR INS.PRO_LOAN_RE_SCHEDULE;


--
-- PRO_LOAN_RE_SCHEDULE_NEW  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_LOAN_RE_SCHEDULE_NEW FOR INS.PRO_LOAN_RE_SCHEDULE_NEW;


--
-- PRO_OBJECT_UI_NM  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_OBJECT_UI_NM FOR INS.PRO_OBJECT_UI_NM;


--
-- PRO_OFFICE_DESH_BOARD  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_OFFICE_DESH_BOARD FOR INS.PRO_OFFICE_DESH_BOARD;


--
-- PRO_OFF_MONTHS_SETUP  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_OFF_MONTHS_SETUP FOR INS.PRO_OFF_MONTHS_SETUP;


--
-- PRO_PAR_COLL_DUE_CALC  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PAR_COLL_DUE_CALC FOR INS.PRO_PAR_COLL_DUE_CALC;


--
-- PRO_PENDING_GROUP_BONUS  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PENDING_GROUP_BONUS FOR INS.PRO_PENDING_GROUP_BONUS;


--
-- PRO_POLICY_BONUS_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_BONUS_CAL FOR INS.PRO_POLICY_BONUS_CAL;


--
-- PRO_POLICY_BONUS_CAL_OLD  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_BONUS_CAL_OLD FOR INS.PRO_POLICY_BONUS_CAL_OLD;


--
-- PRO_POLICY_BONUS_CAL_SETL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_BONUS_CAL_SETL FOR INS.PRO_POLICY_BONUS_CAL_SETL;


--
-- PRO_POLICY_DUE_CREATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_DUE_CREATION FOR INS.PRO_POLICY_DUE_CREATION;


--
-- PRO_POLICY_DUE_CREATION_DMG  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_DUE_CREATION_DMG FOR INS.PRO_POLICY_DUE_CREATION_DMG;


--
-- PRO_POLICY_DUE_CREATION_TMP  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_DUE_CREATION_TMP FOR INS.PRO_POLICY_DUE_CREATION_TMP;


--
-- PRO_POLICY_DUE_PREP  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_DUE_PREP FOR INS.PRO_POLICY_DUE_PREP;


--
-- PRO_POLICY_LIST_CREATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_LIST_CREATION FOR INS.PRO_POLICY_LIST_CREATION;


--
-- PRO_CLM_PAY_APPROVAL_STAT  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_CLM_PAY_APPROVAL_STAT FOR INS.PRO_CLM_PAY_APPROVAL_STAT;


--
-- PRO_SUR_OFF_CODE_UPDATE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SUR_OFF_CODE_UPDATE FOR INS.PRO_SUR_OFF_CODE_UPDATE;


--
-- PRO_SERVICE_ID  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SERVICE_ID FOR INS.PRO_SERVICE_ID;


--
-- PRO_RE_INSUR_POLICY_INFO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_RE_INSUR_POLICY_INFO FOR INS.PRO_RE_INSUR_POLICY_INFO;


--
-- PRO_SINGLE_DEMAND_NOTC_PREP  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SINGLE_DEMAND_NOTC_PREP FOR INS.PRO_SINGLE_DEMAND_NOTC_PREP;


--
-- PRO_SUR_APP_SL_NO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SUR_APP_SL_NO FOR INS.PRO_SUR_APP_SL_NO;


--
-- PRO_SETTELMENT_LATE_FEE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SETTELMENT_LATE_FEE FOR INS.PRO_SETTELMENT_LATE_FEE;


--
-- PRO_RISK_DATE_VALIDATE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_RISK_DATE_VALIDATE FOR INS.PRO_RISK_DATE_VALIDATE;


--
-- PRO_LOAN_RECOVERY_ADJ  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_LOAN_RECOVERY_ADJ FOR INS.PRO_LOAN_RECOVERY_ADJ;


--
-- PRO_LOAN_REC_UNDO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_LOAN_REC_UNDO FOR INS.PRO_LOAN_REC_UNDO;


--
-- PRO_LAPSE_NOTICE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_LAPSE_NOTICE FOR INS.PRO_LAPSE_NOTICE;


--
-- PRO_LOAN_INT_AMOUNT  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_LOAN_INT_AMOUNT FOR INS.PRO_LOAN_INT_AMOUNT;


--
-- TEMP_DMG_DUE_UPD  (Synonym) 
--
CREATE PUBLIC SYNONYM TEMP_DMG_DUE_UPD FOR INS.TEMP_DMG_DUE_UPD;


--
-- DMG_DEL_COLL  (Synonym) 
--
CREATE PUBLIC SYNONYM DMG_DEL_COLL FOR INS.DMG_DEL_COLL;


--
-- DMG_PROCESS  (Synonym) 
--
CREATE PUBLIC SYNONYM DMG_PROCESS FOR INS.DMG_PROCESS;


--
-- PRO_AGENT_BILL_COLL_UNDO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_AGENT_BILL_COLL_UNDO FOR INS.PRO_AGENT_BILL_COLL_UNDO;


--
-- PRO_ALT_COLLECTION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ALT_COLLECTION FOR INS.PRO_ALT_COLLECTION;


--
-- PRO_ALT_PREM_COLL_ADJ  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ALT_PREM_COLL_ADJ FOR INS.PRO_ALT_PREM_COLL_ADJ;


--
-- PRO_CALC_CLAIM_SOURCE_TAX  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_CALC_CLAIM_SOURCE_TAX FOR INS.PRO_CALC_CLAIM_SOURCE_TAX;


--
-- PRO_ANF_LOAN_ADJUSTMENT  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ANF_LOAN_ADJUSTMENT FOR INS.PRO_ANF_LOAN_ADJUSTMENT;


--
-- PRO_ANF_LOAN_PAYABLE_INFO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ANF_LOAN_PAYABLE_INFO FOR INS.PRO_ANF_LOAN_PAYABLE_INFO;


--
-- PRO_RE_INSUR_STATUS  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_RE_INSUR_STATUS FOR INS.PRO_RE_INSUR_STATUS;


--
-- PRO_POL_LOAN_COLL_SL_NO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POL_LOAN_COLL_SL_NO FOR INS.PRO_POL_LOAN_COLL_SL_NO;


--
-- PRO_POL_SCH_DT_ASGN  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POL_SCH_DT_ASGN FOR INS.PRO_POL_SCH_DT_ASGN;


--
-- PRO_POL_SURRENDER_VALUE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POL_SURRENDER_VALUE FOR INS.PRO_POL_SURRENDER_VALUE;


--
-- PRO_PREMIUM_COLL_SUMMERY  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PREMIUM_COLL_SUMMERY FOR INS.PRO_PREMIUM_COLL_SUMMERY;


--
-- PRO_PRE_LOAN_POSTING  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PRE_LOAN_POSTING FOR INS.PRO_PRE_LOAN_POSTING;


--
-- PRO_PROPOSAL_ACCPTBLE_STAT  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PROPOSAL_ACCPTBLE_STAT FOR INS.PRO_PROPOSAL_ACCPTBLE_STAT;


--
-- PRO_PROPOSAL_ADV_COLL_ADJ  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PROPOSAL_ADV_COLL_ADJ FOR INS.PRO_PROPOSAL_ADV_COLL_ADJ;


--
-- PRO_PR_BOOK_VLIDATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PR_BOOK_VLIDATION FOR INS.PRO_PR_BOOK_VLIDATION;


--
-- PRO_REP_SERVICE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_REP_SERVICE FOR INS.PRO_REP_SERVICE;


--
-- PRO_REVERSE_VOUCHER  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_REVERSE_VOUCHER FOR INS.PRO_REVERSE_VOUCHER;


--
-- PRO_REVERSE_VOUCHER_SPECIFIC  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_REVERSE_VOUCHER_SPECIFIC FOR INS.PRO_REVERSE_VOUCHER_SPECIFIC;


--
-- PRO_POLICY_TOT_PAYABLE_COMM  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_TOT_PAYABLE_COMM FOR INS.PRO_POLICY_TOT_PAYABLE_COMM;


--
-- PRO_UTS_ELEC_BILL_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_UTS_ELEC_BILL_CAL FOR INS.PRO_UTS_ELEC_BILL_CAL;


--
-- PRO_UTS_RENT_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_UTS_RENT_CAL FOR INS.PRO_UTS_RENT_CAL;


--
-- PRO_UTS_WATER_BILL_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_UTS_WATER_BILL_CAL FOR INS.PRO_UTS_WATER_BILL_CAL;


--
-- PRO_SYNC_COMMISSION_INFO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SYNC_COMMISSION_INFO FOR INS.PRO_SYNC_COMMISSION_INFO;


--
-- PRO_CONTROL_OFFICE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_CONTROL_OFFICE FOR INS.PRO_CONTROL_OFFICE;


--
-- PRO_COST_CENTER_VOUCHER_NO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_COST_CENTER_VOUCHER_NO FOR INS.PRO_COST_CENTER_VOUCHER_NO;


--
-- PRO_AGENT_BONUS_CALAC  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_AGENT_BONUS_CALAC FOR INS.PRO_AGENT_BONUS_CALAC;


--
-- PRO_VALUATION_SUMMERY  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_VALUATION_SUMMERY FOR INS.PRO_VALUATION_SUMMERY;


--
-- PRO_VALUATION_FINALIZE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_VALUATION_FINALIZE FOR INS.PRO_VALUATION_FINALIZE;


--
-- PRO_GET_SYS_CONFIG_ST  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_GET_SYS_CONFIG_ST FOR INS.PRO_GET_SYS_CONFIG_ST;


--
-- PRO_USER_APPROVAL_PRIV  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_USER_APPROVAL_PRIV FOR INS.PRO_USER_APPROVAL_PRIV;


--
-- PRO_POLICY_INFO_UPD_ST  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_INFO_UPD_ST FOR INS.PRO_POLICY_INFO_UPD_ST;


--
-- PRO_CPF_INVESTMENT_INT_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_CPF_INVESTMENT_INT_CAL FOR INS.PRO_CPF_INVESTMENT_INT_CAL;


--
-- PRO_SMS_SCHEDULE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SMS_SCHEDULE FOR INS.PRO_SMS_SCHEDULE;


--
-- PRO_GRA_INVESTMENT_INT_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_GRA_INVESTMENT_INT_CAL FOR INS.PRO_GRA_INVESTMENT_INT_CAL;


--
-- PRO_ACC_INVESTMENT_INT_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ACC_INVESTMENT_INT_CAL FOR INS.PRO_ACC_INVESTMENT_INT_CAL;


--
-- PRO_CPF_INVESTMENT_INT_CAL_BKP  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_CPF_INVESTMENT_INT_CAL_BKP FOR INS.PRO_CPF_INVESTMENT_INT_CAL_BKP;


--
-- PRO_CLIENT_INFO_VALIDATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_CLIENT_INFO_VALIDATION FOR INS.PRO_CLIENT_INFO_VALIDATION;


--
-- PRO_SHORT_PREMIUM  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SHORT_PREMIUM FOR INS.PRO_SHORT_PREMIUM;


--
-- TEMP_PRO_CLAIM_GEN  (Synonym) 
--
CREATE PUBLIC SYNONYM TEMP_PRO_CLAIM_GEN FOR INS.TEMP_PRO_CLAIM_GEN;


--
-- PRO_RE_PRINT_STATUS  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_RE_PRINT_STATUS FOR INS.PRO_RE_PRINT_STATUS;


--
-- PRO_PREMIUM_COLL_SUM_TEST  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PREMIUM_COLL_SUM_TEST FOR INS.PRO_PREMIUM_COLL_SUM_TEST;


--
-- PRO_GRA_INVESTMENT_INT_CAL_BKP  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_GRA_INVESTMENT_INT_CAL_BKP FOR INS.PRO_GRA_INVESTMENT_INT_CAL_BKP;


--
-- PRO_LOAN_SCHEDULE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_LOAN_SCHEDULE FOR INS.PRO_LOAN_SCHEDULE;


--
-- PRO_SHORT_PREMIUM11  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SHORT_PREMIUM11 FOR INS.PRO_SHORT_PREMIUM11;


--
-- PRO_PREMIUM_COLL_SUMMERY_TEST  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PREMIUM_COLL_SUMMERY_TEST FOR INS.PRO_PREMIUM_COLL_SUMMERY_TEST;


--
-- PRO_PREMIUM_COLL_SUMM_FA_NEW  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PREMIUM_COLL_SUMM_FA_NEW FOR INS.PRO_PREMIUM_COLL_SUMM_FA_NEW;


--
-- PRO_PF_LOAN_SCHEDULE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PF_LOAN_SCHEDULE FOR INS.PRO_PF_LOAN_SCHEDULE;


--
-- PRO_UNADJ_PREM_INFO1  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_UNADJ_PREM_INFO1 FOR INS.PRO_UNADJ_PREM_INFO1;


--
-- PRO_DATA_PREPARE_SMS  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_DATA_PREPARE_SMS FOR INS.PRO_DATA_PREPARE_SMS;


--
-- PRO_API_SUMMARY_DATA_PREP  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_API_SUMMARY_DATA_PREP FOR INS.PRO_API_SUMMARY_DATA_PREP;


--
-- PRO_FIND_SOURCE_TAX_RATE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_FIND_SOURCE_TAX_RATE FOR INS.PRO_FIND_SOURCE_TAX_RATE;


--
-- PRO_REBUILD_INDEXES  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_REBUILD_INDEXES FOR INS.PRO_REBUILD_INDEXES;


--
-- PRO_IDRA_POLICY_INFO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_IDRA_POLICY_INFO FOR INS.PRO_IDRA_POLICY_INFO;


--
-- PRO_SYNC_POLICY_DUE_CREATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SYNC_POLICY_DUE_CREATION FOR INS.PRO_SYNC_POLICY_DUE_CREATION;


--
-- PRO_SYNC_UPD_COMM_PREM_DUE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SYNC_UPD_COMM_PREM_DUE FOR INS.PRO_SYNC_UPD_COMM_PREM_DUE;


--
-- PRO_BANK_RECONCILE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_BANK_RECONCILE FOR INS.PRO_BANK_RECONCILE;


--
-- PRO_IDRA_COLLECTION_INFO  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_IDRA_COLLECTION_INFO FOR INS.PRO_IDRA_COLLECTION_INFO;


--
-- PRO_COLL_DEPOSIT_DASHBOARD  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_COLL_DEPOSIT_DASHBOARD FOR INS.PRO_COLL_DEPOSIT_DASHBOARD;


--
-- PRO_CLAIM_DATA_CHECKING  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_CLAIM_DATA_CHECKING FOR INS.PRO_CLAIM_DATA_CHECKING;


--
-- PRO_FA_COLL_FEE_BILL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_FA_COLL_FEE_BILL FOR INS.PRO_FA_COLL_FEE_BILL;


--
-- PRO_EMP_COLL_INC_BILL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_EMP_COLL_INC_BILL FOR INS.PRO_EMP_COLL_INC_BILL;


--
-- PRO_MOBILE_BANK_RECONCILE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_MOBILE_BANK_RECONCILE FOR INS.PRO_MOBILE_BANK_RECONCILE;


--
-- PRO_POLICY_BONUS_CAL_VAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_BONUS_CAL_VAL FOR INS.PRO_POLICY_BONUS_CAL_VAL;


--
-- PRO_IDRA_COLL_SCD  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_IDRA_COLL_SCD FOR INS.PRO_IDRA_COLL_SCD;


--
-- PRO_ADV_PREM_COLL_ADJ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_adv_prem_coll_adj (
   p_user                 IN     VARCHAR2,
   p_office_cd            IN     VARCHAR2,
   p_agent_id             IN     VARCHAR2,
   p_pgid                 IN     ins_p_proposal.pgid%TYPE,
   p_ins_tp_cd            IN     ins_insurance_type.ins_tp_cd%TYPE,
   p_adjustment_date      IN     DATE,
   p_fyscal_yr_fr         IN     DATE,
   p_fyscal_yr_to         IN     DATE,
   p_descendant_flag      IN     VARCHAR2,
   p_object_cd            IN     VARCHAR2,
   p_test_var                OUT VARCHAR2,
   p_valid_record_count      OUT NUMBER,
   p_errm                    OUT VARCHAR2
)
IS
   /******************************************************************************
      NAME:       pro_adv_prem_coll_adjustment
      PURPOSE:    To Adjust Advance Premium

      REVISIONS:
      Ver      Date            Author                  Description
      ----     -----------     ----------------------  ---------------------------
      1.0      27-Jul-2010     Mohammad Arifur Rahman  1. Created this procedure.
      1.1      10-Jan-2011     Mohammad Arifur Rahman  1. Updated this procedure.
      1.2      08-May-2012     Syed Md. Musha         1. Updated this procedure.
      1.3      11-Sep-2012     Md. Sayadur Rahaman     1. Update this proceude for the purpose of integration of new general accounting system

      NOTES:

      Automatically available Auto Replace Keywords:
         Object Name:     pro_adv_prem_coll_adjustment
         Sysdate:         7/27/2010
         Date and Time:   7/27/2010, 12:30:30 PM, and 7/27/2010 12:30:30 PM
         Username:         (set in TOAD Options, Procedure Editor)
         Table Name:       (set in the "New PL/SQL Object" dialog)

   ******************************************************************************/
   money_in_hand          acc_receivables.tot_premium_amt%TYPE;
   --v_exp_office    hrm_office.office_cd%TYPE;
   v_voucher_shnm         acc_voucher_type.vouch_sh_nm%TYPE;
   v_yrly_no_inst         ins_pay_mode.yrly_no_inst%TYPE;
   --v_late_fee      acc_receivables.late_fee%TYPE;
   v_adjusted_amt         NUMBER (15, 2);
   v_adjust_status        VARCHAR2 (1);
   v_paidup_st            VARCHAR2 (1);
   v_count                NUMBER (3);
   v_count1               NUMBER (3);
   v_flag                 NUMBER (1);
   -- paid-up status checker varriable
   v_cal_due_dt_to        DATE;
   --v_coll_dt       DATE;
   v_cnt_adv_unadj        NUMBER (2) := 0;
   v_last_inst            VARCHAR2 (1);
   -- last installment checker
   --v_comm_errm                   VARCHAR2 (200);
   -- for commisiion process error message
   v_voucher_errm         VARCHAR2 (200);
   -- for voucher creation error message
   v_latefee_errm         VARCHAR2 (200);
   --for late fee voucher error message
   --v_adjust NUMBER(5);
   exp_voucher_creation EXCEPTION;
   -- for voucher creation exeption
   exp_comm_calc EXCEPTION;
   -- for commission calculation exception
   v_coll_adj_dt          DATE;
   v_prem_type            VARCHAR2 (1);
   v_adv_adj              VARCHAR2 (1);
   --This flag used to identify advance collection adjust on due date or earlier (upto 1 year)
   --0 For no advance adjustment
   --1 For only first year advance adjustment
   --2 For all advance collectin
   v_month_last_day       NUMBER (2) := 0;
   v_cur_month_last_day   NUMBER (2) := 0;
   v_next_due_date        DATE;
   -------------------
   /*variable for OR sequence
   Added by Md. Sayadur Rahaman on 26/06/2018*/
   v_statement            VARCHAR2 (100);
   v_sequence_nm          VARCHAR2 (100);
   v_or_sl_no             NUMBER (6) := 0;
   v_or_number            VARCHAR2 (12) := NULL;
   v_config_count         NUMBER (1) := 0;
/*end of OR varivale*/
BEGIN
   v_adjust_status := 'N';
   v_adv_adj := '1';            -- 0 no early adjustment, 1 advance adjustment

   SELECT   vouch_sh_nm
     INTO   v_voucher_shnm
     FROM   acc_voucher_type
    WHERE   vouch_cd = '05';                            -- for journal voucher

   FOR i
   IN (  SELECT   a.receive_id,
                  a.receive_date,
                  a.pgid,
                  a.coll_amount,
                  a.due_dt_from,
                  a.due_dt_to,
                  a.installment_no_from,
                  a.installment_no_to,
                  ABS (NVL (a.late_fee, 0) - NVL (a.latefee_waiver, 0))
                     late_fee,
                  a.active_office_cd office_code,
                  a.receive_mode,
                  a.vouch_ref,
                  a.interoffice_voucher,
                  a.status,
                  a.tot_premium_amt,
                  s.comm_date,
                  s.agent_id,
                  s.product_cd,
                  s.term,
                  s.pay_mode_cd,
                  s.suspense_amt,
                  s.last_paid_inst_no,
                  s.last_paid_date,
                  p.paidup_age paidupage,
                  s.ins_tp_cd
           FROM   acc_receivables a, ins_p_summery s, ins_product p
          WHERE       a.status = '0'
                  AND a.rec_status = '1'
                  AND NVL (a.return_st, '0') = '0'      ---Musha on 09-08-2015
                  AND a.pgid = NVL (p_pgid, a.pgid)
                  AND s.pgid = NVL (p_pgid, s.pgid)
                  /*AND (   p_pgid IS NULL
                       OR (p_pgid IS NOT NULL AND a.pgid = p_pgid
                           AND s.pgid = p_pgid
                          )
                      )*/
                  ---Musha on 28-07-2015
                  --AND    a.receipt_status = '1'
                  AND (p_ins_tp_cd IS NULL OR s.ins_tp_cd = p_ins_tp_cd)
                  --AND    a.receive_date <= p_adjustment_date  --Musha on 18-04-2015
                  AND NVL (a.coll_slip_rec_dt, a.receive_date) <=
                        p_adjustment_date
                  --AND    a.due_dt_from < to_date('30/04/2015', 'dd/mm/rrrr')
                  AND NVL (a.com_calculated, 'N') = 'N'
                  AND a.adv_status = '1'
                  /*AND NVL (a.cheque_deposit, 'N') =
                         DECODE (a.receive_mode,
                                 '1', NVL (a.cheque_deposit, 'N'),
                                 '3', NVL (a.cheque_deposit, 'N'),
                                 'Y'
                                )*/
                  --Musha on 30.08.2015
                  AND NVL (a.cheque_deposit, 'N') =
                        DECODE (a.receive_mode,
                                '2', 'Y',
                                NVL (a.cheque_deposit, 'N'))
                  AND ( (NVL (p_descendant_flag, '0') = '0'
                         AND a.active_office_cd =
                               NVL (p_office_cd, a.active_office_cd))
                       OR (NVL (p_descendant_flag, '0') = '1'
                           AND a.active_office_cd IN
                                    (    SELECT   office_cd
                                           FROM   hrm_office_setup
                                     START WITH   office_cd = p_office_cd
                                     CONNECT BY   PRIOR office_cd =
                                                     control_office_cd)))
                  AND EXISTS
                        (SELECT   1
                           FROM   ins_prem_acc_receivable ipac
                          WHERE       ipac.pay_status = 0
                                  AND ipac.proposed_status = '7'
                                  AND ipac.proposer_pk = a.receive_id)
                  AND (NVL (a.coll_amount, 0) = 0
                       OR (NVL (a.coll_amount, 0) > 0
                           AND EXISTS
                                 (SELECT   1
                                    FROM   acc_bank_tran_mst m,
                                           acc_bank_tran_dtl d
                                   WHERE       m.coll_purpose = '2'
                                           AND d.pgid = a.pgid
                                           AND d.receive_id = a.receive_id
                                           AND NVL (d.deposit_st, '0') = '1'
                                           AND m.tran_id = d.tran_id)))
                  AND a.pgid = s.pgid
                  AND s.agent_id = NVL (p_agent_id, s.agent_id)
                  --AND s.agent_id <> '0000003774'--Musha open on 02.08.2015
                  ---Musha on 05-05-2015 due to client request
                  AND s.product_cd = p.product_cd
       ORDER BY   a.pgid, a.receive_id)
   LOOP
      money_in_hand := 0;
      v_count1 := 0;

      /*SELECT COUNT(1)
      INTO   v_count1
      FROM   ins_prem_acc_receivable
      WHERE  pgid = i.pgid
      AND    proposer_pk < i.receive_id
      AND    pay_status = 0
      AND    proposed_status = '7'
      AND    installment_no < i.installment_no_from;*/
      ---Temporary Musha on 06-04-2015
      IF v_count1 = 0
      THEN
         v_adjusted_amt := 0;
         v_flag := 0;

         SELECT   NVL (SUM (a.installment_premium), 0)
           INTO   v_adjusted_amt
           FROM   ins_prem_acc_receivable a
          WHERE       a.proposer_pk = i.receive_id
                  AND a.proposed_status = '1'
                  AND a.pay_status = 1;

         --Find the date upto which premium will be adjusted
         IF v_adv_adj = '0'
         THEN
            v_cal_due_dt_to := TRUNC (SYSDATE);
         ELSIF v_adv_adj = '1'
         THEN
            SELECT   ADD_MONTHS (i.comm_date, 12) - 1
              INTO   v_cal_due_dt_to
              FROM   DUAL;

            IF v_cal_due_dt_to < TO_DATE ('30/04/2015', 'dd/mm/rrrr')
            THEN
               v_cal_due_dt_to := TO_DATE ('30/04/2015', 'dd/mm/rrrr');
            --It was previous assignment. But Md. Sayadyr  has added the condition on 07/01/2018
            END IF;
         ELSE
            SELECT   ADD_MONTHS (
                        i.comm_date,
                        ( (FLOOR(i.last_paid_inst_no
                                 / (DECODE (i.pay_mode_cd,
                                            '01', 1,
                                            '02', 2,
                                            '03', 4,
                                            '04', 12,
                                            0)))
                           + 1)
                         * 12)
                     )
                     - 1
              INTO   v_cal_due_dt_to
              FROM   DUAL;
         END IF;

         money_in_hand := (i.coll_amount - v_adjusted_amt);

         FOR i2
         IN (  SELECT   a.installment_premium,
                        a.pgid,
                        a.installment_no,
                        a.pay_status,
                        a.next_due_dt,
                        a.sl_no demand_sl,
                        a.total_installment,
                        NULL loan_sl,
                        NULL loan_sl_mst
                 FROM   ins_prem_acc_receivable a
                WHERE       a.proposer_pk = i.receive_id
                        AND a.proposed_status = '7'
                        AND a.pay_status = 0
                        --Below Condition is added by Mr. Sayadur has open this condition on 07/01/2018
                      --  AND a.next_due_dt <= TRUNC (SYSDATE)
             AND ( (i.pay_mode_cd = '01'
                     AND a.next_due_dt <= TRUNC (SYSDATE))
                   OR (i.pay_mode_cd = '02'
                       AND (a.next_due_dt <= TRUNC (SYSDATE)
                            OR installment_no <= 2))
                   OR (i.pay_mode_cd = '03'
                       AND (a.next_due_dt <= TRUNC (SYSDATE)
                            OR installment_no <= 4))
                   OR (i.pay_mode_cd = '04'
                       AND (a.next_due_dt <= TRUNC (SYSDATE)
                            OR installment_no <= 12))) 
             --AND    a.next_due_dt >= p_fyscal_yr_fr
             --AND a.next_due_dt BETWEEN i.last_paid_date AND v_cal_due_dt_to
             ORDER BY   a.installment_no)
         LOOP
            SELECT   COUNT (1)
              INTO   v_cnt_adv_unadj
              FROM   ins_prem_acc_receivable
             WHERE       pgid = i.pgid
                     AND proposer_pk = i.receive_id
                     AND pay_status = 0
                     AND proposed_status = '7'
                     AND installment_no < i.installment_no_from;

            IF v_cnt_adv_unadj > 0
            THEN
               v_adjust_status := 'N';
               EXIT;
            END IF;

            v_flag := 1;

            SELECT   yrly_no_inst
              INTO   v_yrly_no_inst
              FROM   ins_pay_mode
             WHERE   pay_mode_cd = i.pay_mode_cd;

            IF v_yrly_no_inst * i.paidupage <= i2.installment_no
            THEN
               v_paidup_st := 'Y';
            ELSE
               v_paidup_st := 'N';
            END IF;

            IF i2.installment_no = i2.total_installment
            THEN
               v_last_inst := 'Y';
            ELSIF i2.installment_no <> i2.total_installment
            THEN
               v_last_inst := 'N';
            END IF;

            /*IF i.receive_date BETWEEN p_fyscal_yr_fr AND p_fyscal_yr_to
            THEN
               v_coll_dt := i.receive_date;
            ELSE
               IF v_coll_dt IS NULL
               THEN
                  v_coll_dt := i2.next_due_dt;
               END IF;
            END IF;*/
            --musha on 29012014

            /*=================================================================*/
            --Find the date at which collection is adjusted--
            /*=================================================================*/
            BEGIN
               v_prem_type := NULL;

               SELECT   (CASE
                            WHEN i.pay_mode_cd = '01'
                                 AND i2.installment_no = 1
                            THEN
                               '0'
                            WHEN i.pay_mode_cd = '01'
                                 AND i2.installment_no >= 2
                            THEN
                               '2'
                            WHEN i.pay_mode_cd = '02'
                                 AND i2.installment_no = 1
                            THEN
                               '0'
                            WHEN i.pay_mode_cd = '02'
                                 AND i2.installment_no = 2
                            THEN
                               '1'
                            WHEN i.pay_mode_cd = '02'
                                 AND i2.installment_no >= 3
                            THEN
                               '2'
                            WHEN i.pay_mode_cd = '03'
                                 AND i2.installment_no = 1
                            THEN
                               '0'
                            WHEN i.pay_mode_cd = '03'
                                 AND i2.installment_no <= 4
                            THEN
                               '1'
                            WHEN i.pay_mode_cd = '03'
                                 AND i2.installment_no >= 5
                            THEN
                               '2'
                            WHEN i.pay_mode_cd = '04'
                                 AND i2.installment_no = 1
                            THEN
                               '0'
                            WHEN i.pay_mode_cd = '04'
                                 AND i2.installment_no <= 12
                            THEN
                               '1'
                            WHEN i.pay_mode_cd = '04'
                                 AND i2.installment_no >= 13
                            THEN
                               '2'
                            WHEN i.pay_mode_cd = '05'
                                 AND i2.installment_no = 1
                            THEN
                               '0'
                            ELSE
                               NULL
                         END)
                           prem_type
                 INTO   v_prem_type
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            pro_find_adj_date (p_pgid              => i.pgid,
                               p_prem_type         => v_prem_type,
                               --0 for proposal amount, 1 for deferd, 2 for 2nd year + renewal
                               p_receive_id        => i.receive_id,
                               p_adv_flag          => '1',
                               --1 For advanct collection
                               p_coll_due_dt       => i2.next_due_dt,
                               --only need for advance collection
                               p_adj_type          => '0',
                               --0 for system adjustment, 1 for manual adjustment
                               p_adjustment_date   => v_coll_adj_dt);

            /*=================================================================*/
            --End of find collection adjustment date
            /*=================================================================*/
            DECLARE
               recprem          pkg_gl_voucher.t_trans_tab;
               v_error          VARCHAR2 (200);
               v_object_cd      gen_object_info.object_cd%TYPE;
               v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
               v_inter_off_st   CHAR (1);
               v_office_cd      hrm_office.office_cd%TYPE;
               v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
               --v_trans_date   DATE;
               v_cost_center    hrm_office.office_cd%TYPE;
               v_narration      VARCHAR2 (200);
               v_user           VARCHAR2 (20);
               --v_chq_tp       VARCHAR2(3);
               --v_chq_no       VARCHAR2(50);
               --v_chq_dt       DATE;
               v_voucher_no     VARCHAR2 (15);
               v_sus_amt_used   NUMBER (1);
            BEGIN
               /*********************************
               Business wise value will change.
               Developer will put the value
               **********************************/
               --v_object_cd := '00080';
               v_object_cd := p_object_cd;
               --that is object_cd
               v_voucher_cd := '05';
               v_inter_off_st := '0';
               v_office_cd := fun_find_regional_off (i.office_code);
               v_cost_center := i.office_code;
               v_trans_id := i.receive_id;
               --v_trans_date   := i.receive_date;

               /*SELECT COUNT(1)
                 INTO v_coll_fy_open_st
                 FROM acc_fiscal_year
                WHERE fy_close = 0
                  AND TRUNC(v_coll_dt) BETWEEN fy_st_dt AND fy_ed_dt;

               IF v_coll_fy_open_st = 0 THEN
                 v_trans_date := p_adjustment_date;
               END IF;*/
               --Musha on 19-01-2014
               v_narration :=
                     'Premium adjusted to income for policy no: '
                  || fun_ins_pgid_to_policy_no (i.pgid)
                  || ' for '
                  || i2.next_due_dt
                  || ' at '
                  || v_coll_adj_dt;   --i.receive_date;  --Musha on 19-01-2014
               v_user := p_user;

               /*******End********/
               IF v_prem_type = 3
               THEN
                  IF i.ins_tp_cd = 1
                  THEN
                     recprem (1).trans_item_cd := 158;
                  --Here '158' for " Renewal Premium Amount(CLI)"
                  ELSE
                     recprem (1).trans_item_cd := 159;
                  --Here '159' for " Renewal Premium Amount(TLI)"
                  END IF;
               ELSE
                  IF i.ins_tp_cd = 1
                  THEN
                     recprem (1).trans_item_cd := 3;
                  --Here '3' for " First Premium Amount(CLI)"
                  ELSE
                     recprem (1).trans_item_cd := 103;
                  --Here '103' for " First Premium Amount(TLI)"
                  END IF;
               END IF;

               recprem (1).post_amount := i2.installment_premium;
               recprem (1).chq_tp := NULL;
               recprem (1).chq_no := NULL;
               recprem (1).chq_dt := NULL;

               ----------------------------------
               IF i.ins_tp_cd = 1
               THEN
                  recprem (2).trans_item_cd := 97;
               --Here '97' for "Suspense(CLI) Amount"
               ELSE
                  recprem (2).trans_item_cd := 102;
               --Here '97' for "Suspense(TLI) Amount"
               END IF;

               recprem (2).post_amount := i2.installment_premium;
               recprem (2).chq_tp := NULL;
               recprem (2).chq_no := NULL;
               recprem (2).chq_dt := NULL;

               --Now callaing the voucher posting
               IF money_in_hand >= i2.installment_premium
                  OR (money_in_hand + i.suspense_amt) >=
                       i2.installment_premium
               THEN
                  IF money_in_hand >= i2.installment_premium
                  THEN
                     v_sus_amt_used := 0;
                  ELSE
                     v_sus_amt_used := 1;
                  END IF;

                  pkg_gl_voucher.pro_voucher_posting (
                     p_table          => recprem,
                     p_object_cd      => v_object_cd,
                     p_vouch_cd       => v_voucher_cd,
                     p_inter_off_st   => v_inter_off_st,
                     p_office_cd      => v_office_cd,
                     p_trans_id       => v_trans_id,
                     p_trans_date     => TRUNC (SYSDATE),
                     --v_coll_adj_dt,  --Musha on 10.11.2016
                     --v_trans_date,
                     p_cost_center    => v_cost_center,
                     p_narration      => v_narration,
                     p_user           => v_user,
                     p_ins_tp_cd      => i.ins_tp_cd,
                     p_voucher_no     => v_voucher_no,
                     p_error          => v_error
                  );

                  IF v_error IS NOT NULL
                  THEN
                     v_voucher_errm := v_error;
                     v_adjust_status := 'N';
                     EXIT;
                  ELSE
                     /* This part is added for OR number generation. Modified by Md. Sayadur Rahaman on 26/06/2018*/
                     SELECT   COUNT (1)
                       INTO   v_config_count
                       FROM   ins_system_config
                      WHERE   config_id = 25 AND status = '1';

                     IF v_config_count > 0
                     THEN
                        BEGIN
                           SELECT   object_name
                             INTO   v_sequence_nm
                             FROM   dba_objects
                            WHERE   object_type = 'SEQUENCE'
                                    AND object_name LIKE
                                             'ACC_OR'
                                          || '_'
                                          || TO_CHAR (SYSDATE, 'RRRR');

                           v_statement :=
                                 'select '
                              || v_sequence_nm
                              || '.NEXTVAL from dual';

                           EXECUTE IMMEDIATE v_statement INTO   v_or_sl_no;

                           v_or_number :=
                              LPAD (v_or_sl_no, 6, '0')
                              || TO_CHAR (SYSDATE, 'RRRR');
                        EXCEPTION
                           WHEN NO_DATA_FOUND
                           THEN
                              p_errm :=
                                 'OR:Sequence Not found for'
                                 || TO_CHAR (SYSDATE, 'RRRR');
                              v_adjust_status := 'N';
                              EXIT;
                           WHEN OTHERS
                           THEN
                              p_errm := SQLERRM;
                              v_adjust_status := 'N';
                              EXIT;
                        END;
                     ELSE
                        v_or_number := NULL;
                     END IF;

                     /*End of OR generation*/

                     --make the premium receivable paid.................
                     UPDATE   ins_prem_acc_receivable x
                        SET   x.paid_amount = i2.installment_premium,
                              x.balance = 0,
                              x.payment_date = v_coll_adj_dt, --i.receive_date,
                              x.pay_status = DECODE (v_sus_amt_used, 0, 1, 4),
                              x.proposed_status =
                                 DECODE (v_sus_amt_used, 0, '1', '4'),
                              x.ref_voucher = v_voucher_no,
                              --x.next_due_dt = i2.next_due_dt,
                              u_usr = v_user,
                              u_dt = SYSDATE,
                              or_number = v_or_number
                      WHERE   x.pgid = i.pgid
                              AND x.installment_no = i2.installment_no;

                     --update ins_p_summery for paid-up status and next due date and next due installment no
                     IF i2.next_due_dt > i.last_paid_date
                     THEN
                        SELECT   TO_NUMBER(TO_CHAR (
                                              LAST_DAY(TO_DATE (
                                                          TO_CHAR (
                                                             ADD_MONTHS (
                                                                i2.next_due_dt,
                                                                DECODE (
                                                                   i.pay_mode_cd,
                                                                   '01',
                                                                   12,
                                                                   '02',
                                                                   6,
                                                                   '03',
                                                                   3,
                                                                   '04',
                                                                   1,
                                                                   12
                                                                )
                                                             ),
                                                             'RRRRMM'
                                                          )
                                                          || '01',
                                                          'RRRRMMDD'
                                                       )),
                                              'DD'
                                           ))
                          INTO   v_cur_month_last_day
                          FROM   DUAL;

                        IF v_cur_month_last_day >=
                              TO_NUMBER (TO_CHAR (i.comm_date, 'DD'))
                        THEN
                           SELECT   TO_DATE(TO_CHAR (i.comm_date, 'DD')
                                            || '-'
                                            || TO_CHAR (
                                                  ADD_MONTHS (
                                                     i2.next_due_dt,
                                                     DECODE (i.pay_mode_cd,
                                                             '01', 12,
                                                             '02', 6,
                                                             '03', 3,
                                                             '04', 1,
                                                             12)
                                                  ),
                                                  'MON-RRRR'
                                               ))
                             INTO   v_next_due_date
                             FROM   DUAL;
                        ELSE
                           SELECT   TO_DATE(v_cur_month_last_day || '-'
                                            || TO_CHAR (
                                                  ADD_MONTHS (
                                                     i2.next_due_dt,
                                                     DECODE (i.pay_mode_cd,
                                                             '01', 12,
                                                             '02', 6,
                                                             '03', 3,
                                                             '04', 1,
                                                             12)
                                                  ),
                                                  'MON-RRRR'
                                               ))
                             INTO   v_next_due_date
                             FROM   DUAL;
                        END IF;

                        UPDATE   ins_p_summery p
                           SET   p.last_adjustment_dt = v_coll_adj_dt,
                                 --i.receive_date,
                                 p.last_paid_date = i2.next_due_dt,
                                 p.paid_up_dt =
                                    DECODE (v_paidup_st,
                                            'Y', i2.next_due_dt,
                                            NULL),
                                 p.paid_up_status =
                                    DECODE (v_paidup_st, 'Y', 1, NULL),
                                 p.last_paid_inst_no = i2.installment_no,
                                 p.policy_status =
                                    DECODE (v_last_inst, 'Y', '07', '09'),
                                /* p.next_due_date =
                                    CASE
                                       WHEN p.pay_mode_cd <> '05'
                                       THEN
                                          v_next_due_date
                                       ELSE
                                          NULL
                                    END,
                                 p.next_due_inst_no =
                                    CASE
                                       WHEN p.pay_mode_cd <> '05'--alomgir added
                                       THEN
                                          i2.installment_no + 1
                                       ELSE
                                          NULL
                                    END,*/
                                    p.next_due_date = v_next_due_date,
                                  p.next_due_inst_no = i2.installment_no + 1, --added by md tazmul29-08-22
                                 p.policy_status_dt =
                                    DECODE (v_last_inst,
                                            'Y', i.receive_date,
                                            p.policy_status_dt),
                                 p.suspense_amt =
                                    DECODE (
                                       v_sus_amt_used,
                                       1,
                                       (p.suspense_amt
                                        - ABS(i2.installment_premium
                                              - money_in_hand)),
                                       p.suspense_amt
                                    ),
                                 p.process_user = p_user,
                                 p.process_date = p_adjustment_date,
                                 u_usr = v_user,
                                 u_dt = SYSDATE
                         WHERE   p.pgid = i.pgid;
                     ELSE
                        UPDATE   ins_p_summery p
                           SET   p.suspense_amt =
                                    DECODE (
                                       v_sus_amt_used,
                                       1,
                                       (p.suspense_amt
                                        - ABS(i2.installment_premium
                                              - money_in_hand)),
                                       p.suspense_amt
                                    ),
                                 p.process_user = p_user,
                                 p.process_date = p_adjustment_date,
                                 u_usr = v_user,
                                 u_dt = SYSDATE
                         WHERE   p.pgid = i.pgid;
                     END IF;

                     v_voucher_errm := 'Success';
                     v_adjust_status := 'Y';

                     IF money_in_hand >= i2.installment_premium
                     THEN
                        money_in_hand :=
                           money_in_hand - i2.installment_premium;
                     ELSE
                        money_in_hand := 0;
                     END IF;
                  END IF;
               ELSIF (money_in_hand + i.suspense_amt) < i2.installment_premium
               THEN
                  v_adjust_status := 'N';
                  EXIT;
               END IF;
            END;
         --End Of Update by Md. Sayadur Rahaman ,on 10-sep-12 for new accounts interation
         END LOOP;

         v_latefee_errm := 'Success';

         IF     v_adjust_status = 'Y'
            AND v_latefee_errm = 'Success'
            AND v_flag = 1
         THEN
            p_test_var := 'v_voucher_errm-' || v_voucher_errm;

            SELECT   COUNT (pgid)
              INTO   v_count
              FROM   ins_prem_acc_receivable a
             WHERE       a.proposer_pk = i.receive_id
                     AND a.proposed_status = '7'
                     AND a.pay_status = 0;

            IF v_count = 0
            THEN
               UPDATE   acc_receivables
                  SET   status = '1',
                        u_usr = p_user,
                        u_dt = SYSDATE,
                        com_calculated = 'N',
                        adjusted_by = p_user,
                        adjustment_date = v_coll_adj_dt    --p_adjustment_date
                WHERE   receive_id = i.receive_id;

               p_valid_record_count := NVL (p_valid_record_count, 0) + 1;

               IF money_in_hand > 0 AND i.pgid IS NOT NULL
               THEN
                  UPDATE   ins_p_summery
                     SET   suspense_amt = suspense_amt + money_in_hand,
                           process_user = p_user,
                           process_date = p_adjustment_date,
                           u_usr = p_user,
                           u_dt = SYSDATE
                   WHERE   pgid = i.pgid;
               END IF;
            ELSE
               UPDATE   acc_receivables
                  SET   status = '0',
                        u_usr = p_user,
                        u_dt = SYSDATE,
                        com_calculated = 'N',
                        adjusted_by = p_user,
                        adjustment_date = v_coll_adj_dt    --p_adjustment_date
                WHERE   receive_id = i.receive_id;

               p_valid_record_count := NVL (p_valid_record_count, 0) + 1;
            END IF;

            COMMIT;
         ELSE
            ROLLBACK;
         END IF;
      ELSE
         NULL;
      END IF;
   END LOOP;
EXCEPTION
   WHEN exp_voucher_creation
   THEN
      p_errm := v_voucher_errm;
      ROLLBACK;
   WHEN NO_DATA_FOUND
   THEN
      p_errm := 'ERROR: Data not found for adjustment process.';
      ROLLBACK;
   WHEN OTHERS
   THEN
      p_errm := 'Advance Coll. Adj. ' || SQLERRM;
      ROLLBACK;
END pro_adv_prem_coll_adj;
/


--
-- PRO_AGENT_BONUS_BILL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_agent_bonus_bill wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
2101 889
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
/


--
-- PRO_ALT_ALTERATION_CALCULATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_alt_alteration_calculation (
   p_pgid                    IN       VARCHAR2,
   p_new_inst_premium        IN       NUMBER,
   p_new_life_premium        IN       NUMBER,
   p_term                    IN       NUMBER,
   p_new_pay_mode_cd         IN       VARCHAR2,
   p_new_comm_dt             IN       DATE,
   p_yrly_no_inst            IN       NUMBER,
   p_user                    IN       VARCHAR2,
   p_date                    IN       DATE,
   p_age                     IN       NUMBER,
   p_product_cd              IN       VARCHAR2,
   p_new_sum_assured         IN       NUMBER,
   p_tot_due_amount          OUT      NUMBER,
   p_new_last_paid_dt        OUT      DATE,
   p_new_next_due_dt         OUT      DATE,
   p_maturity_date           OUT      DATE,
   p_new_last_paid_inst_no   OUT      NUMBER,
   p_late_fee                OUT      NUMBER,
   p_suspense_amt            OUT      NUMBER,
   p_excep_tracker           OUT      NUMBER,
   p_exep_msg                OUT      VARCHAR2
)
IS
   v_inst_premium             ins_p_summery.installment_premium%TYPE;
   v_sum_assured              ins_p_summery.sum_assured%TYPE;
   v_last_paid_inst_no        ins_p_summery.last_paid_inst_no%TYPE;
   v_last_paid_inst_no1       ins_p_summery.last_paid_inst_no%TYPE;
   v_suspense_amt             ins_p_summery.suspense_amt%TYPE;
   v_pay_mode_cd              ins_p_summery.pay_mode_cd%TYPE;
   v_policy_status            ins_p_summery.policy_status%TYPE;
   v_product_cd               ins_p_summery.product_cd%TYPE;
   v_term                     ins_p_summery.term%TYPE;
   v_last_paid_date           ins_p_summery.last_paid_date%TYPE;
   v_last_paid_date1          ins_p_summery.last_paid_date%TYPE;
   v_comm_date                ins_p_summery.comm_date%TYPE;
   v_age                      ins_p_summery.age%TYPE;
   v_policy_installment       ins_p_summery.policy_installment%TYPE;
   v_yrly_no_inst             ins_pay_mode.yrly_no_inst%TYPE;
   v_option_cd                ins_p_summery.option_cd%TYPE;
   v_paidup_age               ins_product.paidup_age%TYPE;
   v_variable                 NUMBER (2);
   v_variable1                NUMBER (2);
   v_policy_group             ins_policy_type.policy_tp_cd%TYPE;
   v_drop_sum_value           NUMBER (20, 2);
   v_count                    NUMBER (2)                               := 0;
   v_due_amount               NUMBER (20)                              := 0;
   v_auto_loan                NUMBER (15, 2);
   v_auto_loan_interest       NUMBER (15, 2);
   v_late_fee                 NUMBER (15, 2);
   v_mod                      NUMBER (1)                               := 1;
   v_flag                     NUMBER (1)                               := 0;
   v_date                     DATE;
   v_dob                      DATE;
   v_last_due_dt              DATE;
   v_proposed_last_paid_dt    DATE;
   v_excep_tr_m               EXCEPTION;
--------------
   v_due_date_from_late_fee   DATE;
   v_due_date_to_late_fee     DATE;
   v_life_premium             NUMBER (12, 2);
   v_partial_due_amt          NUMBER (12);
/******************************************************************************
   NAME:       pro_alt_alteration_calculation
   PURPOSE:

   REVISIONS:
   Ver        Date           Author                      Description
   ---------  -----------    -------------------------   ----------------------
   1.0        04-Nov-2010    1. Mohammad Arifur Rahman   Created this procedure.
   1.1        13-Dec-2010    2. Mohammad Arifur Rahman   Updated this procedure.
   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     pro_alt_alteration_calculation
      Sysdate:         04-Nov-2010
      Date and Time:   04-Nov-2010, 2:40:57 PM, and 04-Nov-2010 2:40:57 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
   --p_tot_amt_given := 0;
   pro_ins_total_auto_loan (p_pgid, v_auto_loan, v_auto_loan_interest);

   IF v_auto_loan > 0 OR v_auto_loan_interest > 0
   THEN
      p_excep_tracker := 1;
      p_exep_msg :=
           'Policy Is Not Altered because Auto Loan or Interest Amount Found';
      RAISE v_excep_tr_m;
   ELSE
      SELECT ips.installment_premium, ips.last_paid_inst_no,
             ips.suspense_amt, ips.dob, ips.sum_assured, ips.policy_status,
             ips.product_cd, ips.term, ips.last_paid_date, ips.comm_date,
             ips.age, ips.policy_installment, ipm.yrly_no_inst,
             ips.pay_mode_cd, ips.option_cd, ip.paidup_age, ips.life_premium
        INTO v_inst_premium, v_last_paid_inst_no,
             v_suspense_amt, v_dob, v_sum_assured, v_policy_status,
             v_product_cd, v_term, v_last_paid_date, v_comm_date,
             v_age, v_policy_installment, v_yrly_no_inst,
             v_pay_mode_cd, v_option_cd, v_paidup_age, v_life_premium             
        FROM ins_p_summery ips, ins_pay_mode ipm, ins_product ip
       WHERE ips.pgid = p_pgid
         AND ips.pay_mode_cd = ipm.pay_mode_cd
         AND ips.product_cd = ip.product_cd;

      SELECT DECODE (p_yrly_no_inst, 1, 12, 2, 6, 4, 3, 1),
             DECODE (v_pay_mode_cd, '01', 12, '02', 6, '03', 3, 1)
        INTO v_variable,
             v_variable1
        FROM DUAL;

      IF     v_comm_date = p_new_comm_dt
         AND p_new_sum_assured < v_sum_assured
         AND v_policy_status IN ('00', '01', '09')
         AND FLOOR (v_last_paid_inst_no / v_yrly_no_inst) >= v_paidup_age
      THEN
         IF v_option_cd = '1'
         THEN
            v_last_paid_inst_no1 := v_last_paid_inst_no + v_yrly_no_inst;

            SELECT TO_DATE (   TO_CHAR (p_new_comm_dt, 'DD')
                            || '-'
                            || TO_CHAR (ADD_MONTHS (p_new_comm_dt,
                                                      v_variable1
                                                    * (v_last_paid_inst_no1
                                                       - 1
                                                      )
                                                   ),
                                        'MON-RRRR'
                                       ),
                            'DD-MON-RRRR'
                           )
              INTO v_last_paid_date1
              FROM DUAL;

            IF v_last_paid_date1 >= p_date
            THEN
               v_last_paid_inst_no1 := v_last_paid_inst_no;
               v_last_paid_date1 := v_last_paid_date;
            END IF;
         ELSE
            v_last_paid_inst_no1 := v_last_paid_inst_no;
            v_last_paid_date1 := v_last_paid_date;
         END IF;

         v_drop_sum_value :=
            fun_drop_sum_value (p_pgid                     => p_pgid,
                                p_term                     => v_term,
                                p_last_paid_inst_no        => v_last_paid_inst_no1,
                                p_yrly_no_inst             => v_yrly_no_inst,
                                p_sum_assured              =>   v_sum_assured
                                                              - p_new_sum_assured,
                                p_product_cd               => v_product_cd,
                                p_comm_date                => v_comm_date,
                                p_policy_installment       => v_policy_installment,
                                p_installment_premium      => v_inst_premium,
                                p_last_paid_date           => v_last_paid_date1,
                                p_policy_status            => v_policy_status,
                                p_age                      => v_age
                               );

         IF v_option_cd = '1'
         THEN
            v_drop_sum_value := v_drop_sum_value - v_inst_premium;
         END IF;
      END IF;

      WHILE v_mod != 0
      LOOP
         SELECT MOD (((v_last_paid_inst_no + v_count) * v_variable1),
                     v_variable
                    )
           INTO v_mod
           FROM DUAL;

         IF v_mod != 0
         THEN
            v_count := v_count + 1;
            v_flag := 1;
         END IF;
      END LOOP;

      p_new_last_paid_inst_no :=
                  ((v_last_paid_inst_no + v_count) * v_variable1
                  ) / v_variable;
      p_new_last_paid_dt :=
         TO_DATE (   TO_CHAR (p_new_comm_dt, 'DD')
                  || '-'
                  || TO_CHAR (ADD_MONTHS (p_new_comm_dt,
                                            v_variable
                                          * (p_new_last_paid_inst_no - 1)
                                         ),
                              'MON-RRRR'
                             ),
                  'DD-MON-RRRR'
                 );
      p_new_next_due_dt :=
         TO_DATE (   TO_CHAR (p_new_comm_dt, 'DD')
                  || '-'
                  || TO_CHAR (ADD_MONTHS (p_new_last_paid_dt, v_variable),
                              'MON-RRRR'
                             ),
                  'DD-MON-RRRR'
                 );
                 
      IF p_new_next_due_dt <= TRUNC (SYSDATE) THEN
          v_due_date_from_late_fee := p_new_next_due_dt;
          v_due_date_to_late_fee := p_new_last_paid_dt;
      END IF;
---=====================================---
      --v_due_date_from_late_fee := NULL;
      --v_due_date_to_late_fee := NULL;
      p_suspense_amt :=
         ROUND (  NVL (p_suspense_amt, 0)
                + NVL (v_drop_sum_value, 0)
                + NVL (v_suspense_amt, 0)
               );

      --Adjust due installment by drop sum value
      IF NVL (v_drop_sum_value, 0) > 0
         --AND p_new_next_due_dt <= TRUNC (SYSDATE)  --Stop this condition on 05.10.2020 by Musha
      THEN
         WHILE v_drop_sum_value > p_new_inst_premium
         LOOP
            v_drop_sum_value := v_drop_sum_value - p_new_inst_premium;
            p_tot_due_amount := NVL (p_tot_due_amount, 0)
                                + p_new_inst_premium;
            p_new_last_paid_inst_no := p_new_last_paid_inst_no + 1;
            p_new_last_paid_dt :=
               TO_DATE (   TO_CHAR (p_new_comm_dt, 'DD')
                        || '-'
                        || TO_CHAR (ADD_MONTHS (p_new_comm_dt,
                                                  v_variable
                                                * (p_new_last_paid_inst_no - 1
                                                  )
                                               ),
                                    'MON-RRRR'
                                   ),
                        'DD-MON-RRRR'
                       );

            IF p_new_last_paid_dt < TRUNC (SYSDATE) THEN
                v_due_date_to_late_fee := p_new_last_paid_dt;
            END IF;
            
            /*IF v_due_date_from_late_fee IS NULL
            THEN
               v_due_date_from_late_fee := p_new_last_paid_dt;
            END IF;

            v_due_date_to_late_fee := p_new_last_paid_dt;*/
         END LOOP;
         
         ----------Add by Musha on 05.10.2020--------------
         p_new_next_due_dt :=
           TO_DATE (   TO_CHAR (p_new_comm_dt, 'DD')
                    || '-'
                    || TO_CHAR (ADD_MONTHS (p_new_comm_dt,
                                              v_variable
                                            * (p_new_last_paid_inst_no
                                              )
                                           ),
                                'MON-RRRR'
                               ),
                    'DD-MON-RRRR'
                   );
         ------------------------
         
         
      --p_suspense_amt := NVL (p_suspense_amt, 0) + NVL (v_drop_sum_value, 0);
      /*ELSE
         --p_suspense_amt := NVL (p_suspense_amt, 0) + NVL (v_drop_sum_value, 0);
         IF p_new_next_due_dt <= TRUNC (SYSDATE)
         THEN
            v_due_date_from_late_fee := p_new_last_paid_dt;
            v_due_date_to_late_fee := p_new_last_paid_dt;
         END IF;*/
      END IF;

      -----Calculate partial due premium incase of increase premium------
      IF p_new_life_premium > v_life_premium
      THEN
         v_partial_due_amt :=
            ROUND ((p_new_life_premium - v_life_premium) * v_last_paid_inst_no
                  );
         p_tot_due_amount := NVL (p_tot_due_amount, 0) + NVL (v_partial_due_amt, 0);
      END IF;
     
     
     --Find due premium--
     WHILE p_new_next_due_dt <= TRUNC (SYSDATE)
     LOOP        
        p_tot_due_amount := NVL (p_tot_due_amount, 0)
                            + p_new_inst_premium;
        p_new_last_paid_inst_no := p_new_last_paid_inst_no + 1;
        p_new_last_paid_dt :=
           TO_DATE (   TO_CHAR (p_new_comm_dt, 'DD')
                    || '-'
                    || TO_CHAR (ADD_MONTHS (p_new_comm_dt,
                                              v_variable
                                            * (p_new_last_paid_inst_no - 1
                                              )
                                           ),
                                'MON-RRRR'
                               ),
                    'DD-MON-RRRR'
                   );

        IF v_due_date_from_late_fee IS NULL
        THEN
           v_due_date_from_late_fee := p_new_last_paid_dt;
        END IF;

        v_due_date_to_late_fee := p_new_last_paid_dt;
        
        p_new_next_due_dt :=
           TO_DATE (   TO_CHAR (p_new_comm_dt, 'DD')
                    || '-'
                    || TO_CHAR (ADD_MONTHS (p_new_comm_dt,
                                              v_variable
                                            * (p_new_last_paid_inst_no
                                              )
                                           ),
                                'MON-RRRR'
                               ),
                    'DD-MON-RRRR'
                   );
     END LOOP;
      

----=====================================---
      IF v_due_date_from_late_fee IS NOT NULL
      THEN                                                   --v_flag = 1 THEN
         SELECT DECODE (v_pay_mode_cd, '01', 12, '02', 6, '03', 3, 1)
           INTO v_variable
           FROM DUAL;

         v_late_fee :=
            fun_cal_late_fee_for_alter
                                   (p_pgid             => p_pgid,
                                    p_prem_amt         => p_new_inst_premium,
                                    p_yearly_inst      => v_yrly_no_inst,
                                    p_due_dt_from      => v_due_date_from_late_fee,
                                    p_due_dt_to        => v_due_date_to_late_fee,
                                    p_calc_date        => TRUNC (SYSDATE)
                                   );
         /*FOR i IN v_last_paid_inst_no + 1 .. v_last_paid_inst_no + v_count
         LOOP
            p_tot_due_amount           := NVL (p_tot_due_amount, 0) + v_inst_premium;

            IF p_tot_due_amount > 0 THEN


               v_late_fee                 :=
                  fun_cal_late_fee_for_alter
                                 (p_pgid                        => p_pgid
                                 ,p_prem_amt                    => v_inst_premium
                                 ,p_yearly_inst                 => v_yrly_no_inst
                                 ,p_due_dt_from                 => TO_DATE
                                                                      (   TO_CHAR (p_new_comm_dt
                                                                                  ,'DD')
                                                                       || '-'
                                                                       || TO_CHAR
                                                                             (ADD_MONTHS
                                                                                    (p_new_comm_dt
                                                                                    ,   v_variable
                                                                                      * (i - 1) )
                                                                             ,'MON-RRRR')
                                                                      ,'DD-MON-RRRR')
                                 ,p_due_dt_to                   => TO_DATE
                                                                      (   TO_CHAR (p_new_comm_dt
                                                                                  ,'DD')
                                                                       || '-'
                                                                       || TO_CHAR
                                                                             (ADD_MONTHS
                                                                                    (p_new_comm_dt
                                                                                    ,   v_variable
                                                                                      * (i - 1) )
                                                                             ,'MON-RRRR')
                                                                      ,'DD-MON-RRRR')
                                 ,p_calc_date                   => p_date);
            ELSIF v_due_amount < 0 THEN
               v_late_fee                 := 0;
            END IF;

            p_tot_due_amount           := p_tot_due_amount + v_late_fee;
            p_late_fee                 := NVL (p_late_fee, 0) + v_late_fee;
         END LOOP;*/
         p_tot_due_amount := p_tot_due_amount + v_late_fee;
         p_late_fee := NVL (p_late_fee, 0) + v_late_fee;

         /*p_tot_due_amount :=
               p_tot_due_amount
               - (v_suspense_amt + NVL (v_drop_sum_value, 0));*/
         IF p_tot_due_amount < 0
         THEN
            --p_suspense_amt             := ABS (p_tot_due_amount);
            p_tot_due_amount := 0;
         --ELSE
         --   p_suspense_amt             := 0;
         END IF;
      /*ELSE
         p_tot_due_amount           := 0;
         p_suspense_amt             :=
                                ABS (p_tot_due_amount - NVL (v_drop_sum_value, 0) )
                                + v_suspense_amt;*/
      END IF;

      --p_suspense_amt := NVL (p_suspense_amt, 0) + NVL (v_suspense_amt, 0);

      /*IF v_suspense_amt >= p_suspense_amt THEN
         p_suspense_amt             := p_suspense_amt;
      ELSIF FLOOR (v_last_paid_inst_no / v_yrly_no_inst) >= v_paidup_age THEN
         p_suspense_amt             := p_suspense_amt;
      ELSE
         p_suspense_amt             := v_suspense_amt;
      END IF;*/
      SELECT policy_tp_cd
        INTO v_policy_group
        FROM ins_policy_type
       WHERE policy_tp_cd = (SELECT policy_tp_cd
                               FROM ins_product
                              WHERE product_cd = p_product_cd);

      IF v_policy_group = '02'
      THEN
         SELECT TO_DATE (   TO_CHAR (p_new_comm_dt, 'DD')
                         || '-'
                         || TO_CHAR
                                  (ADD_MONTHS (p_new_comm_dt,
                                                 (  p_term
                                                  * (  DECODE
                                                           (p_new_pay_mode_cd,
                                                            '01', 12,
                                                            '02', 6,
                                                            '03', 3,
                                                            1
                                                           )
                                                     * p_yrly_no_inst
                                                    )
                                                 )
                                               - DECODE (p_new_pay_mode_cd,
                                                         '01', 12,
                                                         '02', 6,
                                                         '03', 3,
                                                         1
                                                        )
                                              ),
                                   'MON-RRRR'
                                  ),
                         'DD-MON-RRRR'
                        )
           INTO v_last_due_dt
           FROM DUAL;

         SELECT TO_DATE (   TO_CHAR (v_dob, 'DD-MON')
                         || '-'
                         || TO_CHAR (v_last_due_dt, 'RRRR'),
                         'DD-MON-RRRR'
                        )
           INTO v_date
           FROM DUAL;

         IF v_date <= v_last_due_dt
         THEN
            p_maturity_date := ADD_MONTHS (v_date, 12);
         ELSE
            p_maturity_date := v_date;
         END IF;
      ELSIF v_policy_group = '07'
      THEN
         SELECT TO_DATE (   TO_CHAR (p_new_comm_dt, 'DD')
                         || '-'
                         || TO_CHAR (ADD_MONTHS (p_new_comm_dt,
                                                 ((80 - p_age) * 12
                                                 )
                                                ),
                                     'MON-RRRR'
                                    ),
                         'DD-MON-RRRR'
                        )
           INTO p_maturity_date
           FROM DUAL;
      ELSE
         SELECT TO_DATE (   TO_CHAR (p_new_comm_dt, 'DD')
                         || '-'
                         || TO_CHAR
                                   (ADD_MONTHS (p_new_comm_dt,
                                                (  p_term
                                                 * (  DECODE
                                                           (p_new_pay_mode_cd,
                                                            '01', 12,
                                                            '02', 6,
                                                            '03', 3,
                                                            1
                                                           )
                                                    * p_yrly_no_inst
                                                   )
                                                )
                                               ),
                                    'MON-RRRR'
                                   ),
                         'DD-MON-RRRR'
                        )
           INTO p_maturity_date
           FROM DUAL;
      END IF;
   END IF;
EXCEPTION
   WHEN v_excep_tr_m
   THEN
      ROLLBACK;
      p_excep_tracker := 1;
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
      p_excep_tracker := 1;
   WHEN OTHERS
   THEN
      ROLLBACK;
      p_excep_tracker := 1;
END pro_alt_alteration_calculation;
/


--
-- PRO_ALT_POLICY_CALCULATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_alt_policy_calculation wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
1a48 704
+cMNuVMVAINHyA8RMeEMc3jyBxswg81U166GV46ax7WeDyvedaZiA5hbDu++9LrCt9vMBt3S
kTI3alpngGnLTpq7A05DFGHrJ1dKbMirJLXkTvibTgyC/LcOheeSCEWGBbAAtS0Skj+1t5og
T7maT2H4u5gfIZDKRglB4mqmk8Zi/+T9bkypNJybRmgIfPqISlF1FF+wiPRqZitdt2aH8diJ
yRRtzX3loN3cCEDGIcpoKMsGButXi/uCDlt19wmft+n9QWn6EG6h97eKBDvjEIqbYrZ2f7lq
ZCrX3wdwgpdXSogPB8QUzJURr9J7X7jLQK84DsXo90hY23WUk4XfHZKrk3bkul1fNmcCb739
OKiIIQxG/zX+YClmzFAxtL3WrHRadRruKPQkr+PzvGaE1d7+yprP4exyS7UNHuc53i9KTg2I
ui19zAsG3BVxVkUNOaRHCInB6Xa3fsfo9+S3eQnAXOENGWu06ZkhyMM4m2auofG3QfohfOUa
GMjIIFmjXrYATEZKGm/gMI62RosWcJAvlu9RA2feFyHtuNU4D4ZChDj1vmcD7BRD9Vy52RYP
0yrxstWXZICKN5mpShbcVtWLqhJNrWADpuM1pxsnK3dWFh9jiC7eyzjl+nwVIZSfpAB6HPH3
x1Ya+j2ieKeRpBvhlfH+7AsdpGsrqPTv6UTrm6MTVOHZXiG4TXGMPmn0VLbiaa7+D1DY4YxY
h8bKN7SyJv6gkatXQ+Ty84IaddkC8D+tbsOHtRbPhPpI0KXr+QiBCPtz/jCdEKoSos4QnYSz
SPisn2QWz/O3IMqBNBKqMYyU5Kq4J2aIy8clLUtuqMzcxfRuotsXWrfWe3rtNUgp3AqtjFj7
YgkQG27Sft+sGdeH12jFjFKN36bE3KSB0lWydS/6I97MlNxjLF8jCiJCT33AUvZShgISPp94
iTiya5d0+whrp9P7azwko9AIixzsHpYWuxWEtX0X+ZtQFx1uBcS6kMmYksuediqgYj7orZ9c
CCr2uUgV4wTqh5YvNms0OOgBkIuoSef/hs561u53Vu/y6zPKpxpizd51c3dAirQ4oPIey3Y2
aZ5Jihsfd42MEvyQMuAahjxxWtOFTqToi/qAuOyrMvUYi9HAuiR4b9hg1pxCxOpalsiCx6P8
yKoH4ceA1+3wHnQLzSOz0BHpPgSgJmsQ7XwmDUwFMmWRYkkaT40DTMTmhjFrJPj6p39Fz19j
B13rCHuh4q5HydwKTon9mB0i6GbMbbC52CMaBbDezw6gJ3hlKbHsCUMj3eJDg1fYP4CtzptQ
rpZZP5IFKT/aVZbapOTL6pdcuEubsA32444/VOEkYDos4jMLpDP1aDjNa4L2oEWs+ElGRcbJ
7/WfyTRF1XU/zMDPaKODbGF7wAQn1qsGS0cB3jTSxfBc96bDd4XHUGvdHyjMEhPACETwJM53
7vqSIjwy0at61uBKtOCES02+DbKAvpURoeLGjfsVU1ZB8HeB6q9rtGni9j1lI7FfSKZvMy5V
CaGHR75AcQEpjuX/kVZV3LMhvvBG2oHmmoSCH+Gw7H7v6PjtM1k6Pc0kDXc2YzRXe61yQjBX
qj8iqgLuU2A7QhHFKDVlCpiQ5y0zN7H2QSx+thffv1+WJHOsmcbSHHfZqp9ZZKKQ5Gik8wAp
lcsEHYEcE+0Zn4ImNFfMHocurvLPRhc/Jc04PohijMyg2/nqDX+CPJ33qfTS53ShO6kuJOH3
4VqntdOJV519a/RWQSUW0nhlIpm49bMO+Iaq+ACFNg==
/


--
-- PRO_ALT_SPECIAL_CALCULATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_alt_special_calculation wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
4049 bdd
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
/


--
-- PRO_ANF_LOAN_ISSUE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_anf_loan_issue wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
2c55 b78
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
FCNFEyz5RAztnck=
/


--
-- PRO_BONUS_FOR_VALUATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_bonus_for_valuation (p_val_date_fr    DATE,
                                                     p_val_date_to    DATE)
AS
   v_rb_bonus            NUMBER (10);
   v_arb_bonus           NUMBER (10);
   v_tb_bonus            NUMBER (10);
   v_inforce_bon_count   NUMBER := 0;
BEGIN
   BEGIN
      FOR x
      IN (SELECT   v.pgid,
                   v.datcom,
                   v.term,
                   v.PLAN,
                   v.sumass,
                   v.pstatus,
                   v.last_paid_date,
                   v.paymode,
                   s.last_paid_inst_no,
                   p.policy_tp_cd
            FROM   val_inforce_policy v, ins_p_summery s, ins_product p
           WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                   AND val_date_from = p_val_date_fr
                   AND val_date_to = p_val_date_to
                   AND v.pgid = s.pgid
                   AND s.product_cd = p.product_cd
                   AND v.last_paid_date IS NOT NULL
                   AND v.rb_amount IS NULL)
      LOOP
         pro_policy_bonus_cal_val (
            p_pgid                 => x.pgid,
            p_comm_date            => x.datcom,
            p_term                 => x.term,
            p_product_cd           => x.PLAN,
            p_sum_assured          => x.sumass,
            p_policy_tp_cd         => x.policy_tp_cd,
            p_applicable_on        => '2',
            ---Here 2=Matured Calim,3=Paidup Maturity
            p_no_of_anf_loan_yr    => 0,
            p_policy_status        => x.pstatus,
            p_max_payment_dt       => x.last_paid_date,
            p_irg_bonus_bar_date   => x.last_paid_date,
            --same as  p_max_payment_dt
            p_last_paid_date       => x.last_paid_date,
            p_pay_mode_cd          => x.paymode,
            p_last_paid_inst_no    => x.last_paid_inst_no,
            p_rb_bonus             => v_rb_bonus,
            p_arb_bonus            => v_arb_bonus,
            p_tb_bonus             => v_tb_bonus
         );

         UPDATE   val_inforce_policy
            SET   rb_amount = v_rb_bonus,
                  arb_amount = v_arb_bonus,
                  tb_amount = v_tb_bonus
          WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                  AND val_date_from = p_val_date_fr
                  AND val_date_to = p_val_date_to
                  AND pgid = x.pgid;

         IF v_inforce_bon_count = 500
         THEN
            COMMIT;
            v_inforce_bon_count := 0;
         ELSE
            v_inforce_bon_count := v_inforce_bon_count + 1;
         END IF;
      END LOOP;

      COMMIT;
   END;

   v_inforce_bon_count := 0;

   BEGIN
      FOR x
      IN (SELECT   v.pgid,
                   v.datcom,
                   v.term,
                   v.PLAN,
                   v.sumass,
                   v.pstatus,
                   v.last_paid_date,
                   v.paymode,
                   s.last_paid_inst_no,
                   p.policy_tp_cd
            FROM   val_paidup_policy v, ins_p_summery s, ins_product p
           WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                   AND val_date_from = p_val_date_fr
                   AND val_date_to = p_val_date_to
                   AND v.pgid = s.pgid
                   AND s.product_cd = p.product_cd
                   AND v.last_paid_date IS NOT NULL
                   AND v.rb_amount IS NULL)
      LOOP
         pro_policy_bonus_cal_val (
            p_pgid                 => x.pgid,
            p_comm_date            => x.datcom,
            p_term                 => x.term,
            p_product_cd           => x.PLAN,
            p_sum_assured          => x.sumass,
            p_policy_tp_cd         => x.policy_tp_cd,
            p_applicable_on        => '3',
            ---Here 2=Matured Calim,3=Paidup Maturity
            p_no_of_anf_loan_yr    => 0,
            p_policy_status        => x.pstatus,
            p_max_payment_dt       => x.last_paid_date,
            p_irg_bonus_bar_date   => x.last_paid_date,
            --same as  p_max_payment_dt
            p_last_paid_date       => x.last_paid_date,
            p_pay_mode_cd          => x.paymode,
            p_last_paid_inst_no    => x.last_paid_inst_no,
            p_rb_bonus             => v_rb_bonus,
            p_arb_bonus            => v_arb_bonus,
            p_tb_bonus             => v_tb_bonus
         );

         UPDATE   val_paidup_policy
            SET   rb_amount = v_rb_bonus,
                  arb_amount = v_arb_bonus,
                  tb_amount = v_tb_bonus
          WHERE       val_year = TO_CHAR (p_val_date_to, 'RRRR')
                  AND val_date_from = p_val_date_fr
                  AND val_date_to = p_val_date_to
                  AND pgid = x.pgid;

         IF v_inforce_bon_count = 500
         THEN
            COMMIT;
            v_inforce_bon_count := 0;
         ELSE
            v_inforce_bon_count := v_inforce_bon_count + 1;
         END IF;
      END LOOP;

      COMMIT;
   END;
END;
/


--
-- PRO_CHANGE_POLICY_STATUS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_change_policy_status
IS
   v_last_paid_inst_no      ins_p_summery.last_paid_inst_no%TYPE;
   v_installment_premium    ins_p_summery.installment_premium%TYPE;
   v_last_paid_date         ins_p_summery.last_paid_date%TYPE;
   v_option_cd              ins_p_summery.option_cd%TYPE;
   v_pay_mode_cd            ins_p_summery.pay_mode_cd%TYPE;
   v_pgid                   ins_p_summery.pgid%TYPE;
   v_execution_no           ins_sch_process_log.execution_no%TYPE;
   v_paidup_value           NUMBER (12, 2)                               := 0;
   v_no_of_anf_instl        NUMBER (5, 2)                                := 0;
   v_counter                NUMBER (10)                                  := 0;
   v_cnt                    NUMBER (10)                                  := 0;
   v_remarks                VARCHAR2 (500);
   v_error_place            VARCHAR2 (50);
   v_error                  VARCHAR2 (500);
   v_noof_months            NUMBER (5)                                   := 0;
   v_extra_grace_period     ser_late_fee_setup.extra_grace_period%TYPE   := 0;
   v_policy_bonus_amt       NUMBER (12, 2)                               := 0;
   v_sur_error              VARCHAR2 (2000);
   v_invalid_policy         EXCEPTION;
   v_surrender_value        NUMBER (12, 2);
   v_surr_val_without_bon   NUMBER (12, 2);
   v_payble_bonus           NUMBER (12, 2);
   v_surr_val_with_stage    NUMBER (12, 2);
   v_message                VARCHAR2 (200);
   v_surrender_factor       NUMBER (5, 2);
   v_paidup_factor          NUMBER (5, 2);
   v_bonus_factor           NUMBER (5, 2);
   v_commutation_factor     NUMBER (5, 2);
   v_yearly_prem            ins_p_summery.total_yearly_premium%TYPE;
   v_prem_due_year          NUMBER (5, 2);
   v_noof_inst              NUMBER (3);

   CURSOR cur_due_instl (p_pgid ins_p_summery.pgid%TYPE)
   IS
      SELECT   r.installment_premium, r.next_due_dt, r.installment_no,
               r.pay_mode, r.sl_no
          FROM ins_prem_acc_receivable r
         WHERE pgid = p_pgid
           AND pay_status = '0'
           AND TO_DATE (   TO_CHAR (r.date_of_com, 'DD')
                        || '-'
                        || TO_CHAR (ADD_MONTHS (r.next_due_dt, 2), 'MON-RRRR')
                       ) < TRUNC (SYSDATE)
           AND NOT EXISTS (SELECT 1
                             FROM ins_proposal_auto_loan_dtl d
                            WHERE d.demand_note_sl = r.sl_no)
      ORDER BY r.next_due_dt, r.installment_no;

   CURSOR cur_lapse
   IS
      SELECT s.pgid, s.comm_date, s.last_paid_inst_no, s.last_paid_date,
             s.policy_status, s.pay_mode_cd
        FROM ins_p_summery s, ins_product p, lps_laps_setup g
       WHERE s.product_cd = p.product_cd
         AND NVL (s.option_cd, '3') = g.option_cd
         AND s.pay_mode_cd = g.pay_mode_cd
         AND NVL (s.active_status, '1') = '1'
         AND s.maturity_date > TRUNC (SYSDATE)
         AND s.policy_status NOT IN ('00', '02', '04')
         AND NVL (s.policy_installment, 0) > 0
         AND (s.last_paid_inst_no * s.term) / NVL (s.policy_installment, 1) <
                                                         NVL (p.paidup_age, 2)
         AND   DECODE (s.pay_mode_cd,
                       '01', ADD_MONTHS (s.last_paid_date, 12),
                       '02', ADD_MONTHS (s.last_paid_date, 6),
                       '03', ADD_MONTHS (s.last_paid_date, 3),
                       '04', ADD_MONTHS (s.last_paid_date, 1),
                       NULL
                      )
             + (g.grace_period + 1) <= TRUNC (SYSDATE)
         AND s.pay_mode_cd <> '05';

   CURSOR cur_paidup
   IS
      SELECT s.pgid, s.comm_date, s.last_paid_inst_no, s.last_paid_date,
             s.policy_status, s.pay_mode_cd, s.option_cd, s.product_cd,
             s.term, g.grace_period, s.total_yearly_premium,
             s.installment_premium
        FROM ins_p_summery s, ins_product p, lps_laps_setup g
       WHERE s.product_cd = p.product_cd
         AND NVL (s.option_cd, '3') = g.option_cd
         AND s.pay_mode_cd = g.pay_mode_cd
         AND NVL (s.active_status, '1') = '1'
         AND s.maturity_date > TRUNC (SYSDATE)
         AND s.policy_status NOT IN ('01', '02', '04')
         AND s.policy_installment > s.last_paid_inst_no
         AND (s.last_paid_inst_no * s.term) / NVL (s.policy_installment, 1) >=
                                                         NVL (p.paidup_age, 2)
         AND   DECODE (s.pay_mode_cd,
                       '01', ADD_MONTHS (s.last_paid_date, 12),
                       '02', ADD_MONTHS (s.last_paid_date, 6),
                       '03', ADD_MONTHS (s.last_paid_date, 3),
                       '04', ADD_MONTHS (s.last_paid_date, 1),
                       NULL
                      )
             + (g.grace_period + 1) <= TRUNC (SYSDATE)
         AND s.pay_mode_cd <> '05';

   CURSOR cur_inforce
   IS
      SELECT s.pgid, s.comm_date, s.last_paid_inst_no, s.last_paid_date,
             s.policy_status, s.pay_mode_cd, s.option_cd, s.product_cd,
             s.term, g.grace_period, s.total_yearly_premium,
             s.installment_premium
        FROM ins_p_summery s, ins_product p, lps_laps_setup g
       WHERE s.product_cd = p.product_cd
         AND NVL (s.option_cd, '3') = g.option_cd
         AND s.pay_mode_cd = g.pay_mode_cd
         AND NVL (s.active_status, '1') = '1'
         AND s.maturity_date > TRUNC (SYSDATE)
         AND s.policy_status NOT IN ('09', '02', '04')
         AND (   (    s.option_cd = '3'
                  AND   DECODE (s.pay_mode_cd,
                                '01', ADD_MONTHS (s.last_paid_date, 12),
                                '02', ADD_MONTHS (s.last_paid_date, 6),
                                '03', ADD_MONTHS (s.last_paid_date, 3),
                                '04', ADD_MONTHS (s.last_paid_date, 1),
                                NULL
                               )
                      + (g.grace_period + 1) > TRUNC (SYSDATE)
                 )
              OR (    s.option_cd = '1'
                  AND   DECODE (s.pay_mode_cd,
                                '01', ADD_MONTHS (s.last_paid_date, 24),
                                '02', ADD_MONTHS (s.last_paid_date, 18),
                                '03', ADD_MONTHS (s.last_paid_date, 15),
                                '04', ADD_MONTHS (s.last_paid_date, 13),
                                NULL
                               )
                      + (g.grace_period + 1) > TRUNC (SYSDATE)
                 )
              OR (s.option_cd = '2')
             );

   CURSOR cur_forfited
   IS
      SELECT s.pgid, s.comm_date, s.last_paid_inst_no, s.last_paid_date,
             s.policy_status, s.pay_mode_cd, s.maturity_date
        FROM ins_p_summery s, ins_product p
       WHERE s.product_cd = p.product_cd
         AND s.policy_status NOT IN ('02', '04', '10')
         AND s.maturity_date <= TRUNC (SYSDATE)
         AND (   (  (s.last_paid_inst_no * s.term)
                  / NVL (s.policy_installment, 1) < NVL (p.paidup_age, 2)
                 )
              OR (      (s.last_paid_inst_no * s.term)
                      / NVL (s.policy_installment, 1) >= NVL (p.paidup_age, 2)
                  AND s.option_cd IN ('1', '2')
                  AND fun_check_anf_loan (s.pgid, s.maturity_date) = '0'
                  AND s.last_paid_inst_no < s.policy_installment
                 )
             )
         AND s.pay_mode_cd <> '05';

   CURSOR cur_maturity_paidup
   IS
      SELECT s.pgid, s.comm_date, s.last_paid_inst_no, s.last_paid_date,
             s.policy_status, s.pay_mode_cd, s.maturity_date
        FROM ins_p_summery s, ins_product p
       WHERE s.product_cd = p.product_cd
         AND s.policy_status NOT IN ('02', '04', '03')
         AND s.maturity_date <= TRUNC (SYSDATE)
         AND NOT EXISTS (
                SELECT 1
                  FROM clm_claim_payable_gen g
                 WHERE g.pgid = s.pgid
                   AND g.clm_cause_cd IN ('02', '06')
                   AND g.clm_detl_cd = '01')
         AND (   s.option_cd = '3'
              OR (    s.option_cd = '1'
                  AND fun_check_anf_loan (s.pgid, s.maturity_date) = '1'
                  AND (  s.last_paid_inst_no
                       + DECODE (s.pay_mode_cd,
                                 '01', 1,
                                 '02', 2,
                                 '03', 4,
                                 '04', 12,
                                 0
                                )
                      ) < s.policy_installment
                 )
             )
         AND s.option_cd <> '2'
         AND s.last_paid_inst_no < s.policy_installment
         AND (s.last_paid_inst_no * s.term) / NVL (s.policy_installment, 1) >=
                                                         NVL (p.paidup_age, 2);

   CURSOR cur_maturity_inforce
   IS
      SELECT s.pgid, s.comm_date, s.last_paid_inst_no, s.last_paid_date,
             s.policy_status, s.pay_mode_cd, s.maturity_date
        FROM ins_p_summery s, ins_product p
       WHERE s.product_cd = p.product_cd
         AND s.policy_status NOT IN ('02', '04', '08')
         AND s.maturity_date <= TRUNC (SYSDATE)
         AND NOT EXISTS (
                SELECT 1
                  FROM clm_claim_payable_gen g
                 WHERE g.pgid = s.pgid
                   AND g.clm_cause_cd IN ('02', '06')
                   AND g.clm_detl_cd = '01')
         AND (   (    s.pay_mode_cd <> '05'
                  AND (   (    s.option_cd = '3'
                           AND s.last_paid_inst_no = s.policy_installment
                          )
                       OR (    s.option_cd = '1'
                           AND fun_check_anf_loan (s.pgid, s.maturity_date) =
                                                                           '1'
                           AND (  s.last_paid_inst_no
                                + DECODE (s.pay_mode_cd,
                                          '01', 1,
                                          '02', 2,
                                          '03', 4,
                                          '04', 12,
                                          0
                                         )
                               ) >= s.policy_installment
                          )
                       OR (    s.option_cd = '2'
                           AND fun_check_anf_loan (s.pgid, s.maturity_date) =
                                                                           '1'
                          )
                      )
                 )
              OR (s.pay_mode_cd = '05' AND maturity_date <= TRUNC (SYSDATE))
             )
         AND (   (    s.pay_mode_cd <> '05'
                  AND   (s.last_paid_inst_no * s.term)
                      / NVL (s.policy_installment, 1) > NVL (p.paidup_age, 2)
                 )
              OR (s.pay_mode_cd = '05' AND 1 = 1)
             );

   CURSOR cur_paidup_earn
   IS
      SELECT s.pgid, s.comm_date, s.last_paid_inst_no, s.last_paid_date,
             s.policy_status, s.pay_mode_cd,
             ADD_MONTHS (s.comm_date, p.paidup_age * 12) paidup_dt
        FROM ins_p_summery s, ins_product p
       WHERE s.product_cd = p.product_cd
         AND NVL (s.paid_up_status, 0) = 0
         AND s.policy_status IN ('01', '03', '07', '08', '09')
         AND NVL (s.active_status, '1') = '1'
         AND NVL (paid_up_status, '0') = '0'
         AND NVL (s.policy_installment, 0) > 0
         AND (   (    (s.last_paid_inst_no * s.term) / s.policy_installment >=
                                                         NVL (p.paidup_age, 2)
                  AND p.policy_tp_cd != '10'
                 )
              OR (    p.policy_tp_cd = '10'
                  AND (TRUNC (SYSDATE) - s.comm_date) / 365 >=
                                                         NVL (p.paidup_age, 2)
                 )
             );
BEGIN
   SELECT NVL (MAX (execution_no), 0) + 1
     INTO v_execution_no
     FROM ins_sch_process_log;

   INSERT INTO ins_sch_process_log
               (execution_no, process_name, job_name, process_start_time,
                process_end_time, remarks
               )
        VALUES (v_execution_no, 'pro_change_policy_status', '', SYSDATE,
                NULL, 'Change Policy Status'
               );

   COMMIT;
   v_error_place := 'Lapse';

   FOR i IN cur_lapse
   LOOP
      v_pgid := i.pgid;

      UPDATE ins_p_summery
         SET policy_status = '00',
             policy_status_dt = TRUNC (SYSDATE)
       WHERE pgid = i.pgid;

      v_cnt := v_cnt + 1;
      COMMIT;
   END LOOP;

   v_remarks := 'Lapse: ' || v_cnt || ', ';
   v_cnt := 0;
   v_error_place := 'Paidup';

   FOR i IN cur_paidup
   LOOP
      v_pgid := i.pgid;

      SELECT total_yearly_premium, last_paid_date
        INTO v_yearly_prem, v_last_paid_date
        FROM ins_p_summery
       WHERE pgid = i.pgid;

      pro_pol_surrender_value
                            (p_pgid                      => i.pgid,
                             p_surrender_date            => TRUNC (SYSDATE),
                             p_no_anf_loan               => 0,
                             p_interest_rate             => 0,
                             p_bonus_amt                 => 0,
                             p_surrender_value           => v_surrender_value,
                             p_surr_val_without_bon      => v_surr_val_without_bon,
                             p_payble_bonus              => v_payble_bonus,
                             p_surr_val_with_stage       => v_surr_val_with_stage,
                             p_message                   => v_message,
                             p_error                     => v_error,
                             p_surrender_factor          => v_surrender_factor,
                             p_paidup_factor             => v_paidup_factor,
                             p_bonus_factor              => v_bonus_factor,
                             p_commutation_factor        => v_commutation_factor
                            );

      SELECT FLOOR (  MONTHS_BETWEEN (TRUNC (SYSDATE), i.last_paid_date)
                    / DECODE (i.pay_mode_cd,
                              '01', 12,
                              '02', 6,
                              '03', 3,
                              '04', 1,
                              NULL
                             )
                   ) noof_inst
        INTO v_noof_inst
        FROM DUAL;

      SELECT ROUND (  v_noof_inst
                    / DECODE (i.pay_mode_cd,
                              '01', 1,
                              '02', 2,
                              '03', 4,
                              '04', 12,
                              NULL
                             ),
                    2
                   )
        INTO v_prem_due_year
        FROM DUAL;

      IF (   (    i.option_cd = '1'
              AND v_surr_val_without_bon >= i.total_yearly_premium
              AND ADD_MONTHS (i.last_paid_date, 12) < TRUNC (SYSDATE)
             )
          OR (    i.option_cd = '2'
              AND v_surr_val_without_bon < (v_yearly_prem * v_prem_due_year)
             )
          OR i.option_cd = '3'
         )
      THEN
         IF     FLOOR (MONTHS_BETWEEN (TRUNC (SYSDATE), v_last_paid_date)
                       / 12) > 5
            AND i.option_cd = '2'
         THEN
            UPDATE ins_p_summery
               SET policy_status = DECODE (i.option_cd, '2', '10', '01'),
                   policy_status_dt = TRUNC (SYSDATE)
             WHERE pgid = i.pgid;
         ELSE
            UPDATE ins_p_summery
               SET policy_status = DECODE (i.option_cd, '2', '00', '01'),
                   policy_status_dt = TRUNC (SYSDATE)
             WHERE pgid = i.pgid;
         END IF;

         v_cnt := v_cnt + 1;
         COMMIT;
      END IF;
   END LOOP;

   v_remarks := v_remarks || ' Paidup: ' || v_cnt || ', ';
   v_cnt := 0;
   v_error_place := 'Inforce';

   FOR i IN cur_inforce
   LOOP
      v_pgid := i.pgid;

      IF i.option_cd = '2'
      THEN
         SELECT total_yearly_premium
           INTO v_yearly_prem
           FROM ins_p_summery
          WHERE pgid = i.pgid;

         pro_pol_surrender_value
                            (p_pgid                      => i.pgid,
                             p_surrender_date            => TRUNC (SYSDATE),
                             p_no_anf_loan               => 0,
                             p_interest_rate             => 0,
                             p_bonus_amt                 => 0,
                             p_surrender_value           => v_surrender_value,
                             p_surr_val_without_bon      => v_surr_val_without_bon,
                             p_payble_bonus              => v_payble_bonus,
                             p_surr_val_with_stage       => v_surr_val_with_stage,
                             p_message                   => v_message,
                             p_error                     => v_error,
                             p_surrender_factor          => v_surrender_factor,
                             p_paidup_factor             => v_paidup_factor,
                             p_bonus_factor              => v_bonus_factor,
                             p_commutation_factor        => v_commutation_factor
                            );

         SELECT FLOOR (  MONTHS_BETWEEN (TRUNC (SYSDATE), i.last_paid_date)
                       / DECODE (i.pay_mode_cd,
                                 '01', 12,
                                 '02', 6,
                                 '03', 3,
                                 '04', 1,
                                 NULL
                                )
                      ) noof_inst
           INTO v_noof_inst
           FROM DUAL;

         SELECT ROUND (  v_noof_inst
                       / DECODE (i.pay_mode_cd,
                                 '01', 1,
                                 '02', 2,
                                 '03', 4,
                                 '04', 12,
                                 NULL
                                ),
                       2
                      )
           INTO v_prem_due_year
           FROM DUAL;

         IF v_surr_val_without_bon >= (v_yearly_prem * v_prem_due_year)
         THEN
            UPDATE ins_p_summery
               SET policy_status = '09',
                   policy_status_dt = TRUNC (SYSDATE)
             WHERE pgid = i.pgid;

            v_cnt := v_cnt + 1;
            COMMIT;
         END IF;
      ELSE
         UPDATE ins_p_summery
            SET policy_status = '09',
                policy_status_dt = TRUNC (SYSDATE)
          WHERE pgid = i.pgid;

         v_cnt := v_cnt + 1;
         COMMIT;
      END IF;
   END LOOP;

   v_remarks := v_remarks || ' Inforce: ' || v_cnt || ', ';
   v_cnt := 0;
   v_error_place := 'Earn Paidup Value Flag';

   FOR i IN cur_paidup_earn
   LOOP
      UPDATE ins_p_summery
         SET paid_up_status = '1',
             paid_up_dt = i.paidup_dt
       WHERE pgid = i.pgid;

      v_cnt := v_cnt + 1;
      COMMIT;
   END LOOP;

   v_remarks := v_remarks || ' Earn Paidup Value: ' || v_cnt || ', ';
   v_cnt := 0;
   v_error_place := 'Matured with paidup';

   FOR i IN cur_maturity_paidup
   LOOP
      UPDATE ins_p_summery
         SET policy_status = '03',
             policy_status_dt = TRUNC (SYSDATE)
       WHERE pgid = i.pgid;

      v_cnt := v_cnt + 1;
      COMMIT;
   END LOOP;

   v_remarks := v_remarks || ' Matured with paidup: ' || v_cnt || ', ';
   v_cnt := 0;
   v_error_place := 'Matured with inforce';

   FOR i IN cur_maturity_inforce
   LOOP
      UPDATE ins_p_summery
         SET policy_status = '08',
             policy_status_dt = TRUNC (SYSDATE)
       WHERE pgid = i.pgid;

      v_cnt := v_cnt + 1;
      COMMIT;
   END LOOP;

   v_remarks := v_remarks || ' Matured with inforce: ' || v_cnt || ', ';
   v_cnt := 0;
   v_error_place := 'Forfitted';

   FOR i IN cur_forfited
   LOOP
      UPDATE ins_p_summery
         SET policy_status = '10',
             policy_status_dt = TRUNC (SYSDATE)
       WHERE pgid = i.pgid;

      v_cnt := v_cnt + 1;
      COMMIT;
   END LOOP;

   v_remarks := v_remarks || ' Forfitted: ' || v_cnt;
   v_cnt := 0;
   v_error_place := 'Update Log Table';

   UPDATE ins_sch_process_log
      SET process_end_time = SYSDATE,
          remarks =
             'Policy status sucessfully change to ' || v_remarks
             || ' record(s)'
    WHERE execution_no = v_execution_no;

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      v_error := SQLERRM;

      UPDATE ins_sch_process_log
         SET process_end_time = SYSDATE,
             remarks =
                   'Execution terminated for the error : '
                || v_error
                || ' at '
                || v_error_place
       WHERE execution_no = v_execution_no;

      COMMIT;
END pro_change_policy_status;
/


--
-- PRO_COLL_LED  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_coll_led wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
45b2 c90
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
3DU=
/


--
-- PRO_COMM_DED_AMT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_comm_ded_amt (
   p_emp_type_cd     IN     VARCHAR2,
   p_pgid            IN     ins_p_summery.pgid%TYPE,
   p_comm_bon_year   IN     NUMBER,
   p_payable_amount  IN     NUMBER,
   p_ded_rate           OUT NUMBER,
   p_ded_amt            OUT NUMBER,
   p_error              OUT VARCHAR2
)
IS
   v_pay_mode_cd     VARCHAR2 (2);
   v_sys_config_st   NUMBER (1);
   v_upd_message     VARCHAR2 (200);
BEGIN
   pro_get_sys_config_st (p_pgid            => NULL,
                          p_config_id       => 44,
                          p_sys_config_st   => v_sys_config_st,
                          p_upd_message     => v_upd_message);

   IF v_sys_config_st = 1
   THEN
      IF p_emp_type_cd = '05'
      THEN
         SELECT   s.pay_mode_cd
           INTO   v_pay_mode_cd
           FROM   ins_p_summery s
          WHERE   s.pgid = p_pgid;

         IF v_pay_mode_cd = '05'
         THEN
            p_ded_amt := 0;
            p_ded_rate := 0;
         ELSE
            SELECT   s.deduction_rate,
                     ROUND ( (p_payable_amount * s.deduction_rate) / 100)
              INTO   p_ded_rate, p_ded_amt
              FROM   com_ded_rate_setup s
             WHERE   s.emp_type_cd = p_emp_type_cd
                     AND p_comm_bon_year BETWEEN s.ded_appl_year_from
                                             AND  s.ded_appl_year_to;
         END IF;
      ELSE
         SELECT   s.pay_mode_cd
           INTO   v_pay_mode_cd
           FROM   ins_p_summery s
          WHERE   s.pgid = p_pgid;

         IF v_pay_mode_cd = '05'
         THEN
            p_ded_amt := 0;
            p_ded_rate := 0;
         ELSE
            SELECT   s.deduction_rate,
                     ROUND ( (p_payable_amount * s.deduction_rate) / 100)
              INTO   p_ded_rate, p_ded_amt
              FROM   com_ded_rate_setup s
             WHERE   s.emp_type_cd = p_emp_type_cd
                     AND p_comm_bon_year BETWEEN s.ded_appl_year_from
                                             AND  s.ded_appl_year_to;
         END IF;
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      p_ded_amt := 0;
      p_ded_rate := 0;
      p_error := SQLERRM;
END;
/


--
-- PRO_COMM_PAID_DED_AMT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_comm_paid_ded_amt (
   p_emp_type_cd        IN     VARCHAR2,
   p_fa_id              IN     VARCHAR2,
   p_pgid               IN     VARCHAR2,
   p_prem_due_date      IN     DATE,
   p_int_calc_date      IN     DATE,
   p_fa_paid_ded_amt       OUT NUMBER,
   p_fa_paid_int_rate      OUT NUMBER,
   p_fa_paid_int_amt       OUT NUMBER,
   p_um_paid_ded_amt       OUT NUMBER,
   p_um_paid_int_rate      OUT NUMBER,
   p_um_paid_int_amt       OUT NUMBER,
   p_bm_paid_ded_amt       OUT NUMBER,
   p_bm_paid_int_rate      OUT NUMBER,
   p_bm_paid_int_amt       OUT NUMBER,
   p_error                 OUT VARCHAR2
)
IS
   v_interest_rate          NUMBER (5, 2);
   v_deduction_amount       NUMBER (12, 2);
   v_interest_amt           NUMBER (12, 2);
   v_sec_year_last_due_dt   DATE;
   v_pay_mode_cd            VARCHAR2 (2);

   v_sys_config_st          NUMBER (1);
   v_upd_message            VARCHAR2 (200);

   v_dev_emp_gid            NUMBER;
   v_ctrl_emp_gid           NUMBER;
   v_dev_emp_emp_type_cd    VARCHAR2 (2);
   v_ctrl_emp_type_cd       VARCHAR2 (2);
BEGIN
   pro_get_sys_config_st (p_pgid            => NULL,
                          p_config_id       => 44,
                          p_sys_config_st   => v_sys_config_st,
                          p_upd_message     => v_upd_message);

   IF v_sys_config_st = 1
   THEN
      SELECT   s.pay_mode_cd,
               DECODE (s.pay_mode_cd,
                       '01', ADD_MONTHS (s.comm_date, 12),
                       '02', ADD_MONTHS (s.comm_date, 6 * 3),
                       '03', ADD_MONTHS (s.comm_date, 3 * 7),
                       '04', ADD_MONTHS (s.comm_date, 1 * 23),
                       NULL)
                  sec_year_last_due_dt
        INTO   v_pay_mode_cd, v_sec_year_last_due_dt
        FROM   ins_p_summery s
       WHERE   s.pgid = p_pgid;

      IF v_pay_mode_cd = '05'
      THEN
         p_fa_paid_ded_amt := 0;
         p_fa_paid_int_rate := 0;
         p_fa_paid_int_amt := 0;
      ELSE
         IF p_emp_type_cd = '05'
         THEN
            IF TO_CHAR (v_sec_year_last_due_dt, 'RRRRMM') =
                  TO_CHAR (p_prem_due_date, 'RRRRMM')
            THEN
               SELECT   s.interest_rate
                 INTO   v_interest_rate
                 FROM   com_ded_rate_setup s
                WHERE   s.emp_type_cd = p_emp_type_cd;

               SELECT   SUM (deduction_amount),
                        ROUND(SUM( (deduction_amount
                                    * (v_interest_rate / (365 * 100)))
                                  * (p_int_calc_date - comm_ded_date)))
                           interest_amt
                 INTO   v_deduction_amount, v_interest_amt
                 FROM   com_agent_com_ded
                WHERE       pgid = p_pgid
                        AND agent_id = p_fa_id
                        AND bill_no IS NULL;

               p_fa_paid_ded_amt := v_deduction_amount;
               p_fa_paid_int_rate := v_interest_rate;
               p_fa_paid_int_amt := v_interest_amt;

               ----um
               SELECT   dev_emp_gid
                 INTO   v_dev_emp_gid
                 FROM   hrm_agent
                WHERE   agent_id = p_fa_id;

               SELECT   emp_type_cd
                 INTO   v_dev_emp_emp_type_cd
                 FROM   hrm_employee
                WHERE   emp_gid = v_dev_emp_gid;

               IF v_dev_emp_emp_type_cd = '06'
               THEN
                  SELECT   s.interest_rate
                    INTO   v_interest_rate
                    FROM   com_ded_rate_setup s
                   WHERE   s.emp_type_cd = '06';

                  SELECT   SUM (deduction_amount),
                           ROUND(SUM( (deduction_amount
                                       * (v_interest_rate / (365 * 100)))
                                     * (p_int_calc_date - comm_ded_date)))
                              interest_amt
                    INTO   v_deduction_amount, v_interest_amt
                    FROM   com_dev_emp_comm_ded
                   WHERE       pgid = p_pgid
                           AND emp_gid = v_dev_emp_gid
                           AND bill_no IS NULL;

                  p_um_paid_ded_amt := v_deduction_amount;
                  p_um_paid_int_rate := v_interest_rate;
                  p_um_paid_int_amt := v_interest_amt;

                  SELECT   e.emp_type_cd, s.h_employee_gid
                    INTO   v_ctrl_emp_type_cd, v_ctrl_emp_gid
                    FROM   hrm_employee e, hrm_employee_setup s
                   WHERE   s.employee_gid = v_dev_emp_gid
                           AND e.emp_gid = s.h_employee_gid;

                  ----bm
                  IF v_ctrl_emp_type_cd = '07'
                  THEN
                     SELECT   s.interest_rate
                       INTO   v_interest_rate
                       FROM   com_ded_rate_setup s
                      WHERE   s.emp_type_cd = '07';

                     SELECT   SUM (deduction_amount),
                              ROUND(SUM( (deduction_amount
                                          * (v_interest_rate / (365 * 100)))
                                        * (p_int_calc_date - comm_ded_date)))
                                 interest_amt
                       INTO   v_deduction_amount, v_interest_amt
                       FROM   com_dev_emp_comm_ded
                      WHERE       pgid = p_pgid
                              AND emp_gid = v_ctrl_emp_gid
                              AND bill_no IS NULL;

                     p_bm_paid_ded_amt := v_deduction_amount;
                     p_bm_paid_int_rate := v_interest_rate;
                     p_bm_paid_int_amt := v_interest_amt;
                  END IF;
               ELSIF v_dev_emp_emp_type_cd = '07'
               THEN
                  ----bm
                  SELECT   s.interest_rate
                    INTO   v_interest_rate
                    FROM   com_ded_rate_setup s
                   WHERE   s.emp_type_cd = '07';


                  SELECT   SUM (deduction_amount),
                           ROUND(SUM( (deduction_amount
                                       * (v_interest_rate / (365 * 100)))
                                     * (p_int_calc_date - comm_ded_date)))
                              interest_amt
                    INTO   v_deduction_amount, v_interest_amt
                    FROM   com_dev_emp_comm_ded
                   WHERE       pgid = p_pgid
                           AND emp_gid = v_dev_emp_gid
                           AND bill_no IS NULL;

                  p_bm_paid_ded_amt := v_deduction_amount;
                  p_bm_paid_int_rate := v_interest_rate;
                  p_bm_paid_int_amt := v_interest_amt;
               END IF;
            ELSE
               p_fa_paid_ded_amt := 0;
               p_fa_paid_int_rate := 0;
               p_fa_paid_int_amt := 0;
            END IF;
         ELSE
            IF TO_CHAR (v_sec_year_last_due_dt, 'RRRRMM') =
                  TO_CHAR (p_prem_due_date, 'RRRRMM')
            THEN
               SELECT   s.interest_rate
                 INTO   v_interest_rate
                 FROM   com_ded_rate_setup s
                WHERE   s.emp_type_cd = p_emp_type_cd;


               SELECT   SUM (deduction_amount),
                        ROUND(SUM( (deduction_amount
                                    * (v_interest_rate / (365 * 100)))
                                  * (p_int_calc_date - comm_ded_date)))
                           interest_amt
                 INTO   v_deduction_amount, v_interest_amt
                 FROM   com_dev_emp_comm_ded
                WHERE   pgid = p_pgid AND bill_no IS NULL;

               /*select   sum (deduction_amount)
                 into   v_deduction_amount
                 from   com_dev_emp_comm_ded
                where   pgid = p_pgid and bill_no is null;*/

               p_fa_paid_ded_amt := v_deduction_amount;
               p_fa_paid_int_rate := v_interest_rate;
               p_fa_paid_int_amt := v_interest_amt;
            --round ( (v_deduction_amount * v_interest_rate) / 100, 2);
            ELSE
               p_fa_paid_ded_amt := 0;
               p_fa_paid_int_rate := 0;
               p_fa_paid_int_amt := 0;
            END IF;
         END IF;
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      p_fa_paid_ded_amt := 0;
      p_fa_paid_int_rate := 0;
      p_fa_paid_int_amt := 0;
      
      p_um_paid_ded_amt := 0;
      p_um_paid_int_rate := 0;
      p_um_paid_int_amt := 0;
      
      p_bm_paid_ded_amt := 0;
      p_bm_paid_int_rate := 0;
      p_bm_paid_int_amt := 0;
      
      p_error := SQLERRM;
END;
/


--
-- PRO_DAILY_PREM_COLL_ADJ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_daily_prem_coll_adj (
   P_USER                 IN     VARCHAR2,
   P_OFFICE_CD            IN     VARCHAR2,
   P_AGENT_ID             IN     VARCHAR2,
   P_PGID                 IN     INS_P_PROPOSAL.PGID%TYPE,
   P_INS_TP_CD            IN     INS_INSURANCE_TYPE.INS_TP_CD%TYPE,
   P_COLL_DT_FROM         IN     DATE,
   P_COLL_DT_TO           IN     DATE,
   P_ADJUSTMENT_DATE      IN     DATE,
   P_FYSCAL_YR_FR         IN     DATE,
   P_FYSCAL_YR_TO         IN     DATE,
   P_DESCENDANT_FLAG      IN     VARCHAR2,
   P_OBJECT_CD            IN     VARCHAR2,
   P_VALID_RECORD_COUNT      OUT NUMBER,
   P_ERROR                   OUT VARCHAR2
)
IS
   MONEY_IN_HAND       ACC_RECEIVABLES.TOT_PREMIUM_AMT%TYPE;
   V_EXP_OFFICE        HRM_OFFICE.OFFICE_CD%TYPE;
   V_VOUCHER_SHNM      ACC_VOUCHER_TYPE.VOUCH_SH_NM%TYPE;
   V_YRLY_NO_INST      INS_PAY_MODE.YRLY_NO_INST%TYPE;
   V_LATE_FEE          ACC_RECEIVABLES.LATE_FEE%TYPE;
   V_ADJUST_STATUS     VARCHAR2 (1);
   V_PAIDUP_ST         VARCHAR2 (1);
   V_COUNT             NUMBER (2);

   V_LAST_INST         VARCHAR2 (1);

   V_VOUCHER_ERRM      VARCHAR2 (200);

   V_ADJUST            NUMBER (5);
   EXP_VOUCHER_CREATION EXCEPTION;

   EXP_COMM_CALC EXCEPTION;


   V_PREV_FY_OPEN_ST   NUMBER (1) := 1;
   V_COLL_FY_OPEN_ST   NUMBER (1) := 0;

   V_COLL_ADJ_DT       DATE;
   V_PREM_TYPE         VARCHAR2 (1);
   V_RENEWAL_PREM_ST   NUMBER (1) := 0;
   V_NEXT_DUE_DATE     DATE;


   V_STATEMENT         VARCHAR2 (100);
   V_SEQUENCE_NM       VARCHAR2 (100);
   V_OR_SL_NO          NUMBER (6) := 0;
   V_OR_NUMBER         VARCHAR2 (12) := NULL;
   V_CONFIG_COUNT      NUMBER (1) := 0;
BEGIN
   SELECT   COUNT (1)
     INTO   V_PREV_FY_OPEN_ST
     FROM   ACC_FISCAL_YEAR
    WHERE   FY_CLOSE = 0 AND FY_ST_DT < P_FYSCAL_YR_FR;

   FOR I
   IN (  SELECT   A.RECEIVE_ID,
                  A.RECEIVE_DATE,
                  A.PGID,
                  A.COLL_AMOUNT,
                  A.DUE_DT_FROM,
                  A.DUE_DT_TO,
                  A.INSTALLMENT_NO_FROM,
                  A.INSTALLMENT_NO_TO,
                  ABS (NVL (A.LATE_FEE, 0) - NVL (A.LATEFEE_WAIVER, 0))
                     LATE_FEE,
                  A.ACTIVE_OFFICE_CD OFFICE_CODE,
                  A.RECEIVE_MODE,
                  A.VOUCH_REF,
                  A.INTEROFFICE_VOUCHER,
                  A.STATUS,
                  A.TOT_PREMIUM_AMT,
                  S.COMM_DATE,
                  S.AGENT_ID,
                  S.PRODUCT_CD,
                  S.TERM,
                  S.PAY_MODE_CD,
                  S.SUSPENSE_AMT,
                  P.PAIDUP_AGE PAIDUPAGE,
                  S.INS_TP_CD
           FROM   ACC_RECEIVABLES A, INS_P_SUMMERY S, INS_PRODUCT P
          WHERE       A.STATUS = '0'
                  AND A.I_USR <> 'SLICL'
                  AND A.PGID = S.PGID
                  AND S.AGENT_ID = NVL (P_AGENT_ID, S.AGENT_ID)
                  AND S.PRODUCT_CD = P.PRODUCT_CD
                  AND A.REC_STATUS = '1'
                  AND NVL (A.RETURN_ST, '0') = '0'
                  AND A.PGID = NVL (P_PGID, A.PGID)
                  AND S.PGID = NVL (P_PGID, S.PGID)
                  AND S.INS_TP_CD = NVL (P_INS_TP_CD, S.INS_TP_CD)
                  AND (A.RECEIPT_STATUS = '1'
                       OR (A.RECEIPT_STATUS = '0'
                           AND A.TOT_PREMIUM_AMT
                              + ABS(NVL (A.LATE_FEE, 0)
                                    - NVL (A.LATEFEE_WAIVER, 0)) <=
                                 A.COLL_AMOUNT))
                  AND ( (NVL (P_DESCENDANT_FLAG, '0') = '0'
                         AND A.ACTIVE_OFFICE_CD =
                               NVL (P_OFFICE_CD, A.ACTIVE_OFFICE_CD))
                       OR (NVL (P_DESCENDANT_FLAG, '0') = '1'
                           AND A.ACTIVE_OFFICE_CD IN
                                    (    SELECT   OFFICE_CD
                                           FROM   HRM_OFFICE_SETUP
                                     START WITH   OFFICE_CD = P_OFFICE_CD
                                     CONNECT BY   PRIOR OFFICE_CD =
                                                     CONTROL_OFFICE_CD)))
                  AND NVL (A.COLL_CHECK_STATUS, '0') =
                        DECODE (A.MODE_TP, '1', '0', '1')
                  AND (NVL (A.COLL_AMOUNT, 0) = 0
                       OR (NVL (A.COLL_AMOUNT, 0) > 0
                           AND EXISTS
                                 (SELECT   1
                                    FROM   ACC_BANK_TRAN_MST M,
                                           ACC_BANK_TRAN_DTL D
                                   WHERE       M.COLL_PURPOSE = '2'
                                           AND D.PGID = A.PGID
                                           AND D.RECEIVE_ID = A.RECEIVE_ID
                                           AND NVL (D.DEPOSIT_ST, '0') = '1'
                                           AND M.TRAN_ID = D.TRAN_ID)))
                  AND (NVL (A.COM_CALCULATED, 'N') = 'N'
                       OR (A.COLL_FROM = '5'
                           AND NVL (A.COM_CALCULATED, 'N') = 'Y'))
                  AND NVL (A.ADV_STATUS, '0') = '0'
                  AND NVL (A.CHEQUE_DEPOSIT, 'N') =
                        DECODE (A.RECEIVE_MODE,
                                '1', NVL (A.CHEQUE_DEPOSIT, 'N'),
                                '6', NVL (A.CHEQUE_DEPOSIT, 'N'),
                                '5', NVL (A.CHEQUE_DEPOSIT, 'N'),
                                '7', NVL (A.CHEQUE_DEPOSIT, 'N'),
                                'Y')
                  AND A.RECEIVE_DATE BETWEEN P_COLL_DT_FROM AND P_COLL_DT_TO
                  AND A.RECEIVE_DATE <=
                        TO_DATE (P_ADJUSTMENT_DATE, 'dd/mm/rrrr')
                  AND ( (V_PREV_FY_OPEN_ST = 0
                         AND A.RECEIVE_DATE <=
                               TO_DATE (P_FYSCAL_YR_TO, 'dd/mm/rrrr'))
                       OR (V_PREV_FY_OPEN_ST >= 1
                           AND A.RECEIVE_DATE BETWEEN TO_DATE (P_FYSCAL_YR_FR,
                                                               'dd/mm/rrrr')
                                                  AND  TO_DATE (P_FYSCAL_YR_TO,
                                                                'dd/mm/rrrr')))
                  AND due_dt_to <= TRUNC (SYSDATE)
       ORDER BY   A.PGID, A.RECEIVE_ID)
   LOOP
      V_RENEWAL_PREM_ST := 1;

      SELECT   COUNT (1)
        INTO   V_COUNT
        FROM   INS_PREM_ACC_RECEIVABLE
       WHERE       PGID = I.PGID
               AND PROPOSER_PK != I.RECEIVE_ID
               AND PAY_STATUS = 0
               AND PROPOSED_STATUS = '7'
               AND INSTALLMENT_NO < I.INSTALLMENT_NO_FROM
               AND next_due_dt <= TRUNC (SYSDATE); --AND next_due_dt <= TRUNC (SYSDATE)



      IF V_COUNT = 0 OR V_RENEWAL_PREM_ST = 1
      THEN
         MONEY_IN_HAND := 0;
         MONEY_IN_HAND := (I.COLL_AMOUNT - I.LATE_FEE);
         V_LATE_FEE := I.LATE_FEE;

         FOR I2
         IN (  SELECT   A.INSTALLMENT_PREMIUM,
                        A.PGID,
                        A.INSTALLMENT_NO,
                        A.PAY_STATUS,
                        A.NEXT_DUE_DT,
                        A.SL_NO DEMAND_SL,
                        A.TOTAL_INSTALLMENT,
                        NULL LOAN_SL,
                        NULL LOAN_SL_MST
                 FROM   INS_PREM_ACC_RECEIVABLE A
                WHERE       A.PROPOSER_PK = I.RECEIVE_ID
                        AND A.PROPOSED_STATUS = '7'
                        AND A.PAY_STATUS = 0
                        AND next_due_dt <= TRUNC (SYSDATE) --AND next_due_dt <= TRUNC (SYSDATE)
             ORDER BY   A.INSTALLMENT_NO)
         LOOP
            SELECT   YRLY_NO_INST
              INTO   V_YRLY_NO_INST
              FROM   INS_PAY_MODE
             WHERE   PAY_MODE_CD = I.PAY_MODE_CD;

            IF V_YRLY_NO_INST * I.PAIDUPAGE <= I2.INSTALLMENT_NO
            THEN
               V_PAIDUP_ST := 'Y';
            ELSE
               V_PAIDUP_ST := 'N';
            END IF;



            IF I2.INSTALLMENT_NO = I2.TOTAL_INSTALLMENT
            THEN
               V_LAST_INST := 'Y';
            ELSIF I2.INSTALLMENT_NO <> I2.TOTAL_INSTALLMENT
            THEN
               V_LAST_INST := 'N';
            END IF;



            BEGIN
               V_PREM_TYPE := NULL;

               SELECT   (CASE
                            WHEN I.PAY_MODE_CD = '01'
                                 AND I2.INSTALLMENT_NO = 1
                            THEN
                               '0'
                            WHEN I.PAY_MODE_CD = '01'
                                 AND I2.INSTALLMENT_NO >= 2
                            THEN
                               '2'
                            WHEN I.PAY_MODE_CD = '02'
                                 AND I2.INSTALLMENT_NO = 1
                            THEN
                               '0'
                            WHEN I.PAY_MODE_CD = '02'
                                 AND I2.INSTALLMENT_NO = 2
                            THEN
                               '1'
                            WHEN I.PAY_MODE_CD = '02'
                                 AND I2.INSTALLMENT_NO >= 3
                            THEN
                               '2'
                            WHEN I.PAY_MODE_CD = '03'
                                 AND I2.INSTALLMENT_NO = 1
                            THEN
                               '0'
                            WHEN I.PAY_MODE_CD = '03'
                                 AND I2.INSTALLMENT_NO <= 4
                            THEN
                               '1'
                            WHEN I.PAY_MODE_CD = '03'
                                 AND I2.INSTALLMENT_NO >= 5
                            THEN
                               '2'
                            WHEN I.PAY_MODE_CD = '04'
                                 AND I2.INSTALLMENT_NO = 1
                            THEN
                               '0'
                            WHEN I.PAY_MODE_CD = '04'
                                 AND I2.INSTALLMENT_NO <= 12
                            THEN
                               '1'
                            WHEN I.PAY_MODE_CD = '04'
                                 AND I2.INSTALLMENT_NO >= 13
                            THEN
                               '2'
                            WHEN I.PAY_MODE_CD = '05'
                                 AND I2.INSTALLMENT_NO = 1
                            THEN
                               '0'
                            ELSE
                               NULL
                         END)
                           PREM_TYPE
                 INTO   V_PREM_TYPE
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            PRO_FIND_ADJ_DATE (P_PGID              => I.PGID,
                               P_PREM_TYPE         => V_PREM_TYPE,
                               P_RECEIVE_ID        => I.RECEIVE_ID,
                               P_ADV_FLAG          => '0',
                               P_COLL_DUE_DT       => NULL,
                               P_ADJ_TYPE          => '0',
                               P_ADJUSTMENT_DATE   => V_COLL_ADJ_DT);



            DECLARE
               RECPREM          PKG_GL_VOUCHER.T_TRANS_TAB;
               V_ERROR          VARCHAR2 (200);
               V_OBJECT_CD      GEN_OBJECT_INFO.OBJECT_CD%TYPE;
               V_VOUCHER_CD     ACC_VOUCHER_TYPE.VOUCH_CD%TYPE;
               V_INTER_OFF_ST   CHAR (1);
               V_OFFICE_CD      HRM_OFFICE.OFFICE_CD%TYPE;
               V_TRANS_ID       ACC_GL_TRANS_MST.TRANS_ID%TYPE;

               V_COST_CENTER    HRM_OFFICE.OFFICE_CD%TYPE;
               V_NARRATION      VARCHAR2 (200);
               V_USER           VARCHAR2 (20);
               V_CHQ_TP         VARCHAR2 (3);
               V_CHQ_NO         VARCHAR2 (50);
               V_CHQ_DT         DATE;
               V_VOUCHER_NO     VARCHAR2 (15);
               V_SUS_AMT_USED   NUMBER (1);
            BEGIN
               V_OBJECT_CD := P_OBJECT_CD;

               V_VOUCHER_CD := '05';
               V_INTER_OFF_ST := '0';
               V_OFFICE_CD := FUN_FIND_REGIONAL_OFF (I.OFFICE_CODE);
               V_COST_CENTER := I.OFFICE_CODE;
               V_TRANS_ID := I.RECEIVE_ID;



               V_NARRATION :=
                     'Premium adjusted to income for policy no: '
                  || FUN_INS_PGID_TO_POLICY_NO (I.PGID)
                  || ' for '
                  || I2.NEXT_DUE_DT
                  || ' at '
                  || V_COLL_ADJ_DT;
               V_USER := P_USER;


               IF V_PREM_TYPE = 2
               THEN
                  IF I.INS_TP_CD = 1
                  THEN
                     RECPREM (1).TRANS_ITEM_CD := 158;
                  ELSE
                     RECPREM (1).TRANS_ITEM_CD := 159;
                  END IF;
               ELSE
                  IF I.INS_TP_CD = 1
                  THEN
                     RECPREM (1).TRANS_ITEM_CD := 3;
                  ELSE
                     RECPREM (1).TRANS_ITEM_CD := 103;
                  END IF;
               END IF;

               RECPREM (1).POST_AMOUNT := I2.INSTALLMENT_PREMIUM;
               RECPREM (1).CHQ_TP := NULL;
               RECPREM (1).CHQ_NO := NULL;
               RECPREM (1).CHQ_DT := NULL;


               IF I.INS_TP_CD = 1
               THEN
                  RECPREM (2).TRANS_ITEM_CD := 97;
               ELSE
                  RECPREM (2).TRANS_ITEM_CD := 102;
               END IF;

               RECPREM (2).POST_AMOUNT := I2.INSTALLMENT_PREMIUM;
               RECPREM (2).CHQ_TP := NULL;
               RECPREM (2).CHQ_NO := NULL;
               RECPREM (2).CHQ_DT := NULL;


               IF MONEY_IN_HAND >= I2.INSTALLMENT_PREMIUM
                  OR (MONEY_IN_HAND + I.SUSPENSE_AMT) >=
                       I2.INSTALLMENT_PREMIUM
               THEN
                  IF MONEY_IN_HAND >= I2.INSTALLMENT_PREMIUM
                  THEN
                     V_SUS_AMT_USED := 0;
                  ELSE
                     V_SUS_AMT_USED := 1;
                  END IF;

                  PKG_GL_VOUCHER.PRO_VOUCHER_POSTING (
                     P_TABLE          => RECPREM,
                     P_OBJECT_CD      => V_OBJECT_CD,
                     P_VOUCH_CD       => V_VOUCHER_CD,
                     P_INTER_OFF_ST   => V_INTER_OFF_ST,
                     P_OFFICE_CD      => V_OFFICE_CD,
                     P_TRANS_ID       => V_TRANS_ID,
                     P_TRANS_DATE     => V_COLL_ADJ_DT,
                     P_COST_CENTER    => V_COST_CENTER,
                     P_NARRATION      => V_NARRATION,
                     P_USER           => V_USER,
                     P_INS_TP_CD      => I.INS_TP_CD,
                     P_VOUCHER_NO     => V_VOUCHER_NO,
                     P_ERROR          => V_ERROR
                  );

                  IF V_ERROR IS NOT NULL
                  THEN
                     V_VOUCHER_ERRM := V_ERROR;
                     P_ERROR := V_VOUCHER_ERRM;
                     V_ADJUST_STATUS := 'N';
                     EXIT;
                  ELSE
                     SELECT   COUNT (1)
                       INTO   V_CONFIG_COUNT
                       FROM   INS_SYSTEM_CONFIG
                      WHERE   CONFIG_ID = 25 AND STATUS = '1';

                     IF V_CONFIG_COUNT > 0
                     THEN
                        BEGIN
                           SELECT   OBJECT_NAME
                             INTO   V_SEQUENCE_NM
                             FROM   DBA_OBJECTS
                            WHERE   OBJECT_TYPE = 'SEQUENCE'
                                    AND OBJECT_NAME LIKE
                                             'ACC_OR'
                                          || '_'
                                          || TO_CHAR (SYSDATE, 'RRRR');

                           V_STATEMENT :=
                                 'select '
                              || V_SEQUENCE_NM
                              || '.NEXTVAL from dual';

                           EXECUTE IMMEDIATE V_STATEMENT INTO   V_OR_SL_NO;

                           V_OR_NUMBER :=
                              LPAD (V_OR_SL_NO, 6, '0')
                              || TO_CHAR (SYSDATE, 'RRRR');
                        EXCEPTION
                           WHEN NO_DATA_FOUND
                           THEN
                              P_ERROR :=
                                 'OR:Sequence Not found for'
                                 || TO_CHAR (SYSDATE, 'RRRR');
                              V_ADJUST_STATUS := 'N';
                              EXIT;
                           WHEN OTHERS
                           THEN
                              P_ERROR := SQLERRM;
                              V_ADJUST_STATUS := 'N';
                              EXIT;
                        END;
                     ELSE
                        V_OR_NUMBER := NULL;
                     END IF;



                     UPDATE   INS_PREM_ACC_RECEIVABLE X
                        SET   X.PAID_AMOUNT = I2.INSTALLMENT_PREMIUM,
                              X.BALANCE = 0,
                              X.PAYMENT_DATE = V_COLL_ADJ_DT,
                              X.PAY_STATUS = DECODE (V_SUS_AMT_USED, 0, 1, 4),
                              X.PROPOSED_STATUS =
                                 DECODE (V_SUS_AMT_USED, 0, '1', '4'),
                              X.REF_VOUCHER = V_VOUCHER_NO,
                              U_USR = V_USER,
                              U_DT = SYSDATE,
                              OR_NUMBER = V_OR_NUMBER
                      WHERE   X.PGID = I.PGID
                              AND X.INSTALLMENT_NO = I2.INSTALLMENT_NO;

                     SELECT   ADD_MONTHS (
                                 I2.NEXT_DUE_DT,
                                 DECODE (I.PAY_MODE_CD,
                                         '01', 12,
                                         '02', 6,
                                         '03', 3,
                                         1)
                              )
                       INTO   V_NEXT_DUE_DATE
                       FROM   DUAL;

                     IF TO_NUMBER (
                           TO_CHAR (LAST_DAY (V_NEXT_DUE_DATE), 'DD')
                        ) >= TO_NUMBER (TO_CHAR (I.COMM_DATE, 'DD'))
                     THEN
                        SELECT   TO_DATE(TO_CHAR (I.COMM_DATE, 'DD') || '-'
                                         || TO_CHAR (V_NEXT_DUE_DATE,
                                                     'MON-RRRR'))
                          INTO   V_NEXT_DUE_DATE
                          FROM   INS_P_SUMMERY P
                         WHERE   P.PGID = I.PGID;
                     ELSE
                        V_NEXT_DUE_DATE := LAST_DAY (V_NEXT_DUE_DATE);
                     END IF;


                     UPDATE   INS_P_SUMMERY P
                        SET   P.LAST_ADJUSTMENT_DT = V_COLL_ADJ_DT,
                              P.LAST_PAID_DATE = I2.NEXT_DUE_DT,
                              P.PAID_UP_DT =
                                 DECODE (V_PAIDUP_ST,
                                         'Y', I2.NEXT_DUE_DT,
                                         NULL),
                              P.PAID_UP_STATUS =
                                 DECODE (V_PAIDUP_ST, 'Y', 1, NULL),
                              P.LAST_PAID_INST_NO = I2.INSTALLMENT_NO,
                              P.NEXT_DUE_DATE = V_NEXT_DUE_DATE,
                              P.NEXT_DUE_INST_NO = I2.INSTALLMENT_NO + 1,
                              P.POLICY_STATUS_DT = V_COLL_ADJ_DT,
                              P.SUSPENSE_AMT =
                                 DECODE (
                                    V_SUS_AMT_USED,
                                    1,
                                    (P.SUSPENSE_AMT
                                     - ABS(I2.INSTALLMENT_PREMIUM
                                           - MONEY_IN_HAND)),
                                    P.SUSPENSE_AMT
                                 ),
                              P.PROCESS_USER = P_USER,
                              P.PROCESS_DATE = P_ADJUSTMENT_DATE,
                              U_USR = V_USER,
                              U_DT = SYSDATE
                      WHERE   P.PGID = I.PGID
                              AND P.LAST_PAID_DATE <= I2.NEXT_DUE_DT;


                     V_VOUCHER_ERRM := 'Success';
                     V_ADJUST_STATUS := 'Y';

                     IF MONEY_IN_HAND >= I2.INSTALLMENT_PREMIUM
                     THEN
                        MONEY_IN_HAND :=
                           MONEY_IN_HAND - I2.INSTALLMENT_PREMIUM;
                     ELSE
                        MONEY_IN_HAND := 0;
                     END IF;
                  END IF;
               ELSIF (MONEY_IN_HAND + I.SUSPENSE_AMT) < I2.INSTALLMENT_PREMIUM
               THEN
                  V_ADJUST_STATUS := 'N';
                  EXIT;
               END IF;
            END;
         END LOOP;

         IF V_ADJUST_STATUS = 'Y'
         THEN
            P_ERROR := 'v_voucher_errm-' || V_VOUCHER_ERRM;


            UPDATE   ACC_RECEIVABLES
               SET   STATUS = '1',
                     U_USR = P_USER,
                     U_DT = SYSDATE,
                     COM_CALCULATED = DECODE (COLL_FROM, '5', 'Y', 'N'),
                     ADJUSTED_BY = P_USER,
                     ADJUSTMENT_DATE = V_COLL_ADJ_DT
             WHERE   RECEIVE_ID = I.RECEIVE_ID;

            P_VALID_RECORD_COUNT := NVL (P_VALID_RECORD_COUNT, 0) + 1;

            IF MONEY_IN_HAND > 0 AND I.PGID IS NOT NULL
            THEN
               UPDATE   INS_P_SUMMERY
                  SET   SUSPENSE_AMT = SUSPENSE_AMT + MONEY_IN_HAND,
                        PROCESS_USER = P_USER,
                        PROCESS_DATE = P_ADJUSTMENT_DATE,
                        U_USR = P_USER,
                        U_DT = SYSDATE
                WHERE   PGID = I.PGID;
            END IF;

            COMMIT;
         ELSE
            ROLLBACK;
         END IF;
      ELSE
         NULL;
      END IF;
   END LOOP;
EXCEPTION
   WHEN EXP_VOUCHER_CREATION
   THEN
      P_ERROR := V_VOUCHER_ERRM;
      ROLLBACK;
   WHEN NO_DATA_FOUND
   THEN
      P_ERROR := 'ERROR: Data not found for adjustment process.';
      ROLLBACK;
   WHEN OTHERS
   THEN
      P_ERROR := 'ERROR: Other error ' || SQLERRM;
      ROLLBACK;
END PRO_DAILY_PREM_COLL_ADJ;
/


--
-- PRO_DEV_EMP_PREM_COMM  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_dev_emp_prem_comm (
   p_fy_start_dt         IN       DATE,
   p_fy_end_dt           IN       DATE,
   p_office_cd           IN       VARCHAR2,
   p_descendant_off      IN       VARCHAR2,
   p_emp_type            IN       VARCHAR2,
   p_descendant_emp      IN       VARCHAR2,
   p_emp_gid             IN       NUMBER,
   p_earning_type        IN       VARCHAR2,
   p_year_month          IN       NUMBER,
   p_com_cal_dt_to       IN       DATE,
   p_com_yr_dependency   IN       VARCHAR2,
   p_user                IN       VARCHAR2,
   p_object_cd           IN       VARCHAR2,
   p_ins_tp_cd           IN       ins_insurance_type.ins_tp_cd%TYPE,
   p_prev_year_comm_st   IN       NUMBER,
   p_record_count        OUT      NUMBER,
   p_error               OUT      VARCHAR2
)
IS
   /******************************************************************************
      NAME:       pro_daily_prem_calc_commission
      PURPOSE:    Development Employee Commission and Bonus Calculation.

      REVISIONS:
      Ver        Date          Author                  Description
      ---------  ----------    ---------------         ---------------------------
      1.0        08/03/2012    Syed Md. Musha          1. Created this procedure.
      1.2        14/02/2013      Md. Sayadur Rahaman     1. Modification for accounts integration
   ******************************************************************************/
   --v_yrly_no_inst ins_pay_mode.yrly_no_inst%TYPE;
   --v_comm_errm    VARCHAR2(200);
   v_regional_off          hrm_office.office_cd%TYPE;
   v_payable_off           hrm_office.office_cd%TYPE;
   -- for commisiion process error message
   exp_renewal_inc         EXCEPTION;
   -- for renewal income required exception
   exp_prem_depo_gl        EXCEPTION;
   -- for premium deposit suspense required exception
   exp_voucher_creation    EXCEPTION;
   -- for voucher creation exeption
   exp_comm_calc           EXCEPTION;
   -- for commission calculation exception
   exp_late_fee_gl         EXCEPTION;
   -- for late fee gl exception

   ---------------
   v_comm_no               com_dev_emp_comm.comm_no%TYPE;
   v_payable_amt           NUMBER (12, 2)                              := 0;
   v_tot_comm_amt          NUMBER (12, 2)                              := 0;
   v_comm_amt              NUMBER (12, 2)                              := 0;
   v_prev_comm_amt         NUMBER (12, 2)                              := 0;
   v_pram_amount           NUMBER (12, 2)                              := 0;
   v_prev_paid_comm_amt    NUMBER (12, 2)                              := 0;
   v_payable_pct           NUMBER (6, 3)                               := 0;
   v_payable_vr_no         acc_gl_trans_mst.vouch_no%TYPE;
   v_payable_vr_dt         DATE;
   v_tot_coll_prem         NUMBER (12, 2)                              := 0;
   v_earn_cnt              NUMBER (2)                                  := 0;
   v_total_payable_amt     NUMBER (12, 2)                              := 0;
   v_total_1st_comm_amt    NUMBER (12, 2)                              := 0;
   v_total_ren_comm_amt    NUMBER (12, 2)                              := 0;
   v_total_bonus_amt       NUMBER (12, 2)                              := 0;
   v_total_pbc_amt         NUMBER (12, 2)                              := 0;
   ---------
   --v_ins_tp_cd           ins_insurance_type.ins_tp_cd%TYPE;
   v_trans_item_comm_pay   acc_gl_trans_item_info.trans_item_cd%TYPE;
   v_trans_item_comm       acc_gl_trans_item_info.trans_item_cd%TYPE;
   v_acc_error             VARCHAR2 (2000);
   v_emp_type_cd           hrm_emp_type.emp_type_cd%TYPE;
   v_month_start_dt        DATE;
   v_month_end_dt          DATE;
   v_month_setup_error     VARCHAR2 (200);
   v_dev_emp_gid           hrm_employee.emp_gid%TYPE;
   v_tot_coll_prem_rate    NUMBER (12, 2)                              := 0;
                                                       ---Musha on 22.09.2016
   v_incharge_st           VARCHAR2 (2);
   v_coll_prem             NUMBER (12, 2)                              := 0;
                                                       ---Musha on 23.08.2017
   v_dtl_gross_payable_amt NUMBER (12, 2)                              := 0;
   v_dtl_tax_ded_amt       NUMBER (12, 2)                              := 0;
   --------------------------
    v_sys_config_st       NUMBER(1);
    v_upd_message         VARCHAR2(200);
    
    --------------
   v_ded_rate         NUMBER (5, 2);
   v_ded_amt          NUMBER (12, 2);
   v_ded_error        VARCHAR2 (200);

   v_paid_ded_amt     NUMBER (12, 2);
   v_paid_int_rate    NUMBER (5, 2);
   v_paid_int_amt     NUMBER (12, 2);
   v_paid_ded_error   VARCHAR2 (200);
   v_tot_ded_amount          NUMBER (12, 2);
   v_tot_paid_ded_amount     NUMBER (12, 2);
   v_tot_paid_interest_amt   NUMBER (12, 2);
   v_ic_voucher_no           VARCHAR2 (15);
   v_ic_vr_error             VARCHAR2 (200);
   v_ic_onestop_sysconf_st   NUMBER (1);
   v_ic_onestop_message      VARCHAR2 (200);
   v_onestop_ded             NUMBER (1);
   v_comm_date               DATE;
   v_active_office_cd        VARCHAR2 (15);
   v_ded_flag                NUMBER (1) := 1;

   /*select all active development employee for the given office*/
   CURSOR cur_dev_emp
   IS
      SELECT TO_CHAR (e.emp_gid) employee_gid,
             TO_CHAR (s.h_employee_gid) h_employee_gid, e.office_cd,
             e.service_cd, e.emp_type_cd,
             f_off_catg_cd (e.office_cd) off_cat_cd
        FROM hrm_employee e, hrm_employee_setup s
       WHERE e.employment_tp_cd = '02'
         AND e.activity_cd = '01'
         --AND e.employment_st_cd = '00'  --Musha on 01-04-2015 temporary
         AND e.emp_type_cd = p_emp_type
         AND e.emp_gid = NVL (p_emp_gid, e.emp_gid)
         AND e.emp_gid = s.employee_gid(+)
         AND fun_comm_bill_payable_stat (p_emp_type,
                                         NULL,
                                         NVL (p_emp_gid, e.emp_gid),
                                         p_com_cal_dt_to
                                        ) = '1'
         AND (   (    NVL (p_descendant_off, '0') = '0'
                  AND e.office_cd = NVL (p_office_cd, e.office_cd)
                 )
              OR (    NVL (p_descendant_off, '0') = '1'
                  AND e.office_cd IN (
                                  SELECT     office_cd
                                        FROM hrm_office_setup
                                  START WITH office_cd = p_office_cd
                                  CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                 )
             );

   CURSOR cur_earning (
      p_emp_type_cd   hrm_emp_type.emp_type_cd%TYPE,
      p_service_cd    hrm_service_stat.service_cd%TYPE,
      /*p_term          ins_p_summery.term%TYPE,
       p_product_cd    ins_product.product_cd%TYPE,
      p_prem_yr       NUMBER,*/
      p_dev_emp_gid   hrm_employee.emp_gid%TYPE,
      p_off_cat_cd    hrm_office.off_catg_cd%TYPE,
      p_incharge_st   VARCHAR2
   /*,
   p_amount        NUMBER*/
   )
   IS
      SELECT DISTINCT h.earning_cd, h.earning_type, h.paid_yr_from,
                      h.paid_yr_to, h.cal_based_on             --,m.service_cd
                                                  ,
                      m.setup_option, m.calc_on,
                      NVL (m.amount_depnt, 0) amount_depnt,
                      NVL (m.term_depnt, 0) term_depnt,
                      NVL (m.persistency_depnt, 0) persistency_depnt,
                      d.persistency_rate_frm, d.persistency_rate_to,
                      (d.payable_pct / 100) payable_pct,
                      h.chain_gap_emp_tp_cd, d.term_from, d.term_to
                 FROM com_earning_head h,
                      com_dev_earning_setup_mst m,
                      com_dev_earning_setup_dtl d
                WHERE h.status = '1'
                  AND h.earning_type = NVL (p_earning_type, h.earning_type)
                  AND NVL (m.amount_depnt, '0') = '0'
                  --AND    nvl(m.term_depnt, '0') = '0'
                  /*AND (   NVL (m.persistency_depnt, 0) = '0'
                   OR (    NVL (m.persistency_depnt, 0) = '1'
                       AND fun_persistency_rate (p_emp_type_cd,
                                                 p_dev_emp_gid,
                                                 p_com_cal_dt_to
                                                ) BETWEEN d.persistency_rate_frm
                                                      AND d.persistency_rate_to
                      )
                  )*/
                  ---Musha on 09-04-2015 Temporary
                  AND h.earning_cd = m.earning_cd
                  AND m.setupmst_cd = d.setupmst_cd
                  AND m.emp_type_cd = p_emp_type_cd
                  ---Musha on 17.08.2017
                  AND (m.off_catg_cd IS NULL OR m.off_catg_cd = p_off_cat_cd
                      )
                  AND (   m.incharge_status IS NULL
                       OR m.incharge_status = p_incharge_st
                      )
      --AND m.service_cd = p_service_cd ---Musha 04-04-2015
      UNION
      SELECT DISTINCT h.earning_cd, h.earning_type, h.paid_yr_from,
                      h.paid_yr_to, h.cal_based_on             --,m.service_cd
                                                  ,
                      m.setup_option, m.calc_on,
                      NVL (m.amount_depnt, 0) amount_depnt,
                      NVL (m.term_depnt, 0) term_depnt,
                      NULL persistency_depnt, NULL persistency_rate_frm,
                      NULL persistency_rate_to, NULL payable_pct,
                      h.chain_gap_emp_tp_cd, d.term_from, d.term_to
                 FROM com_earning_head h,
                      com_dev_earning_setup_mst m,
                      com_dev_earning_setup_dtl d
                WHERE h.status = '1'
                  AND h.earning_type = NVL (p_earning_type, h.earning_type)
                  AND (NVL (m.amount_depnt, 0) =
                                          '1'
                                             --OR nvl(m.term_depnt, '0') = '1'
                      )
                  AND h.earning_cd = m.earning_cd
                  AND m.setupmst_cd = d.setupmst_cd
                  AND m.emp_type_cd = p_emp_type_cd
                  --AND p_prem_yr BETWEEN h.paid_yr_from AND h.paid_yr_to
                  --AND m.service_cd = p_service_cd   ---Musha 04-04-2015
                  ---Musha on 17.08.2017
                  AND (m.off_catg_cd IS NULL OR m.off_catg_cd = p_off_cat_cd
                      )
                  AND (   m.incharge_status IS NULL
                       OR m.incharge_status = p_incharge_st
                      );

   --This curosr contain agent commission list--
   CURSOR cur_agent_com (
      p_employee_gid   VARCHAR2,
      p_paid_yr_from   NUMBER,
      p_paid_yr_to     NUMBER,
      p_earning_cd     com_earning_head.earning_cd%TYPE,
      p_coll_date_from DATE,   --Add by Musha on 12.04.2021 
      p_coll_date_to   DATE
   )
   IS
      SELECT c.office_cd, c.pgid, c.com_exe_date, c.comm_bon_year,
             c.payable_amount, c.prem_due_dt, c.receive_date, c.agent_id
        FROM (SELECT   l.ins_tp_cd, l.office_cd, l.agent_id, l.pgid,
                       l.com_exe_date, l.comm_bon_year, l.prem_due_dt,
                       l.receive_date, SUM (l.payable_amount) payable_amount
                  FROM com_agent_com_detail l, com_earn_tp t
                 WHERE t.earning_type = 'C'
                   --AND l.ins_tp_cd =NVL(p_ins_tp_cd, l.ins_tp_cd)-----------MODIFIED BY PARAMA BISWAS ON 18/09/2016
                   AND l.ins_tp_cd = p_ins_tp_cd
                   AND l.earning_cd = t.earning_cd
                   AND NVL (l.bill_status, 0) = '1'
--Add by Musha on 24.08.2016: If FA bill completed then Employee's bill will be calculated
                   AND NVL (l.service_charge_st, '0') = '0'
                   ---------------------------------------
                   and not exists (select 1 from ins_p_summery s 
                                    where s.pgid = l.pgid
                                    and s.product_cd in ('09', '16', '39'))
                   ---------------------------------------
                   AND l.com_exe_date <= p_com_cal_dt_to
                   AND ((NVL(p_prev_year_comm_st, 0) = 0 AND
                           (l.com_exe_date BETWEEN p_fy_start_dt AND p_fy_end_dt)
                        )
                        OR
                        (NVL(p_prev_year_comm_st, 0) = 1 AND
                         (l.com_exe_date BETWEEN p_coll_date_from AND p_coll_date_to)
                        )
                       )  --Modify by Musha on 12.04.2021 
                   AND l.comm_bon_year BETWEEN p_paid_yr_from AND p_paid_yr_to
                   ---------------------------------------
                   AND NOT EXISTS (
                          SELECT 1
                            FROM com_dev_emp_comm d, com_earning_head h
                           WHERE                  --d.emp_gid = p_employee_gid
                                 (   d.emp_gid = p_employee_gid
                                  OR f_emp_type_cd (d.emp_gid) =
                                                f_emp_type_cd (p_employee_gid)
                                  OR (   d.earning_cd <> p_earning_cd
                                      OR f_emp_type_cd (d.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                     )
                                 )
                             AND d.pgid = l.pgid
                             AND d.prem_due_dt = l.prem_due_dt
                             AND h.earning_cd = p_earning_cd
                             AND (   d.earning_cd = p_earning_cd
                                  OR f_emp_type_cd (d.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                 ))               --Add by Musha on 20.03.2017
              /* (SELECT   1
                  FROM   com_dev_emp_comm d
                 WHERE          --d.emp_gid = p_employee_gid
                       ( d.emp_gid = p_employee_gid
                         OR f_emp_type_cd (d.emp_gid) =
                              f_emp_type_cd (p_employee_gid))
                         AND d.pgid = l.pgid
                         AND d.prem_due_dt = l.prem_due_dt
                         AND d.earning_cd = p_earning_cd)*/ --Block by Musha on 20.03.2017 and add the above
              GROUP BY l.ins_tp_cd,
                       l.office_cd,
                       l.agent_id,
                       l.pgid,
                       l.com_exe_date,
                       l.comm_bon_year,
                       l.prem_due_dt,
                       l.receive_date) c, hrm_agent ag                     --, com_earn_tp t
       WHERE
--c.ins_tp_cd =NVL(p_ins_tp_cd, c.ins_tp_cd)-----------MODIFIED BY PARAMA BISWAS ON 18/09/2016
             c.ins_tp_cd = p_ins_tp_cd
         --AND c.earning_cd = t.earning_cd
         AND c.agent_id = ag.agent_id
         AND c.com_exe_date <= p_com_cal_dt_to
         AND c.com_exe_date >=
              (SELECT NVL(MAX (ta.app_effective_dt), ag.join_dt)
                 FROM hrm_transfer_appl ta
                WHERE ta.agent_id = c.agent_id
                  AND ta.ctrl_emp_gid = p_employee_gid
                      )
         --AND c.com_exe_date BETWEEN p_fy_start_dt AND p_fy_end_dt
         AND ((NVL(p_prev_year_comm_st, 0) = 0 AND
                   (c.com_exe_date BETWEEN p_fy_start_dt AND p_fy_end_dt)
                )
                OR
                (NVL(p_prev_year_comm_st, 0) = 1 AND
                 (c.com_exe_date BETWEEN p_coll_date_from AND p_coll_date_to)
                )
               ) --Add by Musha on 12.04.2021 
         AND c.comm_bon_year BETWEEN p_paid_yr_from AND p_paid_yr_to
         AND NOT EXISTS (
                SELECT 1
                  FROM com_dev_emp_comm d
                 WHERE                            --d.emp_gid = p_employee_gid
                       (   d.emp_gid = p_employee_gid
                        OR f_emp_type_cd (d.emp_gid) =
                                                f_emp_type_cd (p_employee_gid)
                       )
                   AND d.pgid = c.pgid
                   AND d.prem_due_dt = c.prem_due_dt
                   AND d.earning_cd = p_earning_cd)
         AND (c.agent_id IN (
                 SELECT     TO_CHAR (m.employee_gid)
                       FROM (SELECT TO_CHAR (e.emp_gid) employee_gid,
                                    TO_CHAR (s.h_employee_gid) h_employee_gid,
                                    0 emp_tp
                               FROM hrm_employee e, hrm_employee_setup s
                              WHERE e.employment_tp_cd = '02'
                                AND e.emp_gid = s.employee_gid(+)
                             UNION ALL
                             SELECT g.agent_id, TO_CHAR (g.dev_emp_gid), 1
                               FROM hrm_agent g) m
                      WHERE m.emp_tp = 1
                 START WITH m.employee_gid = p_employee_gid
                 CONNECT BY PRIOR m.employee_gid = m.h_employee_gid)
             );
BEGIN
   FOR rec_emp IN cur_dev_emp
   LOOP
      v_comm_amt := 0;
      v_payable_amt := 0;
      v_tot_comm_amt := 0;
      v_pram_amount := 0;
      v_prev_comm_amt := 0;
      v_total_payable_amt := 0;
      v_total_1st_comm_amt := 0;
      v_total_ren_comm_amt := 0;
      v_total_bonus_amt := 0;
      v_total_pbc_amt := 0;

      SELECT COUNT (*)
        INTO v_incharge_st
        FROM hrm_off_incharge
       WHERE office_code = rec_emp.office_cd
         AND incharge_emp_gid = rec_emp.employee_gid;

      FOR rec_earn IN cur_earning (rec_emp.emp_type_cd,
                                   rec_emp.service_cd,
                                   /*rec_coll.term,
                                     rec_coll.product_cd,
                                     rec_instl.prem_yr,*/
                                   rec_emp.employee_gid,
                                   rec_emp.off_cat_cd,
                                   v_incharge_st
                                  )
      LOOP
         v_comm_amt := 0;
         v_payable_amt := 0;
         v_tot_comm_amt := 0;
         v_pram_amount := 0;
         v_prev_comm_amt := 0;
         v_prev_paid_comm_amt := 0;

         --cal_based_on: 1=Collected Premium, 2=Agent's Commission, 3=UM's Commission, 4=BM's Commission
         IF rec_earn.cal_based_on IN ('1', '6', '7', '8')           --- = '1'
         THEN
            --Collected Premium
            IF rec_earn.calc_on = 'M'
            THEN
               --Find office wise month open and close date--
               pro_off_months_setup (p_office_cd        => p_office_cd,
                                     p_year_month       => p_year_month,
                                     p_month_st_dt      => v_month_start_dt,
                                     p_month_ed_dt      => v_month_end_dt,
                                     p_error            => v_month_setup_error
                                    );

               IF v_month_start_dt IS NULL AND v_month_setup_error IS NULL
               THEN
                  v_month_start_dt :=
                                   TO_DATE (p_year_month || '01', 'RRRRMMDD');
                  v_month_end_dt := LAST_DAY (v_month_start_dt);
               END IF;

               IF NVL(p_prev_year_comm_st, 0) = 0 THEN
                  v_month_end_dt := p_com_cal_dt_to;
               END IF;

               --Toral collected premium on per month
               IF '1' = '1'
               ----p_com_cal_dt_to = v_month_end_dt --last_day(p_com_cal_dt_to)
               THEN
                  --Check for the month end
                  --Check for the earning already calculated or not--
                  /*SELECT COUNT(1)
                  INTO   v_earn_cnt
                  FROM   com_dev_emp_bonus_comm c
                  WHERE  c.emp_gid = rec_emp.employee_gid
                  AND    c.earning_cd = rec_earn.earning_cd
                  AND    c.com_calc_dt_to = p_com_cal_dt_to
                  AND    c.ins_tp_cd = p_ins_tp_cd
                  AND    decode(rec_earn.term_depnt, 1, 1, 0) = '0';*/
                  ----Musha on 15-02-2015
                  v_earn_cnt := 0;

                  IF v_earn_cnt = 0
                  THEN
                     --Not yet calculated for the employee
                     IF     rec_earn.amount_depnt = '1'
                        AND rec_earn.payable_pct IS NULL
                     THEN
                        BEGIN
--Find total collected premium for the months--
---------------------------------------------------
                           IF rec_earn.chain_gap_emp_tp_cd IS NULL
                           THEN
                              SELECT DECODE
                                        (rec_earn.cal_based_on,
                                         '1', NVL (SUM (s.installment_premium),
                                                   0
                                                  ),
                                         '6', NVL (SUM (s.life_premium), 0),
                                         '7', NVL
                                            (SUM
                                                (  s.life_premium
                                                 + NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                             0
                                            ),
                                         '8', NVL
                                            (SUM
                                                (  NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                             0
                                            ),
                                         0
                                        )
                                INTO v_tot_coll_prem
                                FROM com_dev_emp_comm c, ins_p_summery s
                               WHERE c.ins_tp_cd = p_ins_tp_cd
                                 --AND to_char(c.com_calc_dt_to, 'RRRRMM') =
                                 -- to_char(p_com_cal_dt_to, 'RRRRMM')
                                 AND c.com_calc_dt_to BETWEEN v_month_start_dt
                                                          AND v_month_end_dt
                                 --open by musha on 02.05.2016
                                 --AND c.com_calc_dt_to <= v_month_end_dt --close by musha on 02.05.2016
                                 AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                                     AND rec_earn.paid_yr_to
                                 --AND    s.product_cd NOT IN ('09', '16', '39') ---Musha on 16-03-2015
                                 AND c.bill_status = '1'
                                                        ---Musha on 19.10.2016
                                 AND (   (    rec_earn.setup_option = 'G'
                                          AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                         )
                                      OR (    rec_earn.setup_option = 'P'
                                          AND s.product_cd IN (
                                                 SELECT product_cd
                                                   FROM com_dev_earning_setup_mst
                                                  WHERE emp_type_cd =
                                                           rec_emp.emp_type_cd
                                                    AND service_cd =
                                                            rec_emp.service_cd
                                                    AND earning_cd =
                                                           rec_earn.earning_cd)
                                         )
                                     )
                                 AND (   (    c.prem_due_dt = s.comm_date
                                          AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                                 1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                         )
                                      OR c.prem_due_dt <> s.comm_date
                                     )
                                 ---Musha on 28-02-2016 0 means not come from prev policy
                                 AND c.emp_gid IN (
                                        SELECT emp_gid
                                          FROM (SELECT     e.emp_gid,
                                                           e.emp_type_cd
                                                      FROM hrm_employee e,
                                                           hrm_employee_setup s
                                                     WHERE e.employment_tp_cd =
                                                                          '02'
                                                       AND e.emp_gid = s.employee_gid(+)
                                                START WITH s.h_employee_gid =
                                                              rec_emp.employee_gid
                                                CONNECT BY PRIOR s.employee_gid =
                                                              s.h_employee_gid)
                                         WHERE emp_type_cd =
                                                  DECODE (rec_emp.emp_type_cd,
                                                          '08', '07',
                                                          '09', '07',
                                                          '10', '07',
                                                          
                                                          ---Musha on 26.07.2016 add 3 lines for 10, 11, 12
                                                          '11', '07',
                                                          '12', '07',
                                                          '13', '07',
                                                          '14', '07',
                                                          '15', '07',
                                                          '16', '07',
                                                          '17', '07',
                                                          '18', '07',
                                                          '19', '07',
                                                          '20', '07',
                                                          '06'
                                                         ))
                                 --AND s.term BETWEEN TO_CHAR (rec_earn.term_from)
                                 --               AND TO_CHAR (rec_earn.term_to)
                                 AND NOT EXISTS (
                                        SELECT 1
                                          FROM com_earning_head h
                                         WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                           AND h.earning_cd = c.earning_cd)
                                 AND NOT EXISTS (
                                        SELECT 1
                                          FROM com_dev_emp_bonus_comm_dtl d,
                                               com_dev_emp_bonus_comm f,
                                               com_earning_head h
                                         WHERE d.payable_no = f.payable_no
                                           AND h.earning_cd =
                                                           rec_earn.earning_cd
                                           AND (   f.earning_cd =
                                                           rec_earn.earning_cd
                                                OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                               )
                                           AND d.comm_no = c.comm_no
                                           AND (   f.emp_gid =
                                                          rec_emp.employee_gid
                                                OR f_emp_type_cd (f.emp_gid) =
                                                      f_emp_type_cd
                                                         (rec_emp.employee_gid)
                                                OR (   f.earning_cd <>
                                                           rec_earn.earning_cd
                                                    OR f_emp_type_cd
                                                                    (f.emp_gid) =
                                                          h.chain_gap_emp_tp_cd
                                                   )
                                               )) --Add by Musha on 21.03.2017
                                 /*(SELECT   1
                                    FROM   com_dev_emp_bonus_comm_dtl d,
                                           com_dev_emp_bonus_comm f
                                   WHERE   d.payable_no =
                                              f.payable_no
                                           AND rec_earn.earning_cd =
                                                 f.earning_cd
                                           AND d.comm_no = c.comm_no
                                           AND d.emp_gid =
                                                 rec_emp.employee_gid)*/ --Block by Musha on 21.03.2017
                                 AND c.pgid = s.pgid;

---------------------------------------------------
/* ---Disable by Musha on 11.08.2016 and the above code based on BM commission
SELECT SUM (installment_premium)
  INTO v_tot_coll_prem
  FROM (SELECT DECODE
                  (rec_earn.cal_based_on,
                   '1', SUM (s.installment_premium),
                   '6', SUM (s.life_premium),
                   '7', SUM
                      (  s.life_premium
                       + NVL (s.suppl_ben_premium,
                              0
                             )
                       + NVL
                            (s.suppl_product_premium,
                             0
                            )
                      ),
                   '8', SUM
                      (  NVL (s.suppl_ben_premium,
                              0
                             )
                       + NVL
                            (s.suppl_product_premium,
                             0
                            )
                      ),
                   0
                  ) installment_premium
          FROM acc_receivables r,
               ins_prem_acc_receivable p,
               ins_p_summery s
         WHERE r.status = '1'
           AND r.rec_status = '1'
           AND r.com_calculated = 'Y'
           AND s.ins_tp_cd = p_ins_tp_cd
           --AND    to_char(nvl(r.coll_slip_rec_dt, r.receive_date)
           --           ,'RRRRMM') = to_char(p_com_cal_dt_to, 'RRRRMM')
           AND NVL (r.coll_slip_rec_dt,
                    r.receive_date
                   ) BETWEEN v_month_start_dt
                         AND v_month_end_dt
           AND p.proposed_status IN ('1', '4')
           AND (s.agent_id IN (
                   SELECT     TO_CHAR
                                    (m.employee_gid)
                         FROM (SELECT TO_CHAR
                                         (e.emp_gid
                                         )
                                         employee_gid,
                                      TO_CHAR
                                         (s.h_employee_gid
                                         )
                                         h_employee_gid,
                                      0 emp_tp
                                 FROM hrm_employee e,
                                      hrm_employee_setup s
                                WHERE e.employment_tp_cd =
                                               '02'
                                  AND e.emp_gid =
                                                s.employee_gid(+)
                               UNION ALL
                               SELECT g.agent_id,
                                      TO_CHAR
                                         (g.dev_emp_gid
                                         ),
                                      1
                                 FROM hrm_agent g) m
                        WHERE m.emp_tp = 1
                   START WITH m.employee_gid =
                                 TO_CHAR
                                    (rec_emp.employee_gid
                                    )
                   CONNECT BY PRIOR m.employee_gid =
                                   m.h_employee_gid)
               )
           AND r.receive_id = p.proposer_pk
           AND r.pgid = s.pgid
           AND CEIL (  p.installment_no
                / (s.policy_installment / s.term)
               ) BETWEEN rec_earn.paid_yr_from
                     AND rec_earn.paid_yr_to
        UNION ALL
        SELECT DECODE
                  (rec_earn.cal_based_on,
                   '1', SUM (s.installment_premium),
                   '6', SUM (s.life_premium),
                   '7', SUM
                      (  s.life_premium
                       + NVL (s.suppl_ben_premium,
                              0
                             )
                       + NVL
                            (s.suppl_product_premium,
                             0
                            )
                      ),
                   '8', SUM
                      (  NVL (s.suppl_ben_premium,
                              0
                             )
                       + NVL
                            (s.suppl_product_premium,
                             0
                            )
                      ),
                   0
                  ) installment_premium
          FROM (SELECT   a.receive_id, a.pgid,
                         SUM
                            (a.coll_amount
                            ) coll_amount
                    FROM acc_advance_receivables a
                   WHERE a.rec_status = '1'
                     AND a.status = '1'
                     AND a.com_calculated = 'Y'
                     --AND    to_char(nvl(a.coll_slip_rec_dt, a.receive_date)
                     --    ,'RRRRMM') = to_char(p_com_cal_dt_to, 'RRRRMM')
                     AND NVL (a.coll_slip_rec_dt,
                              a.receive_date
                             )
                            BETWEEN v_month_start_dt
                                AND v_month_end_dt
                GROUP BY a.receive_id, a.pgid) r,
               ins_prem_acc_receivable p,
               ins_p_summery s
         WHERE p.proposed_status IN ('1', '4')
           AND s.ins_tp_cd = p_ins_tp_cd
           AND (s.agent_id IN (
                   SELECT     TO_CHAR
                                    (m.employee_gid)
                         FROM (SELECT TO_CHAR
                                         (e.emp_gid
                                         )
                                         employee_gid,
                                      TO_CHAR
                                         (s.h_employee_gid
                                         )
                                         h_employee_gid,
                                      0 emp_tp
                                 FROM hrm_employee e,
                                      hrm_employee_setup s
                                WHERE e.employment_tp_cd =
                                               '02'
                                  AND e.emp_gid =
                                                s.employee_gid(+)
                               UNION ALL
                               SELECT g.agent_id,
                                      TO_CHAR
                                         (g.dev_emp_gid
                                         ),
                                      1
                                 FROM hrm_agent g) m
                        WHERE m.emp_tp = 1
                   START WITH m.employee_gid =
                                 TO_CHAR
                                    (rec_emp.employee_gid
                                    )
                   CONNECT BY PRIOR m.employee_gid =
                                   m.h_employee_gid)
               )
           AND r.receive_id = p.fp_receive_id
           AND r.pgid = s.pgid
           AND CEIL (  p.installment_no
                / (s.policy_installment / s.term)
               ) BETWEEN rec_earn.paid_yr_from
                     AND rec_earn.paid_yr_to);*/

                              ---=================================---
/*Add this part by musha on 22.09.2016
  To find total collection amount (CLI + TLI) and
  then find the commission rate based on this amount
*/
                              SELECT DECODE
                                        (rec_earn.cal_based_on,
                                         '1', NVL (SUM (s.installment_premium),
                                                   0
                                                  ),
                                         '6', NVL (SUM (s.life_premium), 0),
                                         '7', NVL
                                            (SUM
                                                (  s.life_premium
                                                 + NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                             0
                                            ),
                                         '8', NVL
                                            (SUM
                                                (  NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                             0
                                            ),
                                         0
                                        )
                                INTO v_tot_coll_prem_rate
                                FROM com_dev_emp_comm c, ins_p_summery s
                               WHERE               --c.ins_tp_cd = p_ins_tp_cd
                                     --AND to_char(c.com_calc_dt_to, 'RRRRMM') =
                                     -- to_char(p_com_cal_dt_to, 'RRRRMM')
                                     --AND
                                     c.com_calc_dt_to BETWEEN v_month_start_dt
                                                          AND v_month_end_dt
                                 --open by musha on 02.05.2016
                                 --AND c.com_calc_dt_to <= v_month_end_dt --close by musha on 02.05.2016
                                 AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                                     AND rec_earn.paid_yr_to
                                 --AND    s.product_cd NOT IN ('09', '16', '39') ---Musha on 16-03-2015
                                 AND c.bill_status = '1'
                                                        ---Musha on 19.10.2016
                                 AND (   (    rec_earn.setup_option = 'G'
                                          AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                         )
                                      OR (    rec_earn.setup_option = 'P'
                                          AND s.product_cd IN (
                                                 SELECT product_cd
                                                   FROM com_dev_earning_setup_mst
                                                  WHERE emp_type_cd =
                                                           rec_emp.emp_type_cd
                                                    AND service_cd =
                                                            rec_emp.service_cd
                                                    AND earning_cd =
                                                           rec_earn.earning_cd)
                                         )
                                     )
                                 AND (   (    c.prem_due_dt = s.comm_date
                                          AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                                 1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                         )
                                      OR c.prem_due_dt <> s.comm_date
                                     )
                                 ---Musha on 28-02-2016 0 means not come from prev policy
                                 AND c.emp_gid IN (
                                        SELECT emp_gid
                                          FROM (SELECT     e.emp_gid,
                                                           e.emp_type_cd
                                                      FROM hrm_employee e,
                                                           hrm_employee_setup s
                                                     WHERE e.employment_tp_cd =
                                                                          '02'
                                                       AND e.emp_gid = s.employee_gid(+)
                                                START WITH s.h_employee_gid =
                                                              rec_emp.employee_gid
                                                CONNECT BY PRIOR s.employee_gid =
                                                              s.h_employee_gid)
                                         WHERE emp_type_cd =
                                                  DECODE (rec_emp.emp_type_cd,
                                                          '08', '07',
                                                          '09', '07',
                                                          '10', '07',
                                                          
                                                          ---Musha on 26.07.2016 add 3 lines for 10, 11, 12
                                                          '11', '07',
                                                          '12', '07',
                                                          '13', '07',
                                                          '14', '07',
                                                          '15', '07',
                                                          '16', '07',
                                                          '17', '07',
                                                          '18', '07',
                                                          '19', '07',
                                                          '20', '07',
                                                          '06'
                                                         ))
                                 --AND s.term BETWEEN TO_CHAR (rec_earn.term_from)
                                 --               AND TO_CHAR (rec_earn.term_to)
                                 AND NOT EXISTS (
                                        SELECT 1
                                          FROM com_earning_head h
                                         WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                           AND h.earning_cd = c.earning_cd)
                                 /*AND NOT EXISTS (
                                        SELECT 1
                                          FROM com_dev_emp_bonus_comm_dtl d
                                         WHERE d.comm_no = c.comm_no
                                           AND d.emp_gid = rec_emp.employee_gid)*/
                                 AND c.pgid = s.pgid;
                           -------*****************Musha on 23.08.20174 Start-------
                           ELSE
                              ------Add this by Musha on 23.08.2017; If chain gap required then find gap exists or not
                              v_tot_coll_prem_rate := 0;
                              v_tot_coll_prem := 0;

                              FOR k IN
                                 (SELECT e.emp_gid
                                    FROM hrm_employee e,
                                         hrm_employee_setup s
                                   WHERE e.employment_tp_cd = '02'
                                     AND e.emp_gid = s.employee_gid
                                     AND s.h_employee_gid =
                                                          rec_emp.employee_gid
                                     AND TO_NUMBER (e.emp_type_cd) <
                                            TO_NUMBER
                                                 (rec_earn.chain_gap_emp_tp_cd))
                              LOOP
                                 SELECT DECODE
                                           (rec_earn.cal_based_on,
                                            '1', NVL
                                                  (SUM (s.installment_premium),
                                                   0
                                                  ),
                                            '6', NVL (SUM (s.life_premium), 0),
                                            '7', NVL
                                               (SUM
                                                   (  s.life_premium
                                                    + NVL
                                                         (s.suppl_ben_premium,
                                                          0
                                                         )
                                                    + NVL
                                                         (s.suppl_product_premium,
                                                          0
                                                         )
                                                   ),
                                                0
                                               ),
                                            '8', NVL
                                               (SUM
                                                   (  NVL
                                                         (s.suppl_ben_premium,
                                                          0
                                                         )
                                                    + NVL
                                                         (s.suppl_product_premium,
                                                          0
                                                         )
                                                   ),
                                                0
                                               ),
                                            0
                                           )
                                   INTO v_coll_prem
                                   FROM com_dev_emp_comm c, ins_p_summery s
                                  WHERE c.com_calc_dt_to
                                           BETWEEN v_month_start_dt
                                               AND v_month_end_dt
                                    AND c.prem_year
                                           BETWEEN rec_earn.paid_yr_from
                                               AND rec_earn.paid_yr_to
                                    --AND s.INS_TP_CD = p_ins_tp_cd
                                    AND c.bill_status =
                                                     '1'
                                                        ---Musha on 19.10.2016
                                    AND (   (    rec_earn.setup_option = 'G'
                                             AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                            )
                                         OR (    rec_earn.setup_option = 'P'
                                             AND s.product_cd IN (
                                                    SELECT product_cd
                                                      FROM com_dev_earning_setup_mst
                                                     WHERE emp_type_cd =
                                                              rec_emp.emp_type_cd
                                                       AND service_cd =
                                                              rec_emp.service_cd
                                                       AND earning_cd =
                                                              rec_earn.earning_cd)
                                            )
                                        )
                                    AND (   (    c.prem_due_dt = s.comm_date
                                             AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                                    1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                            )
                                         OR c.prem_due_dt <> s.comm_date
                                        )
                                    AND c.emp_gid IN (
                                           SELECT emp_gid
                                             FROM (SELECT     e.emp_gid,
                                                              e.emp_type_cd
                                                         FROM hrm_employee e,
                                                              hrm_employee_setup s
                                                        WHERE e.employment_tp_cd =
                                                                          '02'
                                                          AND e.emp_gid = s.employee_gid(+)
                                                   START WITH s.employee_gid =
                                                                     k.emp_gid
                                                   CONNECT BY PRIOR s.employee_gid =
                                                                 s.h_employee_gid)
                                            WHERE emp_type_cd =
                                                     DECODE
                                                         (rec_emp.emp_type_cd,
                                                          '08', '07',
                                                          '09', '07',
                                                          '10', '07',
                                                          '11', '07',
                                                          '12', '07',
                                                          '13', '07',
                                                          '14', '07',
                                                          '15', '07',
                                                          '16', '07',
                                                          '17', '07',
                                                          '18', '07',
                                                          '19', '07',
                                                          '20', '07',
                                                          '06'
                                                         ))
                                    AND NOT EXISTS (
                                           SELECT 1
                                             FROM com_earning_head h
                                            WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                              AND h.earning_cd = c.earning_cd)
                                    AND c.pgid = s.pgid;

                                 v_tot_coll_prem_rate :=
                                      NVL (v_tot_coll_prem_rate, 0)
                                    + NVL (v_coll_prem, 0);
                              END LOOP;

---------------
                              FOR k IN
                                 (SELECT e.emp_gid
                                    FROM hrm_employee e, hrm_employee_setup s
                                   WHERE e.employment_tp_cd = '02'
                                     AND e.emp_gid = s.employee_gid
                                     AND s.h_employee_gid =
                                                          rec_emp.employee_gid
                                     AND TO_NUMBER (e.emp_type_cd) <
                                            TO_NUMBER
                                                 (rec_earn.chain_gap_emp_tp_cd)
                                     AND TO_NUMBER (e.emp_type_cd) <=
                                                        7
                                                         --Musha on 10.10.2017
                                                         )
                              LOOP
                                 SELECT DECODE
                                           (rec_earn.cal_based_on,
                                            '1', NVL
                                                  (SUM (s.installment_premium),
                                                   0
                                                  ),
                                            '6', NVL (SUM (s.life_premium), 0),
                                            '7', NVL
                                               (SUM
                                                   (  s.life_premium
                                                    + NVL
                                                         (s.suppl_ben_premium,
                                                          0
                                                         )
                                                    + NVL
                                                         (s.suppl_product_premium,
                                                          0
                                                         )
                                                   ),
                                                0
                                               ),
                                            '8', NVL
                                               (SUM
                                                   (  NVL
                                                         (s.suppl_ben_premium,
                                                          0
                                                         )
                                                    + NVL
                                                         (s.suppl_product_premium,
                                                          0
                                                         )
                                                   ),
                                                0
                                               ),
                                            0
                                           )
                                   INTO v_coll_prem
                                   FROM com_dev_emp_comm c, ins_p_summery s
                                  WHERE c.com_calc_dt_to
                                           BETWEEN v_month_start_dt
                                               AND v_month_end_dt
                                    AND c.prem_year
                                           BETWEEN rec_earn.paid_yr_from
                                               AND rec_earn.paid_yr_to
                                    AND s.ins_tp_cd = p_ins_tp_cd
                                    AND c.bill_status =
                                                     '1'
                                                        ---Musha on 19.10.2016
                                    AND (   (    rec_earn.setup_option = 'G'
                                             AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                            )
                                         OR (    rec_earn.setup_option = 'P'
                                             AND s.product_cd IN (
                                                    SELECT product_cd
                                                      FROM com_dev_earning_setup_mst
                                                     WHERE emp_type_cd =
                                                              rec_emp.emp_type_cd
                                                       AND service_cd =
                                                              rec_emp.service_cd
                                                       AND earning_cd =
                                                              rec_earn.earning_cd)
                                            )
                                        )
                                    AND (   (    c.prem_due_dt = s.comm_date
                                             AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                                    1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                            )
                                         OR c.prem_due_dt <> s.comm_date
                                        )
                                    AND c.emp_gid IN (
                                           SELECT emp_gid
                                             FROM (SELECT     e.emp_gid,
                                                              e.emp_type_cd
                                                         FROM hrm_employee e,
                                                              hrm_employee_setup s
                                                        WHERE e.employment_tp_cd =
                                                                          '02'
                                                          AND e.emp_gid = s.employee_gid(+)
                                                   START WITH s.employee_gid =
                                                                     k.emp_gid
                                                   CONNECT BY PRIOR s.employee_gid =
                                                                 s.h_employee_gid)
                                            WHERE emp_type_cd =
                                                     DECODE
                                                         (rec_emp.emp_type_cd,
                                                          '08', '07',
                                                          '09', '07',
                                                          '10', '07',
                                                          '11', '07',
                                                          '12', '07',
                                                          '13', '07',
                                                          '14', '07',
                                                          '15', '07',
                                                          '16', '07',
                                                          '17', '07',
                                                          '18', '07',
                                                          '19', '07',
                                                          '20', '07',
                                                          '06'
                                                         ))
                                    AND s.term
                                           BETWEEN TO_CHAR (rec_earn.term_from)
                                               AND TO_CHAR (rec_earn.term_to)
                                    AND NOT EXISTS (
                                           SELECT 1
                                             FROM com_earning_head h
                                            WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                              AND h.earning_cd = c.earning_cd)
                                    AND NOT EXISTS (
                                           SELECT 1
                                             FROM com_dev_emp_bonus_comm_dtl d,
                                                  com_dev_emp_bonus_comm f,
                                                  com_earning_head h
                                            WHERE d.payable_no = f.payable_no
                                              AND h.earning_cd =
                                                           rec_earn.earning_cd
                                              AND (   f.earning_cd =
                                                           rec_earn.earning_cd
                                                   OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                                  --OR (f.emp_gid = rec_emp.employee_gid AND d.comm_no = c.comm_no) --Musha on 09.10.2017
                                                  )
                                              AND d.comm_no = c.comm_no
                                              AND (   f.emp_gid =
                                                          rec_emp.employee_gid
                                                   OR f_emp_type_cd (f.emp_gid) =
                                                         f_emp_type_cd
                                                            (rec_emp.employee_gid
                                                            )
                                                   OR (   f.earning_cd <>
                                                             rec_earn.earning_cd
                                                       OR f_emp_type_cd
                                                                    (f.emp_gid) =
                                                             h.chain_gap_emp_tp_cd
                                                      )
                                                  ))
                                    AND c.pgid = s.pgid;

                                 v_tot_coll_prem :=
                                      NVL (v_tot_coll_prem, 0)
                                    + NVL (v_coll_prem, 0);
                              END LOOP;
                           END IF;

                           -------*****************Musha on 23.08.2017 End-------

                           ---=================================---
                           SELECT (d.payable_pct / 100)
                             INTO v_payable_pct
                             FROM com_earning_head h,
                                  com_dev_earning_setup_mst m,
                                  com_dev_earning_setup_dtl d
                            WHERE h.status = '1'
                              AND NVL (m.amount_depnt, 0) = '1'
                              AND m.earning_cd = rec_earn.earning_cd
                              AND h.earning_type = rec_earn.earning_type
                              AND h.earning_cd = m.earning_cd
                              AND m.setupmst_cd = d.setupmst_cd
                              AND m.emp_type_cd = rec_emp.emp_type_cd
                              AND rec_earn.paid_yr_from = h.paid_yr_from
                              AND rec_earn.paid_yr_to = h.paid_yr_to
                              AND m.service_cd = rec_emp.service_cd
                              AND NVL (m.product_cd, '00') =
                                                      NVL (m.product_cd, '00')
                              AND v_tot_coll_prem_rate BETWEEN d.amount_from
                                                           AND d.amount_to
          --Musha on 22.09.2016 change v_tot_coll_prem to v_tot_coll_prem_rate
                              ----Musha on 23.08.2017 below condition
                              AND NVL (d.term_from, 0) = rec_earn.term_from
                              AND NVL (d.term_to, 99) = rec_earn.term_to;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_pct := 0;
                        END;

                        v_payable_amt :=
                                 ROUND ((v_tot_coll_prem * v_payable_pct), 2);
                     ELSIF rec_earn.term_depnt = '1'
                     THEN
                        SELECT DECODE
                                    (rec_earn.cal_based_on,
                                     '1', NVL (SUM (s.installment_premium), 0),
                                     '6', NVL (SUM (s.life_premium), 0),
                                     '7', NVL
                                          (SUM (  s.life_premium
                                                + NVL (s.suppl_ben_premium, 0)
                                                + NVL
                                                     (s.suppl_product_premium,
                                                      0
                                                     )
                                               ),
                                           0
                                          ),
                                     '8', NVL
                                          (SUM (  NVL (s.suppl_ben_premium, 0)
                                                + NVL
                                                     (s.suppl_product_premium,
                                                      0
                                                     )
                                               ),
                                           0
                                          ),
                                     0
                                    )
                          INTO v_tot_coll_prem
                          FROM com_dev_emp_comm c, ins_p_summery s
                         WHERE c.ins_tp_cd = p_ins_tp_cd
                           --AND to_char(c.com_calc_dt_to, 'RRRRMM') =
                           -- to_char(p_com_cal_dt_to, 'RRRRMM')
                           AND c.com_calc_dt_to BETWEEN v_month_start_dt
                                                    AND v_month_end_dt
                           --open by musha on 02.05.2016
                           --AND c.com_calc_dt_to <= v_month_end_dt --close by musha on 02.05.2016
                           AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                               AND rec_earn.paid_yr_to
                           --AND    s.product_cd NOT IN ('09', '16', '39') ---Musha on 16-03-2015
                           AND c.bill_status = '1'      ---Musha on 19.10.2016
                           AND (   (    rec_earn.setup_option = 'G'
                                    AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                   )
                                OR (    rec_earn.setup_option = 'P'
                                    AND s.product_cd IN (
                                           SELECT product_cd
                                             FROM com_dev_earning_setup_mst
                                            WHERE emp_type_cd =
                                                           rec_emp.emp_type_cd
                                              AND service_cd =
                                                            rec_emp.service_cd
                                              AND earning_cd =
                                                           rec_earn.earning_cd)
                                   )
                               )
                           AND (   (    c.prem_due_dt = s.comm_date
                                    AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                           1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                   )
                                OR c.prem_due_dt <> s.comm_date
                               )
                           ---Musha on 28-02-2016 0 means not come from prev policy
                           AND c.emp_gid IN (
                                  SELECT emp_gid
                                    FROM (SELECT     e.emp_gid, e.emp_type_cd
                                                FROM hrm_employee e,
                                                     hrm_employee_setup s
                                               WHERE e.employment_tp_cd = '02'
                                                 AND e.emp_gid = s.employee_gid(+)
                                          START WITH s.h_employee_gid =
                                                          rec_emp.employee_gid
                                          CONNECT BY PRIOR s.employee_gid =
                                                              s.h_employee_gid)
                                   WHERE emp_type_cd =
                                            DECODE (rec_emp.emp_type_cd,
                                                    '08', '07',
                                                    '09', '07',
                                                    '10', '07',
                                                    
                                                    ---Musha on 26.07.2016 add 3 lines for 10, 11, 12
                                                    '11', '07',
                                                    '12', '07',
                                                    '13', '07',
                                                      '14', '07',
                                                      '15', '07',
                                                      '16', '07',
                                                      '17', '07',
                                                      '18', '07',
                                                      '19', '07',
                                                      '20', '07',
                                                    '06'
                                                   ))
                           AND s.term BETWEEN TO_CHAR (rec_earn.term_from)
                                          AND TO_CHAR (rec_earn.term_to)
                           AND NOT EXISTS (
                                  SELECT 1
                                    FROM com_earning_head h
                                   WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                     AND h.earning_cd = c.earning_cd)
                           AND NOT EXISTS (
                                  SELECT 1
                                    FROM com_dev_emp_bonus_comm_dtl d,
                                         com_dev_emp_bonus_comm f,
                                         com_earning_head h
                                   WHERE d.payable_no = f.payable_no
                                     AND h.earning_cd = rec_earn.earning_cd
                                     AND (   f.earning_cd =
                                                           rec_earn.earning_cd
                                          OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                         )
                                     AND d.comm_no = c.comm_no
                                     AND (   f.emp_gid = rec_emp.employee_gid
                                          OR f_emp_type_cd (f.emp_gid) =
                                                f_emp_type_cd
                                                         (rec_emp.employee_gid)
                                          OR (   f.earning_cd <>
                                                           rec_earn.earning_cd
                                              OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                             )
                                         ))       --Add by Musha on 21.03.2017
                           /*(SELECT   1
                              FROM   com_dev_emp_bonus_comm_dtl d,
                                     com_dev_emp_bonus_comm f
                             WHERE   d.payable_no = f.payable_no
                                     AND rec_earn.earning_cd =
                                           f.earning_cd
                                     AND d.comm_no = c.comm_no
                                     AND d.emp_gid =
                                          rec_emp.employee_gid)*/--Block by Musha on 21.03.2017
                           AND c.pgid = s.pgid;

                        v_payable_amt :=
                           ROUND (NVL ((v_tot_coll_prem * rec_earn.payable_pct
                                       ),
                                       0
                                      ),
                                  2
                                 );
                     ELSE
                        --Find total collected premium for the months--
                        SELECT SUM (installment_premium)
                          INTO v_tot_coll_prem
                          FROM (SELECT DECODE
                                          (rec_earn.cal_based_on,
                                           '1', SUM (s.installment_premium),
                                           '6', SUM (s.life_premium),
                                           '7', SUM
                                                (  s.life_premium
                                                 + NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                           '8', SUM
                                                (  NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                           0
                                          ) installment_premium
                                  FROM acc_receivables r,
                                       ins_prem_acc_receivable p,
                                       ins_p_summery s
                                 WHERE r.status = '1'
                                   AND r.rec_status = '1'
                                   AND r.com_calculated = 'Y'
                                   AND s.ins_tp_cd = p_ins_tp_cd
                                   --AND    to_char(nvl(r.coll_slip_rec_dt, r.receive_date)
                                   --           ,'RRRRMM') = to_char(p_com_cal_dt_to, 'RRRRMM')
                                   AND NVL (r.coll_slip_rec_dt,
                                            r.receive_date)
                                          BETWEEN v_month_start_dt
                                              AND v_month_end_dt
                                   AND p.proposed_status IN ('1', '4')
                                   AND (s.agent_id IN (
                                           SELECT     TO_CHAR (m.employee_gid)
                                                 FROM (SELECT TO_CHAR
                                                                 (e.emp_gid
                                                                 )
                                                                 employee_gid,
                                                              TO_CHAR
                                                                 (s.h_employee_gid
                                                                 )
                                                                 h_employee_gid,
                                                              0 emp_tp
                                                         FROM hrm_employee e,
                                                              hrm_employee_setup s
                                                        WHERE e.employment_tp_cd =
                                                                          '02'
                                                          AND e.emp_gid = s.employee_gid(+)
                                                       UNION ALL
                                                       SELECT g.agent_id,
                                                              TO_CHAR
                                                                 (g.dev_emp_gid
                                                                 ),
                                                              1
                                                         FROM hrm_agent g) m
                                                WHERE m.emp_tp = 1
                                           START WITH m.employee_gid =
                                                         TO_CHAR
                                                            (rec_emp.employee_gid
                                                            )
                                           CONNECT BY PRIOR m.employee_gid =
                                                              m.h_employee_gid)
                                       )
                                   AND r.receive_id = p.proposer_pk
                                   AND r.pgid = s.pgid
                                   AND CEIL (  p.installment_no
                                             / (s.policy_installment / s.term
                                               )
                                            ) BETWEEN rec_earn.paid_yr_from
                                                  AND rec_earn.paid_yr_to
                                UNION ALL
                                SELECT DECODE
                                          (rec_earn.cal_based_on,
                                           '1', SUM (s.installment_premium),
                                           '6', SUM (s.life_premium),
                                           '7', SUM
                                                (  s.life_premium
                                                 + NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                           '8', SUM
                                                (  NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                           0
                                          ) installment_premium
                                  FROM (SELECT   a.receive_id, a.pgid,
                                                 SUM
                                                    (a.coll_amount
                                                    ) coll_amount
                                            FROM acc_advance_receivables a
                                           WHERE a.rec_status = '1'
                                             AND a.status = '1'
                                             AND a.com_calculated = 'Y'
                                             --AND    to_char(nvl(a.coll_slip_rec_dt, a.receive_date)
                                             --    ,'RRRRMM') = to_char(p_com_cal_dt_to, 'RRRRMM')
                                             AND NVL (a.coll_slip_rec_dt,
                                                      a.receive_date
                                                     ) BETWEEN v_month_start_dt
                                                           AND v_month_end_dt
                                        GROUP BY a.receive_id, a.pgid) r,
                                       ins_prem_acc_receivable p,
                                       ins_p_summery s
                                 WHERE p.proposed_status IN ('1', '4')
                                   AND s.ins_tp_cd = p_ins_tp_cd
                                   AND (s.agent_id IN (
                                           SELECT     TO_CHAR (m.employee_gid)
                                                 FROM (SELECT TO_CHAR
                                                                 (e.emp_gid
                                                                 )
                                                                 employee_gid,
                                                              TO_CHAR
                                                                 (s.h_employee_gid
                                                                 )
                                                                 h_employee_gid,
                                                              0 emp_tp
                                                         FROM hrm_employee e,
                                                              hrm_employee_setup s
                                                        WHERE e.employment_tp_cd =
                                                                          '02'
                                                          AND e.emp_gid = s.employee_gid(+)
                                                       UNION ALL
                                                       SELECT g.agent_id,
                                                              TO_CHAR
                                                                 (g.dev_emp_gid
                                                                 ),
                                                              1
                                                         FROM hrm_agent g) m
                                                WHERE m.emp_tp = 1
                                           START WITH m.employee_gid =
                                                         TO_CHAR
                                                            (rec_emp.employee_gid
                                                            )
                                           CONNECT BY PRIOR m.employee_gid =
                                                              m.h_employee_gid)
                                       )
                                   AND r.receive_id = p.fp_receive_id
                                   AND r.pgid = s.pgid
                                   AND CEIL (  p.installment_no
                                             / (s.policy_installment / s.term
                                               )
                                            ) BETWEEN rec_earn.paid_yr_from
                                                  AND rec_earn.paid_yr_to);

                        v_payable_amt :=
                           ROUND ((v_tot_coll_prem * rec_earn.payable_pct), 2);
                     END IF;

                     --*************************Insert data into table**********************--
                     --============================--
                    --Round Amount--Add by Musha on 29.09.2020
                    pro_get_sys_config_st (
                               p_pgid            => NULL,
                               p_config_id       => 43,
                               p_sys_config_st   => v_sys_config_st,
                               p_upd_message     => v_upd_message
                            );
                    
                    IF v_sys_config_st = 1 THEN
                        v_payable_amt := ROUND (v_payable_amt);
                    END IF;
                    --============================--
        
                     IF v_payable_amt > 0
                     THEN
                        --Generate PK
                        SELECT TO_NUMBER
                                       (   TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                        || LPAD
                                              (  NVL
                                                    (MAX (SUBSTR (payable_no,
                                                                  5
                                                                 )
                                                         ),
                                                     0
                                                    )
                                               + 1,
                                               8,
                                               0
                                              )
                                       )
                          INTO v_comm_no
                          FROM com_dev_emp_bonus_comm
                         WHERE SUBSTR (payable_no, 1, 4) =
                                             TO_CHAR (p_com_cal_dt_to, 'rrmm');

                        --Account Integration--
                        /* IF p_ins_tp_cd = 1
                         THEN
                            --Conventional Insurance
                            v_trans_item_comm_pay := 20;  --Commission Payable
                            --v_trans_item_tax_pay    := 11;  --Tax Payable
                            v_trans_item_comm := 9;           --Commission amt
                         ELSE
                            --Takaful Insurance
                            v_trans_item_comm_pay := 108; --Commission Payable
                            --v_trans_item_tax_pay    := 106;  --Tax Payable
                            v_trans_item_comm := 105;         --Commission amt
                         END IF;*/
                        IF p_ins_tp_cd = 1
                        THEN
                           IF p_emp_type = '06'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 197;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 184;      --Commission amt
                           ELSIF p_emp_type = '07'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 198;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 185;      --Commission amt
                           ELSIF p_emp_type = '08'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 199;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 186;      --Commission amt
                           ELSIF p_emp_type = '09'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 200;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 187;      --Commission amt
                           ELSIF p_emp_type = '11'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 201;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 188;      --Commission amt
                           ELSIF p_emp_type = '10'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 203;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 190;      --Commission amt
                           ELSIF p_emp_type = '12'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 202;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 189;      --Commission amt
                           
                           ELSIF p_emp_type = '14'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 240;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 238;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 244;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 242;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 248;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 246;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 252;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 250;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 256;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 254;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 260;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 258;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 264;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 262;      --Commission amt      
                           END IF;
                        ELSE
                           IF p_emp_type = '06'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 204;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 191;      --Commission amt
                           ELSIF p_emp_type = '07'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 205;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 192;      --Commission amt
                           ELSIF p_emp_type = '08'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 206;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 193;      --Commission amt
                           ELSIF p_emp_type = '09'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 207;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 194;      --Commission amt
                           ELSIF p_emp_type = '11'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 208;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 195;      --Commission amt
                           ELSIF p_emp_type = '10'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 210;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 196;      --Commission amt
                           ELSIF p_emp_type = '12'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 209;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 211;      --Commission amt
                           
                           ELSIF p_emp_type = '14'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 241;
                                                         --Commission Payable
                              v_trans_item_comm := 239;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 245;
                                                         --Commission Payable
                              v_trans_item_comm := 243;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 249;
                                                         --Commission Payable
                              v_trans_item_comm := 247;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 253;
                                                         --Commission Payable
                              v_trans_item_comm := 251;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 257;
                                                         --Commission Payable
                              v_trans_item_comm := 255;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 261;
                                                         --Commission Payable
                              v_trans_item_comm := 259;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 265;
                                                         --Commission Payable
                              v_trans_item_comm := 263;      --Commission amt   
                           END IF;
                        END IF;

                        /********************************************************
                        This part is added by MD. Sayadur Rahaman  on 14/Feb-2013
                        Purpose: Accounts Integration
                        *********************************************************/
                        v_regional_off :=
                                     fun_find_regional_off (rec_emp.office_cd);

                        ----------Find payable office-----------
                        --Musha on 01.06.2016
                        BEGIN
                           SELECT fun_find_sales_off (rec_emp.office_cd)
                             INTO v_payable_off
                             FROM DUAL;

                           IF v_payable_off IS NULL
                           THEN
                              SELECT fun_find_service_off (rec_emp.office_cd)
                                INTO v_payable_off
                                FROM DUAL;

                              IF v_payable_off IS NULL
                              THEN
                                 SELECT fun_find_head_off (rec_emp.office_cd)
                                   INTO v_payable_off
                                   FROM DUAL;
                              END IF;
                           END IF;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_off := rec_emp.office_cd;
                        END;

                        --End of find payable office--
                        DECLARE
                           recprem          pkg_gl_voucher.t_trans_tab;
                           v_error          VARCHAR2 (200);
                           v_object_cd      gen_object_info.object_cd%TYPE;
                           v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
                           v_inter_off_st   CHAR (1);
                           v_office_cd      hrm_office.office_cd%TYPE;
                           v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
                           v_trans_date     DATE;
                           v_cost_center    hrm_office.office_cd%TYPE;
                           v_narration      VARCHAR2 (200);
                           v_user           VARCHAR2 (20);
                           v_chq_tp         VARCHAR2 (3);
                           v_chq_no         VARCHAR2 (50);
                           v_chq_dt         DATE;
                           v_sus_amt_used   NUMBER (1);
                        BEGIN
                           /***********************
                           Business wise value will change.
                           Developer will put the value
                           **********************************/
                           v_object_cd := p_object_cd;
                           v_voucher_cd := '05';
                           v_inter_off_st := '0';
                           v_office_cd := v_regional_off;
                           v_cost_center := v_payable_off;
                           --rec_emp.office_cd;    --Musha on 01.06.2016
                           v_trans_id :=
                                 rec_emp.employee_gid
                              || rec_emp.office_cd
                              || TO_CHAR (p_com_cal_dt_to, 'DDMMRR');
                           v_trans_date := p_com_cal_dt_to;
                           v_narration :=
                                 'Employee Commission Payable Calculation on '
                              || p_com_cal_dt_to;
                           v_user := p_user;
/*******End********/

                           --commission
                           recprem (2).trans_item_cd := v_trans_item_comm;
                           recprem (2).post_amount := v_payable_amt;
                           recprem (2).chq_tp := NULL;
                           recprem (2).chq_no := NULL;
                           recprem (2).chq_dt := NULL;
                           --commission payable
                           recprem (1).trans_item_cd := v_trans_item_comm_pay;
                           recprem (1).post_amount := v_payable_amt;
                           recprem (1).chq_tp := NULL;
                           recprem (1).chq_no := NULL;
                           recprem (1).chq_dt := NULL;
                           pkg_gl_voucher.pro_voucher_posting
                                            (p_table             => recprem,
                                             p_object_cd         => v_object_cd,
                                             p_vouch_cd          => v_voucher_cd,
                                             p_inter_off_st      => v_inter_off_st,
                                             p_office_cd         => v_office_cd,
                                             p_trans_id          => v_trans_id,
                                             p_trans_date        => v_trans_date,
                                             p_cost_center       => v_cost_center,
                                             p_narration         => v_narration,
                                             p_user              => v_user,
                                             p_ins_tp_cd         => p_ins_tp_cd,
                                             p_voucher_no        => v_payable_vr_no,
                                             p_error             => v_acc_error
                                            );
                        END;

                        --End of Account Integration--
                        IF v_acc_error IS NULL
                        THEN
                           INSERT INTO com_dev_emp_bonus_comm
                                       (payable_no, emp_gid,
                                        office_cd,
                                        earning_cd,
                                        earning_type,
                                        com_calc_dt_to, payable_amount,
                                        base_amount, com_payable_vou,
                                        fy_start_dt, fy_end_dt, bill_status,
                                        ins_tp_cd,
                                        pay_rate,
                                        i_usr, i_dt, payable_office_cd
                                       )
                                VALUES (v_comm_no,                   --comm_NO
                                                  rec_emp.employee_gid,
                                        --emp_gid
                                        rec_emp.office_cd,         --OFFICE_CD
                                        rec_earn.earning_cd,      --EARNING_CD
                                        rec_earn.earning_type,  --EARNING_TYPE
                                        p_com_cal_dt_to,      --COM_CALC_DT_TO
                                                        v_payable_amt,
                                        --PAYABLE_AMOUNT
                                        v_tot_coll_prem,         --base_amount
                                                        v_payable_vr_no,
                                        --COM_PAYABLE_VOU
                                        p_fy_start_dt,           --fy_START_Dt
                                                      p_fy_end_dt, 
                                                                   --fy_END_Dt
                                        '0',                     --BILL_STATUS
                                        p_ins_tp_cd,
                                          NVL (rec_earn.payable_pct,
                                               v_payable_pct
                                              )
                                        * 100,
                                        p_user,                        --I_USR
                                               SYSDATE,                 --I_DT
                                                       v_payable_off
                                       );

                           FOR r IN
                              (SELECT c.comm_no, c.emp_gid, c.pgid, 
                                      c.prem_due_dt, s.installment_premium
                                 FROM com_dev_emp_comm c, ins_p_summery s
                                WHERE c.ins_tp_cd = p_ins_tp_cd
                                  --AND to_char(c.com_calc_dt_to, 'RRRRMM') =
                                  -- to_char(p_com_cal_dt_to, 'RRRRMM')
                                  AND c.com_calc_dt_to BETWEEN v_month_start_dt
                                                           AND v_month_end_dt
                                  --open by musha on 02.05.2016
                                  --AND    s.product_cd NOT IN ('09', '16', '39') ---Musha on 04-04-2015
                                  AND c.bill_status =
                                                     '1'
                                                        ---Musha on 19.10.2016
                                  AND (   (    rec_earn.setup_option = 'G'
                                           AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                          )
                                       OR (    rec_earn.setup_option = 'P'
                                           AND s.product_cd IN (
                                                  SELECT product_cd
                                                    FROM com_dev_earning_setup_mst
                                                   WHERE emp_type_cd =
                                                            rec_emp.emp_type_cd
                                                     AND service_cd =
                                                            rec_emp.service_cd
                                                     AND earning_cd =
                                                            rec_earn.earning_cd)
                                          )
                                      )
                                  --AND fun_policy_frm_prevpol (s.pgid) = '0'
                                  AND (   (    c.prem_due_dt = s.comm_date
                                           AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                                  1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                          )
                                       OR c.prem_due_dt <> s.comm_date
                                      )
                                  ---Musha on 28-02-2016 0 means not come from prev policy
                                  --AND c.com_calc_dt_to <= v_month_end_dt --close by musha on 02.05.2016
                                  AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                                      AND rec_earn.paid_yr_to
                                  AND c.emp_gid IN (
                                         SELECT emp_gid
                                           FROM (SELECT     e.emp_gid,
                                                            e.emp_type_cd
                                                       FROM hrm_employee e,
                                                            hrm_employee_setup s
                                                      WHERE e.employment_tp_cd =
                                                                          '02'
                                                        AND e.emp_gid = s.employee_gid(+)
                                                 START WITH s.h_employee_gid =
                                                               rec_emp.employee_gid
                                                 CONNECT BY PRIOR s.employee_gid =
                                                               s.h_employee_gid)
                                          WHERE emp_type_cd =
                                                   DECODE
                                                         (rec_emp.emp_type_cd,
                                                          '08', '07',
                                                          '09', '07',
                                                          '10', '07',
                                                          
                                                          ---Musha on 26.07.2016 add 3 lines for 10, 11, 12
                                                          '11', '07',
                                                          '12', '07',
                                                          '13', '07',
                                                          '14', '07',
                                                          '15', '07',
                                                          '16', '07',
                                                          '17', '07',
                                                          '18', '07',
                                                          '19', '07',
                                                          '20', '07',
                                                          '06'
                                                         )
                                                ----------Add by Musha on 17.10.2017--------
                                                AND (rec_earn.chain_gap_emp_tp_cd IS NULL
                                                     OR
                                                      emp_gid IN (SELECT e.emp_gid
                                                                    FROM hrm_employee e, hrm_employee_setup s
                                                                   WHERE e.employment_tp_cd = '02'
                                                                     AND e.emp_gid = s.employee_gid
                                                                     AND s.h_employee_gid = rec_emp.employee_gid
                                                                     AND TO_NUMBER (e.emp_type_cd) <
                                                                                   TO_NUMBER (rec_earn.chain_gap_emp_tp_cd)
                                                                     AND TO_NUMBER (e.emp_type_cd) <= 7  --Musha on 10.10.2017
                                                                )
                                                    )
                                                -------------------         
                                                )
                                  AND s.term BETWEEN TO_CHAR
                                                           (rec_earn.term_from)
                                                 AND TO_CHAR (rec_earn.term_to)
                                  AND NOT EXISTS (
                                         SELECT 1
                                           FROM com_earning_head h
                                          WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                            AND h.earning_cd = c.earning_cd)
                                  AND NOT EXISTS (
                                         SELECT 1
                                           FROM com_dev_emp_bonus_comm_dtl d,
                                                com_dev_emp_bonus_comm f,
                                                com_earning_head h
                                          WHERE d.payable_no = f.payable_no
                                            AND h.earning_cd =
                                                           rec_earn.earning_cd
                                            AND (   f.earning_cd =
                                                           rec_earn.earning_cd
                                                 OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                                --OR (f.emp_gid = rec_emp.employee_gid AND d.comm_no = c.comm_no) --Musha on 09.10.2017
                                                )
                                            AND d.comm_no = c.comm_no
                                            AND (   f.emp_gid =
                                                          rec_emp.employee_gid
                                                 OR f_emp_type_cd (f.emp_gid) =
                                                       f_emp_type_cd
                                                          (rec_emp.employee_gid
                                                          )
                                                 OR (   f.earning_cd <>
                                                           rec_earn.earning_cd
                                                     OR f_emp_type_cd
                                                                    (f.emp_gid) =
                                                           h.chain_gap_emp_tp_cd
                                                    )
                                                ))
                                                  --Add by Musha on 21.03.2017
                                  /*(SELECT   1
                                     FROM   com_dev_emp_bonus_comm_dtl d,
                                            com_dev_emp_bonus_comm f
                                    WHERE   d.payable_no =
                                               f.payable_no
                                            AND rec_earn.earning_cd =
                                                  f.earning_cd
                                            AND d.comm_no =
                                                  c.comm_no
                                            AND d.emp_gid =
                                                  rec_emp.employee_gid)*/   --Block by Musha on 21.03.2017 and the above condition
                                  AND c.pgid = s.pgid)
                           LOOP
                              v_dtl_gross_payable_amt   := ROUND(r.installment_premium*
                                                                 NVL (rec_earn.payable_pct,
                                                                      v_payable_pct
                                                                     ), 2);
                              
                              v_dtl_tax_ded_amt         := ROUND(v_dtl_gross_payable_amt*0.075, 2);
                              
                              IF v_sys_config_st = 1 THEN
                                  v_dtl_gross_payable_amt := ROUND (v_dtl_gross_payable_amt);
                                  v_dtl_tax_ded_amt := ROUND (v_dtl_tax_ded_amt);
                              END IF;
                              
                              INSERT INTO com_dev_emp_bonus_comm_dtl
                                          (payable_no, emp_gid,
                                           comm_no, subord_emp_gid, pgid,
                                           prem_due_date, premium_amt, payable_rate,
                                           gross_payable_amt, tax_ded_amt, 
                                           net_payable_amt, i_usr, i_dt
                                          )
                                   VALUES (v_comm_no, rec_emp.employee_gid,
                                           r.comm_no, r.emp_gid, r.pgid,
                                           r.prem_due_dt, r.installment_premium, NVL (rec_earn.payable_pct, v_payable_pct),
                                           v_dtl_gross_payable_amt, v_dtl_tax_ded_amt,
                                           v_dtl_gross_payable_amt - NVL(v_dtl_tax_ded_amt, 0), 
                                           p_user, SYSDATE
                                          );
                           END LOOP;

                           p_record_count := NVL (p_record_count, 0) + 1;
                        END IF;
                     END IF;
                  --*************************End of Insert data into table**********************--
                  ELSE
                     v_payable_amt := 0;
                  END IF;
               END IF;
            ELSIF rec_earn.calc_on = 'F'
            THEN
               --Toral collected premium on the FY
               IF p_com_cal_dt_to = p_fy_end_dt
               THEN
                  --Check for the fiscal year end
                  --Check for the earning already calculated or not--
                  SELECT COUNT (1)
                    INTO v_earn_cnt
                    FROM com_dev_emp_comm c
                   WHERE c.emp_gid = rec_emp.employee_gid
                     AND c.earning_cd = rec_earn.earning_cd
                     AND c.com_calc_dt_to = p_com_cal_dt_to;

                  --must add fiscal year
                  IF v_earn_cnt = 0
                  THEN
                     --Not yet calculated for the employee
                     --Find total collected premium--
                     SELECT SUM (p.installment_premium)
                       INTO v_tot_coll_prem
                       FROM acc_receivables r,
                            ins_prem_acc_receivable p,
                            ins_p_summery s
                      WHERE r.status = '1'
                        AND r.rec_status = '1'
                        AND r.com_calculated = 'Y'
                        AND NVL (r.coll_slip_rec_dt, r.receive_date)
                               BETWEEN p_fy_start_dt
                                   AND p_fy_end_dt
                        AND p.proposed_status IN ('1', '4')
                        AND (s.agent_id IN (
                                SELECT     TO_CHAR (m.employee_gid)
                                      FROM (SELECT TO_CHAR
                                                      (e.emp_gid)
                                                                 employee_gid,
                                                   TO_CHAR
                                                      (s.h_employee_gid
                                                      ) h_employee_gid,
                                                   0 emp_tp
                                              FROM hrm_employee e,
                                                   hrm_employee_setup s
                                             WHERE e.employment_tp_cd = '02'
                                               AND e.emp_gid = s.employee_gid(+)
                                            UNION ALL
                                            SELECT g.agent_id,
                                                   TO_CHAR (g.dev_emp_gid), 1
                                              FROM hrm_agent g) m
                                     WHERE m.emp_tp = 1
                                START WITH m.employee_gid =
                                                TO_CHAR (rec_emp.employee_gid)
                                CONNECT BY PRIOR m.employee_gid =
                                                              m.h_employee_gid)
                            )
                        AND r.receive_id = p.proposer_pk
                        AND r.pgid = s.pgid
                        AND CEIL (  p.installment_no
                                  / (s.policy_installment / s.term)
                                 ) BETWEEN rec_earn.paid_yr_from
                                       AND rec_earn.paid_yr_to;

                     IF     rec_earn.amount_depnt = '1'
                        AND rec_earn.payable_pct IS NULL
                     THEN
                        BEGIN
                           SELECT (d.payable_pct / 100)
                             INTO v_payable_pct
                             FROM com_earning_head h,
                                  com_dev_earning_setup_mst m,
                                  com_dev_earning_setup_dtl d
                            WHERE h.status = '1'
                              AND NVL (m.amount_depnt, 0) = '1'
                              AND m.earning_cd = rec_earn.earning_cd
                              AND h.earning_type = rec_earn.earning_type
                              AND h.earning_cd = m.earning_cd
                              AND m.setupmst_cd = d.setupmst_cd
                              AND m.emp_type_cd = rec_emp.emp_type_cd
                              AND rec_earn.paid_yr_from = h.paid_yr_from
                              AND rec_earn.paid_yr_to = h.paid_yr_to
                              AND m.service_cd = rec_emp.service_cd
                              AND NVL (m.product_cd, '00') =
                                                      NVL (m.product_cd, '00')
                              AND v_tot_coll_prem BETWEEN d.amount_from
                                                      AND d.amount_to;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_pct := 0;
                        END;

                        v_payable_amt :=
                                 ROUND ((v_tot_coll_prem * v_payable_pct), 2);
                     ELSE
                        v_payable_amt :=
                           ROUND ((v_tot_coll_prem * rec_earn.payable_pct),
                                  2
                                 );
                     END IF;

                     --*************************Insert data into table**********************--
                     --============================--
                    --Round Amount--Add by Musha on 29.09.2020
                    pro_get_sys_config_st (
                               p_pgid            => NULL,
                               p_config_id       => 43,
                               p_sys_config_st   => v_sys_config_st,
                               p_upd_message     => v_upd_message
                            );
                    
                    IF v_sys_config_st = 1 THEN
                        v_payable_amt := ROUND (v_payable_amt);
                    END IF;
                    --============================--
                     
                     IF v_payable_amt > 0
                     THEN
                        --Generate PK
                        SELECT acc_dev_emp_comm_no.NEXTVAL
                          INTO v_comm_no
                          FROM DUAL;
                          
                        /*SELECT TO_NUMBER (   TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                          || LPAD
                                                (  NVL (MAX (SUBSTR (comm_no,
                                                                     5
                                                                    )
                                                            ),
                                                        0
                                                       )
                                                 + 1,
                                                 8,
                                                 0
                                                )
                                         )
                          INTO v_comm_no
                          FROM com_dev_emp_comm
                         WHERE SUBSTR (comm_no, 1, 4) =
                                             TO_CHAR (p_com_cal_dt_to, 'rrmm');*/

                        INSERT INTO com_dev_emp_comm
                                    (comm_no, emp_gid,
                                     office_cd, pgid, prem_due_dt,
                                     earning_cd,
                                     earning_type, com_calc_dt_to,
                                     prem_year, payable_amount,
                                     payable_vouch_dt, com_payable_vou,
                                     fy_start_dt, fy_end_dt, bill_status,
                                     ins_tp_cd, pay_rate, i_usr,
                                     i_dt, payable_office_cd
                                    )
                             VALUES (v_comm_no,                      --comm_NO
                                               rec_emp.employee_gid, --emp_gid
                                     rec_emp.office_cd,            --OFFICE_CD
                                                       NULL,            --PGID
                                                            NULL,
                                     --PREM_DUE_DT
                                     rec_earn.earning_cd,         --EARNING_CD
                                     rec_earn.earning_type,
                                                           --EARNING_TYPE
                                                           p_com_cal_dt_to,
                                     --COM_CALC_DT_TO
                                     NULL,                         --Prem_YEAR
                                          v_payable_amt,
                                     --PAYABLE_AMOUNT
                                     v_payable_vr_dt,       --PAYABLE_VOUCH_DT
                                                     v_payable_vr_no,
                                     --COM_PAYABLE_VOU
                                     p_fy_start_dt,              --fy_START_Dt
                                                   p_fy_end_dt,    --fy_END_Dt
                                                               '0',
                                     --BILL_STATUS
                                     p_ins_tp_cd, v_payable_pct, p_user,
                                     --I_USR
                                     SYSDATE,                           --I_DT
                                             v_payable_off
                                    );
                     END IF;
                  --*************************End of Insert data into table**********************--
                  ELSE
                     v_payable_amt := 0;
                  END IF;
               END IF;
            END IF;
         ELSIF rec_earn.cal_based_on = '2'
         THEN
            --Earn Commission by FA
            IF rec_earn.calc_on = 'F'
            THEN
               --Calculation on the total commission of the fiscal year
               IF p_com_cal_dt_to = p_fy_end_dt
               THEN
                  --Check for the fiscal year end
                  --Check for the earning already calculated or not--
                  SELECT COUNT (1)
                    INTO v_earn_cnt
                    FROM com_dev_emp_comm c
                   WHERE c.emp_gid = rec_emp.employee_gid
                     AND c.earning_cd = rec_earn.earning_cd;

                  IF v_earn_cnt = 0
                  THEN
                     --Not yet calculated for the employee
                     ---Find previous total commission earn of the fiscal year---
                     SELECT NVL (SUM (payable_amount), 0)
                       INTO v_prev_comm_amt
                       FROM com_agent_com_detail c, com_earn_tp t
                      WHERE t.earning_type = 'C'
                        AND c.ins_tp_cd = p_ins_tp_cd
                        AND c.earning_cd = t.earning_cd
                        AND NVL (c.service_charge_st, '0') = '0'
                        AND c.com_exe_date <= p_com_cal_dt_to
                        AND c.com_exe_date BETWEEN p_fy_start_dt AND p_fy_end_dt
                        AND c.comm_bon_year BETWEEN rec_earn.paid_yr_from
                                                AND rec_earn.paid_yr_to
                        AND (c.agent_id IN (
                                SELECT     TO_CHAR (m.employee_gid)
                                      FROM (SELECT TO_CHAR
                                                      (e.emp_gid)
                                                                 employee_gid,
                                                   TO_CHAR
                                                      (s.h_employee_gid
                                                      ) h_employee_gid,
                                                   0 emp_tp
                                              FROM hrm_employee e,
                                                   hrm_employee_setup s
                                             WHERE e.employment_tp_cd = '02'
                                               AND e.emp_gid = s.employee_gid(+)
                                            UNION ALL
                                            SELECT g.agent_id,
                                                   TO_CHAR (g.dev_emp_gid), 1
                                              FROM hrm_agent g) m
                                     WHERE m.emp_tp = 1
                                START WITH m.employee_gid =
                                                TO_CHAR (rec_emp.employee_gid)
                                CONNECT BY PRIOR m.employee_gid =
                                                              m.h_employee_gid)
                            );

                     v_tot_comm_amt := NVL (v_prev_comm_amt, 0);

                     --+ NVL (v_comm_amt, 0);

                     --------------------------------
                     IF     rec_earn.amount_depnt = '1'
                        AND rec_earn.payable_pct IS NULL
                     THEN
                        BEGIN
                           SELECT (d.payable_pct / 100)
                             INTO v_payable_pct
                             FROM com_earning_head h,
                                  com_dev_earning_setup_mst m,
                                  com_dev_earning_setup_dtl d
                            WHERE h.status = '1'
                              AND NVL (m.amount_depnt, 0) = '1'
                              AND m.earning_cd = rec_earn.earning_cd
                              AND h.earning_type = rec_earn.earning_type
                              AND h.earning_cd = m.earning_cd
                              AND m.setupmst_cd = d.setupmst_cd
                              AND m.emp_type_cd = rec_emp.emp_type_cd
                              AND h.paid_yr_from = rec_earn.paid_yr_from
                              AND h.paid_yr_to = rec_earn.paid_yr_to
                              AND m.service_cd = rec_emp.service_cd
                              AND NVL (m.product_cd, '00') =
                                                      NVL (m.product_cd, '00')
                              AND v_tot_comm_amt BETWEEN d.amount_from
                                                     AND d.amount_to;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_pct := 0;
                        END;

                        v_payable_amt :=
                                  ROUND ((v_tot_comm_amt * v_payable_pct), 2);
                     ELSE
                        v_payable_amt :=
                           ROUND ((v_tot_comm_amt * rec_earn.payable_pct), 2);
                     END IF;

                     --*************************Insert data into table**********************--
                     --============================--
                    --Round Amount--Add by Musha on 29.09.2020
                    pro_get_sys_config_st (
                               p_pgid            => NULL,
                               p_config_id       => 43,
                               p_sys_config_st   => v_sys_config_st,
                               p_upd_message     => v_upd_message
                            );
                        
                    IF v_sys_config_st = 1 THEN
                        v_payable_amt := ROUND (v_payable_amt);
                    END IF;
                    --============================--
                     
                     IF v_payable_amt > 0
                     THEN
                        --Generate PK
                        
                        SELECT acc_dev_emp_comm_no.NEXTVAL
                          INTO v_comm_no
                          FROM DUAL;
                        
                        /*SELECT TO_NUMBER (   TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                          || LPAD
                                                (  NVL (MAX (SUBSTR (comm_no,
                                                                     5
                                                                    )
                                                            ),
                                                        0
                                                       )
                                                 + 1,
                                                 8,
                                                 0
                                                )
                                         )
                          INTO v_comm_no
                          FROM com_dev_emp_comm
                         WHERE SUBSTR (comm_no, 1, 4) =
                                             TO_CHAR (p_com_cal_dt_to, 'rrmm');*/

                        INSERT INTO com_dev_emp_comm
                                    (comm_no, emp_gid,
                                     office_cd, pgid, prem_due_dt,
                                     earning_cd,
                                     earning_type, com_calc_dt_to,
                                     prem_year, payable_amount,
                                     payable_vouch_dt, com_payable_vou,
                                     fy_start_dt, fy_end_dt, bill_status,
                                     ins_tp_cd, pay_rate, i_usr,
                                     i_dt, payable_office_cd
                                    )
                             VALUES (v_comm_no,                      --comm_NO
                                               rec_emp.employee_gid, --emp_gid
                                     rec_emp.office_cd,            --OFFICE_CD
                                                       NULL,            --PGID
                                                            NULL,
                                     --PREM_DUE_DT
                                     rec_earn.earning_cd,         --EARNING_CD
                                     rec_earn.earning_type,
                                                           --EARNING_TYPE
                                                           p_com_cal_dt_to,
                                     --COM_CALC_DT_TO
                                     NULL,                         --Prem_YEAR
                                          v_payable_amt,
                                     --PAYABLE_AMOUNT
                                     v_payable_vr_dt,       --PAYABLE_VOUCH_DT
                                                     v_payable_vr_no,
                                     --COM_PAYABLE_VOU
                                     p_fy_start_dt,              --fy_START_Dt
                                                   p_fy_end_dt,    --fy_END_Dt
                                                               '0',
                                     --BILL_STATUS
                                     p_ins_tp_cd, v_payable_pct, p_user,
                                     --I_USR
                                     SYSDATE,                           --I_DT
                                             v_payable_off
                                    );
                     END IF;
                  --*************************End of Insert data into table**********************--
                  ELSE
                     v_payable_amt := 0;
                  END IF;
               ELSE
                  v_payable_amt := 0;
               END IF;
            ELSIF rec_earn.calc_on = 'P'
            THEN
               --Calculation on the total commission of the premium year
               ---Find previous total commission earn of the premium year---
               SELECT NVL (SUM (payable_amount), 0)
                 INTO v_prev_comm_amt
                 FROM com_agent_com_detail c, com_earn_tp t
                WHERE t.earning_type = 'C'
                  AND c.ins_tp_cd = p_ins_tp_cd
                  AND c.earning_cd = t.earning_cd
                  AND NVL (c.service_charge_st, '0') = '0'
                  AND c.com_exe_date <= p_com_cal_dt_to
                  AND c.com_exe_date BETWEEN p_fy_start_dt AND p_fy_end_dt
                  AND c.comm_bon_year BETWEEN rec_earn.paid_yr_from
                                          AND rec_earn.paid_yr_to
                  AND (c.agent_id IN (
                          SELECT     TO_CHAR (m.employee_gid)
                                FROM (SELECT TO_CHAR (e.emp_gid) employee_gid,
                                             TO_CHAR
                                                (s.h_employee_gid
                                                ) h_employee_gid,
                                             0 emp_tp
                                        FROM hrm_employee e,
                                             hrm_employee_setup s
                                       WHERE e.employment_tp_cd = '02'
                                         AND e.emp_gid = s.employee_gid(+)
                                      UNION ALL
                                      SELECT g.agent_id,
                                             TO_CHAR (g.dev_emp_gid), 1
                                        FROM hrm_agent g) m
                               WHERE m.emp_tp = 1
                          START WITH m.employee_gid =
                                                TO_CHAR (rec_emp.employee_gid)
                          CONNECT BY PRIOR m.employee_gid = m.h_employee_gid)
                      );

               v_tot_comm_amt := NVL (v_prev_comm_amt, 0);

               IF rec_earn.amount_depnt = '1' AND rec_earn.payable_pct IS NULL
               THEN
                  BEGIN
                     IF rec_earn.cal_based_on = '2'
                     THEN
                        v_pram_amount := v_tot_comm_amt;
                     END IF;

                     SELECT (d.payable_pct / 100)
                       INTO v_payable_pct
                       FROM com_earning_head h,
                            com_dev_earning_setup_mst m,
                            com_dev_earning_setup_dtl d
                      WHERE h.status = '1'
                        AND NVL (m.amount_depnt, 0) = '1'
                        AND m.earning_cd = rec_earn.earning_cd
                        AND h.earning_type = rec_earn.earning_type
                        AND h.earning_cd = m.earning_cd
                        AND m.setupmst_cd = d.setupmst_cd
                        AND m.emp_type_cd = rec_emp.emp_type_cd
                        AND rec_earn.paid_yr_from BETWEEN h.paid_yr_from
                                                      AND h.paid_yr_to
                        AND m.service_cd = rec_emp.service_cd
                        AND NVL (m.product_cd, '00') =
                                                      NVL (m.product_cd, '00')
                        --AND rec_coll.term BETWEEN d.term_from AND d.term_to
                        AND v_pram_amount BETWEEN d.amount_from AND d.amount_to;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_payable_pct := 0;
                  END;

                  v_payable_amt :=
                                  ROUND ((v_tot_comm_amt * v_payable_pct), 2);
               ELSIF rec_earn.persistency_depnt = '1'
               THEN
                  v_payable_amt :=
                          ROUND ((v_tot_comm_amt * rec_earn.payable_pct), 2);
               ELSE
                  v_payable_amt :=
                          ROUND ((v_tot_comm_amt * rec_earn.payable_pct), 2);
               END IF;

               SELECT NVL (SUM (payable_amount), 0)
                 INTO v_prev_paid_comm_amt
                 FROM com_dev_emp_comm c
                WHERE c.earning_type = 'B'
                  AND c.ins_tp_cd = p_ins_tp_cd
                  AND c.emp_gid = rec_emp.employee_gid
                  AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                      AND rec_earn.paid_yr_to
                  AND c.fy_start_dt = p_fy_start_dt
                  AND c.fy_end_dt = p_fy_end_dt;

               v_payable_amt := v_payable_amt - NVL (v_prev_paid_comm_amt, 0);
            ELSIF rec_earn.calc_on = 'T'
            THEN
               --Add by Musha on 12.04.2021 --
               --find Month date--
               IF NVL(p_prev_year_comm_st, 0) = 1 THEN
                   pro_off_months_setup (p_office_cd        => p_office_cd,
                                         p_year_month       => p_year_month,
                                         p_month_st_dt      => v_month_start_dt,
                                         p_month_ed_dt      => v_month_end_dt,
                                         p_error            => v_month_setup_error
                                        );

                   IF v_month_start_dt IS NULL AND v_month_setup_error IS NULL
                   THEN
                      v_month_start_dt :=
                                       TO_DATE (p_year_month || '01', 'RRRRMMDD');
                      v_month_end_dt := LAST_DAY (v_month_start_dt);
                   END IF;                   
               END  IF;
               --end of find month date--
               
               --Calculation on the current commission
               FOR rec_agent_com IN
                  cur_agent_com (TO_CHAR (rec_emp.employee_gid),
                                 rec_earn.paid_yr_from,
                                 rec_earn.paid_yr_to,
                                 rec_earn.earning_cd,
                                 v_month_start_dt,
                                 v_month_end_dt
                                )
               LOOP
                  ------Add this by Musha on 09-09-2014; If chain gap required then find gap exists or not
                  IF rec_earn.chain_gap_emp_tp_cd IS NOT NULL
                  THEN
                     IF rec_earn.chain_gap_emp_tp_cd = '06'
                     THEN
                        BEGIN
                           SELECT e.emp_type_cd
                             INTO v_emp_type_cd
                             FROM hrm_agent a, hrm_employee e
                            WHERE agent_id = rec_agent_com.agent_id
                              AND a.dev_emp_gid = e.emp_gid;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              NULL;
                        END;

                        IF     v_emp_type_cd <> rec_earn.chain_gap_emp_tp_cd
                           AND v_emp_type_cd = rec_emp.emp_type_cd
                        THEN
                           v_payable_amt :=
                              ROUND ((  rec_agent_com.payable_amount
                                      * rec_earn.payable_pct
                                     ),
                                     2
                                    );
                        ELSE
                           v_payable_amt := 0;
                        END IF;
                     ELSIF rec_earn.chain_gap_emp_tp_cd = '08'
                     ---Musha on 24.05.2016
                     THEN      ---Add this elsif condition for Chain gap of BC
                        BEGIN
                           SELECT e.emp_type_cd, a.dev_emp_gid
                             INTO v_emp_type_cd, v_dev_emp_gid
                             FROM hrm_agent a, hrm_employee e
                            WHERE agent_id = rec_agent_com.agent_id
                              AND a.dev_emp_gid = e.emp_gid;

                           IF v_emp_type_cd IN ('06', '07')
                           THEN
                              SELECT e.emp_type_cd, s.h_employee_gid
                                INTO v_emp_type_cd, v_dev_emp_gid
                                FROM hrm_employee e, hrm_employee_setup s
                               WHERE e.emp_gid = v_dev_emp_gid
                                 AND e.emp_gid = s.employee_gid;

                              IF v_emp_type_cd = '07'
                              THEN
                                 SELECT e.emp_type_cd
                                   INTO v_emp_type_cd
                                   FROM hrm_employee e, hrm_employee_setup s
                                  WHERE e.emp_gid = v_dev_emp_gid
                                    AND e.emp_gid = s.employee_gid;
                              END IF;
                           END IF;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              NULL;
                        END;

                        IF     v_emp_type_cd <> rec_earn.chain_gap_emp_tp_cd
                           AND v_emp_type_cd = rec_emp.emp_type_cd
                        THEN
                           v_payable_amt :=
                              ROUND ((  rec_agent_com.payable_amount
                                      * rec_earn.payable_pct
                                     ),
                                     2
                                    );
                        ELSE
                           v_payable_amt := 0;
                        END IF;
                     END IF;
                  ELSE
                     v_payable_amt :=
                        ROUND ((  rec_agent_com.payable_amount
                                * rec_earn.payable_pct
                               ),
                               2
                              );
                  END IF;

                  ----------

                  --*************************Insert data into table**********************--
                  --============================--
                    --Round Amount--Add by Musha on 29.09.2020
                    pro_get_sys_config_st (
                               p_pgid            => NULL,
                               p_config_id       => 43,
                               p_sys_config_st   => v_sys_config_st,
                               p_upd_message     => v_upd_message
                            );
                    
                    IF v_sys_config_st = 1 THEN
                        v_payable_amt := ROUND (v_payable_amt);
                    END IF;
                    --============================--
        
                  IF v_payable_amt > 0
                  THEN
                     --Generate PK
                     SELECT acc_dev_emp_comm_no.NEXTVAL
                          INTO v_comm_no
                          FROM DUAL;
                     
                     --IC Commission Calculation--
                       v_ded_rate := 0;
                       v_ded_amt := 0;
                       IF     rec_agent_com.comm_bon_year = 1
                          AND p_emp_type IN ('06', '07')
                          AND rec_earn.earning_cd <> '08'
                       THEN
                          v_ded_flag := 1;
                          --Check for one-stop deduction status
                          BEGIN
                               pro_get_sys_config_st (p_pgid            => NULL,
                                                      p_config_id       => 45,
                                                      p_sys_config_st   => v_ic_onestop_sysconf_st,
                                                      p_upd_message     => v_ic_onestop_message);

                               IF v_ic_onestop_sysconf_st = 0 --no deduction for one-stop policy
                               THEN
                                  SELECT   s.comm_date
                                    INTO   v_comm_date
                                    FROM   ins_p_summery s
                                   WHERE   s.pgid = rec_agent_com.pgid;

                                  IF v_comm_date = rec_agent_com.prem_due_dt
                                  THEN
                                     SELECT   MAX (active_office_cd)
                                       INTO   v_active_office_cd
                                       FROM   acc_advance_receivables
                                      WHERE   pgid = rec_agent_com.pgid AND rec_status = 1;
                                      
                                     IF v_active_office_cd = '23717'
                                      THEN
                                         v_onestop_ded := 0;
                                         v_ded_flag := 0;
                                      ELSE
                                         v_onestop_ded := 1;
                                      END IF;
                                  ELSE
                                     v_onestop_ded := 1;
                                     
                                     /*SELECT   active_office_cd
                                       INTO   v_active_office_cd
                                       FROM   acc_receivables
                                      WHERE   pgid = rec_agent_com.pgid AND rec_status = 1
                                              AND rec_agent_com.prem_due_dt BETWEEN due_dt_from
                                                                                AND  due_dt_to;*/
                                  END IF;

                                  
                               ELSE
                                  v_onestop_ded := 1;
                               END IF;
                            EXCEPTION
                               WHEN OTHERS
                               THEN
                                  v_onestop_ded := 1;
                            END;
                            
                          IF v_ded_flag = 1 THEN
                              pro_comm_ded_amt (p_emp_type_cd   => p_emp_type,
                                                p_pgid          => rec_agent_com.pgid,
                                                p_comm_bon_year => rec_agent_com.comm_bon_year,
                                                p_payable_amount => v_payable_amt,
                                                p_ded_rate      => v_ded_rate,
                                                p_ded_amt       => v_ded_amt,
                                                p_error         => v_ded_error);
                          ELSE
                             v_ded_amt := 0;
                          END IF;

                          IF v_ded_amt > 0 AND v_ded_error IS NULL
                          THEN
                             v_tot_ded_amount := NVL(v_tot_ded_amount, 0) + v_ded_amt;
                             
                             INSERT INTO com_dev_emp_comm_ded (comm_no,
                                                               emp_gid,
                                                               pgid,
                                                               prem_due_dt,
                                                               earning_cd,
                                                               prem_year,
                                                               payable_amount,
                                                               deduction_amount,
                                                               comm_ded_rate,
                                                               comm_ded_date,
                                                               i_usr,
                                                               i_dt)
                               VALUES   (v_comm_no,
                                         rec_emp.employee_gid,
                                         rec_agent_com.pgid,
                                         rec_agent_com.prem_due_dt,
                                         rec_earn.earning_cd,
                                         rec_agent_com.comm_bon_year,
                                         v_payable_amt,
                                         v_ded_amt,
                                         v_ded_rate,
                                         p_com_cal_dt_to,
                                         p_user,
                                         SYSDATE);
                          END IF;
                       ELSIF rec_agent_com.comm_bon_year = 2 AND p_emp_type IN ('06', '07') AND rec_earn.earning_cd <> '08'
                       THEN
                          null;
                          /*pro_comm_paid_ded_amt (
                             p_emp_type_cd     => p_emp_type,
                             p_pgid            => rec_agent_com.pgid,
                             p_prem_due_date   => rec_agent_com.prem_due_dt,
                             p_int_calc_date   => p_com_cal_dt_to,
                             p_paid_ded_amt    => v_paid_ded_amt,
                             p_paid_int_rate   => v_paid_int_rate,
                             p_paid_int_amt    => v_paid_int_amt,
                             p_error           => v_paid_ded_error
                          );

                          IF v_paid_ded_amt > 0 AND v_paid_ded_error IS NULL
                          THEN
                             v_tot_paid_ded_amount      := NVL(v_tot_paid_ded_amount, 0) + v_paid_ded_amt;
                             v_tot_paid_interest_amt    := NVL(v_tot_paid_interest_amt, 0) + NVL(v_paid_int_amt, 0);
                             
                             UPDATE   com_dev_emp_comm_ded
                                SET   bill_no = v_comm_no
                              WHERE   pgid = rec_agent_com.pgid AND bill_no IS NULL;
                          END IF;*/
                       END IF;
                     --End of IC Commission Calculation--
                     
                     /*--Generate PK
                     SELECT acc_dev_emp_comm_no.NEXTVAL
                          INTO v_comm_no
                          FROM DUAL;*/
                          
                     /*SELECT TO_NUMBER (   TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                       || LPAD (  NVL (MAX (SUBSTR (comm_no,
                                                                    5)
                                                           ),
                                                       0
                                                      )
                                                + 1,
                                                8,
                                                0
                                               )
                                      )
                       INTO v_comm_no
                       FROM com_dev_emp_comm
                      WHERE SUBSTR (comm_no, 1, 4) =
                                             TO_CHAR (p_com_cal_dt_to, 'rrmm');*/

                     --Account Integration--
                     /*IF p_ins_tp_cd = 1
                     THEN
                        --Conventional Insurance
                        v_trans_item_comm_pay := 20;     --Commission Payable
                        --v_trans_item_tax_pay    := 11;  --Tax Payable
                        v_trans_item_comm := 9;              --Commission amt
                     ELSE
                        --Takaful Insurance
                        v_trans_item_comm_pay := 108;    --Commission Payable
                        --v_trans_item_tax_pay    := 106;  --Tax Payable
                        v_trans_item_comm := 105;            --Commission amt
                     END IF;*/
                     IF p_ins_tp_cd = 1
                     THEN
                        IF p_emp_type = '06'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 197; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 184;         --Commission amt
                        ELSIF p_emp_type = '07'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 198; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 185;         --Commission amt
                        ELSIF p_emp_type = '08'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 199; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 186;         --Commission amt
                        ELSIF p_emp_type = '09'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 200; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 187;         --Commission amt
                        ELSIF p_emp_type = '11'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 201; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 188;         --Commission amt
                        ELSIF p_emp_type = '10'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 203; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 190;         --Commission amt
                        ELSIF p_emp_type = '12'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 202; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 189;         --Commission amt
                        
                        ELSIF p_emp_type = '14'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 240;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 238;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 244;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 242;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 248;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 246;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 252;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 250;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 256;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 254;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 260;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 258;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 264;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 262;      --Commission amt   
                        END IF;
                     ELSE
                        IF p_emp_type = '06'
                        THEN
                           --Takaful Insurance
                           v_trans_item_comm_pay := 204; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 191;         --Commission amt
                        ELSIF p_emp_type = '07'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 205; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 192;         --Commission amt
                        ELSIF p_emp_type = '08'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 206; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 193;         --Commission amt
                        ELSIF p_emp_type = '09'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 207; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 194;         --Commission amt
                        ELSIF p_emp_type = '11'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 208; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 195;         --Commission amt
                        ELSIF p_emp_type = '10'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 210; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 196;         --Commission amt
                        ELSIF p_emp_type = '12'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 209; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 211;         --Commission amt
                        
                        ELSIF p_emp_type = '14'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 241;
                                                         --Commission Payable
                              v_trans_item_comm := 239;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 245;
                                                         --Commission Payable
                              v_trans_item_comm := 243;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 249;
                                                         --Commission Payable
                              v_trans_item_comm := 247;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 253;
                                                         --Commission Payable
                              v_trans_item_comm := 251;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 257;
                                                         --Commission Payable
                              v_trans_item_comm := 255;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 261;
                                                         --Commission Payable
                              v_trans_item_comm := 259;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 265;
                                                         --Commission Payable
                              v_trans_item_comm := 263;      --Commission amt   
                        END IF;
                     END IF;

                     /********************************************************
                     This part is added by MD. Sayadur Rahaman  on 14/Feb-2013
                     Purpose: Accounts Integration
                     *********************************************************/
                     v_regional_off :=
                                     fun_find_regional_off (rec_emp.office_cd);

                     ----------Find payable office-----------
                     --Musha on 01.06.2016
                     BEGIN
                        SELECT fun_find_sales_off (rec_emp.office_cd)
                          INTO v_payable_off
                          FROM DUAL;

                        IF v_payable_off IS NULL
                        THEN
                           SELECT fun_find_service_off (rec_emp.office_cd)
                             INTO v_payable_off
                             FROM DUAL;

                           IF v_payable_off IS NULL
                           THEN
                              SELECT fun_find_head_off (rec_emp.office_cd)
                                INTO v_payable_off
                                FROM DUAL;
                           END IF;
                        END IF;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           v_payable_off := rec_emp.office_cd;
                     END;

                     --End of find payable office--
                     DECLARE
                        recprem          pkg_gl_voucher.t_trans_tab;
                        v_error          VARCHAR2 (200);
                        v_object_cd      gen_object_info.object_cd%TYPE;
                        v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
                        v_inter_off_st   CHAR (1);
                        v_office_cd      hrm_office.office_cd%TYPE;
                        v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
                        v_trans_date     DATE;
                        v_cost_center    hrm_office.office_cd%TYPE;
                        v_narration      VARCHAR2 (200);
                        v_user           VARCHAR2 (20);
                        v_chq_tp         VARCHAR2 (3);
                        v_chq_no         VARCHAR2 (50);
                        v_chq_dt         DATE;
                        v_sus_amt_used   NUMBER (1);
                     BEGIN
                        /***********************
                        Business wise value will change.
                        Developer will put the value
                        **********************************/
                        v_object_cd := p_object_cd;
                        v_voucher_cd := '05';
                        v_inter_off_st := '0';
                        v_office_cd := v_regional_off;
                        v_cost_center := v_payable_off;
                        --rec_emp.office_cd;    ---Musha on 01.06.2016
                        v_trans_id :=
                              rec_emp.employee_gid
                           || rec_emp.office_cd
                           || TO_CHAR (p_com_cal_dt_to, 'DDMMRR');
                        v_trans_date := p_com_cal_dt_to;
                        v_narration :=
                              'Employee Commission Payable Calculation on '
                           || p_com_cal_dt_to;
                        v_user := p_user;
/*******End********/

                        --commission
                        recprem (2).trans_item_cd := v_trans_item_comm;
                        recprem (2).post_amount := v_payable_amt;
                        recprem (2).chq_tp := NULL;
                        recprem (2).chq_no := NULL;
                        recprem (2).chq_dt := NULL;
                        --commission payable
                        recprem (1).trans_item_cd := v_trans_item_comm_pay;
                        recprem (1).post_amount := v_payable_amt;
                        recprem (1).chq_tp := NULL;
                        recprem (1).chq_no := NULL;
                        recprem (1).chq_dt := NULL;
                        
                        IF v_paid_ded_amt > 0 THEN
                            --Paid deduction
                            IF p_emp_type = '06' THEN
                                recprem (3).trans_item_cd := 228;
                            ELSIF p_emp_type = '07' THEN
                                recprem (3).trans_item_cd := 229;
                            END IF;
                            recprem (3).post_amount := v_paid_ded_amt;
                            recprem (3).chq_tp := NULL;
                            recprem (3).chq_no := NULL;
                            recprem (3).chq_dt := NULL;
                            
                            --Paid interest of deduction
                            IF v_paid_int_amt > 0 THEN
                                IF p_emp_type = '06' THEN
                                    recprem (4).trans_item_cd := 225;
                                ELSIF p_emp_type = '07' THEN
                                    recprem (4).trans_item_cd := 226;
                                END IF;
                                recprem (4).post_amount := v_paid_int_amt;
                                recprem (4).chq_tp := NULL;
                                recprem (4).chq_no := NULL;
                                recprem (4).chq_dt := NULL;
                            END IF;
                        END IF;
            
                        pkg_gl_voucher.pro_voucher_posting
                                            (p_table             => recprem,
                                             p_object_cd         => v_object_cd,
                                             p_vouch_cd          => v_voucher_cd,
                                             p_inter_off_st      => v_inter_off_st,
                                             p_office_cd         => v_office_cd,
                                             p_trans_id          => v_trans_id,
                                             p_trans_date        => v_trans_date,
                                             p_cost_center       => v_cost_center,
                                             p_narration         => v_narration,
                                             p_user              => v_user,
                                             p_ins_tp_cd         => p_ins_tp_cd,
                                             p_voucher_no        => v_payable_vr_no,
                                             p_error             => v_acc_error
                                            );
                                            
                           --IC Voucher--
                            IF v_ded_amt > 0 THEN
                                DECLARE
                                    recprem1          pkg_gl_voucher.t_trans_tab;                        
                                 BEGIN
                                    IF p_emp_type = '06' THEN
                                        recprem1 (1).trans_item_cd := 219;
                                    ELSIF p_emp_type = '07' THEN
                                        recprem1 (1).trans_item_cd := 220;
                                    END IF;
                                    recprem1 (1).post_amount := v_ded_amt;
                                    recprem1 (1).chq_tp := NULL;
                                    recprem1 (1).chq_no := NULL;
                                    recprem1 (1).chq_dt := NULL;

                                    --commission
                                    IF p_emp_type = '06' THEN
                                        recprem1 (2).trans_item_cd := 222;
                                    ELSIF p_emp_type = '07' THEN
                                        recprem1 (2).trans_item_cd := 223;
                                    END IF;
                                    recprem1 (2).post_amount := v_ded_amt;
                                    recprem1 (2).chq_tp := NULL;
                                    recprem1 (2).chq_no := NULL;
                                    recprem1 (2).chq_dt := NULL;

                                    pkg_gl_voucher.pro_voucher_posting (
                                       p_table          => recprem1,
                                       p_object_cd      => v_object_cd,
                                       p_vouch_cd       => '05',
                                       p_inter_off_st   => 0,
                                       p_office_cd      => v_office_cd,
                                       p_trans_id       => v_trans_id,
                                       p_trans_date     => v_trans_date,
                                       p_cost_center    => v_cost_center,
                                       p_narration      => 'UM/BM IC Payable',
                                       p_user           => v_user,
                                       p_ins_tp_cd      => p_ins_tp_cd,
                                       p_voucher_no     => v_ic_voucher_no,
                                       p_error          => v_ic_vr_error
                                    );
                                 END;
                            END IF;
                           --End of IC Voucher--
                     END;

                     --End of Account Integration--
                     IF v_acc_error IS NULL
                     THEN                                               
                        
                        INSERT INTO com_dev_emp_comm
                                    (comm_no, emp_gid,
                                     office_cd, pgid,
                                     prem_due_dt,
                                     earning_cd,
                                     earning_type, com_calc_dt_to,
                                     prem_year,
                                     payable_amount, payable_vouch_dt,
                                     com_payable_vou, fy_start_dt,
                                     fy_end_dt, bill_status, ins_tp_cd,
                                     pay_rate,
                                     receive_date,
                                     agent_id,
                                     agent_office_cd, i_usr,
                                     i_dt, payable_office_cd,
                                     comm_ded_rate,
                                     comm_ded_amt,
                                     paid_ded_amount, paid_interest_amt, paid_interest_rate,
                                     ic_payable_vouch_no
                                    )
                             VALUES (v_comm_no,                      --comm_NO
                                               rec_emp.employee_gid, --emp_gid
                                     rec_emp.office_cd,            --OFFICE_CD
                                                       rec_agent_com.pgid,
                                     --PGID
                                     rec_agent_com.prem_due_dt,  --PREM_DUE_DT
                                     rec_earn.earning_cd,         --EARNING_CD
                                     rec_earn.earning_type,
                                                           --EARNING_TYPE
                                                           p_com_cal_dt_to,
                                     --COM_CALC_DT_TO
                                     rec_agent_com.comm_bon_year,
                                     --Prem_YEAR
                                     v_payable_amt,
                                                   --PAYABLE_AMOUNT
                                                   v_payable_vr_dt,
                                     --PAYABLE_VOUCH_DT
                                     v_payable_vr_no,
                                                     --COM_PAYABLE_VOU
                                                     p_fy_start_dt,
                                     --fy_START_Dt
                                     p_fy_end_dt, 
                                                  --fy_END_Dt
                                     '0',                        --BILL_STATUS
                                         p_ins_tp_cd,
                                     rec_earn.payable_pct * 100,
                                     rec_agent_com.receive_date,
                                     rec_agent_com.agent_id,
                                     rec_agent_com.office_cd, p_user,
                                     --I_USR
                                     SYSDATE,                           --I_DT
                                             v_payable_off,
                                       v_ded_rate,
                                       v_ded_amt,
                                       v_paid_ded_amt, v_paid_int_amt, v_paid_int_rate,
                                       v_ic_voucher_no
                                    );

                        p_record_count := NVL (p_record_count, 0) + 1;
                     END IF;
                  END IF;
               --*************************End of Insert data into table**********************--
               END LOOP;
            --====================================================
            ---Add this condition by Musha on 07.03.2022 
            ELSIF rec_earn.calc_on = 'M'
               THEN
                  --Find office wise month open and close date--
                  pro_off_months_setup (p_office_cd     => p_office_cd,
                                        p_year_month    => p_year_month,
                                        p_month_st_dt   => v_month_start_dt,
                                        p_month_ed_dt   => v_month_end_dt,
                                        p_error         => v_month_setup_error);

                  IF v_month_start_dt IS NULL AND v_month_setup_error IS NULL
                  THEN
                     v_month_start_dt := TO_DATE (p_year_month || '01', 'RRRRMMDD');
                     v_month_end_dt := LAST_DAY (v_month_start_dt);
                  END IF;

                  IF NVL (p_prev_year_comm_st, 0) = 0
                  THEN
                     v_month_end_dt := p_com_cal_dt_to;
                  END IF;

                  --Toral collected premium on per month
                  IF '1' = '1'
                  ----p_com_cal_dt_to = v_month_end_dt --last_day(p_com_cal_dt_to)
                  THEN
                     --Check for the month end

                     v_earn_cnt := 0;

                     IF v_earn_cnt = 0
                     THEN
                        --Not yet calculated for the employee
                        IF rec_earn.amount_depnt = '1' AND rec_earn.payable_pct IS NULL
                        THEN
                           NULL;
                        ELSIF rec_earn.term_depnt = '1'
                        THEN
                           SELECT   SUM (c.payable_amount)
                             INTO   v_tot_comm_amt
                             FROM   com_agent_com_detail c, ins_p_summery s
                            WHERE   c.ins_tp_cd = p_ins_tp_cd
                                    AND NVL (c.service_charge_st, '0') = '0'
                                    AND c.com_exe_date BETWEEN v_month_start_dt
                                                             AND  v_month_end_dt
                                    AND c.comm_bon_year BETWEEN rec_earn.paid_yr_from
                                                        AND  rec_earn.paid_yr_to
                                    AND c.bill_status = '1'
                                    AND c.pgid = s.pgid
                                    ---musha on 19.10.2016
                                    AND ( (rec_earn.setup_option = 'G'
                                           AND s.product_cd NOT IN ('09', '16', '39'))
                                         OR (rec_earn.setup_option = 'P'
                                             AND s.product_cd IN
                                                      (SELECT   product_cd
                                                         FROM   com_dev_earning_setup_mst
                                                        WHERE   emp_type_cd =
                                                                   rec_emp.emp_type_cd
                                                                AND service_cd =
                                                                      rec_emp.service_cd
                                                                AND earning_cd =
                                                                      rec_earn.earning_cd)))
                                    AND ( (c.prem_due_dt = s.comm_date
                                           AND fun_comm_calc_st (
                                                 p_business_id   => 1,
                                                 --1 for one stop policy
                                                 p_emp_type_cd   => NULL,
                                                 p_emp_gid       => NULL,
                                                 p_pgid          => s.pgid
                                              ) = 1)
                                         OR c.prem_due_dt <> s.comm_date)
                                    AND DECODE (p_emp_type,
                                                 '14',
                                                 C.AGM_EMP_GID,
                                                 '15',
                                                 C.DGM_EMP_GID,
                                                 '16',
                                                 C.GM_EMP_GID) = rec_emp.employee_gid
                                    /*AND EXISTS
                                          (SELECT   g.agent_id
                                             FROM   hrm_agent g
                                            WHERE   g.agent_id = c.agent_id
                                                    AND g.dev_emp_gid IN
                                                             (    SELECT   e.emp_gid
                                                                    FROM   hrm_employee e,
                                                                           hrm_employee_setup s
                                                                   WHERE   e.employment_tp_cd =
                                                                              '02'
                                                                           AND e.emp_gid =
                                                                                 s.employee_gid(+)
                                                              START WITH   s.h_employee_gid =
                                                                              rec_emp.employee_gid
                                                              CONNECT BY   PRIOR s.employee_gid =
                                                                              s.h_employee_gid))*/
                                    AND TO_NUMBER(s.term) BETWEEN TO_NUMBER (rec_earn.term_from)
                                                   AND  TO_NUMBER (rec_earn.term_to)
                                    AND NOT EXISTS
                                          (SELECT   1
                                             FROM   com_earning_head h
                                            WHERE   h.chain_gap_emp_tp_cd IS NOT NULL
                                                    AND h.earning_cd = c.earning_cd)
                                    AND NOT EXISTS
                                          (SELECT   1
                                             FROM   com_dev_emp_bonus_comm_dtl d,
                                                    com_dev_emp_bonus_comm f,
                                                    com_earning_head h
                                            WHERE   d.payable_no = f.payable_no
                                                    AND h.earning_cd =
                                                          rec_earn.earning_cd
                                                    AND f.earning_cd =
                                                          rec_earn.earning_cd
                                                    AND d.fa_comm_no = c.fa_comm_no
                                                    AND (f.emp_gid = rec_emp.employee_gid
                                                         /*OR f_emp_type_cd (f.emp_gid) =
                                                              f_emp_type_cd (
                                                                 rec_emp.employee_gid
                                                              )*/)) --add by musha on 21.03.2017
                                    ;

                           v_payable_amt :=
                              ROUND (NVL ( (v_tot_comm_amt * rec_earn.payable_pct), 0),
                                     2);
                        END IF;

                        --*************************Insert data into table**********************--
                        --============================--
                        --Round Amount--Add by Musha on 29.09.2020
                        pro_get_sys_config_st (p_pgid            => NULL,
                                               p_config_id       => 43,
                                               p_sys_config_st   => v_sys_config_st,
                                               p_upd_message     => v_upd_message);

                        IF v_sys_config_st = 1
                        THEN
                           v_payable_amt := ROUND (v_payable_amt);
                        END IF;

                        --============================--

                        IF v_payable_amt > 0
                        THEN
                           --Generate PK
                           SELECT   TO_NUMBER(TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                              || LPAD (
                                                    NVL (MAX (SUBSTR (payable_no, 5)), 0)
                                                    + 1,
                                                    8,
                                                    0
                                                 ))
                             INTO   v_comm_no
                             FROM   com_dev_emp_bonus_comm
                            WHERE   SUBSTR (payable_no, 1, 4) =
                                       TO_CHAR (p_com_cal_dt_to, 'rrmm');

                           --Account Integration--

                           IF p_ins_tp_cd = 1
                           THEN
                              IF p_emp_type = '06'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 197;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 184;                --Commission amt
                              ELSIF p_emp_type = '07'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 198;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 185;                --Commission amt
                              ELSIF p_emp_type = '08'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 199;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 186;                --Commission amt
                              ELSIF p_emp_type = '09'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 200;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 187;                --Commission amt
                              ELSIF p_emp_type = '10'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 203;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 190;                --Commission amt
                              ELSIF p_emp_type = '11'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 201;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 188;                --Commission amt
                              ELSIF p_emp_type = '12'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 202;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 189;                --Commission amt
                              ELSIF p_emp_type = '14'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 240;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 238;                --Commission amt
                              ELSIF p_emp_type = '15'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 244;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 242;                --Commission amt
                              ELSIF p_emp_type = '16'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 248;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 246;                --Commission amt
                              ELSIF p_emp_type = '17'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 252;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 250;                --Commission amt
                              ELSIF p_emp_type = '18'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 256;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 254;                --Commission amt
                              ELSIF p_emp_type = '19'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 260;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 258;                --Commission amt
                              ELSIF p_emp_type = '20'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 264;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 262;                --Commission amt
                              END IF;
                           ELSE
                              IF p_emp_type = '06'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 204;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 191;                --Commission amt
                              ELSIF p_emp_type = '07'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 205;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 192;                --Commission amt
                              ELSIF p_emp_type = '08'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 206;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 193;                --Commission amt
                              ELSIF p_emp_type = '09'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 207;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 194;                --Commission amt
                              ELSIF p_emp_type = '11'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 208;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 195;                --Commission amt
                              ELSIF p_emp_type = '10'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 210;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 196;                --Commission amt
                              ELSIF p_emp_type = '12'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 209;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 211;                --Commission amt
                              ELSIF p_emp_type = '14'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 241;
                                 --Commission Payable
                                 v_trans_item_comm := 239;                --Commission amt
                              ELSIF p_emp_type = '15'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 245;
                                 --Commission Payable
                                 v_trans_item_comm := 243;                --Commission amt
                              ELSIF p_emp_type = '16'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 249;
                                 --Commission Payable
                                 v_trans_item_comm := 247;                --Commission amt
                              ELSIF p_emp_type = '17'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 253;
                                 --Commission Payable
                                 v_trans_item_comm := 251;                --Commission amt
                              ELSIF p_emp_type = '18'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 257;
                                 --Commission Payable
                                 v_trans_item_comm := 255;                --Commission amt
                              ELSIF p_emp_type = '19'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 261;
                                 --Commission Payable
                                 v_trans_item_comm := 259;                --Commission amt
                              ELSIF p_emp_type = '20'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 265;
                                 --Commission Payable
                                 v_trans_item_comm := 263;                --Commission amt
                              END IF;
                           END IF;

                           /********************************************************
                           This part is added by MD. Sayadur Rahaman  on 14/Feb-2013
                           Purpose: Accounts Integration
                           *********************************************************/
                           v_regional_off := fun_find_regional_off (rec_emp.office_cd);

                           ----------Find payable office-----------
                           --Musha on 01.06.2016
                           BEGIN
                              SELECT   fun_find_sales_off (rec_emp.office_cd)
                                INTO   v_payable_off
                                FROM   DUAL;

                              IF v_payable_off IS NULL
                              THEN
                                 SELECT   fun_find_service_off (rec_emp.office_cd)
                                   INTO   v_payable_off
                                   FROM   DUAL;

                                 IF v_payable_off IS NULL
                                 THEN
                                    SELECT   fun_find_head_off (rec_emp.office_cd)
                                      INTO   v_payable_off
                                      FROM   DUAL;
                                 END IF;
                              END IF;
                           EXCEPTION
                              WHEN OTHERS
                              THEN
                                 v_payable_off := rec_emp.office_cd;
                           END;

                           --End of find payable office--
                           DECLARE
                              recprem          pkg_gl_voucher.t_trans_tab;
                              v_error          VARCHAR2 (200);
                              v_object_cd      gen_object_info.object_cd%TYPE;
                              v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
                              v_inter_off_st   CHAR (1);
                              v_office_cd      hrm_office.office_cd%TYPE;
                              v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
                              v_trans_date     DATE;
                              v_cost_center    hrm_office.office_cd%TYPE;
                              v_narration      VARCHAR2 (200);
                              v_user           VARCHAR2 (20);
                              v_chq_tp         VARCHAR2 (3);
                              v_chq_no         VARCHAR2 (50);
                              v_chq_dt         DATE;
                              v_sus_amt_used   NUMBER (1);
                           BEGIN
                              /***********************
                              Business wise value will change.
                              Developer will put the value
                              **********************************/
                              v_object_cd := p_object_cd;
                              v_voucher_cd := '05';
                              v_inter_off_st := '0';
                              v_office_cd := v_regional_off;
                              v_cost_center := v_payable_off;
                              --rec_emp.office_cd;    --Musha on 01.06.2016
                              v_trans_id :=
                                    rec_emp.employee_gid
                                 || rec_emp.office_cd
                                 || TO_CHAR (p_com_cal_dt_to, 'DDMMRR');
                              v_trans_date := p_com_cal_dt_to;
                              v_narration :=
                                 'Employee Commission Payable Calculation on '
                                 || p_com_cal_dt_to;
                              v_user := p_user;
                              /*******End********/

                              --commission
                              recprem (2).trans_item_cd := v_trans_item_comm;
                              recprem (2).post_amount := v_payable_amt;
                              recprem (2).chq_tp := NULL;
                              recprem (2).chq_no := NULL;
                              recprem (2).chq_dt := NULL;
                              --commission payable
                              recprem (1).trans_item_cd := v_trans_item_comm_pay;
                              recprem (1).post_amount := v_payable_amt;
                              recprem (1).chq_tp := NULL;
                              recprem (1).chq_no := NULL;
                              recprem (1).chq_dt := NULL;
                              pkg_gl_voucher.pro_voucher_posting (
                                 p_table          => recprem,
                                 p_object_cd      => v_object_cd,
                                 p_vouch_cd       => v_voucher_cd,
                                 p_inter_off_st   => v_inter_off_st,
                                 p_office_cd      => v_office_cd,
                                 p_trans_id       => v_trans_id,
                                 p_trans_date     => v_trans_date,
                                 p_cost_center    => v_cost_center,
                                 p_narration      => v_narration,
                                 p_user           => v_user,
                                 p_ins_tp_cd      => p_ins_tp_cd,
                                 p_voucher_no     => v_payable_vr_no,
                                 p_error          => v_acc_error
                              );
                           END;

                           --End of Account Integration--
                           IF v_acc_error IS NULL
                           THEN
                              INSERT INTO com_dev_emp_bonus_comm (
                                                                     payable_no,
                                                                     emp_gid,
                                                                     office_cd,
                                                                     earning_cd,
                                                                     earning_type,
                                                                     com_calc_dt_to,
                                                                     payable_amount,
                                                                     base_amount,
                                                                     com_payable_vou,
                                                                     fy_start_dt,
                                                                     fy_end_dt,
                                                                     bill_status,
                                                                     ins_tp_cd,
                                                                     pay_rate,
                                                                     i_usr,
                                                                     i_dt,
                                                                     payable_office_cd
                                         )
                                VALUES   (
                                             v_comm_no,                          --comm_NO
                                             rec_emp.employee_gid,
                                             --emp_gid
                                             rec_emp.office_cd,                --OFFICE_CD
                                             rec_earn.earning_cd,             --EARNING_CD
                                             rec_earn.earning_type,         --EARNING_TYPE
                                             p_com_cal_dt_to,             --COM_CALC_DT_TO
                                             v_payable_amt,
                                             --PAYABLE_AMOUNT
                                             v_tot_comm_amt,                --base_amount
                                             v_payable_vr_no,
                                             --COM_PAYABLE_VOU
                                             p_fy_start_dt,                  --fy_START_Dt
                                             p_fy_end_dt,
                                             --fy_END_Dt
                                             '0',                            --BILL_STATUS
                                             p_ins_tp_cd,
                                             NVL (rec_earn.payable_pct, v_payable_pct)
                                             * 100,
                                             p_user,                               --I_USR
                                             SYSDATE,                               --I_DT
                                             v_payable_off
                                         );

                              FOR r
                              IN (SELECT   c.fa_comm_no,
                                           c.agent_id,
                                           c.pgid,
                                           c.prem_due_dt,
                                           c.payable_amount,
                                           s.installment_premium
                                    FROM   com_agent_com_detail c, ins_p_summery s
                                   WHERE   c.ins_tp_cd = p_ins_tp_cd
                                           AND NVL (c.service_charge_st, '0') = '0'
                                           AND c.COM_EXE_DATE BETWEEN v_month_start_dt
                                                                    AND  v_month_end_dt
                                           AND c.COMM_BON_YEAR BETWEEN rec_earn.paid_yr_from
                                                               AND  rec_earn.paid_yr_to
                                           AND c.bill_status = '1'
                                           AND c.pgid = s.pgid
                                           ---musha on 19.10.2016
                                           AND ( (rec_earn.setup_option = 'G'
                                                  AND s.product_cd NOT IN
                                                           ('09', '16', '39'))
                                                OR (rec_earn.setup_option = 'P'
                                                    AND s.product_cd IN
                                                             (SELECT   product_cd
                                                                FROM   com_dev_earning_setup_mst
                                                               WHERE   emp_type_cd =
                                                                          rec_emp.emp_type_cd
                                                                       AND service_cd =
                                                                             rec_emp.service_cd
                                                                       AND earning_cd =
                                                                             rec_earn.earning_cd)))
                                           AND ( (c.prem_due_dt = s.comm_date
                                                  AND fun_comm_calc_st (
                                                        p_business_id   => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd   => NULL,
                                                        p_emp_gid       => NULL,
                                                        p_pgid          => s.pgid
                                                     ) = 1)
                                                OR c.prem_due_dt <> s.comm_date)
                                           AND DECODE (p_emp_type,
                                                 '14',
                                                 C.AGM_EMP_GID,
                                                 '15',
                                                 C.DGM_EMP_GID,
                                                 '16',
                                                 C.GM_EMP_GID) = rec_emp.employee_gid
                                           /*AND EXISTS
                                                 (SELECT   g.agent_id
                                                    FROM   hrm_agent g
                                                   WHERE   g.agent_id = c.agent_id
                                                           AND g.dev_emp_gid IN
                                                                    (    SELECT   e.emp_gid
                                                                           FROM   hrm_employee e,
                                                                                  hrm_employee_setup s
                                                                          WHERE   e.employment_tp_cd =
                                                                                     '02'
                                                                                  AND e.emp_gid =
                                                                                        s.employee_gid(+)
                                                                     START WITH   s.h_employee_gid =
                                                                                     rec_emp.employee_gid
                                                                     CONNECT BY   PRIOR s.employee_gid =
                                                                                     s.h_employee_gid))*/
                                           AND TO_NUMBER(s.term) BETWEEN TO_NUMBER (
                                                                 rec_earn.term_from
                                                              )
                                                          AND  TO_NUMBER (rec_earn.term_to)
                                           AND NOT EXISTS
                                                 (SELECT   1
                                                    FROM   com_earning_head h
                                                   WHERE   h.chain_gap_emp_tp_cd IS NOT NULL
                                                           AND h.earning_cd =
                                                                 c.earning_cd)
                                           AND NOT EXISTS
                                                 (SELECT   1
                                                    FROM   com_dev_emp_bonus_comm_dtl d,
                                                           com_dev_emp_bonus_comm f,
                                                           com_earning_head h
                                                   WHERE   d.payable_no = f.payable_no
                                                           AND h.earning_cd =
                                                                 rec_earn.earning_cd
                                                           AND f.earning_cd =
                                                                 rec_earn.earning_cd
                                                           AND d.fa_comm_no =
                                                                 c.fa_comm_no
                                                           AND (f.emp_gid =
                                                                   rec_emp.employee_gid
                                                                /*OR f_emp_type_cd (
                                                                     f.emp_gid
                                                                  ) =
                                                                     f_emp_type_cd(rec_emp.employee_gid)*/)) --add by musha on 21.03.2017
                                           )
                              LOOP
                                 v_dtl_gross_payable_amt :=
                                    ROUND (
                                       r.payable_amount
                                       * NVL (rec_earn.payable_pct, v_payable_pct),
                                       2
                                    );

                                 v_dtl_tax_ded_amt :=
                                    ROUND (v_dtl_gross_payable_amt * 0.075, 2);

                                 IF v_sys_config_st = 1
                                 THEN
                                    v_dtl_gross_payable_amt :=
                                       ROUND (v_dtl_gross_payable_amt);
                                    v_dtl_tax_ded_amt := ROUND (v_dtl_tax_ded_amt);
                                 END IF;

                                 INSERT INTO com_dev_emp_bonus_comm_dtl (
                                                                            payable_no,
                                                                            emp_gid,
                                                                            fa_comm_no,
                                                                            agent_id,
                                                                            pgid,
                                                                            prem_due_date,
                                                                            premium_amt,
                                                                            payable_rate,
                                                                            gross_payable_amt,
                                                                            tax_ded_amt,
                                                                            net_payable_amt,
                                                                            i_usr,
                                                                            i_dt
                                            )
                                   VALUES   (
                                                v_comm_no,
                                                rec_emp.employee_gid,
                                                r.fa_comm_no,
                                                r.agent_id,
                                                r.pgid,
                                                r.prem_due_dt,
                                                r.installment_premium,
                                                NVL (rec_earn.payable_pct, v_payable_pct),
                                                v_dtl_gross_payable_amt,
                                                v_dtl_tax_ded_amt,
                                                v_dtl_gross_payable_amt
                                                - NVL (v_dtl_tax_ded_amt, 0),
                                                p_user,
                                                SYSDATE
                                            );
                              END LOOP;

                              p_record_count := NVL (p_record_count, 0) + 1;
                           END IF;
                        END IF;
                     --*************************End of Insert data into table**********************--
                     ELSE
                        v_payable_amt := 0;
                     END IF;
                  END IF;            
            --====================================================
            END IF;
         ELSIF rec_earn.cal_based_on IN ('3', '4')                --3 UM, 4 BM
         THEN
            --Add by Musha on 18-01-2015
            IF rec_earn.calc_on = 'M'
            THEN
               --Find office wise month open and close date--
               pro_off_months_setup (p_office_cd        => p_office_cd,
                                     p_year_month       => p_year_month,
                                     p_month_st_dt      => v_month_start_dt,
                                     p_month_ed_dt      => v_month_end_dt,
                                     p_error            => v_month_setup_error
                                    );

               IF v_month_start_dt IS NULL AND v_month_setup_error IS NULL
               THEN
                  v_month_start_dt :=
                                   TO_DATE (p_year_month || '01', 'RRRRMMDD');
                  v_month_end_dt := LAST_DAY (v_month_start_dt);
               END IF;

               --Toral Commission on per month
               IF p_com_cal_dt_to = v_month_end_dt --last_day(p_com_cal_dt_to)
               THEN
                  --Check for the month end
                  --Check for the earning already calculated or not--
                  SELECT COUNT (1)
                    INTO v_earn_cnt
                    FROM com_dev_emp_bonus_comm c
                   WHERE c.emp_gid = rec_emp.employee_gid
                     AND c.earning_cd = rec_earn.earning_cd
                     AND c.com_calc_dt_to = p_com_cal_dt_to
                     AND c.ins_tp_cd = p_ins_tp_cd
                     AND DECODE (rec_earn.term_depnt, 1, 1, 0) = '0';

                  IF v_earn_cnt = 0
                  THEN
                     --Not yet calculated for the employee
                     --Find total commission for the month--
                     SELECT NVL (SUM (c.payable_amount), 0)
                       INTO v_tot_comm_amt
                       FROM com_dev_emp_comm c, ins_p_summery s
                      WHERE c.ins_tp_cd = p_ins_tp_cd
                        --AND    to_char(c.com_calc_dt_to, 'RRRRMM') =
                        --    to_char(p_com_cal_dt_to, 'RRRRMM')
                        AND c.com_calc_dt_to BETWEEN v_month_start_dt
                                                 AND v_month_end_dt
                        AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                            AND rec_earn.paid_yr_to
                        AND c.bill_status = '1'         ---Musha on 19.10.2016
                        AND c.emp_gid IN (
                               SELECT emp_gid
                                 FROM (SELECT     e.emp_gid, e.emp_type_cd
                                             FROM hrm_employee e,
                                                  hrm_employee_setup s
                                            WHERE e.employment_tp_cd = '02'
                                              AND e.emp_gid = s.employee_gid(+)
                                       START WITH s.h_employee_gid =
                                                          rec_emp.employee_gid
                                       CONNECT BY PRIOR s.employee_gid =
                                                              s.h_employee_gid)
                                WHERE emp_type_cd =
                                         DECODE (rec_earn.cal_based_on,
                                                 '3', '06',
                                                 '4', '07',
                                                 '00'
                                                ))
                        AND c.pgid = s.pgid;

                     IF     rec_earn.amount_depnt = '1'
                        AND rec_earn.payable_pct IS NULL
                     THEN
                        BEGIN
                           SELECT (d.payable_pct / 100)
                             INTO v_payable_pct
                             FROM com_earning_head h,
                                  com_dev_earning_setup_mst m,
                                  com_dev_earning_setup_dtl d
                            WHERE h.status = '1'
                              AND NVL (m.amount_depnt, 0) = '1'
                              AND m.earning_cd = rec_earn.earning_cd
                              AND h.earning_type = rec_earn.earning_type
                              AND h.earning_cd = m.earning_cd
                              AND m.setupmst_cd = d.setupmst_cd
                              AND m.emp_type_cd = rec_emp.emp_type_cd
                              AND rec_earn.paid_yr_from = h.paid_yr_from
                              AND rec_earn.paid_yr_to = h.paid_yr_to
                              AND m.service_cd = rec_emp.service_cd
                              AND NVL (m.product_cd, '00') =
                                                      NVL (m.product_cd, '00')
                              AND v_tot_comm_amt BETWEEN d.amount_from
                                                     AND d.amount_to;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_pct := 0;
                        END;

                        v_payable_amt :=
                                 ROUND ((v_tot_coll_prem * v_payable_pct), 2);
                     ELSIF rec_earn.term_depnt = '1'
                     THEN
                        /*FOR k IN (SELECT d.term_from
                                        ,d.term_to
                                        ,payable_pct
                                  FROM   com_earning_head          h
                                        ,com_dev_earning_setup_mst m
                                        ,com_dev_earning_setup_dtl d
                                  WHERE  h.status = '1'
                                  AND    h.earning_type =
                                         nvl(p_earning_type, h.earning_type)
                                  AND    h.earning_cd = rec_earn.earning_cd
                                  AND    nvl(m.term_depnt, 0) = '1'
                                  AND    h.earning_cd = m.earning_cd
                                  AND    m.setupmst_cd = d.setupmst_cd
                                  AND    m.emp_type_cd = rec_emp.emp_type_cd
                                  AND    m.service_cd = rec_emp.service_cd)
                        LOOP*/
                        SELECT                --nvl(SUM(c.payable_amount), 0)
                               DECODE
                                    (rec_earn.cal_based_on,
                                     '1', NVL (SUM (s.installment_premium), 0),
                                     '3', NVL (SUM (c.payable_amount), 0),
                                     '4', NVL (SUM (c.payable_amount), 0),
                                     '6', NVL (SUM (s.life_premium), 0),
                                     '7', NVL
                                          (SUM (  s.life_premium
                                                + NVL (s.suppl_ben_premium, 0)
                                                + NVL
                                                     (s.suppl_product_premium,
                                                      0
                                                     )
                                               ),
                                           0
                                          ),
                                     '8', NVL
                                          (SUM (  NVL (s.suppl_ben_premium, 0)
                                                + NVL
                                                     (s.suppl_product_premium,
                                                      0
                                                     )
                                               ),
                                           0
                                          ),
                                     0
                                    )
                          INTO v_tot_comm_amt
                          FROM com_dev_emp_comm c, ins_p_summery s
                         WHERE c.ins_tp_cd = p_ins_tp_cd
                           --AND    to_char(c.com_calc_dt_to, 'RRRRMM') =
                           --     to_char(p_com_cal_dt_to, 'RRRRMM')
                           AND c.com_calc_dt_to BETWEEN v_month_start_dt
                                                    AND v_month_end_dt
                           AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                               AND rec_earn.paid_yr_to
                           AND c.bill_status = '1'      ---Musha on 19.10.2016
                           AND c.emp_gid IN (
                                  SELECT emp_gid
                                    FROM (SELECT     e.emp_gid, e.emp_type_cd
                                                FROM hrm_employee e,
                                                     hrm_employee_setup s
                                               WHERE e.employment_tp_cd = '02'
                                                 AND e.emp_gid = s.employee_gid(+)
                                          START WITH s.h_employee_gid =
                                                          rec_emp.employee_gid
                                          CONNECT BY PRIOR s.employee_gid =
                                                              s.h_employee_gid)
                                   WHERE emp_type_cd =
                                            DECODE (rec_earn.cal_based_on,
                                                    '3', '06',
                                                    '4', '07',
                                                    '00'
                                                   ))
                           AND s.term BETWEEN TO_CHAR (rec_earn.term_from)
                                          AND TO_CHAR (rec_earn.term_to)
                           AND NOT EXISTS (
                                  SELECT 1
                                    FROM com_dev_emp_bonus_comm_dtl d,
                                         com_dev_emp_bonus_comm f,
                                         com_earning_head h
                                   WHERE d.payable_no = f.payable_no
                                     AND h.earning_cd = rec_earn.earning_cd
                                     AND (   f.earning_cd =
                                                           rec_earn.earning_cd
                                          OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                         )
                                     AND d.comm_no = c.comm_no
                                     AND (   f.emp_gid = rec_emp.employee_gid
                                          OR f_emp_type_cd (f.emp_gid) =
                                                f_emp_type_cd
                                                         (rec_emp.employee_gid)
                                          OR (   f.earning_cd <>
                                                           rec_earn.earning_cd
                                              OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                             )
                                         ))       --Add by Musha on 21.03.2017
                           /*(SELECT   1
                              FROM   com_dev_emp_bonus_comm_dtl d,
                                     com_dev_emp_bonus_comm f
                             WHERE   d.payable_no =
                                        f.payable_no
                                     AND rec_earn.earning_cd =
                                           f.earning_cd
                                     AND d.comm_no = c.comm_no
                                     AND d.emp_gid =
                                           rec_emp.employee_gid)*/  --Block by Musha on 21.03.2017
                           AND c.pgid = s.pgid;

                        v_payable_amt :=
                           ROUND (NVL ((v_tot_comm_amt * rec_earn.payable_pct
                                       ),
                                       0
                                      ),
                                  2
                                 );
                     --END LOOP;
                     ELSE
                        v_payable_amt :=
                           ROUND ((v_tot_coll_prem * rec_earn.payable_pct),
                                  2
                                 );
                     END IF;

                     --*************************Insert data into table**********************--
                     --============================--
                    --Round Amount--Add by Musha on 29.09.2020
                    pro_get_sys_config_st (
                               p_pgid            => NULL,
                               p_config_id       => 43,
                               p_sys_config_st   => v_sys_config_st,
                               p_upd_message     => v_upd_message
                            );
                    
                    IF v_sys_config_st = 1 THEN
                        v_payable_amt := ROUND (v_payable_amt);
                    END IF;
                    --============================--
        
                     IF v_payable_amt > 0
                     THEN
                        --Generate PK
                        SELECT TO_NUMBER
                                       (   TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                        || LPAD
                                              (  NVL
                                                    (MAX (SUBSTR (payable_no,
                                                                  5
                                                                 )
                                                         ),
                                                     0
                                                    )
                                               + 1,
                                               8,
                                               0
                                              )
                                       )
                          INTO v_comm_no
                          FROM com_dev_emp_bonus_comm
                         WHERE SUBSTR (payable_no, 1, 4) =
                                             TO_CHAR (p_com_cal_dt_to, 'rrmm');

                        --Account Integration--
                        /* IF p_ins_tp_cd = 1
                         THEN
                            --Conventional Insurance
                            v_trans_item_comm_pay := 20;  --Commission Payable
                            --v_trans_item_tax_pay    := 11;  --Tax Payable
                            v_trans_item_comm := 9;           --Commission amt
                         ELSE
                            --Takaful Insurance
                            v_trans_item_comm_pay := 108; --Commission Payable
                            --v_trans_item_tax_pay    := 106;  --Tax Payable
                            v_trans_item_comm := 105;         --Commission amt
                         END IF;*/
                        IF p_ins_tp_cd = 1
                        THEN
                           IF p_emp_type = '06'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 197;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 184;      --Commission amt
                           ELSIF p_emp_type = '07'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 198;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 185;      --Commission amt
                           ELSIF p_emp_type = '08'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 199;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 186;      --Commission amt
                           ELSIF p_emp_type = '09'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 200;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 187;      --Commission amt
                           ELSIF p_emp_type = '11'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 201;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 188;      --Commission amt
                           ELSIF p_emp_type = '10'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 203;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 190;      --Commission amt
                           ELSIF p_emp_type = '12'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 202;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 189;      --Commission amt
                           
                           ELSIF p_emp_type = '14'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 240;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 238;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 244;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 242;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 248;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 246;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 252;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 250;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 256;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 254;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 260;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 258;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 264;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 262;      --Commission amt   
                           END IF;
                        ELSE
                           IF p_emp_type = '06'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 204;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 191;      --Commission amt
                           ELSIF p_emp_type = '07'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 205;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 192;      --Commission amt
                           ELSIF p_emp_type = '08'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 206;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 193;      --Commission amt
                           ELSIF p_emp_type = '09'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 207;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 194;      --Commission amt
                           ELSIF p_emp_type = '11'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 208;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 195;      --Commission amt
                           ELSIF p_emp_type = '10'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 210;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 196;      --Commission amt
                           ELSIF p_emp_type = '12'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 209;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 211;      --Commission amt
                           
                           ELSIF p_emp_type = '14'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 241;
                                                         --Commission Payable
                              v_trans_item_comm := 239;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 245;
                                                         --Commission Payable
                              v_trans_item_comm := 243;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 249;
                                                         --Commission Payable
                              v_trans_item_comm := 247;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 253;
                                                         --Commission Payable
                              v_trans_item_comm := 251;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 257;
                                                         --Commission Payable
                              v_trans_item_comm := 255;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 261;
                                                         --Commission Payable
                              v_trans_item_comm := 259;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 265;
                                                         --Commission Payable
                              v_trans_item_comm := 263;      --Commission amt   
                           END IF;
                        END IF;

                        /********************************************************
                        This part is added by MD. Sayadur Rahaman  on 14/Feb-2013
                        Purpose: Accounts Integration
                        *********************************************************/
                        v_regional_off :=
                                     fun_find_regional_off (rec_emp.office_cd);

                        ----------Find payable office-----------
                        --Musha on 01.06.2016
                        BEGIN
                           SELECT fun_find_sales_off (rec_emp.office_cd)
                             INTO v_payable_off
                             FROM DUAL;

                           IF v_payable_off IS NULL
                           THEN
                              SELECT fun_find_service_off (rec_emp.office_cd)
                                INTO v_payable_off
                                FROM DUAL;

                              IF v_payable_off IS NULL
                              THEN
                                 SELECT fun_find_head_off (rec_emp.office_cd)
                                   INTO v_payable_off
                                   FROM DUAL;
                              END IF;
                           END IF;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_off := rec_emp.office_cd;
                        END;

                        --End of find payable office--
                        DECLARE
                           recprem          pkg_gl_voucher.t_trans_tab;
                           v_error          VARCHAR2 (200);
                           v_object_cd      gen_object_info.object_cd%TYPE;
                           v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
                           v_inter_off_st   CHAR (1);
                           v_office_cd      hrm_office.office_cd%TYPE;
                           v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
                           v_trans_date     DATE;
                           v_cost_center    hrm_office.office_cd%TYPE;
                           v_narration      VARCHAR2 (200);
                           v_user           VARCHAR2 (20);
                           v_chq_tp         VARCHAR2 (3);
                           v_chq_no         VARCHAR2 (50);
                           v_chq_dt         DATE;
                           v_sus_amt_used   NUMBER (1);
                        BEGIN
                           /***********************
                           Business wise value will change.
                           Developer will put the value
                           **********************************/
                           v_object_cd := p_object_cd;
                           v_voucher_cd := '05';
                           v_inter_off_st := '0';
                           v_office_cd := v_regional_off;
                           v_cost_center := v_payable_off;
                           --rec_emp.office_cd;  --Musha on 01.06.2016
                           v_trans_id :=
                                 rec_emp.employee_gid
                              || rec_emp.office_cd
                              || TO_CHAR (p_com_cal_dt_to, 'DDMMRR');
                           v_trans_date := p_com_cal_dt_to;
                           v_narration :=
                                 'Employee Commission Payable Calculation on '
                              || p_com_cal_dt_to;
                           v_user := p_user;
/*******End********/

                           --commission
                           recprem (2).trans_item_cd := v_trans_item_comm;
                           recprem (2).post_amount := v_payable_amt;
                           recprem (2).chq_tp := NULL;
                           recprem (2).chq_no := NULL;
                           recprem (2).chq_dt := NULL;
                           --commission payable
                           recprem (1).trans_item_cd := v_trans_item_comm_pay;
                           recprem (1).post_amount := v_payable_amt;
                           recprem (1).chq_tp := NULL;
                           recprem (1).chq_no := NULL;
                           recprem (1).chq_dt := NULL;
                           pkg_gl_voucher.pro_voucher_posting
                                            (p_table             => recprem,
                                             p_object_cd         => v_object_cd,
                                             p_vouch_cd          => v_voucher_cd,
                                             p_inter_off_st      => v_inter_off_st,
                                             p_office_cd         => v_office_cd,
                                             p_trans_id          => v_trans_id,
                                             p_trans_date        => v_trans_date,
                                             p_cost_center       => v_cost_center,
                                             p_narration         => v_narration,
                                             p_user              => v_user,
                                             p_ins_tp_cd         => p_ins_tp_cd,
                                             p_voucher_no        => v_payable_vr_no,
                                             p_error             => v_acc_error
                                            );
                        END;

                        --End of Account Integration--
                        IF v_acc_error IS NULL
                        THEN
                           INSERT INTO com_dev_emp_bonus_comm
                                       (payable_no, emp_gid,
                                        office_cd,
                                        earning_cd,
                                        earning_type,
                                        com_calc_dt_to, payable_amount,
                                        base_amount, com_payable_vou,
                                        fy_start_dt, fy_end_dt, bill_status,
                                        ins_tp_cd,
                                        pay_rate,
                                        i_usr, i_dt, payable_office_cd
                                       )
                                VALUES (v_comm_no,                   --comm_NO
                                                  rec_emp.employee_gid,
                                        --emp_gid
                                        rec_emp.office_cd,         --OFFICE_CD
                                        rec_earn.earning_cd,      --EARNING_CD
                                        rec_earn.earning_type,  --EARNING_TYPE
                                        p_com_cal_dt_to,      --COM_CALC_DT_TO
                                                        v_payable_amt,
                                        --PAYABLE_AMOUNT
                                        v_tot_coll_prem,         --base_amount
                                                        v_payable_vr_no,
                                        --COM_PAYABLE_VOU
                                        p_fy_start_dt,           --fy_START_Dt
                                                      p_fy_end_dt, 
                                                                   --fy_END_Dt
                                        '0',                     --BILL_STATUS
                                        p_ins_tp_cd,
                                          NVL (rec_earn.payable_pct,
                                               v_payable_pct
                                              )
                                        * 100,
                                        p_user,                        --I_USR
                                               SYSDATE,                 --I_DT
                                                       v_payable_off
                                       );

                           FOR r IN
                              (SELECT c.comm_no, c.emp_gid, c.pgid,
                                      c.prem_due_dt, s.installment_premium
                                 FROM com_dev_emp_comm c, ins_p_summery s
                                WHERE c.ins_tp_cd = p_ins_tp_cd
                                  AND TO_CHAR (c.com_calc_dt_to, 'RRRRMM') =
                                           TO_CHAR (p_com_cal_dt_to, 'RRRRMM')
                                  AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                                      AND rec_earn.paid_yr_to
                                  AND c.bill_status =
                                                     '1'
                                                        ---Musha on 19.10.2016
                                  AND c.emp_gid IN (
                                         SELECT emp_gid
                                           FROM (SELECT     e.emp_gid,
                                                            e.emp_type_cd
                                                       FROM hrm_employee e,
                                                            hrm_employee_setup s
                                                      WHERE e.employment_tp_cd =
                                                                          '02'
                                                        AND e.emp_gid = s.employee_gid(+)
                                                 START WITH s.h_employee_gid =
                                                               rec_emp.employee_gid
                                                 CONNECT BY PRIOR s.employee_gid =
                                                               s.h_employee_gid)
                                          WHERE emp_type_cd =
                                                   DECODE
                                                       (rec_earn.cal_based_on,
                                                        '3', '06',
                                                        '4', '07',
                                                        '00'
                                                       ))
                                  AND s.term BETWEEN TO_CHAR
                                                           (rec_earn.term_from)
                                                 AND TO_CHAR (rec_earn.term_to)
                                  AND c.pgid = s.pgid)
                           LOOP
                              INSERT INTO com_dev_emp_bonus_comm_dtl
                                          (payable_no, emp_gid,
                                           comm_no, subord_emp_gid, pgid,
                                           prem_due_date, premium_amt, payable_rate,
                                           gross_payable_amt, tax_ded_amt, 
                                           net_payable_amt, i_usr, i_dt
                                          )
                                   VALUES (v_comm_no, rec_emp.employee_gid,
                                           r.comm_no, r.emp_gid, r.pgid,
                                           r.prem_due_dt, r.installment_premium, NVL (rec_earn.payable_pct, v_payable_pct),
                                           v_dtl_gross_payable_amt, v_dtl_tax_ded_amt,
                                           v_dtl_gross_payable_amt - NVL(v_dtl_tax_ded_amt, 0), 
                                           p_user, SYSDATE
                                          );
                           END LOOP;

                           p_record_count := NVL (p_record_count, 0) + 1;
                        END IF;
                     END IF;
                  --*************************End of Insert data into table**********************--
                  ELSE
                     v_payable_amt := 0;
                  END IF;
               END IF;
            END IF;
         END IF;
      END LOOP;

      COMMIT;
   ---old acc integration
   END LOOP;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_error := 'ERROR: Data not found for adjustment process.';
      ROLLBACK;
   WHEN OTHERS
   THEN
      p_error := p_error || ' ERROR: ' || SQLERRM;
      ROLLBACK;
END pro_dev_emp_prem_comm;
/


--
-- PRO_DEV_EMP_PREM_COMM_TEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_dev_emp_prem_comm_temp (
   p_fy_start_dt         IN       DATE,
   p_fy_end_dt           IN       DATE,
   p_office_cd           IN       VARCHAR2,
   p_descendant_off      IN       VARCHAR2,
   p_emp_type            IN       VARCHAR2,
   p_descendant_emp      IN       VARCHAR2,
   p_emp_gid             IN       NUMBER,
   p_earning_type        IN       VARCHAR2,
   p_year_month          IN       NUMBER,
   p_com_cal_dt_to       IN       DATE,
   p_com_yr_dependency   IN       VARCHAR2,
   p_user                IN       VARCHAR2,
   p_object_cd           IN       VARCHAR2,
   p_ins_tp_cd           IN       ins_insurance_type.ins_tp_cd%TYPE,
   p_prev_year_comm_st   IN       NUMBER,
   p_record_count        OUT      NUMBER,
   p_error               OUT      VARCHAR2
)
IS
   /******************************************************************************
      NAME:       pro_daily_prem_calc_commission
      PURPOSE:    Development Employee Commission and Bonus Calculation.

      REVISIONS:
      Ver        Date          Author                  Description
      ---------  ----------    ---------------         ---------------------------
      1.0        08/03/2012    Syed Md. Musha          1. Created this procedure.
      1.2        14/02/2013      Md. Sayadur Rahaman     1. Modification for accounts integration
   ******************************************************************************/
   --v_yrly_no_inst ins_pay_mode.yrly_no_inst%TYPE;
   --v_comm_errm    VARCHAR2(200);
   v_regional_off          hrm_office.office_cd%TYPE;
   v_payable_off           hrm_office.office_cd%TYPE;
   -- for commisiion process error message
   exp_renewal_inc         EXCEPTION;
   -- for renewal income required exception
   exp_prem_depo_gl        EXCEPTION;
   -- for premium deposit suspense required exception
   exp_voucher_creation    EXCEPTION;
   -- for voucher creation exeption
   exp_comm_calc           EXCEPTION;
   -- for commission calculation exception
   exp_late_fee_gl         EXCEPTION;
   -- for late fee gl exception

   ---------------
   v_comm_no               com_dev_emp_comm.comm_no%TYPE;
   v_payable_amt           NUMBER (12, 2)                              := 0;
   v_tot_comm_amt          NUMBER (12, 2)                              := 0;
   v_comm_amt              NUMBER (12, 2)                              := 0;
   v_prev_comm_amt         NUMBER (12, 2)                              := 0;
   v_pram_amount           NUMBER (12, 2)                              := 0;
   v_prev_paid_comm_amt    NUMBER (12, 2)                              := 0;
   v_payable_pct           NUMBER (6, 3)                               := 0;
   v_payable_vr_no         acc_gl_trans_mst.vouch_no%TYPE;
   v_payable_vr_dt         DATE;
   v_tot_coll_prem         NUMBER (12, 2)                              := 0;
   v_earn_cnt              NUMBER (2)                                  := 0;
   v_total_payable_amt     NUMBER (12, 2)                              := 0;
   v_total_1st_comm_amt    NUMBER (12, 2)                              := 0;
   v_total_ren_comm_amt    NUMBER (12, 2)                              := 0;
   v_total_bonus_amt       NUMBER (12, 2)                              := 0;
   v_total_pbc_amt         NUMBER (12, 2)                              := 0;
   ---------
   --v_ins_tp_cd           ins_insurance_type.ins_tp_cd%TYPE;
   v_trans_item_comm_pay   acc_gl_trans_item_info.trans_item_cd%TYPE;
   v_trans_item_comm       acc_gl_trans_item_info.trans_item_cd%TYPE;
   v_acc_error             VARCHAR2 (2000);
   v_emp_type_cd           hrm_emp_type.emp_type_cd%TYPE;
   v_month_start_dt        DATE;
   v_month_end_dt          DATE;
   v_month_setup_error     VARCHAR2 (200);
   v_dev_emp_gid           hrm_employee.emp_gid%TYPE;
   v_tot_coll_prem_rate    NUMBER (12, 2)                              := 0;
                                                       ---Musha on 22.09.2016
   v_incharge_st           VARCHAR2 (2);
   v_coll_prem             NUMBER (12, 2)                              := 0;
                                                       ---Musha on 23.08.2017
   v_dtl_gross_payable_amt NUMBER (12, 2)                              := 0;
   v_dtl_tax_ded_amt       NUMBER (12, 2)                              := 0;
   --------------------------
    v_sys_config_st       NUMBER(1);
    v_upd_message         VARCHAR2(200);
    
    --------------
   v_ded_rate         NUMBER (5, 2);
   v_ded_amt          NUMBER (12, 2);
   v_ded_error        VARCHAR2 (200);

   v_paid_ded_amt     NUMBER (12, 2);
   v_paid_int_rate    NUMBER (5, 2);
   v_paid_int_amt     NUMBER (12, 2);
   v_paid_ded_error   VARCHAR2 (200);
   v_tot_ded_amount          NUMBER (12, 2);
   v_tot_paid_ded_amount     NUMBER (12, 2);
   v_tot_paid_interest_amt   NUMBER (12, 2);
   v_ic_voucher_no           VARCHAR2 (15);
   v_ic_vr_error             VARCHAR2 (200);
   v_ic_onestop_sysconf_st   NUMBER (1);
   v_ic_onestop_message      VARCHAR2 (200);
   v_onestop_ded             NUMBER (1);
   v_comm_date               DATE;
   v_active_office_cd        VARCHAR2 (15);
   v_ded_flag                NUMBER (1) := 1;

   /*select all active development employee for the given office*/
   CURSOR cur_dev_emp
   IS
      SELECT TO_CHAR (e.emp_gid) employee_gid,
             TO_CHAR (s.h_employee_gid) h_employee_gid, e.office_cd,
             e.service_cd, e.emp_type_cd,
             f_off_catg_cd (e.office_cd) off_cat_cd
        FROM hrm_employee e, hrm_employee_setup s
       WHERE e.employment_tp_cd = '02'
         AND e.activity_cd = '01'
         --AND e.employment_st_cd = '00'  --Musha on 01-04-2015 temporary
         AND e.emp_type_cd = p_emp_type
         AND e.emp_gid = NVL (p_emp_gid, e.emp_gid)
         AND e.emp_gid = s.employee_gid(+)
         AND fun_comm_bill_payable_stat (p_emp_type,
                                         NULL,
                                         NVL (p_emp_gid, e.emp_gid),
                                         p_com_cal_dt_to
                                        ) = '1'
         AND (   (    NVL (p_descendant_off, '0') = '0'
                  AND e.office_cd = NVL (p_office_cd, e.office_cd)
                 )
              OR (    NVL (p_descendant_off, '0') = '1'
                  AND e.office_cd IN (
                                  SELECT     office_cd
                                        FROM hrm_office_setup
                                  START WITH office_cd = p_office_cd
                                  CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                 )
             );

   CURSOR cur_earning (
      p_emp_type_cd   hrm_emp_type.emp_type_cd%TYPE,
      p_service_cd    hrm_service_stat.service_cd%TYPE,
      /*p_term          ins_p_summery.term%TYPE,
       p_product_cd    ins_product.product_cd%TYPE,
      p_prem_yr       NUMBER,*/
      p_dev_emp_gid   hrm_employee.emp_gid%TYPE,
      p_off_cat_cd    hrm_office.off_catg_cd%TYPE,
      p_incharge_st   VARCHAR2
   /*,
   p_amount        NUMBER*/
   )
   IS
      SELECT DISTINCT h.earning_cd, h.earning_type, h.paid_yr_from,
                      h.paid_yr_to, h.cal_based_on             --,m.service_cd
                                                  ,
                      m.setup_option, m.calc_on,
                      NVL (m.amount_depnt, 0) amount_depnt,
                      NVL (m.term_depnt, 0) term_depnt,
                      NVL (m.persistency_depnt, 0) persistency_depnt,
                      d.persistency_rate_frm, d.persistency_rate_to,
                      (d.payable_pct / 100) payable_pct,
                      h.chain_gap_emp_tp_cd, d.term_from, d.term_to
                 FROM com_earning_head h,
                      com_dev_earning_setup_mst m,
                      com_dev_earning_setup_dtl d
                WHERE h.status = '1'
                  AND h.earning_type = NVL (p_earning_type, h.earning_type)
                  AND NVL (m.amount_depnt, '0') = '0'
                  --AND    nvl(m.term_depnt, '0') = '0'
                  /*AND (   NVL (m.persistency_depnt, 0) = '0'
                   OR (    NVL (m.persistency_depnt, 0) = '1'
                       AND fun_persistency_rate (p_emp_type_cd,
                                                 p_dev_emp_gid,
                                                 p_com_cal_dt_to
                                                ) BETWEEN d.persistency_rate_frm
                                                      AND d.persistency_rate_to
                      )
                  )*/
                  ---Musha on 09-04-2015 Temporary
                  AND h.earning_cd = m.earning_cd
                  AND m.setupmst_cd = d.setupmst_cd
                  AND m.emp_type_cd = p_emp_type_cd
                  ---Musha on 17.08.2017
                  AND (m.off_catg_cd IS NULL OR m.off_catg_cd = p_off_cat_cd
                      )
                  AND (   m.incharge_status IS NULL
                       OR m.incharge_status = p_incharge_st
                      )
      --AND m.service_cd = p_service_cd ---Musha 04-04-2015
      UNION
      SELECT DISTINCT h.earning_cd, h.earning_type, h.paid_yr_from,
                      h.paid_yr_to, h.cal_based_on             --,m.service_cd
                                                  ,
                      m.setup_option, m.calc_on,
                      NVL (m.amount_depnt, 0) amount_depnt,
                      NVL (m.term_depnt, 0) term_depnt,
                      NULL persistency_depnt, NULL persistency_rate_frm,
                      NULL persistency_rate_to, NULL payable_pct,
                      h.chain_gap_emp_tp_cd, d.term_from, d.term_to
                 FROM com_earning_head h,
                      com_dev_earning_setup_mst m,
                      com_dev_earning_setup_dtl d
                WHERE h.status = '1'
                  AND h.earning_type = NVL (p_earning_type, h.earning_type)
                  AND (NVL (m.amount_depnt, 0) =
                                          '1'
                                             --OR nvl(m.term_depnt, '0') = '1'
                      )
                  AND h.earning_cd = m.earning_cd
                  AND m.setupmst_cd = d.setupmst_cd
                  AND m.emp_type_cd = p_emp_type_cd
                  --AND p_prem_yr BETWEEN h.paid_yr_from AND h.paid_yr_to
                  --AND m.service_cd = p_service_cd   ---Musha 04-04-2015
                  ---Musha on 17.08.2017
                  AND (m.off_catg_cd IS NULL OR m.off_catg_cd = p_off_cat_cd
                      )
                  AND (   m.incharge_status IS NULL
                       OR m.incharge_status = p_incharge_st
                      );

   --This curosr contain agent commission list--
   CURSOR cur_agent_com (
      p_employee_gid   VARCHAR2,
      p_paid_yr_from   NUMBER,
      p_paid_yr_to     NUMBER,
      p_earning_cd     com_earning_head.earning_cd%TYPE,
      p_coll_date_from DATE,   --Add by Musha on 12.04.2021 
      p_coll_date_to   DATE
   )
   IS
      SELECT c.office_cd, c.pgid, c.com_exe_date, c.comm_bon_year,
             c.payable_amount, c.prem_due_dt, c.receive_date, c.agent_id
        FROM (SELECT   l.ins_tp_cd, l.office_cd, l.agent_id, l.pgid,
                       l.com_exe_date, l.comm_bon_year, l.prem_due_dt,
                       l.receive_date, SUM (l.payable_amount) payable_amount
                  FROM com_agent_com_detail l, com_earn_tp t
                 WHERE t.earning_type = 'C'
                   --AND l.ins_tp_cd =NVL(p_ins_tp_cd, l.ins_tp_cd)-----------MODIFIED BY PARAMA BISWAS ON 18/09/2016
                   AND l.ins_tp_cd = p_ins_tp_cd
                   AND l.earning_cd = t.earning_cd
                   AND NVL (l.bill_status, 0) = '1'
--Add by Musha on 24.08.2016: If FA bill completed then Employee's bill will be calculated
                   AND NVL (l.service_charge_st, '0') = '0'
                   ---------------------------------------
                   and not exists (select 1 from ins_p_summery s 
                                    where s.pgid = l.pgid
                                    and s.product_cd in ('09', '16', '39'))
                   ---------------------------------------
                   AND l.com_exe_date <= p_com_cal_dt_to
                   AND ((NVL(p_prev_year_comm_st, 0) = 0 AND
                           (l.com_exe_date BETWEEN p_fy_start_dt AND p_fy_end_dt)
                        )
                        OR
                        (NVL(p_prev_year_comm_st, 0) = 1 AND
                         (l.com_exe_date BETWEEN p_coll_date_from AND p_coll_date_to)
                        )
                       )  --Modify by Musha on 12.04.2021 
                   AND l.comm_bon_year BETWEEN p_paid_yr_from AND p_paid_yr_to
                   ---------------------------------------
                   AND NOT EXISTS (
                          SELECT 1
                            FROM com_dev_emp_comm d, com_earning_head h
                           WHERE                  --d.emp_gid = p_employee_gid
                                 (   d.emp_gid = p_employee_gid
                                  OR f_emp_type_cd (d.emp_gid) =
                                                f_emp_type_cd (p_employee_gid)
                                  OR (   d.earning_cd <> p_earning_cd
                                      OR f_emp_type_cd (d.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                     )
                                 )
                             AND d.pgid = l.pgid
                             AND d.prem_due_dt = l.prem_due_dt
                             AND h.earning_cd = p_earning_cd
                             AND (   d.earning_cd = p_earning_cd
                                  OR f_emp_type_cd (d.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                 ))               --Add by Musha on 20.03.2017
              /* (SELECT   1
                  FROM   com_dev_emp_comm d
                 WHERE          --d.emp_gid = p_employee_gid
                       ( d.emp_gid = p_employee_gid
                         OR f_emp_type_cd (d.emp_gid) =
                              f_emp_type_cd (p_employee_gid))
                         AND d.pgid = l.pgid
                         AND d.prem_due_dt = l.prem_due_dt
                         AND d.earning_cd = p_earning_cd)*/ --Block by Musha on 20.03.2017 and add the above
              GROUP BY l.ins_tp_cd,
                       l.office_cd,
                       l.agent_id,
                       l.pgid,
                       l.com_exe_date,
                       l.comm_bon_year,
                       l.prem_due_dt,
                       l.receive_date) c, hrm_agent ag                     --, com_earn_tp t
       WHERE
--c.ins_tp_cd =NVL(p_ins_tp_cd, c.ins_tp_cd)-----------MODIFIED BY PARAMA BISWAS ON 18/09/2016
             c.ins_tp_cd = p_ins_tp_cd
         --AND c.earning_cd = t.earning_cd
         AND c.agent_id = ag.agent_id
         AND c.com_exe_date <= p_com_cal_dt_to
         AND c.com_exe_date >=
              (SELECT NVL(MAX (ta.app_effective_dt), ag.join_dt)
                 FROM hrm_transfer_appl ta
                WHERE ta.agent_id = c.agent_id
                  AND ta.ctrl_emp_gid = p_employee_gid
                      )
         --AND c.com_exe_date BETWEEN p_fy_start_dt AND p_fy_end_dt
         AND ((NVL(p_prev_year_comm_st, 0) = 0 AND
                   (c.com_exe_date BETWEEN p_fy_start_dt AND p_fy_end_dt)
                )
                OR
                (NVL(p_prev_year_comm_st, 0) = 1 AND
                 (c.com_exe_date BETWEEN p_coll_date_from AND p_coll_date_to)
                )
               ) --Add by Musha on 12.04.2021 
         AND c.comm_bon_year BETWEEN p_paid_yr_from AND p_paid_yr_to
         AND NOT EXISTS (
                SELECT 1
                  FROM com_dev_emp_comm d
                 WHERE                            --d.emp_gid = p_employee_gid
                       (   d.emp_gid = p_employee_gid
                        OR f_emp_type_cd (d.emp_gid) =
                                                f_emp_type_cd (p_employee_gid)
                       )
                   AND d.pgid = c.pgid
                   AND d.prem_due_dt = c.prem_due_dt
                   AND d.earning_cd = p_earning_cd)
         AND (c.agent_id IN (
                 SELECT     TO_CHAR (m.employee_gid)
                       FROM (SELECT TO_CHAR (e.emp_gid) employee_gid,
                                    TO_CHAR (s.h_employee_gid) h_employee_gid,
                                    0 emp_tp
                               FROM hrm_employee e, hrm_employee_setup s
                              WHERE e.employment_tp_cd = '02'
                                AND e.emp_gid = s.employee_gid(+)
                             UNION ALL
                             SELECT g.agent_id, TO_CHAR (g.dev_emp_gid), 1
                               FROM hrm_agent g) m
                      WHERE m.emp_tp = 1
                 START WITH m.employee_gid = p_employee_gid
                 CONNECT BY PRIOR m.employee_gid = m.h_employee_gid)
             );
BEGIN
   FOR rec_emp IN cur_dev_emp
   LOOP
      v_comm_amt := 0;
      v_payable_amt := 0;
      v_tot_comm_amt := 0;
      v_pram_amount := 0;
      v_prev_comm_amt := 0;
      v_total_payable_amt := 0;
      v_total_1st_comm_amt := 0;
      v_total_ren_comm_amt := 0;
      v_total_bonus_amt := 0;
      v_total_pbc_amt := 0;

      SELECT COUNT (*)
        INTO v_incharge_st
        FROM hrm_off_incharge
       WHERE office_code = rec_emp.office_cd
         AND incharge_emp_gid = rec_emp.employee_gid;

      FOR rec_earn IN cur_earning (rec_emp.emp_type_cd,
                                   rec_emp.service_cd,
                                   /*rec_coll.term,
                                     rec_coll.product_cd,
                                     rec_instl.prem_yr,*/
                                   rec_emp.employee_gid,
                                   rec_emp.off_cat_cd,
                                   v_incharge_st
                                  )
      LOOP
         v_comm_amt := 0;
         v_payable_amt := 0;
         v_tot_comm_amt := 0;
         v_pram_amount := 0;
         v_prev_comm_amt := 0;
         v_prev_paid_comm_amt := 0;

         --cal_based_on: 1=Collected Premium, 2=Agent's Commission, 3=UM's Commission, 4=BM's Commission
         IF rec_earn.cal_based_on IN ('1', '6', '7', '8')           --- = '1'
         THEN
            --Collected Premium
            IF rec_earn.calc_on = 'M'
            THEN
               --Find office wise month open and close date--
               pro_off_months_setup (p_office_cd        => p_office_cd,
                                     p_year_month       => p_year_month,
                                     p_month_st_dt      => v_month_start_dt,
                                     p_month_ed_dt      => v_month_end_dt,
                                     p_error            => v_month_setup_error
                                    );

               IF v_month_start_dt IS NULL AND v_month_setup_error IS NULL
               THEN
                  v_month_start_dt :=
                                   TO_DATE (p_year_month || '01', 'RRRRMMDD');
                  v_month_end_dt := LAST_DAY (v_month_start_dt);
               END IF;

               IF NVL(p_prev_year_comm_st, 0) = 0 THEN
                  v_month_end_dt := p_com_cal_dt_to;
               END IF;

               --Toral collected premium on per month
               IF '1' = '1'
               ----p_com_cal_dt_to = v_month_end_dt --last_day(p_com_cal_dt_to)
               THEN
                  --Check for the month end
                  --Check for the earning already calculated or not--
                  /*SELECT COUNT(1)
                  INTO   v_earn_cnt
                  FROM   com_dev_emp_bonus_comm c
                  WHERE  c.emp_gid = rec_emp.employee_gid
                  AND    c.earning_cd = rec_earn.earning_cd
                  AND    c.com_calc_dt_to = p_com_cal_dt_to
                  AND    c.ins_tp_cd = p_ins_tp_cd
                  AND    decode(rec_earn.term_depnt, 1, 1, 0) = '0';*/
                  ----Musha on 15-02-2015
                  v_earn_cnt := 0;

                  IF v_earn_cnt = 0
                  THEN
                     --Not yet calculated for the employee
                     IF     rec_earn.amount_depnt = '1'
                        AND rec_earn.payable_pct IS NULL
                     THEN
                        BEGIN
--Find total collected premium for the months--
---------------------------------------------------
                           IF rec_earn.chain_gap_emp_tp_cd IS NULL
                           THEN
                              SELECT DECODE
                                        (rec_earn.cal_based_on,
                                         '1', NVL (SUM (s.installment_premium),
                                                   0
                                                  ),
                                         '6', NVL (SUM (s.life_premium), 0),
                                         '7', NVL
                                            (SUM
                                                (  s.life_premium
                                                 + NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                             0
                                            ),
                                         '8', NVL
                                            (SUM
                                                (  NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                             0
                                            ),
                                         0
                                        )
                                INTO v_tot_coll_prem
                                FROM com_dev_emp_comm c, ins_p_summery s
                               WHERE c.ins_tp_cd = p_ins_tp_cd
                                 --AND to_char(c.com_calc_dt_to, 'RRRRMM') =
                                 -- to_char(p_com_cal_dt_to, 'RRRRMM')
                                 AND c.com_calc_dt_to BETWEEN v_month_start_dt
                                                          AND v_month_end_dt
                                 --open by musha on 02.05.2016
                                 --AND c.com_calc_dt_to <= v_month_end_dt --close by musha on 02.05.2016
                                 AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                                     AND rec_earn.paid_yr_to
                                 --AND    s.product_cd NOT IN ('09', '16', '39') ---Musha on 16-03-2015
                                 AND c.bill_status = '1'
                                                        ---Musha on 19.10.2016
                                 AND (   (    rec_earn.setup_option = 'G'
                                          AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                         )
                                      OR (    rec_earn.setup_option = 'P'
                                          AND s.product_cd IN (
                                                 SELECT product_cd
                                                   FROM com_dev_earning_setup_mst
                                                  WHERE emp_type_cd =
                                                           rec_emp.emp_type_cd
                                                    AND service_cd =
                                                            rec_emp.service_cd
                                                    AND earning_cd =
                                                           rec_earn.earning_cd)
                                         )
                                     )
                                 AND (   (    c.prem_due_dt = s.comm_date
                                          AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                                 1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                         )
                                      OR c.prem_due_dt <> s.comm_date
                                     )
                                 ---Musha on 28-02-2016 0 means not come from prev policy
                                 AND c.emp_gid IN (
                                        SELECT emp_gid
                                          FROM (SELECT     e.emp_gid,
                                                           e.emp_type_cd
                                                      FROM hrm_employee e,
                                                           hrm_employee_setup s
                                                     WHERE e.employment_tp_cd =
                                                                          '02'
                                                       AND e.emp_gid = s.employee_gid(+)
                                                START WITH s.h_employee_gid =
                                                              rec_emp.employee_gid
                                                CONNECT BY PRIOR s.employee_gid =
                                                              s.h_employee_gid)
                                         WHERE emp_type_cd =
                                                  DECODE (rec_emp.emp_type_cd,
                                                          '08', '07',
                                                          '09', '07',
                                                          '10', '07',
                                                          
                                                          ---Musha on 26.07.2016 add 3 lines for 10, 11, 12
                                                          '11', '07',
                                                          '12', '07',
                                                          '13', '07',
                                                          '14', '07',
                                                          '15', '07',
                                                          '16', '07',
                                                          '17', '07',
                                                          '18', '07',
                                                          '19', '07',
                                                          '20', '07',
                                                          '06'
                                                         ))
                                 --AND s.term BETWEEN TO_CHAR (rec_earn.term_from)
                                 --               AND TO_CHAR (rec_earn.term_to)
                                 AND NOT EXISTS (
                                        SELECT 1
                                          FROM com_earning_head h
                                         WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                           AND h.earning_cd = c.earning_cd)
                                 AND NOT EXISTS (
                                        SELECT 1
                                          FROM com_dev_emp_bonus_comm_dtl d,
                                               com_dev_emp_bonus_comm f,
                                               com_earning_head h
                                         WHERE d.payable_no = f.payable_no
                                           AND h.earning_cd =
                                                           rec_earn.earning_cd
                                           AND (   f.earning_cd =
                                                           rec_earn.earning_cd
                                                OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                               )
                                           AND d.comm_no = c.comm_no
                                           AND (   f.emp_gid =
                                                          rec_emp.employee_gid
                                                OR f_emp_type_cd (f.emp_gid) =
                                                      f_emp_type_cd
                                                         (rec_emp.employee_gid)
                                                OR (   f.earning_cd <>
                                                           rec_earn.earning_cd
                                                    OR f_emp_type_cd
                                                                    (f.emp_gid) =
                                                          h.chain_gap_emp_tp_cd
                                                   )
                                               )) --Add by Musha on 21.03.2017
                                 /*(SELECT   1
                                    FROM   com_dev_emp_bonus_comm_dtl d,
                                           com_dev_emp_bonus_comm f
                                   WHERE   d.payable_no =
                                              f.payable_no
                                           AND rec_earn.earning_cd =
                                                 f.earning_cd
                                           AND d.comm_no = c.comm_no
                                           AND d.emp_gid =
                                                 rec_emp.employee_gid)*/ --Block by Musha on 21.03.2017
                                 AND c.pgid = s.pgid;

---------------------------------------------------
/* ---Disable by Musha on 11.08.2016 and the above code based on BM commission
SELECT SUM (installment_premium)
  INTO v_tot_coll_prem
  FROM (SELECT DECODE
                  (rec_earn.cal_based_on,
                   '1', SUM (s.installment_premium),
                   '6', SUM (s.life_premium),
                   '7', SUM
                      (  s.life_premium
                       + NVL (s.suppl_ben_premium,
                              0
                             )
                       + NVL
                            (s.suppl_product_premium,
                             0
                            )
                      ),
                   '8', SUM
                      (  NVL (s.suppl_ben_premium,
                              0
                             )
                       + NVL
                            (s.suppl_product_premium,
                             0
                            )
                      ),
                   0
                  ) installment_premium
          FROM acc_receivables r,
               ins_prem_acc_receivable p,
               ins_p_summery s
         WHERE r.status = '1'
           AND r.rec_status = '1'
           AND r.com_calculated = 'Y'
           AND s.ins_tp_cd = p_ins_tp_cd
           --AND    to_char(nvl(r.coll_slip_rec_dt, r.receive_date)
           --           ,'RRRRMM') = to_char(p_com_cal_dt_to, 'RRRRMM')
           AND NVL (r.coll_slip_rec_dt,
                    r.receive_date
                   ) BETWEEN v_month_start_dt
                         AND v_month_end_dt
           AND p.proposed_status IN ('1', '4')
           AND (s.agent_id IN (
                   SELECT     TO_CHAR
                                    (m.employee_gid)
                         FROM (SELECT TO_CHAR
                                         (e.emp_gid
                                         )
                                         employee_gid,
                                      TO_CHAR
                                         (s.h_employee_gid
                                         )
                                         h_employee_gid,
                                      0 emp_tp
                                 FROM hrm_employee e,
                                      hrm_employee_setup s
                                WHERE e.employment_tp_cd =
                                               '02'
                                  AND e.emp_gid =
                                                s.employee_gid(+)
                               UNION ALL
                               SELECT g.agent_id,
                                      TO_CHAR
                                         (g.dev_emp_gid
                                         ),
                                      1
                                 FROM hrm_agent g) m
                        WHERE m.emp_tp = 1
                   START WITH m.employee_gid =
                                 TO_CHAR
                                    (rec_emp.employee_gid
                                    )
                   CONNECT BY PRIOR m.employee_gid =
                                   m.h_employee_gid)
               )
           AND r.receive_id = p.proposer_pk
           AND r.pgid = s.pgid
           AND CEIL (  p.installment_no
                / (s.policy_installment / s.term)
               ) BETWEEN rec_earn.paid_yr_from
                     AND rec_earn.paid_yr_to
        UNION ALL
        SELECT DECODE
                  (rec_earn.cal_based_on,
                   '1', SUM (s.installment_premium),
                   '6', SUM (s.life_premium),
                   '7', SUM
                      (  s.life_premium
                       + NVL (s.suppl_ben_premium,
                              0
                             )
                       + NVL
                            (s.suppl_product_premium,
                             0
                            )
                      ),
                   '8', SUM
                      (  NVL (s.suppl_ben_premium,
                              0
                             )
                       + NVL
                            (s.suppl_product_premium,
                             0
                            )
                      ),
                   0
                  ) installment_premium
          FROM (SELECT   a.receive_id, a.pgid,
                         SUM
                            (a.coll_amount
                            ) coll_amount
                    FROM acc_advance_receivables a
                   WHERE a.rec_status = '1'
                     AND a.status = '1'
                     AND a.com_calculated = 'Y'
                     --AND    to_char(nvl(a.coll_slip_rec_dt, a.receive_date)
                     --    ,'RRRRMM') = to_char(p_com_cal_dt_to, 'RRRRMM')
                     AND NVL (a.coll_slip_rec_dt,
                              a.receive_date
                             )
                            BETWEEN v_month_start_dt
                                AND v_month_end_dt
                GROUP BY a.receive_id, a.pgid) r,
               ins_prem_acc_receivable p,
               ins_p_summery s
         WHERE p.proposed_status IN ('1', '4')
           AND s.ins_tp_cd = p_ins_tp_cd
           AND (s.agent_id IN (
                   SELECT     TO_CHAR
                                    (m.employee_gid)
                         FROM (SELECT TO_CHAR
                                         (e.emp_gid
                                         )
                                         employee_gid,
                                      TO_CHAR
                                         (s.h_employee_gid
                                         )
                                         h_employee_gid,
                                      0 emp_tp
                                 FROM hrm_employee e,
                                      hrm_employee_setup s
                                WHERE e.employment_tp_cd =
                                               '02'
                                  AND e.emp_gid =
                                                s.employee_gid(+)
                               UNION ALL
                               SELECT g.agent_id,
                                      TO_CHAR
                                         (g.dev_emp_gid
                                         ),
                                      1
                                 FROM hrm_agent g) m
                        WHERE m.emp_tp = 1
                   START WITH m.employee_gid =
                                 TO_CHAR
                                    (rec_emp.employee_gid
                                    )
                   CONNECT BY PRIOR m.employee_gid =
                                   m.h_employee_gid)
               )
           AND r.receive_id = p.fp_receive_id
           AND r.pgid = s.pgid
           AND CEIL (  p.installment_no
                / (s.policy_installment / s.term)
               ) BETWEEN rec_earn.paid_yr_from
                     AND rec_earn.paid_yr_to);*/

                              ---=================================---
/*Add this part by musha on 22.09.2016
  To find total collection amount (CLI + TLI) and
  then find the commission rate based on this amount
*/
                              SELECT DECODE
                                        (rec_earn.cal_based_on,
                                         '1', NVL (SUM (s.installment_premium),
                                                   0
                                                  ),
                                         '6', NVL (SUM (s.life_premium), 0),
                                         '7', NVL
                                            (SUM
                                                (  s.life_premium
                                                 + NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                             0
                                            ),
                                         '8', NVL
                                            (SUM
                                                (  NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                             0
                                            ),
                                         0
                                        )
                                INTO v_tot_coll_prem_rate
                                FROM com_dev_emp_comm c, ins_p_summery s
                               WHERE               --c.ins_tp_cd = p_ins_tp_cd
                                     --AND to_char(c.com_calc_dt_to, 'RRRRMM') =
                                     -- to_char(p_com_cal_dt_to, 'RRRRMM')
                                     --AND
                                     c.com_calc_dt_to BETWEEN v_month_start_dt
                                                          AND v_month_end_dt
                                 --open by musha on 02.05.2016
                                 --AND c.com_calc_dt_to <= v_month_end_dt --close by musha on 02.05.2016
                                 AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                                     AND rec_earn.paid_yr_to
                                 --AND    s.product_cd NOT IN ('09', '16', '39') ---Musha on 16-03-2015
                                 AND c.bill_status = '1'
                                                        ---Musha on 19.10.2016
                                 AND (   (    rec_earn.setup_option = 'G'
                                          AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                         )
                                      OR (    rec_earn.setup_option = 'P'
                                          AND s.product_cd IN (
                                                 SELECT product_cd
                                                   FROM com_dev_earning_setup_mst
                                                  WHERE emp_type_cd =
                                                           rec_emp.emp_type_cd
                                                    AND service_cd =
                                                            rec_emp.service_cd
                                                    AND earning_cd =
                                                           rec_earn.earning_cd)
                                         )
                                     )
                                 AND (   (    c.prem_due_dt = s.comm_date
                                          AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                                 1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                         )
                                      OR c.prem_due_dt <> s.comm_date
                                     )
                                 ---Musha on 28-02-2016 0 means not come from prev policy
                                 AND c.emp_gid IN (
                                        SELECT emp_gid
                                          FROM (SELECT     e.emp_gid,
                                                           e.emp_type_cd
                                                      FROM hrm_employee e,
                                                           hrm_employee_setup s
                                                     WHERE e.employment_tp_cd =
                                                                          '02'
                                                       AND e.emp_gid = s.employee_gid(+)
                                                START WITH s.h_employee_gid =
                                                              rec_emp.employee_gid
                                                CONNECT BY PRIOR s.employee_gid =
                                                              s.h_employee_gid)
                                         WHERE emp_type_cd =
                                                  DECODE (rec_emp.emp_type_cd,
                                                          '08', '07',
                                                          '09', '07',
                                                          '10', '07',
                                                          
                                                          ---Musha on 26.07.2016 add 3 lines for 10, 11, 12
                                                          '11', '07',
                                                          '12', '07',
                                                          '13', '07',
                                                          '14', '07',
                                                          '15', '07',
                                                          '16', '07',
                                                          '17', '07',
                                                          '18', '07',
                                                          '19', '07',
                                                          '20', '07',
                                                          '06'
                                                         ))
                                 --AND s.term BETWEEN TO_CHAR (rec_earn.term_from)
                                 --               AND TO_CHAR (rec_earn.term_to)
                                 AND NOT EXISTS (
                                        SELECT 1
                                          FROM com_earning_head h
                                         WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                           AND h.earning_cd = c.earning_cd)
                                 /*AND NOT EXISTS (
                                        SELECT 1
                                          FROM com_dev_emp_bonus_comm_dtl d
                                         WHERE d.comm_no = c.comm_no
                                           AND d.emp_gid = rec_emp.employee_gid)*/
                                 AND c.pgid = s.pgid;
                           -------*****************Musha on 23.08.20174 Start-------
                           ELSE
                              ------Add this by Musha on 23.08.2017; If chain gap required then find gap exists or not
                              v_tot_coll_prem_rate := 0;
                              v_tot_coll_prem := 0;

                              FOR k IN
                                 (SELECT e.emp_gid
                                    FROM hrm_employee e,
                                         hrm_employee_setup s
                                   WHERE e.employment_tp_cd = '02'
                                     AND e.emp_gid = s.employee_gid
                                     AND s.h_employee_gid =
                                                          rec_emp.employee_gid
                                     AND TO_NUMBER (e.emp_type_cd) <
                                            TO_NUMBER
                                                 (rec_earn.chain_gap_emp_tp_cd))
                              LOOP
                                 SELECT DECODE
                                           (rec_earn.cal_based_on,
                                            '1', NVL
                                                  (SUM (s.installment_premium),
                                                   0
                                                  ),
                                            '6', NVL (SUM (s.life_premium), 0),
                                            '7', NVL
                                               (SUM
                                                   (  s.life_premium
                                                    + NVL
                                                         (s.suppl_ben_premium,
                                                          0
                                                         )
                                                    + NVL
                                                         (s.suppl_product_premium,
                                                          0
                                                         )
                                                   ),
                                                0
                                               ),
                                            '8', NVL
                                               (SUM
                                                   (  NVL
                                                         (s.suppl_ben_premium,
                                                          0
                                                         )
                                                    + NVL
                                                         (s.suppl_product_premium,
                                                          0
                                                         )
                                                   ),
                                                0
                                               ),
                                            0
                                           )
                                   INTO v_coll_prem
                                   FROM com_dev_emp_comm c, ins_p_summery s
                                  WHERE c.com_calc_dt_to
                                           BETWEEN v_month_start_dt
                                               AND v_month_end_dt
                                    AND c.prem_year
                                           BETWEEN rec_earn.paid_yr_from
                                               AND rec_earn.paid_yr_to
                                    --AND s.INS_TP_CD = p_ins_tp_cd
                                    AND c.bill_status =
                                                     '1'
                                                        ---Musha on 19.10.2016
                                    AND (   (    rec_earn.setup_option = 'G'
                                             AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                            )
                                         OR (    rec_earn.setup_option = 'P'
                                             AND s.product_cd IN (
                                                    SELECT product_cd
                                                      FROM com_dev_earning_setup_mst
                                                     WHERE emp_type_cd =
                                                              rec_emp.emp_type_cd
                                                       AND service_cd =
                                                              rec_emp.service_cd
                                                       AND earning_cd =
                                                              rec_earn.earning_cd)
                                            )
                                        )
                                    AND (   (    c.prem_due_dt = s.comm_date
                                             AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                                    1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                            )
                                         OR c.prem_due_dt <> s.comm_date
                                        )
                                    AND c.emp_gid IN (
                                           SELECT emp_gid
                                             FROM (SELECT     e.emp_gid,
                                                              e.emp_type_cd
                                                         FROM hrm_employee e,
                                                              hrm_employee_setup s
                                                        WHERE e.employment_tp_cd =
                                                                          '02'
                                                          AND e.emp_gid = s.employee_gid(+)
                                                   START WITH s.employee_gid =
                                                                     k.emp_gid
                                                   CONNECT BY PRIOR s.employee_gid =
                                                                 s.h_employee_gid)
                                            WHERE emp_type_cd =
                                                     DECODE
                                                         (rec_emp.emp_type_cd,
                                                          '08', '07',
                                                          '09', '07',
                                                          '10', '07',
                                                          '11', '07',
                                                          '12', '07',
                                                          '13', '07',
                                                          '14', '07',
                                                          '15', '07',
                                                          '16', '07',
                                                          '17', '07',
                                                          '18', '07',
                                                          '19', '07',
                                                          '20', '07',
                                                          '06'
                                                         ))
                                    AND NOT EXISTS (
                                           SELECT 1
                                             FROM com_earning_head h
                                            WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                              AND h.earning_cd = c.earning_cd)
                                    AND c.pgid = s.pgid;

                                 v_tot_coll_prem_rate :=
                                      NVL (v_tot_coll_prem_rate, 0)
                                    + NVL (v_coll_prem, 0);
                              END LOOP;

---------------
                              FOR k IN
                                 (SELECT e.emp_gid
                                    FROM hrm_employee e, hrm_employee_setup s
                                   WHERE e.employment_tp_cd = '02'
                                     AND e.emp_gid = s.employee_gid
                                     AND s.h_employee_gid =
                                                          rec_emp.employee_gid
                                     AND TO_NUMBER (e.emp_type_cd) <
                                            TO_NUMBER
                                                 (rec_earn.chain_gap_emp_tp_cd)
                                     AND TO_NUMBER (e.emp_type_cd) <=
                                                        7
                                                         --Musha on 10.10.2017
                                                         )
                              LOOP
                                 SELECT DECODE
                                           (rec_earn.cal_based_on,
                                            '1', NVL
                                                  (SUM (s.installment_premium),
                                                   0
                                                  ),
                                            '6', NVL (SUM (s.life_premium), 0),
                                            '7', NVL
                                               (SUM
                                                   (  s.life_premium
                                                    + NVL
                                                         (s.suppl_ben_premium,
                                                          0
                                                         )
                                                    + NVL
                                                         (s.suppl_product_premium,
                                                          0
                                                         )
                                                   ),
                                                0
                                               ),
                                            '8', NVL
                                               (SUM
                                                   (  NVL
                                                         (s.suppl_ben_premium,
                                                          0
                                                         )
                                                    + NVL
                                                         (s.suppl_product_premium,
                                                          0
                                                         )
                                                   ),
                                                0
                                               ),
                                            0
                                           )
                                   INTO v_coll_prem
                                   FROM com_dev_emp_comm c, ins_p_summery s
                                  WHERE c.com_calc_dt_to
                                           BETWEEN v_month_start_dt
                                               AND v_month_end_dt
                                    AND c.prem_year
                                           BETWEEN rec_earn.paid_yr_from
                                               AND rec_earn.paid_yr_to
                                    AND s.ins_tp_cd = p_ins_tp_cd
                                    AND c.bill_status =
                                                     '1'
                                                        ---Musha on 19.10.2016
                                    AND (   (    rec_earn.setup_option = 'G'
                                             AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                            )
                                         OR (    rec_earn.setup_option = 'P'
                                             AND s.product_cd IN (
                                                    SELECT product_cd
                                                      FROM com_dev_earning_setup_mst
                                                     WHERE emp_type_cd =
                                                              rec_emp.emp_type_cd
                                                       AND service_cd =
                                                              rec_emp.service_cd
                                                       AND earning_cd =
                                                              rec_earn.earning_cd)
                                            )
                                        )
                                    AND (   (    c.prem_due_dt = s.comm_date
                                             AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                                    1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                            )
                                         OR c.prem_due_dt <> s.comm_date
                                        )
                                    AND c.emp_gid IN (
                                           SELECT emp_gid
                                             FROM (SELECT     e.emp_gid,
                                                              e.emp_type_cd
                                                         FROM hrm_employee e,
                                                              hrm_employee_setup s
                                                        WHERE e.employment_tp_cd =
                                                                          '02'
                                                          AND e.emp_gid = s.employee_gid(+)
                                                   START WITH s.employee_gid =
                                                                     k.emp_gid
                                                   CONNECT BY PRIOR s.employee_gid =
                                                                 s.h_employee_gid)
                                            WHERE emp_type_cd =
                                                     DECODE
                                                         (rec_emp.emp_type_cd,
                                                          '08', '07',
                                                          '09', '07',
                                                          '10', '07',
                                                          '11', '07',
                                                          '12', '07',
                                                          '13', '07',
                                                          '14', '07',
                                                          '15', '07',
                                                          '16', '07',
                                                          '17', '07',
                                                          '18', '07',
                                                          '19', '07',
                                                          '20', '07',
                                                          '06'
                                                         ))
                                    AND s.term
                                           BETWEEN TO_CHAR (rec_earn.term_from)
                                               AND TO_CHAR (rec_earn.term_to)
                                    AND NOT EXISTS (
                                           SELECT 1
                                             FROM com_earning_head h
                                            WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                              AND h.earning_cd = c.earning_cd)
                                    AND NOT EXISTS (
                                           SELECT 1
                                             FROM com_dev_emp_bonus_comm_dtl d,
                                                  com_dev_emp_bonus_comm f,
                                                  com_earning_head h
                                            WHERE d.payable_no = f.payable_no
                                              AND h.earning_cd =
                                                           rec_earn.earning_cd
                                              AND (   f.earning_cd =
                                                           rec_earn.earning_cd
                                                   OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                                  --OR (f.emp_gid = rec_emp.employee_gid AND d.comm_no = c.comm_no) --Musha on 09.10.2017
                                                  )
                                              AND d.comm_no = c.comm_no
                                              AND (   f.emp_gid =
                                                          rec_emp.employee_gid
                                                   OR f_emp_type_cd (f.emp_gid) =
                                                         f_emp_type_cd
                                                            (rec_emp.employee_gid
                                                            )
                                                   OR (   f.earning_cd <>
                                                             rec_earn.earning_cd
                                                       OR f_emp_type_cd
                                                                    (f.emp_gid) =
                                                             h.chain_gap_emp_tp_cd
                                                      )
                                                  ))
                                    AND c.pgid = s.pgid;

                                 v_tot_coll_prem :=
                                      NVL (v_tot_coll_prem, 0)
                                    + NVL (v_coll_prem, 0);
                              END LOOP;
                           END IF;

                           -------*****************Musha on 23.08.2017 End-------

                           ---=================================---
                           SELECT (d.payable_pct / 100)
                             INTO v_payable_pct
                             FROM com_earning_head h,
                                  com_dev_earning_setup_mst m,
                                  com_dev_earning_setup_dtl d
                            WHERE h.status = '1'
                              AND NVL (m.amount_depnt, 0) = '1'
                              AND m.earning_cd = rec_earn.earning_cd
                              AND h.earning_type = rec_earn.earning_type
                              AND h.earning_cd = m.earning_cd
                              AND m.setupmst_cd = d.setupmst_cd
                              AND m.emp_type_cd = rec_emp.emp_type_cd
                              AND rec_earn.paid_yr_from = h.paid_yr_from
                              AND rec_earn.paid_yr_to = h.paid_yr_to
                              AND m.service_cd = rec_emp.service_cd
                              AND NVL (m.product_cd, '00') =
                                                      NVL (m.product_cd, '00')
                              AND v_tot_coll_prem_rate BETWEEN d.amount_from
                                                           AND d.amount_to
          --Musha on 22.09.2016 change v_tot_coll_prem to v_tot_coll_prem_rate
                              ----Musha on 23.08.2017 below condition
                              AND NVL (d.term_from, 0) = rec_earn.term_from
                              AND NVL (d.term_to, 99) = rec_earn.term_to;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_pct := 0;
                        END;

                        v_payable_amt :=
                                 ROUND ((v_tot_coll_prem * v_payable_pct), 2);
                     ELSIF rec_earn.term_depnt = '1'
                     THEN
                        SELECT DECODE
                                    (rec_earn.cal_based_on,
                                     '1', NVL (SUM (s.installment_premium), 0),
                                     '6', NVL (SUM (s.life_premium), 0),
                                     '7', NVL
                                          (SUM (  s.life_premium
                                                + NVL (s.suppl_ben_premium, 0)
                                                + NVL
                                                     (s.suppl_product_premium,
                                                      0
                                                     )
                                               ),
                                           0
                                          ),
                                     '8', NVL
                                          (SUM (  NVL (s.suppl_ben_premium, 0)
                                                + NVL
                                                     (s.suppl_product_premium,
                                                      0
                                                     )
                                               ),
                                           0
                                          ),
                                     0
                                    )
                          INTO v_tot_coll_prem
                          FROM com_dev_emp_comm c, ins_p_summery s
                         WHERE c.ins_tp_cd = p_ins_tp_cd
                           --AND to_char(c.com_calc_dt_to, 'RRRRMM') =
                           -- to_char(p_com_cal_dt_to, 'RRRRMM')
                           AND c.com_calc_dt_to BETWEEN v_month_start_dt
                                                    AND v_month_end_dt
                           --open by musha on 02.05.2016
                           --AND c.com_calc_dt_to <= v_month_end_dt --close by musha on 02.05.2016
                           AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                               AND rec_earn.paid_yr_to
                           --AND    s.product_cd NOT IN ('09', '16', '39') ---Musha on 16-03-2015
                           AND c.bill_status = '1'      ---Musha on 19.10.2016
                           AND (   (    rec_earn.setup_option = 'G'
                                    AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                   )
                                OR (    rec_earn.setup_option = 'P'
                                    AND s.product_cd IN (
                                           SELECT product_cd
                                             FROM com_dev_earning_setup_mst
                                            WHERE emp_type_cd =
                                                           rec_emp.emp_type_cd
                                              AND service_cd =
                                                            rec_emp.service_cd
                                              AND earning_cd =
                                                           rec_earn.earning_cd)
                                   )
                               )
                           AND (   (    c.prem_due_dt = s.comm_date
                                    AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                           1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                   )
                                OR c.prem_due_dt <> s.comm_date
                               )
                           ---Musha on 28-02-2016 0 means not come from prev policy
                           AND c.emp_gid IN (
                                  SELECT emp_gid
                                    FROM (SELECT     e.emp_gid, e.emp_type_cd
                                                FROM hrm_employee e,
                                                     hrm_employee_setup s
                                               WHERE e.employment_tp_cd = '02'
                                                 AND e.emp_gid = s.employee_gid(+)
                                          START WITH s.h_employee_gid =
                                                          rec_emp.employee_gid
                                          CONNECT BY PRIOR s.employee_gid =
                                                              s.h_employee_gid)
                                   WHERE emp_type_cd =
                                            DECODE (rec_emp.emp_type_cd,
                                                    '08', '07',
                                                    '09', '07',
                                                    '10', '07',
                                                    
                                                    ---Musha on 26.07.2016 add 3 lines for 10, 11, 12
                                                    '11', '07',
                                                    '12', '07',
                                                    '13', '07',
                                                      '14', '07',
                                                      '15', '07',
                                                      '16', '07',
                                                      '17', '07',
                                                      '18', '07',
                                                      '19', '07',
                                                      '20', '07',
                                                    '06'
                                                   ))
                           AND s.term BETWEEN TO_CHAR (rec_earn.term_from)
                                          AND TO_CHAR (rec_earn.term_to)
                           AND NOT EXISTS (
                                  SELECT 1
                                    FROM com_earning_head h
                                   WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                     AND h.earning_cd = c.earning_cd)
                           AND NOT EXISTS (
                                  SELECT 1
                                    FROM com_dev_emp_bonus_comm_dtl d,
                                         com_dev_emp_bonus_comm f,
                                         com_earning_head h
                                   WHERE d.payable_no = f.payable_no
                                     AND h.earning_cd = rec_earn.earning_cd
                                     AND (   f.earning_cd =
                                                           rec_earn.earning_cd
                                          OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                         )
                                     AND d.comm_no = c.comm_no
                                     AND (   f.emp_gid = rec_emp.employee_gid
                                          OR f_emp_type_cd (f.emp_gid) =
                                                f_emp_type_cd
                                                         (rec_emp.employee_gid)
                                          OR (   f.earning_cd <>
                                                           rec_earn.earning_cd
                                              OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                             )
                                         ))       --Add by Musha on 21.03.2017
                           /*(SELECT   1
                              FROM   com_dev_emp_bonus_comm_dtl d,
                                     com_dev_emp_bonus_comm f
                             WHERE   d.payable_no = f.payable_no
                                     AND rec_earn.earning_cd =
                                           f.earning_cd
                                     AND d.comm_no = c.comm_no
                                     AND d.emp_gid =
                                          rec_emp.employee_gid)*/--Block by Musha on 21.03.2017
                           AND c.pgid = s.pgid;

                        v_payable_amt :=
                           ROUND (NVL ((v_tot_coll_prem * rec_earn.payable_pct
                                       ),
                                       0
                                      ),
                                  2
                                 );
                     ELSE
                        --Find total collected premium for the months--
                        SELECT SUM (installment_premium)
                          INTO v_tot_coll_prem
                          FROM (SELECT DECODE
                                          (rec_earn.cal_based_on,
                                           '1', SUM (s.installment_premium),
                                           '6', SUM (s.life_premium),
                                           '7', SUM
                                                (  s.life_premium
                                                 + NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                           '8', SUM
                                                (  NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                           0
                                          ) installment_premium
                                  FROM acc_receivables r,
                                       ins_prem_acc_receivable p,
                                       ins_p_summery s
                                 WHERE r.status = '1'
                                   AND r.rec_status = '1'
                                   AND r.com_calculated = 'Y'
                                   AND s.ins_tp_cd = p_ins_tp_cd
                                   --AND    to_char(nvl(r.coll_slip_rec_dt, r.receive_date)
                                   --           ,'RRRRMM') = to_char(p_com_cal_dt_to, 'RRRRMM')
                                   AND NVL (r.coll_slip_rec_dt,
                                            r.receive_date)
                                          BETWEEN v_month_start_dt
                                              AND v_month_end_dt
                                   AND p.proposed_status IN ('1', '4')
                                   AND (s.agent_id IN (
                                           SELECT     TO_CHAR (m.employee_gid)
                                                 FROM (SELECT TO_CHAR
                                                                 (e.emp_gid
                                                                 )
                                                                 employee_gid,
                                                              TO_CHAR
                                                                 (s.h_employee_gid
                                                                 )
                                                                 h_employee_gid,
                                                              0 emp_tp
                                                         FROM hrm_employee e,
                                                              hrm_employee_setup s
                                                        WHERE e.employment_tp_cd =
                                                                          '02'
                                                          AND e.emp_gid = s.employee_gid(+)
                                                       UNION ALL
                                                       SELECT g.agent_id,
                                                              TO_CHAR
                                                                 (g.dev_emp_gid
                                                                 ),
                                                              1
                                                         FROM hrm_agent g) m
                                                WHERE m.emp_tp = 1
                                           START WITH m.employee_gid =
                                                         TO_CHAR
                                                            (rec_emp.employee_gid
                                                            )
                                           CONNECT BY PRIOR m.employee_gid =
                                                              m.h_employee_gid)
                                       )
                                   AND r.receive_id = p.proposer_pk
                                   AND r.pgid = s.pgid
                                   AND CEIL (  p.installment_no
                                             / (s.policy_installment / s.term
                                               )
                                            ) BETWEEN rec_earn.paid_yr_from
                                                  AND rec_earn.paid_yr_to
                                UNION ALL
                                SELECT DECODE
                                          (rec_earn.cal_based_on,
                                           '1', SUM (s.installment_premium),
                                           '6', SUM (s.life_premium),
                                           '7', SUM
                                                (  s.life_premium
                                                 + NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                           '8', SUM
                                                (  NVL (s.suppl_ben_premium,
                                                        0)
                                                 + NVL
                                                      (s.suppl_product_premium,
                                                       0
                                                      )
                                                ),
                                           0
                                          ) installment_premium
                                  FROM (SELECT   a.receive_id, a.pgid,
                                                 SUM
                                                    (a.coll_amount
                                                    ) coll_amount
                                            FROM acc_advance_receivables a
                                           WHERE a.rec_status = '1'
                                             AND a.status = '1'
                                             AND a.com_calculated = 'Y'
                                             --AND    to_char(nvl(a.coll_slip_rec_dt, a.receive_date)
                                             --    ,'RRRRMM') = to_char(p_com_cal_dt_to, 'RRRRMM')
                                             AND NVL (a.coll_slip_rec_dt,
                                                      a.receive_date
                                                     ) BETWEEN v_month_start_dt
                                                           AND v_month_end_dt
                                        GROUP BY a.receive_id, a.pgid) r,
                                       ins_prem_acc_receivable p,
                                       ins_p_summery s
                                 WHERE p.proposed_status IN ('1', '4')
                                   AND s.ins_tp_cd = p_ins_tp_cd
                                   AND (s.agent_id IN (
                                           SELECT     TO_CHAR (m.employee_gid)
                                                 FROM (SELECT TO_CHAR
                                                                 (e.emp_gid
                                                                 )
                                                                 employee_gid,
                                                              TO_CHAR
                                                                 (s.h_employee_gid
                                                                 )
                                                                 h_employee_gid,
                                                              0 emp_tp
                                                         FROM hrm_employee e,
                                                              hrm_employee_setup s
                                                        WHERE e.employment_tp_cd =
                                                                          '02'
                                                          AND e.emp_gid = s.employee_gid(+)
                                                       UNION ALL
                                                       SELECT g.agent_id,
                                                              TO_CHAR
                                                                 (g.dev_emp_gid
                                                                 ),
                                                              1
                                                         FROM hrm_agent g) m
                                                WHERE m.emp_tp = 1
                                           START WITH m.employee_gid =
                                                         TO_CHAR
                                                            (rec_emp.employee_gid
                                                            )
                                           CONNECT BY PRIOR m.employee_gid =
                                                              m.h_employee_gid)
                                       )
                                   AND r.receive_id = p.fp_receive_id
                                   AND r.pgid = s.pgid
                                   AND CEIL (  p.installment_no
                                             / (s.policy_installment / s.term
                                               )
                                            ) BETWEEN rec_earn.paid_yr_from
                                                  AND rec_earn.paid_yr_to);

                        v_payable_amt :=
                           ROUND ((v_tot_coll_prem * rec_earn.payable_pct), 2);
                     END IF;

                     --*************************Insert data into table**********************--
                     --============================--
                    --Round Amount--Add by Musha on 29.09.2020
                    pro_get_sys_config_st (
                               p_pgid            => NULL,
                               p_config_id       => 43,
                               p_sys_config_st   => v_sys_config_st,
                               p_upd_message     => v_upd_message
                            );
                    
                    IF v_sys_config_st = 1 THEN
                        v_payable_amt := ROUND (v_payable_amt);
                    END IF;
                    --============================--
        
                     IF v_payable_amt > 0
                     THEN
                        --Generate PK
                        SELECT TO_NUMBER
                                       (   TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                        || LPAD
                                              (  NVL
                                                    (MAX (SUBSTR (payable_no,
                                                                  5
                                                                 )
                                                         ),
                                                     0
                                                    )
                                               + 1,
                                               8,
                                               0
                                              )
                                       )
                          INTO v_comm_no
                          FROM com_dev_emp_bonus_comm
                         WHERE SUBSTR (payable_no, 1, 4) =
                                             TO_CHAR (p_com_cal_dt_to, 'rrmm');

                        --Account Integration--
                        /* IF p_ins_tp_cd = 1
                         THEN
                            --Conventional Insurance
                            v_trans_item_comm_pay := 20;  --Commission Payable
                            --v_trans_item_tax_pay    := 11;  --Tax Payable
                            v_trans_item_comm := 9;           --Commission amt
                         ELSE
                            --Takaful Insurance
                            v_trans_item_comm_pay := 108; --Commission Payable
                            --v_trans_item_tax_pay    := 106;  --Tax Payable
                            v_trans_item_comm := 105;         --Commission amt
                         END IF;*/
                        IF p_ins_tp_cd = 1
                        THEN
                           IF p_emp_type = '06'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 197;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 184;      --Commission amt
                           ELSIF p_emp_type = '07'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 198;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 185;      --Commission amt
                           ELSIF p_emp_type = '08'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 199;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 186;      --Commission amt
                           ELSIF p_emp_type = '09'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 200;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 187;      --Commission amt
                           ELSIF p_emp_type = '11'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 201;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 188;      --Commission amt
                           ELSIF p_emp_type = '10'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 203;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 190;      --Commission amt
                           ELSIF p_emp_type = '12'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 202;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 189;      --Commission amt
                           
                           ELSIF p_emp_type = '14'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 240;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 238;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 244;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 242;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 248;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 246;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 252;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 250;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 256;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 254;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 260;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 258;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 264;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 262;      --Commission amt      
                           END IF;
                        ELSE
                           IF p_emp_type = '06'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 204;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 191;      --Commission amt
                           ELSIF p_emp_type = '07'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 205;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 192;      --Commission amt
                           ELSIF p_emp_type = '08'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 206;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 193;      --Commission amt
                           ELSIF p_emp_type = '09'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 207;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 194;      --Commission amt
                           ELSIF p_emp_type = '11'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 208;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 195;      --Commission amt
                           ELSIF p_emp_type = '10'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 210;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 196;      --Commission amt
                           ELSIF p_emp_type = '12'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 209;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 211;      --Commission amt
                           
                           ELSIF p_emp_type = '14'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 241;
                                                         --Commission Payable
                              v_trans_item_comm := 239;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 245;
                                                         --Commission Payable
                              v_trans_item_comm := 243;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 249;
                                                         --Commission Payable
                              v_trans_item_comm := 247;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 253;
                                                         --Commission Payable
                              v_trans_item_comm := 251;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 257;
                                                         --Commission Payable
                              v_trans_item_comm := 255;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 261;
                                                         --Commission Payable
                              v_trans_item_comm := 259;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 265;
                                                         --Commission Payable
                              v_trans_item_comm := 263;      --Commission amt   
                           END IF;
                        END IF;

                        /********************************************************
                        This part is added by MD. Sayadur Rahaman  on 14/Feb-2013
                        Purpose: Accounts Integration
                        *********************************************************/
                        v_regional_off :=
                                     fun_find_regional_off (rec_emp.office_cd);

                        ----------Find payable office-----------
                        --Musha on 01.06.2016
                        BEGIN
                           SELECT fun_find_sales_off (rec_emp.office_cd)
                             INTO v_payable_off
                             FROM DUAL;

                           IF v_payable_off IS NULL
                           THEN
                              SELECT fun_find_service_off (rec_emp.office_cd)
                                INTO v_payable_off
                                FROM DUAL;

                              IF v_payable_off IS NULL
                              THEN
                                 SELECT fun_find_head_off (rec_emp.office_cd)
                                   INTO v_payable_off
                                   FROM DUAL;
                              END IF;
                           END IF;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_off := rec_emp.office_cd;
                        END;

                        --End of find payable office--
                        DECLARE
                           recprem          pkg_gl_voucher.t_trans_tab;
                           v_error          VARCHAR2 (200);
                           v_object_cd      gen_object_info.object_cd%TYPE;
                           v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
                           v_inter_off_st   CHAR (1);
                           v_office_cd      hrm_office.office_cd%TYPE;
                           v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
                           v_trans_date     DATE;
                           v_cost_center    hrm_office.office_cd%TYPE;
                           v_narration      VARCHAR2 (200);
                           v_user           VARCHAR2 (20);
                           v_chq_tp         VARCHAR2 (3);
                           v_chq_no         VARCHAR2 (50);
                           v_chq_dt         DATE;
                           v_sus_amt_used   NUMBER (1);
                        BEGIN
                           /***********************
                           Business wise value will change.
                           Developer will put the value
                           **********************************/
                           v_object_cd := p_object_cd;
                           v_voucher_cd := '05';
                           v_inter_off_st := '0';
                           v_office_cd := v_regional_off;
                           v_cost_center := v_payable_off;
                           --rec_emp.office_cd;    --Musha on 01.06.2016
                           v_trans_id :=
                                 rec_emp.employee_gid
                              || rec_emp.office_cd
                              || TO_CHAR (p_com_cal_dt_to, 'DDMMRR');
                           v_trans_date := p_com_cal_dt_to;
                           v_narration :=
                                 'Employee Commission Payable Calculation on '
                              || p_com_cal_dt_to;
                           v_user := p_user;
/*******End********/

                           --commission
                           recprem (2).trans_item_cd := v_trans_item_comm;
                           recprem (2).post_amount := v_payable_amt;
                           recprem (2).chq_tp := NULL;
                           recprem (2).chq_no := NULL;
                           recprem (2).chq_dt := NULL;
                           --commission payable
                           recprem (1).trans_item_cd := v_trans_item_comm_pay;
                           recprem (1).post_amount := v_payable_amt;
                           recprem (1).chq_tp := NULL;
                           recprem (1).chq_no := NULL;
                           recprem (1).chq_dt := NULL;
                           pkg_gl_voucher.pro_voucher_posting
                                            (p_table             => recprem,
                                             p_object_cd         => v_object_cd,
                                             p_vouch_cd          => v_voucher_cd,
                                             p_inter_off_st      => v_inter_off_st,
                                             p_office_cd         => v_office_cd,
                                             p_trans_id          => v_trans_id,
                                             p_trans_date        => v_trans_date,
                                             p_cost_center       => v_cost_center,
                                             p_narration         => v_narration,
                                             p_user              => v_user,
                                             p_ins_tp_cd         => p_ins_tp_cd,
                                             p_voucher_no        => v_payable_vr_no,
                                             p_error             => v_acc_error
                                            );
                        END;

                        --End of Account Integration--
                        IF v_acc_error IS NULL
                        THEN
                           INSERT INTO com_dev_emp_bonus_comm
                                       (payable_no, emp_gid,
                                        office_cd,
                                        earning_cd,
                                        earning_type,
                                        com_calc_dt_to, payable_amount,
                                        base_amount, com_payable_vou,
                                        fy_start_dt, fy_end_dt, bill_status,
                                        ins_tp_cd,
                                        pay_rate,
                                        i_usr, i_dt, payable_office_cd
                                       )
                                VALUES (v_comm_no,                   --comm_NO
                                                  rec_emp.employee_gid,
                                        --emp_gid
                                        rec_emp.office_cd,         --OFFICE_CD
                                        rec_earn.earning_cd,      --EARNING_CD
                                        rec_earn.earning_type,  --EARNING_TYPE
                                        p_com_cal_dt_to,      --COM_CALC_DT_TO
                                                        v_payable_amt,
                                        --PAYABLE_AMOUNT
                                        v_tot_coll_prem,         --base_amount
                                                        v_payable_vr_no,
                                        --COM_PAYABLE_VOU
                                        p_fy_start_dt,           --fy_START_Dt
                                                      p_fy_end_dt, 
                                                                   --fy_END_Dt
                                        '0',                     --BILL_STATUS
                                        p_ins_tp_cd,
                                          NVL (rec_earn.payable_pct,
                                               v_payable_pct
                                              )
                                        * 100,
                                        p_user,                        --I_USR
                                               SYSDATE,                 --I_DT
                                                       v_payable_off
                                       );

                           FOR r IN
                              (SELECT c.comm_no, c.emp_gid, c.pgid, 
                                      c.prem_due_dt, s.installment_premium
                                 FROM com_dev_emp_comm c, ins_p_summery s
                                WHERE c.ins_tp_cd = p_ins_tp_cd
                                  --AND to_char(c.com_calc_dt_to, 'RRRRMM') =
                                  -- to_char(p_com_cal_dt_to, 'RRRRMM')
                                  AND c.com_calc_dt_to BETWEEN v_month_start_dt
                                                           AND v_month_end_dt
                                  --open by musha on 02.05.2016
                                  --AND    s.product_cd NOT IN ('09', '16', '39') ---Musha on 04-04-2015
                                  AND c.bill_status =
                                                     '1'
                                                        ---Musha on 19.10.2016
                                  AND (   (    rec_earn.setup_option = 'G'
                                           AND s.product_cd NOT IN
                                                           ('09', '16', '39')
                                          )
                                       OR (    rec_earn.setup_option = 'P'
                                           AND s.product_cd IN (
                                                  SELECT product_cd
                                                    FROM com_dev_earning_setup_mst
                                                   WHERE emp_type_cd =
                                                            rec_emp.emp_type_cd
                                                     AND service_cd =
                                                            rec_emp.service_cd
                                                     AND earning_cd =
                                                            rec_earn.earning_cd)
                                          )
                                      )
                                  --AND fun_policy_frm_prevpol (s.pgid) = '0'
                                  AND (   (    c.prem_due_dt = s.comm_date
                                           AND fun_comm_calc_st
                                                       (p_business_id      => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd      => NULL,
                                                        p_emp_gid          => NULL,
                                                        p_pgid             => s.pgid
                                                       ) =
                                                  1
                                       --fun_policy_frm_prevpol (s.pgid) = '0'
                                          )
                                       OR c.prem_due_dt <> s.comm_date
                                      )
                                  ---Musha on 28-02-2016 0 means not come from prev policy
                                  --AND c.com_calc_dt_to <= v_month_end_dt --close by musha on 02.05.2016
                                  AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                                      AND rec_earn.paid_yr_to
                                  AND c.emp_gid IN (
                                         SELECT emp_gid
                                           FROM (SELECT     e.emp_gid,
                                                            e.emp_type_cd
                                                       FROM hrm_employee e,
                                                            hrm_employee_setup s
                                                      WHERE e.employment_tp_cd =
                                                                          '02'
                                                        AND e.emp_gid = s.employee_gid(+)
                                                 START WITH s.h_employee_gid =
                                                               rec_emp.employee_gid
                                                 CONNECT BY PRIOR s.employee_gid =
                                                               s.h_employee_gid)
                                          WHERE emp_type_cd =
                                                   DECODE
                                                         (rec_emp.emp_type_cd,
                                                          '08', '07',
                                                          '09', '07',
                                                          '10', '07',
                                                          
                                                          ---Musha on 26.07.2016 add 3 lines for 10, 11, 12
                                                          '11', '07',
                                                          '12', '07',
                                                          '13', '07',
                                                          '14', '07',
                                                          '15', '07',
                                                          '16', '07',
                                                          '17', '07',
                                                          '18', '07',
                                                          '19', '07',
                                                          '20', '07',
                                                          '06'
                                                         )
                                                ----------Add by Musha on 17.10.2017--------
                                                AND (rec_earn.chain_gap_emp_tp_cd IS NULL
                                                     OR
                                                      emp_gid IN (SELECT e.emp_gid
                                                                    FROM hrm_employee e, hrm_employee_setup s
                                                                   WHERE e.employment_tp_cd = '02'
                                                                     AND e.emp_gid = s.employee_gid
                                                                     AND s.h_employee_gid = rec_emp.employee_gid
                                                                     AND TO_NUMBER (e.emp_type_cd) <
                                                                                   TO_NUMBER (rec_earn.chain_gap_emp_tp_cd)
                                                                     AND TO_NUMBER (e.emp_type_cd) <= 7  --Musha on 10.10.2017
                                                                )
                                                    )
                                                -------------------         
                                                )
                                  AND s.term BETWEEN TO_CHAR
                                                           (rec_earn.term_from)
                                                 AND TO_CHAR (rec_earn.term_to)
                                  AND NOT EXISTS (
                                         SELECT 1
                                           FROM com_earning_head h
                                          WHERE h.chain_gap_emp_tp_cd IS NOT NULL
                                            AND h.earning_cd = c.earning_cd)
                                  AND NOT EXISTS (
                                         SELECT 1
                                           FROM com_dev_emp_bonus_comm_dtl d,
                                                com_dev_emp_bonus_comm f,
                                                com_earning_head h
                                          WHERE d.payable_no = f.payable_no
                                            AND h.earning_cd =
                                                           rec_earn.earning_cd
                                            AND (   f.earning_cd =
                                                           rec_earn.earning_cd
                                                 OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                                --OR (f.emp_gid = rec_emp.employee_gid AND d.comm_no = c.comm_no) --Musha on 09.10.2017
                                                )
                                            AND d.comm_no = c.comm_no
                                            AND (   f.emp_gid =
                                                          rec_emp.employee_gid
                                                 OR f_emp_type_cd (f.emp_gid) =
                                                       f_emp_type_cd
                                                          (rec_emp.employee_gid
                                                          )
                                                 OR (   f.earning_cd <>
                                                           rec_earn.earning_cd
                                                     OR f_emp_type_cd
                                                                    (f.emp_gid) =
                                                           h.chain_gap_emp_tp_cd
                                                    )
                                                ))
                                                  --Add by Musha on 21.03.2017
                                  /*(SELECT   1
                                     FROM   com_dev_emp_bonus_comm_dtl d,
                                            com_dev_emp_bonus_comm f
                                    WHERE   d.payable_no =
                                               f.payable_no
                                            AND rec_earn.earning_cd =
                                                  f.earning_cd
                                            AND d.comm_no =
                                                  c.comm_no
                                            AND d.emp_gid =
                                                  rec_emp.employee_gid)*/   --Block by Musha on 21.03.2017 and the above condition
                                  AND c.pgid = s.pgid)
                           LOOP
                              v_dtl_gross_payable_amt   := ROUND(r.installment_premium*
                                                                 NVL (rec_earn.payable_pct,
                                                                      v_payable_pct
                                                                     ), 2);
                              
                              v_dtl_tax_ded_amt         := ROUND(v_dtl_gross_payable_amt*0.075, 2);
                              
                              IF v_sys_config_st = 1 THEN
                                  v_dtl_gross_payable_amt := ROUND (v_dtl_gross_payable_amt);
                                  v_dtl_tax_ded_amt := ROUND (v_dtl_tax_ded_amt);
                              END IF;
                              
                              INSERT INTO com_dev_emp_bonus_comm_dtl
                                          (payable_no, emp_gid,
                                           comm_no, subord_emp_gid, pgid,
                                           prem_due_date, premium_amt, payable_rate,
                                           gross_payable_amt, tax_ded_amt, 
                                           net_payable_amt, i_usr, i_dt
                                          )
                                   VALUES (v_comm_no, rec_emp.employee_gid,
                                           r.comm_no, r.emp_gid, r.pgid,
                                           r.prem_due_dt, r.installment_premium, NVL (rec_earn.payable_pct, v_payable_pct),
                                           v_dtl_gross_payable_amt, v_dtl_tax_ded_amt,
                                           v_dtl_gross_payable_amt - NVL(v_dtl_tax_ded_amt, 0), 
                                           p_user, SYSDATE
                                          );
                           END LOOP;

                           p_record_count := NVL (p_record_count, 0) + 1;
                        END IF;
                     END IF;
                  --*************************End of Insert data into table**********************--
                  ELSE
                     v_payable_amt := 0;
                  END IF;
               END IF;
            ELSIF rec_earn.calc_on = 'F'
            THEN
               --Toral collected premium on the FY
               IF p_com_cal_dt_to = p_fy_end_dt
               THEN
                  --Check for the fiscal year end
                  --Check for the earning already calculated or not--
                  SELECT COUNT (1)
                    INTO v_earn_cnt
                    FROM com_dev_emp_comm c
                   WHERE c.emp_gid = rec_emp.employee_gid
                     AND c.earning_cd = rec_earn.earning_cd
                     AND c.com_calc_dt_to = p_com_cal_dt_to;

                  --must add fiscal year
                  IF v_earn_cnt = 0
                  THEN
                     --Not yet calculated for the employee
                     --Find total collected premium--
                     SELECT SUM (p.installment_premium)
                       INTO v_tot_coll_prem
                       FROM acc_receivables r,
                            ins_prem_acc_receivable p,
                            ins_p_summery s
                      WHERE r.status = '1'
                        AND r.rec_status = '1'
                        AND r.com_calculated = 'Y'
                        AND NVL (r.coll_slip_rec_dt, r.receive_date)
                               BETWEEN p_fy_start_dt
                                   AND p_fy_end_dt
                        AND p.proposed_status IN ('1', '4')
                        AND (s.agent_id IN (
                                SELECT     TO_CHAR (m.employee_gid)
                                      FROM (SELECT TO_CHAR
                                                      (e.emp_gid)
                                                                 employee_gid,
                                                   TO_CHAR
                                                      (s.h_employee_gid
                                                      ) h_employee_gid,
                                                   0 emp_tp
                                              FROM hrm_employee e,
                                                   hrm_employee_setup s
                                             WHERE e.employment_tp_cd = '02'
                                               AND e.emp_gid = s.employee_gid(+)
                                            UNION ALL
                                            SELECT g.agent_id,
                                                   TO_CHAR (g.dev_emp_gid), 1
                                              FROM hrm_agent g) m
                                     WHERE m.emp_tp = 1
                                START WITH m.employee_gid =
                                                TO_CHAR (rec_emp.employee_gid)
                                CONNECT BY PRIOR m.employee_gid =
                                                              m.h_employee_gid)
                            )
                        AND r.receive_id = p.proposer_pk
                        AND r.pgid = s.pgid
                        AND CEIL (  p.installment_no
                                  / (s.policy_installment / s.term)
                                 ) BETWEEN rec_earn.paid_yr_from
                                       AND rec_earn.paid_yr_to;

                     IF     rec_earn.amount_depnt = '1'
                        AND rec_earn.payable_pct IS NULL
                     THEN
                        BEGIN
                           SELECT (d.payable_pct / 100)
                             INTO v_payable_pct
                             FROM com_earning_head h,
                                  com_dev_earning_setup_mst m,
                                  com_dev_earning_setup_dtl d
                            WHERE h.status = '1'
                              AND NVL (m.amount_depnt, 0) = '1'
                              AND m.earning_cd = rec_earn.earning_cd
                              AND h.earning_type = rec_earn.earning_type
                              AND h.earning_cd = m.earning_cd
                              AND m.setupmst_cd = d.setupmst_cd
                              AND m.emp_type_cd = rec_emp.emp_type_cd
                              AND rec_earn.paid_yr_from = h.paid_yr_from
                              AND rec_earn.paid_yr_to = h.paid_yr_to
                              AND m.service_cd = rec_emp.service_cd
                              AND NVL (m.product_cd, '00') =
                                                      NVL (m.product_cd, '00')
                              AND v_tot_coll_prem BETWEEN d.amount_from
                                                      AND d.amount_to;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_pct := 0;
                        END;

                        v_payable_amt :=
                                 ROUND ((v_tot_coll_prem * v_payable_pct), 2);
                     ELSE
                        v_payable_amt :=
                           ROUND ((v_tot_coll_prem * rec_earn.payable_pct),
                                  2
                                 );
                     END IF;

                     --*************************Insert data into table**********************--
                     --============================--
                    --Round Amount--Add by Musha on 29.09.2020
                    pro_get_sys_config_st (
                               p_pgid            => NULL,
                               p_config_id       => 43,
                               p_sys_config_st   => v_sys_config_st,
                               p_upd_message     => v_upd_message
                            );
                    
                    IF v_sys_config_st = 1 THEN
                        v_payable_amt := ROUND (v_payable_amt);
                    END IF;
                    --============================--
                     
                     IF v_payable_amt > 0
                     THEN
                        --Generate PK
                        SELECT acc_dev_emp_comm_no.NEXTVAL
                          INTO v_comm_no
                          FROM DUAL;
                          
                        /*SELECT TO_NUMBER (   TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                          || LPAD
                                                (  NVL (MAX (SUBSTR (comm_no,
                                                                     5
                                                                    )
                                                            ),
                                                        0
                                                       )
                                                 + 1,
                                                 8,
                                                 0
                                                )
                                         )
                          INTO v_comm_no
                          FROM com_dev_emp_comm
                         WHERE SUBSTR (comm_no, 1, 4) =
                                             TO_CHAR (p_com_cal_dt_to, 'rrmm');*/

                        INSERT INTO com_dev_emp_comm
                                    (comm_no, emp_gid,
                                     office_cd, pgid, prem_due_dt,
                                     earning_cd,
                                     earning_type, com_calc_dt_to,
                                     prem_year, payable_amount,
                                     payable_vouch_dt, com_payable_vou,
                                     fy_start_dt, fy_end_dt, bill_status,
                                     ins_tp_cd, pay_rate, i_usr,
                                     i_dt, payable_office_cd
                                    )
                             VALUES (v_comm_no,                      --comm_NO
                                               rec_emp.employee_gid, --emp_gid
                                     rec_emp.office_cd,            --OFFICE_CD
                                                       NULL,            --PGID
                                                            NULL,
                                     --PREM_DUE_DT
                                     rec_earn.earning_cd,         --EARNING_CD
                                     rec_earn.earning_type,
                                                           --EARNING_TYPE
                                                           p_com_cal_dt_to,
                                     --COM_CALC_DT_TO
                                     NULL,                         --Prem_YEAR
                                          v_payable_amt,
                                     --PAYABLE_AMOUNT
                                     v_payable_vr_dt,       --PAYABLE_VOUCH_DT
                                                     v_payable_vr_no,
                                     --COM_PAYABLE_VOU
                                     p_fy_start_dt,              --fy_START_Dt
                                                   p_fy_end_dt,    --fy_END_Dt
                                                               '0',
                                     --BILL_STATUS
                                     p_ins_tp_cd, v_payable_pct, p_user,
                                     --I_USR
                                     SYSDATE,                           --I_DT
                                             v_payable_off
                                    );
                     END IF;
                  --*************************End of Insert data into table**********************--
                  ELSE
                     v_payable_amt := 0;
                  END IF;
               END IF;
            END IF;
         ELSIF rec_earn.cal_based_on = '2'
         THEN
            --Earn Commission by FA
            IF rec_earn.calc_on = 'F'
            THEN
               --Calculation on the total commission of the fiscal year
               IF p_com_cal_dt_to = p_fy_end_dt
               THEN
                  --Check for the fiscal year end
                  --Check for the earning already calculated or not--
                  SELECT COUNT (1)
                    INTO v_earn_cnt
                    FROM com_dev_emp_comm c
                   WHERE c.emp_gid = rec_emp.employee_gid
                     AND c.earning_cd = rec_earn.earning_cd;

                  IF v_earn_cnt = 0
                  THEN
                     --Not yet calculated for the employee
                     ---Find previous total commission earn of the fiscal year---
                     SELECT NVL (SUM (payable_amount), 0)
                       INTO v_prev_comm_amt
                       FROM com_agent_com_detail c, com_earn_tp t
                      WHERE t.earning_type = 'C'
                        AND c.ins_tp_cd = p_ins_tp_cd
                        AND c.earning_cd = t.earning_cd
                        AND NVL (c.service_charge_st, '0') = '0'
                        AND c.com_exe_date <= p_com_cal_dt_to
                        AND c.com_exe_date BETWEEN p_fy_start_dt AND p_fy_end_dt
                        AND c.comm_bon_year BETWEEN rec_earn.paid_yr_from
                                                AND rec_earn.paid_yr_to
                        AND (c.agent_id IN (
                                SELECT     TO_CHAR (m.employee_gid)
                                      FROM (SELECT TO_CHAR
                                                      (e.emp_gid)
                                                                 employee_gid,
                                                   TO_CHAR
                                                      (s.h_employee_gid
                                                      ) h_employee_gid,
                                                   0 emp_tp
                                              FROM hrm_employee e,
                                                   hrm_employee_setup s
                                             WHERE e.employment_tp_cd = '02'
                                               AND e.emp_gid = s.employee_gid(+)
                                            UNION ALL
                                            SELECT g.agent_id,
                                                   TO_CHAR (g.dev_emp_gid), 1
                                              FROM hrm_agent g) m
                                     WHERE m.emp_tp = 1
                                START WITH m.employee_gid =
                                                TO_CHAR (rec_emp.employee_gid)
                                CONNECT BY PRIOR m.employee_gid =
                                                              m.h_employee_gid)
                            );

                     v_tot_comm_amt := NVL (v_prev_comm_amt, 0);

                     --+ NVL (v_comm_amt, 0);

                     --------------------------------
                     IF     rec_earn.amount_depnt = '1'
                        AND rec_earn.payable_pct IS NULL
                     THEN
                        BEGIN
                           SELECT (d.payable_pct / 100)
                             INTO v_payable_pct
                             FROM com_earning_head h,
                                  com_dev_earning_setup_mst m,
                                  com_dev_earning_setup_dtl d
                            WHERE h.status = '1'
                              AND NVL (m.amount_depnt, 0) = '1'
                              AND m.earning_cd = rec_earn.earning_cd
                              AND h.earning_type = rec_earn.earning_type
                              AND h.earning_cd = m.earning_cd
                              AND m.setupmst_cd = d.setupmst_cd
                              AND m.emp_type_cd = rec_emp.emp_type_cd
                              AND h.paid_yr_from = rec_earn.paid_yr_from
                              AND h.paid_yr_to = rec_earn.paid_yr_to
                              AND m.service_cd = rec_emp.service_cd
                              AND NVL (m.product_cd, '00') =
                                                      NVL (m.product_cd, '00')
                              AND v_tot_comm_amt BETWEEN d.amount_from
                                                     AND d.amount_to;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_pct := 0;
                        END;

                        v_payable_amt :=
                                  ROUND ((v_tot_comm_amt * v_payable_pct), 2);
                     ELSE
                        v_payable_amt :=
                           ROUND ((v_tot_comm_amt * rec_earn.payable_pct), 2);
                     END IF;

                     --*************************Insert data into table**********************--
                     --============================--
                    --Round Amount--Add by Musha on 29.09.2020
                    pro_get_sys_config_st (
                               p_pgid            => NULL,
                               p_config_id       => 43,
                               p_sys_config_st   => v_sys_config_st,
                               p_upd_message     => v_upd_message
                            );
                        
                    IF v_sys_config_st = 1 THEN
                        v_payable_amt := ROUND (v_payable_amt);
                    END IF;
                    --============================--
                     
                     IF v_payable_amt > 0
                     THEN
                        --Generate PK
                        
                        SELECT acc_dev_emp_comm_no.NEXTVAL
                          INTO v_comm_no
                          FROM DUAL;
                        
                        /*SELECT TO_NUMBER (   TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                          || LPAD
                                                (  NVL (MAX (SUBSTR (comm_no,
                                                                     5
                                                                    )
                                                            ),
                                                        0
                                                       )
                                                 + 1,
                                                 8,
                                                 0
                                                )
                                         )
                          INTO v_comm_no
                          FROM com_dev_emp_comm
                         WHERE SUBSTR (comm_no, 1, 4) =
                                             TO_CHAR (p_com_cal_dt_to, 'rrmm');*/

                        INSERT INTO com_dev_emp_comm
                                    (comm_no, emp_gid,
                                     office_cd, pgid, prem_due_dt,
                                     earning_cd,
                                     earning_type, com_calc_dt_to,
                                     prem_year, payable_amount,
                                     payable_vouch_dt, com_payable_vou,
                                     fy_start_dt, fy_end_dt, bill_status,
                                     ins_tp_cd, pay_rate, i_usr,
                                     i_dt, payable_office_cd
                                    )
                             VALUES (v_comm_no,                      --comm_NO
                                               rec_emp.employee_gid, --emp_gid
                                     rec_emp.office_cd,            --OFFICE_CD
                                                       NULL,            --PGID
                                                            NULL,
                                     --PREM_DUE_DT
                                     rec_earn.earning_cd,         --EARNING_CD
                                     rec_earn.earning_type,
                                                           --EARNING_TYPE
                                                           p_com_cal_dt_to,
                                     --COM_CALC_DT_TO
                                     NULL,                         --Prem_YEAR
                                          v_payable_amt,
                                     --PAYABLE_AMOUNT
                                     v_payable_vr_dt,       --PAYABLE_VOUCH_DT
                                                     v_payable_vr_no,
                                     --COM_PAYABLE_VOU
                                     p_fy_start_dt,              --fy_START_Dt
                                                   p_fy_end_dt,    --fy_END_Dt
                                                               '0',
                                     --BILL_STATUS
                                     p_ins_tp_cd, v_payable_pct, p_user,
                                     --I_USR
                                     SYSDATE,                           --I_DT
                                             v_payable_off
                                    );
                     END IF;
                  --*************************End of Insert data into table**********************--
                  ELSE
                     v_payable_amt := 0;
                  END IF;
               ELSE
                  v_payable_amt := 0;
               END IF;
            ELSIF rec_earn.calc_on = 'P'
            THEN
               --Calculation on the total commission of the premium year
               ---Find previous total commission earn of the premium year---
               SELECT NVL (SUM (payable_amount), 0)
                 INTO v_prev_comm_amt
                 FROM com_agent_com_detail c, com_earn_tp t
                WHERE t.earning_type = 'C'
                  AND c.ins_tp_cd = p_ins_tp_cd
                  AND c.earning_cd = t.earning_cd
                  AND NVL (c.service_charge_st, '0') = '0'
                  AND c.com_exe_date <= p_com_cal_dt_to
                  AND c.com_exe_date BETWEEN p_fy_start_dt AND p_fy_end_dt
                  AND c.comm_bon_year BETWEEN rec_earn.paid_yr_from
                                          AND rec_earn.paid_yr_to
                  AND (c.agent_id IN (
                          SELECT     TO_CHAR (m.employee_gid)
                                FROM (SELECT TO_CHAR (e.emp_gid) employee_gid,
                                             TO_CHAR
                                                (s.h_employee_gid
                                                ) h_employee_gid,
                                             0 emp_tp
                                        FROM hrm_employee e,
                                             hrm_employee_setup s
                                       WHERE e.employment_tp_cd = '02'
                                         AND e.emp_gid = s.employee_gid(+)
                                      UNION ALL
                                      SELECT g.agent_id,
                                             TO_CHAR (g.dev_emp_gid), 1
                                        FROM hrm_agent g) m
                               WHERE m.emp_tp = 1
                          START WITH m.employee_gid =
                                                TO_CHAR (rec_emp.employee_gid)
                          CONNECT BY PRIOR m.employee_gid = m.h_employee_gid)
                      );

               v_tot_comm_amt := NVL (v_prev_comm_amt, 0);

               IF rec_earn.amount_depnt = '1' AND rec_earn.payable_pct IS NULL
               THEN
                  BEGIN
                     IF rec_earn.cal_based_on = '2'
                     THEN
                        v_pram_amount := v_tot_comm_amt;
                     END IF;

                     SELECT (d.payable_pct / 100)
                       INTO v_payable_pct
                       FROM com_earning_head h,
                            com_dev_earning_setup_mst m,
                            com_dev_earning_setup_dtl d
                      WHERE h.status = '1'
                        AND NVL (m.amount_depnt, 0) = '1'
                        AND m.earning_cd = rec_earn.earning_cd
                        AND h.earning_type = rec_earn.earning_type
                        AND h.earning_cd = m.earning_cd
                        AND m.setupmst_cd = d.setupmst_cd
                        AND m.emp_type_cd = rec_emp.emp_type_cd
                        AND rec_earn.paid_yr_from BETWEEN h.paid_yr_from
                                                      AND h.paid_yr_to
                        AND m.service_cd = rec_emp.service_cd
                        AND NVL (m.product_cd, '00') =
                                                      NVL (m.product_cd, '00')
                        --AND rec_coll.term BETWEEN d.term_from AND d.term_to
                        AND v_pram_amount BETWEEN d.amount_from AND d.amount_to;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_payable_pct := 0;
                  END;

                  v_payable_amt :=
                                  ROUND ((v_tot_comm_amt * v_payable_pct), 2);
               ELSIF rec_earn.persistency_depnt = '1'
               THEN
                  v_payable_amt :=
                          ROUND ((v_tot_comm_amt * rec_earn.payable_pct), 2);
               ELSE
                  v_payable_amt :=
                          ROUND ((v_tot_comm_amt * rec_earn.payable_pct), 2);
               END IF;

               SELECT NVL (SUM (payable_amount), 0)
                 INTO v_prev_paid_comm_amt
                 FROM com_dev_emp_comm c
                WHERE c.earning_type = 'B'
                  AND c.ins_tp_cd = p_ins_tp_cd
                  AND c.emp_gid = rec_emp.employee_gid
                  AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                      AND rec_earn.paid_yr_to
                  AND c.fy_start_dt = p_fy_start_dt
                  AND c.fy_end_dt = p_fy_end_dt;

               v_payable_amt := v_payable_amt - NVL (v_prev_paid_comm_amt, 0);
            ELSIF rec_earn.calc_on = 'T'
            THEN
               --Add by Musha on 12.04.2021 --
               --find Month date--
               IF NVL(p_prev_year_comm_st, 0) = 1 THEN
                   pro_off_months_setup (p_office_cd        => p_office_cd,
                                         p_year_month       => p_year_month,
                                         p_month_st_dt      => v_month_start_dt,
                                         p_month_ed_dt      => v_month_end_dt,
                                         p_error            => v_month_setup_error
                                        );

                   IF v_month_start_dt IS NULL AND v_month_setup_error IS NULL
                   THEN
                      v_month_start_dt :=
                                       TO_DATE (p_year_month || '01', 'RRRRMMDD');
                      v_month_end_dt := LAST_DAY (v_month_start_dt);
                   END IF;                   
               END  IF;
               --end of find month date--
               
               --Calculation on the current commission
               FOR rec_agent_com IN
                  cur_agent_com (TO_CHAR (rec_emp.employee_gid),
                                 rec_earn.paid_yr_from,
                                 rec_earn.paid_yr_to,
                                 rec_earn.earning_cd,
                                 v_month_start_dt,
                                 v_month_end_dt
                                )
               LOOP
                  ------Add this by Musha on 09-09-2014; If chain gap required then find gap exists or not
                  IF rec_earn.chain_gap_emp_tp_cd IS NOT NULL
                  THEN
                     IF rec_earn.chain_gap_emp_tp_cd = '06'
                     THEN
                        BEGIN
                           SELECT e.emp_type_cd
                             INTO v_emp_type_cd
                             FROM hrm_agent a, hrm_employee e
                            WHERE agent_id = rec_agent_com.agent_id
                              AND a.dev_emp_gid = e.emp_gid;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              NULL;
                        END;

                        IF     v_emp_type_cd <> rec_earn.chain_gap_emp_tp_cd
                           AND v_emp_type_cd = rec_emp.emp_type_cd
                        THEN
                           v_payable_amt :=
                              ROUND ((  rec_agent_com.payable_amount
                                      * rec_earn.payable_pct
                                     ),
                                     2
                                    );
                        ELSE
                           v_payable_amt := 0;
                        END IF;
                     ELSIF rec_earn.chain_gap_emp_tp_cd = '08'
                     ---Musha on 24.05.2016
                     THEN      ---Add this elsif condition for Chain gap of BC
                        BEGIN
                           SELECT e.emp_type_cd, a.dev_emp_gid
                             INTO v_emp_type_cd, v_dev_emp_gid
                             FROM hrm_agent a, hrm_employee e
                            WHERE agent_id = rec_agent_com.agent_id
                              AND a.dev_emp_gid = e.emp_gid;

                           IF v_emp_type_cd IN ('06', '07')
                           THEN
                              SELECT e.emp_type_cd, s.h_employee_gid
                                INTO v_emp_type_cd, v_dev_emp_gid
                                FROM hrm_employee e, hrm_employee_setup s
                               WHERE e.emp_gid = v_dev_emp_gid
                                 AND e.emp_gid = s.employee_gid;

                              IF v_emp_type_cd = '07'
                              THEN
                                 SELECT e.emp_type_cd
                                   INTO v_emp_type_cd
                                   FROM hrm_employee e, hrm_employee_setup s
                                  WHERE e.emp_gid = v_dev_emp_gid
                                    AND e.emp_gid = s.employee_gid;
                              END IF;
                           END IF;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              NULL;
                        END;

                        IF     v_emp_type_cd <> rec_earn.chain_gap_emp_tp_cd
                           AND v_emp_type_cd = rec_emp.emp_type_cd
                        THEN
                           v_payable_amt :=
                              ROUND ((  rec_agent_com.payable_amount
                                      * rec_earn.payable_pct
                                     ),
                                     2
                                    );
                        ELSE
                           v_payable_amt := 0;
                        END IF;
                     END IF;
                  ELSE
                     v_payable_amt :=
                        ROUND ((  rec_agent_com.payable_amount
                                * rec_earn.payable_pct
                               ),
                               2
                              );
                  END IF;

                  ----------

                  --*************************Insert data into table**********************--
                  --============================--
                    --Round Amount--Add by Musha on 29.09.2020
                    pro_get_sys_config_st (
                               p_pgid            => NULL,
                               p_config_id       => 43,
                               p_sys_config_st   => v_sys_config_st,
                               p_upd_message     => v_upd_message
                            );
                    
                    IF v_sys_config_st = 1 THEN
                        v_payable_amt := ROUND (v_payable_amt);
                    END IF;
                    --============================--
        
                  IF v_payable_amt > 0
                  THEN
                     --Generate PK
                     SELECT acc_dev_emp_comm_no.NEXTVAL
                          INTO v_comm_no
                          FROM DUAL;
                     
                     --IC Commission Calculation--
                       v_ded_rate := 0;
                       v_ded_amt := 0;
                       IF     rec_agent_com.comm_bon_year = 1
                          AND p_emp_type IN ('06', '07')
                          AND rec_earn.earning_cd <> '08'
                       THEN
                          v_ded_flag := 1;
                          --Check for one-stop deduction status
                          BEGIN
                               pro_get_sys_config_st (p_pgid            => NULL,
                                                      p_config_id       => 45,
                                                      p_sys_config_st   => v_ic_onestop_sysconf_st,
                                                      p_upd_message     => v_ic_onestop_message);

                               IF v_ic_onestop_sysconf_st = 0 --no deduction for one-stop policy
                               THEN
                                  SELECT   s.comm_date
                                    INTO   v_comm_date
                                    FROM   ins_p_summery s
                                   WHERE   s.pgid = rec_agent_com.pgid;

                                  IF v_comm_date = rec_agent_com.prem_due_dt
                                  THEN
                                     SELECT   MAX (active_office_cd)
                                       INTO   v_active_office_cd
                                       FROM   acc_advance_receivables
                                      WHERE   pgid = rec_agent_com.pgid AND rec_status = 1;
                                      
                                     IF v_active_office_cd = '23717'
                                      THEN
                                         v_onestop_ded := 0;
                                         v_ded_flag := 0;
                                      ELSE
                                         v_onestop_ded := 1;
                                      END IF;
                                  ELSE
                                     v_onestop_ded := 1;
                                     
                                     /*SELECT   active_office_cd
                                       INTO   v_active_office_cd
                                       FROM   acc_receivables
                                      WHERE   pgid = rec_agent_com.pgid AND rec_status = 1
                                              AND rec_agent_com.prem_due_dt BETWEEN due_dt_from
                                                                                AND  due_dt_to;*/
                                  END IF;

                                  
                               ELSE
                                  v_onestop_ded := 1;
                               END IF;
                            EXCEPTION
                               WHEN OTHERS
                               THEN
                                  v_onestop_ded := 1;
                            END;
                            
                          IF v_ded_flag = 1 THEN
                              pro_comm_ded_amt (p_emp_type_cd   => p_emp_type,
                                                p_pgid          => rec_agent_com.pgid,
                                                p_comm_bon_year => rec_agent_com.comm_bon_year,
                                                p_payable_amount => v_payable_amt,
                                                p_ded_rate      => v_ded_rate,
                                                p_ded_amt       => v_ded_amt,
                                                p_error         => v_ded_error);
                          ELSE
                             v_ded_amt := 0;
                          END IF;

                          IF v_ded_amt > 0 AND v_ded_error IS NULL
                          THEN
                             v_tot_ded_amount := NVL(v_tot_ded_amount, 0) + v_ded_amt;
                             
                             INSERT INTO com_dev_emp_comm_ded (comm_no,
                                                               emp_gid,
                                                               pgid,
                                                               prem_due_dt,
                                                               earning_cd,
                                                               prem_year,
                                                               payable_amount,
                                                               deduction_amount,
                                                               comm_ded_rate,
                                                               comm_ded_date,
                                                               i_usr,
                                                               i_dt)
                               VALUES   (v_comm_no,
                                         rec_emp.employee_gid,
                                         rec_agent_com.pgid,
                                         rec_agent_com.prem_due_dt,
                                         rec_earn.earning_cd,
                                         rec_agent_com.comm_bon_year,
                                         v_payable_amt,
                                         v_ded_amt,
                                         v_ded_rate,
                                         p_com_cal_dt_to,
                                         p_user,
                                         SYSDATE);
                          END IF;
                       ELSIF rec_agent_com.comm_bon_year = 2 AND p_emp_type IN ('06', '07') AND rec_earn.earning_cd <> '08'
                       THEN
                          null;
                          /*pro_comm_paid_ded_amt (
                             p_emp_type_cd     => p_emp_type,
                             p_pgid            => rec_agent_com.pgid,
                             p_prem_due_date   => rec_agent_com.prem_due_dt,
                             p_int_calc_date   => p_com_cal_dt_to,
                             p_paid_ded_amt    => v_paid_ded_amt,
                             p_paid_int_rate   => v_paid_int_rate,
                             p_paid_int_amt    => v_paid_int_amt,
                             p_error           => v_paid_ded_error
                          );

                          IF v_paid_ded_amt > 0 AND v_paid_ded_error IS NULL
                          THEN
                             v_tot_paid_ded_amount      := NVL(v_tot_paid_ded_amount, 0) + v_paid_ded_amt;
                             v_tot_paid_interest_amt    := NVL(v_tot_paid_interest_amt, 0) + NVL(v_paid_int_amt, 0);
                             
                             UPDATE   com_dev_emp_comm_ded
                                SET   bill_no = v_comm_no
                              WHERE   pgid = rec_agent_com.pgid AND bill_no IS NULL;
                          END IF;*/
                       END IF;
                     --End of IC Commission Calculation--
                     
                     /*--Generate PK
                     SELECT acc_dev_emp_comm_no.NEXTVAL
                          INTO v_comm_no
                          FROM DUAL;*/
                          
                     /*SELECT TO_NUMBER (   TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                       || LPAD (  NVL (MAX (SUBSTR (comm_no,
                                                                    5)
                                                           ),
                                                       0
                                                      )
                                                + 1,
                                                8,
                                                0
                                               )
                                      )
                       INTO v_comm_no
                       FROM com_dev_emp_comm
                      WHERE SUBSTR (comm_no, 1, 4) =
                                             TO_CHAR (p_com_cal_dt_to, 'rrmm');*/

                     --Account Integration--
                     /*IF p_ins_tp_cd = 1
                     THEN
                        --Conventional Insurance
                        v_trans_item_comm_pay := 20;     --Commission Payable
                        --v_trans_item_tax_pay    := 11;  --Tax Payable
                        v_trans_item_comm := 9;              --Commission amt
                     ELSE
                        --Takaful Insurance
                        v_trans_item_comm_pay := 108;    --Commission Payable
                        --v_trans_item_tax_pay    := 106;  --Tax Payable
                        v_trans_item_comm := 105;            --Commission amt
                     END IF;*/
                     IF p_ins_tp_cd = 1
                     THEN
                        IF p_emp_type = '06'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 197; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 184;         --Commission amt
                        ELSIF p_emp_type = '07'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 198; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 185;         --Commission amt
                        ELSIF p_emp_type = '08'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 199; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 186;         --Commission amt
                        ELSIF p_emp_type = '09'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 200; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 187;         --Commission amt
                        ELSIF p_emp_type = '11'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 201; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 188;         --Commission amt
                        ELSIF p_emp_type = '10'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 203; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 190;         --Commission amt
                        ELSIF p_emp_type = '12'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 202; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 189;         --Commission amt
                        
                        ELSIF p_emp_type = '14'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 240;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 238;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 244;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 242;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 248;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 246;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 252;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 250;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 256;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 254;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 260;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 258;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 264;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 262;      --Commission amt   
                        END IF;
                     ELSE
                        IF p_emp_type = '06'
                        THEN
                           --Takaful Insurance
                           v_trans_item_comm_pay := 204; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 191;         --Commission amt
                        ELSIF p_emp_type = '07'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 205; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 192;         --Commission amt
                        ELSIF p_emp_type = '08'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 206; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 193;         --Commission amt
                        ELSIF p_emp_type = '09'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 207; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 194;         --Commission amt
                        ELSIF p_emp_type = '11'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 208; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 195;         --Commission amt
                        ELSIF p_emp_type = '10'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 210; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 196;         --Commission amt
                        ELSIF p_emp_type = '12'
                        THEN
                           --Conventional Insurance
                           v_trans_item_comm_pay := 209; --Commission Payable
                           --v_trans_item_tax_pay    := 11;  --Tax Payable
                           v_trans_item_comm := 211;         --Commission amt
                        
                        ELSIF p_emp_type = '14'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 241;
                                                         --Commission Payable
                              v_trans_item_comm := 239;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 245;
                                                         --Commission Payable
                              v_trans_item_comm := 243;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 249;
                                                         --Commission Payable
                              v_trans_item_comm := 247;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 253;
                                                         --Commission Payable
                              v_trans_item_comm := 251;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 257;
                                                         --Commission Payable
                              v_trans_item_comm := 255;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 261;
                                                         --Commission Payable
                              v_trans_item_comm := 259;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 265;
                                                         --Commission Payable
                              v_trans_item_comm := 263;      --Commission amt   
                        END IF;
                     END IF;

                     /********************************************************
                     This part is added by MD. Sayadur Rahaman  on 14/Feb-2013
                     Purpose: Accounts Integration
                     *********************************************************/
                     v_regional_off :=
                                     fun_find_regional_off (rec_emp.office_cd);

                     ----------Find payable office-----------
                     --Musha on 01.06.2016
                     BEGIN
                        SELECT fun_find_sales_off (rec_emp.office_cd)
                          INTO v_payable_off
                          FROM DUAL;

                        IF v_payable_off IS NULL
                        THEN
                           SELECT fun_find_service_off (rec_emp.office_cd)
                             INTO v_payable_off
                             FROM DUAL;

                           IF v_payable_off IS NULL
                           THEN
                              SELECT fun_find_head_off (rec_emp.office_cd)
                                INTO v_payable_off
                                FROM DUAL;
                           END IF;
                        END IF;
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           v_payable_off := rec_emp.office_cd;
                     END;

                     --End of find payable office--
                     DECLARE
                        recprem          pkg_gl_voucher.t_trans_tab;
                        v_error          VARCHAR2 (200);
                        v_object_cd      gen_object_info.object_cd%TYPE;
                        v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
                        v_inter_off_st   CHAR (1);
                        v_office_cd      hrm_office.office_cd%TYPE;
                        v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
                        v_trans_date     DATE;
                        v_cost_center    hrm_office.office_cd%TYPE;
                        v_narration      VARCHAR2 (200);
                        v_user           VARCHAR2 (20);
                        v_chq_tp         VARCHAR2 (3);
                        v_chq_no         VARCHAR2 (50);
                        v_chq_dt         DATE;
                        v_sus_amt_used   NUMBER (1);
                     BEGIN
                        /***********************
                        Business wise value will change.
                        Developer will put the value
                        **********************************/
                        v_object_cd := p_object_cd;
                        v_voucher_cd := '05';
                        v_inter_off_st := '0';
                        v_office_cd := v_regional_off;
                        v_cost_center := v_payable_off;
                        --rec_emp.office_cd;    ---Musha on 01.06.2016
                        v_trans_id :=
                              rec_emp.employee_gid
                           || rec_emp.office_cd
                           || TO_CHAR (p_com_cal_dt_to, 'DDMMRR');
                        v_trans_date := p_com_cal_dt_to;
                        v_narration :=
                              'Employee Commission Payable Calculation on '
                           || p_com_cal_dt_to;
                        v_user := p_user;
/*******End********/

                        --commission
                        recprem (2).trans_item_cd := v_trans_item_comm;
                        recprem (2).post_amount := v_payable_amt;
                        recprem (2).chq_tp := NULL;
                        recprem (2).chq_no := NULL;
                        recprem (2).chq_dt := NULL;
                        --commission payable
                        recprem (1).trans_item_cd := v_trans_item_comm_pay;
                        recprem (1).post_amount := v_payable_amt;
                        recprem (1).chq_tp := NULL;
                        recprem (1).chq_no := NULL;
                        recprem (1).chq_dt := NULL;
                        
                        IF v_paid_ded_amt > 0 THEN
                            --Paid deduction
                            IF p_emp_type = '06' THEN
                                recprem (3).trans_item_cd := 228;
                            ELSIF p_emp_type = '07' THEN
                                recprem (3).trans_item_cd := 229;
                            END IF;
                            recprem (3).post_amount := v_paid_ded_amt;
                            recprem (3).chq_tp := NULL;
                            recprem (3).chq_no := NULL;
                            recprem (3).chq_dt := NULL;
                            
                            --Paid interest of deduction
                            IF v_paid_int_amt > 0 THEN
                                IF p_emp_type = '06' THEN
                                    recprem (4).trans_item_cd := 225;
                                ELSIF p_emp_type = '07' THEN
                                    recprem (4).trans_item_cd := 226;
                                END IF;
                                recprem (4).post_amount := v_paid_int_amt;
                                recprem (4).chq_tp := NULL;
                                recprem (4).chq_no := NULL;
                                recprem (4).chq_dt := NULL;
                            END IF;
                        END IF;
            
                        pkg_gl_voucher.pro_voucher_posting
                                            (p_table             => recprem,
                                             p_object_cd         => v_object_cd,
                                             p_vouch_cd          => v_voucher_cd,
                                             p_inter_off_st      => v_inter_off_st,
                                             p_office_cd         => v_office_cd,
                                             p_trans_id          => v_trans_id,
                                             p_trans_date        => v_trans_date,
                                             p_cost_center       => v_cost_center,
                                             p_narration         => v_narration,
                                             p_user              => v_user,
                                             p_ins_tp_cd         => p_ins_tp_cd,
                                             p_voucher_no        => v_payable_vr_no,
                                             p_error             => v_acc_error
                                            );
                                            
                           --IC Voucher--
                            IF v_ded_amt > 0 THEN
                                DECLARE
                                    recprem1          pkg_gl_voucher.t_trans_tab;                        
                                 BEGIN
                                    IF p_emp_type = '06' THEN
                                        recprem1 (1).trans_item_cd := 219;
                                    ELSIF p_emp_type = '07' THEN
                                        recprem1 (1).trans_item_cd := 220;
                                    END IF;
                                    recprem1 (1).post_amount := v_ded_amt;
                                    recprem1 (1).chq_tp := NULL;
                                    recprem1 (1).chq_no := NULL;
                                    recprem1 (1).chq_dt := NULL;

                                    --commission
                                    IF p_emp_type = '06' THEN
                                        recprem1 (2).trans_item_cd := 222;
                                    ELSIF p_emp_type = '07' THEN
                                        recprem1 (2).trans_item_cd := 223;
                                    END IF;
                                    recprem1 (2).post_amount := v_ded_amt;
                                    recprem1 (2).chq_tp := NULL;
                                    recprem1 (2).chq_no := NULL;
                                    recprem1 (2).chq_dt := NULL;

                                    pkg_gl_voucher.pro_voucher_posting (
                                       p_table          => recprem1,
                                       p_object_cd      => v_object_cd,
                                       p_vouch_cd       => '05',
                                       p_inter_off_st   => 0,
                                       p_office_cd      => v_office_cd,
                                       p_trans_id       => v_trans_id,
                                       p_trans_date     => v_trans_date,
                                       p_cost_center    => v_cost_center,
                                       p_narration      => 'UM/BM IC Payable',
                                       p_user           => v_user,
                                       p_ins_tp_cd      => p_ins_tp_cd,
                                       p_voucher_no     => v_ic_voucher_no,
                                       p_error          => v_ic_vr_error
                                    );
                                 END;
                            END IF;
                           --End of IC Voucher--
                     END;

                     --End of Account Integration--
                     IF v_acc_error IS NULL
                     THEN                                               
                        
                        INSERT INTO com_dev_emp_comm
                                    (comm_no, emp_gid,
                                     office_cd, pgid,
                                     prem_due_dt,
                                     earning_cd,
                                     earning_type, com_calc_dt_to,
                                     prem_year,
                                     payable_amount, payable_vouch_dt,
                                     com_payable_vou, fy_start_dt,
                                     fy_end_dt, bill_status, ins_tp_cd,
                                     pay_rate,
                                     receive_date,
                                     agent_id,
                                     agent_office_cd, i_usr,
                                     i_dt, payable_office_cd,
                                     comm_ded_rate,
                                     comm_ded_amt,
                                     paid_ded_amount, paid_interest_amt, paid_interest_rate,
                                     ic_payable_vouch_no
                                    )
                             VALUES (v_comm_no,                      --comm_NO
                                               rec_emp.employee_gid, --emp_gid
                                     rec_emp.office_cd,            --OFFICE_CD
                                                       rec_agent_com.pgid,
                                     --PGID
                                     rec_agent_com.prem_due_dt,  --PREM_DUE_DT
                                     rec_earn.earning_cd,         --EARNING_CD
                                     rec_earn.earning_type,
                                                           --EARNING_TYPE
                                                           p_com_cal_dt_to,
                                     --COM_CALC_DT_TO
                                     rec_agent_com.comm_bon_year,
                                     --Prem_YEAR
                                     v_payable_amt,
                                                   --PAYABLE_AMOUNT
                                                   v_payable_vr_dt,
                                     --PAYABLE_VOUCH_DT
                                     v_payable_vr_no,
                                                     --COM_PAYABLE_VOU
                                                     p_fy_start_dt,
                                     --fy_START_Dt
                                     p_fy_end_dt, 
                                                  --fy_END_Dt
                                     '0',                        --BILL_STATUS
                                         p_ins_tp_cd,
                                     rec_earn.payable_pct * 100,
                                     rec_agent_com.receive_date,
                                     rec_agent_com.agent_id,
                                     rec_agent_com.office_cd, p_user,
                                     --I_USR
                                     SYSDATE,                           --I_DT
                                             v_payable_off,
                                       v_ded_rate,
                                       v_ded_amt,
                                       v_paid_ded_amt, v_paid_int_amt, v_paid_int_rate,
                                       v_ic_voucher_no
                                    );

                        p_record_count := NVL (p_record_count, 0) + 1;
                     END IF;
                  END IF;
               --*************************End of Insert data into table**********************--
               END LOOP;
            ---Add this condition by Musha on 07.03.2022 
            ELSIF rec_earn.calc_on = 'M'
               THEN
                  --Find office wise month open and close date--
                  pro_off_months_setup (p_office_cd     => p_office_cd,
                                        p_year_month    => p_year_month,
                                        p_month_st_dt   => v_month_start_dt,
                                        p_month_ed_dt   => v_month_end_dt,
                                        p_error         => v_month_setup_error);

                  IF v_month_start_dt IS NULL AND v_month_setup_error IS NULL
                  THEN
                     v_month_start_dt := TO_DATE (p_year_month || '01', 'RRRRMMDD');
                     v_month_end_dt := LAST_DAY (v_month_start_dt);
                  END IF;

                  IF NVL (p_prev_year_comm_st, 0) = 0
                  THEN
                     v_month_end_dt := p_com_cal_dt_to;
                  END IF;

                  --Toral collected premium on per month
                  IF '1' = '1'
                  ----p_com_cal_dt_to = v_month_end_dt --last_day(p_com_cal_dt_to)
                  THEN
                     --Check for the month end

                     v_earn_cnt := 0;

                     IF v_earn_cnt = 0
                     THEN
                        --Not yet calculated for the employee
                        IF rec_earn.amount_depnt = '1' AND rec_earn.payable_pct IS NULL
                        THEN
                           NULL;
                        ELSIF rec_earn.term_depnt = '1'
                        THEN
                           SELECT   SUM (c.payable_amount)
                             INTO   v_tot_comm_amt
                             FROM   com_agent_com_detail c, ins_p_summery s
                            WHERE   c.ins_tp_cd = p_ins_tp_cd
                                    AND NVL (c.service_charge_st, '0') = '0'
                                    AND c.com_exe_date BETWEEN v_month_start_dt
                                                             AND  v_month_end_dt
                                    AND c.comm_bon_year BETWEEN rec_earn.paid_yr_from
                                                        AND  rec_earn.paid_yr_to
                                    AND c.bill_status = '1'
                                    ---musha on 19.10.2016
                                    AND ( (rec_earn.setup_option = 'G'
                                           AND s.product_cd NOT IN ('09', '16', '39'))
                                         OR (rec_earn.setup_option = 'P'
                                             AND s.product_cd IN
                                                      (SELECT   product_cd
                                                         FROM   com_dev_earning_setup_mst
                                                        WHERE   emp_type_cd =
                                                                   rec_emp.emp_type_cd
                                                                AND service_cd =
                                                                      rec_emp.service_cd
                                                                AND earning_cd =
                                                                      rec_earn.earning_cd)))
                                    AND ( (c.prem_due_dt = s.comm_date
                                           AND fun_comm_calc_st (
                                                 p_business_id   => 1,
                                                 --1 for one stop policy
                                                 p_emp_type_cd   => NULL,
                                                 p_emp_gid       => NULL,
                                                 p_pgid          => s.pgid
                                              ) = 1)
                                         OR c.prem_due_dt <> s.comm_date)
                                    AND EXISTS
                                          (SELECT   g.agent_id
                                             FROM   hrm_agent g
                                            WHERE   g.agent_id = c.agent_id
                                                    AND g.dev_emp_gid IN
                                                             (    SELECT   e.emp_gid
                                                                    FROM   hrm_employee e,
                                                                           hrm_employee_setup s
                                                                   WHERE   e.employment_tp_cd =
                                                                              '02'
                                                                           AND e.emp_gid =
                                                                                 s.employee_gid(+)
                                                              START WITH   s.h_employee_gid =
                                                                              rec_emp.employee_gid
                                                              CONNECT BY   PRIOR s.employee_gid =
                                                                              s.h_employee_gid))
                                    AND s.term BETWEEN TO_CHAR (rec_earn.term_from)
                                                   AND  TO_CHAR (rec_earn.term_to)
                                    AND NOT EXISTS
                                          (SELECT   1
                                             FROM   com_earning_head h
                                            WHERE   h.chain_gap_emp_tp_cd IS NOT NULL
                                                    AND h.earning_cd = c.earning_cd)
                                    AND NOT EXISTS
                                          (SELECT   1
                                             FROM   com_dev_emp_bonus_comm_dtl d,
                                                    com_dev_emp_bonus_comm f,
                                                    com_earning_head h
                                            WHERE   d.payable_no = f.payable_no
                                                    AND h.earning_cd =
                                                          rec_earn.earning_cd
                                                    AND f.earning_cd =
                                                          rec_earn.earning_cd
                                                    AND d.fa_comm_no = c.fa_comm_no
                                                    AND (f.emp_gid = rec_emp.employee_gid
                                                         OR f_emp_type_cd (f.emp_gid) =
                                                              f_emp_type_cd (
                                                                 rec_emp.employee_gid
                                                              ))) --add by musha on 21.03.2017
                                    AND c.pgid = s.pgid;

                           v_payable_amt :=
                              ROUND (NVL ( (v_tot_comm_amt * rec_earn.payable_pct), 0),
                                     2);
                        END IF;

                        --*************************Insert data into table**********************--
                        --============================--
                        --Round Amount--Add by Musha on 29.09.2020
                        pro_get_sys_config_st (p_pgid            => NULL,
                                               p_config_id       => 43,
                                               p_sys_config_st   => v_sys_config_st,
                                               p_upd_message     => v_upd_message);

                        IF v_sys_config_st = 1
                        THEN
                           v_payable_amt := ROUND (v_payable_amt);
                        END IF;

                        --============================--

                        IF v_payable_amt > 0
                        THEN
                           --Generate PK
                           SELECT   TO_NUMBER(TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                              || LPAD (
                                                    NVL (MAX (SUBSTR (payable_no, 5)), 0)
                                                    + 1,
                                                    8,
                                                    0
                                                 ))
                             INTO   v_comm_no
                             FROM   com_dev_emp_bonus_comm
                            WHERE   SUBSTR (payable_no, 1, 4) =
                                       TO_CHAR (p_com_cal_dt_to, 'rrmm');

                           --Account Integration--

                           IF p_ins_tp_cd = 1
                           THEN
                              IF p_emp_type = '06'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 197;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 184;                --Commission amt
                              ELSIF p_emp_type = '07'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 198;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 185;                --Commission amt
                              ELSIF p_emp_type = '08'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 199;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 186;                --Commission amt
                              ELSIF p_emp_type = '09'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 200;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 187;                --Commission amt
                              ELSIF p_emp_type = '10'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 203;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 190;                --Commission amt
                              ELSIF p_emp_type = '11'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 201;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 188;                --Commission amt
                              ELSIF p_emp_type = '12'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 202;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 189;                --Commission amt
                              ELSIF p_emp_type = '14'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 240;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 238;                --Commission amt
                              ELSIF p_emp_type = '15'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 244;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 242;                --Commission amt
                              ELSIF p_emp_type = '16'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 248;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 246;                --Commission amt
                              ELSIF p_emp_type = '17'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 252;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 250;                --Commission amt
                              ELSIF p_emp_type = '18'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 256;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 254;                --Commission amt
                              ELSIF p_emp_type = '19'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 260;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 258;                --Commission amt
                              ELSIF p_emp_type = '20'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 264;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 262;                --Commission amt
                              END IF;
                           ELSE
                              IF p_emp_type = '06'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 204;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 191;                --Commission amt
                              ELSIF p_emp_type = '07'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 205;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 192;                --Commission amt
                              ELSIF p_emp_type = '08'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 206;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 193;                --Commission amt
                              ELSIF p_emp_type = '09'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 207;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 194;                --Commission amt
                              ELSIF p_emp_type = '11'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 208;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 195;                --Commission amt
                              ELSIF p_emp_type = '10'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 210;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 196;                --Commission amt
                              ELSIF p_emp_type = '12'
                              THEN
                                 --Conventional Insurance
                                 v_trans_item_comm_pay := 209;
                                 --Commission Payable
                                 --v_trans_item_tax_pay    := 11;  --Tax Payable
                                 v_trans_item_comm := 211;                --Commission amt
                              ELSIF p_emp_type = '14'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 241;
                                 --Commission Payable
                                 v_trans_item_comm := 239;                --Commission amt
                              ELSIF p_emp_type = '15'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 245;
                                 --Commission Payable
                                 v_trans_item_comm := 243;                --Commission amt
                              ELSIF p_emp_type = '16'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 249;
                                 --Commission Payable
                                 v_trans_item_comm := 247;                --Commission amt
                              ELSIF p_emp_type = '17'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 253;
                                 --Commission Payable
                                 v_trans_item_comm := 251;                --Commission amt
                              ELSIF p_emp_type = '18'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 257;
                                 --Commission Payable
                                 v_trans_item_comm := 255;                --Commission amt
                              ELSIF p_emp_type = '19'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 261;
                                 --Commission Payable
                                 v_trans_item_comm := 259;                --Commission amt
                              ELSIF p_emp_type = '20'
                              THEN
                                 --Takaful Insurance
                                 v_trans_item_comm_pay := 265;
                                 --Commission Payable
                                 v_trans_item_comm := 263;                --Commission amt
                              END IF;
                           END IF;

                           /********************************************************
                           This part is added by MD. Sayadur Rahaman  on 14/Feb-2013
                           Purpose: Accounts Integration
                           *********************************************************/
                           v_regional_off := fun_find_regional_off (rec_emp.office_cd);

                           ----------Find payable office-----------
                           --Musha on 01.06.2016
                           BEGIN
                              SELECT   fun_find_sales_off (rec_emp.office_cd)
                                INTO   v_payable_off
                                FROM   DUAL;

                              IF v_payable_off IS NULL
                              THEN
                                 SELECT   fun_find_service_off (rec_emp.office_cd)
                                   INTO   v_payable_off
                                   FROM   DUAL;

                                 IF v_payable_off IS NULL
                                 THEN
                                    SELECT   fun_find_head_off (rec_emp.office_cd)
                                      INTO   v_payable_off
                                      FROM   DUAL;
                                 END IF;
                              END IF;
                           EXCEPTION
                              WHEN OTHERS
                              THEN
                                 v_payable_off := rec_emp.office_cd;
                           END;

                           --End of find payable office--
                           DECLARE
                              recprem          pkg_gl_voucher.t_trans_tab;
                              v_error          VARCHAR2 (200);
                              v_object_cd      gen_object_info.object_cd%TYPE;
                              v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
                              v_inter_off_st   CHAR (1);
                              v_office_cd      hrm_office.office_cd%TYPE;
                              v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
                              v_trans_date     DATE;
                              v_cost_center    hrm_office.office_cd%TYPE;
                              v_narration      VARCHAR2 (200);
                              v_user           VARCHAR2 (20);
                              v_chq_tp         VARCHAR2 (3);
                              v_chq_no         VARCHAR2 (50);
                              v_chq_dt         DATE;
                              v_sus_amt_used   NUMBER (1);
                           BEGIN
                              /***********************
                              Business wise value will change.
                              Developer will put the value
                              **********************************/
                              v_object_cd := p_object_cd;
                              v_voucher_cd := '05';
                              v_inter_off_st := '0';
                              v_office_cd := v_regional_off;
                              v_cost_center := v_payable_off;
                              --rec_emp.office_cd;    --Musha on 01.06.2016
                              v_trans_id :=
                                    rec_emp.employee_gid
                                 || rec_emp.office_cd
                                 || TO_CHAR (p_com_cal_dt_to, 'DDMMRR');
                              v_trans_date := p_com_cal_dt_to;
                              v_narration :=
                                 'Employee Commission Payable Calculation on '
                                 || p_com_cal_dt_to;
                              v_user := p_user;
                              /*******End********/

                              --commission
                              recprem (2).trans_item_cd := v_trans_item_comm;
                              recprem (2).post_amount := v_payable_amt;
                              recprem (2).chq_tp := NULL;
                              recprem (2).chq_no := NULL;
                              recprem (2).chq_dt := NULL;
                              --commission payable
                              recprem (1).trans_item_cd := v_trans_item_comm_pay;
                              recprem (1).post_amount := v_payable_amt;
                              recprem (1).chq_tp := NULL;
                              recprem (1).chq_no := NULL;
                              recprem (1).chq_dt := NULL;
                              pkg_gl_voucher.pro_voucher_posting (
                                 p_table          => recprem,
                                 p_object_cd      => v_object_cd,
                                 p_vouch_cd       => v_voucher_cd,
                                 p_inter_off_st   => v_inter_off_st,
                                 p_office_cd      => v_office_cd,
                                 p_trans_id       => v_trans_id,
                                 p_trans_date     => v_trans_date,
                                 p_cost_center    => v_cost_center,
                                 p_narration      => v_narration,
                                 p_user           => v_user,
                                 p_ins_tp_cd      => p_ins_tp_cd,
                                 p_voucher_no     => v_payable_vr_no,
                                 p_error          => v_acc_error
                              );
                           END;

                           --End of Account Integration--
                           IF v_acc_error IS NULL
                           THEN
                              INSERT INTO com_dev_emp_bonus_comm (
                                                                     payable_no,
                                                                     emp_gid,
                                                                     office_cd,
                                                                     earning_cd,
                                                                     earning_type,
                                                                     com_calc_dt_to,
                                                                     payable_amount,
                                                                     base_amount,
                                                                     com_payable_vou,
                                                                     fy_start_dt,
                                                                     fy_end_dt,
                                                                     bill_status,
                                                                     ins_tp_cd,
                                                                     pay_rate,
                                                                     i_usr,
                                                                     i_dt,
                                                                     payable_office_cd
                                         )
                                VALUES   (
                                             v_comm_no,                          --comm_NO
                                             rec_emp.employee_gid,
                                             --emp_gid
                                             rec_emp.office_cd,                --OFFICE_CD
                                             rec_earn.earning_cd,             --EARNING_CD
                                             rec_earn.earning_type,         --EARNING_TYPE
                                             p_com_cal_dt_to,             --COM_CALC_DT_TO
                                             v_payable_amt,
                                             --PAYABLE_AMOUNT
                                             v_tot_comm_amt,                --base_amount
                                             v_payable_vr_no,
                                             --COM_PAYABLE_VOU
                                             p_fy_start_dt,                  --fy_START_Dt
                                             p_fy_end_dt,
                                             --fy_END_Dt
                                             '0',                            --BILL_STATUS
                                             p_ins_tp_cd,
                                             NVL (rec_earn.payable_pct, v_payable_pct)
                                             * 100,
                                             p_user,                               --I_USR
                                             SYSDATE,                               --I_DT
                                             v_payable_off
                                         );

                              FOR r
                              IN (SELECT   c.fa_comm_no,
                                           c.agent_id,
                                           c.pgid,
                                           c.prem_due_dt,
                                           c.payable_amount,
                                           s.installment_premium
                                    FROM   com_agent_com_detail c, ins_p_summery s
                                   WHERE   c.ins_tp_cd = p_ins_tp_cd
                                           AND NVL (c.service_charge_st, '0') = '0'
                                           AND c.COM_EXE_DATE BETWEEN v_month_start_dt
                                                                    AND  v_month_end_dt
                                           AND c.COMM_BON_YEAR BETWEEN rec_earn.paid_yr_from
                                                               AND  rec_earn.paid_yr_to
                                           AND c.bill_status = '1'
                                           ---musha on 19.10.2016
                                           AND ( (rec_earn.setup_option = 'G'
                                                  AND s.product_cd NOT IN
                                                           ('09', '16', '39'))
                                                OR (rec_earn.setup_option = 'P'
                                                    AND s.product_cd IN
                                                             (SELECT   product_cd
                                                                FROM   com_dev_earning_setup_mst
                                                               WHERE   emp_type_cd =
                                                                          rec_emp.emp_type_cd
                                                                       AND service_cd =
                                                                             rec_emp.service_cd
                                                                       AND earning_cd =
                                                                             rec_earn.earning_cd)))
                                           AND ( (c.prem_due_dt = s.comm_date
                                                  AND fun_comm_calc_st (
                                                        p_business_id   => 1,
                                                        --1 for one stop policy
                                                        p_emp_type_cd   => NULL,
                                                        p_emp_gid       => NULL,
                                                        p_pgid          => s.pgid
                                                     ) = 1)
                                                OR c.prem_due_dt <> s.comm_date)
                                           AND EXISTS
                                                 (SELECT   g.agent_id
                                                    FROM   hrm_agent g
                                                   WHERE   g.agent_id = c.agent_id
                                                           AND g.dev_emp_gid IN
                                                                    (    SELECT   e.emp_gid
                                                                           FROM   hrm_employee e,
                                                                                  hrm_employee_setup s
                                                                          WHERE   e.employment_tp_cd =
                                                                                     '02'
                                                                                  AND e.emp_gid =
                                                                                        s.employee_gid(+)
                                                                     START WITH   s.h_employee_gid =
                                                                                     rec_emp.employee_gid
                                                                     CONNECT BY   PRIOR s.employee_gid =
                                                                                     s.h_employee_gid))
                                           AND s.term BETWEEN TO_CHAR (
                                                                 rec_earn.term_from
                                                              )
                                                          AND  TO_CHAR (rec_earn.term_to)
                                           AND NOT EXISTS
                                                 (SELECT   1
                                                    FROM   com_earning_head h
                                                   WHERE   h.chain_gap_emp_tp_cd IS NOT NULL
                                                           AND h.earning_cd =
                                                                 c.earning_cd)
                                           AND NOT EXISTS
                                                 (SELECT   1
                                                    FROM   com_dev_emp_bonus_comm_dtl d,
                                                           com_dev_emp_bonus_comm f,
                                                           com_earning_head h
                                                   WHERE   d.payable_no = f.payable_no
                                                           AND h.earning_cd =
                                                                 rec_earn.earning_cd
                                                           AND f.earning_cd =
                                                                 rec_earn.earning_cd
                                                           AND d.fa_comm_no =
                                                                 c.fa_comm_no
                                                           AND (f.emp_gid =
                                                                   rec_emp.employee_gid
                                                                OR f_emp_type_cd (
                                                                     f.emp_gid
                                                                  ) =
                                                                     f_emp_type_cd(rec_emp.employee_gid))) --add by musha on 21.03.2017
                                           AND c.pgid = s.pgid)
                              LOOP
                                 v_dtl_gross_payable_amt :=
                                    ROUND (
                                       r.payable_amount
                                       * NVL (rec_earn.payable_pct, v_payable_pct),
                                       2
                                    );

                                 v_dtl_tax_ded_amt :=
                                    ROUND (v_dtl_gross_payable_amt * 0.075, 2);

                                 IF v_sys_config_st = 1
                                 THEN
                                    v_dtl_gross_payable_amt :=
                                       ROUND (v_dtl_gross_payable_amt);
                                    v_dtl_tax_ded_amt := ROUND (v_dtl_tax_ded_amt);
                                 END IF;

                                 INSERT INTO com_dev_emp_bonus_comm_dtl (
                                                                            payable_no,
                                                                            emp_gid,
                                                                            fa_comm_no,
                                                                            agent_id,
                                                                            pgid,
                                                                            prem_due_date,
                                                                            premium_amt,
                                                                            payable_rate,
                                                                            gross_payable_amt,
                                                                            tax_ded_amt,
                                                                            net_payable_amt,
                                                                            i_usr,
                                                                            i_dt
                                            )
                                   VALUES   (
                                                v_comm_no,
                                                rec_emp.employee_gid,
                                                r.fa_comm_no,
                                                r.agent_id,
                                                r.pgid,
                                                r.prem_due_dt,
                                                r.installment_premium,
                                                NVL (rec_earn.payable_pct, v_payable_pct),
                                                v_dtl_gross_payable_amt,
                                                v_dtl_tax_ded_amt,
                                                v_dtl_gross_payable_amt
                                                - NVL (v_dtl_tax_ded_amt, 0),
                                                p_user,
                                                SYSDATE
                                            );
                              END LOOP;

                              p_record_count := NVL (p_record_count, 0) + 1;
                           END IF;
                        END IF;
                     --*************************End of Insert data into table**********************--
                     ELSE
                        v_payable_amt := 0;
                     END IF;
                  END IF;
            
            END IF;
         ELSIF rec_earn.cal_based_on IN ('3', '4')                --3 UM, 4 BM
         THEN
            --Add by Musha on 18-01-2015
            IF rec_earn.calc_on = 'M'
            THEN
               --Find office wise month open and close date--
               pro_off_months_setup (p_office_cd        => p_office_cd,
                                     p_year_month       => p_year_month,
                                     p_month_st_dt      => v_month_start_dt,
                                     p_month_ed_dt      => v_month_end_dt,
                                     p_error            => v_month_setup_error
                                    );

               IF v_month_start_dt IS NULL AND v_month_setup_error IS NULL
               THEN
                  v_month_start_dt :=
                                   TO_DATE (p_year_month || '01', 'RRRRMMDD');
                  v_month_end_dt := LAST_DAY (v_month_start_dt);
               END IF;

               --Toral Commission on per month
               IF p_com_cal_dt_to = v_month_end_dt --last_day(p_com_cal_dt_to)
               THEN
                  --Check for the month end
                  --Check for the earning already calculated or not--
                  SELECT COUNT (1)
                    INTO v_earn_cnt
                    FROM com_dev_emp_bonus_comm c
                   WHERE c.emp_gid = rec_emp.employee_gid
                     AND c.earning_cd = rec_earn.earning_cd
                     AND c.com_calc_dt_to = p_com_cal_dt_to
                     AND c.ins_tp_cd = p_ins_tp_cd
                     AND DECODE (rec_earn.term_depnt, 1, 1, 0) = '0';

                  IF v_earn_cnt = 0
                  THEN
                     --Not yet calculated for the employee
                     --Find total commission for the month--
                     SELECT NVL (SUM (c.payable_amount), 0)
                       INTO v_tot_comm_amt
                       FROM com_dev_emp_comm c, ins_p_summery s
                      WHERE c.ins_tp_cd = p_ins_tp_cd
                        --AND    to_char(c.com_calc_dt_to, 'RRRRMM') =
                        --    to_char(p_com_cal_dt_to, 'RRRRMM')
                        AND c.com_calc_dt_to BETWEEN v_month_start_dt
                                                 AND v_month_end_dt
                        AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                            AND rec_earn.paid_yr_to
                        AND c.bill_status = '1'         ---Musha on 19.10.2016
                        AND c.emp_gid IN (
                               SELECT emp_gid
                                 FROM (SELECT     e.emp_gid, e.emp_type_cd
                                             FROM hrm_employee e,
                                                  hrm_employee_setup s
                                            WHERE e.employment_tp_cd = '02'
                                              AND e.emp_gid = s.employee_gid(+)
                                       START WITH s.h_employee_gid =
                                                          rec_emp.employee_gid
                                       CONNECT BY PRIOR s.employee_gid =
                                                              s.h_employee_gid)
                                WHERE emp_type_cd =
                                         DECODE (rec_earn.cal_based_on,
                                                 '3', '06',
                                                 '4', '07',
                                                 '00'
                                                ))
                        AND c.pgid = s.pgid;

                     IF     rec_earn.amount_depnt = '1'
                        AND rec_earn.payable_pct IS NULL
                     THEN
                        BEGIN
                           SELECT (d.payable_pct / 100)
                             INTO v_payable_pct
                             FROM com_earning_head h,
                                  com_dev_earning_setup_mst m,
                                  com_dev_earning_setup_dtl d
                            WHERE h.status = '1'
                              AND NVL (m.amount_depnt, 0) = '1'
                              AND m.earning_cd = rec_earn.earning_cd
                              AND h.earning_type = rec_earn.earning_type
                              AND h.earning_cd = m.earning_cd
                              AND m.setupmst_cd = d.setupmst_cd
                              AND m.emp_type_cd = rec_emp.emp_type_cd
                              AND rec_earn.paid_yr_from = h.paid_yr_from
                              AND rec_earn.paid_yr_to = h.paid_yr_to
                              AND m.service_cd = rec_emp.service_cd
                              AND NVL (m.product_cd, '00') =
                                                      NVL (m.product_cd, '00')
                              AND v_tot_comm_amt BETWEEN d.amount_from
                                                     AND d.amount_to;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_pct := 0;
                        END;

                        v_payable_amt :=
                                 ROUND ((v_tot_coll_prem * v_payable_pct), 2);
                     ELSIF rec_earn.term_depnt = '1'
                     THEN
                        /*FOR k IN (SELECT d.term_from
                                        ,d.term_to
                                        ,payable_pct
                                  FROM   com_earning_head          h
                                        ,com_dev_earning_setup_mst m
                                        ,com_dev_earning_setup_dtl d
                                  WHERE  h.status = '1'
                                  AND    h.earning_type =
                                         nvl(p_earning_type, h.earning_type)
                                  AND    h.earning_cd = rec_earn.earning_cd
                                  AND    nvl(m.term_depnt, 0) = '1'
                                  AND    h.earning_cd = m.earning_cd
                                  AND    m.setupmst_cd = d.setupmst_cd
                                  AND    m.emp_type_cd = rec_emp.emp_type_cd
                                  AND    m.service_cd = rec_emp.service_cd)
                        LOOP*/
                        SELECT                --nvl(SUM(c.payable_amount), 0)
                               DECODE
                                    (rec_earn.cal_based_on,
                                     '1', NVL (SUM (s.installment_premium), 0),
                                     '3', NVL (SUM (c.payable_amount), 0),
                                     '4', NVL (SUM (c.payable_amount), 0),
                                     '6', NVL (SUM (s.life_premium), 0),
                                     '7', NVL
                                          (SUM (  s.life_premium
                                                + NVL (s.suppl_ben_premium, 0)
                                                + NVL
                                                     (s.suppl_product_premium,
                                                      0
                                                     )
                                               ),
                                           0
                                          ),
                                     '8', NVL
                                          (SUM (  NVL (s.suppl_ben_premium, 0)
                                                + NVL
                                                     (s.suppl_product_premium,
                                                      0
                                                     )
                                               ),
                                           0
                                          ),
                                     0
                                    )
                          INTO v_tot_comm_amt
                          FROM com_dev_emp_comm c, ins_p_summery s
                         WHERE c.ins_tp_cd = p_ins_tp_cd
                           --AND    to_char(c.com_calc_dt_to, 'RRRRMM') =
                           --     to_char(p_com_cal_dt_to, 'RRRRMM')
                           AND c.com_calc_dt_to BETWEEN v_month_start_dt
                                                    AND v_month_end_dt
                           AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                               AND rec_earn.paid_yr_to
                           AND c.bill_status = '1'      ---Musha on 19.10.2016
                           AND c.emp_gid IN (
                                  SELECT emp_gid
                                    FROM (SELECT     e.emp_gid, e.emp_type_cd
                                                FROM hrm_employee e,
                                                     hrm_employee_setup s
                                               WHERE e.employment_tp_cd = '02'
                                                 AND e.emp_gid = s.employee_gid(+)
                                          START WITH s.h_employee_gid =
                                                          rec_emp.employee_gid
                                          CONNECT BY PRIOR s.employee_gid =
                                                              s.h_employee_gid)
                                   WHERE emp_type_cd =
                                            DECODE (rec_earn.cal_based_on,
                                                    '3', '06',
                                                    '4', '07',
                                                    '00'
                                                   ))
                           AND s.term BETWEEN TO_CHAR (rec_earn.term_from)
                                          AND TO_CHAR (rec_earn.term_to)
                           AND NOT EXISTS (
                                  SELECT 1
                                    FROM com_dev_emp_bonus_comm_dtl d,
                                         com_dev_emp_bonus_comm f,
                                         com_earning_head h
                                   WHERE d.payable_no = f.payable_no
                                     AND h.earning_cd = rec_earn.earning_cd
                                     AND (   f.earning_cd =
                                                           rec_earn.earning_cd
                                          OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                         )
                                     AND d.comm_no = c.comm_no
                                     AND (   f.emp_gid = rec_emp.employee_gid
                                          OR f_emp_type_cd (f.emp_gid) =
                                                f_emp_type_cd
                                                         (rec_emp.employee_gid)
                                          OR (   f.earning_cd <>
                                                           rec_earn.earning_cd
                                              OR f_emp_type_cd (f.emp_gid) =
                                                         h.chain_gap_emp_tp_cd
                                             )
                                         ))       --Add by Musha on 21.03.2017
                           /*(SELECT   1
                              FROM   com_dev_emp_bonus_comm_dtl d,
                                     com_dev_emp_bonus_comm f
                             WHERE   d.payable_no =
                                        f.payable_no
                                     AND rec_earn.earning_cd =
                                           f.earning_cd
                                     AND d.comm_no = c.comm_no
                                     AND d.emp_gid =
                                           rec_emp.employee_gid)*/  --Block by Musha on 21.03.2017
                           AND c.pgid = s.pgid;

                        v_payable_amt :=
                           ROUND (NVL ((v_tot_comm_amt * rec_earn.payable_pct
                                       ),
                                       0
                                      ),
                                  2
                                 );
                     --END LOOP;
                     ELSE
                        v_payable_amt :=
                           ROUND ((v_tot_coll_prem * rec_earn.payable_pct),
                                  2
                                 );
                     END IF;

                     --*************************Insert data into table**********************--
                     --============================--
                    --Round Amount--Add by Musha on 29.09.2020
                    pro_get_sys_config_st (
                               p_pgid            => NULL,
                               p_config_id       => 43,
                               p_sys_config_st   => v_sys_config_st,
                               p_upd_message     => v_upd_message
                            );
                    
                    IF v_sys_config_st = 1 THEN
                        v_payable_amt := ROUND (v_payable_amt);
                    END IF;
                    --============================--
        
                     IF v_payable_amt > 0
                     THEN
                        --Generate PK
                        SELECT TO_NUMBER
                                       (   TO_CHAR (p_com_cal_dt_to, 'rrmm')
                                        || LPAD
                                              (  NVL
                                                    (MAX (SUBSTR (payable_no,
                                                                  5
                                                                 )
                                                         ),
                                                     0
                                                    )
                                               + 1,
                                               8,
                                               0
                                              )
                                       )
                          INTO v_comm_no
                          FROM com_dev_emp_bonus_comm
                         WHERE SUBSTR (payable_no, 1, 4) =
                                             TO_CHAR (p_com_cal_dt_to, 'rrmm');

                        --Account Integration--
                        /* IF p_ins_tp_cd = 1
                         THEN
                            --Conventional Insurance
                            v_trans_item_comm_pay := 20;  --Commission Payable
                            --v_trans_item_tax_pay    := 11;  --Tax Payable
                            v_trans_item_comm := 9;           --Commission amt
                         ELSE
                            --Takaful Insurance
                            v_trans_item_comm_pay := 108; --Commission Payable
                            --v_trans_item_tax_pay    := 106;  --Tax Payable
                            v_trans_item_comm := 105;         --Commission amt
                         END IF;*/
                        IF p_ins_tp_cd = 1
                        THEN
                           IF p_emp_type = '06'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 197;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 184;      --Commission amt
                           ELSIF p_emp_type = '07'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 198;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 185;      --Commission amt
                           ELSIF p_emp_type = '08'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 199;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 186;      --Commission amt
                           ELSIF p_emp_type = '09'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 200;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 187;      --Commission amt
                           ELSIF p_emp_type = '11'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 201;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 188;      --Commission amt
                           ELSIF p_emp_type = '10'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 203;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 190;      --Commission amt
                           ELSIF p_emp_type = '12'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 202;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 189;      --Commission amt
                           
                           ELSIF p_emp_type = '14'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 240;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 238;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 244;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 242;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 248;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 246;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 252;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 250;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 256;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 254;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 260;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 258;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 264;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 262;      --Commission amt   
                           END IF;
                        ELSE
                           IF p_emp_type = '06'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 204;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 191;      --Commission amt
                           ELSIF p_emp_type = '07'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 205;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 192;      --Commission amt
                           ELSIF p_emp_type = '08'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 206;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 193;      --Commission amt
                           ELSIF p_emp_type = '09'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 207;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 194;      --Commission amt
                           ELSIF p_emp_type = '11'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 208;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 195;      --Commission amt
                           ELSIF p_emp_type = '10'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 210;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 196;      --Commission amt
                           ELSIF p_emp_type = '12'
                           THEN
                              --Conventional Insurance
                              v_trans_item_comm_pay := 209;
                                                         --Commission Payable
                              --v_trans_item_tax_pay    := 11;  --Tax Payable
                              v_trans_item_comm := 211;      --Commission amt
                           
                           ELSIF p_emp_type = '14'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 241;
                                                         --Commission Payable
                              v_trans_item_comm := 239;      --Commission amt
                           ELSIF p_emp_type = '15'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 245;
                                                         --Commission Payable
                              v_trans_item_comm := 243;      --Commission amt
                           ELSIF p_emp_type = '16'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 249;
                                                         --Commission Payable
                              v_trans_item_comm := 247;      --Commission amt
                           ELSIF p_emp_type = '17'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 253;
                                                         --Commission Payable
                              v_trans_item_comm := 251;      --Commission amt
                           ELSIF p_emp_type = '18'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 257;
                                                         --Commission Payable
                              v_trans_item_comm := 255;      --Commission amt
                           ELSIF p_emp_type = '19'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 261;
                                                         --Commission Payable
                              v_trans_item_comm := 259;      --Commission amt
                           ELSIF p_emp_type = '20'
                           THEN
                              --Takaful Insurance
                              v_trans_item_comm_pay := 265;
                                                         --Commission Payable
                              v_trans_item_comm := 263;      --Commission amt   
                           END IF;
                        END IF;

                        /********************************************************
                        This part is added by MD. Sayadur Rahaman  on 14/Feb-2013
                        Purpose: Accounts Integration
                        *********************************************************/
                        v_regional_off :=
                                     fun_find_regional_off (rec_emp.office_cd);

                        ----------Find payable office-----------
                        --Musha on 01.06.2016
                        BEGIN
                           SELECT fun_find_sales_off (rec_emp.office_cd)
                             INTO v_payable_off
                             FROM DUAL;

                           IF v_payable_off IS NULL
                           THEN
                              SELECT fun_find_service_off (rec_emp.office_cd)
                                INTO v_payable_off
                                FROM DUAL;

                              IF v_payable_off IS NULL
                              THEN
                                 SELECT fun_find_head_off (rec_emp.office_cd)
                                   INTO v_payable_off
                                   FROM DUAL;
                              END IF;
                           END IF;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              v_payable_off := rec_emp.office_cd;
                        END;

                        --End of find payable office--
                        DECLARE
                           recprem          pkg_gl_voucher.t_trans_tab;
                           v_error          VARCHAR2 (200);
                           v_object_cd      gen_object_info.object_cd%TYPE;
                           v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
                           v_inter_off_st   CHAR (1);
                           v_office_cd      hrm_office.office_cd%TYPE;
                           v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
                           v_trans_date     DATE;
                           v_cost_center    hrm_office.office_cd%TYPE;
                           v_narration      VARCHAR2 (200);
                           v_user           VARCHAR2 (20);
                           v_chq_tp         VARCHAR2 (3);
                           v_chq_no         VARCHAR2 (50);
                           v_chq_dt         DATE;
                           v_sus_amt_used   NUMBER (1);
                        BEGIN
                           /***********************
                           Business wise value will change.
                           Developer will put the value
                           **********************************/
                           v_object_cd := p_object_cd;
                           v_voucher_cd := '05';
                           v_inter_off_st := '0';
                           v_office_cd := v_regional_off;
                           v_cost_center := v_payable_off;
                           --rec_emp.office_cd;  --Musha on 01.06.2016
                           v_trans_id :=
                                 rec_emp.employee_gid
                              || rec_emp.office_cd
                              || TO_CHAR (p_com_cal_dt_to, 'DDMMRR');
                           v_trans_date := p_com_cal_dt_to;
                           v_narration :=
                                 'Employee Commission Payable Calculation on '
                              || p_com_cal_dt_to;
                           v_user := p_user;
/*******End********/

                           --commission
                           recprem (2).trans_item_cd := v_trans_item_comm;
                           recprem (2).post_amount := v_payable_amt;
                           recprem (2).chq_tp := NULL;
                           recprem (2).chq_no := NULL;
                           recprem (2).chq_dt := NULL;
                           --commission payable
                           recprem (1).trans_item_cd := v_trans_item_comm_pay;
                           recprem (1).post_amount := v_payable_amt;
                           recprem (1).chq_tp := NULL;
                           recprem (1).chq_no := NULL;
                           recprem (1).chq_dt := NULL;
                           pkg_gl_voucher.pro_voucher_posting
                                            (p_table             => recprem,
                                             p_object_cd         => v_object_cd,
                                             p_vouch_cd          => v_voucher_cd,
                                             p_inter_off_st      => v_inter_off_st,
                                             p_office_cd         => v_office_cd,
                                             p_trans_id          => v_trans_id,
                                             p_trans_date        => v_trans_date,
                                             p_cost_center       => v_cost_center,
                                             p_narration         => v_narration,
                                             p_user              => v_user,
                                             p_ins_tp_cd         => p_ins_tp_cd,
                                             p_voucher_no        => v_payable_vr_no,
                                             p_error             => v_acc_error
                                            );
                        END;

                        --End of Account Integration--
                        IF v_acc_error IS NULL
                        THEN
                           INSERT INTO com_dev_emp_bonus_comm
                                       (payable_no, emp_gid,
                                        office_cd,
                                        earning_cd,
                                        earning_type,
                                        com_calc_dt_to, payable_amount,
                                        base_amount, com_payable_vou,
                                        fy_start_dt, fy_end_dt, bill_status,
                                        ins_tp_cd,
                                        pay_rate,
                                        i_usr, i_dt, payable_office_cd
                                       )
                                VALUES (v_comm_no,                   --comm_NO
                                                  rec_emp.employee_gid,
                                        --emp_gid
                                        rec_emp.office_cd,         --OFFICE_CD
                                        rec_earn.earning_cd,      --EARNING_CD
                                        rec_earn.earning_type,  --EARNING_TYPE
                                        p_com_cal_dt_to,      --COM_CALC_DT_TO
                                                        v_payable_amt,
                                        --PAYABLE_AMOUNT
                                        v_tot_coll_prem,         --base_amount
                                                        v_payable_vr_no,
                                        --COM_PAYABLE_VOU
                                        p_fy_start_dt,           --fy_START_Dt
                                                      p_fy_end_dt, 
                                                                   --fy_END_Dt
                                        '0',                     --BILL_STATUS
                                        p_ins_tp_cd,
                                          NVL (rec_earn.payable_pct,
                                               v_payable_pct
                                              )
                                        * 100,
                                        p_user,                        --I_USR
                                               SYSDATE,                 --I_DT
                                                       v_payable_off
                                       );

                           FOR r IN
                              (SELECT c.comm_no, c.emp_gid, c.pgid,
                                      c.prem_due_dt, s.installment_premium
                                 FROM com_dev_emp_comm c, ins_p_summery s
                                WHERE c.ins_tp_cd = p_ins_tp_cd
                                  AND TO_CHAR (c.com_calc_dt_to, 'RRRRMM') =
                                           TO_CHAR (p_com_cal_dt_to, 'RRRRMM')
                                  AND c.prem_year BETWEEN rec_earn.paid_yr_from
                                                      AND rec_earn.paid_yr_to
                                  AND c.bill_status =
                                                     '1'
                                                        ---Musha on 19.10.2016
                                  AND c.emp_gid IN (
                                         SELECT emp_gid
                                           FROM (SELECT     e.emp_gid,
                                                            e.emp_type_cd
                                                       FROM hrm_employee e,
                                                            hrm_employee_setup s
                                                      WHERE e.employment_tp_cd =
                                                                          '02'
                                                        AND e.emp_gid = s.employee_gid(+)
                                                 START WITH s.h_employee_gid =
                                                               rec_emp.employee_gid
                                                 CONNECT BY PRIOR s.employee_gid =
                                                               s.h_employee_gid)
                                          WHERE emp_type_cd =
                                                   DECODE
                                                       (rec_earn.cal_based_on,
                                                        '3', '06',
                                                        '4', '07',
                                                        '00'
                                                       ))
                                  AND s.term BETWEEN TO_CHAR
                                                           (rec_earn.term_from)
                                                 AND TO_CHAR (rec_earn.term_to)
                                  AND c.pgid = s.pgid)
                           LOOP
                              INSERT INTO com_dev_emp_bonus_comm_dtl
                                          (payable_no, emp_gid,
                                           comm_no, subord_emp_gid, pgid,
                                           prem_due_date, premium_amt, payable_rate,
                                           gross_payable_amt, tax_ded_amt, 
                                           net_payable_amt, i_usr, i_dt
                                          )
                                   VALUES (v_comm_no, rec_emp.employee_gid,
                                           r.comm_no, r.emp_gid, r.pgid,
                                           r.prem_due_dt, r.installment_premium, NVL (rec_earn.payable_pct, v_payable_pct),
                                           v_dtl_gross_payable_amt, v_dtl_tax_ded_amt,
                                           v_dtl_gross_payable_amt - NVL(v_dtl_tax_ded_amt, 0), 
                                           p_user, SYSDATE
                                          );
                           END LOOP;

                           p_record_count := NVL (p_record_count, 0) + 1;
                        END IF;
                     END IF;
                  --*************************End of Insert data into table**********************--
                  ELSE
                     v_payable_amt := 0;
                  END IF;
               END IF;
            END IF;
         END IF;
      END LOOP;

      COMMIT;
   ---old acc integration
   END LOOP;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_error := 'ERROR: Data not found for adjustment process.';
      ROLLBACK;
   WHEN OTHERS
   THEN
      p_error := p_error || ' ERROR: ' || SQLERRM;
      ROLLBACK;
END pro_dev_emp_prem_comm_temp;
/


--
-- PRO_EMP_BONUS_COMM_BILL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_emp_bonus_comm_bill wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
447b e05
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
M5a1HRupeU8=
/


--
-- PRO_EMP_COMM_BILL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_emp_comm_bill (
   p_office_cd         IN     hrm_office.office_cd%TYPE,
   p_descendant_off    IN     VARCHAR2,
   p_emp_type          IN     VARCHAR2,
   p_descendant_emp    IN     VARCHAR2,
   p_emp_gid           IN     hrm_employee.emp_gid%TYPE,
   p_ins_tp_cd         IN     ins_insurance_type.ins_tp_cd%TYPE,
   p_pgid              IN     ins_p_proposal.pgid%TYPE,
   p_earning_cd        IN     com_earning_head.earning_cd%TYPE,
   p_fy_start_dt       IN     DATE,
   p_fy_end_dt         IN     DATE,
   p_earning_type      IN     VARCHAR2,        --B for Bonus, C for Commission
   p_bill_date         IN     DATE,
   p_min_bill_amt      IN     NUMBER,
   --p_fp_flag           IN       VARCHAR2 DEFAULT '0',
   --1 For first premium and 0 for all others
   p_user              IN     VARCHAR2,
   p_process_rec_cnt      OUT NUMBER,
   p_error                OUT VARCHAR2
)
IS
   /**************************************************************
   Procedure name: pro_fa_comm_bill
   Purpose: Generate FA commission bill

   REVISIONS:
      Ver      Date            Author                  Description
      ----     ----------      ----------------------  ---------------------------
      1.0      27-Mar-2014     Syed Md. Musha         1. Created this procedure.
   **************************************************************/
   v_emp_gid          hrm_employee.emp_gid%TYPE;
   v_bill_no          com_emp_com_bill_mst.bill_no%TYPE;
   v_emp_counter      NUMBER (5) := 0;
   v_fy_status        NUMBER (2) := 1;
   v_tax_ded_rate     acc_source_tax_rate_mst.tax_rate%TYPE;
   v_tax_rate_error   NUMBER (5, 2) := 0;
   v_tax_ded_amt      NUMBER (12, 2) := 0;
   v_off_org          VARCHAR2 (200);
   v_branch_off       hrm_office.office_cd%TYPE;
   v_sales_off        hrm_office.office_cd%TYPE;
   v_zonal_off        hrm_office.office_cd%TYPE;
   v_servicing_off    hrm_office.office_cd%TYPE;

   --------------------------
   v_sys_config_st    NUMBER (1);
   v_upd_message      VARCHAR2 (200);

   --------------
   v_ded_rate         NUMBER (5, 2);
   v_ded_amt          NUMBER (12, 2);
   v_ded_error        VARCHAR2 (200);

   v_paid_ded_amt     NUMBER (12, 2);
   v_paid_int_rate    NUMBER (5, 2);
   v_paid_int_amt     NUMBER (12, 2);
   v_paid_ded_error   VARCHAR2 (200);
   v_tot_ded_amount          NUMBER (12, 2);
   v_tot_paid_ded_amount     NUMBER (12, 2);
   v_tot_paid_interest_amt   NUMBER (12, 2);

   CURSOR cur_dev_emp (
      p_fy_status                 NUMBER
   )
   IS
      SELECT   m.office_cd,
               m.emp_gid,
               m.service_cd,
               m.emp_type_cd,
               m.BANK_ACCOUNT_NO,
               m.BANK_BR_CD,
               m.BANK_CD,
               M.SAL_TRANSFER_TP
        FROM   (SELECT   e.emp_gid,
                         s.h_employee_gid,
                         e.office_cd,
                         e.service_cd,
                         e.emp_type_cd,
                         DECODE (E.SAL_TRANSFER_TP,
                                 '01', E.MOB_BANK_ACC_NO,
                                 E.BANK_ACCOUNT_NO)
                            BANK_ACCOUNT_NO,
                         DECODE (E.SAL_TRANSFER_TP, '01', NULL, E.BANK_BR_CD)
                            BANK_BR_CD,
                         DECODE (E.SAL_TRANSFER_TP,
                                 '01', E.MOB_BANK_TP_CD,
                                 E.BANK_CD)
                            BANK_CD,
                         E.SAL_TRANSFER_TP
                  FROM   hrm_employee e, hrm_employee_setup s
                 WHERE   e.employment_tp_cd = '02' AND e.activity_cd = '01'
                         /*AND    fun_comm_bill_payable_stat(e.emp_type_cd, NULL, e.emp_gid, p_bill_date) = '1'
                         AND    e.employment_st_cd = '00'*/
                         AND ( (    NVL (p_descendant_emp, 0) = '0'
                                AND e.emp_type_cd = p_emp_type
                                AND e.emp_gid = NVL (p_emp_gid, e.emp_gid)) /*OR (    NVL (p_descendant_emp, 0) = '1'
                                                                                AND TO_NUMBER (e.emp_type_cd) <=
                                                                                                          TO_NUMBER (p_emp_type)
                                                                               )*/
                                                                           )
                         AND e.emp_gid = s.employee_gid(+)
                         AND ( (NVL (p_descendant_off, '0') = '0'
                                AND e.office_cd =
                                      NVL (p_office_cd, e.office_cd))
                              OR (NVL (p_descendant_off, '0') = '1'
                                  AND e.office_cd IN
                                           (    SELECT   office_cd
                                                  FROM   hrm_office_setup
                                            START WITH   office_cd =
                                                            p_office_cd
                                            CONNECT BY   PRIOR office_cd =
                                                            control_office_cd)))
                         AND EXISTS
                               (SELECT   v.emp_gid
                                  FROM   com_dev_emp_comm v, hrm_employee p
                                 WHERE   v.com_calc_dt_to BETWEEN p_fy_start_dt
                                                              AND  p_fy_end_dt
                                         AND v.com_calc_dt_to <= p_bill_date
                                         AND NVL (v.bill_status, '0') = '0'
                                         AND p.emp_type_cd = p_emp_type
                                         AND p.emp_gid =
                                               NVL (p_emp_gid, p.emp_gid)
                                         AND ( (NVL (p_descendant_off, '0') =
                                                   '0'
                                                AND p.office_cd =
                                                      NVL (p_office_cd,
                                                           p.office_cd))
                                              OR (NVL (p_descendant_off, '0') =
                                                     '1'
                                                  AND p.office_cd IN
                                                           (    SELECT   office_cd
                                                                  FROM   hrm_office_setup
                                                            START WITH   office_cd =
                                                                            p_office_cd
                                                            CONNECT BY   PRIOR office_cd =
                                                                            control_office_cd)))
                                         AND v.emp_gid = e.emp_gid
                                         AND v.emp_gid = p.emp_gid) /*AND e.emp_gid IN (
                                                                           SELECT v.emp_gid
                                                                             FROM com_dev_emp_comm v
                                                                            WHERE v.com_calc_dt_to BETWEEN p_fy_start_dt
                                                                                                       AND p_fy_end_dt
                                                                              AND v.com_calc_dt_to <= p_bill_date
                                                                              AND NVL (v.bill_status, '0') = '0')
                                                             START WITH e.emp_gid IN (
                                                                           SELECT v.emp_gid
                                                                             FROM com_dev_emp_comm v
                                                                            WHERE (   (    p_fy_status = 0
                                                                                       AND v.com_calc_dt_to <= p_fy_end_dt
                                                                                      )
                                                                                   OR (    p_fy_status >= 1
                                                                                       AND v.com_calc_dt_to
                                                                                              BETWEEN p_fy_start_dt
                                                                                                  AND p_fy_end_dt
                                                                                      )
                                                                                  )
                                                                              AND v.com_calc_dt_to <= p_bill_date
                                                                              AND NVL (v.bill_status, '0') = '0'
                                                                              AND v.emp_gid = NVL (p_emp_gid, v.emp_gid))
                                                             CONNECT BY PRIOR e.emp_gid = s.h_employee_gid*/
                                                                   ) m;
BEGIN
   BEGIN
      SELECT   COUNT (1)
        INTO   v_fy_status
        FROM   acc_fiscal_year
       WHERE   fy_close = 0 AND fy_st_dt < p_fy_start_dt;

      FOR k IN cur_dev_emp (v_fy_status)
      LOOP
         FOR i
         IN (  SELECT   t.comm_no,
                        t.emp_gid,
                        t.office_cd,
                        t.pgid,
                        t.prem_due_dt,
                        t.earning_cd,
                        t.prem_year,
                        t.payable_amount,
                        t.pay_rate,
                        --fun_find_sales_office (h.office_cd) agent_sales_office,
                        f.off_catg_cd,
                        t.receive_date,
                        t.agent_id,
                        t.agent_office_cd,
                        t.payable_office_cd,
                        h.emp_type_cd,
                        
                        t.comm_ded_rate, t.comm_ded_amt, t.paid_ded_amount, t.paid_interest_amt, t.paid_interest_rate
                 FROM   com_dev_emp_comm t,
                        com_earning_head e,
                        hrm_employee h,
                        hrm_office f
                WHERE   t.emp_gid = k.emp_gid AND t.pgid = NVL (p_pgid, t.pgid)
                        AND ( (NVL (e.ins_tp_wise, '1') = '1'
                               AND t.ins_tp_cd = p_ins_tp_cd)
                             OR NVL (e.ins_tp_wise, '1') = '0'
                               AND p_ins_tp_cd IS NULL)
                        AND NVL (t.bill_status, '0') = '0'
                        AND t.earning_cd = NVL (p_earning_cd, t.earning_cd)
                        AND e.earning_type =
                              DECODE (p_earning_type,
                                      'C', 'C',
                                      'B', 'B',
                                      e.earning_type)
                        AND ( (v_fy_status = 0
                               AND TO_DATE (t.com_calc_dt_to, 'dd/mm/rrrr') <=
                                     TO_DATE (p_fy_end_dt, 'dd/mm/rrrr'))
                             OR (v_fy_status >= 1
                                 AND TO_DATE (t.com_calc_dt_to, 'dd/mm/rrrr') BETWEEN TO_DATE (
                                                                                         p_fy_start_dt,
                                                                                         'dd/mm/rrrr'
                                                                                      )
                                                                                  AND  TO_DATE (
                                                                                          p_fy_end_dt,
                                                                                          'dd/mm/rrrr'
                                                                                       )))
                        AND TO_DATE (t.com_calc_dt_to, 'dd/mm/rrrr') <=
                              p_bill_date
                        AND t.emp_gid = h.emp_gid
                        AND h.office_cd = f.office_cd
                        AND t.earning_cd = e.earning_cd
                        /*AND (   (    p_fp_flag = 1
                             AND t.prem_due_dt = (SELECT s.comm_date
                                                    FROM ins_p_summery s
                                                   WHERE s.pgid = t.pgid)
                            )
                         OR (    p_fp_flag = 0
                             AND t.prem_due_dt <> (SELECT s.comm_date
                                                     FROM ins_p_summery s
                                                    WHERE s.pgid = t.pgid)
                            )
                        )*/
                        AND ( (NVL (p_descendant_off, '0') = '0'
                               AND h.office_cd = NVL (p_office_cd, h.office_cd))
                             OR (NVL (p_descendant_off, '0') = '1'
                                 AND h.office_cd IN
                                          (    SELECT   office_cd
                                                 FROM   hrm_office_setup
                                           START WITH   office_cd = p_office_cd
                                           CONNECT BY   PRIOR office_cd =
                                                           control_office_cd)))
                        AND h.activity_cd =
                              DECODE (h.activity_cd, '03', h.activity_cd, '01')
                        AND p_min_bill_amt <=
                              (SELECT   (NVL (SUM (d.payable_amount), 0))
                                 FROM   com_dev_emp_comm d, com_earning_head n
                                WHERE   d.emp_gid = t.emp_gid
                                        AND NVL (d.bill_status, '0') = '0'
                                        AND ( (NVL (e.ins_tp_wise, '1') = '1'
                                               AND d.ins_tp_cd = p_ins_tp_cd)
                                             OR NVL (e.ins_tp_wise, '1') = '0'
                                               AND p_ins_tp_cd IS NULL)
                                        AND d.earning_cd =
                                              NVL (p_earning_cd, d.earning_cd)
                                        AND n.earning_type =
                                              DECODE (p_earning_type,
                                                      'C', 'C',
                                                      'B', 'B',
                                                      n.earning_type)
                                        AND ( (v_fy_status = 0
                                               AND TO_DATE (d.com_calc_dt_to,
                                                            'dd/mm/rrrr') <=
                                                     TO_DATE (p_fy_end_dt,
                                                              'dd/mm/rrrr'))
                                             OR (v_fy_status >= 1
                                                 AND TO_DATE (d.com_calc_dt_to,
                                                              'dd/mm/rrrr') BETWEEN TO_DATE (
                                                                                       p_fy_start_dt,
                                                                                       'dd/mm/rrrr'
                                                                                    )
                                                                                AND  TO_DATE (
                                                                                        p_fy_end_dt,
                                                                                        'dd/mm/rrrr'
                                                                                     )))
                                        /*AND (   (    p_fp_flag = 1
                                             AND d.prem_due_dt =
                                                             (SELECT s.comm_date
                                                                FROM ins_p_summery s
                                                               WHERE s.pgid = d.pgid)
                                            )
                                         OR (    p_fp_flag = 0
                                             AND d.prem_due_dt <>
                                                             (SELECT s.comm_date
                                                                FROM ins_p_summery s
                                                               WHERE s.pgid = d.pgid)
                                            )
                                        )*/
                                        AND d.earning_cd = n.earning_cd)
             ORDER BY                                    --agent_sales_office,
                     h  .office_cd,
                        t.emp_gid,
                        t.pgid,
                        t.prem_due_dt)
         LOOP
            IF v_emp_gid IS NULL OR v_emp_gid <> i.emp_gid
            THEN
               --asume new agent found and need to generate a bill no for that agent
               --assign the agent id into agent variable
               v_emp_gid := i.emp_gid;
               --count how many agent processing
               v_emp_counter := v_emp_counter + 1;

               --Generate PK
               v_bill_no :=
                  TO_NUMBER(TO_CHAR (p_bill_date, 'rrmm')
                            || LPAD (seq_devemp_com_bill.NEXTVAL, 8, 0)); ---Musha on 30.05.2016

               /* Musha on 30.05.2016
               BEGIN
                  SELECT TO_NUMBER (   TO_CHAR (p_bill_date, 'rrmm')
                                    || LPAD (seq_devemp_com_bill.NEXTVAL, 8,
                                             0)
                                   )
                    INTO v_bill_no
                    FROM com_emp_com_bill_mst
                   WHERE SUBSTR (bill_no, 1, 4) =
                                                 TO_CHAR (p_bill_date, 'rrmm');
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     v_bill_no :=
                        TO_NUMBER (   TO_CHAR (p_bill_date, 'rrmm')
                                   || LPAD (seq_devemp_com_bill.NEXTVAL, 8, 0)
                                  );
               END;*/

               IF v_bill_no IS NULL
               THEN
                  p_error := 'Exception Raised While Preparing (FP) Bill No';
               END IF;

               IF v_bill_no IS NOT NULL AND p_error IS NULL
               THEN
                  INSERT INTO com_emp_com_bill_mst (bill_no,
                                                    bill_date,
                                                    emp_gid,
                                                    office_cd,
                                                    ins_tp_cd,
                                                    i_usr,
                                                    i_dt,
                                                    payable_office,
                                                    EMP_PAYMENT_TYPE,
                                                    EMP_ACC_NO,
                                                    EMP_ACC_BANK_CD,
                                                    EMP_ACC_BR_CD ----------ADDED BY PARAMA BISWAS ON 29/11/2016
                                                                 )
                    VALUES   (v_bill_no,
                              p_bill_date,
                              i.emp_gid,
                              i.office_cd,
                              p_ins_tp_cd,
                              p_user,
                              SYSDATE,
                              i.payable_office_cd,
                              K.SAL_TRANSFER_TP,
                              K.BANK_ACCOUNT_NO,
                              K.BANK_CD,
                              K.BANK_BR_CD);
               END IF;
            END IF;

            IF v_bill_no IS NOT NULL AND p_error IS NULL
            THEN
               /*IF p_emp_type IN ('08', '09', '10', '11')
               THEN
                  v_tax_ded_rate := 0;
               ELSE
                  SELECT   tax_rate
                    INTO   v_tax_ded_rate
                    FROM   com_agency_tax_rate
                   WHERE   NVL (status, '0') = '1';
               END IF;*/
               --Musha on 17.04.2018

               ---------Add by Musha on 17.04.2018
               pro_find_source_tax_rate (
                  p_applicable_on     => '2',
                  p_pgid              => NULL,
                  p_fa_emp_id         => i.emp_gid,
                  p_tax_calc_for      => i.emp_type_cd,                --'05',
                  p_source_tax_rate   => v_tax_ded_rate,
                  p_error             => v_tax_rate_error
               );
               ------------End------------------

               v_tax_ded_amt :=
                  ROUND ( ( (i.payable_amount * v_tax_ded_rate) / 100), 2);

               --============================--
               --Round Amount--Add by Musha on 29.09.2020
               pro_get_sys_config_st (p_pgid            => NULL,
                                      p_config_id       => 43,
                                      p_sys_config_st   => v_sys_config_st,
                                      p_upd_message     => v_upd_message);

               IF v_sys_config_st = 1
               THEN
                  v_tax_ded_amt := ROUND (v_tax_ded_amt);
               END IF;

               --============================--

               BEGIN
                  SELECT   fun_org_office (i.agent_office_cd)
                    INTO   v_off_org
                    FROM   DUAL;

                  SELECT   SUBSTR (v_off_org, 1, INSTR (v_off_org,
                                                        '-',
                                                        1,
                                                        1)
                                                 - 1)
                              branch_off,
                           SUBSTR (v_off_org, (INSTR (v_off_org,
                                                      '-',
                                                      1,
                                                      1)
                                               + 1),   INSTR (v_off_org,
                                                              '-',
                                                              1,
                                                              2)
                                                     - INSTR (v_off_org,
                                                              '-',
                                                              1,
                                                              1)
                                                     - 1)
                              sales_off,
                           SUBSTR (v_off_org, (INSTR (v_off_org,
                                                      '-',
                                                      1,
                                                      2)
                                               + 1),   INSTR (v_off_org,
                                                              '-',
                                                              1,
                                                              3)
                                                     - INSTR (v_off_org,
                                                              '-',
                                                              1,
                                                              2)
                                                     - 1)
                              zonal_off,
                           SUBSTR (v_off_org, (INSTR (v_off_org,
                                                      '-',
                                                      1,
                                                      3)
                                               + 1))
                              servicing_off
                    INTO   v_branch_off,
                           v_sales_off,
                           v_zonal_off,
                           v_servicing_off
                    FROM   DUAL;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;

               /*IF     i.prem_year = 1
                  AND i.emp_type_cd IN ('06', '07')
                  AND i.earning_cd <> '08'
               THEN
                  pro_comm_ded_amt (p_emp_type_cd   => i.emp_type_cd,
                                    p_comm_no       => i.comm_no,
                                    p_ded_rate      => v_ded_rate,
                                    p_ded_amt       => v_ded_amt,
                                    p_error         => v_ded_error);

                  IF v_ded_amt > 0 AND v_ded_error IS NULL
                  THEN
                     v_tot_ded_amount := NVL(v_tot_ded_amount, 0) + v_ded_amt;
                     
                     INSERT INTO com_dev_emp_comm_ded (comm_no,
                                                       emp_gid,
                                                       pgid,
                                                       prem_due_dt,
                                                       earning_cd,
                                                       prem_year,
                                                       payable_amount,
                                                       deduction_amount,
                                                       comm_ded_rate,
                                                       comm_ded_date,
                                                       i_usr,
                                                       i_dt)
                       VALUES   (i.comm_no,
                                 i.emp_gid,
                                 i.pgid,
                                 i.prem_due_dt,
                                 i.earning_cd,
                                 i.prem_year,
                                 i.payable_amount,
                                 v_ded_amt,
                                 v_ded_rate,
                                 p_bill_date,
                                 p_user,
                                 SYSDATE);
                  END IF;
               ELSIF i.prem_year = 2 AND i.emp_type_cd IN ('06', '07') AND i.earning_cd <> '08'
               THEN
                  pro_comm_paid_ded_amt (
                     p_emp_type_cd     => i.emp_type_cd,
                     p_pgid            => i.pgid,
                     p_prem_due_date   => i.prem_due_dt,
                     p_int_calc_date   => p_bill_date,
                     p_paid_ded_amt    => v_paid_ded_amt,
                     p_paid_int_rate   => v_paid_int_rate,
                     p_paid_int_amt    => v_paid_int_amt,
                     p_error           => v_paid_ded_error
                  );

                  IF v_paid_ded_amt > 0 AND v_paid_ded_error IS NULL
                  THEN
                     v_tot_paid_ded_amount      := NVL(v_tot_paid_ded_amount, 0) + v_paid_ded_amt;
                     v_tot_paid_interest_amt    := NVL(v_tot_paid_interest_amt, 0) + NVL(v_paid_int_amt, 0);
                     
                     UPDATE   com_dev_emp_comm_ded
                        SET   bill_no = v_bill_no
                      WHERE   pgid = i.pgid AND bill_no IS NULL;
                  END IF;
               END IF;*/

               INSERT INTO com_emp_com_bill_dtl (bill_no,
                                                 comm_no,
                                                 pgid,
                                                 prem_due_dt,
                                                 earning_cd,
                                                 gross_bill_amt,
                                                 tax_ded_amt,
                                                 net_bill_amt,
                                                 receive_dt,
                                                 branch_off,
                                                 sales_off,
                                                 zonal_off,
                                                 servicing_off,
                                                 i_usr,
                                                 i_dt,
                                                 pay_rate,
                                                 comm_ded_rate,
                                                 comm_ded_amt,
                                                 paid_ded_amount, paid_interest_amt, paid_interest_rate)
                 VALUES   (v_bill_no,
                           i.comm_no,
                           i.pgid,
                           i.prem_due_dt,
                           i.earning_cd,
                           i.payable_amount,
                           v_tax_ded_amt,
                           i.payable_amount - v_tax_ded_amt,
                           i.receive_date,
                           v_branch_off,
                           v_sales_off,
                           v_zonal_off,
                           v_servicing_off,
                           p_user,
                           SYSDATE,
                           i.pay_rate,
                           i.comm_ded_rate,
                                                 i.comm_ded_amt,
                                                 i.paid_ded_amount, i.paid_interest_amt, i.paid_interest_rate);

               UPDATE   com_dev_emp_comm
                  SET   bill_status = '1', u_usr = p_user, u_dt = SYSDATE
                WHERE   comm_no = i.comm_no;

               UPDATE   com_emp_com_bill_mst
                  SET   gross_payable_amt =
                           NVL (gross_payable_amt, 0)
                           + NVL (i.payable_amount, 0),
                        tax_ded_req = 'Y',
                        tax_ded_rate = v_tax_ded_rate,
                        tax_ded_amt =
                           NVL (v_tax_ded_amt, 0) + NVL (tax_ded_amt, 0),
                        bill_amount =
                           (NVL (bill_amount, 0)
                            + (NVL (i.payable_amount, 0)
                               - NVL (v_tax_ded_amt, 0))),
                        u_usr = p_user,
                        u_dt = SYSDATE,
                                               
                        tot_ded_amount = NVL(tot_ded_amount, 0) + NVL(i.comm_ded_amt, 0),
                        tot_paid_ded_amount = NVL(tot_paid_ded_amount, 0) + NVL(i.paid_ded_amount, 0),
                        tot_paid_interest_amt = NVL(tot_paid_interest_amt,0) + NVL(i.paid_interest_amt, 0),
                        tot_paid_bill_amt = (NVL (tot_paid_bill_amt, 0)
                            + (NVL (i.payable_amount, 0)
                               - NVL (v_tax_ded_amt, 0))
                            - NVL(i.comm_ded_amt, 0)
                            + NVL (i.paid_ded_amount, 0)
                            + NVL (i.paid_interest_amt, 0))
                WHERE   bill_no = v_bill_no;

               p_process_rec_cnt := NVL (p_process_rec_cnt, 0) + 1;
            ELSE
               ROLLBACK;
               EXIT;
            END IF;
         END LOOP;
      END LOOP;

      IF p_error IS NULL
      THEN
         COMMIT;
      ELSE
         ROLLBACK;
      END IF;
   END;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error :=
            'v_emp_gid '
         || v_emp_gid
         || '--'
         || 'v_bill_no: '
         || v_bill_no
         || SQLERRM;
END pro_emp_comm_bill;
/


--
-- PRO_FA_COMM_BILL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_fa_comm_bill (
   p_office_cd         IN     hrm_office.office_cd%TYPE,
   p_descendant_flag   IN     VARCHAR2,
   p_agent_id          IN     hrm_agent.agent_id%TYPE,
   p_ins_tp_cd         IN     ins_insurance_type.ins_tp_cd%TYPE,
   p_pgid_tb           IN     ins_p_proposal.pgid%TYPE,            --pgid_tbl,
   p_earning_cd        IN     com_earn_tp.earning_cd%TYPE,
   p_fy_start_dt       IN     DATE,
   p_fy_end_dt         IN     DATE,
   p_earning_type      IN     VARCHAR2,        --B for Bonus, C for Commission
   p_comm_dt_from      IN     DATE,
   p_comm_dt_to        IN     DATE,
   p_comm_yr_from      IN     NUMBER,
   p_comm_yr_to        IN     NUMBER,
   p_bill_date         IN     DATE,
   p_min_bill_amt      IN     NUMBER,
   p_fp_flag           IN     VARCHAR2 DEFAULT '0' ,
   --1 For first premium and 0 for all others
   p_user              IN     VARCHAR2,
   p_process_rec_cnt      OUT NUMBER,
   p_error                OUT VARCHAR2
)
IS
   v_agent_id                hrm_agent.agent_id%TYPE;
   v_bill_no                 com_agent_com_bill_mst.bill_no%TYPE;
   v_agent_counter           NUMBER (5) := 0;
   v_fy_status               NUMBER (2) := 1;
   v_tax_ded_rate            acc_source_tax_rate_mst.tax_rate%TYPE;
   v_tax_rate_error          NUMBER (5, 2) := 0;
   v_tax_ded_amt             NUMBER (12, 2) := 0;
   --v_pgid_cnt                NUMBER (5) := p_pgid_tb.COUNT;
   v_off_org                 VARCHAR2 (200);
   v_branch_off              hrm_office.office_cd%TYPE;
   v_sales_off               hrm_office.office_cd%TYPE;
   v_zonal_off               hrm_office.office_cd%TYPE;
   v_servicing_off           hrm_office.office_cd%TYPE;
   v_sys_config_st           NUMBER (1);
   v_upd_message             VARCHAR2 (200);
   v_agent_bank              acc_bank.bank_cd%TYPE;
   v_agent_branch            acc_branch.br_cd%TYPE;
   v_payment_type            VARCHAR (2);
   v_agent_mob_bank          VARCHAR2 (2);
   v_agent_mob_acc           VARCHAR2 (30);
   v_agent_account           VARCHAR2 (100);
   v_fa_bill_sys_config_st   NUMBER (1);         ---Add by Musha on 08.07.2018
   v_sys_config_message      VARCHAR2 (300);     ---Add by Musha on 08.07.2018

   --------------
   v_ded_rate                NUMBER (12, 2);
   v_ded_amt                 NUMBER (12, 2);
   v_ded_error               VARCHAR2 (200);

   v_paid_ded_amt            NUMBER (12, 2);
   v_paid_int_rate           NUMBER (5, 2);
   v_paid_int_amt            NUMBER (12, 2);
   v_paid_ded_error          VARCHAR2 (200);
   v_tot_ded_amount          NUMBER (12, 2);
   v_tot_paid_ded_amount     NUMBER (12, 2);
   v_tot_paid_interest_amt   NUMBER (12, 2);
BEGIN
   BEGIN
      SELECT   COUNT (1)
        INTO   v_fy_status
        FROM   acc_fiscal_year
       WHERE   fy_close = 0 AND fy_st_dt < p_fy_start_dt;

      --------------Add by Musha on 08.07.2018---------------
      ---Find FA license validation required status for first year FA commission bill
      pro_get_sys_config_st (p_pgid            => NULL,
                             p_config_id       => 29,
                             p_sys_config_st   => v_fa_bill_sys_config_st, --1 means license validation required, 0 means not required
                             p_upd_message     => v_sys_config_message);

      -------------------------------------------------------
      FOR i
      IN (  SELECT   t.fa_comm_no,
                     t.agent_id,
                     t.office_cd,
                     t.pgid,
                     t.prem_due_dt,
                     t.earning_cd,
                     t.comm_bon_year,
                     t.payable_amount,
                     h.office_cd agent_office,
                     fun_find_sales_office (h.office_cd) agent_sales_office,
                     f.off_catg_cd,
                     t.pay_rate,
                     t.receive_date,
                     t.payable_office_cd,
                     NVL (t.service_charge_st, '0') service_charge_st,
                     payment_tp,
                     DECODE (payment_tp, '01', mob_acc_bank_cd, acc_bank_cd)
                        acc_bank_cd,
                     DECODE (payment_tp, '01', NULL, acc_br_cd) acc_br_cd,
                     DECODE (payment_tp, '01', mob_bank_acc_no, account_no)
                        account_no,
                     t.comm_ded_rate,
                     t.comm_ded_amt,
                     t.paid_interest_amt,
                     t.paid_interest_rate,
                     t.paid_ded_amount,
                     t.um_paid_interest_amt,
                     t.um_paid_interest_rate,
                     t.um_paid_ded_amount,
                     t.bm_paid_interest_amt,
                     t.bm_paid_interest_rate,
                     t.bm_paid_ded_amount
              FROM   com_agent_com_detail t,
                     com_earn_tp e,
                     hrm_agent h,
                     hrm_office f
             WHERE       (p_agent_id IS NULL OR t.agent_id = p_agent_id)
                     AND t.ins_tp_cd = p_ins_tp_cd
                     AND (p_pgid_tb IS NULL OR t.pgid = p_pgid_tb)
                     -----AND (v_pgid_cnt = 0
                     -----     OR t.pgid IN (  SELECT   * FROM TABLE (p_pgid_tb)))
                     AND NVL (t.bill_status, '0') = '0'
                     AND NVL (t.service_charge_st, '0') =
                           DECODE (p_earning_type, 'S', '1', '0') ---Musha on 28.02.2016
                     AND t.earning_cd = NVL (p_earning_cd, t.earning_cd)
                     AND e.earning_type =
                           DECODE (p_earning_type,
                                   'C', 'C',
                                   'B', 'B',
                                   e.earning_type)
                     AND ( (v_fy_status = 0
                            AND TO_DATE (t.com_exe_date, 'dd/mm/rrrr') <=
                                  TO_DATE (p_fy_end_dt, 'dd/mm/rrrr'))
                          OR (v_fy_status >= 1
                              AND TO_DATE (t.com_exe_date, 'dd/mm/rrrr') BETWEEN TO_DATE (
                                                                                    p_fy_start_dt,
                                                                                    'dd/mm/rrrr'
                                                                                 )
                                                                             AND  TO_DATE (
                                                                                     p_fy_end_dt,
                                                                                     'dd/mm/rrrr'
                                                                                  )))
                     AND TO_DATE (t.com_exe_date, 'dd/mm/rrrr') <= p_bill_date
                     AND t.com_exe_date BETWEEN p_comm_dt_from AND p_comm_dt_to
                     AND (p_comm_yr_from IS NULL
                          OR (p_comm_yr_from IS NOT NULL
                              AND t.comm_bon_year BETWEEN p_comm_yr_from
                                                      AND  p_comm_yr_to))
                     AND t.agent_id = h.agent_id
                     AND h.office_cd = f.office_cd
                     AND t.earning_cd = e.earning_cd
                     AND ( (p_fp_flag = 1
                            AND t.prem_due_dt = (SELECT   s.comm_date
                                                   FROM   ins_p_summery s
                                                  WHERE   s.pgid = t.pgid))
                          OR (p_fp_flag = 0
                              AND t.prem_due_dt <> (SELECT   s.comm_date
                                                      FROM   ins_p_summery s
                                                     WHERE   s.pgid = t.pgid)))
                     AND ( (NVL (p_descendant_flag, '0') = '0'
                            AND h.office_cd = NVL (p_office_cd, h.office_cd))
                          OR (NVL (p_descendant_flag, '0') = '1'
                              AND h.office_cd IN
                                       (    SELECT   office_cd
                                              FROM   hrm_office_setup
                                        START WITH   office_cd = p_office_cd
                                        CONNECT BY   PRIOR office_cd =
                                                        control_office_cd)))
                     /*AND h.license_valid_to_dt >=
                            DECODE (h.activity_cd,
                                    '03', h.license_valid_to_dt,
                                    p_bill_date
                                   )*/
                     --Disable by Musha on 08.07.2018 and add the bellow condition

                     AND ( (t.comm_bon_year = 1 AND v_fa_bill_sys_config_st = 0)
                          OR (t.comm_bon_year = 1
                              AND v_fa_bill_sys_config_st = 1
                              AND h.license_valid_to_dt >=
                                    DECODE (h.activity_cd,
                                            '03', h.license_valid_to_dt,
                                            p_bill_date))
                          OR (h.license_valid_to_dt >=
                                 DECODE (h.activity_cd,
                                         '03', h.license_valid_to_dt,
                                         p_bill_date)))
                     /*AND h.activity_cd =
                                   DECODE (h.activity_cd,
                                           '03', h.activity_cd,
                                           '01'
                                          )*/
                     --AND    fun_comm_bill_payable_stat('05', h.agent_id, NULL, p_bill_date) = '1'  --Temporary By Musha on 28-03-2015
                     AND p_min_bill_amt <=
                           (SELECT   (NVL (SUM (d.payable_amount), 0))
                              FROM   com_agent_com_detail d, com_earn_tp n
                             WHERE       d.agent_id = t.agent_id
                                     AND d.ins_tp_cd = p_ins_tp_cd
                                     AND NVL (d.bill_status, '0') = '0'
                                     AND NVL (d.service_charge_st, '0') =
                                           DECODE (p_earning_type,
                                                   'S', '1',
                                                   '0') ---Musha on 28.02.2016
                                     AND d.earning_cd =
                                           NVL (p_earning_cd, d.earning_cd)
                                     AND n.earning_type =
                                           DECODE (p_earning_type,
                                                   'C', 'C',
                                                   'B', 'B',
                                                   n.earning_type)
                                     AND d.com_exe_date <= p_bill_date
                                     AND d.com_exe_date BETWEEN p_comm_dt_from
                                                            AND  p_comm_dt_to
                                     AND (p_comm_yr_from IS NULL
                                          OR (p_comm_yr_from IS NOT NULL
                                              AND d.comm_bon_year BETWEEN p_comm_yr_from
                                                                      AND  p_comm_yr_to))
                                     AND ( (v_fy_status = 0
                                            AND TO_DATE (d.com_exe_date,
                                                         'dd/mm/rrrr') <=
                                                  TO_DATE (p_fy_end_dt,
                                                           'dd/mm/rrrr'))
                                          OR (v_fy_status >= 1
                                              AND TO_DATE (d.com_exe_date,
                                                           'dd/mm/rrrr') BETWEEN TO_DATE (
                                                                                    p_fy_start_dt,
                                                                                    'dd/mm/rrrr'
                                                                                 )
                                                                             AND  TO_DATE (
                                                                                     p_fy_end_dt,
                                                                                     'dd/mm/rrrr'
                                                                                  )))
                                     AND ( (p_fp_flag = 1
                                            AND d.prem_due_dt =
                                                  (SELECT   s.comm_date
                                                     FROM   ins_p_summery s
                                                    WHERE   s.pgid = d.pgid))
                                          OR (p_fp_flag = 0
                                              AND d.prem_due_dt <>
                                                    (SELECT   s.comm_date
                                                       FROM   ins_p_summery s
                                                      WHERE   s.pgid = d.pgid)))
                                     AND d.earning_cd = n.earning_cd)
          ORDER BY   agent_sales_office,
                     agent_office,
                     t.agent_id,
                     t.pgid,
                     t.prem_due_dt)
      LOOP
         IF v_agent_id IS NULL OR v_agent_id <> i.agent_id
         THEN
            --asume new agent found and need to generate a bill no for that agent
            --assign the agent id into agent variable
            v_agent_id := i.agent_id;
            --count how many agent processing
            v_agent_counter := v_agent_counter + 1;

            --first check whether this office has the agent bill record
            --if found then use the serial and update it
            --else use starting no 1 and insert serial 2
            IF NVL (p_fp_flag, 0) = 1
            THEN
               --First Premium commission bill no
               pro_fp_comm_bill_no (p_bill_date      => p_bill_date,
                                    p_agent_office   => i.agent_office,
                                    p_user           => p_user,
                                    p_bill_no        => v_bill_no);

               IF v_bill_no IS NULL
               THEN
                  p_error := 'Exception Raised While Preparing (FP) Bill No';
               END IF;
            ELSE
               BEGIN
                  --generate new a bill no
                  SELECT      fun_off_for_bill (i.agent_office)
                           || '/'
                           || agent_bill_sl
                           || '/'
                           || TO_CHAR (p_bill_date, 'rr')
                    INTO   v_bill_no
                    FROM   acc_fiscal_year_seq
                   WHERE   TO_DATE (p_bill_date, 'dd/mm/rrrr') BETWEEN TO_DATE (
                                                                          fiscal_start_date,
                                                                          'dd/mm/rrrr'
                                                                       )
                                                                   AND  TO_DATE (
                                                                           fiscal_end_date,
                                                                           'dd/mm/rrrr'
                                                                        )
                           AND office_cd =
                                 fun_find_regional_off (i.agent_office);

                  --if one number used then update it by increasing the value
                  BEGIN
                     UPDATE   acc_fiscal_year_seq
                        SET   agent_bill_sl = agent_bill_sl + 1,
                              u_usr = p_user,
                              u_dt = SYSDATE
                      WHERE   TO_DATE (p_bill_date, 'dd/mm/rrrr') BETWEEN TO_DATE (
                                                                             fiscal_start_date,
                                                                             'dd/mm/rrrr'
                                                                          )
                                                                      AND  TO_DATE (
                                                                              fiscal_end_date,
                                                                              'dd/mm/rrrr'
                                                                           )
                              AND office_cd =
                                    fun_find_regional_off (i.agent_office);

                     IF SQL%NOTFOUND
                     THEN
                        ROLLBACK;
                     END IF;
                  END;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     --insert the record
                     BEGIN
                        INSERT INTO acc_fiscal_year_seq (fiscal_start_date,
                                                         fiscal_end_date,
                                                         office_cd,
                                                         ren_coll_srl,
                                                         i_usr,
                                                         i_dt,
                                                         status,
                                                         agent_bill_sl)
                           SELECT   fy_st_dt,
                                    fy_ed_dt,
                                    fun_find_regional_off (i.agent_office),
                                    1,
                                    p_user,
                                    SYSDATE,
                                    '1',
                                    2
                             FROM   acc_fiscal_year
                            WHERE   p_bill_date BETWEEN fy_st_dt AND fy_ed_dt;

                        IF SQL%NOTFOUND
                        THEN
                           p_error :=
                              'Data Insertion Error on New Record Entry For Agent Bill Serial';
                        ELSIF SQL%FOUND
                        THEN
                           COMMIT;
                        END IF;
                     END;

                     --generate the bill no
                     SELECT      fun_off_for_bill (i.agent_office)
                              || '/'
                              || 1
                              || '/'
                              || TO_CHAR (p_bill_date, 'rr')
                       INTO   v_bill_no
                       FROM   DUAL;
                  WHEN VALUE_ERROR
                  THEN
                     p_error :=
                        'Value Error Exception Raised While Preparing Bill No: '
                        || SQLERRM;
                  WHEN TOO_MANY_ROWS
                  THEN
                     p_error :=
                        'Too Many Value Exception Raised While Preparing Bill No';
                  WHEN OTHERS
                  THEN
                     p_error :=
                        'Others Exception Raised While Preparing Bill No: '
                        || SQLERRM;
               END;
            END IF;

            IF v_bill_no IS NOT NULL AND p_error IS NULL
            THEN
               INSERT INTO com_agent_com_bill_mst (bill_no,
                                                   bill_date,
                                                   agent_id,
                                                   office_cd,
                                                   ins_tp_cd,
                                                   i_usr,
                                                   i_dt,
                                                   service_charge_st,
                                                   payable_office,
                                                   agent_acc_no,
                                                   agent_acc_bank_cd,
                                                   agent_acc_br_cd,
                                                   agent_payment_type)
                 VALUES   (v_bill_no,
                           p_bill_date,
                           i.agent_id,
                           i.agent_office,
                           p_ins_tp_cd,
                           p_user,
                           SYSDATE,
                           DECODE (p_earning_type, 'S', '1', '0'),
                           ---Musha on 28.02.2016
                           i.payable_office_cd,
                           i.account_no,
                           i.acc_bank_cd,
                           i.acc_br_cd,
                           i.payment_tp);
            END IF;
         END IF;

         IF v_bill_no IS NOT NULL AND p_error IS NULL
         THEN
            IF i.service_charge_st = '1'
            THEN
               pro_get_sys_config_st (p_pgid            => NULL,
                                      p_config_id       => 15,
                                      p_sys_config_st   => v_sys_config_st,
                                      p_upd_message     => v_upd_message);

               IF v_sys_config_st = '1'
               THEN
                  v_tax_ded_rate := '0';
               ELSE
                  /*SELECT   tax_rate
                    INTO   v_tax_ded_rate
                    FROM   com_agency_tax_rate
                   WHERE   NVL (status, '0') = '1';*/
                  --Musha on 17.04.2018

                  ---------Add by Musha on 17.04.2018
                  pro_find_source_tax_rate (
                     p_applicable_on     => '2',
                     p_pgid              => NULL,
                     p_fa_emp_id         => i.agent_id,
                     p_tax_calc_for      => '05',
                     p_source_tax_rate   => v_tax_ded_rate,
                     p_error             => v_tax_rate_error
                  );
               ------------End------------------
               END IF;
            ELSE
               /*SELECT   tax_rate
                 INTO   v_tax_ded_rate
                 FROM   com_agency_tax_rate
                WHERE   NVL (status, '0') = '1';*/
               --Musha on 17.04.2018

               ---------Add by Musha on 17.04.2018
               pro_find_source_tax_rate (
                  p_applicable_on     => '2',
                  p_pgid              => NULL,
                  p_fa_emp_id         => i.agent_id,
                  p_tax_calc_for      => '05',
                  p_source_tax_rate   => v_tax_ded_rate,
                  p_error             => v_tax_rate_error
               );
            ------------End------------------
            END IF;

            v_tax_ded_amt :=
               ROUND ( ( (i.payable_amount * v_tax_ded_rate) / 100), 2);

            --============================--
            --Round Amount--Add by Musha on 29.09.2020
            v_sys_config_st := NULL;
            v_upd_message := NULL;

            pro_get_sys_config_st (p_pgid            => NULL,
                                   p_config_id       => 43,
                                   p_sys_config_st   => v_sys_config_st,
                                   p_upd_message     => v_upd_message);

            IF v_sys_config_st = 1
            THEN
               v_tax_ded_amt := ROUND (v_tax_ded_amt);
            END IF;

            --============================--

            BEGIN
               SELECT   fun_org_office (i.office_cd) INTO v_off_org FROM DUAL;

               SELECT   SUBSTR (v_off_org, 1, INSTR (v_off_org,
                                                     '-',
                                                     1,
                                                     1)
                                              - 1)
                           branch_off,
                        SUBSTR (v_off_org, (INSTR (v_off_org,
                                                   '-',
                                                   1,
                                                   1)
                                            + 1),   INSTR (v_off_org,
                                                           '-',
                                                           1,
                                                           2)
                                                  - INSTR (v_off_org,
                                                           '-',
                                                           1,
                                                           1)
                                                  - 1)
                           sales_off,
                        SUBSTR (v_off_org, (INSTR (v_off_org,
                                                   '-',
                                                   1,
                                                   2)
                                            + 1),   INSTR (v_off_org,
                                                           '-',
                                                           1,
                                                           3)
                                                  - INSTR (v_off_org,
                                                           '-',
                                                           1,
                                                           2)
                                                  - 1)
                           zonal_off,
                        SUBSTR (v_off_org, (INSTR (v_off_org,
                                                   '-',
                                                   1,
                                                   3)
                                            + 1))
                           servicing_off
                 INTO   v_branch_off,
                        v_sales_off,
                        v_zonal_off,
                        v_servicing_off
                 FROM   DUAL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;

            -- This process has stoped by Alamgir Hossain on 29/11/2022
            /*

     IF i.comm_bon_year = 1
     THEN
        pro_comm_ded_amt (p_emp_type_cd   => '05',
                          p_comm_no       => i.fa_comm_no,
                          p_ded_rate      => v_ded_rate,
                          p_ded_amt       => v_ded_amt,
                          p_error         => v_ded_error);

        IF v_ded_amt > 0 AND v_ded_error IS NULL
        THEN
           v_tot_ded_amount := NVL(v_tot_ded_amount, 0) + v_ded_amt;

           INSERT INTO com_agent_com_ded (fa_comm_no,
                                          agent_id,
                                          pgid,
                                          prem_due_dt,
                                          earning_cd,
                                          comm_bon_year,
                                          payable_amount,
                                          deduction_amount,
                                          comm_ded_rate,
                                          comm_ded_date,
                                          i_usr,
                                          i_dt)
             VALUES   (i.fa_comm_no,
                       i.agent_id,
                       i.pgid,
                       i.prem_due_dt,
                       i.earning_cd,
                       i.COMM_BON_YEAR,
                       i.payable_amount,
                       v_ded_amt,
                       v_ded_rate,
                       p_bill_date,
                       p_user,
                       SYSDATE);
        END IF;
     ELSIF i.comm_bon_year = 2
     THEN
        pro_comm_paid_ded_amt (p_emp_type_cd     => '05',
                               p_pgid            => i.pgid,
                               p_prem_due_date   => i.prem_due_dt,
                               p_int_calc_date   => p_bill_date,
                               p_paid_ded_amt    => v_paid_ded_amt,
                               p_paid_int_rate   => v_paid_int_rate,
                               p_paid_int_amt    => v_paid_int_amt,
                               p_error           => v_paid_ded_error);

        IF v_paid_ded_amt > 0 AND v_paid_ded_error IS NULL
        THEN
           v_tot_paid_ded_amount      := NVL(v_tot_paid_ded_amount, 0) + v_paid_ded_amt;
           v_tot_paid_interest_amt    := NVL(v_tot_paid_interest_amt, 0) + NVL(v_paid_int_amt, 0);

           UPDATE   com_agent_com_ded
              SET   bill_no = v_bill_no
            WHERE   pgid = i.pgid AND bill_no IS NULL;
        END IF;
     END IF;
      */

            INSERT INTO com_agent_com_bill_dtl (bill_no,
                                                fa_comm_no,
                                                pgid,
                                                prem_due_dt,
                                                earning_cd,
                                                gross_bill_amt,
                                                tax_ded_amt,
                                                net_bill_amt,
                                                pay_rate,
                                                receive_dt,
                                                branch_off,
                                                sales_off,
                                                zonal_off,
                                                servicing_off,
                                                i_usr,
                                                i_dt,
                                                comm_ded_rate,
                                                comm_ded_amt,
                                                paid_ded_amount,
                                                paid_interest_amt,
                                                paid_interest_rate,
                                                um_paid_interest_amt,
                                                um_paid_interest_rate,
                                                um_paid_ded_amount,
                                                bm_paid_interest_amt,
                                                bm_paid_interest_rate,
                                                bm_paid_ded_amount)
              VALUES   (v_bill_no,
                        i.fa_comm_no,
                        i.pgid,
                        i.prem_due_dt,
                        i.earning_cd,
                        i.payable_amount,
                        v_tax_ded_amt,
                        i.payable_amount - v_tax_ded_amt,
                        i.pay_rate,
                        i.receive_date,
                        v_branch_off,
                        v_sales_off,
                        v_zonal_off,
                        v_servicing_off,
                        p_user,
                        SYSDATE,
                        i.comm_ded_rate,
                        i.comm_ded_amt,
                        i.paid_ded_amount,
                        i.paid_interest_amt,
                        i.paid_interest_rate,
                        i.um_paid_interest_amt,
                        i.um_paid_interest_rate,
                        i.um_paid_ded_amount,
                        i.bm_paid_interest_amt,
                        i.bm_paid_interest_rate,
                        i.bm_paid_ded_amount);

            UPDATE   com_agent_com_detail
               SET   bill_no = v_bill_no,
                     bill_status = '1',
                     u_usr = p_user,
                     u_dt = SYSDATE
             WHERE   fa_comm_no = i.fa_comm_no;

            --now update INS_AGENT_COM_DISPATCH
            UPDATE   com_agent_com_bill_mst
               SET   gross_payable_amt =
                        NVL (gross_payable_amt, 0)
                        + NVL (i.payable_amount, 0),
                     tax_ded_req = 'Y',
                     tax_ded_rate = v_tax_ded_rate,
                     tax_ded_amt =
                        NVL (v_tax_ded_amt, 0) + NVL (tax_ded_amt, 0),
                     bill_amount =
                        (NVL (bill_amount, 0)
                         + (NVL (i.payable_amount, 0)
                            - NVL (v_tax_ded_amt, 0))),
                     u_usr = p_user,
                     u_dt = SYSDATE,
                     tot_ded_amount =
                        NVL (tot_ded_amount, 0) + NVL (i.comm_ded_amt, 0),
                     tot_paid_ded_amount =
                          NVL (tot_paid_ded_amount, 0)
                        + NVL (i.paid_ded_amount, 0)
                        + NVL (i.um_paid_ded_amount, 0)
                        + NVL (i.bm_paid_ded_amount, 0),
                     tot_paid_interest_amt =
                          NVL (tot_paid_interest_amt, 0)
                        + NVL (i.paid_interest_amt, 0)
                        + NVL (i.um_paid_interest_amt, 0)
                        + NVL (i.bm_paid_interest_amt, 0),
                     tot_paid_bill_amt =
                        (NVL (tot_paid_bill_amt, 0)
                         + (NVL (i.payable_amount, 0)
                            - NVL (v_tax_ded_amt, 0))
                         - NVL (i.comm_ded_amt, 0)
                         + (  NVL (i.paid_ded_amount, 0)
                            + NVL (i.paid_interest_amt, 0)
                            + NVL (i.um_paid_interest_amt, 0)
                            + NVL (i.um_paid_ded_amount, 0)
                            + NVL (i.bm_paid_interest_amt, 0)
                            + NVL (i.bm_paid_ded_amount, 0)))
             WHERE   bill_no = v_bill_no;

            p_process_rec_cnt := NVL (p_process_rec_cnt, 0) + 1;
         ELSE
            ROLLBACK;
            EXIT;
         END IF;
      END LOOP;

      IF p_error IS NULL
      THEN
         COMMIT;
      ELSE
         ROLLBACK;
      END IF;
   END;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error :=
            'v_agent_id '
         || v_agent_id
         || '--'
         || 'v_bill_no: '
         || v_bill_no
         || SQLERRM;
END pro_fa_comm_bill;
/


--
-- PRO_FA_PER_TRNS_EAR_CAL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_fa_per_trns_ear_cal (
   p_agent_id       IN     hrm_agent.agent_id%TYPE,
   p_pgid           IN     ins_p_summery.pgid%TYPE,
   p_inst_prem      IN     ins_p_summery.installment_premium%TYPE,
   p_life_prem      IN     ins_p_summery.life_premium%TYPE,
   p_suppl_prem     IN     ins_p_summery.suppl_ben_premium%TYPE,
   p_inst_date      IN     DATE,
   p_com_exe_date   IN     DATE,
   p_fy_start_dt    IN     DATE,
   p_fy_end_dt      IN     DATE,
   p_product_cd     IN     ins_product.product_cd%TYPE,
   p_term           IN     ins_p_summery.term%TYPE,
   p_prem_yr        IN     NUMBER,
   p_earning_type   IN     VARCHAR2,
   p_object_cd      IN     VARCHAR2,
   p_ins_tp_cd      IN     ins_insurance_type.ins_tp_cd%TYPE,
   p_receive_date   IN     DATE,
   p_onestop_flag   IN     NUMBER, --1 For one-stop, 0 for regular
   p_user           IN     VARCHAR2,
   p_proc_rec_cnt      OUT NUMBER,
   p_error             OUT VARCHAR2
)
IS
   /*
       History:
       28.02.2016  Modify  Due to add the option of service charge of FA
                           And cal_on parameter change to implement this
   */
   v_payable_amt             NUMBER (12, 2) := 0;
   v_payable_pct             NUMBER (5, 2) := 0;
   v_earn_cnt                NUMBER (2) := 0;
   v_curr_com_amount         com_agent_com_detail.payable_amount%TYPE := 0;
   v_fa_comm_no              com_agent_com_detail.fa_comm_no%TYPE;
   v_regional_off            hrm_office.office_cd%TYPE;
   v_agent_off               hrm_office.office_cd%TYPE;
   v_error                   VARCHAR2 (200);
   v_agent_org_setup         com_agent_com_detail.agent_org_setup%TYPE;
   v_agent_org_setup_lvl     com_agent_com_detail.agent_org_setup_lvl%TYPE;
   v_agent_cnt               NUMBER (2) := 0;
   v_prem_amt                ins_p_summery.installment_premium%TYPE := 0;
   v_trans_item_comm_pay     acc_gl_trans_item_info.trans_item_cd%TYPE;
   v_trans_item_comm         acc_gl_trans_item_info.trans_item_cd%TYPE;
   v_ser_charge_st           VARCHAR2 (1) := 0;         ---Musha on 28.02.2016
   v_payable_off             hrm_office.office_cd%TYPE; ---Musha on 01.06.2016
   --------------------------
   v_sys_config_st           NUMBER (1);
   v_upd_message             VARCHAR2 (200);

   --------------
   v_ded_rate                NUMBER (12, 2);
   v_ded_amt                 NUMBER (12, 2);
   v_ded_error               VARCHAR2 (200);

   --v_paid_ded_amt            NUMBER (12, 2);
   --v_paid_int_rate           NUMBER (5, 2);
   --v_paid_int_amt            NUMBER (12, 2);
   v_fa_paid_ded_amt            NUMBER (12, 2);
   v_fa_paid_int_rate           NUMBER (5, 2);
   v_fa_paid_int_amt            NUMBER (12, 2);
   
   v_um_paid_ded_amt            NUMBER (12, 2);
   v_um_paid_int_rate           NUMBER (5, 2);
   v_um_paid_int_amt            NUMBER (12, 2);
   
   v_bm_paid_ded_amt            NUMBER (12, 2);
   v_bm_paid_int_rate           NUMBER (5, 2);
   v_bm_paid_int_amt            NUMBER (12, 2);
   
   
   v_paid_ded_error          VARCHAR2 (200);
   v_tot_ded_amount          NUMBER (12, 2);
   v_tot_paid_ded_amount     NUMBER (12, 2);
   v_tot_paid_interest_amt   NUMBER (12, 2);
   v_ic_vr_indx              NUMBER := 0;
   
   v_ic_vr_error             VARCHAR2 (200);
   v_ic_onestop_sysconf_st   NUMBER (1);
   v_ic_onestop_message      VARCHAR2 (200);
   v_onestop_ded             NUMBER (1);
   v_ded_flag                NUMBER (1) := 1;
   
   v_agm_emp_gid             hrm_employee.emp_gid%TYPE;
   v_dgm_emp_gid             hrm_employee.emp_gid%TYPE;
   v_gm_emp_gid              hrm_employee.emp_gid%TYPE;

   CURSOR cur_earning (
      p_ser_charge_st                 VARCHAR2
   )
   IS
      SELECT   h.earning_cd,
               h.earning_type,
               h.paid_yr_from,
               h.paid_yr_to,
               h.cal_based_on,
               m.calc_on,
               NVL (m.amount_depnt, 0) amount_depnt,
               NVL (m.persistency_depnt, 0) persistency_depnt,
               d.persistency_rate_frm,
               d.persistency_rate_to,
               (d.payable_pct / 100) payable_pct
        FROM   com_earn_tp h,
               com_agency_comm_stp m,
               com_agency_comm_stp_detl d
       WHERE       h.status = '1'
               --AND    h.calc_on = 'T'
               AND h.calc_on = DECODE (p_ser_charge_st, '1', 'A', 'T') ---Musha on 28.02.2016
               AND h.earning_type = NVL (p_earning_type, h.earning_type)
               AND (m.product_cd IS NULL
                    OR (m.product_cd IS NOT NULL
                        AND m.product_cd = NVL (p_product_cd, m.product_cd)))
               AND p_prem_yr BETWEEN h.paid_yr_from AND h.paid_yr_to
               AND p_term BETWEEN NVL (d.term_from, 1)
                              AND  NVL (d.term_to, 99)
               AND NVL (m.amount_depnt, 0) = '0'
               AND (NVL (m.persistency_depnt, 0) = '0'
                    OR (NVL (m.persistency_depnt, 0) = '1'/*AND fun_persistency_rate ('05', p_agent_id,
                                                                             p_com_exe_date)
                                                          BETWEEN d.persistency_rate_frm
                                                              AND d.persistency_rate_to*/
                                                          --MUSHA ON 12-03-2015
                      ))
               AND h.earning_cd = m.earning_cd
               AND m.setupmst_cd = d.setupmst_cd
      UNION
      SELECT   DISTINCT h.earning_cd,
                        h.earning_type,
                        h.paid_yr_from,
                        h.paid_yr_to,
                        h.cal_based_on,
                        m.calc_on,
                        NVL (m.amount_depnt, 0) amount_depnt,
                        NULL persistency_depnt,
                        NULL persistency_rate_frm,
                        NULL persistency_rate_to,
                        NULL payable_pct
        FROM   com_earn_tp h,
               com_agency_comm_stp m,
               com_agency_comm_stp_detl d
       WHERE       h.status = '1'
               --AND    h.calc_on = 'T'
               AND h.calc_on = DECODE (p_ser_charge_st, '1', 'A', 'T') ---Musha on 28.02.2016
               AND h.earning_type = NVL (p_earning_type, h.earning_type)
               AND NVL (m.amount_depnt, 0) = '1'
               AND (m.product_cd IS NULL
                    OR (m.product_cd IS NOT NULL
                        AND m.product_cd = NVL (p_product_cd, m.product_cd)))
               AND p_prem_yr BETWEEN h.paid_yr_from AND h.paid_yr_to
               AND p_term BETWEEN NVL (d.term_from, 1)
                              AND  NVL (d.term_to, 99)
               AND h.earning_cd = m.earning_cd
               AND m.setupmst_cd = d.setupmst_cd
      ORDER BY   cal_based_on, earning_type DESC;
BEGIN
   p_proc_rec_cnt := 0;

   SELECT   DECODE (COUNT ( * ), 0, '1', '0')
     INTO   v_ser_charge_st
     FROM   ins_p_summery s
    WHERE   s.pgid = p_pgid AND s.agent_id = p_agent_id;

   FOR rec_earn IN cur_earning (v_ser_charge_st)
   LOOP
      v_payable_amt := 0;

      SELECT   office_cd
        INTO   v_agent_off
        FROM   hrm_agent
       WHERE   agent_id = p_agent_id;

      ----------Find payable office-----------
      --Musha on 01.06.2016
      BEGIN
         SELECT   fun_find_sales_off (v_agent_off) INTO v_payable_off FROM DUAL;

         IF v_payable_off IS NULL
         THEN
            SELECT   fun_find_service_off (v_agent_off)
              INTO   v_payable_off
              FROM   DUAL;

            IF v_payable_off IS NULL
            THEN
               SELECT   fun_find_head_off (v_agent_off)
                 INTO   v_payable_off
                 FROM   DUAL;
            END IF;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_payable_off := v_agent_off;
      END;

      --End of find payable office--

      --cal_based_on: 1=Collected Premium, 2=Agent's Commission
      --calc_on: T = Per Transaction, A = Per Transaction with application, F= At the end of FY or business year
      IF rec_earn.cal_based_on IN ('1', '6', '7', '8')
      THEN
         --1 = Total Premium, 6 = Life Premium, 7 = Life Premium With Supl. Premium, 8 = Supplementary Premium
         IF rec_earn.cal_based_on = '1'
         THEN
            v_prem_amt := p_inst_prem;
         ELSIF rec_earn.cal_based_on = '6'
         THEN
            v_prem_amt := p_life_prem;
         ELSIF rec_earn.cal_based_on = '7'
         THEN
            v_prem_amt := p_life_prem + NVL (p_suppl_prem, 0);
         ELSIF rec_earn.cal_based_on = '8'
         THEN
            v_prem_amt := p_suppl_prem;
         END IF;

         /*IF v_prem_amt <= 0 THEN
            p_error   := 'Premium amount cannot: '||v_prem_amt||' for policy no. '||fun_ins_pgid_to_policy_no (p_pgid);
            return;
         END IF;*/

         IF rec_earn.amount_depnt = '0'
         THEN
            v_payable_amt := ROUND ( (v_prem_amt * rec_earn.payable_pct), 2);
         ELSE
            --Check for the earning already calculated or not--
            SELECT   COUNT (1)
              INTO   v_earn_cnt
              FROM   com_agent_com_detail c
             WHERE       c.agent_id = p_agent_id
                     AND c.pgid = p_pgid
                     AND c.prem_due_dt = p_inst_date
                     AND c.earning_cd = rec_earn.earning_cd;

            IF v_earn_cnt = 0
            THEN
               BEGIN
                  SELECT   (d.payable_pct / 100)
                    INTO   v_payable_pct
                    FROM   com_earn_tp h,
                           com_agency_comm_stp m,
                           com_agency_comm_stp_detl d
                   WHERE       h.status = '1'
                           AND NVL (m.amount_depnt, 0) = '1'
                           AND m.earning_cd = rec_earn.earning_cd
                           AND h.earning_type = rec_earn.earning_type
                           AND h.earning_cd = m.earning_cd
                           AND m.setupmst_cd = d.setupmst_cd
                           AND rec_earn.paid_yr_from = h.paid_yr_from
                           AND rec_earn.paid_yr_to = h.paid_yr_to
                           AND p_term BETWEEN NVL (d.term_from, 1)
                                          AND  NVL (d.term_to, 99)
                           AND NVL (m.product_cd, '00') =
                                 NVL (m.product_cd, '00')
                           AND v_prem_amt BETWEEN d.amount_from
                                              AND  d.amount_to;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_payable_pct := 0;
               END;

               v_payable_amt := ROUND ( (v_prem_amt * v_payable_pct), 2);
            END IF;
         END IF;
      ELSIF rec_earn.cal_based_on = '2'
      THEN
         --Earn Commission by FA
         --Calculation on the current commission
         --Find commission amount for current transaction (collection)
         SELECT   payable_amount
           INTO   v_curr_com_amount
           FROM   com_agent_com_detail c
          WHERE       c.agent_id = p_agent_id
                  AND c.pgid = p_pgid
                  AND c.prem_due_dt = p_inst_date
                  AND c.earning_cd = rec_earn.earning_cd;

         v_payable_amt :=
            ROUND ( (v_curr_com_amount * rec_earn.payable_pct), 2);
      END IF;

      --============================--
      --Round Amount--Add by Musha on 28.09.2020
      pro_get_sys_config_st (p_pgid            => NULL,
                             p_config_id       => 43,
                             p_sys_config_st   => v_sys_config_st,
                             p_upd_message     => v_upd_message);

      IF v_sys_config_st = 1
      THEN
         v_payable_amt := ROUND (v_payable_amt);
      END IF;

      --============================--

      IF v_payable_amt > 0
      THEN
         SELECT   TO_NUMBER(TO_CHAR (p_fy_start_dt, 'rrmm')
                                  || LPAD (seq_fa_comm_no.NEXTVAL, 8, 0))
                 INTO   v_fa_comm_no
                 FROM   DUAL;
         
         v_ded_flag := 1;
         
         ---IC Calculation---
           IF p_onestop_flag = 1 THEN
                pro_get_sys_config_st 
                         (p_pgid            => NULL,
                          p_config_id       => 45,
                          p_sys_config_st   => v_ic_onestop_sysconf_st,
                          p_upd_message     => v_ic_onestop_message);
                          
                 IF v_ic_onestop_sysconf_st = 1 THEN
                    v_onestop_ded := 1;
                 ELSE
                    v_onestop_ded := 0;
                    v_ded_flag := 0;
                 END IF;
           END IF;
           
           IF p_prem_yr = 1 AND v_ded_flag = 1 --1 means do deduction 
           THEN
              pro_comm_ded_amt (p_emp_type_cd      => '05',
                                p_pgid             => p_pgid,
                                p_comm_bon_year    => p_prem_yr,
                                p_payable_amount   => v_payable_amt,
                                p_ded_rate         => v_ded_rate,
                                p_ded_amt          => v_ded_amt,
                                p_error            => v_ded_error);

              IF v_ded_amt > 0 AND v_ded_error IS NULL
              THEN
                 v_tot_ded_amount := NVL (v_tot_ded_amount, 0) + v_ded_amt;

                 INSERT INTO com_agent_com_ded (fa_comm_no,
                                                agent_id,
                                                pgid,
                                                prem_due_dt,
                                                earning_cd,
                                                comm_bon_year,
                                                payable_amount,
                                                deduction_amount,
                                                comm_ded_rate,
                                                comm_ded_date,
                                                i_usr,
                                                i_dt)
                   VALUES   (v_fa_comm_no,
                             p_agent_id,
                             p_pgid,
                             p_inst_date,
                             rec_earn.earning_cd,
                             p_prem_yr,
                             v_payable_amt,
                             v_ded_amt,
                             v_ded_rate,
                             p_com_exe_date,
                             p_user,
                             SYSDATE);
              END IF;
           ELSIF p_prem_yr = 2
           THEN
              /*  (
                 p_emp_type_cd     => '05',
                 p_pgid            => p_pgid,
                 p_prem_due_date   => p_inst_date,
                 p_int_calc_date   => p_com_exe_date,
                 p_paid_ded_amt    => v_paid_ded_amt,
                 p_paid_int_rate   => v_paid_int_rate,
                 p_paid_int_amt    => v_paid_int_amt,
                 p_error           => v_paid_ded_error
              );*/
              
              pro_comm_paid_ded_amt (
                 p_emp_type_cd     => '05',
                 p_fa_id           => p_agent_id,
                 p_pgid            => p_pgid,
                 p_prem_due_date   => p_inst_date,
                 p_int_calc_date   => p_com_exe_date,
                 p_fa_paid_ded_amt    => v_fa_paid_ded_amt,
                 p_fa_paid_int_rate   => v_fa_paid_int_rate,
                 p_fa_paid_int_amt    => v_fa_paid_int_amt,
                 
                 p_um_paid_ded_amt    => v_um_paid_ded_amt,
                 p_um_paid_int_rate   => v_um_paid_int_rate,
                 p_um_paid_int_amt    => v_um_paid_int_amt,
                 
                 p_bm_paid_ded_amt    => v_bm_paid_ded_amt,
                 p_bm_paid_int_rate   => v_bm_paid_int_rate,
                 p_bm_paid_int_amt    => v_bm_paid_int_amt,
                 p_error              => v_paid_ded_error
              );

              IF v_fa_paid_ded_amt > 0 AND v_paid_ded_error IS NULL
              THEN
                 v_tot_paid_ded_amount :=
                    NVL (v_tot_paid_ded_amount, 0) + v_fa_paid_ded_amt;
                 v_tot_paid_interest_amt :=
                    NVL (v_tot_paid_interest_amt, 0)
                    + NVL (v_fa_paid_int_amt, 0);

                 UPDATE   com_agent_com_ded
                    SET   bill_no = v_fa_comm_no
                  WHERE   pgid = p_pgid AND bill_no IS NULL;
                  
                 UPDATE   com_dev_emp_comm_ded
                    SET   bill_no = v_fa_comm_no
                  WHERE   pgid = p_pgid AND bill_no IS NULL;
              END IF;
           END IF;

           --================--
         
         
         p_proc_rec_cnt := p_proc_rec_cnt + 1;

         /********************************************************
         This part is added by MD. Sayadur Rahaman  on 14/Feb-2013
         Purpose: Accounts Integration
         *********************************************************/
         v_regional_off := fun_find_regional_off (v_agent_off);

         DECLARE
            recprem          pkg_gl_voucher.t_trans_tab;
            v_object_cd      gen_object_info.object_cd%TYPE;
            v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
            v_inter_off_st   CHAR (1);
            v_office_cd      hrm_office.office_cd%TYPE;
            v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
            v_trans_date     DATE;
            v_cost_center    hrm_office.office_cd%TYPE;
            v_narration      VARCHAR2 (200);
            v_user           VARCHAR2 (20);
            v_chq_tp         VARCHAR2 (3);
            v_chq_no         VARCHAR2 (50);
            v_chq_dt         DATE;
            v_voucher_no     VARCHAR2 (15);
            v_sus_amt_used   NUMBER (1);
            
            v_ic_voucher_no     VARCHAR2 (15);
         BEGIN
            /***********************
            Business wise value will change.
            Developer will put the value
            **********************************/
            v_object_cd := p_object_cd;
            v_voucher_cd := '05';
            v_inter_off_st := '0';
            v_office_cd := v_regional_off;
            v_cost_center := v_payable_off; ----v_agent_off;  --Musha on 01.06.2016
            v_trans_id :=
                  p_agent_id
               || v_agent_off
               || TO_CHAR (p_com_exe_date, 'DDMMRR');
            v_trans_date := p_com_exe_date;
            v_narration :=
               'FA Commission Payable Calculation on ' || p_com_exe_date;
            v_user := p_user;

            /*******End********/
            --Here '20' for " Commission Payable Amount"
            /* recprem (1).trans_item_cd := 20;
                        recprem (1).post_amount := v_payable_amt;
                        recprem (1).chq_tp := NULL;
                        recprem (1).chq_no := NULL;
                        recprem (1).chq_dt := NULL;

            ----------------------------------
            --Here '9' for "1st Yr Commission Amount"
                        IF p_prem_yr = 1
                        THEN
                           recprem (2).trans_item_cd := 9;
                           recprem (2).post_amount := v_payable_amt;
                           recprem (2).chq_tp := NULL;
                           recprem (2).chq_no := NULL;
                           recprem (2).chq_dt := NULL;
                        ELSE
                           --Here '21' for "Renewal Commission Amount"
                           recprem (2).trans_item_cd := 21;
                           recprem (2).post_amount := v_payable_amt;
                           recprem (2).chq_tp := NULL;
                           recprem (2).chq_no := NULL;
                           recprem (2).chq_dt := NULL;
                        END IF;*/

            IF p_ins_tp_cd = 1
            THEN
               --Conventional Insurance
               v_trans_item_comm_pay := 20;               --Commission Payable
               --v_trans_item_tax_pay    := 11;  --Tax Payable
               v_trans_item_comm := 9;                        --Commission amt
            ELSE
               --Takaful Insurance
               v_trans_item_comm_pay := 108;              --Commission Payable
               --v_trans_item_tax_pay    := 106;  --Tax Payable
               v_trans_item_comm := 105;                      --Commission amt
            END IF;

            --commission payable
            recprem (1).trans_item_cd := v_trans_item_comm_pay;
            recprem (1).post_amount := v_payable_amt - NVL(v_ded_amt, 0);
            recprem (1).chq_tp := NULL;
            recprem (1).chq_no := NULL;
            recprem (1).chq_dt := NULL;

            --commission
            recprem (2).trans_item_cd := v_trans_item_comm;
            recprem (2).post_amount := v_payable_amt - NVL(v_ded_amt, 0);
            recprem (2).chq_tp := NULL;
            recprem (2).chq_no := NULL;
            recprem (2).chq_dt := NULL;
            
           /* IF v_paid_ded_amt > 0 THEN
                --Paid deduction
                recprem (3).trans_item_cd := 227;
                recprem (3).post_amount := v_paid_ded_amt;
                recprem (3).chq_tp := NULL;
                recprem (3).chq_no := NULL;
                recprem (3).chq_dt := NULL;
                
                --Paid interest of deduction
                IF v_paid_int_amt > 0 THEN
                    recprem (4).trans_item_cd := 224;
                    recprem (4).post_amount := v_paid_int_amt;
                    recprem (4).chq_tp := NULL;
                    recprem (4).chq_no := NULL;
                    recprem (4).chq_dt := NULL;
                END IF;
            END IF;*/ ---------------

            pkg_gl_voucher.pro_voucher_posting (
               p_table          => recprem,
               p_object_cd      => v_object_cd,
               p_vouch_cd       => v_voucher_cd,
               p_inter_off_st   => v_inter_off_st,
               p_office_cd      => v_office_cd,
               p_trans_id       => v_trans_id,
               p_trans_date     => v_trans_date,
               p_cost_center    => v_cost_center,
               p_narration      => v_narration,
               p_user           => v_user,
               p_ins_tp_cd      => p_ins_tp_cd,
               p_voucher_no     => v_voucher_no,
               p_error          => v_error
            );

            IF v_error IS NULL
            THEN
               --IC Voucher--
                IF v_ded_amt > 0 THEN
                    DECLARE
                        recprem1          pkg_gl_voucher.t_trans_tab;                        
                     BEGIN
                        recprem1 (1).trans_item_cd := 218;
                        recprem1 (1).post_amount := v_ded_amt;
                        recprem1 (1).chq_tp := NULL;
                        recprem1 (1).chq_no := NULL;
                        recprem1 (1).chq_dt := NULL;

                        --commission
                        recprem1 (2).trans_item_cd := 221;
                        recprem1 (2).post_amount := v_ded_amt;
                        recprem1 (2).chq_tp := NULL;
                        recprem1 (2).chq_no := NULL;
                        recprem1 (2).chq_dt := NULL;

                        pkg_gl_voucher.pro_voucher_posting (
                           p_table          => recprem1,
                           p_object_cd      => v_object_cd,
                           p_vouch_cd       => '05',
                           p_inter_off_st   => 0,
                           p_office_cd      => v_office_cd,
                           p_trans_id       => v_trans_id,
                           p_trans_date     => v_trans_date,
                           p_cost_center    => v_cost_center,
                           p_narration      => 'FA IC Payable',
                           p_user           => v_user,
                           p_ins_tp_cd      => p_ins_tp_cd,
                           p_voucher_no     => v_ic_voucher_no,
                           p_error          => v_ic_vr_error
                        );
                     END;
                END IF;
                
                --IC voucher for paid ded amount----
                if v_fa_paid_ded_amt > 0 then
                    DECLARE
                        recprem2          pkg_gl_voucher.t_trans_tab;                        
                     BEGIN
                        /*if v_fa_paid_ded_amt > 0 then
                            recprem2 (1).trans_item_cd := 266;
                        elsIF v_um_paid_ded_amt > 0 THEN
                            recprem2 (1).trans_item_cd := 267;
                        elsIF v_bm_paid_ded_amt > 0 THEN
                            recprem2 (1).trans_item_cd := 268;
                        end if;
                        recprem2 (1).post_amount := v_ded_amt;
                        recprem2 (1).chq_tp := NULL;
                        recprem2 (1).chq_no := NULL;
                        recprem2 (1).chq_dt := NULL;*/
                        
                        v_ic_vr_indx := 1;
                        IF v_fa_paid_ded_amt > 0 THEN
                            --Paid deduction
                            recprem2 (v_ic_vr_indx).trans_item_cd := 266;
                            recprem2 (v_ic_vr_indx).post_amount := v_fa_paid_ded_amt;
                            recprem2 (v_ic_vr_indx).chq_tp := NULL;
                            recprem2 (v_ic_vr_indx).chq_no := NULL;
                            recprem2 (v_ic_vr_indx).chq_dt := NULL;
                            
                            v_ic_vr_indx := v_ic_vr_indx + 1;
                            
                            recprem2 (v_ic_vr_indx).trans_item_cd := 227;
                            recprem2 (v_ic_vr_indx).post_amount := v_fa_paid_ded_amt + NVL(v_fa_paid_int_amt, 0);
                            recprem2 (v_ic_vr_indx).chq_tp := NULL;
                            recprem2 (v_ic_vr_indx).chq_no := NULL;
                            recprem2 (v_ic_vr_indx).chq_dt := NULL;
                            
                            v_ic_vr_indx := v_ic_vr_indx + 1;
                            
                            --Paid interest of deduction
                            IF v_fa_paid_int_amt > 0 THEN
                                recprem2 (v_ic_vr_indx).trans_item_cd := 224;
                                recprem2 (v_ic_vr_indx).post_amount := v_fa_paid_int_amt;
                                recprem2 (v_ic_vr_indx).chq_tp := NULL;
                                recprem2 (v_ic_vr_indx).chq_no := NULL;
                                recprem2 (v_ic_vr_indx).chq_dt := NULL;
                                
                                v_ic_vr_indx := v_ic_vr_indx + 1;
                            END IF;
                        END IF;
                        
                        ---For UM 
                        IF v_um_paid_ded_amt > 0 THEN
                            --Paid deduction
                            recprem2 (v_ic_vr_indx).trans_item_cd := 267;
                            recprem2 (v_ic_vr_indx).post_amount := v_um_paid_ded_amt;
                            recprem2 (v_ic_vr_indx).chq_tp := NULL;
                            recprem2 (v_ic_vr_indx).chq_no := NULL;
                            recprem2 (v_ic_vr_indx).chq_dt := NULL;
                            
                            v_ic_vr_indx := v_ic_vr_indx + 1;
                            
                            recprem2 (v_ic_vr_indx).trans_item_cd := 228;
                            recprem2 (v_ic_vr_indx).post_amount := v_um_paid_ded_amt + NVL(v_um_paid_int_amt, 0);
                            recprem2 (v_ic_vr_indx).chq_tp := NULL;
                            recprem2 (v_ic_vr_indx).chq_no := NULL;
                            recprem2 (v_ic_vr_indx).chq_dt := NULL;
                            
                            v_ic_vr_indx := v_ic_vr_indx + 1;
                                        
                            --Paid interest of deduction
                            IF v_um_paid_int_amt > 0 THEN
                                recprem2 (v_ic_vr_indx).trans_item_cd := 225;                            
                                recprem2 (v_ic_vr_indx).post_amount := v_um_paid_int_amt;
                                recprem2 (v_ic_vr_indx).chq_tp := NULL;
                                recprem2 (v_ic_vr_indx).chq_no := NULL;
                                recprem2 (v_ic_vr_indx).chq_dt := NULL;
                                
                                v_ic_vr_indx := v_ic_vr_indx + 1;
                            END IF;
                        END IF;
                        
                        --BM
                        IF v_bm_paid_ded_amt > 0 THEN
                            --Paid deduction
                            recprem2 (v_ic_vr_indx).trans_item_cd := 268;
                            recprem2 (v_ic_vr_indx).post_amount := v_bm_paid_ded_amt;
                            recprem2 (v_ic_vr_indx).chq_tp := NULL;
                            recprem2 (v_ic_vr_indx).chq_no := NULL;
                            recprem2 (v_ic_vr_indx).chq_dt := NULL;
                            
                            v_ic_vr_indx := v_ic_vr_indx + 1;
                            
                            recprem2 (v_ic_vr_indx).trans_item_cd := 229;
                            recprem2 (v_ic_vr_indx).post_amount := v_bm_paid_ded_amt + NVL(v_bm_paid_int_amt, 0);
                            recprem2 (v_ic_vr_indx).chq_tp := NULL;
                            recprem2 (v_ic_vr_indx).chq_no := NULL;
                            recprem2 (v_ic_vr_indx).chq_dt := NULL;
                            
                            v_ic_vr_indx := v_ic_vr_indx + 1;
                                        
                            --Paid interest of deduction
                            IF v_bm_paid_int_amt > 0 THEN
                                recprem2 (v_ic_vr_indx).trans_item_cd := 226;
                                recprem2 (v_ic_vr_indx).post_amount := v_bm_paid_int_amt;
                                recprem2 (v_ic_vr_indx).chq_tp := NULL;
                                recprem2 (v_ic_vr_indx).chq_no := NULL;
                                recprem2 (v_ic_vr_indx).chq_dt := NULL;
                                
                                v_ic_vr_indx := v_ic_vr_indx + 1;
                            END IF;
                        END IF;
                        ------------
                        
                        pkg_gl_voucher.pro_voucher_posting (
                               p_table          => recprem2,
                               p_object_cd      => v_object_cd,
                               p_vouch_cd       => '05',
                               p_inter_off_st   => 0,
                               p_office_cd      => v_office_cd,
                               p_trans_id       => v_trans_id,
                               p_trans_date     => v_trans_date,
                               p_cost_center    => v_cost_center,
                               p_narration      => 'FA IC Paid Payable',
                               p_user           => v_user,
                               p_ins_tp_cd      => p_ins_tp_cd,
                               p_voucher_no     => v_ic_voucher_no,
                               p_error          => v_ic_vr_error
                            );
                     end;
                end if;

               --End of IC Voucher--
               
               --*************************Insert data into table**********************--

               --Generate PK
               /*SELECT to_number(to_char(p_fy_start_dt, 'rrmm') ||
                                lpad(nvl(MAX(substr(fa_comm_no, 5)), 0) + 1, 8, 0))
               INTO   v_fa_comm_no
               FROM   com_agent_com_detail
               WHERE  substr(fa_comm_no, 1, 4) = to_char(p_fy_start_dt, 'rrmm');*/

               /*SELECT   TO_NUMBER(TO_CHAR (p_fy_start_dt, 'rrmm')
                                  || LPAD (seq_fa_comm_no.NEXTVAL, 8, 0))
                 INTO   v_fa_comm_no
                 FROM   DUAL;*/--

               v_agent_org_setup := fun_agent_org_setup (p_agent_id);
               v_agent_org_setup_lvl := NULL;

               SELECT fun_fa_emp_type_emp_gid (p_agent_id, '14'),
                      fun_fa_emp_type_emp_gid (p_agent_id, '15'),
                      fun_fa_emp_type_emp_gid (p_agent_id, '16')
                 INTO v_agm_emp_gid, v_dgm_emp_gid, v_gm_emp_gid
                 FROM dual;

               INSERT INTO com_agent_com_detail (fa_comm_no,
                                                 agent_id,
                                                 office_cd,
                                                 pgid,
                                                 prem_due_dt,
                                                 earning_cd,
                                                 comm_bon_year,
                                                 payable_amount,
                                                 payable_vouch_no,
                                                 com_exe_date,
                                                 process_user,
                                                 process_date,
                                                 agent_org_setup,
                                                 agent_org_setup_lvl,
                                                 ins_tp_cd,
                                                 pay_rate,
                                                 receive_date,
                                                 i_usr,
                                                 i_dt,
                                                 service_charge_st,
                                                 payable_office_cd,
                                                 comm_ded_rate,
                                                 comm_ded_amt,
                                                 paid_ded_amount,
                                                 paid_interest_amt,
                                                 paid_interest_rate,
                                                 
                                                 um_paid_ded_amount,
                                                 um_paid_interest_amt,
                                                 um_paid_interest_rate,
                                                 
                                                 bm_paid_ded_amount,
                                                 bm_paid_interest_amt,
                                                 bm_paid_interest_rate,
                                                 
                                                 ic_payable_vouch_no,
                                                 
                                                 agm_emp_gid, 
                                                 dgm_emp_gid, 
                                                 gm_emp_gid)
                 VALUES   (v_fa_comm_no,
                           p_agent_id,
                           v_agent_off,
                           p_pgid,
                           p_inst_date,
                           rec_earn.earning_cd,
                           p_prem_yr,
                           v_payable_amt,
                           v_voucher_no,
                           p_com_exe_date,
                           p_user,
                           TRUNC (SYSDATE),
                           v_agent_org_setup,
                           v_agent_org_setup_lvl,
                           p_ins_tp_cd,
                           rec_earn.payable_pct * 100,
                           p_receive_date,
                           p_user,
                           SYSDATE,
                           v_ser_charge_st,
                           v_payable_off,
                           v_ded_rate,
                           v_ded_amt,
                           
                           v_fa_paid_ded_amt,
                           v_fa_paid_int_amt,
                           v_fa_paid_int_rate,
                           
                           v_um_paid_ded_amt,
                           v_um_paid_int_amt,
                           v_um_paid_int_rate,
                           
                           v_bm_paid_ded_amt,
                           v_bm_paid_int_amt,
                           v_bm_paid_int_rate,
                           
                           v_ic_voucher_no,
                           
                           
                           v_agm_emp_gid, 
                           v_dgm_emp_gid, 
                           v_gm_emp_gid);
            --Update achivement table--
            /*SELECT COUNT (*)
              INTO v_agent_cnt
              FROM com_agent_achivement
             WHERE agent_id = p_agent_id
               AND start_date = p_fy_start_dt
               AND end_date = p_fy_end_dt;

            IF v_agent_cnt = 0
            THEN
               --To Insert new data in in agent achivement.
               FOR i IN 1 .. 3
               LOOP
                  INSERT INTO com_agent_achivement
                              (agent_id, office_cd, start_date,
                               end_date, prem_yr, achived_amount,
                               comm_amount, bonus_amount, i_usr, i_dt
                              )
                       VALUES (p_agent_id, v_agent_off, p_fy_start_dt,
                               p_fy_end_dt, i, v_prem_amt,
                               v_payable_amt, 0, p_user, SYSDATE
                              );
               END LOOP;
            END IF;*/
            --End of update achivement table--
            --*************************End of Insert data into table**********************--
            ELSE
               p_error := v_error;
               ROLLBACK;
            END IF;
         END;
      END IF;
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      p_error := SQLERRM;
END;
/


--
-- PRO_FP_COLL_ADJ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_fp_coll_adj (
   p_policy_no          ins_p_proposal.policy_no%TYPE,
   p_object_cd   IN     VARCHAR2,
   --p_bypass_flag   IN       VARCHAR2,      --1=Summary Sheet, 0=Proposal Info.
   p_user               VARCHAR2,
   p_error          OUT VARCHAR2
)
IS
   /****************************************************************************
    Created By      : Syed Md. Musha
    Created Date    : 05-May-2011
    Purpose         : Adjust First Premium To Get FPR

    Update Information  :
    Date         Update By          Purpose
    19-01-2014   Syed Md. Musha     Omit by pass flag
   ****************************************************************************/
   v_pgid                 ins_p_summery.pgid%TYPE;
   v_instl_prem           ins_p_summery.installment_premium%TYPE;
   v_proposal_no          ins_p_proposal.proposal_no%TYPE;
   v_adv_coll_amt         acc_advance_receivables.coll_amount%TYPE;
   v_ref_vouch_no         VARCHAR2 (15);
   v_error_rec            VARCHAR2 (400);
   v_cnt_rec              NUMBER (10);
   v_cnt_policy           NUMBER (2);
   v_error_notc           VARCHAR2 (400);
   v_policy_cnt           NUMBER (20);
   v_comm_status          VARCHAR2 (1);
   v_fp_receive_id        acc_advance_receivables.receive_id%TYPE;
   v_sl_no                NUMBER (10);
   v_zone                 hrm_office.office_cd%TYPE;
   v_comm_yr              NUMBER (4);
   v_date_back_late_fee   ins_unaccpted_policy.date_back_late_fee%TYPE;
   v_receive_date         DATE;
   v_office_cd            hrm_office.office_cd%TYPE;
   v_proposal_office_cd   hrm_office.office_cd%TYPE;
   v_error                VARCHAR2 (200);
   v_comm_date            DATE;
   v_ins_tp_cd            ins_insurance_type.ins_tp_cd%TYPE;
   v_trans_item_cd_prem   acc_gl_trans_item_info.trans_item_cd%TYPE;
   v_trans_item_cd_susp   acc_gl_trans_item_info.trans_item_cd%TYPE;
   v_unadj_adv_coll_amt   acc_advance_receivables.coll_amount%TYPE := 0;
   v_adv_adj_error        VARCHAR2 (200);
BEGIN
   IF p_policy_no IS NOT NULL
   THEN
      BEGIN
         SELECT   p.proposal_no, p.pgid, p.ins_tp_cd
           INTO   v_proposal_no, v_pgid, v_ins_tp_cd
           FROM   ins_p_proposal p
          WHERE   p.policy_no = p_policy_no;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
      END;

      IF v_pgid IS NOT NULL
      THEN
         SELECT   s.installment_premium,
                  s.comm_date,
                  office_cd,
                  s.regional_off,
                  TO_CHAR (s.comm_date, 'rrrr')
           INTO   v_instl_prem,
                  v_comm_date,
                  v_office_cd,
                  v_zone,
                  v_comm_yr
           FROM   ins_p_summery s
          WHERE   s.pgid = v_pgid;

         SELECT   SUM (r.coll_amount),
                  MAX (r.receive_id),
                  MAX (r.receive_date)
           INTO   v_adv_coll_amt, v_fp_receive_id, v_receive_date
           FROM   acc_advance_receivables r
          WHERE       UPPER (r.proposal_no) = v_proposal_no
                  AND r.status = '0'
                  AND r.rec_status = '1'
                  AND NVL (cheque_deposit, 'N') =
                        DECODE (receive_mode,
                                '1', NVL (cheque_deposit, 'N'),
                                '3', NVL (cheque_deposit, 'N'),
                                '4', NVL (cheque_deposit, 'N'),
                                '5', NVL (cheque_deposit, 'N'),
                                '7', NVL (cheque_deposit, 'N'),
                                'Y')
                  AND NVL (r.coll_check_status, '0') =
                        DECODE (r.mode_tp, '1', '0', '1')
                  AND (r.api_collection_id IS NOT NULL    --Add by Musha on 21.01.2019
                       OR EXISTS
                            (SELECT   1
                               FROM   acc_bank_tran_mst m, acc_bank_tran_dtl d
                              WHERE       m.coll_purpose = '1'
                                      AND d.pgid = r.pgid
                                      AND d.receive_id = r.receive_id
                                      AND d.slno = r.slno
                                      AND NVL (d.deposit_st, '0') = '1'
                                      AND m.tran_id = d.tran_id)
                      );

         ---------------------------------
         SELECT   SUM (r.coll_amount)
           INTO   v_unadj_adv_coll_amt
           FROM   acc_advance_receivables r
          WHERE   UPPER (r.proposal_no) = v_proposal_no
                  AND r.rec_status = '1'
                  AND r.api_collection_id IS NULL    --Add by Musha on 21.01.2019
                  /*AND NVL (cheque_deposit, 'N') =
                         DECODE (receive_mode,
                                 '1', NVL (cheque_deposit, 'N'),
                                 '3', NVL (cheque_deposit, 'N'),
                                 'Y'
                                )
                  AND NVL (r.coll_check_status, '0') =
                                                   DECODE (r.mode_tp,
                                                           '1', '0',
                                                           '1'
                                                          )*/
                  AND (r.api_collection_id IS NOT NULL    --Add by Musha on 21.01.2019
                       OR NOT EXISTS
                            (SELECT   1
                               FROM   acc_bank_tran_mst m, acc_bank_tran_dtl d
                              WHERE       m.coll_purpose = '1'
                                      AND d.pgid = r.pgid
                                      AND d.receive_id = r.receive_id
                                      AND d.slno = r.slno
                                      AND NVL (d.deposit_st, '0') = '1'
                                      AND m.tran_id = d.tran_id)
                     );

         ----------------------------------
         /*IF p_bypass_flag = '1'
            THEN
               SELECT NVL (m.date_back_late_fee, 0)
                 INTO v_date_back_late_fee
                 FROM masfile m
                WHERE m.policy_no = p_policy_no;
            ELSE*/
         SELECT   NVL (p.date_back_late_fee, 0)
           INTO   v_date_back_late_fee
           FROM   ins_unaccpted_policy p
          WHERE   p.pgid = v_pgid;

         --END IF;
         IF NVL (v_unadj_adv_coll_amt, 0) > 0
         THEN
            p_error := 'There is unadjustable premium.';
         ELSIF NVL (v_adv_coll_amt, 0) - NVL (v_date_back_late_fee, 0) >= NVL (v_instl_prem, 0) AND NVL (v_adv_coll_amt, 0) > 0
         THEN
            /* First Premium Adjustment Voucher posting*/
            DECLARE
               recprem          pkg_gl_voucher.t_trans_tab;
               v_object_cd      gen_object_info.object_cd%TYPE;
               v_voucher_cd     acc_voucher_type.vouch_cd%TYPE;
               v_inter_off_st   CHAR (1);
               v_trans_id       acc_gl_trans_mst.trans_id%TYPE;
               v_trans_date     DATE;
               v_cost_center    hrm_office.office_cd%TYPE;
               v_narration      VARCHAR2 (200);
               v_user           VARCHAR2 (20);
               v_voucher_no     VARCHAR2 (15);
            -- v_sus_amt_used NUMBER(1);
            BEGIN
               /***********************
                    Business wise value will change.
                    Developer will put the value
                    **********************************/
               --v_object_cd := '00080';
               v_object_cd := p_object_cd;
               --that is object_cd
               v_voucher_cd := '05';
               v_inter_off_st := '0';
               v_office_cd := fun_find_regional_off (v_office_cd);
               v_cost_center := v_office_cd;
               v_trans_id := v_fp_receive_id;
               v_trans_date := v_receive_date;
               v_narration :=
                     'First Premium adjusted to income for policy no: '
                  || p_policy_no
                  || ' for '
                  || v_comm_date
                  || ' at '
                  || v_receive_date;
               v_user := p_user;

               /*******End********/
               IF v_ins_tp_cd = 1
               THEN
                  --Conventional Insurance
                  v_trans_item_cd_prem := 3;                         --premium
                  v_trans_item_cd_susp := 97;                       --suspense
               ELSE
                  --Takaful Insurance
                  v_trans_item_cd_prem := 103;                       --premium
                  v_trans_item_cd_susp := 102;                      --suspense
               END IF;

               recprem (1).trans_item_cd := v_trans_item_cd_prem;
               --Here '3' for " Premium Amount"
               recprem (1).post_amount := v_instl_prem;
               recprem (1).chq_tp := NULL;
               recprem (1).chq_no := NULL;
               recprem (1).chq_dt := NULL;
               ----------------------------------
               recprem (2).trans_item_cd := v_trans_item_cd_susp;
               recprem (2).post_amount :=
                  v_instl_prem + NVL (v_date_back_late_fee, 0);
               recprem (2).chq_tp := NULL;
               recprem (2).chq_no := NULL;
               recprem (2).chq_dt := NULL;

               IF NVL (v_date_back_late_fee, 0) > 0
               THEN
                  recprem (3).trans_item_cd := 4;
                  --Here '4' for "date back late fee"
                  recprem (3).post_amount := v_date_back_late_fee;
                  recprem (3).chq_tp := NULL;
                  recprem (3).chq_no := NULL;
                  recprem (3).chq_dt := NULL;
               END IF;

               pkg_gl_voucher.pro_voucher_posting (
                  p_table          => recprem,
                  p_object_cd      => v_object_cd,
                  p_vouch_cd       => v_voucher_cd,
                  p_inter_off_st   => v_inter_off_st,
                  p_office_cd      => v_office_cd,
                  p_trans_id       => v_trans_id,
                  p_trans_date     => v_trans_date,
                  p_cost_center    => v_cost_center,
                  p_narration      => v_narration,
                  p_user           => v_user,
                  p_ins_tp_cd      => v_ins_tp_cd,
                  p_voucher_no     => v_voucher_no,
                  p_error          => v_error
               );
               v_ref_vouch_no := v_voucher_no;
            END;

            IF v_error IS NULL
            THEN
               BEGIN
                  /*IF p_bypass_flag = '1'
                        THEN
                           SELECT n.comm_status
                             INTO v_comm_status
                             FROM namfile n
                            WHERE n.policy_no = p_policy_no;
                        ELSE*/
                  SELECT   NVL (p.comm_status, '0')
                    INTO   v_comm_status
                    FROM   ins_unaccpted_policy p
                   WHERE   p.pgid = v_pgid;

                  --END IF;
                  IF NVL (v_comm_status, '0') = '1'
                  THEN
                     UPDATE   acc_advance_receivables
                        SET   status = '1',
                              com_calculated = 'Y',
                              adj_voucher = v_ref_vouch_no,
                              adjusted_by = p_user,
                              adjustment_date = SYSDATE,
                              u_usr = p_user,
                              u_dt = SYSDATE
                      WHERE       proposal_no = v_proposal_no
                              AND status = '0'
                              AND rec_status = '1'
                              AND NVL (cheque_deposit, 'N') =
                                    DECODE (receive_mode,
                                            '1', NVL (cheque_deposit, 'N'),
                                            '3', NVL (cheque_deposit, 'N'),
                                            '4', NVL (cheque_deposit, 'N'),
                                            '5', NVL (cheque_deposit, 'N'),
                                            '7', NVL (cheque_deposit, 'N'),
                                            'Y');
                  ELSE
                     UPDATE   acc_advance_receivables
                        SET   status = '1',
                              adj_voucher = v_ref_vouch_no,
                              adjusted_by = p_user,
                              adjustment_date = SYSDATE,
                              u_usr = p_user,
                              u_dt = SYSDATE
                      WHERE       proposal_no = v_proposal_no
                              AND status = '0'
                              AND rec_status = '1'
                              AND NVL (cheque_deposit, 'N') =
                                    DECODE (receive_mode,
                                            '1', NVL (cheque_deposit, 'N'),
                                            '3', NVL (cheque_deposit, 'N'),
                                            '4', NVL (cheque_deposit, 'N'),
                                            '5', NVL (cheque_deposit, 'N'),
                                             '7', NVL (cheque_deposit, 'N'),
                                            'Y');
                  END IF;

                  /*Add by Musha on 13.10.2015--
                    This process will generate a collection if advance amount
                    collected with proposal amount collection*/
                  pro_proposal_adv_coll_adj (p_pgid    => v_pgid,
                                             p_usr     => p_user,
                                             p_error   => v_adv_adj_error);

                  --******************Generate FPR No.******************--
                  --Generate Serial No.--
                  BEGIN
                     SELECT   p.sl_no, p.office_cd
                       INTO   v_sl_no, v_proposal_office_cd
                       FROM   ins_p_proposal p
                      WHERE   p.pgid = v_pgid;      ---- ADD ANAMUL 30/08/2018


                     /*SELECT NVL (MAX (p.sl_no), 0) + 1
                       INTO v_sl_no
                       FROM ins_p_proposal p
                      WHERE p.servicing_office = v_zone
                        AND TO_CHAR (p.comm_dt, 'rrrr') = v_comm_yr;*/
                     ---- ADD ANAMUL 30/08/2018

                     --Update ins_p_proposal--
                     --UPDATE ins_p_proposal SET sl_no = v_sl_no WHERE pgid = v_pgid; --This statement is skipped by Md. Sayadur Rahaman on 12-02-2015, becasue sl_no is inserted during the proposal no generation

                     --END IF;

                     --Update Ins_p_Summery--
                     UPDATE   ins_p_summery
                        SET   fpr_no =
                                    v_proposal_office_cd    --v_zone
                                 || '-'
                                 || SUBSTR (v_comm_yr, -2, 2)
                                 || '-'
                                 || v_sl_no
                      WHERE   pgid = v_pgid;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        NULL;
                  END;

                  --*****************End of Generate FPR No.*****************--
                  IF NVL (v_adv_coll_amt, 0) - NVL (v_date_back_late_fee, 0) >
                        NVL (v_instl_prem, 0)
                  THEN
                     UPDATE   ins_p_summery
                        SET   suspense_amt =
                                 (v_adv_coll_amt
                                  - NVL (v_date_back_late_fee, 0))
                                 - v_instl_prem
                      WHERE   pgid = v_pgid;
                  END IF;

                  --Insert data into SER_POL_SCD_DT_ASSIGN for schedule prepartion
                  INSERT INTO ser_pol_scd_dt_assign (pgid,
                                                     sl_no,
                                                     sch_dt,
                                                     status,
                                                     i_usr,
                                                     i_dt,
                                                     sch_proc_dt,
                                                     disbursement_st,
                                                     stamp_assign_st)
                    VALUES   (v_pgid,
                              1,
                              NULL,
                              '0',
                              p_user,
                              SYSDATE,
                              NULL,
                              '0',
                              '0');

                  --End--
                  pro_fp_single_demand_notc_prep (p_policy_no,
                                                  p_user,
                                                  SYSDATE,
                                                  v_error_notc,
                                                  v_cnt_rec);

                  IF v_error_notc = 'Success' OR v_error_notc IS NULL
                  THEN
                     UPDATE   ins_prem_acc_receivable
                        SET   fp_receive_id = v_fp_receive_id,
                              paid_amount = balance,
                              balance = 0,
                              pay_status = '1',
                              ref_voucher = v_ref_vouch_no,
                              proposed_status = '1',
                              u_usr = p_user,
                              u_dt = SYSDATE
                      WHERE   pgid = v_pgid AND installment_no = 1;

                     --COMMIT;     --Musha on 18-09-2014
                     p_error := 'Success';
                  ELSE
                     p_error := v_error_notc;
                  END IF;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     ROLLBACK;
                     p_error :=
                        'Error At Update Acc_Advance_Receivables: '
                        || SQLERRM;
               END;
            ELSE
               p_error := 'Voucer Error: ' || v_error;
            END IF;
         ELSIF NVL (v_adv_coll_amt, 0) = 0
         THEN
            SELECT   COUNT (r.proposal_no)
              INTO   v_cnt_policy
              FROM   acc_advance_receivables r
             WHERE       UPPER (r.proposal_no) = v_proposal_no
                     AND r.status = '1'
                     AND r.rec_status = '1'
                     AND NVL (cheque_deposit, 'N') =
                           DECODE (receive_mode,
                                   '1', NVL (cheque_deposit, 'N'),
                                   '3', NVL (cheque_deposit, 'N'),
                                   '4', NVL (cheque_deposit, 'N'),
                                   '5', NVL (cheque_deposit, 'N'),
                                   '7', NVL (cheque_deposit, 'N'),
                                   'Y')
                     AND NVL (r.coll_check_status, '0') =
                           DECODE (r.mode_tp, '1', '0', '1')
                     AND (r.api_collection_id IS NOT NULL    --Add by Musha on 21.01.2019
                           OR EXISTS
                               (SELECT   1
                                  FROM   acc_bank_tran_mst m, acc_bank_tran_dtl d
                                 WHERE       m.coll_purpose = '1'
                                         AND d.pgid = r.pgid
                                         AND d.receive_id = r.receive_id
                                         AND d.slno = r.slno
                                         AND NVL (d.deposit_st, '0') = '1'
                                         AND m.tran_id = d.tran_id)
                        );

            IF NVL (v_cnt_policy, 0) > 0
            THEN
               p_error := 'Success';
            ELSE
               p_error := 'There is no adjusted premium.';
            END IF;
         ELSE
            p_error := 'Please Collect Premium Amount.';
         END IF;
      ELSE
         p_error := 'Invalide Policy Information.';

         BEGIN
            /*IF p_bypass_flag = '1'
                THEN
                   SELECT 1
                     INTO v_policy_cnt
                     FROM namfile n
                    WHERE n.policy_no = p_policy_no;
                ELSE*/
            SELECT   1
              INTO   v_policy_cnt
              FROM   ins_p_proposal p
             WHERE   p.pgid = v_pgid;
         --END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               p_error := 'Invalide Policy No.';
         END;
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      p_error := 'Adjustment Procedure Error: ' || SQLERRM;
      NULL;
END pro_fp_coll_adj;
/


--
-- PRO_IDRA_COLL_INFO_SCD  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_idra_coll_info_scd
IS
   v_message   VARCHAR2 (200);
BEGIN
    pro_idra_coll_scd (p_date_fr   => ADD_MONTHS (TRUNC (SYSDATE), -12),
                           p_date_to   => TRUNC (SYSDATE));
   pro_idra_policy_info_scdl (
      p_date_from   => SYSDATE,
      p_date_to     => ADD_MONTHS (TRUNC (SYSDATE), 35 * 12),
      p_error       => v_message
   );
END pro_idra_coll_info_scd;
/


--
-- PRO_LOAN_ADJUSTMENT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_loan_adjustment wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
1231 601
VhQbYAwM2uTNS45OECkwysdx8zowg5BULiCG3y/NMZ3gMxSZ1Y7cMytqmYXTjU2NomKhvh63
LyGTVhg7TKD6tbvIjt7yUSIJD9O30CBXbnhqa/ZgtvHfX92atXEFLLGwDPjS5MEFnWSq7XGH
OJj7qUU7LJuO5E9eR/HGdVWAq/ptYVE/kT2JgBV7du+9APOfSIJg2SLcJT6JYNQpZLIfGhSN
EetUL1s+nWAzE0DBjcpfuLMbUn/d1VNgKm5LMsveTpd718J6qLeFRm/p/ZygJtvYHirZChRk
mWU5/rihanX1xmoxalJm26tuhvr03/qMx+EdrhHv/Ml9NlzvOb69eK2cfbbsi2bRnumK24cF
QM2wuGRSBMDxT1rayPGvVc1A3YZC+03cz9hTf0unZsE0QxX9J7QZu3Eeo1jeKFaVhsrDjvhJ
P4L9r+3Zi71KH9l/G97WRS/B7DC/3sjpX+EsIHcxCwa3aw32Ip12cLBvL4nsKg/Ms8lTh9T0
zy5aYsCjzXiAm8jq00ehNdP7PSapeYiqAs1iwjg2mC8iFVVgCIyGoB9CANjAvOjpulBTwj+K
eMutPh4zr49bIcYDhGq9i6HR/ySGJMU7CKCC5aadjNu9ITJirqMuXAHnB9FzDa0ed9egIkXN
TFN/xncx6rafS7s2IJdlyReCCi4KwkJ8gYLUHT3gAHXmJv7KYpHfyQTxSGl68ZfsHW/Bblk2
J5qv5+yFgqTMreUlWGtU19+QXzE8TDX2trfIB3K8rB95cItexJP/LTzxM0dWbQ47idigf1aa
Tn5OT6nuSc61Nu7x1Wwuf/gn2qziNr+vJeU4iBVcSHmjoyJW3Cc6ebhIMk2E2HeGUHbKjy5m
nSZqwPV31jgz6i7MBAhaa9LTCdTcQLgGM+on98eZqJB+no6vGO8lzay7uWmAMhO6Gvc1r47G
wDz2snZVZG/8kbBrhWDHCmGLvq+UE4LEhYKzTH1wsouneD0w2i/tJj8SwlbhqhNR6VBPul3s
EZqOnG66O0lYpRCslc+c4iTxlrLeXgleQf5KbE2sKmEQskCzwli6lYbehFbQ2sRKR/2QzCgD
Zn80smsG/HI7aQPEUhKA9CEq08NYaCNFxNALH4TOelKZhvm9tkXvBDJ8+RBXzcw2VbU+33/z
9bEuNn88FDa0+DD8ccMNPS6iNtx/t7KMQytRQeB8db7soFFoTVs2kpA+CgSsVCF6rHYD0Pok
65syuekE4/tokiGhcAwK22e7pK0D2/pWgRFZf6oyNPddBOqdWH7Uhlz/ziYVr6U+0asV2pMx
ypg7JxrFlxKS5bkJDb/vNpiuNSHqdTwPh9WBJC17cYOp+FOgSgqsdORHwd889nXUMgakbHlx
ZEAkeFkSf7xh+ywRwk0MFxsU7va8mdzfQKASLgvEPQDpaCWU7MlMYg1kYq3jIOMnUZqc69xM
wHk25NC7lnIgJIePwBACILHE2YJxlo/k6E7k0pKbqLS6to5YBE9rXQ+eaGD0BWp4la61+2l6
j/c=
/


--
-- PRO_PENSION_COMMUTATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_pension_commutation (
   P_PGID              IN     INS_P_PROPOSAL.PGID%TYPE,
   P_OFFICE_CD         IN     HRM_OFFICE.OFFICE_CD%TYPE,
   P_DESCENDANT_FLAG   IN     VARCHAR2,
   P_START_DT          IN     DATE,
   P_END_DT            IN     DATE,
   P_IUSER             IN     VARCHAR2,
   P_PROCESS_CNT          OUT NUMBER,
   P_ERROR                OUT VARCHAR2
)
IS
   V_TOT_PAID             NUMBER (15, 2) := 0;
   V_PAID_PENSION         NUMBER (15, 2) := 0;
   V_PAID_COMMUTATION     NUMBER (15, 2) := 0;
   V_COMMUTATION_AMT      NUMBER (15, 2) := 0;
   V_PAYABLE_AMT          NUMBER (15, 2) := 0;
   V_SUSPENSE_AMT         NUMBER (15, 2) := 0;
   V_DED_LATE_FEE         NUMBER (15, 2) := 0;
   V_LATE_FEE             NUMBER (15, 2) := 0;
   V_TOT_LATE_FEE         NUMBER (15, 2) := 0;
   V_INSTL_AMT            NUMBER (15, 2) := 0;
   V_TOT_PREMIUM_AMT      NUMBER (15, 2) := 0;
   V_NET_ANF_PAID_AMT     NUMBER (15, 2) := 0;
   V_ADJUSTABLE_AMT       NUMBER (15, 2) := 0;
   V_APP_SL               NUMBER (2) := 0;
   V_OFFICE_CD            HRM_OFFICE.OFFICE_CD%TYPE;
   V_LOAN_NO              POL_LOAN_SUMMARY.LOAN_NO%TYPE;
   V_LOAN_AMT             NUMBER (12, 2);
   V_INTEREST_AMT         NUMBER (12, 2);
   V_ERROR                VARCHAR2 (2000);
   V_ANF_ERROR            VARCHAR2 (2000);

   V_LOAN_SL_NO           NUMBER;
   V_DUE_INTEREST_AMT     NUMBER;
   V_DUE_PRINCIPLE_AMT    NUMBER;
   V_SETT_INTEREST_AMT    NUMBER (10, 2);
   V_INSTALLMENT_NO       NUMBER (3);
   V_SCHEDULE_TYPE        CHAR (1);
   V_OUTPUT               VARCHAR2 (200);
   V_DED_AMT              NUMBER (10, 2);
   V_LOAN_COUNT           NUMBER (3);
   ERR_DUE_LOAN_NOT_FOUND EXCEPTION;

   V_PAIDUP_FACTOR        NUMBER (15, 5) := 0;
   V_PAIDUP_PENSION       NUMBER (15, 2) := 0;
   V_POLICY_AGE           NUMBER (5, 2) := 0;
   V_WEIGHTED_AGE         NUMBER (5, 2) := 0;
   V_PAIDUP_FACTOR_L      NUMBER (15, 5) := 0;
   V_PAIDUP_FACTOR_U      NUMBER (15, 5) := 0;
   V_MONTH_DIFF           NUMBER (5) := 0;
   V_NO_OF_ANF_INSTL      NUMBER (5) := 0;
   V_PAIDUP_SUM_ASSURED   NUMBER (15, 2) := 0;
   V_RUNNING_AGE_MONTH    NUMBER (5) := 0;

   V_BANK_ACC_NO          CLM_COMMUTATION_INFO.BANK_ACC_NO%TYPE;
   V_BANK_CD              CLM_COMMUTATION_INFO.BANK_CD%TYPE;
   V_BRANCH_CD            CLM_COMMUTATION_INFO.BRANCH_CD%TYPE;

   CURSOR CUR_COMMUT_POLICY
   IS
      SELECT   A.PGID,
               A.APP_SL,
               A.COMMUTATION_PCT,
               S.SUM_ASSURED,
               S.MATURITY_DATE,
               S.PRODUCT_CD,
               ROUND (S.AGE + (S.MATURITY_DATE - S.COMM_DATE) / 365) AGE,
               S.LAST_PAID_INST_NO / (S.POLICY_INSTALLMENT / S.TERM)
                  POLICY_AGE,
               S.AGE
               + (S.LAST_PAID_INST_NO / (S.POLICY_INSTALLMENT / S.TERM))
                  WEIGHTED_AGE,
               S.PAY_MODE_CD,
               S.AGE AGE_ENTRY,
               S.AGE + S.TERM AGE_MATURITY,
               S.LAST_PAID_INST_NO,
               S.POLICY_STATUS,
               S.TERM,
               A.APP_PARTY_CD
        FROM   CLM_APP_COMMUTATION A, INS_P_SUMMERY S
       WHERE       A.PGID = S.PGID
               AND NVL (A.APPROVE_FLAG, 'N') = 'Y'
               AND A.PGID = NVL (P_PGID, A.PGID)
               AND A.APP_DATE BETWEEN P_START_DT AND P_END_DT
               AND ( (NVL (P_DESCENDANT_FLAG, 'N') = 'N'
                      AND S.SERVICING_OFF =
                            NVL (P_OFFICE_CD, S.SERVICING_OFF))
                    OR (NVL (P_DESCENDANT_FLAG, 'N') = 'Y'
                        AND S.SERVICING_OFF IN
                                 (    SELECT   O.OFFICE_CD
                                        FROM   HRM_OFFICE_SETUP O
                                  START WITH   O.OFFICE_CD = P_OFFICE_CD
                                  CONNECT BY   PRIOR O.OFFICE_CD =
                                                  O.CONTROL_OFFICE_CD)))
               AND NOT EXISTS
                     (SELECT   1
                        FROM   CLM_COMMUTATION_INFO C
                       WHERE   C.PGID = A.PGID AND C.APP_SL = A.APP_SL);


   CURSOR CUR_COMMUT_VALUE (
      P_AGE                             NUMBER,
      P_COMMUTATION_PCT                 NUMBER,
      P_PRODUCT_CD                      INS_PRODUCT.PRODUCT_CD%TYPE,
      P_PCT_LEVEL                       NUMBER
   )
   IS
      SELECT   V.PRODUCT_CD,
               V.FRM_AGE_AT_MATURITY,
               V.TO_AGE_AT_MATURITY,
               V.PCT_LEVEL,
               V.COMMUTATION_PCT,
               V.COMMUTATION_VALUE
        FROM   CLM_COMMUTATION_VALUE V
       WHERE   NVL (V.STATUS, '0') = '1'
               AND P_AGE BETWEEN V.FRM_AGE_AT_MATURITY
                             AND  V.TO_AGE_AT_MATURITY
               AND V.COMMUTATION_PCT = P_COMMUTATION_PCT
               AND V.PRODUCT_CD = P_PRODUCT_CD
               AND V.PCT_LEVEL = P_PCT_LEVEL;

   CURSOR ANF_PREMIUM (
      P_COMMUT_PGID                 INS_P_PROPOSAL.PGID%TYPE
   )
   IS
      SELECT   D.SL_NO,
               D.PGID,
               D.LOAN_NO,
               D.INSTALLMENT_PREMIUM ANF_INSTL_AMT,
               D.INTEREST_AMOUNT LATE_FEE,
               NVL (D.INSTALLMENT_PREMIUM, 0) + NVL (D.INTEREST_AMOUNT, 0)
                  NET_ANF_PAID_AMT,
               D.NEXT_DUE_DATE
        FROM   INS_ANF_LOAN_DTL D
       WHERE   D.PGID = P_PGID AND NVL (D.ADJUST_FLAG, 0) = 0;
BEGIN
   P_PROCESS_CNT := 0;

   FOR I IN CUR_COMMUT_POLICY
   LOOP
      SELECT   NVL (SUM (C.COMMUTATION_AMT), 0)
        INTO   V_PAID_COMMUTATION
        FROM   CLM_COMMUTATION_INFO C
       WHERE   C.PGID = I.PGID;


      SELECT   NVL (SUM (P.NET_PAYABLE_AMT), 0)
        INTO   V_PAID_PENSION
        FROM   CLM_CLAIM_PAYABLE_GEN P
       WHERE   P.PGID = I.PGID;


      V_TOT_PAID := V_PAID_COMMUTATION + V_PAID_PENSION;



      IF I.POLICY_STATUS = '03'
         OR (I.POLICY_STATUS = '01'
             AND I.MATURITY_DATE <= TRUNC (ADD_MONTHS (SYSDATE, 1)))
      THEN
         PRO_ANF_LOAN_ISSUE (P_PGID         => P_PGID,
                             P_CAL_DT       => I.MATURITY_DATE,
                             P_CLAIM_TYPE   => NULL,
                             P_IUSER        => P_IUSER,
                             P_ERROR        => V_ANF_ERROR);



         BEGIN
            SELECT   COUNT (L.PGID) NO_OF_ANF_INSTL
              INTO   V_NO_OF_ANF_INSTL
              FROM   INS_ANF_LOAN_DTL L
             WHERE   L.PGID = P_PGID AND NVL (L.ADJUST_FLAG, '0') = 0;

            IF I.PAY_MODE_CD = '01'
            THEN
               V_POLICY_AGE := I.POLICY_AGE + NVL (V_NO_OF_ANF_INSTL, 0) / 1;
               V_WEIGHTED_AGE :=
                  I.WEIGHTED_AGE + NVL (V_NO_OF_ANF_INSTL, 0) / 1;
            ELSIF I.PAY_MODE_CD = '02'
            THEN
               V_POLICY_AGE := I.POLICY_AGE + NVL (V_NO_OF_ANF_INSTL, 0) / 2;
               V_WEIGHTED_AGE :=
                  I.WEIGHTED_AGE + NVL (V_NO_OF_ANF_INSTL, 0) / 2;
            ELSIF I.PAY_MODE_CD = '03'
            THEN
               V_POLICY_AGE := I.POLICY_AGE + NVL (V_NO_OF_ANF_INSTL, 0) / 4;
               V_WEIGHTED_AGE :=
                  I.WEIGHTED_AGE + NVL (V_NO_OF_ANF_INSTL, 0) / 4;
            ELSIF I.PAY_MODE_CD = '04'
            THEN
               V_POLICY_AGE := I.POLICY_AGE + NVL (V_NO_OF_ANF_INSTL, 0) / 12;
               V_WEIGHTED_AGE :=
                  I.WEIGHTED_AGE + NVL (V_NO_OF_ANF_INSTL, 0) / 12;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;



         BEGIN
            SELECT   DECODE (
                        I.PAY_MODE_CD,
                        '01',
                        (I.LAST_PAID_INST_NO + NVL (V_NO_OF_ANF_INSTL, 0))
                        * 12,
                        '02',
                        (I.LAST_PAID_INST_NO + NVL (V_NO_OF_ANF_INSTL, 0))
                        * 6,
                        '03',
                        (I.LAST_PAID_INST_NO + NVL (V_NO_OF_ANF_INSTL, 0))
                        * 4,
                        (I.LAST_PAID_INST_NO + NVL (V_NO_OF_ANF_INSTL, 0))
                     )
              INTO   V_RUNNING_AGE_MONTH
              FROM   DUAL;

            SELECT   F.PAIDUP_FACTOR / F.CAL_PARA PAIDUP_FACTOR
              INTO   V_PAIDUP_FACTOR
              FROM   SUR_PAIDUP_FACTOR F
             WHERE   F.PRODUCT_CD = I.PRODUCT_CD AND F.POLICY_TERM = I.TERM
                     AND F.RUNNING_AGE =
                           DECODE (F.RUNNING_AGE_TYPE,
                                   '1', ROUND (V_RUNNING_AGE_MONTH / 12),
                                   '2', V_RUNNING_AGE_MONTH,
                                   '3', V_RUNNING_AGE_MONTH * 30,
                                   0);
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               V_PAIDUP_FACTOR := 0;
            WHEN OTHERS
            THEN
               NULL;
         END;

         V_PAIDUP_PENSION := ROUND (I.SUM_ASSURED * V_PAIDUP_FACTOR, 2);
         V_PAIDUP_SUM_ASSURED := ROUND (V_PAIDUP_PENSION);
      END IF;



      FOR J IN CUR_COMMUT_VALUE (I.AGE,
                                 50,
                                 I.PRODUCT_CD,
                                 1)
      LOOP
         IF I.AGE >= J.FRM_AGE_AT_MATURITY AND I.AGE <= J.TO_AGE_AT_MATURITY
         THEN
            IF I.COMMUTATION_PCT = 50
            THEN
               IF I.POLICY_STATUS = '08'
                  OR (I.POLICY_STATUS IN ('07', '09')
                      AND I.MATURITY_DATE <= TRUNC (ADD_MONTHS (SYSDATE, 1)))
               THEN
                  V_COMMUTATION_AMT := I.SUM_ASSURED * J.COMMUTATION_VALUE;
               ELSIF I.POLICY_STATUS = '03' OR (I.POLICY_STATUS = '01' AND I.MATURITY_DATE <= TRUNC(ADD_MONTHS (SYSDATE, 1)))
               THEN
                  V_COMMUTATION_AMT :=
                     V_PAIDUP_SUM_ASSURED * J.COMMUTATION_VALUE;
               END IF;
            ELSIF I.COMMUTATION_PCT = 100
            THEN
               IF I.POLICY_STATUS = '08'
                  OR (I.POLICY_STATUS IN ('07', '09')
                      AND I.MATURITY_DATE <= TRUNC (ADD_MONTHS (SYSDATE, 1)))
               THEN
                  V_COMMUTATION_AMT := I.SUM_ASSURED * J.COMMUTATION_VALUE;
               ELSIF I.POLICY_STATUS = '03' OR (I.POLICY_STATUS = '01' AND I.MATURITY_DATE <= TRUNC(ADD_MONTHS (SYSDATE, 1)))
               THEN
             V_COMMUTATION_AMT :=
                     V_PAIDUP_SUM_ASSURED * J.COMMUTATION_VALUE;  -- This part is stopped for error reason
                /*  V_COMMUTATION_AMT :=
                     ROUND (
                          I.SUM_ASSURED
                        * 12
                        * V_PAIDUP_FACTOR
                        * ROUND (I.POLICY_AGE, 2),
                        2
                     )*/ 
               END IF;
            END IF;
         END IF;


         BEGIN
            SELECT   S.SUSPENSE_AMT
              INTO   V_SUSPENSE_AMT
              FROM   INS_P_SUMMERY S
             WHERE   S.PGID = I.PGID
                     AND NOT EXISTS
                           (SELECT   1
                              FROM   CLM_COMMUTATION_INFO G
                             WHERE   NVL (G.SUSPENSE_AMT, 0) > 0
                                     AND G.PGID = S.PGID);
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;


         V_PAYABLE_AMT := NVL (V_COMMUTATION_AMT, 0) /*+ NVL (v_suspense_amt, 0)*/
                          - NVL (V_TOT_PAID, 0);


         IF V_PAYABLE_AMT > 0
         THEN
            V_ADJUSTABLE_AMT := V_PAYABLE_AMT;



            IF I.POLICY_STATUS = '08'
               OR (I.POLICY_STATUS = '09'
                   AND I.MATURITY_DATE <= TRUNC (ADD_MONTHS (SYSDATE, 1)))
            THEN
               PRO_ANF_LOAN_ISSUE (P_PGID         => I.PGID,
                                   P_CAL_DT       => I.MATURITY_DATE,
                                   P_CLAIM_TYPE   => NULL,
                                   P_IUSER        => P_IUSER,
                                   P_ERROR        => V_ANF_ERROR);
            END IF;



            FOR K IN ANF_PREMIUM (I.PGID)
            LOOP
               V_INSTL_AMT := K.ANF_INSTL_AMT;
               V_DED_LATE_FEE := K.LATE_FEE;



               IF V_ADJUSTABLE_AMT >= V_DED_LATE_FEE
               THEN
                  V_ADJUSTABLE_AMT := V_ADJUSTABLE_AMT - V_DED_LATE_FEE;
               ELSE
                  V_DED_LATE_FEE := V_ADJUSTABLE_AMT;
                  V_ADJUSTABLE_AMT := 0;
               END IF;

               IF V_ADJUSTABLE_AMT >= V_INSTL_AMT
               THEN
                  V_ADJUSTABLE_AMT := V_ADJUSTABLE_AMT - V_INSTL_AMT;
               ELSE
                  V_INSTL_AMT := V_ADJUSTABLE_AMT;
                  V_ADJUSTABLE_AMT := 0;
               END IF;

               UPDATE   INS_ANF_LOAN_DTL
                  SET   ADJUST_FLAG = '1', ADJUST_DATE = TRUNC (SYSDATE)
                WHERE       LOAN_NO = K.LOAN_NO
                        AND PGID = K.PGID
                        AND NEXT_DUE_DATE = K.NEXT_DUE_DATE;

               V_TOT_PREMIUM_AMT := NVL (V_TOT_PREMIUM_AMT, 0) + V_INSTL_AMT;
               V_TOT_LATE_FEE := NVL (V_TOT_LATE_FEE, 0) + V_DED_LATE_FEE;

               IF V_ADJUSTABLE_AMT <= 0
               THEN
                  EXIT;
               END IF;
            END LOOP;



            BEGIN
               SELECT   E.OFFICE_CD
                 INTO   V_OFFICE_CD
                 FROM   SECURITY.SEC_USER_INFO E
                WHERE   UPPER (E.USER_NM) = UPPER (P_IUSER);
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_OFFICE_CD := '9002';
            END;


            BEGIN
               SELECT   S.SL_NO, S.LOAN_NO
                 INTO   V_LOAN_SL_NO, V_LOAN_NO
                 FROM   POL_LOAN_SUMMARY S, POL_LOAN_SCHEDULE_MST M
                WHERE       S.PGID = P_PGID
                        AND S.LOAN_STATUS = '1'
                        AND S.PGID = M.PGID
                        AND S.SL_NO = M.SL_NO;


               SELECT   COUNT (1)
                 INTO   V_LOAN_COUNT
                 FROM   POL_LOAN_SCHEDULE_DTL
                WHERE       PGID = I.PGID
                        AND SL_NO = V_LOAN_SL_NO
                        AND PAYMENT_STATUS = '0'
                        AND ADD_MONTHS (INSTALLMENT_DATE, -6) <=
                              TRUNC (SYSDATE);

               IF NVL (V_LOAN_COUNT, 0) > 0
               THEN
                  PRO_LOAN_INT_AMOUNT (
                     P_PGID               => I.PGID,
                     P_SL_NO              => V_LOAN_SL_NO,
                     P_INT_CAL_DATE       => TRUNC (SYSDATE),
                     P_CALL_FROM          => '3',
                     P_PRINCIPLE_AMOUNT   => V_DUE_PRINCIPLE_AMT,
                     P_CUR_INT_AMOUNT     => V_DUE_INTEREST_AMT,
                     P_SETT_INT_AMOUNT    => V_SETT_INTEREST_AMT,
                     P_INSTALLMENT_NO     => V_INSTALLMENT_NO,
                     P_PROCESS_ST         => V_OUTPUT
                  );

                  IF V_OUTPUT = 'success'
                  THEN
                     V_DED_AMT := V_PAYABLE_AMT;

                     IF V_DED_AMT >= NVL (V_DUE_INTEREST_AMT, 0)
                     THEN
                        V_INTEREST_AMT := NVL (V_DUE_INTEREST_AMT, 0);
                        V_DED_AMT := V_DED_AMT - NVL (V_DUE_INTEREST_AMT, 0);
                     ELSE
                        V_INTEREST_AMT := V_DED_AMT;
                        V_DED_AMT := 0;
                     END IF;

                     IF NVL (V_DED_AMT, 0) > 0
                        AND V_DED_AMT >= NVL (V_DUE_PRINCIPLE_AMT, 0)
                     THEN
                        V_LOAN_AMT := V_DUE_PRINCIPLE_AMT;
                        V_DED_AMT := V_DED_AMT - NVL (V_DUE_PRINCIPLE_AMT, 0);
                     ELSE
                        V_LOAN_AMT := V_DED_AMT;
                        V_DED_AMT := 0;
                     END IF;
                  ELSE
                     V_LOAN_AMT := 0;
                     V_INTEREST_AMT := 0;
                  END IF;
               END IF;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  NULL;
               WHEN OTHERS
               THEN
                  RAISE ERR_DUE_LOAN_NOT_FOUND;
            END;



            BEGIN
               SELECT   L.ACCOUNT_NO, L.BANK_CD, L.BR_CD
                 INTO   V_BANK_ACC_NO, V_BANK_CD, V_BRANCH_CD
                 FROM   CLM_CLIENT_ACCOUNT L
                WHERE   L.PGID = I.PGID AND L.PARTY_CD = I.APP_PARTY_CD;
            EXCEPTION
               WHEN OTHERS
               THEN
                  V_BANK_ACC_NO := NULL;
                  V_BANK_CD := NULL;
                  V_BRANCH_CD := NULL;
            END;

            INSERT INTO CLM_COMMUTATION_INFO (PGID,
                                              APP_SL,
                                              PRODUCT_CD,
                                              COMMUTATION_DT,
                                              COMMUTATION_PCT,
                                              COMMUTATION_VALUE,
                                              COMMUTATION_AMT,
                                              LOAN_NO,
                                              LOAN_DED_AMT,
                                              LOAN_INTEREST,
                                              ANF_PREMIUM_AMT,
                                              ANF_LATE_FEE,
                                              SUSPENSE_AMT,
                                              APPROVE_FLAG,
                                              APPROVE_BY,
                                              APPROVE_DT,
                                              PAYMENT_STATUS,
                                              VOUCHER_DT,
                                              VOUCHER_NO,
                                              I_USR,
                                              I_DT,
                                              BANK_ACC_NO,
                                              BANK_CD,
                                              BRANCH_CD)
              VALUES   (I.PGID,
                        I.APP_SL,
                        I.PRODUCT_CD,
                        TRUNC (SYSDATE),
                        I.COMMUTATION_PCT,
                        J.COMMUTATION_VALUE,
                        V_PAYABLE_AMT,
                        V_LOAN_NO,
                        V_LOAN_AMT,
                        V_INTEREST_AMT,
                        V_TOT_PREMIUM_AMT,
                        V_TOT_LATE_FEE,
                        V_SUSPENSE_AMT,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        P_IUSER,
                        SYSDATE,
                        V_BANK_ACC_NO,
                        V_BANK_CD,
                        V_BRANCH_CD);

            COMMIT;
            P_PROCESS_CNT := P_PROCESS_CNT + 1;
         END IF;
      END LOOP;
   END LOOP;
EXCEPTION
   WHEN ERR_DUE_LOAN_NOT_FOUND
   THEN
      P_ERROR :=
         'pro_pension_commutation: Error in loan recovery because of '
         || SQLERRM;
   WHEN OTHERS
   THEN
      P_ERROR := 'pro_pension_commutation ' || SQLERRM;
END PRO_PENSION_COMMUTATION;
/


--
-- PRO_POLICY_ALTERATION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_alteration (
   p_pgid         IN     ins_p_proposal.pgid%TYPE,
   p_user         IN     VARCHAR2,
   pa_object_cd   IN     VARCHAR2,
   p_error           OUT VARCHAR2
)
IS
   v_dnp_error                    VARCHAR2 (2000);
   v_dnp_rec                      NUMBER (5);
   v_alt_sl                       alt_policy_alt_app.alt_sl%TYPE;
   v_comm_dt                      DATE;
   v_dob                          DATE;
   v_accepted_life_std_class_cd   alt_uw_accpt_gen.accepted_life_std_class_cd%TYPE;
   v_product_cd                   ins_product.product_cd%TYPE;
   v_sum_assurerd                 ins_p_summery.sum_assured%TYPE;
   v_term                         alt_uw_accpt_gen.term%TYPE;
   v_option_cd                    alt_uw_accpt_gen.option_cd%TYPE;
   v_pay_mode_cd                  alt_uw_accpt_gen.pay_mode_cd%TYPE;
   v_yearly_premium               alt_uw_accpt_gen.yearly_premium%TYPE;
   v_installment_premium          alt_uw_accpt_gen.installment_premium%TYPE;
   v_age                          alt_uw_accpt_gen.age%TYPE;
   v_staff_rebate                 alt_uw_accpt_gen.staff_rebate%TYPE;
   v_approve_life_class_extra     alt_uw_accpt_gen.approve_life_class_extra%TYPE;
   v_yrly_no_inst                 NUMBER (2);
   v_maturity_date                DATE;
   v_last_paid_inst_no            NUMBER (3);
   v_last_paid_date               DATE;
   v_next_due_inst_no             NUMBER (3);
   v_next_due_date                DATE;
   v_policy_group                 ins_policy_type.policy_tp_cd%TYPE;
   v_product_cal_para             ins_product.cal_para%TYPE;
   v_product_rate                 ins_product_defn.rate%TYPE;
   v_life_premium                 ins_p_summery.life_premium%TYPE;
   v_extra_premium                ins_p_summery.extra_premium%TYPE;
   v_expected_premium             ins_p_summery.installment_premium%TYPE;
   v_suppl_product_premium        ins_p_summery.suppl_product_premium%TYPE;
   v_suppl_ben_premium            ins_p_summery.suppl_ben_premium%TYPE;
   -------------------------------------------------
   v_coll_sl                      acc_alt_receivables.coll_sl%TYPE;
   v_receive_id                   acc_receivables.receive_id%TYPE;
   v_alt_coll_amt                 NUMBER (12, 2);
   v_due_prem_coll_amt            NUMBER (12, 2);
   v_par_instl_no_from            NUMBER (3);
   v_par_instl_no_to              NUMBER (3);
   v_par_due_dt_from              DATE;
   v_par_due_dt_to                DATE;
   v_par_prem_due_amt             NUMBER (12, 2);
   v_due_instl_no_from            NUMBER (3);
   v_due_instl_no_to              NUMBER (3);
   v_due_dt_from                  DATE;
   v_due_dt_to                    DATE;
   v_tot_prem_amt                 NUMBER (12, 2);
   v_late_fee                     NUMBER (12, 2);
   v_latefee_waiver               NUMBER (12, 2);
   v_avl_sus_amt                  NUMBER (12, 2);
   v_actual_req_amt               NUMBER (12, 2);
   v_prev_coll_amt                NUMBER (12, 2);
   v_net_req_amt                  NUMBER (12, 2);
   v_pro_error                    VARCHAR2 (500);
   v_adj_errm                     VARCHAR2 (500);
   v_test_var                     VARCHAR2 (500);
   v_valid_record_count           NUMBER (3);
   v_rebate_extra_inst_amt        NUMBER (12, 2);
   v_prev_last_paid_date          DATE;
   v_pol_off_cd                   VARCHAR2 (20);
   v_instl_prem                   NUMBER (12, 2);
   v_min_due_dt                   DATE;
   v_min_due_instl_no             NUMBER;
BEGIN
   --Finding Alteration General Info--
   SELECT   u.alt_sl,
            u.comm_dt,
            u.accepted_life_std_class_cd,
            u.product_cd,
            u.sum_assurerd,
            u.term,
            u.option_cd,
            u.pay_mode_cd,
            u.yearly_premium,
            u.installment_premium,
            u.age,
            u.staff_rebate,
            u.approve_life_class_extra,
            u.life_premium,
            u.extra_premium,
            DECODE (u.pay_mode_cd, '01', 1, '02', 2, '03', 4, '04', 12, 0)
     INTO   v_alt_sl,
            v_comm_dt,
            v_accepted_life_std_class_cd,
            v_product_cd,
            v_sum_assurerd,
            v_term,
            v_option_cd,
            v_pay_mode_cd,
            v_yearly_premium,
            v_installment_premium,
            v_age,
            v_staff_rebate,
            v_approve_life_class_extra,
            v_life_premium,
            v_extra_premium,
            v_yrly_no_inst
     FROM   alt_uw_accpt_gen u
    WHERE   u.pgid = p_pgid AND u.alt_status = '0';

   --Get Alteration Collection Info--
   pro_alt_collection (p_pgid                => p_pgid,
                       p_coll_dt             => TRUNC (SYSDATE),
                       p_user                => p_user,
                       p_alt_sl              => v_alt_sl,
                       p_par_instl_no_from   => v_par_instl_no_from,
                       p_par_instl_no_to     => v_par_instl_no_to,
                       p_par_due_dt_from     => v_par_due_dt_from,
                       p_par_due_dt_to       => v_par_due_dt_to,
                       p_par_prem_due_amt    => v_par_prem_due_amt,
                       p_due_instl_no_from   => v_due_instl_no_from,
                       p_due_instl_no_to     => v_due_instl_no_to,
                       p_due_dt_from         => v_due_dt_from,
                       p_due_dt_to           => v_due_dt_to,
                       p_tot_prem_amt        => v_tot_prem_amt,
                       p_late_fee            => v_late_fee,
                       p_latefee_waiver      => v_latefee_waiver,
                       p_avl_sus_amt         => v_avl_sus_amt,
                       p_actual_req_amt      => v_actual_req_amt,
                       p_prev_coll_amt       => v_prev_coll_amt,
                       p_net_req_amt         => v_net_req_amt,
                       p_error               => v_pro_error);

   --Delete From All Master Table--
   DELETE FROM   ins_uw_lien
         WHERE   pgid = p_pgid;

   DELETE FROM   ins_premium
         WHERE   pgid = p_pgid;

   DELETE FROM   ins_uw_accpt_rebate_extra
         WHERE   pgid = p_pgid;

   DELETE FROM   ins_uw_accpt_supp_ben
         WHERE   pgid = p_pgid;

   DELETE FROM   ins_uw_accpt_supp_prd
         WHERE   pgid = p_pgid;

   DELETE FROM   ins_uw_accpt
         WHERE   pgid = p_pgid;

   DELETE FROM   ins_uw_accpt_gen
         WHERE   pgid = p_pgid;

   DELETE FROM   ins_p_basic
         WHERE   pgid = p_pgid;

   DELETE FROM   ins_p_supp_benefit
         WHERE   pgid = p_pgid;

   DELETE FROM   ins_p_supp_product
         WHERE   pgid = p_pgid;

   --End of Delete From All Master Table--

   --Prepare Master Data From Alteration Info--
   INSERT INTO ins_uw_accpt_gen (pgid,
                                 acceptence_type,
                                 assurance_type,
                                 product_cd,
                                 term,
                                 sum_assurerd,
                                 comm_dt,
                                 gender_extra,
                                 occu_extra,
                                 assessed_life_std_class_cd,
                                 accepted_life_std_class_cd,
                                 life_class_extra,
                                 suppl_ben_extra,
                                 suppl_prd_extra,
                                 other_extra,
                                 uw_cd,
                                 region,
                                 option_cd,
                                 objective_cd,
                                 pay_mode_cd,
                                 yearly_premium,
                                 installment_premium,
                                 age,
                                 staff_rebate,
                                 emp_id,
                                 desig_cd,
                                 office_cd,
                                 join_dt,
                                 policy_catg_cd,
                                 approve_life_class_extra,
                                 alter_policy,
                                 i_usr,
                                 i_dt)
      (SELECT   pgid,
                acceptence_type,
                assurance_type,
                product_cd,
                term,
                sum_assurerd,
                comm_dt,
                gender_extra,
                occu_extra,
                assessed_life_std_class_cd,
                accepted_life_std_class_cd,
                life_class_extra,
                suppl_ben_extra,
                suppl_prd_extra,
                other_extra,
                uw_cd,
                region,
                option_cd,
                objective_cd,
                pay_mode_cd,
                yearly_premium,
                installment_premium,
                age,
                staff_rebate,
                emp_id,
                desig_cd,
                office_cd,
                join_dt,
                policy_catg_cd,
                approve_life_class_extra,
                '1',
                i_usr,
                i_dt
         FROM   alt_uw_accpt_gen
        WHERE   pgid = p_pgid AND alt_sl = v_alt_sl);

   INSERT INTO ins_uw_accpt (pgid,
                             uw_cd,
                             acceptance_req,
                             max_sum_assured,
                             emp_gid,
                             db_usr_id,
                             divdept_cd,
                             desig_cd,
                             acceptance_flag,
                             accept_dt,
                             remarks,
                             individual_accpt_dt,
                             alter_policy,
                             i_usr,
                             i_dt)
      (SELECT   pgid,
                uw_cd,
                acceptance_req,
                max_sum_assured,
                emp_gid,
                db_usr_id,
                divdept_cd,
                desig_cd,
                acceptance_flag,
                accept_dt,
                remarks,
                individual_accpt_dt,
                '1',
                i_usr,
                i_dt
         FROM   alt_uw_accpt
        WHERE   pgid = p_pgid AND alt_sl = v_alt_sl);

   INSERT INTO ins_uw_accpt_supp_prd (pgid,
                                      supp_product_cd,
                                      supp_product_term,
                                      supp_amount,
                                      chart_acc_no,
                                      premium,
                                      installment_premium,
                                      alter_policy,
                                      i_usr,
                                      i_dt)
      (SELECT   pgid,
                supp_product_cd,
                supp_product_term,
                supp_amount,
                chart_acc_no,
                premium,
                installment_premium,
                '1',
                i_usr,
                i_dt
         FROM   alt_uw_accpt_supp_prd
        WHERE   pgid = p_pgid AND alt_sl = v_alt_sl);

   INSERT INTO ins_uw_accpt_supp_ben (pgid,
                                      supp_ben_cd,
                                      supp_ben_term,
                                      chart_acc_no,
                                      premium,
                                      installment_premium,
                                      alter_policy,
                                      i_usr,
                                      i_dt)
      (SELECT   pgid,
                supp_ben_cd,
                supp_ben_term,
                chart_acc_no,
                premium,
                installment_premium,
                '1',
                i_usr,
                i_dt
         FROM   ins_uw_accpt_supp_ben
        WHERE   pgid = p_pgid AND alt_sl = v_alt_sl);

   INSERT INTO ins_uw_accpt_rebate_extra (pgid,
                                          rebate_extra_cd,
                                          rebate_extra,
                                          rebate_extra_ref,
                                          rebate_extra_amt,
                                          rebate_extra_term,
                                          status,
                                          chart_acc_no,
                                          rebate_extra_inst_amt,
                                          alter_policy,
                                          i_usr,
                                          i_dt)
      (SELECT   pgid,
                rebate_extra_cd,
                rebate_extra,
                rebate_extra_ref,
                rebate_extra_amt,
                rebate_extra_term,
                status,
                chart_acc_no,
                rebate_extra_inst_amt,
                '1',
                i_usr,
                i_dt
         FROM   alt_uw_accpt_rebate_extra
        WHERE   pgid = p_pgid AND alt_sl = v_alt_sl);

   INSERT INTO ins_premium (pgid,
                            term_from,
                            term_to,
                            yrl_premium,
                            inst_premium,
                            i_usr,
                            i_dt)
      (SELECT   pgid,
                term_from,
                term_to,
                yrl_premium,
                inst_premium,
                i_usr,
                i_dt
         FROM   alt_premium
        WHERE   pgid = p_pgid AND alt_sl = v_alt_sl);

   INSERT INTO ins_uw_lien (pgid,
                            party_cd,
                            party_id,
                            lien_cd,
                            lien_nm,
                            lien_tp_cd,
                            lien_year_fr,
                            lien_year_to,
                            lien_percentage,
                            alter_policy,
                            i_usr,
                            i_dt)
      (SELECT   pgid,
                party_cd,
                party_id,
                lien_cd,
                lien_nm,
                lien_tp_cd,
                lien_year_fr,
                lien_year_to,
                lien_percentage,
                '1',
                i_usr,
                i_dt
         FROM   alt_uw_lien
        WHERE   pgid = p_pgid AND alt_sl = v_alt_sl);

   INSERT INTO ins_p_basic (pgid,
                            region,
                            product_cd,
                            age,
                            term,
                            pay_mode_cd,
                            option_cd,
                            objective_cd,
                            expected_premium,
                            installment_premium,
                            gender_extra,
                            occupational_extra,
                            sum_assured,
                            staff_rebate,
                            emp_id,
                            desig_cd,
                            office_cd,
                            join_dt,
                            i_usr,
                            i_dt)
      (SELECT   pgid,
                region,
                product_cd,
                age,
                term,
                pay_mode_cd,
                option_cd,
                objective_cd,
                yearly_premium,
                installment_premium,
                gender_extra,
                occu_extra,
                sum_assurerd,
                staff_rebate,
                emp_id,
                desig_cd,
                office_cd,
                join_dt,
                i_usr,
                i_dt
         FROM   alt_uw_accpt_gen
        WHERE   pgid = p_pgid AND alt_sl = v_alt_sl);

   INSERT INTO ins_p_supp_benefit (pgid,
                                   supp_ben_cd,
                                   supp_ben_term,
                                   chart_acc_no,
                                   premium,
                                   installment_premium,
                                   i_usr,
                                   i_dt)
      (SELECT   pgid,
                supp_ben_cd,
                supp_ben_term,
                chart_acc_no,
                premium,
                installment_premium,
                i_usr,
                i_dt
         FROM   ins_uw_accpt_supp_ben
        WHERE   pgid = p_pgid AND alt_sl = v_alt_sl);

   INSERT INTO ins_p_supp_product (pgid,
                                   supp_product_cd,
                                   supp_product_term,
                                   supp_amount,
                                   chart_acc_no,
                                   premium,
                                   installment_premium,
                                   i_usr,
                                   i_dt)
      (SELECT   pgid,
                supp_product_cd,
                supp_product_term,
                supp_amount,
                chart_acc_no,
                premium,
                installment_premium,
                i_usr,
                i_dt
         FROM   alt_uw_accpt_supp_prd
        WHERE   pgid = p_pgid AND alt_sl = v_alt_sl);

   --End of Prepare Master Data From Alteration Info--

   --Keep Current Summery Info In History Table--
   INSERT INTO ins_p_summery_history (pgid,
                                      proposal_date,
                                      comm_date,
                                      risk_date,
                                      fpr_no,
                                      dob,
                                      age,
                                      age_docu_cd,
                                      sex_cd,
                                      option_cd,
                                      sum_assured,
                                      product_cd,
                                      term,
                                      pay_mode_cd,
                                      policy_installment,
                                      life_premium,
                                      suppl_ben_premium,
                                      suppl_product_premium,
                                      pay_mode_rebate,
                                      staff_rebate,
                                      sum_rebate,
                                      total_yearly_premium,
                                      installment_premium,
                                      maturity_date,
                                      zone_cd,
                                      agent_id,
                                      cession_no,
                                      last_paid_inst_no,
                                      last_paid_date,
                                      next_due_inst_no,
                                      next_due_date,
                                      policy_status,
                                      apparal_state_cd,
                                      ownership_cd,
                                      i_usr,
                                      i_dt,
                                      u_usr,
                                      u_dt,
                                      emp_gid,
                                      suspense_amt,
                                      cession_dt,
                                      office_cd,
                                      fpr_issue_invalid,
                                      policy_status_dt,
                                      paid_up_dt,
                                      paid_up_status,
                                      gender_extra_amt,
                                      occu_extra_amt,
                                      life_class_extra_amt,
                                      accepted_life_std_class_cd,
                                      extra_premium,
                                      do_gid,
                                      do_office_cd,
                                      dm_gid,
                                      re_ins_amount,
                                      last_adjustment_dt,
                                      fpr_issue,
                                      branch_off,
                                      sales_off,
                                      zonal_off,
                                      regional_off,
                                      servicing_off,
                                      policy_catg_cd,
                                      remarks_id,
                                      action_usr,
                                      action_dt)
      (SELECT   pgid,
                proposal_date,
                comm_date,
                risk_date,
                fpr_no,
                dob,
                age,
                age_docu_cd,
                sex_cd,
                option_cd,
                sum_assured,
                product_cd,
                term,
                pay_mode_cd,
                policy_installment,
                life_premium,
                suppl_ben_premium,
                suppl_product_premium,
                pay_mode_rebate,
                staff_rebate,
                sum_rebate,
                total_yearly_premium,
                installment_premium,
                maturity_date,
                zone_cd,
                agent_id,
                cession_no,
                last_paid_inst_no,
                last_paid_date,
                next_due_inst_no,
                next_due_date,
                policy_status,
                apparal_state_cd,
                ownership_cd,
                i_usr,
                i_dt,
                u_usr,
                u_dt,
                emp_gid,
                suspense_amt,
                cession_dt,
                office_cd,
                fpr_issue_invalid,
                policy_status_dt,
                paid_up_dt,
                paid_up_status,
                gender_extra_amt,
                occu_extra_amt,
                life_class_extra_amt,
                accepted_life_std_class_cd,
                extra_premium,
                do_gid,
                do_office_cd,
                dm_gid,
                re_ins_amount,
                last_adjustment_dt,
                fpr_issue,
                branch_off,
                sales_off,
                zonal_off,
                regional_off,
                servicing_off,
                policy_catg_cd,
                '01',
                p_user,
                SYSDATE
         FROM   ins_p_summery
        WHERE   pgid = p_pgid);

   --Update Summery Information--
   IF v_product_cd IN ('11', '12')
   THEN
      SELECT   ADD_MONTHS (s.dob, (s.age + s.term) * 12)
        INTO   v_maturity_date
        FROM   ins_p_summery s
       WHERE   s.pgid = p_pgid;
   ELSE
      v_maturity_date := ADD_MONTHS (v_comm_dt, (v_term * 12));
   END IF;

   /*IF NVL (v_due_instl_no_to, 0) > 0
   THEN
      v_last_paid_inst_no                  := v_due_instl_no_to;
      v_last_paid_date                     := v_due_dt_to;
      v_next_due_inst_no                   := v_last_paid_inst_no + 1;
      v_next_due_date                      :=
         CASE
            WHEN v_pay_mode_cd = '01'
               THEN ADD_MONTHS (v_last_paid_date, 12)
            WHEN v_pay_mode_cd = '02'
               THEN ADD_MONTHS (v_last_paid_date, 6)
            WHEN v_pay_mode_cd = '03'
               THEN ADD_MONTHS (v_last_paid_date, 4)
            WHEN v_pay_mode_cd = '04'
               THEN ADD_MONTHS (v_last_paid_date, 1)
            ELSE NULL
         END;
   ELSE*/
   v_last_paid_inst_no := NVL (v_due_instl_no_to, v_par_instl_no_to);
   v_last_paid_date := NVL (v_due_dt_to, v_par_due_dt_to);
   v_next_due_inst_no := v_last_paid_inst_no + 1;
   v_next_due_date :=
      CASE
         WHEN v_pay_mode_cd = '01' THEN ADD_MONTHS (v_last_paid_date, 12)
         WHEN v_pay_mode_cd = '02' THEN ADD_MONTHS (v_last_paid_date, 6)
         WHEN v_pay_mode_cd = '03' THEN ADD_MONTHS (v_last_paid_date, 4)
         WHEN v_pay_mode_cd = '04' THEN ADD_MONTHS (v_last_paid_date, 1)
         ELSE NULL
      END;

   --END IF;
   /*SELECT po.policy_group
         ,p.cal_para
     INTO v_policy_group
         ,v_product_cal_para
     FROM ins_product p
         ,ins_policy_type po
    WHERE p.policy_tp_cd = po.policy_tp_cd
      AND p.product_cd = v_product_cd;

   SELECT rate
     INTO v_product_rate
     FROM ins_product_defn
    WHERE product_cd = v_product_cd
      AND age = v_age
      AND term = v_term;

   IF v_policy_group = '06'
   THEN
      v_life_premium                       :=
         TRUNC (  ((v_sum_assurerd * v_product_rate) / v_product_cal_para)
                / v_yrly_no_inst);
   ELSE
      v_expected_premium                   :=
               ROUND ((v_sum_assurerd * v_product_rate) / v_product_cal_para);
      v_life_premium                       :=
                                          v_expected_premium / v_yrly_no_inst;
   END IF;

   SELECT NVL (SUM (rebate_extra_inst_amt), 0)
     INTO v_rebate_extra_inst_amt
     FROM alt_uw_accpt_rebate_extra
    WHERE pgid = p_pgid
      AND alt_sl = v_alt_sl;

   v_life_premium                       :=
                                      v_life_premium - v_rebate_extra_inst_amt;*/
   SELECT   NVL (SUM (installment_premium), 0)
     INTO   v_suppl_product_premium
     FROM   alt_uw_accpt_supp_prd
    WHERE   pgid = p_pgid AND alt_sl = v_alt_sl;

   SELECT   NVL (SUM (installment_premium), 0)
     INTO   v_suppl_ben_premium
     FROM   alt_uw_accpt_supp_ben
    WHERE   pgid = p_pgid AND alt_sl = v_alt_sl;

   UPDATE   ins_p_summery
      SET   comm_date = v_comm_dt,
            risk_date = v_comm_dt,
            dob = nvl(v_dob,dob),    -- This part is changed by Alamgir Hossain for date of birth validity
            age = v_age,
            option_cd = v_option_cd,
            sum_assured = v_sum_assurerd,
            product_cd = v_product_cd,
            term = v_term,
            pay_mode_cd = v_pay_mode_cd,
            policy_installment =
               DECODE (v_pay_mode_cd,
                       '01', v_term,
                       '02', v_term * 2,
                       '03', v_term * 4,
                       '04', v_term * 12,
                       0),
            life_premium = v_life_premium,
            extra_premium = v_extra_premium,
            total_yearly_premium = v_yearly_premium,
            installment_premium = v_installment_premium,
            maturity_date = v_maturity_date,
            suppl_ben_premium = v_suppl_ben_premium,
            suppl_product_premium = v_suppl_product_premium,
            /*last_paid_inst_no = v_last_paid_inst_no,
            last_paid_date = v_last_paid_date,
            next_due_inst_no = v_next_due_inst_no,
            next_due_date = v_next_due_date,*/
            policy_status = '09',
            policy_status_dt = TRUNC (SYSDATE),
            life_class_extra_amt = v_approve_life_class_extra,
            accepted_life_std_class_cd = v_accepted_life_std_class_cd,
            u_usr = p_user,
            u_dt = SYSDATE,
            suspense_amt =
               suspense_amt
               + (CASE
                     WHEN v_net_req_amt < 0 THEN ABS (v_net_req_amt)
                     ELSE 0
                  END)                       --Add this by Musha on 06.10.2020
    WHERE   pgid = p_pgid;

   --End of Update Summery Information--

   --Update To Trace Alteration In Collection Information--
   UPDATE   acc_receivables
      SET   alt_sl = v_alt_sl
    --v_alt_sl - 1 this skipped by Md. Sayadur Rahaman on 24/07/2018
    WHERE   pgid = p_pgid AND alt_sl IS NULL;

   --Keep Previous Premium Receivable Information--
   INSERT INTO ins_alter_prem_receivable (pgid,
                                          alt_sl,
                                          installment_premium,
                                          paid_amount,
                                          balance,
                                          pay_status,
                                          ref_voucher,
                                          payment_date,
                                          prem_year_status,
                                          sl_no,
                                          policy_status,
                                          installment_no,
                                          next_due_dt,
                                          total_installment,
                                          proposed_status,
                                          date_of_com,
                                          last_paid_dt,
                                          sum_assured,
                                          pid_term,
                                          pay_mode,
                                          pol_option,
                                          do_id,
                                          dm_id,
                                          branch_off,
                                          sales_off,
                                          zonal_off,
                                          regional_off,
                                          agent_id,
                                          policy_no,
                                          office_cd,
                                          process_user,
                                          process_date,
                                          proposer_pk,
                                          --proposer_pk1,
                                          fp_receive_id,
                                          i_usr,
                                          i_dt,
                                          u_usr,
                                          u_dt)
      (SELECT   pgid,
                v_alt_sl,
                installment_premium,
                paid_amount,
                balance,
                pay_status,
                ref_voucher,
                payment_date,
                prem_year_status,
                sl_no,
                policy_status,
                installment_no,
                next_due_dt,
                total_installment,
                proposed_status,
                date_of_com,
                last_paid_dt,
                sum_assured,
                pid_term,
                pay_mode,
                pol_option,
                do_id,
                dm_id,
                branch_off,
                sales_off,
                zonal_off,
                regional_off,
                agent_id,
                policy_no,
                office_cd,
                process_user,
                process_date,
                proposer_pk,
                --proposer_pk1,
                fp_receive_id,
                i_usr,
                i_dt,
                u_usr,
                u_dt
         FROM   ins_prem_acc_receivable
        WHERE   pgid = p_pgid AND proposed_status = '1');

   UPDATE   ins_prem_acc_receivable
      SET   alt_serail_no = v_alt_sl
    WHERE   pgid = p_pgid AND proposed_status = '1';

   --Delete From Premium Receivable--
   --This part is added by md. Sayadur Rahaman on 23/07/2018
   DELETE FROM   ins_prem_acc_receivable
         WHERE       pgid = p_pgid
                 AND proposed_status <> '1'
                 AND alt_serail_no <> v_alt_sl;

   pro_policy_due_creation (p_pgid     => p_pgid,
                            p_usr      => p_user,
                            p_dt       => TRUNC (SYSDATE),
                            p_errm     => v_dnp_error,
                            p_record   => v_dnp_rec);   ---Musha on 19.10.2015
   
   --This part add by Musha on 06.10.2020--
   --Due adjustment by drop sumassured--
   SELECT   s.last_paid_date, s.office_cd, s.installment_premium
     INTO   v_prev_last_paid_date, v_pol_off_cd, v_instl_prem
     FROM   ins_p_summery s
    WHERE   s.pgid = p_pgid;

   IF v_par_due_dt_to > v_prev_last_paid_date
   THEN
      SELECT   MIN (c.next_due_dt), MIN (c.installment_no)
        INTO   v_min_due_dt, v_min_due_instl_no
        FROM   ins_prem_acc_receivable c
       WHERE       c.pgid = p_pgid
               AND c.proposed_status = 0
               AND c.next_due_dt > v_prev_last_paid_date;

      --Get receive_id from sequence--
      SELECT   acc_rec_id.NEXTVAL INTO v_receive_id FROM DUAL;

      INSERT INTO acc_receivables (
                                      receive_id,
                                      receive_date,
                                      received_by,
                                      collection_type,
                                      office_code,
                                      receive_mode,
                                      coll_slip_no,
                                      coll_amount,
                                      pgid,
                                      status,
                                      premium_status,
                                      installment_no_from,
                                      avl_sus_amt,
                                      installment_no_to,
                                      due_dt_from,
                                      due_dt_to,
                                      tot_premium_amt,
                                      late_fee,
                                      interoffice_voucher,
                                      active_office_cd,
                                      mode_tp,
                                      coll_sl_no,
                                      rec_status,
                                      latefee_waiver,
                                      receipt_status,
                                      com_calculated,
                                      collection_time_pol_stat,                                      
                                      i_usr,
                                      i_dt,
                                      coll_from
                 )
        VALUES   (
                     v_receive_id,
                     TRUNC (SYSDATE),
                     NULL,
                     '03',
                     v_pol_off_cd,
                     4,
                     NULL,
                     0,
                     p_pgid,
                     1,
                     1,
                     v_min_due_instl_no,
                     0,
                     v_par_instl_no_to,
                     v_min_due_dt,
                     v_par_due_dt_to,
                     v_instl_prem
                     * (v_par_instl_no_to - v_min_due_instl_no + 1),
                     0,
                     NULL,
                     v_pol_off_cd,
                     '1',
                     NULL,
                     1,
                     0,
                     1,
                     'Y',
                     '09',
                     p_user,
                     SYSDATE,
                     '2'
                 );
                 
      UPDATE   ins_prem_acc_receivable
         SET   proposer_pk = v_receive_id,
               paid_amount = installment_premium, 
               balance = 0, 
               pay_status = 1,
               proposed_status = '1',
               u_usr = p_user,
               u_dt = SYSDATE
       WHERE   pgid = p_pgid
               AND installment_no BETWEEN v_min_due_instl_no
                                      AND  v_par_instl_no_to
               AND next_due_dt BETWEEN v_min_due_dt AND v_par_due_dt_to
               AND proposed_status = '0'
               AND proposer_pk IS NULL;
      
      SELECT CASE
                 WHEN v_pay_mode_cd = '01'
                    THEN ADD_MONTHS (v_par_due_dt_to, 12)
                 WHEN v_pay_mode_cd = '02'
                    THEN ADD_MONTHS (v_par_due_dt_to, 6)
                 WHEN v_pay_mode_cd = '03'
                    THEN ADD_MONTHS (v_par_due_dt_to, 4)
                 WHEN v_pay_mode_cd = '04'
                    THEN ADD_MONTHS (v_par_due_dt_to, 1)
                 ELSE v_par_due_dt_to
              END
        INTO v_next_due_date
        FROM dual;         
      
      UPDATE ins_p_summery
          SET last_paid_inst_no = v_par_instl_no_to,
              last_paid_date = v_par_due_dt_to,
              next_due_inst_no = v_par_instl_no_to + 1,
              next_due_date = v_next_due_date
      WHERE pgid = p_pgid
        AND last_paid_date < v_par_due_dt_to;
        
      commit;
   END IF;

   -------------------------------------
   
   
   --if there is due premium collection at alteration--
   v_alt_coll_amt := 0;

   FOR rec_coll
   IN (SELECT   receive_id,
                coll_sl,
                par_prem_due_amt,
                tot_premium_amt,
                avl_sus_amt,
                coll_amount
         FROM   acc_alt_receivables
        WHERE       pgid = p_pgid
                AND alt_sl = v_alt_sl
                AND NVL (due_instl_no_from, 0) > 0)
   LOOP
      v_alt_coll_amt := v_alt_coll_amt + rec_coll.coll_amount;

      IF NVL (rec_coll.par_prem_due_amt, 0) > 0
      THEN
         IF v_alt_coll_amt + NVL (rec_coll.avl_sus_amt, 0) >
               rec_coll.par_prem_due_amt
         THEN
            v_coll_sl := rec_coll.coll_sl;

            IF NVL (rec_coll.avl_sus_amt, 0) >= rec_coll.par_prem_due_amt
            THEN
               v_due_prem_coll_amt := rec_coll.coll_amount;
            ELSE
               v_due_prem_coll_amt :=
                  v_alt_coll_amt
                  - (rec_coll.par_prem_due_amt
                     - NVL (rec_coll.avl_sus_amt, 0));
            END IF;
         END IF;
      ELSE
         v_due_prem_coll_amt := rec_coll.coll_amount;
         v_coll_sl := rec_coll.coll_sl;
      END IF;
   END LOOP;

   IF v_coll_sl IS NOT NULL
   THEN
      --Get receive_id from sequence--
      SELECT   acc_rec_id.NEXTVAL INTO v_receive_id FROM DUAL;

      INSERT INTO acc_receivables (receive_id,
                                   receive_date,
                                   received_by,
                                   collection_type,
                                   office_code,
                                   receive_mode,
                                   coll_slip_no,
                                   coll_amount,
                                   pgid,
                                   cheque_no,
                                   cheque_date,
                                   vouch_ref,
                                   coll_slip_by,
                                   coll_slip_rec_dt,
                                   to_bank_cd,
                                   to_br_cd,
                                   status,
                                   premium_status,
                                   installment_no_from,
                                   avl_sus_amt,
                                   installment_no_to,
                                   due_dt_from,
                                   due_dt_to,
                                   tot_premium_amt,
                                   late_fee,
                                   interoffice_voucher,
                                   active_office_cd,
                                   mode_tp,
                                   coll_sl_no,
                                   rec_status,
                                   latefee_waiver,
                                   cheque_deposit,
                                   receipt_status,
                                   collection_time_pol_stat,
                                   i_usr,
                                   i_dt,
                                   coll_from)
         (SELECT   v_receive_id,
                   receive_date,
                   received_by,
                   collection_type,
                   office_code,
                   receive_mode,
                   coll_slip_no,
                   v_due_prem_coll_amt,
                   pgid,
                   cheque_no,
                   cheque_date,
                   vouch_ref,
                   coll_slip_by,
                   coll_slip_rec_dt,
                   to_bank_cd,
                   to_br_cd,
                   status,
                   premium_status,
                   due_instl_no_from,
                   avl_sus_amt,
                   due_instl_no_to,
                   due_dt_from,
                   due_dt_to,
                   tot_premium_amt,
                   late_fee,
                   interoffice_voucher,
                   active_office_cd,
                   mode_tp,
                   coll_sl_no,
                   rec_status,
                   latefee_waiver,
                   cheque_deposit,
                   '1',
                   '09',
                   i_usr,
                   i_dt,
                   '2'
            FROM   acc_alt_receivables
           WHERE       pgid = p_pgid
                   AND alt_sl = v_alt_sl
                   AND coll_sl = v_coll_sl);

      UPDATE   ins_prem_acc_receivable
         SET   proposer_pk = v_receive_id,
               proposed_status = '7',
               u_usr = p_user,
               u_dt = SYSDATE
       WHERE   pgid = p_pgid
               AND installment_no BETWEEN v_due_instl_no_from
                                      AND  v_due_instl_no_to
               AND next_due_dt BETWEEN v_due_dt_from AND v_due_dt_to
               AND alt_serail_no = '0';

      pro_alt_prem_coll_adj (
         p_pgid              => p_pgid,
         p_user              => p_user,
         v_adjustment_date   => TRUNC (SYSDATE),
         v_fyscal_yr_fr      => TO_DATE ('0101' || TO_CHAR (SYSDATE, 'RRRR'),
                                         'DDMMRRRR'),
         v_fyscal_yr_to      => TO_DATE ('3112' || TO_CHAR (SYSDATE, 'RRRR'),
                                         'DDMMRRRR'),
         p_object_cd         => pa_object_cd,
         v_errm              => v_adj_errm
      );
   END IF;   

   --Update to identify alteration status--
   UPDATE   alt_uw_accpt_gen
      SET   alt_status = '1'
    WHERE   pgid = p_pgid AND alt_status = '0';

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      p_error := 'Process pro_policy_alteration Error: ' || SQLERRM;
END pro_policy_alteration;
/


--
-- PRO_POLICY_BONUS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_policy_bonus (
   p_pgid         IN     ins_p_proposal.pgid%TYPE,
   p_payable_no   IN     clm_claim_payable_gen.payable_no%TYPE,
   p_payable_dt   IN     DATE,
   p_user         IN     VARCHAR2,
   p_bonus_amt       OUT NUMBER
)
IS
   /*Calculate policy bonus for the pgid*/
   v_bonus_exist         NUMBER := 0;
   v_error               VARCHAR2 (4000);
   v_add_benefit         clm_product_claim_detl.additional_ben%TYPE;
   v_policy_age          NUMBER (5, 2) := 0;
   v_bonus_amt           NUMBER (12, 2) := 0;
   v_clm_cause_cd        clm_claim_cause.clm_cause_cd%TYPE;
   v_lien_payable_pct    NUMBER (5, 2) := 0;
   --Contain payable percentage if lien applicable
   -----
   v_applicable_on       CHAR (1);
   v_bonus_error         VARCHAR2 (200);
   v_bonus_yr            NUMBER (4);
   -------------------------------
   v_anfl_cnt            NUMBER (4) := 0;
   v_remaning_instl      NUMBER (4) := 0;
   v_pay_mode_cd         ins_p_summery.pay_mode_cd%TYPE;
   v_option_cd           ins_p_summery.option_cd%TYPE;
   v_anf_bonus_amt       NUMBER (10) := 0;
   v_last_paid_inst_no   ins_p_summery.last_paid_inst_no%TYPE;
   v_full_paid_yr        NUMBER (2) := 0;
   v_tot_payable_yr      NUMBER (2) := 0;
   ---------------------
   v_bon_calc_mess       VARCHAR2 (200);
   v_bon_calc_st         CHAR (1);
   v_bon_max_yr          NUMBER (4);
   ---------------------------
   v_no_of_anf_loan      NUMBER (5) := 0;
   v_no_of_anf_loan_yr   NUMBER (2) := 0;
   v_anf_loan_amount     NUMBER (12, 2) := 0;
   v_interest_amount     NUMBER (12, 2) := 0;
   v_anf_error           VARCHAR2 (2000);

   CURSOR cur_bonus
   IS
      SELECT   b.bonus_receiving_yr,
               b.pgid,
               b.bonus_perc,
               b.bonus_amt,
               b.bonus_cd
        FROM   ins_policy_bonus b
       WHERE   pgid = p_pgid AND b.bonus_cd IN ('01', '02')
               AND NOT EXISTS
                     (SELECT   1
                        FROM   clm_adjust_bonus p
                       WHERE   p.pgid = b.pgid
                               AND p.bonus_yr = b.bonus_receiving_yr)
      UNION
        SELECT   MAX (b.bonus_receiving_yr),
                 b.pgid,
                 MAX (b.bonus_perc),
                 MAX (b.bonus_amt),
                 '03' bonus_cd
          FROM   ins_policy_bonus b
         WHERE   pgid = p_pgid AND b.bonus_cd IN ('03')
                 AND NOT EXISTS
                       (SELECT   1
                          FROM   clm_adjust_bonus p
                         WHERE   p.pgid = b.pgid
                                 AND p.bonus_yr = b.bonus_receiving_yr)
      GROUP BY   b.pgid;
/*SELECT b.bonus_receiving_yr
      ,b.pgid
      ,b.bonus_perc
      ,b.bonus_amt
FROM   ins_policy_bonus b
WHERE  pgid = p_pgid
AND    NOT EXISTS (SELECT 1
        FROM   clm_adjust_bonus p
        WHERE  p.pgid = b.pgid
        AND    p.bonus_yr = b.bonus_receiving_yr)
UNION
SELECT b.bonus_receiving_yr
      ,b.pgid
      ,b.bonus_perc
      ,b.bonus_amt
FROM   ins_anf_policy_bonus b
WHERE  pgid = p_pgid
AND    NOT EXISTS (SELECT 1
        FROM   clm_adjust_bonus p
        WHERE  p.pgid = b.pgid
        AND    p.bonus_yr = b.bonus_receiving_yr)*/
BEGIN
   /* -------Chekc For Bonus Applicable Or Not------- */
   BEGIN
      SELECT   NVL (d.additional_ben, '03'), d.clm_cause_cd
        INTO   v_add_benefit, v_clm_cause_cd
        FROM   clm_product_claim_detl d
       WHERE   (d.sl_no,
                d.product_cd,
                d.clm_cause_cd,
                d.clm_detl_cd,
                d.ben_party_cd) IN
                     (SELECT   c.sl_no,
                               c.product_cd,
                               c.clm_cause_cd,
                               c.clm_detl_cd,
                               c.ben_party_cd
                        FROM   clm_payable_calc_detl c
                       WHERE   c.payable_no = p_payable_no)
               AND d.additional_ben = '01';
   EXCEPTION
      WHEN OTHERS
      THEN
         --raise_application_error (-20018,'Bonus Applicable '||p_payable_no||'='||sqlerrm);
         v_add_benefit := '03';
         NULL;
   END;

   /***************************************************/
   --v_add_benefit    := '01';
   IF NVL (LPAD (v_add_benefit, 2, 0), '03') = '01'
   THEN
      --Bonus Applicable
      ---Call procedure to calculated uncalculated bonus---
      /*pro_pending_policy_bonus(p_pgid,
       'System',
       v_error
      );*/

      ---------------------------------------
      SELECT   s.option_cd,
               s.pay_mode_cd,
               s.last_paid_inst_no,
               TO_CHAR (s.last_paid_date, 'rrrr')
        INTO   v_option_cd,
               v_pay_mode_cd,
               v_last_paid_inst_no,
               v_bonus_yr
        FROM   ins_p_summery s
       WHERE   s.pgid = p_pgid;

      ---------------------------------------
      /*SELECT TO_CHAR (s.last_paid_date, 'rrrr')
       INTO v_bonus_yr
       FROM ins_p_summery s
      WHERE s.pgid = p_pgid;*/
      IF v_clm_cause_cd = '01'
      THEN
         v_applicable_on := '1';
      ELSIF v_clm_cause_cd = '02'
      THEN
         v_applicable_on := '2';
      ELSIF v_clm_cause_cd = '06'
      THEN
         v_applicable_on := '3';
      END IF;

      /*pro_cal_policy_bonus(p_pgid          => p_pgid,
      p_bonus_yr      => v_bonus_yr,
      p_usr           => p_user,
      p_applicable_on => v_applicable_on,
      --(1=Death Claim,2=Matured Calim,3=Surrender,4=Policy Loan) Interime+Reversionary Bonus,5=Only Reversionary
      p_output => v_bonus_error);*/
      FOR i IN (SELECT   bonus_cd FROM ins_bonus_type)
      LOOP
         SELECT   MAX (a.bonus_yr)
           INTO   v_bon_max_yr
           FROM   ins_pol_bonus_circular c, ins_pol_bonus_applicable a
          WHERE       a.circular_id = c.circular_id
                  AND c.cal_status = '0'
                  AND a.status = '1'
                  AND a.bonus_cd = i.bonus_cd;

         /*pro_policy_bonus_cal(p_pgid              => p_pgid
                             ,p_bonus_yr          => v_bon_max_yr
                             ,p_bonus_cd          => i.bonus_cd
                             ,p_applicable_on     => NULL
                             ,p_no_of_anf_loan_yr => 0
                             ,p_usr               => p_user
                             ,p_output            => v_bon_calc_mess
                             ,p_process_st        => v_bon_calc_st);*/
         --==========================================--
         IF v_option_cd IN ('1', '2')                      --ANF Application--
         THEN
            v_anfl_cnt := 0;
            v_full_paid_yr := 0;
            v_tot_payable_yr := 0;

            /*SELECT FLOOR (  COUNT (a.pgid)
                          / DECODE (v_pay_mode_cd,
                                    '01', 1,
                                    '02', 2,
                                    '03', 4,
                                    '04', 12,
                                    1
                                   )
                         )
              INTO v_anfl_cnt
              FROM ins_anf_loan_dtl a
             WHERE a.pgid = p_pgid
               AND NVL (a.adjust_flag, '0') = 0
               AND NOT EXISTS (
                       SELECT 1
                         FROM clm_adjust_other_ded d
                        WHERE d.demand_note_sl = a.sl_no
                              AND d.pgid = a.pgid);

            IF v_anfl_cnt = 0 THEN
               SELECT COUNT(d.payable_no)/2
                 INTO v_anfl_cnt
                 FROM clm_adjust_other_ded d
                WHERE d.pgid = p_pgid
                  AND d.payable_no = p_payable_no;
            END IF;*/
            --Musha on 09.01.2017 and add the below part

            pro_anf_loan_payable_info (
               p_pgid                => p_pgid,
               p_appl_date           => p_payable_dt,
               p_no_of_anf_loan      => v_no_of_anf_loan,
               p_no_of_anf_loan_yr   => v_no_of_anf_loan_yr,
               p_anf_loan_amount     => v_anf_loan_amount,
               p_interest_amount     => v_interest_amount,
               p_error               => v_anf_error
            );

            v_anfl_cnt := NVL (v_no_of_anf_loan_yr, 0);
         --v_anfl_cnt := 1;
         /*
         IF v_option_cd = '2'
         THEN
            IF v_pay_mode_cd = '01'
            THEN
               v_remaning_instl := 0;
            ELSIF v_pay_mode_cd = '02'
            THEN
               v_remaning_instl := MOD (v_last_paid_inst_no, 2);
            ELSIF v_pay_mode_cd = '03'
            THEN
               v_remaning_instl := MOD (v_last_paid_inst_no, 4);
            ELSIF v_pay_mode_cd = '04'
            THEN
               v_remaning_instl := MOD (v_last_paid_inst_no, 12);
            END IF;

            v_anfl_cnt := v_anfl_cnt + v_remaning_instl;
         END IF;*/
         --Musha no 05.04.2016
         --p_applicable_on:1=Death Claim,2=Matured Calim
         --pro_anf_loan_policy_bonus(p_pgid           => p_pgid,
         --p_no_of_anf_loan => v_anfl_cnt,
         --p_applicable_on  => v_applicable_on,
         --p_user           => p_user,
         --p_anf_bonus_amt  => v_anf_bonus_amt);--Musha on 13-07-2014
         END IF;

         ---=======================================================--
         pro_policy_bonus_cal_setl (p_pgid                 => p_pgid,
                                    p_bonus_yr             => NULL --,p_bonus_cd          => i.bonus_cd
                                                                  ,
                                    p_applicable_on        => v_applicable_on,
                                    p_no_of_anf_loan_yr    => v_anfl_cnt,
                                    p_usr                  => p_user,
                                    p_irg_bonus_bar_date   => p_payable_dt,
                                    p_output               => v_bon_calc_mess,
                                    p_process_st           => v_bon_calc_st);
      END LOOP;

      -----------------------------------------------------

      ---CUT ANF LOAN INSTLNO--

      --==========================================--
      FOR i IN cur_bonus
      LOOP
         v_bonus_amt := 0;

         IF NVL (i.bonus_amt, 0) > 0
         THEN
            v_bonus_amt := ROUND (i.bonus_amt, 2);

            /*******Lien Consideration For Death Claim*******/
               /*IF v_clm_cause_cd = '01'
               THEN
                  BEGIN
                     SELECT   s.last_paid_inst_no
                            / (s.policy_installment / s.term)
                       INTO v_policy_age
                       FROM ins_p_summery s
                      WHERE s.pgid = i.pgid;

------------------------------------------------
                     SELECT (100 - l.lien_percentage) lien_payable_pct
                       INTO v_lien_payable_pct
                       FROM ins_uw_lien l, clm_application p
                      WHERE l.pgid = p.pgid
                        AND l.party_cd = p.death_part_cd
                        AND l.party_id = p.death_party_id
                        AND l.pgid = i.pgid
                        AND l.lien_tp_cd <> '03'
                        AND v_policy_age BETWEEN l.lien_year_fr AND l.lien_year_to;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_lien_payable_pct := 0;
                        NULL;
                  END;

                  IF NVL (v_lien_payable_pct, 0) > 0
                  THEN
                     v_bonus_amt := v_bonus_amt * (v_lien_payable_pct / 100);
                  END IF;
               END IF;*/
            ----Musha on 12.11.2015 because of lien not consider for bonus

            /****End of Lien Consideration For Death Claim****/
            INSERT INTO clm_adjust_bonus (pgid,
                                          bonus_yr,
                                          payable_no,
                                          bonus_amt,
                                          bonus_rate,
                                          bonus_cd,
                                          i_usr,
                                          i_dt)
              VALUES   (i.pgid,
                        i.bonus_receiving_yr,
                        p_payable_no,
                        v_bonus_amt,
                        ROUND (i.bonus_perc, 2),
                        i.bonus_cd,
                        p_user,
                        SYSDATE);
         END IF;
      END LOOP;

      SELECT   ROUND (SUM (bonus_amt), 2)
        INTO   p_bonus_amt
        FROM   clm_adjust_bonus
       WHERE   payable_no = p_payable_no;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      --raise_application_error (-20017,'Bonus Calculation'||sqlerrm);
      NULL;
END pro_policy_bonus;
/


--
-- PRO_SCHEDULE_BASED_PROCESS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_schedule_based_process
IS
   p_user              VARCHAR2 (50) := 'INS';

   CURSOR c_process
   IS
        SELECT   l.process_id,
                 UPPER (l.process_name) process_name,
                 l.schedule_type,
                 l.last_process_dt
          FROM   gen_schd_bassed_pro_log l
         WHERE   l.status = '1'
      ORDER BY   schedule_type, process_id;

   rec_c_process       c_process%ROWTYPE;
   v_process_st        CHAR (1);
   v_next_process_dt   DATE;
   v_output            VARCHAR2 (200);
   v_output2           VARCHAR2 (200);
   v_record            NUMBER (10);
   --v_descendant_flag   CHAR (1);
   v_record_count      NUMBER (10);
   v_start_time        DATE := NULL;
   v_end_time          DATE := NULL;
   v_index             NUMBER (10) := 0;
   v_start_dt_from     DATE;

   TYPE recprocess
   IS
      RECORD (
         process_id         gen_schd_bassed_pro_log.process_id%TYPE,
         last_process_dt    gen_schd_bassed_pro_log.last_process_dt%TYPE,
         process_st_dt      gen_schd_bassed_pro_log.process_st_dt%TYPE,
         process_end_dt     gen_schd_bassed_pro_log.process_end_dt%TYPE,
         execution_output   gen_schd_bassed_pro_log.execution_output%TYPE
      );

   tabprocess          recprocess;

   TYPE tabtypepro
   IS
      TABLE OF recprocess
         INDEX BY BINARY_INTEGER;

   tabpro              tabtypepro;
BEGIN
   OPEN c_process;

   LOOP
      FETCH c_process INTO   rec_c_process;

      EXIT WHEN c_process%NOTFOUND;

      IF rec_c_process.last_process_dt IS NULL
      THEN
         v_start_dt_from := TO_DATE ('01-jan-2015');
         v_next_process_dt := TRUNC (SYSDATE);
      ELSE
         SELECT   rec_c_process.last_process_dt + 1, TRUNC (SYSDATE)
           INTO   v_start_dt_from, v_next_process_dt
           FROM   DUAL;
      END IF;

      IF v_next_process_dt <= TRUNC (SYSDATE)
      THEN
         v_process_st := 'Y';
      ELSE
         v_process_st := 'N';
      END IF;

      IF v_process_st = 'Y'
      THEN
         v_start_time := SYSDATE;

         IF rec_c_process.process_name = 'PRO_POLICY_DUE_CREATION'
         THEN
            pro_policy_due_creation (p_pgid     => NULL,
                                     p_usr      => p_user,
                                     p_dt       => v_next_process_dt,
                                     p_errm     => v_output,
                                     p_record   => v_record);
         ELSIF rec_c_process.process_name = 'PRO_PREMIUM_COLL_SUMMERY'
         THEN
            pro_premium_coll_summery (p_user => p_user, p_error => v_output);
         ELSIF rec_c_process.process_name = 'PRO_ADV_PREM_COLL_ADJ'
         THEN
            FOR i
            IN (  SELECT   fy_st_dt,
                           fy_ed_dt,
                           DECODE (TO_CHAR (SYSDATE, 'RRRR'),
                                   TO_CHAR (fy_ed_dt, 'RRRR'),
                                   TRUNC (SYSDATE - 1),
                                   fy_ed_dt)
                              v_adj_date,
                           office.office_cd,
                           DECODE (office.off_catg_cd, '01', '1', '1')
                              descendant_flag
                    FROM   acc_fiscal_year,
                           (SELECT   h.office_cd, h.off_catg_cd
                              FROM   hrm_office h
                             WHERE   h.off_catg_cd = '01') office
                   WHERE   status = '1'
                           AND TO_CHAR (fy_st_dt, 'RRRR') =
                                 TO_CHAR (SYSDATE, 'RRRR')
                ORDER BY   fy_st_dt, office.office_cd)
            LOOP
               pro_adv_prem_coll_adj (
                  p_user                 => p_user,
                  p_office_cd            => i.office_cd,
                  p_agent_id             => NULL,
                  p_pgid                 => NULL,
                  p_ins_tp_cd            => NULL,
                  p_adjustment_date      => i.v_adj_date,
                  p_fyscal_yr_fr         => i.fy_st_dt,
                  p_fyscal_yr_to         => i.fy_ed_dt,
                  --p_descendant_flag      => i.descendant_flag,
                  P_DESCENDANT_FLAG         => 1,
                  p_object_cd            => '02620',
                  p_test_var             => v_output2,
                  p_valid_record_count   => v_record_count,
                  p_errm                 => v_output
               );
               v_output := NULL;
               v_output2 := NULL;
               v_record_count := NULL;
            END LOOP;
         ELSIF rec_c_process.process_name = 'PRO_DAILY_PREM_COLL_ADJ'
         THEN
            v_output := NULL;
            v_output2 := NULL;
            v_record_count := NULL;

            FOR i
            IN (  SELECT   fy_st_dt,
                           fy_ed_dt,
                           DECODE (TO_CHAR (SYSDATE, 'RRRR'),
                                   TO_CHAR (fy_ed_dt, 'RRRR'),
                                   TRUNC (SYSDATE - 1),
                                   fy_ed_dt)
                              v_adj_date,
                           office.office_cd,
                           DECODE (office.off_catg_cd, '01', '1', '1')
                              descendant_flag
                    FROM   acc_fiscal_year,
                           (SELECT   h.office_cd, h.off_catg_cd
                              FROM   hrm_office h
                             WHERE   h.off_catg_cd = '01') office
                   WHERE   status = '1'
                           AND TO_CHAR (fy_st_dt, 'RRRR') =
                                 TO_CHAR (SYSDATE, 'RRRR')
                ORDER BY   fy_st_dt, office.office_cd)
            LOOP
               pro_daily_prem_coll_adj (
                  p_user                 => p_user,
                  p_office_cd            => i.office_cd,
                  p_agent_id             => NULL,
                  p_pgid                 => NULL,
                  p_ins_tp_cd            => NULL,
                 /* p_coll_dt_from            => v_start_dt_from - 365,
                  p_coll_dt_to              => v_next_process_dt -1,
                  p_adjustment_date         => i.v_adj_date,*/
                  P_COLL_DT_FROM         => TRUNC (SYSDATE) - 100,
                  P_COLL_DT_TO           => TRUNC (SYSDATE),
                  P_ADJUSTMENT_DATE      => TRUNC (SYSDATE),
                  p_fyscal_yr_fr         => i.fy_st_dt,
                  p_fyscal_yr_to         => i.fy_ed_dt,
                  p_descendant_flag      => i.descendant_flag,
                  p_object_cd            => '02620',
                  --p_test_var                => v_output2,
                  p_valid_record_count   => v_record_count,
                  p_error                => v_output
               );
            END LOOP;
         ELSIF rec_c_process.process_name = 'PRO_CHANGE_POLICY_STATUS'
         THEN
            pro_change_policy_status;
         ELSIF rec_c_process.process_name = 'PRO_CASH_BAL_INSERT'
         THEN
            DECLARE
               v_no_of_day   NUMBER := 1;
            BEGIN
               BEGIN
                  SELECT   (TRUNC (SYSDATE) - MAX (process_date)) - 1
                    INTO   v_no_of_day
                    FROM   acc_cash_bal_pro_log;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     v_no_of_day := 1;
               END;

               FOR i IN 1 .. v_no_of_day
               LOOP
                  pkg_office_cash_bal.pro_cash_bal_insert (NULL,
                                                           NULL,
                                                           'INS',
                                                           v_output);
               END LOOP;
            END;
         ELSIF rec_c_process.process_name = 'PRO_TEMP'
         THEN
            pro_temp;

            UPDATE   gen_schd_bassed_pro_log
               SET   status = '0'
             WHERE   process_id = 8;
         ELSIF rec_c_process.process_name = 'PRO_PUSH_PULL_SMS'
         THEN
            pro_push_pull_sms;
         ELSE
            v_output := 'Process not define in "pro_schedule_based_process"';
         END IF;

         v_end_time := SYSDATE;
         v_index := v_index + 1;
         tabpro (v_index).process_id := rec_c_process.process_id;
         tabpro (v_index).last_process_dt := v_next_process_dt;
         tabpro (v_index).process_st_dt := v_start_time;
         tabpro (v_index).process_end_dt := v_end_time;
         tabpro (v_index).execution_output := NVL (v_output, 'Success');
         --tabpro (v_index) := tabprocess;
         v_next_process_dt := NULL;
         v_start_time := NULL;
         v_end_time := NULL;
         v_output := NULL;
      END IF;

      COMMIT;
   END LOOP;

   CLOSE c_process;

   FOR i IN 1 .. v_index
   LOOP
      UPDATE   gen_schd_bassed_pro_log
         SET   last_process_dt = tabpro (i).last_process_dt,
               process_st_dt = tabpro (i).process_st_dt,
               pro_executing_by = p_user,
               execution_output = tabpro (i).execution_output,
               process_end_dt = tabpro (i).process_end_dt,
               u_usr = p_user,
               u_dt = SYSDATE
       WHERE   process_id = tabpro (i).process_id;
   END LOOP;

   COMMIT;
END;
/


--
-- PRO_SYNC_COLL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_sync_coll (
   p_pgid      IN       ins_p_summery.pgid%TYPE,
   p_user      IN       VARCHAR2,
   p_message   OUT      VARCHAR2
)
IS
   v_clm_alt_cnt               NUMBER                                    := 0;
   v_last_claim_date           DATE;
   v_required_instal_number    NUMBER (3)                                := 0;
   v_count                     NUMBER                                    := 0;
   v_pre_inst_no_fr            NUMBER (3)                                := 0;
   v_pre_inst_no_to            NUMBER (3)                                := 0;
   v_max_inst_no_to            NUMBER (3)                                := 0;
   v_act_installment_no_from   NUMBER (3)                                := 0;
   v_act_installment_no_to     NUMBER (3)                                := 0;
   v_error                     CHAR (1)                               := NULL;
   v_due_dt_from               DATE;
   v_due_dt_to                 DATE;
   v_payment_date2             DATE;
   v_last_paid_dt              DATE;
   v_installment_no            NUMBER (3);
   v_due_error                 VARCHAR2 (200);
   v_due_record                NUMBER;
   v_pay_mode_cd               VARCHAR2 (2);
   v_paidup_age                NUMBER (5, 2);
   v_policy_tp_cd              VARCHAR2 (2);
   v_run_age                   NUMBER (5, 2);
   v_paidup_st                 CHAR (1);
----------------
   v_prev_instl_no_from        NUMBER (3)                                := 0;
   v_prev_next_due_dt          DATE;
   v_new_next_due_dt           DATE;
   v_due_upd_error             VARCHAR2 (200)                         := NULL;
   err_schedule_missing        EXCEPTION;
   v_com_sync_error            VARCHAR2 (200);
   v_null_comm_cnt             NUMBER (5)                                := 0;
---------------------
   v_installment_premium       ins_prem_acc_receivable.installment_premium%TYPE;
   v_paid_amount               ins_prem_acc_receivable.paid_amount%TYPE;
   v_balance                   ins_prem_acc_receivable.balance%TYPE;
   v_pay_status                ins_prem_acc_receivable.pay_status%TYPE;
   v_ref_voucher               ins_prem_acc_receivable.ref_voucher%TYPE;
   v_payment_date              ins_prem_acc_receivable.payment_date%TYPE;
   v_due_st                    ins_prem_acc_receivable.due_st%TYPE;
   v_due_st_upd_by             ins_prem_acc_receivable.due_st_upd_by%TYPE;
   v_due_st_upd_dt             ins_prem_acc_receivable.due_st_upd_dt%TYPE;
   v_reverse_voucher           ins_prem_acc_receivable.reverse_voucher%TYPE;
   v_return_st                 ins_prem_acc_receivable.return_st%TYPE;
   v_alt_serail_no             ins_prem_acc_receivable.alt_serail_no%TYPE;
   v_proposed_status           ins_prem_acc_receivable.proposed_status%TYPE;
   v_receive_id                acc_receivables.receive_id%TYPE;
   v_u_usr                     VARCHAR2 (30);
   v_u_dt                      DATE;
   v_instl_cnt                 NUMBER                                    := 0;
   v_installment_premium1      ins_prem_acc_receivable.installment_premium%TYPE;
   v_paid_amount1              ins_prem_acc_receivable.paid_amount%TYPE;
   v_balance1                  ins_prem_acc_receivable.balance%TYPE;
   v_pay_status1               ins_prem_acc_receivable.pay_status%TYPE;
   v_ref_voucher1              ins_prem_acc_receivable.ref_voucher%TYPE;
   v_payment_date1             ins_prem_acc_receivable.payment_date%TYPE;
   v_due_st1                   ins_prem_acc_receivable.due_st%TYPE;
   v_due_st_upd_by1            ins_prem_acc_receivable.due_st_upd_by%TYPE;
   v_due_st_upd_dt1            ins_prem_acc_receivable.due_st_upd_dt%TYPE;
   v_reverse_voucher1          ins_prem_acc_receivable.reverse_voucher%TYPE;
   v_return_st1                ins_prem_acc_receivable.return_st%TYPE;
   v_alt_serail_no1            ins_prem_acc_receivable.alt_serail_no%TYPE;
   v_proposed_status1          ins_prem_acc_receivable.proposed_status%TYPE;
   v_receive_id1               acc_receivables.receive_id%TYPE;
   v_u_usr1                    VARCHAR2 (30);
   v_u_dt1                     DATE;
   v_installment_counter       NUMBER                                    := 0;
   v_no_of_coll_due            NUMBER                                    := 0;
   v_pre_installment_no1       NUMBER;
   v_installment               NUMBER;
   v_pre_installment_no        NUMBER;
   v_installment1              NUMBER;
   v_pre_installment_count     NUMBER;
   v_sync_counter              NUMBER                                    := 0;
   v_pre_next_due_dt           DATE;
   v_missing_schedule          NUMBER (3)                                := 0;
BEGIN
-----------------------------------------
   SELECT COUNT (l.pgid)
     INTO v_clm_alt_cnt
     FROM clm_claim_payable_gen l
    WHERE l.pgid = p_pgid
      AND (   (l.clm_cause_cd = '02' AND l.clm_detl_cd = '01')
           OR l.clm_cause_cd IN ('01', '06')
          );

   IF v_clm_alt_cnt = 0
   THEN
      SELECT COUNT (*)
        INTO v_clm_alt_cnt
        FROM alt_uw_accpt_gen uag
       WHERE uag.pgid = p_pgid AND alt_status = '1';

      IF v_clm_alt_cnt > 0
      THEN
         p_message := 'Alteration done, so policy information cannot update';
      END IF;
   ELSE
      p_message :=
         'Maturity/Paidup/Death Claim applicaiton exists, so policy information cannot update';
   END IF;

   IF v_clm_alt_cnt = 0
   THEN
-----------------------------------------
      UPDATE ins_prem_acc_receivable
         SET pre_next_due_dt = NULL,
             pre_installment_no = NULL
       WHERE pgid = p_pgid;

      FOR i IN (SELECT   r.pgid, r.receive_id, r.installment_no_from,
                         r.installment_no_to, s.pay_mode_cd,
                         r.tot_premium_amt, r.status,
                         DECODE (r.i_usr, 'SLICL', '0', '1') data_from
                    FROM acc_receivables r, ins_p_summery s
                   WHERE r.pgid = p_pgid
                     AND rec_status = '1'
                     AND r.pgid = s.pgid
                     AND r.installment_no_from <> 1
                ORDER BY NVL (r.coll_slip_rec_dt, r.receive_date),
                         r.installment_no_from)
      LOOP
         IF v_count = 0
         THEN
            SELECT MIN (r.installment_no_from), MAX (r.installment_no_to)
              INTO v_pre_inst_no_fr, v_max_inst_no_to
              FROM acc_receivables r
             WHERE r.pgid = p_pgid AND rec_status = '1';

            IF v_pre_inst_no_fr <> 2
            THEN
               v_pre_inst_no_fr := 2;
            END IF;

            v_act_installment_no_from := v_pre_inst_no_fr;
            v_count := 1;
         END IF;

         v_act_installment_no_to :=
              v_act_installment_no_from
            + (i.installment_no_to - i.installment_no_from);
         pro_sync_policy_due_creation
                                 (p_pgid              => i.pgid,
                                  p_inst_no_from      => v_act_installment_no_from,
                                  p_inst_no_to        => v_act_installment_no_to,
                                  p_usr               => p_user,
                                  p_dt                => TRUNC (SYSDATE),
                                  p_errm              => v_due_error,
                                  p_record            => v_due_record
                                 );

         BEGIN
            SELECT next_due_dt
              INTO v_due_dt_from
              FROM ins_prem_acc_receivable
             WHERE pgid = i.pgid
                   AND installment_no = v_act_installment_no_from;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;

         BEGIN
            SELECT next_due_dt
              INTO v_due_dt_to
              FROM ins_prem_acc_receivable
             WHERE pgid = i.pgid AND installment_no = v_act_installment_no_to;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;

         IF v_act_installment_no_from <> i.installment_no_from
         THEN
            INSERT INTO acc_receivables_delete_log
                        (receive_id, receive_date, received_by,
                         collection_type, office_code, receive_mode,
                         coll_slip_no, coll_amount, pgid, cheque_no,
                         cheque_date, vouch_ref, coll_slip_by, i_usr, i_dt,
                         u_usr, u_dt, coll_slip_rec_dt, to_bank_cd, to_br_cd,
                         status, premium_status, installment_no_from,
                         avl_sus_amt, installment_no_to, due_dt_from,
                         due_dt_to, tot_premium_amt, late_fee,
                         interoffice_voucher, active_office_cd, mode_tp,
                         coll_sl_no, rec_status, latefee_waiver,
                         cheque_deposit, receipt_status,
                         collection_time_pol_stat, com_calculated,
                         adjustment_date, adv_status, man_adjusted,
                         adjusted_by, com_exe_date, alt_sl)
               SELECT r.receive_id, r.receive_date, r.received_by,
                      r.collection_type, r.office_code, r.receive_mode,
                      r.coll_slip_no, r.coll_amount, r.pgid, r.cheque_no,
                      r.cheque_date, r.vouch_ref, r.coll_slip_by, r.i_usr,
                      r.i_dt, r.u_usr, r.u_dt, r.coll_slip_rec_dt,
                      r.to_bank_cd, r.to_br_cd, r.status, r.premium_status,
                      r.installment_no_from, r.avl_sus_amt,
                      r.installment_no_to, r.due_dt_from, r.due_dt_to,
                      r.tot_premium_amt, r.late_fee, r.interoffice_voucher,
                      r.active_office_cd, r.mode_tp, r.coll_sl_no,
                      r.rec_status, r.latefee_waiver, r.cheque_deposit,
                      r.receipt_status, r.collection_time_pol_stat,
                      r.com_calculated, r.adjustment_date, r.adv_status,
                      r.man_adjusted, r.adjusted_by, r.com_exe_date,
                      r.alt_sl
                 FROM acc_receivables r
                WHERE r.receive_id = i.receive_id AND pgid = i.pgid;

            UPDATE acc_receivables
               SET installment_no_from = v_act_installment_no_from,
                   installment_no_to = v_act_installment_no_to,
                   due_dt_from = v_due_dt_from,
                   due_dt_to = v_due_dt_to,
                   no_of_sync = NVL (no_of_sync, 0) + 1,
                   last_sync_date = SYSDATE
             WHERE receive_id = i.receive_id AND pgid = i.pgid;

            v_sync_counter := v_sync_counter + 1;

            BEGIN
               v_instl_cnt := 0;

               SELECT COUNT (1)
                 INTO v_pre_installment_count
                 FROM ins_prem_acc_receivable
                WHERE pgid = i.pgid AND pre_installment_no IS NOT NULL;

               IF v_pre_installment_count = 0
               THEN
                  v_installment_counter := 0;
               END IF;

               FOR q IN v_act_installment_no_from .. v_act_installment_no_to
               LOOP
                  BEGIN
                     SELECT next_due_dt
                       INTO v_pre_next_due_dt
                       FROM ins_prem_acc_receivable
                      WHERE pgid = i.pgid
                        AND installment_no =
                                           i.installment_no_from + v_instl_cnt;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_missing_schedule :=
                                          i.installment_no_from + v_instl_cnt;
                        RAISE err_schedule_missing;
                  END;

                  BEGIN
                     SELECT installment_premium, paid_amount, balance,
                            pay_status, ref_voucher, payment_date,
                            due_st, due_st_upd_by, due_st_upd_dt,
                            reverse_voucher, return_st, alt_serail_no,
                            proposed_status, proposer_pk, u_usr,
                            u_dt, pre_installment_no, installment_no
                       INTO v_installment_premium, v_paid_amount, v_balance,
                            v_pay_status, v_ref_voucher, v_payment_date,
                            v_due_st, v_due_st_upd_by, v_due_st_upd_dt,
                            v_reverse_voucher, v_return_st, v_alt_serail_no,
                            v_proposed_status, v_receive_id, v_u_usr,
                            v_u_dt, v_pre_installment_no, v_installment
                       FROM ins_prem_acc_receivable
                      WHERE pgid = i.pgid
                        AND (   (    v_installment_counter = 0
                                 AND (installment_no =
                                           i.installment_no_from + v_instl_cnt
                                     )
                                )
                             OR (    v_installment_counter > 0
                                 AND (pre_installment_no =
                                           i.installment_no_from + v_instl_cnt
                                     )
                                )
                            );
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_installment_premium := NULL;
                        v_paid_amount := NULL;
                        v_balance := NULL;
                        v_pay_status := NULL;
                        v_ref_voucher := NULL;
                        v_payment_date := NULL;
                        v_due_st := NULL;
                        v_due_st_upd_by := NULL;
                        v_due_st_upd_dt := NULL;
                        v_reverse_voucher := NULL;
                        v_return_st := NULL;
                        v_alt_serail_no := NULL;
                        v_proposed_status := NULL;
                        v_receive_id := NULL;
                        v_u_usr := NULL;
                        v_u_dt := NULL;
                  END;

                  BEGIN
                     SELECT installment_premium, paid_amount,
                            balance, pay_status, ref_voucher,
                            payment_date, due_st, due_st_upd_by,
                            due_st_upd_dt, reverse_voucher,
                            return_st, alt_serail_no,
                            proposed_status, proposer_pk, u_usr,
                            u_dt, pre_installment_no, installment_no
                       INTO v_installment_premium1, v_paid_amount1,
                            v_balance1, v_pay_status1, v_ref_voucher1,
                            v_payment_date1, v_due_st1, v_due_st_upd_by1,
                            v_due_st_upd_dt1, v_reverse_voucher1,
                            v_return_st1, v_alt_serail_no1,
                            v_proposed_status1, v_receive_id1, v_u_usr1,
                            v_u_dt1, v_pre_installment_no1, v_installment1
                       FROM ins_prem_acc_receivable
                      WHERE pgid = i.pgid AND installment_no = q;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_installment_premium1 := NULL;
                        v_paid_amount1 := NULL;
                        v_balance1 := NULL;
                        v_pay_status1 := NULL;
                        v_ref_voucher1 := NULL;
                        v_payment_date1 := NULL;
                        v_due_st1 := NULL;
                        v_due_st_upd_by1 := NULL;
                        v_due_st_upd_dt1 := NULL;
                        v_reverse_voucher1 := NULL;
                        v_return_st1 := NULL;
                        v_alt_serail_no1 := NULL;
                        v_proposed_status1 := NULL;
                        v_receive_id1 := NULL;
                        v_u_usr1 := NULL;
                        v_u_dt1 := NULL;
                  END;

                  IF v_receive_id IS NOT NULL
                  THEN
                     UPDATE ins_prem_acc_receivable
                        SET installment_premium = v_installment_premium,
                            paid_amount = v_paid_amount,
                            balance = v_balance,
                            pay_status = v_pay_status,
                            ref_voucher = v_ref_voucher,
                            proposed_status = v_proposed_status,
                            payment_date = v_payment_date,
                            due_st = v_due_st,
                            due_st_upd_by = v_due_st_upd_by,
                            due_st_upd_dt = v_due_st_upd_dt,
                            reverse_voucher = v_reverse_voucher,
                            return_st = v_return_st,
                            alt_serail_no = v_alt_serail_no,
                            proposer_pk = i.receive_id,
                            u_usr = v_u_usr,
                            u_dt = v_u_dt,
                            pre_installment_no = NULL,
                            pre_next_due_dt = v_pre_next_due_dt
                      WHERE installment_no = q AND pgid = i.pgid;
                  ELSE
                     IF i.status = '1'
                     THEN
                        UPDATE ins_prem_acc_receivable
                           SET paid_amount = installment_premium,
                               balance = 0,
                               pay_status = 1,
                               proposed_status = 1,
                               proposer_pk = i.receive_id
                         WHERE installment_no = q AND pgid = i.pgid;
                     ELSE
                        UPDATE ins_prem_acc_receivable
                           SET paid_amount = 0,
                               balance = installment_premium,
                               pay_status = 0,
                               proposed_status = 7,
                               proposer_pk = i.receive_id
                         WHERE installment_no = q AND pgid = i.pgid;
                     END IF;
                  END IF;

                  IF q <> i.installment_no_from + v_instl_cnt
                  THEN
                     IF v_receive_id1 IS NOT NULL
                     THEN
                        UPDATE ins_prem_acc_receivable
                           SET installment_premium = v_installment_premium1,
                               paid_amount = v_paid_amount1,
                               balance = v_balance1,
                               pay_status = v_pay_status1,
                               ref_voucher = v_ref_voucher1,
                               proposed_status = v_proposed_status1,
                               payment_date = v_payment_date1,
                               due_st = v_due_st1,
                               due_st_upd_by = v_due_st_upd_by1,
                               due_st_upd_dt = v_due_st_upd_dt1,
                               reverse_voucher = v_reverse_voucher1,
                               return_st = v_return_st1,
                               alt_serail_no = v_alt_serail_no1,
                               proposer_pk = v_receive_id1,
                               u_usr = v_u_usr1,
                               u_dt = v_u_dt1,
                               pre_installment_no = q
                         WHERE (   (    v_installment_counter = 0
                                    AND (installment_no =
                                            i.installment_no_from
                                            + v_instl_cnt
                                        )
                                   )
                                OR (    v_installment_counter > 0
                                    AND (pre_installment_no =
                                            i.installment_no_from
                                            + v_instl_cnt
                                        )
                                   )
                               )
                           AND pgid = i.pgid;

                        v_installment_counter := v_installment_counter + 1;
                     END IF;
                  END IF;

                  v_instl_cnt := v_instl_cnt + 1;
               END LOOP;
            END;

            --update due date info incase of system collection--
            v_act_installment_no_from := v_act_installment_no_to + 1;
            pro_sync_policy_due_creation
                                 (p_pgid              => i.pgid,
                                  p_inst_no_from      => v_act_installment_no_from,
                                  p_inst_no_to        => v_act_installment_no_from,
                                  p_usr               => p_user,
                                  p_dt                => TRUNC (SYSDATE),
                                  p_errm              => v_due_error,
                                  p_record            => v_due_record
                                 );

            BEGIN
               SELECT next_due_dt
                 INTO v_due_dt_from
                 FROM ins_prem_acc_receivable
                WHERE pgid = i.pgid
                  AND installment_no = v_act_installment_no_from;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  NULL;
            END;

            v_count := v_count + 1;
         ELSE
            SELECT COUNT (1)
              INTO v_no_of_coll_due
              FROM ins_prem_acc_receivable
             WHERE pgid = i.pgid
               AND proposer_pk = i.receive_id
               AND installment_no BETWEEN v_act_installment_no_from
                                      AND v_act_installment_no_to
               AND pay_status = i.status;

            IF v_no_of_coll_due <>
                     (v_act_installment_no_to - v_act_installment_no_from
                     ) + 1
            THEN
               IF i.status = '1'
               THEN
                  UPDATE ins_prem_acc_receivable
                     SET paid_amount = installment_premium,
                         balance = 0,
                         pay_status = 1,
                         proposed_status = 1,
                         proposer_pk = i.receive_id
                   WHERE installment_no BETWEEN v_act_installment_no_from
                                            AND v_act_installment_no_to
                     AND pgid = i.pgid;
               --AND (proposer_pk != i.receive_id OR proposer_pk IS NULL);
               ELSE
                  UPDATE ins_prem_acc_receivable
                     SET paid_amount = 0,
                         balance = installment_premium,
                         pay_status = 0,
                         proposed_status = 7,
                         proposer_pk = i.receive_id
                   WHERE installment_no BETWEEN v_act_installment_no_from
                                            AND v_act_installment_no_to
                     AND pgid = i.pgid;
               --AND (proposer_pk != i.receive_id OR proposer_pk IS NULL);
               END IF;
            END IF;

            v_act_installment_no_from := v_act_installment_no_to + 1;
         END IF;
      END LOOP;

      UPDATE ins_prem_acc_receivable
         SET paid_amount = 0,
             balance = installment_premium,
             pay_status = 0,
             proposed_status = '0',
             proposer_pk = NULL,
             u_usr = p_user,
             u_dt = SYSDATE,
             due_st = NULL,
             return_st = NULL,
             payment_date = NULL
       WHERE pgid = p_pgid
         AND installment_no >=
                DECODE (v_act_installment_no_from,
                        0, 2,
                        v_act_installment_no_from
                       )
         ---musha on 26.07.2016 add the decode
         AND NOT EXISTS (
                SELECT 1
                  FROM acc_receivables r
                 WHERE r.pgid = p_pgid
                   AND r.rec_status = '1'
                   AND installment_no BETWEEN r.installment_no_from
                                          AND r.installment_no_to);

      SELECT MAX (next_due_dt), MAX (installment_no)
        INTO v_last_paid_dt, v_installment_no
        FROM ins_prem_acc_receivable
       WHERE pgid = p_pgid AND pay_status = '1';

      DELETE FROM acc_pending_due_coll
            WHERE pgid = p_pgid AND installment_no > v_installment_no;

      BEGIN
         SELECT s.pay_mode_cd, p.paidup_age, policy_tp_cd,
                ROUND (MONTHS_BETWEEN (TRUNC (SYSDATE), comm_date) / 12, 2)
           INTO v_pay_mode_cd, v_paidup_age, v_policy_tp_cd,
                v_run_age
           FROM ins_p_summery s, ins_product p
          WHERE pgid = p_pgid AND s.product_cd = p.product_cd;

         IF v_policy_tp_cd <> 10
         THEN
            SELECT ROUND (  v_installment_no
                          / DECODE (v_pay_mode_cd,
                                    '01', 1,
                                    '02', 2,
                                    '03', 4,
                                    '04', 12
                                   ),
                          2
                         )
              INTO v_run_age
              FROM DUAL;
         END IF;

         IF v_run_age >= v_paidup_age
         THEN
            v_paidup_st := '1';
         ELSE
            v_paidup_st := '0';
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      UPDATE ins_p_summery
         SET last_paid_date = v_last_paid_dt,
             last_paid_inst_no = v_installment_no,
             paid_up_status = v_paidup_st
       WHERE pgid = p_pgid;

      IF v_sync_counter > 0
      THEN
         pro_sync_commission_info (p_pgid       => p_pgid,
                                   p_error      => v_due_upd_error
                                  );
      END IF;

      IF v_due_upd_error IS NULL
      THEN
         UPDATE ser_coll_delete_log
            SET sync_status = 1
          WHERE pgid = p_pgid AND NVL (sync_status, 0) = 0;

--=====================================================---
--last claim payment date
         SELECT MAX (g.payment_dt)
           INTO v_last_claim_date
           FROM clm_claim_payable_gen g
          WHERE g.pgid = p_pgid;

         IF v_last_claim_date IS NOT NULL
         THEN
            --required installment number
            SELECT   CEIL (  (MONTHS_BETWEEN (v_last_claim_date, s.comm_date)
                             )
                           / 12
                          )
                   * (DECODE (s.pay_mode_cd,
                              '01', 1,
                              '02', 2,
                              '03', 4,
                              '04', 12,
                              '05', 1,
                              1
                             )
                     ) required_instal_number
              INTO v_required_instal_number
              FROM ins_p_summery s
             WHERE pgid = p_pgid;

--=====================================================---
            IF v_installment_no >= v_required_instal_number
            THEN
               COMMIT;
               p_message := 'SUCESS.Process Completed :' || v_act_installment_no_to;
            ELSE
               ROLLBACK;
               p_message :=
                  'FAILED! Process Not Completed due to ineligible claim payment found, so please remove the cliam information';
            END IF;
         ELSE
            COMMIT;
            p_message := 'SUCESS.Process Completed :' || v_act_installment_no_to;
         END IF;
      ELSE
         ROLLBACK;
         p_message :=
               'FAILED! Because of Due date not found for installment no :'
            || v_act_installment_no_to;
      END IF;
   END IF;
EXCEPTION
   WHEN err_schedule_missing
   THEN
      ROLLBACK;
      p_message :=
            'FAILED! Because of Collection record found but Due record missing for installment no '
         || v_missing_schedule;
   WHEN OTHERS
   THEN
      ROLLBACK;
      p_message := 'FAILED! Because of '||SQLERRM;
END pro_sync_coll;
/


--
-- PRO_SYNC_COLL_TEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_sync_coll_temp (
   p_pgid      IN       ins_p_summery.pgid%TYPE,
   p_user      IN       VARCHAR2,
   p_message   OUT      VARCHAR2
)
IS
   v_clm_alt_cnt               NUMBER                                    := 0;
   v_last_claim_date           DATE;
   v_required_instal_number    NUMBER (3)                                := 0;
   v_count                     NUMBER                                    := 0;
   v_pre_inst_no_fr            NUMBER (3)                                := 0;
   v_pre_inst_no_to            NUMBER (3)                                := 0;
   v_max_inst_no_to            NUMBER (3)                                := 0;
   v_act_installment_no_from   NUMBER (3)                                := 0;
   v_act_installment_no_to     NUMBER (3)                                := 0;
   v_error                     CHAR (1)                               := NULL;
   v_due_dt_from               DATE;
   v_due_dt_to                 DATE;
   v_payment_date2             DATE;
   v_last_paid_dt              DATE;
   v_installment_no            NUMBER (3);
   v_due_error                 VARCHAR2 (200);
   v_due_record                NUMBER;
   v_pay_mode_cd               VARCHAR2 (2);
   v_paidup_age                NUMBER (5, 2);
   v_policy_tp_cd              VARCHAR2 (2);
   v_run_age                   NUMBER (5, 2);
   v_paidup_st                 CHAR (1);
----------------
   v_prev_instl_no_from        NUMBER (3)                                := 0;
   v_prev_next_due_dt          DATE;
   v_new_next_due_dt           DATE;
   v_due_upd_error             VARCHAR2 (200)                         := NULL;
   exception_due_upd           EXCEPTION;
   v_com_sync_error            VARCHAR2 (200);
   v_null_comm_cnt             NUMBER (5)                                := 0;
---------------------
   v_installment_premium       ins_prem_acc_receivable.installment_premium%TYPE;
   v_paid_amount               ins_prem_acc_receivable.paid_amount%TYPE;
   v_balance                   ins_prem_acc_receivable.balance%TYPE;
   v_pay_status                ins_prem_acc_receivable.pay_status%TYPE;
   v_ref_voucher               ins_prem_acc_receivable.ref_voucher%TYPE;
   v_payment_date              ins_prem_acc_receivable.payment_date%TYPE;
   v_due_st                    ins_prem_acc_receivable.due_st%TYPE;
   v_due_st_upd_by             ins_prem_acc_receivable.due_st_upd_by%TYPE;
   v_due_st_upd_dt             ins_prem_acc_receivable.due_st_upd_dt%TYPE;
   v_reverse_voucher           ins_prem_acc_receivable.reverse_voucher%TYPE;
   v_return_st                 ins_prem_acc_receivable.return_st%TYPE;
   v_alt_serail_no             ins_prem_acc_receivable.alt_serail_no%TYPE;
   v_proposed_status           ins_prem_acc_receivable.proposed_status%TYPE;
   v_receive_id                acc_receivables.receive_id%TYPE;
   v_u_usr                     VARCHAR2 (30);
   v_u_dt                      DATE;
   v_instl_cnt                 NUMBER                                    := 0;
   v_installment_premium1      ins_prem_acc_receivable.installment_premium%TYPE;
   v_paid_amount1              ins_prem_acc_receivable.paid_amount%TYPE;
   v_balance1                  ins_prem_acc_receivable.balance%TYPE;
   v_pay_status1               ins_prem_acc_receivable.pay_status%TYPE;
   v_ref_voucher1              ins_prem_acc_receivable.ref_voucher%TYPE;
   v_payment_date1             ins_prem_acc_receivable.payment_date%TYPE;
   v_due_st1                   ins_prem_acc_receivable.due_st%TYPE;
   v_due_st_upd_by1            ins_prem_acc_receivable.due_st_upd_by%TYPE;
   v_due_st_upd_dt1            ins_prem_acc_receivable.due_st_upd_dt%TYPE;
   v_reverse_voucher1          ins_prem_acc_receivable.reverse_voucher%TYPE;
   v_return_st1                ins_prem_acc_receivable.return_st%TYPE;
   v_alt_serail_no1            ins_prem_acc_receivable.alt_serail_no%TYPE;
   v_proposed_status1          ins_prem_acc_receivable.proposed_status%TYPE;
   v_receive_id1               acc_receivables.receive_id%TYPE;
   v_u_usr1                    VARCHAR2 (30);
   v_u_dt1                     DATE;
   v_installment_counter       NUMBER                                    := 0;
   v_no_of_coll_due            NUMBER                                    := 0;
   v_pre_installment_no1       NUMBER;
   v_installment               NUMBER;
   v_pre_installment_no        NUMBER;
   v_installment1              NUMBER;
   v_pre_installment_count     NUMBER;
   v_sync_counter              NUMBER                                    := 0;
   v_pre_next_due_dt           DATE;
BEGIN
   v_clm_alt_cnt := 0;

   IF v_clm_alt_cnt = 0
   THEN
-----------------------------------------
      UPDATE ins_prem_acc_receivable
         SET pre_next_due_dt = NULL,
             pre_installment_no = NULL
       WHERE pgid = p_pgid;

      FOR i IN (SELECT   r.pgid, r.receive_id, r.installment_no_from,
                         r.installment_no_to, s.pay_mode_cd,
                         r.tot_premium_amt, r.status,
                         DECODE (r.i_usr, 'SLICL', '0', '1') data_from
                    FROM acc_receivables r, ins_p_summery s
                   WHERE r.pgid = p_pgid
                     AND rec_status = '1'
                     AND r.pgid = s.pgid
                     AND r.installment_no_from <> 1
                ORDER BY NVL (r.coll_slip_rec_dt, r.receive_date),
                         r.installment_no_from)
      LOOP
         IF v_count = 0
         THEN
            SELECT MIN (r.installment_no_from), MAX (r.installment_no_to)
              INTO v_pre_inst_no_fr, v_max_inst_no_to
              FROM acc_receivables r
             WHERE r.pgid = p_pgid AND rec_status = '1';

            IF v_pre_inst_no_fr <> 2
            THEN
               v_pre_inst_no_fr := 2;
            END IF;

            v_act_installment_no_from := v_pre_inst_no_fr;
            v_count := 1;
         END IF;

         v_act_installment_no_to :=
              v_act_installment_no_from
            + (i.installment_no_to - i.installment_no_from);
         pro_sync_policy_due_creation
                                 (p_pgid              => i.pgid,
                                  p_inst_no_from      => v_act_installment_no_from,
                                  p_inst_no_to        => v_act_installment_no_to,
                                  p_usr               => p_user,
                                  p_dt                => TRUNC (SYSDATE),
                                  p_errm              => v_due_error,
                                  p_record            => v_due_record
                                 );

         BEGIN
            SELECT next_due_dt
              INTO v_due_dt_from
              FROM ins_prem_acc_receivable
             WHERE pgid = i.pgid
                   AND installment_no = v_act_installment_no_from;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;

         BEGIN
            SELECT next_due_dt
              INTO v_due_dt_to
              FROM ins_prem_acc_receivable
             WHERE pgid = i.pgid AND installment_no = v_act_installment_no_to;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;

         IF v_act_installment_no_from <> i.installment_no_from
         THEN
            INSERT INTO acc_receivables_delete_log
                        (receive_id, receive_date, received_by,
                         collection_type, office_code, receive_mode,
                         coll_slip_no, coll_amount, pgid, cheque_no,
                         cheque_date, vouch_ref, coll_slip_by, i_usr, i_dt,
                         u_usr, u_dt, coll_slip_rec_dt, to_bank_cd, to_br_cd,
                         status, premium_status, installment_no_from,
                         avl_sus_amt, installment_no_to, due_dt_from,
                         due_dt_to, tot_premium_amt, late_fee,
                         interoffice_voucher, active_office_cd, mode_tp,
                         coll_sl_no, rec_status, latefee_waiver,
                         cheque_deposit, receipt_status,
                         collection_time_pol_stat, com_calculated,
                         adjustment_date, adv_status, man_adjusted,
                         adjusted_by, com_exe_date, alt_sl)
               SELECT r.receive_id, r.receive_date, r.received_by,
                      r.collection_type, r.office_code, r.receive_mode,
                      r.coll_slip_no, r.coll_amount, r.pgid, r.cheque_no,
                      r.cheque_date, r.vouch_ref, r.coll_slip_by, r.i_usr,
                      r.i_dt, r.u_usr, r.u_dt, r.coll_slip_rec_dt,
                      r.to_bank_cd, r.to_br_cd, r.status, r.premium_status,
                      r.installment_no_from, r.avl_sus_amt,
                      r.installment_no_to, r.due_dt_from, r.due_dt_to,
                      r.tot_premium_amt, r.late_fee, r.interoffice_voucher,
                      r.active_office_cd, r.mode_tp, r.coll_sl_no,
                      r.rec_status, r.latefee_waiver, r.cheque_deposit,
                      r.receipt_status, r.collection_time_pol_stat,
                      r.com_calculated, r.adjustment_date, r.adv_status,
                      r.man_adjusted, r.adjusted_by, r.com_exe_date,
                      r.alt_sl
                 FROM acc_receivables r
                WHERE r.receive_id = i.receive_id AND pgid = i.pgid;

            UPDATE acc_receivables
               SET installment_no_from = v_act_installment_no_from,
                   installment_no_to = v_act_installment_no_to,
                   due_dt_from = v_due_dt_from,
                   due_dt_to = v_due_dt_to,
                   no_of_sync = NVL (no_of_sync, 0) + 1,
                   last_sync_date = SYSDATE
             WHERE receive_id = i.receive_id AND pgid = i.pgid;

            v_sync_counter := v_sync_counter + 1;

            BEGIN
               v_instl_cnt := 0;

               SELECT COUNT (1)
                 INTO v_pre_installment_count
                 FROM ins_prem_acc_receivable
                WHERE pgid = i.pgid AND pre_installment_no IS NOT NULL;

               IF v_pre_installment_count = 0
               THEN
                  v_installment_counter := 0;
               END IF;

               FOR q IN v_act_installment_no_from .. v_act_installment_no_to
               LOOP
                  SELECT next_due_dt
                    INTO v_pre_next_due_dt
                    FROM ins_prem_acc_receivable
                   WHERE pgid = i.pgid
                     AND installment_no = i.installment_no_from + v_instl_cnt;

                  BEGIN
                     SELECT installment_premium, paid_amount, balance,
                            pay_status, ref_voucher, payment_date,
                            due_st, due_st_upd_by, due_st_upd_dt,
                            reverse_voucher, return_st, alt_serail_no,
                            proposed_status, proposer_pk, u_usr,
                            u_dt, pre_installment_no, installment_no
                       INTO v_installment_premium, v_paid_amount, v_balance,
                            v_pay_status, v_ref_voucher, v_payment_date,
                            v_due_st, v_due_st_upd_by, v_due_st_upd_dt,
                            v_reverse_voucher, v_return_st, v_alt_serail_no,
                            v_proposed_status, v_receive_id, v_u_usr,
                            v_u_dt, v_pre_installment_no, v_installment
                       FROM ins_prem_acc_receivable
                      WHERE pgid = i.pgid
                        AND (   (    v_installment_counter = 0
                                 AND (installment_no =
                                           i.installment_no_from + v_instl_cnt
                                     )
                                )
                             OR (    v_installment_counter > 0
                                 AND (pre_installment_no =
                                           i.installment_no_from + v_instl_cnt
                                     )
                                )
                            );
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_installment_premium := NULL;
                        v_paid_amount := NULL;
                        v_balance := NULL;
                        v_pay_status := NULL;
                        v_ref_voucher := NULL;
                        v_payment_date := NULL;
                        v_due_st := NULL;
                        v_due_st_upd_by := NULL;
                        v_due_st_upd_dt := NULL;
                        v_reverse_voucher := NULL;
                        v_return_st := NULL;
                        v_alt_serail_no := NULL;
                        v_proposed_status := NULL;
                        v_receive_id := NULL;
                        v_u_usr := NULL;
                        v_u_dt := NULL;
                  END;

                  BEGIN
                     SELECT installment_premium, paid_amount,
                            balance, pay_status, ref_voucher,
                            payment_date, due_st, due_st_upd_by,
                            due_st_upd_dt, reverse_voucher,
                            return_st, alt_serail_no,
                            proposed_status, proposer_pk, u_usr,
                            u_dt, pre_installment_no, installment_no
                       INTO v_installment_premium1, v_paid_amount1,
                            v_balance1, v_pay_status1, v_ref_voucher1,
                            v_payment_date1, v_due_st1, v_due_st_upd_by1,
                            v_due_st_upd_dt1, v_reverse_voucher1,
                            v_return_st1, v_alt_serail_no1,
                            v_proposed_status1, v_receive_id1, v_u_usr1,
                            v_u_dt1, v_pre_installment_no1, v_installment1
                       FROM ins_prem_acc_receivable
                      WHERE pgid = i.pgid AND installment_no = q;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        v_installment_premium1 := NULL;
                        v_paid_amount1 := NULL;
                        v_balance1 := NULL;
                        v_pay_status1 := NULL;
                        v_ref_voucher1 := NULL;
                        v_payment_date1 := NULL;
                        v_due_st1 := NULL;
                        v_due_st_upd_by1 := NULL;
                        v_due_st_upd_dt1 := NULL;
                        v_reverse_voucher1 := NULL;
                        v_return_st1 := NULL;
                        v_alt_serail_no1 := NULL;
                        v_proposed_status1 := NULL;
                        v_receive_id1 := NULL;
                        v_u_usr1 := NULL;
                        v_u_dt1 := NULL;
                  END;

                  IF v_receive_id IS NOT NULL
                  THEN
                     UPDATE ins_prem_acc_receivable
                        SET installment_premium = v_installment_premium,
                            paid_amount = v_paid_amount,
                            balance = v_balance,
                            pay_status = v_pay_status,
                            ref_voucher = v_ref_voucher,
                            proposed_status = v_proposed_status,
                            payment_date = v_payment_date,
                            due_st = v_due_st,
                            due_st_upd_by = v_due_st_upd_by,
                            due_st_upd_dt = v_due_st_upd_dt,
                            reverse_voucher = v_reverse_voucher,
                            return_st = v_return_st,
                            alt_serail_no = v_alt_serail_no,
                            proposer_pk = i.receive_id,
                            u_usr = v_u_usr,
                            u_dt = v_u_dt,
                            pre_installment_no = NULL,
                            pre_next_due_dt = v_pre_next_due_dt
                      WHERE installment_no = q AND pgid = i.pgid;
                  ELSE
                     IF i.status = '1'
                     THEN
                        UPDATE ins_prem_acc_receivable
                           SET paid_amount = installment_premium,
                               balance = 0,
                               pay_status = 1,
                               proposed_status = 1,
                               proposer_pk = i.receive_id
                         WHERE installment_no = q AND pgid = i.pgid;
                     ELSE
                        UPDATE ins_prem_acc_receivable
                           SET paid_amount = 0,
                               balance = installment_premium,
                               pay_status = 0,
                               proposed_status = 7,
                               proposer_pk = i.receive_id
                         WHERE installment_no = q AND pgid = i.pgid;
                     END IF;
                  END IF;

                  IF q <> i.installment_no_from + v_instl_cnt
                  THEN
                     IF v_receive_id1 IS NOT NULL
                     THEN
                        UPDATE ins_prem_acc_receivable
                           SET installment_premium = v_installment_premium1,
                               paid_amount = v_paid_amount1,
                               balance = v_balance1,
                               pay_status = v_pay_status1,
                               ref_voucher = v_ref_voucher1,
                               proposed_status = v_proposed_status1,
                               payment_date = v_payment_date1,
                               due_st = v_due_st1,
                               due_st_upd_by = v_due_st_upd_by1,
                               due_st_upd_dt = v_due_st_upd_dt1,
                               reverse_voucher = v_reverse_voucher1,
                               return_st = v_return_st1,
                               alt_serail_no = v_alt_serail_no1,
                               proposer_pk = v_receive_id1,
                               u_usr = v_u_usr1,
                               u_dt = v_u_dt1,
                               pre_installment_no = q
                         WHERE (   (    v_installment_counter = 0
                                    AND (installment_no =
                                            i.installment_no_from
                                            + v_instl_cnt
                                        )
                                   )
                                OR (    v_installment_counter > 0
                                    AND (pre_installment_no =
                                            i.installment_no_from
                                            + v_instl_cnt
                                        )
                                   )
                               )
                           AND pgid = i.pgid;

                        v_installment_counter := v_installment_counter + 1;
                     END IF;
                  END IF;

                  v_instl_cnt := v_instl_cnt + 1;
               END LOOP;
            END;

            --update due date info incase of system collection--
            v_act_installment_no_from := v_act_installment_no_to + 1;
            pro_sync_policy_due_creation
                                 (p_pgid              => i.pgid,
                                  p_inst_no_from      => v_act_installment_no_from,
                                  p_inst_no_to        => v_act_installment_no_from,
                                  p_usr               => p_user,
                                  p_dt                => TRUNC (SYSDATE),
                                  p_errm              => v_due_error,
                                  p_record            => v_due_record
                                 );

            BEGIN
               SELECT next_due_dt
                 INTO v_due_dt_from
                 FROM ins_prem_acc_receivable
                WHERE pgid = i.pgid
                  AND installment_no = v_act_installment_no_from;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  NULL;
            END;

            v_count := v_count + 1;
         ELSE
            SELECT COUNT (1)
              INTO v_no_of_coll_due
              FROM ins_prem_acc_receivable
             WHERE pgid = i.pgid
               AND proposer_pk = i.receive_id
               AND installment_no BETWEEN v_act_installment_no_from
                                      AND v_act_installment_no_to
               AND pay_status = i.status;

            IF v_no_of_coll_due <>
                     (v_act_installment_no_to - v_act_installment_no_from
                     ) + 1
            THEN
               IF i.status = '1'
               THEN
                  UPDATE ins_prem_acc_receivable
                     SET paid_amount = installment_premium,
                         balance = 0,
                         pay_status = 1,
                         proposed_status = 1,
                         proposer_pk = i.receive_id
                   WHERE installment_no BETWEEN v_act_installment_no_from
                                            AND v_act_installment_no_to
                     AND pgid = i.pgid;
               --AND (proposer_pk != i.receive_id OR proposer_pk IS NULL);
               ELSE
                  UPDATE ins_prem_acc_receivable
                     SET paid_amount = 0,
                         balance = installment_premium,
                         pay_status = 0,
                         proposed_status = 7,
                         proposer_pk = i.receive_id
                   WHERE installment_no BETWEEN v_act_installment_no_from
                                            AND v_act_installment_no_to
                     AND pgid = i.pgid;
               --AND (proposer_pk != i.receive_id OR proposer_pk IS NULL);
               END IF;
            END IF;

            v_act_installment_no_from := v_act_installment_no_to + 1;
         END IF;
      END LOOP;

      UPDATE ins_prem_acc_receivable
         SET paid_amount = 0,
             balance = installment_premium,
             pay_status = 0,
             proposed_status = '0',
             proposer_pk = NULL,
             u_usr = p_user,
             u_dt = SYSDATE,
             due_st = NULL,
             return_st = NULL,
             payment_date = NULL
       WHERE pgid = p_pgid
         AND installment_no >=
                DECODE (v_act_installment_no_from,
                        0, 2,
                        v_act_installment_no_from
                       )
         ---musha on 26.07.2016 add the decode
         AND NOT EXISTS (
                SELECT 1
                  FROM acc_receivables r
                 WHERE r.pgid = p_pgid
                   AND r.rec_status = '1'
                   AND installment_no BETWEEN r.installment_no_from
                                          AND r.installment_no_to);

      SELECT MAX (next_due_dt), MAX (installment_no)
        INTO v_last_paid_dt, v_installment_no
        FROM ins_prem_acc_receivable
       WHERE pgid = p_pgid AND pay_status = '1';

      DELETE FROM acc_pending_due_coll
            WHERE pgid = p_pgid AND installment_no > v_installment_no;

      BEGIN
         SELECT s.pay_mode_cd, p.paidup_age, policy_tp_cd,
                ROUND (MONTHS_BETWEEN (TRUNC (SYSDATE), comm_date) / 12, 2)
           INTO v_pay_mode_cd, v_paidup_age, v_policy_tp_cd,
                v_run_age
           FROM ins_p_summery s, ins_product p
          WHERE pgid = p_pgid AND s.product_cd = p.product_cd;

         IF v_policy_tp_cd <> 10
         THEN
            SELECT ROUND (  v_installment_no
                          / DECODE (v_pay_mode_cd,
                                    '01', 1,
                                    '02', 2,
                                    '03', 4,
                                    '04', 12
                                   ),
                          2
                         )
              INTO v_run_age
              FROM DUAL;
         END IF;

         IF v_run_age >= v_paidup_age
         THEN
            v_paidup_st := '1';
         ELSE
            v_paidup_st := '0';
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      UPDATE ins_p_summery
         SET last_paid_date = v_last_paid_dt,
             last_paid_inst_no = v_installment_no,
             paid_up_status = v_paidup_st
       WHERE pgid = p_pgid;

      IF v_sync_counter > 0
      THEN
         pro_sync_commission_info (p_pgid       => p_pgid,
                                   p_error      => v_due_upd_error
                                  );
      END IF;

      IF v_due_upd_error IS NULL
      THEN
         UPDATE ser_coll_delete_log
            SET sync_status = 1
          WHERE pgid = p_pgid AND NVL (sync_status, 0) = 0;

--=====================================================---
--last claim payment date
         SELECT MAX (g.payment_dt)
           INTO v_last_claim_date
           FROM clm_claim_payable_gen g
          WHERE g.pgid = p_pgid;

         IF v_last_claim_date IS NOT NULL
         THEN
            --required installment number
            SELECT   CEIL (  (MONTHS_BETWEEN (v_last_claim_date, s.comm_date)
                             )
                           / 12
                          )
                   * (DECODE (s.pay_mode_cd,
                              '01', 1,
                              '02', 2,
                              '03', 4,
                              '04', 12,
                              '05', 1,
                              1
                             )
                     ) required_instal_number
              INTO v_required_instal_number
              FROM ins_p_summery s
             WHERE pgid = p_pgid;

--=====================================================---
            IF v_installment_no >= v_required_instal_number
            THEN
               COMMIT;
               p_message := 'Process Completed :' || v_act_installment_no_to;
            ELSE
               ROLLBACK;
               p_message :=
                  'Process Not Completed due to ineligible claim payment found, so please remove the cliam information';
            END IF;
         ELSE
            COMMIT;
            p_message := 'Process Completed :' || v_act_installment_no_to;
         END IF;
      ELSE
         ROLLBACK;
         p_message :=
               'Due date not found for installment no :'
            || v_act_installment_no_to;
      END IF;
   END IF;
EXCEPTION
   WHEN exception_due_upd
   THEN
      ROLLBACK;
   WHEN OTHERS
   THEN
      ROLLBACK;
      p_message := SQLERRM;
END pro_sync_coll_temp;
/


--
-- TEMP_POLICY_ST_UPDT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.temp_policy_st_updt wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
86c 2fa
oWlZloPUTYH6SnGjblb6u9GxR3Qwg83DLtDrfC9Dbg9/xBppsxQKRBp56sB5sB6XLPfNjkNd
Hbhn4cz0wI+agkjsYaHvy3FUqGD38TAZNEJBLbBhQMA8VMsHrg/+OLXN2cEoJGr+hM4ttTBa
RgymcB9WsNRl4+j9DYsza7rBPMV9foBWEGZhR5d6T6RVpNvHwR17OBHEpaRRGnCwcTfsYPg1
1EG33zyI/Q8185pU7gVptq/seyPa+hFKDNwAU7GBYEutvCbMxXwGQuT3NgGVTcohP96CcXoV
8TfgFGUJUN9X0JNM27Easpd8HH1/r5MuXyJb6jwW3RRry+LMGAVvI/Sl+fQLQ0l33ZvxltHz
PpSx+VHjEd//52QOhcdU4t0FYF6FcR4Gkn4EjQFeOodmE8Er13D7I0l/MGZzdhgxdBzqaUoC
dPId2YBaTpig9jHDmEbiX2PkLPyx/CiSgXF7gcvaDYv9a/j9K7rWngLbEgG+FQoWAcp+mTGz
iKvGxrGIcAJZFsqQvwReXKzU5tB/OgV6liOOMQ48yrR1oXgJMy9heW7QEvwYPIRKjdofuTbi
o4D0dDuyje2LTuiZ/yU0VI9ei5UQeweJLQIJmW2nGQkwgi5S6lYYm7+OX9qXKu8WvvGRxzH4
QprJ7ZUDIlyQmy5Y/k36s/RN2WkA+0lbwfMwHq0CcS6587/SFFfxtzCe5wUA1oIvIIxkIPT5
LLedqlkO/YihILGaH2oQIjTORCnDucE=
/


--
-- TEMP_TEST_ADJ  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.temp_test_adj
is
begin
declare
v_process_st        CHAR (1);
   v_next_process_dt   DATE;
   v_output            VARCHAR2 (200);
   v_output2           VARCHAR2 (200);
   v_record            NUMBER (10);
   v_descendant_flag   CHAR (1);
   v_record_count      NUMBER (10);
   v_start_time        DATE                := NULL;
   v_end_time          DATE                := NULL;
   v_index             NUMBER (10)         := 0;
   v_start_dt_from     DATE;
   v_next_process_dt   DATE;
begin
pro_daily_prem_coll_adj
                                     (p_user                    => 'INS',
                                      p_office_cd               => '07001',
                                      p_agent_id                => NULL,
                                      p_pgid                    => '1408120706101591',
                                      p_ins_tp_cd               => NULL,
                                      p_coll_dt_from            => to_date ('01/01/2021','dd/mm/rrrr'),
                                      p_coll_dt_to              => to_date ('17/07/2021','dd/mm/rrrr'),
                                      p_adjustment_date         => to_date ('17/07/2021','dd/mm/rrrr'),
                                      p_fyscal_yr_fr            => to_date ('01/01/2021','dd/mm/rrrr'),
                                      p_fyscal_yr_to            => to_date ('31/12/2021','dd/mm/rrrr'),
                                      p_descendant_flag         => '1',
                                      p_object_cd               => '02620',
                                      --p_test_var                => v_output2,
                                      p_valid_record_count      => v_record_count,
                                      p_error                   => v_output
                                     );
                                     
       DBMS_OUTPUT.PUT_LINE ('v_output- '||v_output||'==v_record_count: '||v_record_count);
                                     
end;
end;
/


--
-- PRO_DAILY_PREM_COLL_ADJ  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_DAILY_PREM_COLL_ADJ FOR INS.PRO_DAILY_PREM_COLL_ADJ;


--
-- PRO_DEV_EMP_PREM_COMM  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_DEV_EMP_PREM_COMM FOR INS.PRO_DEV_EMP_PREM_COMM;


--
-- PRO_EMP_BONUS_COMM_BILL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_EMP_BONUS_COMM_BILL FOR INS.PRO_EMP_BONUS_COMM_BILL;


--
-- PRO_EMP_COMM_BILL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_EMP_COMM_BILL FOR INS.PRO_EMP_COMM_BILL;


--
-- PRO_FA_COMM_BILL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_FA_COMM_BILL FOR INS.PRO_FA_COMM_BILL;


--
-- PRO_FP_COLL_ADJ  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_FP_COLL_ADJ FOR INS.PRO_FP_COLL_ADJ;


--
-- PRO_PENSION_COMMUTATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_PENSION_COMMUTATION FOR INS.PRO_PENSION_COMMUTATION;


--
-- PRO_POLICY_ALTERATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_POLICY_ALTERATION FOR INS.PRO_POLICY_ALTERATION;


--
-- PRO_FA_PER_TRNS_EAR_CAL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_FA_PER_TRNS_EAR_CAL FOR INS.PRO_FA_PER_TRNS_EAR_CAL;


--
-- PRO_SCHEDULE_BASED_PROCESS  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SCHEDULE_BASED_PROCESS FOR INS.PRO_SCHEDULE_BASED_PROCESS;


--
-- PRO_LOAN_ADJUSTMENT  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_LOAN_ADJUSTMENT FOR INS.PRO_LOAN_ADJUSTMENT;


--
-- TEMP_POLICY_ST_UPDT  (Synonym) 
--
CREATE PUBLIC SYNONYM TEMP_POLICY_ST_UPDT FOR INS.TEMP_POLICY_ST_UPDT;


--
-- PRO_ADV_PREM_COLL_ADJ  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ADV_PREM_COLL_ADJ FOR INS.PRO_ADV_PREM_COLL_ADJ;


--
-- PRO_ALT_ALTERATION_CALCULATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ALT_ALTERATION_CALCULATION FOR INS.PRO_ALT_ALTERATION_CALCULATION;


--
-- PRO_ALT_POLICY_CALCULATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ALT_POLICY_CALCULATION FOR INS.PRO_ALT_POLICY_CALCULATION;


--
-- PRO_ALT_SPECIAL_CALCULATION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ALT_SPECIAL_CALCULATION FOR INS.PRO_ALT_SPECIAL_CALCULATION;


--
-- PRO_ANF_LOAN_ISSUE  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ANF_LOAN_ISSUE FOR INS.PRO_ANF_LOAN_ISSUE;


--
-- PRO_CHANGE_POLICY_STATUS  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_CHANGE_POLICY_STATUS FOR INS.PRO_CHANGE_POLICY_STATUS;


--
-- PRO_AGENT_BONUS_BILL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_AGENT_BONUS_BILL FOR INS.PRO_AGENT_BONUS_BILL;


--
-- PRO_COLL_LED  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_COLL_LED FOR INS.PRO_COLL_LED;


--
-- PRO_SYNC_COLL  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_SYNC_COLL FOR INS.PRO_SYNC_COLL;


--
-- PRO_ADV_PREM_CALC_COMMISSION  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_adv_prem_calc_commission (
   p_office_cd            IN     VARCHAR2,
   p_descendant_flag      IN     VARCHAR2,
   p_agent_id             IN     VARCHAR2,
   /*p_pgid_tb              IN       pgid_tbl,*/
   p_pgid                 IN     ins_p_proposal.pgid%TYPE,
   p_ins_tp_cd            IN     ins_insurance_type.ins_tp_cd%TYPE,
   p_coll_dt_from         IN     DATE,
   p_coll_dt_to           IN     DATE,
   p_comm_yr_from         IN     NUMBER,
   p_comm_yr_to           IN     NUMBER,
   p_com_exe_date         IN     DATE,
   p_fy_start_dt          IN     DATE,
   p_fy_end_dt            IN     DATE,
   p_user                 IN     VARCHAR2,
   p_object_cd            IN     VARCHAR2,
   p_valid_record_count      OUT NUMBER,
   p_errm                    OUT VARCHAR2
)
IS
   /******************************************************************************
      NAME:       pro_adv_prem_calc_commission
      PURPOSE:

      REVISIONS:
      Ver      Date            Author                  Description
      ----     ----------      ----------------------  ---------------------------
      1.0      27-Jul-2010     Mohammad Arifur Rahman  1. Created this procedure.
      1.1      13-May-2012     Syed Md. Musha          1. Update this procedure.
      1.1      04-Apr-2015     Syed Md. Musha          1. Update this procedure.
      1.1      17-May-2023     Alamgir Hossain         1. Update this procedure.

      NOTES:


   ******************************************************************************/
   v_calc_dt_to               DATE;
   v_last_due_dt_of_com_exe   DATE;
   v_prev_fy_open_st          NUMBER (1) := 1;
   v_comm_error               VARCHAR2 (200);
   -- for commisiion process error message
   v_earn_rec_cnt             NUMBER (5) := 0;
   --v_pgid_cnt       NUMBER (5)     := p_pgid_tb.COUNT;  --Musha on 30.03.2016
   v_onestop_flag             NUMBER (1);
BEGIN
   SELECT   COUNT (1)
     INTO   v_prev_fy_open_st
     FROM   acc_fiscal_year
    WHERE   fy_close = 0                                                --Open
                        AND fy_st_dt < p_fy_start_dt;

   FOR i
   IN (  SELECT   a.receive_id,
                  a.receive_date,
                  a.pgid,
                  a.coll_amount,
                  a.due_dt_from,
                  a.due_dt_to,
                  a.installment_no_from,
                  a.installment_no_to,
                  ABS (NVL (a.late_fee, 0) - NVL (a.latefee_waiver, 0))
                     late_fee,
                  a.office_code,
                  a.receive_mode,
                  a.vouch_ref,
                  a.interoffice_voucher,
                  a.status,
                  a.tot_premium_amt,
                  a.last_due_dt_of_com_exe,
                  s.comm_date,
                  s.agent_id,
                  s.product_cd,
                  s.term,
                  s.pay_mode_cd,
                  s.suspense_amt,
                  p.paidup_age paidupage,
                  s.policy_installment,
                  NVL (s.life_premium, 0) life_premium,
                  NVL (s.suppl_ben_premium, 0)
                  + NVL (s.suppl_product_premium, 0)
                     suppl_prem,
                  s.ins_tp_cd,
                  a.active_office_cd
           FROM   acc_receivables a,
                  ins_p_summery s,
                  ins_product p,
                  hrm_agent g
          WHERE /*(   a.status = '0'
                 OR (a.status = '1' AND a.last_due_dt_of_com_exe IS NULL)
                 OR (a.status = '1' AND a.last_due_dt_of_com_exe < a.due_dt_to
                    )
                )
            --AND */
               a      .pgid = NVL (p_pgid, a.pgid)
                  AND s.pgid = NVL (p_pgid, s.pgid)
                  /*AND(v_pgid_cnt = 0 OR a.pgid IN (SELECT *
                                                      FROM TABLE (p_pgid_tb)))
                  AND (v_pgid_cnt = 0 OR s.pgid IN (SELECT *
                                                      FROM TABLE (p_pgid_tb)))*/
                  AND a.rec_status = '1'
                  AND s.ins_tp_cd = NVL (p_ins_tp_cd, s.ins_tp_cd)
                  --AND (a.com_calculated = 'N' OR a.com_calculated IS NULL)
                  AND (a.com_calculated = 'N' OR a.com_calculated IS NULL
                       OR (a.com_calculated = 'Y'
                           AND (a.installment_no_to - a.installment_no_from + 1) >
                                 (SELECT   COUNT (DISTINCT prem_due_dt)
                                    FROM   com_agent_com_detail
                                   WHERE   prem_due_dt BETWEEN a.due_dt_from
                                                           AND  a.due_dt_to
                                           AND pgid = a.pgid)))
                  AND a.adv_status = '1'
                  AND s.agent_id = NVL (p_agent_id, s.agent_id)
                  AND EXISTS (SELECT   1
                                FROM   hrm_agent g
                               WHERE   g.agent_id = s.agent_id)
                  --AND    a.receive_date <= p_fy_end_dt
                  AND NVL (a.coll_slip_rec_dt, a.receive_date) <=
                        p_com_exe_date
                  AND EXISTS
                        (SELECT   1
                           FROM   ins_prem_acc_receivable b
                          WHERE       b.pgid = a.pgid
                                  AND b.proposer_pk = a.receive_id
                                  AND b.proposed_status IN ('1', '4')
                                  AND b.pay_status IN (1, 4))
                  AND NVL (a.cheque_deposit, 'N') =
                        DECODE (a.receive_mode,
                                '1', NVL (a.cheque_deposit, 'N'),
                                '3', NVL (a.cheque_deposit, 'N'),
                                '5', NVL (a.cheque_deposit, 'N'), -- this part is added by Alamgir for paybill & I-Life
                                '7', NVL (a.cheque_deposit, 'N'),
                                'Y')
                  AND ( (NVL (p_descendant_flag, '0') = '0'
                         AND g.office_cd = NVL (p_office_cd, g.office_cd))
                       OR (NVL (p_descendant_flag, '0') = '1'
                           AND g.office_cd IN
                                    (    SELECT   office_cd
                                           FROM   hrm_office_setup
                                     START WITH   office_cd = p_office_cd
                                     CONNECT BY   PRIOR office_cd =
                                                     control_office_cd))) ---Add by musha on 10-06-2015
                  AND a.pgid = s.pgid
                  AND s.product_cd = p.product_cd
                  AND s.agent_id = g.agent_id
       ORDER BY   a.pgid, a.receive_id)
   LOOP
      v_last_due_dt_of_com_exe := '';
      v_calc_dt_to := p_com_exe_date;
      v_calc_dt_to := TO_DATE ('30/04/2015', 'dd/mm/rrrr');

      --Temporary for SLICL
      FOR i2
      IN (  SELECT   a.installment_premium,
                     a.pgid,
                     a.installment_no,
                     a.pay_status,
                     a.next_due_dt,
                     a.sl_no demand_sl,
                     a.total_installment,
                     CEIL ( (a.installment_no * i.term) / i.policy_installment)
                        prem_yr
              FROM   ins_prem_acc_receivable a
             WHERE       a.proposer_pk = i.receive_id
                     AND a.proposed_status IN ('1', '4')
                     AND a.pay_status IN (1, 4)
                     AND NOT EXISTS
                           (SELECT   1
                              FROM   com_agent_com_detail
                             WHERE   prem_due_dt = a.next_due_dt
                                     AND pgid = a.pgid)
                     --AND    a.next_due_dt BETWEEN nvl(i.last_due_dt_of_com_exe, a.next_due_dt) AND v_calc_dt_to  --Musha on 20-04-2015
                     AND (a.next_due_dt >= p_fy_start_dt
                          OR (a.next_due_dt < p_fy_start_dt
                              AND ( (v_prev_fy_open_st = 0
                                     AND NVL (TRUNC (a.payment_date),
                                              TRUNC (a.u_dt)) < p_fy_end_dt)
                                   OR (v_prev_fy_open_st >= 1
                                       AND NVL (TRUNC (a.payment_date),
                                                TRUNC (a.u_dt)) BETWEEN p_fy_start_dt
                                                                    AND  p_fy_end_dt))))
          --AND a.next_due_dt BETWEEN v_fyscal_yr_fr AND v_fyscal_yr_to
          ORDER BY   a.installment_no)
      LOOP
         v_last_due_dt_of_com_exe := i2.next_due_dt;

         IF i.active_office_cd = '23717'
         THEN
            v_onestop_flag := 1;
         ELSE
            v_onestop_flag := 0;
         END IF;

         pro_fa_per_trns_ear_cal (p_agent_id       => i.agent_id,
                                  p_pgid           => i.pgid,
                                  p_inst_prem      => i2.installment_premium,
                                  p_life_prem      => i.life_premium,
                                  p_suppl_prem     => i.suppl_prem,
                                  p_inst_date      => i2.next_due_dt,
                                  p_com_exe_date   => p_com_exe_date,
                                  p_fy_start_dt    => p_fy_start_dt,
                                  p_fy_end_dt      => p_fy_end_dt,
                                  p_product_cd     => i.product_cd,
                                  p_term           => i.term,
                                  p_prem_yr        => i2.prem_yr,
                                  p_earning_type   => NULL,
                                  p_object_cd      => p_object_cd,
                                  p_ins_tp_cd      => i.ins_tp_cd,
                                  p_receive_date   => i.receive_date,
                                  p_onestop_flag   => v_onestop_flag,
                                  p_user           => p_user,
                                  p_proc_rec_cnt   => v_earn_rec_cnt,
                                  p_error          => v_comm_error);

         IF v_comm_error IS NOT NULL
         THEN
            ROLLBACK;
         --EXIT;
         ELSE
            IF v_last_due_dt_of_com_exe = i.due_dt_to
            THEN
               UPDATE   acc_receivables
                  SET   status = '1',
                        u_usr = p_user,
                        u_dt = SYSDATE,
                        com_calculated = 'Y',
                        com_exe_date = p_com_exe_date,
                        last_due_dt_of_com_exe = v_last_due_dt_of_com_exe
                WHERE   receive_id = i.receive_id;
            ELSE
               UPDATE   acc_receivables
                  SET   u_usr = p_user,
                        u_dt = SYSDATE,
                        last_due_dt_of_com_exe = v_last_due_dt_of_com_exe
                WHERE   receive_id = i.receive_id;
            END IF;

            COMMIT;
            p_valid_record_count := NVL (p_valid_record_count, 0) + 1;
         END IF;
      END LOOP;
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      p_errm := 'Advance Commission: ' || SQLERRM;
      ROLLBACK;
END pro_adv_prem_calc_commission;
/


--
-- PRO_FA_1ST_PREM_COMM_CALC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_fa_1st_prem_comm_calc (
   p_office_cd            IN       VARCHAR2,
   p_descendant_flag      IN       VARCHAR2,
   p_agent_id             IN       VARCHAR2,
   p_ins_tp_cd            IN       ins_insurance_type.ins_tp_cd%TYPE,
   p_pgid                 IN       VARCHAR2,
   p_coll_dt_from         IN       DATE,
   p_coll_dt_to           IN       DATE,
   p_com_exe_date         IN       DATE,
   p_fy_start_dt          IN       DATE,
   p_fy_end_dt            IN       DATE,
   p_object_cd            IN       VARCHAR2,
   p_user                 IN       VARCHAR2,
   p_error                OUT      VARCHAR2,
   p_valid_record_count   OUT      NUMBER
)
IS
/******************************************************************************
   NAME:       pro_1st_prem_calc_commission
   PURPOSE:    Agent Commission  Calculation for first premium

   REVISIONS:
   Ver        Date          Author                  Description
   ---------  ----------    ---------------         ---------------------------
   1.0        07-Mar-2011   Mohammad Arifur Rahman  3. Create the process.
   1.1        14-Feb-2013   Md. Sayadur Rahaman     3. Modified for Accounts Integration
   2.1        16-Feb-2014   Syed Md. Musha          Modify this process as per new business setup
******************************************************************************/

   ---------------------------------------
   v_fy_status      NUMBER (1)      := 1;
   v_comm_error     VARCHAR2 (2000);
   v_earn_rec_cnt   NUMBER (5)      := 0;
   v_onestop_flag   NUMBER (1);
BEGIN
   SELECT COUNT (1)
     INTO v_fy_status
     FROM acc_fiscal_year
    WHERE fy_close = 0                                                  --Open
          AND fy_st_dt < p_fy_start_dt;

   FOR i IN
      (SELECT   a.receive_id, a.receive_date, a.pgid, a.coll_amount,
                1 installment_no_from, 1 installment_no_to, a.office_code,
                a.receive_mode, a.vouch_ref, a.interoffice_voucher, a.status,
                s.comm_date, s.agent_id, s.product_cd, s.term, s.pay_mode_cd,
                NVL (s.installment_premium, 0) installment_premium,
                NVL (s.life_premium, 0) life_premium,
                  NVL (s.suppl_ben_premium, 0)
                + NVL (s.suppl_product_premium, 0) suppl_prem,
                p.paidup_age paidupage,
                /*CEIL ((s.last_paid_inst_no * s.term) / s.policy_installment
                     )*/  --Disable by Musha on 17.07.2018 and premium year for first premium is always 1
                1 prem_yr, a.active_office_cd
           FROM v_advance_receivables a,
                ins_p_summery s,
                ins_product p,
                hrm_agent g
          WHERE a.pgid = NVL (p_pgid, a.pgid)
            AND s.pgid = NVL (p_pgid, s.pgid)
            AND s.agent_id = NVL (p_agent_id, s.agent_id)
            AND g.license_valid_to_dt >= TRUNC (SYSDATE) --Musha on 12.10.2021
            AND s.ins_tp_cd = NVL(p_ins_tp_cd,s.ins_tp_cd)
            AND a.status = '1'
            AND a.rec_status = '1'
            /*AND (   (    NVL (p_descendant_flag, '0') = '0'
                     AND a.active_office_cd =
                                         NVL (p_office_cd, a.active_office_cd)
                    )
                 OR (    NVL (p_descendant_flag, '0') = '1'
                     AND a.active_office_cd IN (
                                  SELECT     office_cd
                                        FROM hrm_office_setup
                                  START WITH office_cd = p_office_cd
                                  CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                    )
                )*/
            AND (   (    NVL (p_descendant_flag, '0') = '0'
                     AND g.office_cd = NVL (p_office_cd, g.office_cd)
                    )
                 OR (    NVL (p_descendant_flag, '0') = '1'
                     AND g.office_cd IN (
                                  SELECT     office_cd
                                        FROM hrm_office_setup
                                  START WITH office_cd = p_office_cd
                                  CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                    )
                )
            AND EXISTS (
                   SELECT 1
                     FROM ins_prem_acc_receivable ipac
                    WHERE ipac.pay_status = 1
                      AND ipac.proposed_status = '1'
                      AND ipac.fp_receive_id = a.receive_id)
            AND NVL (a.com_calculated, 'N') = 'N'
            AND NVL (a.cheque_deposit, 'N') =
                   DECODE (a.receive_mode,
                           '1', NVL (a.cheque_deposit, 'N'),
                           '3', NVL (a.cheque_deposit, 'N'),
                           '4', NVL (a.cheque_deposit, 'N'),
                           '5', NVL (a.cheque_deposit, 'N'),
                           '7', NVL (a.cheque_deposit, 'N'),
                           'Y'
                          )
            AND NVL (a.coll_slip_rec_dt, a.receive_date) BETWEEN p_coll_dt_from
                                                             AND p_coll_dt_to
                                                  --Add by Musha on 18-06-2015
            AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date),
                         'dd/mm/rrrr'
                        ) <= TO_DATE (p_com_exe_date, 'dd/mm/rrrr')
            AND (   (    v_fy_status = 0
                     AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date),
                                  'dd/mm/rrrr'
                                 ) <= TO_DATE (p_fy_end_dt, 'dd/mm/rrrr')
                    )
                 OR (    v_fy_status >= 1
                     AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date),
                                  'dd/mm/rrrr'
                                 ) BETWEEN TO_DATE (p_fy_start_dt,
                                                    'dd/mm/rrrr'
                                                   )
                                       AND TO_DATE (p_fy_end_dt, 'dd/mm/rrrr')
                    )
                )
            AND a.pgid = s.pgid
            AND s.product_cd = p.product_cd
            AND s.agent_id = g.agent_id
       ORDER BY a.pgid, a.receive_id)
   LOOP
      IF i.active_office_cd = '23717' THEN
        v_onestop_flag := 1;
     ELSE
        v_onestop_flag := 0;
     END  IF;
         
      pro_fa_per_trns_ear_cal (p_agent_id          => i.agent_id,
                               p_pgid              => i.pgid,
                               p_inst_prem         => i.installment_premium,
                               p_life_prem         => i.life_premium,
                               p_suppl_prem        => i.suppl_prem,
                               p_inst_date         => i.comm_date,
                               p_com_exe_date      => p_com_exe_date,
                               p_fy_start_dt       => p_fy_start_dt,
                               p_fy_end_dt         => p_fy_end_dt,
                               p_product_cd        => i.product_cd,
                               p_term              => i.term,
                               p_prem_yr           => i.prem_yr,
                               p_earning_type      => NULL,
                               p_object_cd         => p_object_cd,
                               p_ins_tp_cd         => p_ins_tp_cd,
                               p_receive_date      => i.receive_date,
                               p_onestop_flag      => v_onestop_flag,
                               p_user              => p_user,
                               p_proc_rec_cnt      => v_earn_rec_cnt,
                               p_error             => v_comm_error
                              );

      IF v_comm_error IS NULL
      THEN
         IF v_earn_rec_cnt > 0
         THEN
            UPDATE acc_advance_receivables
               SET u_usr = p_user,
                   u_dt = SYSDATE,
                   com_calculated = 'Y',
                   com_exe_date = p_com_exe_date
             WHERE receive_id = i.receive_id;

            p_valid_record_count := NVL (p_valid_record_count, 0) + 1;
            COMMIT;
         END IF;
      ELSE
         ROLLBACK;
         p_error := v_comm_error;
      END IF;
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      p_error := 'ERROR: Other Error: ' || SQLERRM;
      ROLLBACK;
END pro_fa_1st_prem_comm_calc;
/


--
-- PRO_FA_COMM_CALC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INS.pro_fa_comm_calc (
   p_office_cd            IN       VARCHAR2,
   p_descendant_flag      IN       VARCHAR2,
   p_agent_id             IN       VARCHAR2,
   /*p_pgid_tb              IN       pgid_tbl,*/
   p_pgid                 IN       ins_p_proposal.pgid%TYPE,
   p_ins_tp_cd            IN       ins_insurance_type.ins_tp_cd%TYPE,
   p_coll_dt_from         IN       DATE,
   p_coll_dt_to           IN       DATE,
   p_comm_yr_from         IN       NUMBER,
   p_comm_yr_to           IN       NUMBER,
   p_com_exe_date         IN       DATE,
   p_fy_start_dt          IN       DATE,
   p_fy_end_dt            IN       DATE,
   p_object_cd            IN       VARCHAR2,
   p_user                 IN       VARCHAR2,
   p_error                OUT      VARCHAR2,
   p_valid_record_count   OUT      NUMBER
)
IS
   /******************************************************************************
       NAME:       pro_fa_comm_calc
       PURPOSE:    Agent Commission  Calculation for defard and renual premium collection

       REVISIONS:
       Ver        Date          Author                  Description
       ---------  ----------    ---------------         ---------------------------
       1.0        12/21/2008    S.M.SHOHEL Rana         1. Created this procedure.
       1.2        07/01/2010    S.M.Shohel Rana         2. Updated this procedure
                                                           by adding late fee and
                                                           waiver
       2.0        15-Jul-2010   Mohammad Arifur Rahman  3. Modify the process for
                                                           only commissioning not
                                                           adjustment.
       2.1        20-Mar-2012   Syed Md. Musha          4. Process all collection
                                                           received in closed fiscal
                                                           year in least open fiscal
                                                           year.
      3.0        11-Sep-2012    Md. Sayadur Rahaman     5. Update for due to integration with new accounting system
      4.0         02-03-2014    Syed Md. Musha          6. Modify this procedure
    ******************************************************************************/
   v_comm_error     VARCHAR2 (200);
   -- for commisiion process error message
   v_fy_status      NUMBER (1)     := 1;
   v_earn_rec_cnt   NUMBER (5)     := 0;
   --v_pgid_cnt       NUMBER (5)     := p_pgid_tb.COUNT;   ---Musha on 30.03.2016
   v_onestop_flag   NUMBER (1);

   CURSOR cur_coll (p_fy_status NUMBER)  --, p_pgid_cnt NUMBER
   IS
      SELECT   a.receive_id,
               NVL (a.coll_slip_rec_dt, a.receive_date) receive_date, a.pgid,
               a.coll_amount, a.due_dt_from, a.due_dt_to,
               a.installment_no_from, a.installment_no_to,
               ABS (NVL (a.late_fee, 0) - NVL (a.latefee_waiver, 0))
                                                                    late_fee,
               a.office_code, a.receive_mode, a.vouch_ref,
               a.interoffice_voucher, a.status, a.tot_premium_amt,
               s.comm_date, s.agent_id, s.product_cd, s.term, s.pay_mode_cd,
               a.avl_sus_amt, p.paidup_age paidupage,
               a.last_due_dt_of_com_exe, a.adv_status, s.policy_installment,
               NVL (s.life_premium, 0) life_premium,
                 NVL (s.suppl_ben_premium, 0)
               + NVL (s.suppl_product_premium, 0) suppl_prem,
               s.ins_tp_cd, '0' service_charge_st, a.active_office_cd
          FROM acc_receivables a, ins_p_summery s, ins_product p, hrm_agent g
         WHERE /*(p_pgid_cnt = 0 OR a.pgid IN (SELECT *
                                               FROM TABLE (p_pgid_tb)))
           AND (p_pgid_cnt = 0 OR s.pgid IN (SELECT *
                                               FROM TABLE (p_pgid_tb)))*/  ---Musha on 30.03.2016
               a.pgid = NVL(p_pgid, a.pgid)
           AND s.pgid = NVL(p_pgid, s.pgid)
           AND a.rec_status = '1'
           AND a.status = '1'
           AND NVL (a.adv_status, 0) = '0'
           AND s.ins_tp_cd = NVL (p_ins_tp_cd, s.ins_tp_cd)
           AND s.agent_id = NVL (p_agent_id, s.agent_id)
           AND g.license_valid_to_dt >= TRUNC (SYSDATE) --Musha on 12.10.2021
           AND EXISTS (SELECT 1
                         FROM hrm_agent g
                        WHERE g.agent_id = s.agent_id)
           AND NOT EXISTS (SELECT 1
                             FROM acc_coll_service_charge c
                            WHERE c.pgid = a.pgid
                              AND c.receive_id = a.receive_id)
                        
           /*AND (   (    NVL (p_descendant_flag, '0') = '0'
                    AND a.active_office_cd =
                                         NVL (p_office_cd, a.active_office_cd)
                   )
                OR (    NVL (p_descendant_flag, '0') = '1'
                    AND a.active_office_cd IN (
                                  SELECT     office_cd
                                        FROM hrm_office_setup
                                  START WITH office_cd = p_office_cd
                                  CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                   )
               )*/          --Musha on 10-06-2015
           AND (   (    NVL (p_descendant_flag, '0') = '0'
                    AND g.office_cd =
                                         NVL (p_office_cd, g.office_cd)
                   )
                OR (    NVL (p_descendant_flag, '0') = '1'
                    AND g.office_cd IN (
                                  SELECT     office_cd
                                        FROM hrm_office_setup
                                  START WITH office_cd = p_office_cd
                                  CONNECT BY PRIOR office_cd =
                                                             control_office_cd)
                   )
               )  ---Add by musha on 10-06-2015
           /*AND EXISTS (
              SELECT 1
                FROM ins_prem_acc_receivable ipac
               WHERE ipac.pay_status <> 0
                 AND ipac.proposed_status = '1'
                 AND ipac.proposer_pk = a.receive_id)*/ ---Musha on 12-02-2015
           AND (NVL (a.com_calculated, 'N') = 'N'
                OR (    a.com_calculated = 'Y'
                      AND (a.installment_no_to - a.installment_no_from + 1) >
                             (SELECT COUNT (DISTINCT prem_due_dt)
                                FROM com_agent_com_detail
                               WHERE prem_due_dt BETWEEN a.due_dt_from AND a.due_dt_to
                                 AND pgid = a.pgid)
                     )
                )
           /*AND NVL (a.cheque_deposit, 'N') =
                  DECODE (a.receive_mode,
                          '1', NVL (a.cheque_deposit, 'N'),
                          '3', NVL (a.cheque_deposit, 'N'),
                          'Y'
                         )*/ ---Musha on 04-10-2015 because of this condition already check at adjustment
           AND (   p_comm_yr_from IS NULL
                OR (    p_comm_yr_from IS NOT NULL
                    AND  CEIL (a.installment_no_from
                        / DECODE (s.pay_mode_cd,
                                  '01', 1,
                                  '02', 2,
                                  '03', 4,
                                  '04', 12,
                                  1
                                 )) BETWEEN p_comm_yr_from AND p_comm_yr_to
                   )
               )
           AND NVL (a.coll_slip_rec_dt, a.receive_date) BETWEEN p_coll_dt_from
                                                            AND p_coll_dt_to
                                                  --Add by Musha on 13-04-2015
           AND NVL (a.coll_slip_rec_dt, a.receive_date) > TO_DATE ('31/05/2015', 'dd/mm/rrrr')
           ---Add by Musha on 30.11.2015 due to SLIC requirement
           AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date),
                        'dd/mm/rrrr') <=
                                        TO_DATE (p_com_exe_date, 'dd/mm/rrrr')
           AND (   (    p_fy_status = 0
                    AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date),
                                 'dd/mm/rrrr'
                                ) <= TO_DATE (p_fy_end_dt, 'dd/mm/rrrr')
                   )
                OR (    p_fy_status > 0
                    AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date),
                                 'dd/mm/rrrr'
                                ) BETWEEN TO_DATE (p_fy_start_dt,
                                                   'dd/mm/rrrr')
                                      AND TO_DATE (p_fy_end_dt, 'dd/mm/rrrr')
                   )
               )
           AND a.i_usr <> 'SLICL'
           AND a.pgid = s.pgid
           AND s.product_cd = p.product_cd
           AND s.agent_id = g.agent_id
      UNION ALL
      ---Add this cursor by musha on 28-02-2016
      ---Service charge as per FA application
      SELECT a.receive_id, NVL (a.coll_slip_rec_dt, a.receive_date) receive_date,
             a.pgid, a.coll_amount, a.due_dt_from, a.due_dt_to,
             a.installment_no_from, a.installment_no_to,
             ABS (NVL (a.late_fee, 0) - NVL (a.latefee_waiver, 0)) late_fee,
             a.office_code, a.receive_mode, a.vouch_ref, a.interoffice_voucher,
             a.status, a.tot_premium_amt, s.comm_date, g.agent_id, s.product_cd,
             s.term, s.pay_mode_cd, a.avl_sus_amt, p.paidup_age paidupage,
             a.last_due_dt_of_com_exe, a.adv_status, s.policy_installment,
             NVL (s.life_premium, 0) life_premium,
               NVL (s.suppl_ben_premium, 0)
             + NVL (s.suppl_product_premium, 0) suppl_prem,
             s.ins_tp_cd, '1' service_charge_st, a.active_office_cd
        FROM acc_receivables a,
             ins_p_summery s,
             ins_product p,
             hrm_agent g,
             acc_coll_service_charge c
       WHERE /*(p_pgid_cnt = 0 OR a.pgid IN (SELECT *
                                             FROM TABLE (p_pgid_tb)))
         AND (p_pgid_cnt = 0 OR s.pgid IN (SELECT *
                                             FROM TABLE (p_pgid_tb)))*/
             a.pgid = NVL(p_pgid, a.pgid)
         AND s.pgid = NVL(p_pgid, s.pgid)
         AND a.rec_status = '1'
         AND a.status = '1'
         AND NVL (a.adv_status, 0) = '0'
         AND s.ins_tp_cd = NVL (p_ins_tp_cd, s.ins_tp_cd)
         AND c.agent_id = NVL (p_agent_id, c.agent_id)
         AND (   (    NVL (p_descendant_flag, '0') = '0'
                  AND g.office_cd = NVL (p_office_cd, g.office_cd)
                 )
              OR (    NVL (p_descendant_flag, '0') = '1'
                  AND g.office_cd IN (
                                      SELECT     office_cd
                                            FROM hrm_office_setup
                                      START WITH office_cd = p_office_cd
                                      CONNECT BY PRIOR office_cd =
                                                                 control_office_cd)
                 )
             )
         AND (   NVL (a.com_calculated, 'N') = 'N'
              OR (    a.com_calculated = 'Y'
                  AND (a.installment_no_to - a.installment_no_from + 1) >
                         (SELECT COUNT (DISTINCT prem_due_dt)
                            FROM com_agent_com_detail
                           WHERE prem_due_dt BETWEEN a.due_dt_from AND a.due_dt_to
                             AND pgid = a.pgid)
                 )
             )
         AND (   p_comm_yr_from IS NULL
              OR (    p_comm_yr_from IS NOT NULL
                  AND CEIL (  a.installment_no_from
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1
                                     )
                           ) BETWEEN p_comm_yr_from AND p_comm_yr_to
                 )
             )
         AND NVL (a.coll_slip_rec_dt, a.receive_date) BETWEEN p_coll_dt_from
                                                          AND p_coll_dt_to
         AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date), 'dd/mm/rrrr') <=
                                            TO_DATE (p_com_exe_date, 'dd/mm/rrrr')
         AND (   (    p_fy_status = 0
                  AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date),
                               'dd/mm/rrrr'
                              ) <= TO_DATE (p_fy_end_dt, 'dd/mm/rrrr')
                 )
              OR (    p_fy_status > 0
                  AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date),
                               'dd/mm/rrrr'
                              ) BETWEEN TO_DATE (p_fy_start_dt, 'dd/mm/rrrr')
                                    AND TO_DATE (p_fy_end_dt, 'dd/mm/rrrr')
                 )
             )
         AND a.i_usr <> 'SLICL'
         AND a.pgid = s.pgid
         AND s.product_cd = p.product_cd
         AND c.agent_id = g.agent_id
         AND a.pgid = c.pgid
         AND a.receive_id = c.receive_id
      ORDER BY pgid, receive_id;
      
    ---Add this cursor by musha on 28-02-2016
    ---Service charge as per FA application
   CURSOR cur_coll_ser (p_fy_status NUMBER--, p_pgid_cnt NUMBER
   )
   IS
      SELECT a.receive_id, NVL (a.coll_slip_rec_dt, a.receive_date) receive_date,
             a.pgid, a.coll_amount, a.due_dt_from, a.due_dt_to,
             a.installment_no_from, a.installment_no_to,
             ABS (NVL (a.late_fee, 0) - NVL (a.latefee_waiver, 0)) late_fee,
             a.office_code, a.receive_mode, a.vouch_ref, a.interoffice_voucher,
             a.status, a.tot_premium_amt, s.comm_date, g.agent_id, s.product_cd,
             s.term, s.pay_mode_cd, a.avl_sus_amt, p.paidup_age paidupage,
             a.last_due_dt_of_com_exe, a.adv_status, s.policy_installment,
             NVL (s.life_premium, 0) life_premium,
               NVL (s.suppl_ben_premium, 0)
             + NVL (s.suppl_product_premium, 0) suppl_prem,
             s.ins_tp_cd
        FROM acc_receivables a,
             ins_p_summery s,
             ins_product p,
             hrm_agent g,
             acc_coll_service_charge c
       WHERE /*(p_pgid_cnt = 0 OR a.pgid IN (SELECT *
                                             FROM TABLE (p_pgid_tb)))
         AND (p_pgid_cnt = 0 OR s.pgid IN (SELECT *
                                             FROM TABLE (p_pgid_tb)))*/
             a.pgid = NVL(p_pgid, a.pgid)
         AND s.pgid = NVL(p_pgid, s.pgid)
         AND c.pgid = NVL(p_pgid, c.pgid)
         AND a.rec_status = '1'
         AND a.status = '1'
         AND NVL (a.adv_status, 0) = '0'
         AND s.ins_tp_cd = NVL (p_ins_tp_cd, s.ins_tp_cd)
         AND c.agent_id = NVL (p_agent_id, c.agent_id)
         AND (   (    NVL (p_descendant_flag, '0') = '0'
                  AND g.office_cd = NVL (p_office_cd, g.office_cd)
                 )
              OR (    NVL (p_descendant_flag, '0') = '1'
                  AND g.office_cd IN (
                                      SELECT     office_cd
                                            FROM hrm_office_setup
                                      START WITH office_cd = p_office_cd
                                      CONNECT BY PRIOR office_cd =
                                                                 control_office_cd)
                 )
             )
         AND (   NVL (a.com_calculated, 'N') = 'N'
              OR (    a.com_calculated = 'Y'
                  AND (a.installment_no_to - a.installment_no_from + 1) >
                         (SELECT COUNT (DISTINCT prem_due_dt)
                            FROM com_agent_com_detail
                           WHERE prem_due_dt BETWEEN a.due_dt_from AND a.due_dt_to
                             AND pgid = a.pgid)
                 )
             )
         AND (   p_comm_yr_from IS NULL
              OR (    p_comm_yr_from IS NOT NULL
                  AND CEIL (  a.installment_no_from
                            / DECODE (s.pay_mode_cd,
                                      '01', 1,
                                      '02', 2,
                                      '03', 4,
                                      '04', 12,
                                      1
                                     )
                           ) BETWEEN p_comm_yr_from AND p_comm_yr_to
                 )
             )
         AND NVL (a.coll_slip_rec_dt, a.receive_date) BETWEEN p_coll_dt_from
                                                          AND p_coll_dt_to
         AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date), 'dd/mm/rrrr') <=
                                            TO_DATE (p_com_exe_date, 'dd/mm/rrrr')
         AND (   (    p_fy_status = 0
                  AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date),
                               'dd/mm/rrrr'
                              ) <= TO_DATE (p_fy_end_dt, 'dd/mm/rrrr')
                 )
              OR (    p_fy_status > 0
                  AND TO_DATE (NVL (a.coll_slip_rec_dt, a.receive_date),
                               'dd/mm/rrrr'
                              ) BETWEEN TO_DATE (p_fy_start_dt, 'dd/mm/rrrr')
                                    AND TO_DATE (p_fy_end_dt, 'dd/mm/rrrr')
                 )
             )
         AND a.i_usr <> 'SLICL'
         AND a.pgid = s.pgid
         AND s.product_cd = p.product_cd
         AND c.agent_id = g.agent_id
         AND a.pgid = c.pgid
         AND a.receive_id = c.receive_id
    ORDER BY a.pgid, a.receive_id;
BEGIN
   -- for journal voucher
   SELECT COUNT (1)
     INTO v_fy_status
     FROM acc_fiscal_year
    WHERE fy_close = 0 AND fy_st_dt < p_fy_start_dt;

   FOR i IN cur_coll (v_fy_status)  --, v_pgid_cnt
   LOOP
      FOR i2 IN (SELECT   a.installment_premium, a.pgid, a.installment_no,
                          a.pay_status, a.next_due_dt, a.sl_no demand_sl,
                          a.total_installment,
                          CEIL (  (a.installment_no * i.term)
                                / i.policy_installment
                               ) prem_yr
                     FROM ins_prem_acc_receivable a
                    WHERE a.proposer_pk = i.receive_id
                      AND a.pgid = i.pgid
                      AND a.proposed_status IN ('1', '4')
                      AND a.pay_status <> 0
                      AND NOT EXISTS (
                             SELECT 1
                               FROM com_agent_com_detail
                              WHERE prem_due_dt = a.next_due_dt
                                AND pgid = a.pgid)
                 ORDER BY a.installment_no)
      LOOP
         IF i.active_office_cd = '23717' THEN
            v_onestop_flag := 1;
         ELSE
            v_onestop_flag := 0;
         END  IF;
         
         pro_fa_per_trns_ear_cal (p_agent_id          => i.agent_id,
                                  p_pgid              => i.pgid,
                                  p_inst_prem         => i2.installment_premium,
                                  p_life_prem         => i.life_premium,
                                  p_suppl_prem        => i.suppl_prem,
                                  p_inst_date         => i2.next_due_dt,
                                  p_com_exe_date      => p_com_exe_date,
                                  p_fy_start_dt       => p_fy_start_dt,
                                  p_fy_end_dt         => p_fy_end_dt,
                                  p_product_cd        => i.product_cd,
                                  p_term              => i.term,
                                  p_prem_yr           => i2.prem_yr,
                                  p_earning_type      => NULL,
                                  p_object_cd         => p_object_cd,
                                  p_ins_tp_cd         => i.ins_tp_cd,
                                  p_receive_date      => i.receive_date,
                                  p_onestop_flag      => v_onestop_flag,
                                  p_user              => p_user,
                                  p_proc_rec_cnt      => v_earn_rec_cnt,
                                  p_error             => v_comm_error
                                 );
      END LOOP;

      IF v_comm_error IS NULL
      THEN
         IF v_earn_rec_cnt > 0
         THEN
            UPDATE acc_receivables
               SET com_calculated = 'Y',
                   com_exe_date = p_com_exe_date,
                   u_usr = p_user,
                   u_dt = SYSDATE
             WHERE receive_id = i.receive_id;

            p_valid_record_count := NVL (p_valid_record_count, 0) + 1;
            COMMIT;
         END IF;
      ELSE
         p_error := v_comm_error;
         ROLLBACK;
      END IF;
   END LOOP;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_error := 'ERROR: Data not found for adjustment process.';
      ROLLBACK;
   WHEN OTHERS
   THEN
      p_error := 'ERROR: Other error than NO_DATA_FOUND: ' || SQLERRM;
      ROLLBACK;
END pro_fa_comm_calc;
/


--
-- PRO_FA_1ST_PREM_COMM_CALC  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_FA_1ST_PREM_COMM_CALC FOR INS.PRO_FA_1ST_PREM_COMM_CALC;


--
-- PRO_FA_COMM_CALC  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_FA_COMM_CALC FOR INS.PRO_FA_COMM_CALC;


--
-- PRO_ADV_PREM_CALC_COMMISSION  (Synonym) 
--
CREATE PUBLIC SYNONYM PRO_ADV_PREM_CALC_COMMISSION FOR INS.PRO_ADV_PREM_CALC_COMMISSION;


GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO INS_WEB;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PRO_COLL_SL_NO TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PRO_PAR_COLL_DUE_CALC TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PRO_SERVICE_ID TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PRO_UNADJ_COLL_DUE_CALC TO RL_ACC_AGE;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_COLL_SL_NO TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_LOAN_RECOVERY_ADJ TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_LOAN_RE_SCHEDULE TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_PAR_COLL_DUE_CALC TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_POL_LOAN_COLL_SL_NO TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_UNADJ_COLL_DUE_CALC TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_BANK;

GRANT EXECUTE ON INS.PRO_BANK_RECONCILE TO RL_ACC_BANK_REC;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_BANK_REC;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_CASH_HEAD_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_CASH_TRF;

GRANT EXECUTE ON INS.PRO_GRP_DEMAND_NOTC_PREP TO RL_ACC_CASH_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_CEN_HEADOFF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_CHEQ_ISSU;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_CH_HEAD;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_ACC_INCHARGE_SER;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_INCHARGE_SER;

GRANT EXECUTE ON INS.PRO_COLL_SL_NO TO RL_ACC_INCHARGE_SER;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_ACC_INCHARGE_SER;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PRO_LOAN_RECOVERY_ADJ TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PRO_LOAN_RE_SCHEDULE TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PRO_POL_LOAN_COLL_SL_NO TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_COLL_SL_NO TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_LOAN_RECOVERY_ADJ TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_LOAN_RE_SCHEDULE TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_POL_LOAN_COLL_SL_NO TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_ACC_ORG_TRF_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_ORG_TRF_RPT;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_ACC_ORG_TRF_RPT;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_ACC_ORG_TRF_RPT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_ACC_ORG_TRF_RPT;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_ACC_OROCESS_ORG;

GRANT EXECUTE ON INS.PRO_LOAN_RECOVERY_ADJ TO RL_ACC_OROCESS_ORG;

GRANT EXECUTE ON INS.PRO_LOAN_RE_SCHEDULE TO RL_ACC_OROCESS_ORG;

GRANT EXECUTE ON INS.PRO_POL_LOAN_COLL_SL_NO TO RL_ACC_OROCESS_ORG;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_ACC_POLICY_LOAN;

GRANT EXECUTE ON INS.PRO_LOAN_RECOVERY_ADJ TO RL_ACC_POLICY_LOAN;

GRANT EXECUTE ON INS.PRO_LOAN_RE_SCHEDULE TO RL_ACC_POLICY_LOAN;

GRANT EXECUTE ON INS.PRO_POL_LOAN_COLL_SL_NO TO RL_ACC_POLICY_LOAN;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_ACC_RPT_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_SALARY_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_TAX_RPT;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_BANK_RECONCILE TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_COLL_SL_NO TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_RECOVERY_ADJ TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_RE_SCHEDULE TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_POL_LOAN_COLL_SL_NO TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_TRF_IT;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_ACC_TRF_IT;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_COLL_SL_NO TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_LOAN_RECOVERY_ADJ TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_LOAN_RE_SCHEDULE TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_POL_LOAN_COLL_SL_NO TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ADDRESS_ALT_APPLICATION;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ADMIN_LOAN;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ADMIN_OFFICE;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_ALTERATION_APPLICATION_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ALTERATION_APPLICATION_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_ALTERATION_APPLICATION_TRF;

GRANT EXECUTE ON INS.PRO_AGENT_BILL_COLL_UNDO TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_CALAC TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_COLL_MEDIA_NO_GEN TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_INS_FIND_POLICY_CAT TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_LOAN_RECOVERY_ADJ TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_LOAN_RE_SCHEDULE TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_POLICY_LIST_CREATION TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_POL_LOAN_COLL_SL_NO TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_PROPOSAL_ACCPTBLE_STAT TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_RE_INSUR_POLICY_INFO TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_RE_INSUR_STATUS TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_RISK_DATE_VALIDATE TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_BANK_RECON_PAYMENT_ADVICE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_BM_COLLECTION_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_BM_COLLECTION_TRF;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_COLL_SL_NO TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_LOAN_RECOVERY_ADJ TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_LOAN_RE_SCHEDULE TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_PAR_COLL_DUE_CALC TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_POL_LOAN_COLL_SL_NO TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_SERVICE_ID TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_UNADJ_COLL_DUE_CALC TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_CASHIER_02;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CASHIER_02;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CASH_RPT;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PRO_COLL_SL_NO TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CHEQUE_ISSU_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CHEQUE_TRF_HEAD;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_ACC_HEAD;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_CLAIM_APPLICATION_APPROVAL;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_APPLICATION_APPROVAL;

GRANT EXECUTE ON INS.PRO_SHORT_PREMIUM TO RL_CLAIM_APPLICATION_APPROVAL;

GRANT EXECUTE ON INS.PRO_UNADJ_PREM_INFO TO RL_CLAIM_APPLICATION_APPROVAL;

GRANT EXECUTE ON INS.PRO_USER_APPROVAL_PRIV TO RL_CLAIM_APPLICATION_APPROVAL;

GRANT EXECUTE ON INS.PRO_CLM_PAY_APPROVAL_STAT TO RL_CLAIM_APPROVAL;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_APPROVAL;

GRANT EXECUTE ON INS.PRO_COLL_SL_NO TO RL_CLAIM_APPROVAL;

GRANT EXECUTE ON INS.PRO_USER_APPROVAL_PRIV TO RL_CLAIM_APPROVAL;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_AUDIT_RPT;

GRANT EXECUTE ON INS.PRO_AGENT_BILL_COLL_UNDO TO RL_CLAIM_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CLAIM_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER TO RL_CLAIM_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER_SPECIFIC TO RL_CLAIM_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_CLAIM_HEAD_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_HEAD_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_CLAIM_HEAD_TRF;

GRANT EXECUTE ON INS.PRO_SHORT_PREMIUM TO RL_CLAIM_HEAD_TRF;

GRANT EXECUTE ON INS.PRO_UNADJ_PREM_INFO TO RL_CLAIM_HEAD_TRF;

GRANT EXECUTE ON INS.PRO_USER_APPROVAL_PRIV TO RL_CLAIM_HEAD_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_NR_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CLAIM_NR_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_ONESTOP;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_CLAIM_PROSS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_PROSS;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_CLAIM_PROSS;

GRANT EXECUTE ON INS.PRO_SHORT_PREMIUM TO RL_CLAIM_PROSS;

GRANT EXECUTE ON INS.PRO_UNADJ_PREM_INFO TO RL_CLAIM_PROSS;

GRANT EXECUTE ON INS.PRO_USER_APPROVAL_PRIV TO RL_CLAIM_PROSS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_RPT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CLAIM_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_RPT_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CLAIM_RPT_TRF;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_CLAIM_RPT_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_SP_HEAD;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_BANK_RECONCILE TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_SHORT_PREMIUM TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_SUR_APP_SL_NO TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_UNADJ_PREM_INFO TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_USER_APPROVAL_PRIV TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CLAIM_TRF_ORG;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_CLAIM_TRF_ORG;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_CLAIM_TRF_ORG;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_CLAIM_TRF_ORG;

GRANT EXECUTE ON INS.PRO_SUR_APP_SL_NO TO RL_CLAIM_TRF_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CMC_INCHARGE;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_CMC_INCHARGE;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CMC_INCHARGE;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_CALAC TO RL_CMS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CMS;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_CMS;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_CMS;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_CMS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CMS_BILL_DISBUSEMENT;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_CALAC TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_FP_SINGLE_DEMAND_NOTC_PREP TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CMS_ORGOFF_TRR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CMS_PRF;

GRANT EXECUTE ON INS.PRO_AGENT_BILL_COLL_UNDO TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_CALAC TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_FP_SINGLE_DEMAND_NOTC_PREP TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_CALAC TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_FP_SINGLE_DEMAND_NOTC_PREP TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PRO_FP_SINGLE_DEMAND_NOTC_PREP TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CMS_TRR;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_CMS_TRR;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_CMS_TRR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_CMS_TRR2;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_COLLECTION_LIMITE_TRF;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_COLLECTION_RPT;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_CALAC TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_FP_SINGLE_DEMAND_NOTC_PREP TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_CALAC TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_FP_SINGLE_DEMAND_NOTC_PREP TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_DALIL_SP_HEAD;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DALIL_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_DALIL_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DATA_ENTRY_INFORMATION_RPT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_DEATH_CLAIIM_RFT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DEATH_CLAIM_INCHARGE;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_DEATH_CLAIM_INCHARGE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DEATH_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_DEATH_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_DEATH_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_DEATH_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_DEPUTY_DEAH_CLAIM;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DEPUTY_DEAH_CLAIM;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_DEPUTY_DEAH_CLAIM;

GRANT EXECUTE ON INS.PRO_SHORT_PREMIUM TO RL_DEPUTY_DEAH_CLAIM;

GRANT EXECUTE ON INS.PRO_UNADJ_PREM_INFO TO RL_DEPUTY_DEAH_CLAIM;

GRANT EXECUTE ON INS.PRO_USER_APPROVAL_PRIV TO RL_DEPUTY_DEAH_CLAIM;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DEPUTY_LICEN_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DEPUTY_UNDER;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_DEPUTY_UNDER;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DEPUTY_UNDER_PRF;

GRANT EXECUTE ON INS.PRO_POLICY_LIST_CREATION TO RL_DEPUTY_UNDER_PRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_DEPUTY_UNDER_PRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_DEPUTY_UPDATE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DES_PRF_FILE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DES_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_DES_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DEV_ADMIN_TRF;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_DEV_ADMIN_TRF;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_DEV_EMP_SALARY_BILL_RPT;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_DEV_HEAD_ACC;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DEV_INCHARGE;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_DEV_INCHARGE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DEV_PERSONAL_INF_UPDATE_TRF;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_DEV_PERSONAL_INF_UPDATE_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DEV_SALARY_PROCESS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DRAF_SHEET;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_DRC_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_EMP_PERSONAL_INF_EDIT_TRF;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_EMP_PERSONAL_INF_EDIT_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_FA_ORG_AGENT_PER;

GRANT EXECUTE ON INS.PRO_POLICY_LIST_CREATION TO RL_GENERATE_POLICY_LIST;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_GEN_LOGIN;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_GEN_LOGIN;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_GRATU_TRF;

GRANT EXECUTE ON INS.PRO_GRATUITY_PROVISION_CAL TO RL_GRATU_TRF;

GRANT EXECUTE ON INS.PRO_GRA_GRATUITY_ELIGIBLE TO RL_GRATU_TRF;

GRANT EXECUTE ON INS.PRO_GRA_INVESTMENT_INT_CAL TO RL_GRATU_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_GROUP_PROCESS;

GRANT EXECUTE ON INS.PRO_GRP_AGENT_COMM_CAL TO RL_GROUP_PROCESS;

GRANT EXECUTE ON INS.PRO_GRP_DEMAND_NOTC_PREP TO RL_GROUP_PROCESS;

GRANT EXECUTE ON INS.PRO_GRP_PREMIUM_CALCULATION TO RL_GROUP_PROCESS;

GRANT EXECUTE ON INS.PRO_GRP_PREM_COLL_ADJUSTMENT TO RL_GROUP_PROCESS;

GRANT EXECUTE ON INS.PRO_GRP_RENEW_PREM_CALC TO RL_GROUP_PROCESS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_GROUP_TRF;

GRANT EXECUTE ON INS.PRO_PENDING_GROUP_BONUS TO RL_GROUP_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_HR_DEPUTY_RPT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_HR_DEPUTY_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_HR_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_HR_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ICD_ACC_FUND_OTHERS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_ICD_GEN_ACC_RPT;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_ICD_GEN_ACC_RPT;

GRANT EXECUTE ON INS.PRO_COLL_MEDIA_NO_GEN TO RL_ICD_PR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_INCHARGE_AUDIT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_INCHARGE_AUDIT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_INCHARGE_CASH;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_INCHARGE_CHEQUE_ACC;

GRANT EXECUTE ON INS.PRO_AGENT_BILL_COLL_UNDO TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER_SPECIFIC TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_SERVICE_ID TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_UNADJ_COLL_DUE_CALC TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_PREMIUM_COLL_SUMMERY TO RL_INCHARGE_COLLECTION;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PRO_SERVICE_ID TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PRO_UNADJ_COLL_DUE_CALC TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_INCHARGE_LICENSE;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_INCHARGE_LICENSE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_INCHARGE_MONITORING;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_INCHARGE_PR;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER TO RL_INCHARGE_PR;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER_SPECIFIC TO RL_INCHARGE_PR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_INCHARGE_UNDER;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_INCHARGE_UNDER;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_INCHARGE_UNDER_DEPUTY;

GRANT EXECUTE ON INS.PRO_INS_FIND_POLICY_CAT TO RL_INCHARGE_UNDER_DEPUTY;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_INCHARGE_UNDER_DEPUTY;

GRANT EXECUTE ON INS.PRO_PROPOSAL_ACCPTBLE_STAT TO RL_INCHARGE_UNDER_DEPUTY;

GRANT EXECUTE ON INS.PRO_RE_INSUR_STATUS TO RL_INCHARGE_UNDER_DEPUTY;

GRANT EXECUTE ON INS.PRO_RISK_DATE_VALIDATE TO RL_INCHARGE_UNDER_DEPUTY;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_IT_HEADOFFICE;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_IT_HEADOFFICE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_IT_HEAD_OFFICE_PRO;

GRANT EXECUTE ON INS.PRO_DATA_PREPARE_SMS TO RL_IT_HEAD_OFFICE_PRO;

GRANT EXECUTE ON INS.PRO_PREMIUM_COLL_SUMMERY TO RL_IT_HEAD_OFFICE_PRO;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_LICENSE_RPT_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_LICENSE_RPT_TRF_CODE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_LICENSE_TRF;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_LICENSE_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_LICENSE_TRF_CODE;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_LICENSE_TRF_CODE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_LICENSE_TRF_DEPUTY;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_LICENSE_TRF_DEPUTY;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_LOAN_APP_APPR_DISBUS_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_SCHEDULE TO RL_LOAN_APP_APPR_DISBUS_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_MB_AGENT_COLLECTION_TRF;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_MB_AGENT_COLLECTION_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_MB_AGENT_NEW_BUSINESS_RPT;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_MB_AGENT_NEW_BUSINESS_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_MB_AGENT_NEW_BUSINESS_TRF;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_MB_AGENT_NEW_BUSINESS_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_MB_AGENT_NEW_BUSINESS_TRF;

GRANT EXECUTE ON INS.PRO_COLL_MEDIA_NO_GEN TO RL_MEDIA_NO_USE_INFORMATION;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_MIGRATED_COLLECTION_TRF;

GRANT EXECUTE ON INS.PRO_FP_SINGLE_DEMAND_NOTC_PREP TO RL_MIGRATED_COLLECTION_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_MIGRATED_COLLECTION_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_MIGRATED_COLLECTION_TRF;

GRANT EXECUTE ON INS.PRO_SYNC_COMMISSION_INFO TO RL_MIGRATED_COLLECTION_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_MIGRATE_INVALID;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_MIS_RPT_ACC;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_MIS_TRF_RPT;

GRANT EXECUTE ON INS.PRO_PREMIUM_COLL_SUMMERY TO RL_MIS_TRF_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_MIS_TRR;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_MOBILE_DATA_UPDATE;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_CALAC TO RL_MODHUMOTI_AGENT_BANKING_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_MODHUMOTI_AGENT_BANKING_TRF;

GRANT EXECUTE ON INS.PRO_EMP_COLL_INC_BILL TO RL_MODHUMOTI_AGENT_BANKING_TRF;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_MODHUMOTI_AGENT_BANKING_TRF;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_MODHUMOTI_BANK_ACC_RPT;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_MODHUMOTI_BANK_ACC_RPT;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_MODHUMOTI_BANK_NEW_BUSINESS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_MODHUMOTI_BANK_NEW_BUSINESS;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_MODHUMOTI_BANK_NEW_BUSINESS;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_MODHUMOTI_BANK_NEW_BUSINESS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_MODHUMOTI_BANK_NEW_BUSI_RPT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_MODHUMOTI_BANK_NEW_BUSI_RPT;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_NB_ASSING_DEV_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_NB_ASSING_DEV_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_NB_ASSING_DEV_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_NB_ASSING_DEV_TRF;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_NB_FPR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_NB_FPR;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_NB_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_NB_ORG;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_NB_ORG;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_NB_ORG;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_NB_ORG;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_NB_ORG;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_NB_ORG;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_NB_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_NB_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_NB_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_INS_GET_MISSING_POLICY TO RL_NB_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_INS_MISSING_POLICY TO RL_NB_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_NB_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_NB_ORGOFF_TRR;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_NB_ORGOFF_TRR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_NB_PRF;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_NB_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_NB_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_NB_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_NB_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_NB_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_NB_TRR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_NR_CORRECTION_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_OFF_WISE_CLAIM_PAYMENT_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_OPERATOR;

GRANT EXECUTE ON INS.PRO_FP_SINGLE_DEMAND_NOTC_PREP TO RL_OPERATOR;

GRANT EXECUTE ON INS.PRO_OFF_MONTHS_SETUP TO RL_OPERATOR;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_OPERATOR;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_OPERATOR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PAYROLL_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_SCHEDULE TO RL_PAYROLL_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PERSONAL_INFORMATION_UPDATE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PERSONAL_INF_EDIT_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PF_TR;

GRANT EXECUTE ON INS.PRO_CPF_INVESTMENT_INT_CAL TO RL_PF_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_LIST_CREATION TO RL_PIR_PROC;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PIR_TRF;

GRANT EXECUTE ON INS.PRO_INS_FIND_POLICY_CAT TO RL_PIR_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_LIST_CREATION TO RL_PIR_TRF;

GRANT EXECUTE ON INS.PRO_PROPOSAL_ACCPTBLE_STAT TO RL_PIR_TRF;

GRANT EXECUTE ON INS.PRO_RE_INSUR_STATUS TO RL_PIR_TRF;

GRANT EXECUTE ON INS.PRO_RISK_DATE_VALIDATE TO RL_PIR_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PIR_TRR;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_PIR_TRR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_ADM_TRF;

GRANT EXECUTE ON INS.PRO_GRATUITY_PROVISION_CAL TO RL_PMIS_ADM_TRF;

GRANT EXECUTE ON INS.PRO_GRA_GRATUITY_ELIGIBLE TO RL_PMIS_ADM_TRF;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_PMIS_ADM_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_ADM_TRR;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_PMIS_ADM_TRR;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_PMIS_ADM_TRR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_DEV_ADMIN_DEPUTY;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_DEV_ADMIN_INCHARGE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_DEV_CMS_TRF;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_PMIS_DEV_CMS_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_DEV_COST_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_DEV_IT_SP;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_PMIS_DEV_IT_SP;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_DEV_RPT_MONITOR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_DEV_TRF;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_PMIS_DEV_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_DEV_TRF_INCHARGE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_DEV_TRPT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_PMIS_DEV_TRPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_DEV_TRR;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_PMIS_DEV_TRR;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_PMIS_DEV_TRR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_DEV_UTILI_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PMIS_OFFICE_CTRL_PRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_PMIS_OFFICE_CTRL_PRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_POLICY_ALT_TF;

GRANT EXECUTE ON INS.PRO_POLICY_BONUS_CAL TO RL_POLICY_BONUS_CAL_PROCESS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_POLICY_DALIL_INCHARGE;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_POLICY_DALIL_INCHARGE;

GRANT EXECUTE ON INS.PRO_POLICY_LIST_CREATION TO RL_POLICY_DALIL_INCHARGE;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_POLICY_DALIL_INCHARGE;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_POLICY_DOC_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_POLICY_DOC_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_POLICY_INF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_POLICY_INF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_POLICY_INF_CORRECTION_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_POLICY_INF_CORRECTION_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_POLICY_LOAN_RPT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_POLICY_LOAN_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_COLL_MEDIA_NO_GEN TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_RECOVERY_ADJ TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_RE_SCHEDULE TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_BONUS_CAL_SETL TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_POL_LOAN_COLL_SL_NO TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_POL_SURRENDER_VALUE TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_PRE_LOAN_POSTING TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_POLICY_REGISTER_RPT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_POLICY_RPT;

GRANT EXECUTE ON INS.PRO_POL_SCH_DT_ASGN TO RL_POLICY_SCHEDULE_DATE_GEN;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_POL_SCHEDULE_CHANGE;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_POL_SCHEDULE_CHANGE;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_PREMIUIM_COLLECTION_REPORT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_PREMIUIM_COLLECTION_REPORT;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_PREMIUM_COLL_SUMMARY_RPT;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_PROPOSAL_INFORMATION_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PROPOSAL_INFORMATION_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_PROPOSAL_INFORMATION_TRF;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_PR_CLAIM;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PR_CLAIM;

GRANT EXECUTE ON INS.PRO_SHORT_PREMIUM TO RL_PR_CLAIM;

GRANT EXECUTE ON INS.PRO_UNADJ_PREM_INFO TO RL_PR_CLAIM;

GRANT EXECUTE ON INS.PRO_USER_APPROVAL_PRIV TO RL_PR_CLAIM;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PR_DEP_TRF;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_PR_DEP_TRF;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER TO RL_PR_DEP_TRF;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER_SPECIFIC TO RL_PR_DEP_TRF;

GRANT EXECUTE ON INS.PRO_SERVICE_ID TO RL_PR_DEP_TRF;

GRANT EXECUTE ON INS.PRO_UNADJ_COLL_DUE_CALC TO RL_PR_DEP_TRF;

GRANT EXECUTE ON INS.PRO_COLL_MEDIA_NO_GEN TO RL_PR_MANAGEMENT;

GRANT EXECUTE ON INS.PRO_AGENT_BILL_COLL_UNDO TO RL_PR_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PR_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PR_TRF_OFFICE;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_PR_TRF_OFFICE;

GRANT EXECUTE ON INS.PRO_SERVICE_ID TO RL_PR_TRF_OFFICE;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_PR_TRF_OFFICE;

GRANT EXECUTE ON INS.PRO_UNADJ_COLL_DUE_CALC TO RL_PR_TRF_OFFICE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PS_DMD_RPT;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_PS_DMD_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_PS_MD;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_PS_MD;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_REIINSURANCE_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_REIINSURANCE_TRF;

GRANT EXECUTE ON INS.PRO_RE_INSUR_LAPSE_STATEMENT TO RL_REIINSURANCE_TRF;

GRANT EXECUTE ON INS.PRO_RE_INSUR_STATEMENT_ADVICE TO RL_REIINSURANCE_TRF;

GRANT EXECUTE ON INS.PRO_RE_INSUR_POLICY_INFO TO RL_REINSURANCE_PROCESS;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_REINSURANCE_RPT;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_REINSURANCE_RPT;

GRANT EXECUTE ON INS.PRO_RE_INSUR_LAPSE_STATEMENT TO RL_REINSURANCE_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_REPRINT_APPROVAL_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_REPRINT_REQUSITION;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_REPRINT_REQUSITION;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_RE_INSURANCE_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_RE_INSURANCE_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_RE_INSURANCE_TRF;

GRANT EXECUTE ON INS.PRO_RE_INSUR_LAPSE_STATEMENT TO RL_RE_INSURANCE_TRF;

GRANT EXECUTE ON INS.PRO_RE_INSUR_STATEMENT_ADVICE TO RL_RE_INSURANCE_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_RPT_AUDIT;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_RPT_AUDIT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SALARY_DEV_RPT;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_SALARY_DEV_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SALARY_DEV_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SAL_ADMIN_ACC;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SAL_DISBURSE_PROCESS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SAL_HR_PROSS;

GRANT EXECUTE ON INS.PRO_INS_FIND_POLICY_CAT TO RL_SAL_HR_PROSS;

GRANT EXECUTE ON INS.PRO_PROPOSAL_ACCPTBLE_STAT TO RL_SAL_HR_PROSS;

GRANT EXECUTE ON INS.PRO_RE_INSUR_STATUS TO RL_SAL_HR_PROSS;

GRANT EXECUTE ON INS.PRO_RISK_DATE_VALIDATE TO RL_SAL_HR_PROSS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SAL_HR_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SEC_RPT;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_SER_DEPUTY_INCHARGE;

GRANT EXECUTE ON INS.PRO_DEMAND_NOTICE TO RL_SER_PRO;

GRANT EXECUTE ON INS.PRO_LAPSE_NOTICE TO RL_SER_PRO;

GRANT EXECUTE ON INS.PRO_POLICY_BONUS_CAL TO RL_SER_PRO;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_SER_PRO;

GRANT EXECUTE ON INS.PRO_DEMAND_NOTICE TO RL_SER_PROCESS_HEAD_OFFICE;

GRANT EXECUTE ON INS.PRO_LAPSE_NOTICE TO RL_SER_PROCESS_HEAD_OFFICE;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_SER_PROCESS_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SER_REP;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SER_RPT_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SER_TRF;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_SER_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_SER_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_SER_TRF;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER TO RL_SER_TRF;

GRANT EXECUTE ON INS.PRO_SERVICE_ID TO RL_SER_TRF;

GRANT EXECUTE ON INS.PRO_UNADJ_COLL_DUE_CALC TO RL_SER_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_SER_TRF_CMS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SER_TRF_ICD;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SER_TRF_IT;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_SER_TRF_IT;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_SER_TRF_ORG;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_SER_TRF_ORG;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_SER_TRF_ORG;

GRANT EXECUTE ON INS.PRO_SERVICE_ID TO RL_SER_TRF_ORG;

GRANT EXECUTE ON INS.PRO_UNADJ_COLL_DUE_CALC TO RL_SER_TRF_ORG;

GRANT EXECUTE ON INS.PRO_AGENT_BILL_COLL_UNDO TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER_SPECIFIC TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_SP_HEAD_UNDER;

GRANT EXECUTE ON INS.PRO_CLIENT_INFO_VALIDATION TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_ID_GENERATION TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_POLICY_INFO_UPD_ST TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_SERVICE_ID TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_UNADJ_COLL_DUE_CALC TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_LOAN_INT_AMOUNT TO RL_SUR_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_RECOVERY_ADJ TO RL_SUR_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_BONUS_CAL_SETL TO RL_SUR_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_TOT_PAYABLE_COMM TO RL_SUR_TRF;

GRANT EXECUTE ON INS.PRO_POL_SURRENDER_VALUE TO RL_SUR_TRF;

GRANT EXECUTE ON INS.PRO_SETTELMENT_LATE_FEE TO RL_SUR_TRF;

GRANT EXECUTE ON INS.PRO_SUR_APP_SL_NO TO RL_SUR_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_TEST;

GRANT EXECUTE ON INS.PRO_RE_PRINT_STATUS TO RL_TEST;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_TEST123;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_TEST_321;

GRANT EXECUTE ON INS.PRO_RE_INSUR_LAPSE_STATEMENT TO RL_TEST_BIPLOB;

GRANT EXECUTE ON INS.PRO_RE_INSUR_STATEMENT_ADVICE TO RL_TEST_BIPLOB;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_TOP_20_MONITOR;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_TOP_20_MONITOR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_TRAINING_HEAD;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_TTTTT;

GRANT EXECUTE ON INS.PRO_IDRA_COLLECTION_INFO TO RL_UMP_DATA_PROCESS_TRF;

GRANT EXECUTE ON INS.PRO_IDRA_POLICY_INFO TO RL_UMP_DATA_PROCESS_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UNDER_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_INS_FIND_POLICY_CAT TO RL_UNDER_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_PROPOSAL_ACCPTBLE_STAT TO RL_UNDER_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_UNDER_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_RE_INSUR_STATUS TO RL_UNDER_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_RISK_DATE_VALIDATE TO RL_UNDER_DEPUTY_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UNDER_RPT_INCHARGE;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UNDER_RPT_TRF;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_UNDER_RPT_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UNDER_SPE_TRF;

GRANT EXECUTE ON INS.PRO_INS_GET_MISSING_POLICY TO RL_UNDER_SPE_TRF;

GRANT EXECUTE ON INS.PRO_INS_MISSING_POLICY TO RL_UNDER_SPE_TRF;

GRANT EXECUTE ON INS.PRO_AGENT_BILL_COLL_UNDO TO RL_UNDO;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UNDO;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UPDATE_LEGER_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_CREATION TO RL_UPDATE_LEGER_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UPDATE_PMIS_DEV;

GRANT EXECUTE ON INS.PRO_ALT_COLLECTION TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PRO_SHORT_PREMIUM TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PRO_UNADJ_PREM_INFO TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PRO_USER_APPROVAL_PRIV TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PRO_AGENT_BILL_COLL_UNDO TO RL_UPGREAD_DEPUTY;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UPGREAD_DEPUTY;

GRANT EXECUTE ON INS.PRO_FIND_ADJ_DATE TO RL_UPGREAD_DEPUTY;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER TO RL_UPGREAD_DEPUTY;

GRANT EXECUTE ON INS.PRO_REVERSE_VOUCHER_SPECIFIC TO RL_UPGREAD_DEPUTY;

GRANT EXECUTE ON INS.PRO_SINGLE_DEMAND_NOTC_PREP TO RL_UPGREAD_DEPUTY;

GRANT EXECUTE ON INS.PRO_UTS_ELEC_BILL_CAL TO RL_UTILITY_PROCESS;

GRANT EXECUTE ON INS.PRO_UTS_RENT_CAL TO RL_UTILITY_PROCESS;

GRANT EXECUTE ON INS.PRO_UTS_WATER_BILL_CAL TO RL_UTILITY_PROCESS;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UTILITY_TRF_RPT;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UTLITY_BILL;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UW;

GRANT EXECUTE ON INS.PRO_INS_FIND_POLICY_CAT TO RL_UW;

GRANT EXECUTE ON INS.PRO_PROPOSAL_ACCPTBLE_STAT TO RL_UW;

GRANT EXECUTE ON INS.PRO_RE_INSUR_STATUS TO RL_UW;

GRANT EXECUTE ON INS.PRO_RISK_DATE_VALIDATE TO RL_UW;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UW_ORG;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UW_TR;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_UW_TRF;

GRANT EXECUTE ON INS.PRO_CONTROL_OFFICE TO RL_UW_TRF;

GRANT EXECUTE ON INS.PRO_INS_FIND_POLICY_CAT TO RL_UW_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_DUE_PREP TO RL_UW_TRF;

GRANT EXECUTE ON INS.PRO_PROPOSAL_ACCPTBLE_STAT TO RL_UW_TRF;

GRANT EXECUTE ON INS.PRO_RE_INSUR_STATUS TO RL_UW_TRF;

GRANT EXECUTE ON INS.PRO_RISK_DATE_VALIDATE TO RL_UW_TRF;

GRANT EXECUTE ON INS.PRO_CODE_NO_PADDING TO RL_VALUATION_RPT_TR;

GRANT EXECUTE ON INS.PRO_REP_SERVICE TO RL_VALUATION_RPT_TR;

GRANT EXECUTE ON INS.PRO_VALUATION_SUMMERY TO RL_VALUATION_RPT_TR;

GRANT EXECUTE ON INS.PRO_GET_SYS_CONFIG_ST TO SECURITY;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_ACC_AGENCY;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_ACC_NB_AGENCY;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_CHANGE_POLICY_STATUS TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_ACC_ORG;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_ACC_RPT;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_CHANGE_POLICY_STATUS TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_ADJUSTMENT TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_ACC_TRF;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_ACC_TRF_IT;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_CHANGE_POLICY_STATUS TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_ACC_TRF_ORG;

GRANT EXECUTE ON INS.PRO_ALT_ALTERATION_CALCULATION TO RL_ALTERATION_APPLICATION_TRF;

GRANT EXECUTE ON INS.PRO_ALT_SPECIAL_CALCULATION TO RL_ALTERATION_APPLICATION_TRF;

GRANT EXECUTE ON INS.PRO_POLICY_ALTERATION TO RL_ALTERATION_APPLICATION_TRF;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_BILL TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_CHANGE_POLICY_STATUS TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_DEV_EMP_PREM_COMM TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_EMP_BONUS_COMM_BILL TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_EMP_COMM_BILL TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_FA_COMM_BILL TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_FA_PER_TRNS_EAR_CAL TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_LOAN_ADJUSTMENT TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_CHANGE_POLICY_STATUS TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_CAHSIAR;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_CASHIER_02;

GRANT EXECUTE ON INS.PRO_LOAN_ADJUSTMENT TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PRO_POLICY_ALTERATION TO RL_CHAQUE_WRITE_PRINT;

GRANT EXECUTE ON INS.PRO_LOAN_ADJUSTMENT TO RL_CHEQUE_TRF_HEAD;

GRANT EXECUTE ON INS.PRO_ANF_LOAN_ISSUE TO RL_CLAIM_PROSS;

GRANT EXECUTE ON INS.PRO_PENSION_COMMUTATION TO RL_CLAIM_PROSS;

GRANT EXECUTE ON INS.PRO_LOAN_ADJUSTMENT TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_ADJUSTMENT TO RL_CLAIM_TRF_ORG;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_CLAIM_TRF_ORG;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_CMS;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_BILL TO RL_CMS;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_CMS;

GRANT EXECUTE ON INS.PRO_FA_COMM_BILL TO RL_CMS;

GRANT EXECUTE ON INS.PRO_FA_PER_TRNS_EAR_CAL TO RL_CMS;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_BILL TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_CHANGE_POLICY_STATUS TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_DEV_EMP_PREM_COMM TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_EMP_BONUS_COMM_BILL TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_EMP_COMM_BILL TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_FA_COMM_BILL TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_FA_PER_TRNS_EAR_CAL TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_BILL TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_CHANGE_POLICY_STATUS TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_DEV_EMP_PREM_COMM TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_EMP_BONUS_COMM_BILL TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_EMP_COMM_BILL TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_FA_COMM_BILL TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_FA_PER_TRNS_EAR_CAL TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_BILL TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_DEV_EMP_PREM_COMM TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_EMP_BONUS_COMM_BILL TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_EMP_COMM_BILL TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_FA_COMM_BILL TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_FA_PER_TRNS_EAR_CAL TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_DEV_EMP_PREM_COMM TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PRO_EMP_BONUS_COMM_BILL TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PRO_EMP_COMM_BILL TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PRO_FA_COMM_BILL TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_BILL TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_DEV_EMP_PREM_COMM TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_EMP_BONUS_COMM_BILL TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_EMP_COMM_BILL TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_FA_COMM_BILL TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_FA_PER_TRNS_EAR_CAL TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_AGENT_BONUS_BILL TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_DEV_EMP_PREM_COMM TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_EMP_BONUS_COMM_BILL TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_EMP_COMM_BILL TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_FA_COMM_BILL TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_FA_PER_TRNS_EAR_CAL TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_LOAN_ADJUSTMENT TO RL_DEATH_CLAIM_TRF;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_CHANGE_POLICY_STATUS TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_INCHARGE_CLAIM;

GRANT EXECUTE ON INS.PRO_ANF_LOAN_ISSUE TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PRO_LOAN_ADJUSTMENT TO RL_INCHARGE_IT_CLAIM;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_IT_HEADOFFICE;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_MIGRATED_COLLECTION_TRF;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_MIGRATE_INVALID;

GRANT EXECUTE ON INS.PRO_FA_PER_TRNS_EAR_CAL TO RL_MODHUMOTI_AGENT_BANKING_TRF;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_NB_FPR;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_NB_ORG;

GRANT EXECUTE ON INS.PRO_DEV_EMP_PREM_COMM TO RL_OPERATOR;

GRANT EXECUTE ON INS.PRO_EMP_BONUS_COMM_BILL TO RL_OPERATOR;

GRANT EXECUTE ON INS.PRO_EMP_COMM_BILL TO RL_OPERATOR;

GRANT EXECUTE ON INS.PRO_FA_COMM_BILL TO RL_OPERATOR;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_OPERATOR;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_PIR_TRF;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_POLICY_DOC_SERVICE;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_POLICY_DOC_TRF;

GRANT EXECUTE ON INS.PRO_ANF_LOAN_ISSUE TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_LOAN_ADJUSTMENT TO RL_POLICY_LOAN_TRF;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_PR_TRF_OFFICE;

GRANT EXECUTE ON INS.PRO_CHANGE_POLICY_STATUS TO RL_PR_TRF_OFFICE;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_PR_TRF_OFFICE;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PRO_CHANGE_POLICY_STATUS TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_SER_UPGRADE_INCHARGE;

GRANT EXECUTE ON INS.PRO_ANF_LOAN_ISSUE TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_LOAN_ADJUSTMENT TO RL_SP_INCHARGE;

GRANT EXECUTE ON INS.PRO_LOAN_ADJUSTMENT TO RL_SUR_TRF;

GRANT EXECUTE ON INS.PRO_ANF_LOAN_ISSUE TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PRO_SYNC_COLL TO RL_UPDATE_SECTION;

GRANT EXECUTE ON INS.PRO_ADV_PREM_COLL_ADJ TO RL_UPGREAD_DEPUTY;

GRANT EXECUTE ON INS.PRO_CHANGE_POLICY_STATUS TO RL_UPGREAD_DEPUTY;

GRANT EXECUTE ON INS.PRO_DAILY_PREM_COLL_ADJ TO RL_UPGREAD_DEPUTY;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_UW;

GRANT EXECUTE ON INS.PRO_FP_COLL_ADJ TO RL_UW_TRF;

GRANT EXECUTE ON INS.PRO_DEV_EMP_PREM_COMM TO SYSADMIN;

GRANT EXECUTE ON INS.PRO_ADV_PREM_CALC_COMMISSION TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_FA_COMM_CALC TO RL_AUDIT;

GRANT EXECUTE ON INS.PRO_ADV_PREM_CALC_COMMISSION TO RL_CMS;

GRANT EXECUTE ON INS.PRO_FA_COMM_CALC TO RL_CMS;

GRANT EXECUTE ON INS.PRO_ADV_PREM_CALC_COMMISSION TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_FA_1ST_PREM_COMM_CALC TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_FA_COMM_CALC TO RL_CMS_ORGOFF_TRF;

GRANT EXECUTE ON INS.PRO_ADV_PREM_CALC_COMMISSION TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_FA_1ST_PREM_COMM_CALC TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_FA_COMM_CALC TO RL_CMS_PROCES;

GRANT EXECUTE ON INS.PRO_ADV_PREM_CALC_COMMISSION TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_FA_1ST_PREM_COMM_CALC TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_FA_COMM_CALC TO RL_CMS_PROCES_ORG;

GRANT EXECUTE ON INS.PRO_FA_1ST_PREM_COMM_CALC TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PRO_FA_COMM_CALC TO RL_CMS_TRF;

GRANT EXECUTE ON INS.PRO_ADV_PREM_CALC_COMMISSION TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_FA_1ST_PREM_COMM_CALC TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_FA_COMM_CALC TO RL_COMMISSION_BILL_ORG;

GRANT EXECUTE ON INS.PRO_ADV_PREM_CALC_COMMISSION TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_FA_1ST_PREM_COMM_CALC TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_FA_COMM_CALC TO RL_COMSN_ORG;

GRANT EXECUTE ON INS.PRO_ADV_PREM_CALC_COMMISSION TO RL_MODHUMOTI_AGENT_BANKING_TRF;

GRANT EXECUTE ON INS.PRO_FA_COMM_CALC TO RL_MODHUMOTI_AGENT_BANKING_TRF;

GRANT EXECUTE ON INS.PRO_FA_1ST_PREM_COMM_CALC TO RL_OPERATOR;

GRANT EXECUTE ON INS.PRO_FA_COMM_CALC TO RL_OPERATOR;

